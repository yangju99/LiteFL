[
    {
        "class_name": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
        "signature": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testDecomposition3x3()",
        "snippet": "    @Test\n    public void testDecomposition3x3() {\n\n        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {\n            { 1,   9,   9 },\n            { 9, 225, 225 },\n            { 9, 225, 625 }\n        });\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-6);\n\n        // as this decomposition permutes lines and columns, the root is NOT triangular\n        // (in fact here it is the lower right part of the matrix which is zero and\n        //  the upper left non-zero)\n        Assert.assertEquals(0.8,  d.getRootMatrix().getEntry(0, 2), 1.0e-15);\n        Assert.assertEquals(25.0, d.getRootMatrix().getEntry(2, 0), 1.0e-15);\n        Assert.assertEquals(0.0,  d.getRootMatrix().getEntry(2, 2), 1.0e-15);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);\n\n    }\n",
        "begin_line": 25,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 32,col 11)",
            "(line 34,col 9)-(line 35,col 64)",
            "(line 40,col 9)-(line 40,col 77)",
            "(line 41,col 9)-(line 41,col 77)",
            "(line 42,col 9)-(line 42,col 77)",
            "(line 44,col 9)-(line 44,col 44)",
            "(line 45,col 9)-(line 45,col 62)",
            "(line 46,col 9)-(line 46,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
        "signature": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testFullRank()",
        "snippet": "    @Test\n    public void testFullRank() {\n\n        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {\n            { 0.1159548705,      0.,           0.,           0.      },\n            { 0.0896442724, 0.1223540781,      0.,           0.      },\n            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },\n            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }\n        });\n\n        RealMatrix m = base.multiply(base.transpose());\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-10);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);\n\n        // the pivoted Cholesky decomposition is *not* unique. Here, the root is\n        // not equal to the original trianbular base matrix\n        Assert.assertTrue(root.subtract(base).getNorm() > 0.3);\n\n    }\n",
        "begin_line": 50,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 58,col 11)",
            "(line 60,col 9)-(line 60,col 55)",
            "(line 62,col 9)-(line 63,col 65)",
            "(line 65,col 9)-(line 65,col 44)",
            "(line 66,col 9)-(line 66,col 62)",
            "(line 67,col 9)-(line 67,col 74)",
            "(line 71,col 9)-(line 71,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
        "signature": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789()",
        "snippet": "    @Test\n    public void testMath789() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);\n\n    }\n",
        "begin_line": 75,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 83,col 11)",
            "(line 84,col 9)-(line 84,col 93)",
            "(line 85,col 9)-(line 85,col 65)",
            "(line 86,col 9)-(line 86,col 76)",
            "(line 88,col 9)-(line 94,col 11)",
            "(line 95,col 9)-(line 95,col 93)",
            "(line 96,col 9)-(line 96,col 65)",
            "(line 97,col 9)-(line 97,col 76)",
            "(line 99,col 9)-(line 105,col 11)",
            "(line 106,col 9)-(line 106,col 93)",
            "(line 107,col 9)-(line 107,col 65)",
            "(line 108,col 9)-(line 108,col 76)"
        ]
    }
]