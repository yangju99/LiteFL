[
    {
        "name": "FastMath.max#3506",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.max(double, double)",
        "snippet": "    public static double max(final double a, final double b) {\n        if (a > b) {\n            return a;\n        }\n        if (a < b) {\n            return b;\n        }\n        /* if either arg is NaN, return NaN */\n        if (a != b) {\n            return Double.NaN;\n        }\n        /* min(+0.0,-0.0) == -0.0 */\n        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n        long bits = Double.doubleToRawLongBits(a);\n        if (bits == 0x8000000000000000L) {\n            return b;\n        }\n        return a;\n    }\n",
        "begin_line": 3506,
        "end_line": 3524,
        "comment": " Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.createRealMatrix#127",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "snippet": "    public static RealMatrix createRealMatrix(double[][] data)\n        throws NullArgumentException, DimensionMismatchException,\n        NoDataException {\n        if (data == null ||\n            data[0] == null) {\n            throw new NullArgumentException();\n        }\n        return (data.length * data[0].length <= 4096) ?\n                new Array2DRowRealMatrix(data) : new BlockRealMatrix(data);\n    }\n",
        "begin_line": 127,
        "end_line": 136,
        "comment": "\n     * Returns a {@link RealMatrix} whose entries are the the values in the\n     * the input array.\n     * <p>The type of matrix returned depends on the dimension. Below\n     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n     * square matrix) which can be stored in a 32kB array, a {@link\n     * Array2DRowRealMatrix} instance is built. Above this threshold a {@link\n     * BlockRealMatrix} instance is built.</p>\n     * <p>The input array is copied, not referenced.</p>\n     *\n     * @param data input array\n     * @return  RealMatrix containing the values of the array\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if {@code data} is not rectangular (not all rows have the same length).\n     * @throws NoDataException if a row or column is empty.\n     * @throws NullArgumentException if either {@code data} or {@code data[0]}\n     * is {@code null}.\n     * @throws DimensionMismatchException if {@code data} is not rectangular.\n     * @see #createRealMatrix(int, int)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.checkSubtractionCompatible#521",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix)",
        "snippet": "    public static void checkSubtractionCompatible(final AnyMatrix left, final AnyMatrix right)\n        throws MatrixDimensionMismatchException {\n        if ((left.getRowDimension()    != right.getRowDimension()) ||\n            (left.getColumnDimension() != right.getColumnDimension())) {\n            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),\n                                                       right.getRowDimension(), right.getColumnDimension());\n        }\n    }\n",
        "begin_line": 521,
        "end_line": 528,
        "comment": "\n     * Check if matrices are subtraction compatible\n     *\n     * @param left Left hand side matrix.\n     * @param right Right hand side matrix.\n     * @throws MatrixDimensionMismatchException if the matrices are not addition\n     * compatible.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.walkInColumnOrder#454",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)",
        "snippet": "    @Override\n    public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor) {\n        final int rows    = getRowDimension();\n        final int columns = getColumnDimension();\n        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n        for (int j = 0; j < columns; ++j) {\n            for (int i = 0; i < rows; ++i) {\n                visitor.visit(i, j, data[i][j]);\n            }\n        }\n        return visitor.end();\n    }\n",
        "begin_line": 454,
        "end_line": 465,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Visit (but don't change) all matrix entries in row order.\n     * <p>Row order starts at upper left and iterating through all elements\n     * of a row from left to right before going to the leftmost element\n     * of the next row.</p>\n     * @param visitor visitor used to process all matrix entries\n     * @see #walkInRowOrder(RealMatrixChangingVisitor)\n     * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @see #walkInColumnOrder(RealMatrixChangingVisitor)\n     * @see #walkInColumnOrder(RealMatrixPreservingVisitor)\n     * @see #walkInColumnOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInColumnOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @see #walkInOptimizedOrder(RealMatrixChangingVisitor)\n     * @see #walkInOptimizedOrder(RealMatrixPreservingVisitor)\n     * @see #walkInOptimizedOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInOptimizedOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\n     * of the walk\n     "
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.getNorm#240",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.getNorm()",
        "snippet": "    public double getNorm() {\n        return walkInColumnOrder(new RealMatrixPreservingVisitor() {\n\n            /** Last row index. */\n            private double endRow;\n\n            /** Sum of absolute values on one column. */\n            private double columnSum;\n\n            /** Maximal sum across all columns. */\n            private double maxColSum;\n\n            /** {@inheritDoc} */\n            public void start(final int rows, final int columns,\n                              final int startRow, final int endRow,\n                              final int startColumn, final int endColumn) {\n                this.endRow = endRow;\n                columnSum   = 0;\n                maxColSum   = 0;\n            }\n\n            /** {@inheritDoc} */\n            public void visit(final int row, final int column, final double value) {\n                columnSum += FastMath.abs(value);\n                if (row == endRow) {\n                    maxColSum = FastMath.max(maxColSum, columnSum);\n                    columnSum = 0;\n                }\n            }\n\n            /** {@inheritDoc} */\n            public double end() {\n                return maxColSum;\n            }\n        });\n    }\n",
        "begin_line": 240,
        "end_line": 275,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Returns the <a href=\"http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html\">\n     * maximum absolute row sum norm</a> of the matrix.\n     *\n     * @return norm\n     "
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.start#253",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.Anonymous-c071e51e-e196-4088-a412-4395913d3510.start(int, int, int, int, int, int)",
        "snippet": "            public void start(final int rows, final int columns,\n                              final int startRow, final int endRow,\n                              final int startColumn, final int endColumn) {\n                this.endRow = endRow;\n                columnSum   = 0;\n                maxColSum   = 0;\n            }\n",
        "begin_line": 253,
        "end_line": 259,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": null,
            "org.apache.commons.math3.linear.AnyMatrix": null
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.visit#262",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.Anonymous-32605738-94cf-486f-8128-8df3c5c5bb67.visit(int, int, double)",
        "snippet": "            public void visit(final int row, final int column, final double value) {\n                columnSum += FastMath.abs(value);\n                if (row == endRow) {\n                    maxColSum = FastMath.max(maxColSum, columnSum);\n                    columnSum = 0;\n                }\n            }\n",
        "begin_line": 262,
        "end_line": 268,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": null,
            "org.apache.commons.math3.linear.AnyMatrix": null
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.end#271",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.Anonymous-f4d1b5bc-20bb-4a37-b4f7-ff54cee118e8.end()",
        "snippet": "            public double end() {\n                return maxColSum;\n            }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": null,
            "org.apache.commons.math3.linear.AnyMatrix": null
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.subtract#95",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.subtract(org.apache.commons.math3.linear.RealMatrix)",
        "snippet": "    public RealMatrix subtract(final RealMatrix m) {\n        // Safety check.\n        MatrixUtils.checkSubtractionCompatible(this, m);\n\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        final RealMatrix out = createMatrix(rowCount, columnCount);\n        for (int row = 0; row < rowCount; ++row) {\n            for (int col = 0; col < columnCount; ++col) {\n                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));\n            }\n        }\n\n        return out;\n    }\n",
        "begin_line": 95,
        "end_line": 109,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Compute the sum of this and m.\n     *\n     * @param m    matrix to be added\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     "
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangularCholeskyDecomposition.RectangularCholeskyDecomposition#62",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "class_name": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition",
        "signature": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition.RectangularCholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix, double)",
        "snippet": "    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            swap[r] = r;\n            for (int i = r + 1; i < order; ++i) {\n                int ii  = index[i];\n                int isi = index[swap[i]];\n                if (c[ii][ii] > c[isi][isi]) {\n                    swap[r] = i;\n                }\n            }\n\n\n            // swap elements\n            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n\n                // check remaining diagonal elements\n                for (int i = r; i < order; ++i) {\n                    if (c[index[i]][index[i]] < -small) {\n                        // there is at least one sufficiently negative diagonal element,\n                        // the symmetric positive semidefinite matrix is wrong\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n\n                // all remaining diagonal elements are close to zero, we consider we have\n                // found the rank of the symmetric positive semidefinite matrix\n                ++r;\n                loop = false;\n\n            } else {\n\n                // transform the matrix\n                final double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt;\n                final double inverse  = 1 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i];\n                    final double e = inverse * c[ii][ir];\n                    b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j];\n                        final double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n\n                // prepare next iteration\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n\n    }\n",
        "begin_line": 62,
        "end_line": 151,
        "comment": "\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangularCholeskyDecomposition.getRootMatrix#159",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "class_name": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition",
        "signature": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition.getRootMatrix()",
        "snippet": "    public RealMatrix getRootMatrix() {\n        return root;\n    }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": " Get the root of the covariance matrix.\n     * The root is the rectangular matrix <code>B</code> such that\n     * the covariance matrix is equal to <code>B.B<sup>T</sup></code>\n     * @return root of the square matrix\n     * @see #getRank()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.sqrt#374",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "snippet": "    public static double sqrt(final double a) {\n        return Math.sqrt(a);\n    }\n",
        "begin_line": 374,
        "end_line": 376,
        "comment": " Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.checkMultiplicationCompatible#538",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix)",
        "snippet": "    public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\n        throws DimensionMismatchException {\n\n        if (left.getColumnDimension() != right.getRowDimension()) {\n            throw new DimensionMismatchException(left.getColumnDimension(),\n                                                 right.getRowDimension());\n        }\n    }\n",
        "begin_line": 538,
        "end_line": 545,
        "comment": "\n     * Check if matrices are multiplication compatible\n     *\n     * @param left Left hand side matrix.\n     * @param right Right hand side matrix.\n     * @throws DimensionMismatchException if matrices are not multiplication\n     * compatible.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultRealMatrixPreservingVisitor.start#32",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor.java",
        "class_name": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor",
        "signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int)",
        "snippet": "    public void start(int rows, int columns,\n                      int startRow, int endRow, int startColumn, int endColumn) {\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealMatrixPreservingVisitor": "\n     * Start visiting a matrix.\n     * <p>This method is called once before any entry of the matrix is visited.</p>\n     * @param rows number of rows of the matrix\n     * @param columns number of columns of the matrix\n     * @param startRow Initial row index\n     * @param endRow Final row index (inclusive)\n     * @param startColumn Initial column index\n     * @param endColumn Final column index (inclusive)\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultRealMatrixPreservingVisitor.end#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor.java",
        "class_name": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor",
        "signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.end()",
        "snippet": "    public double end() {\n        return 0;\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealMatrixPreservingVisitor": "\n     * End visiting a matrix.\n     * <p>This method is called once after all entries of the matrix have been visited.</p>\n     * @return the value that the <code>walkInXxxOrder</code> must return\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.walkInRowOrder#390",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)",
        "snippet": "    @Override\n    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\n        final int rows    = getRowDimension();\n        final int columns = getColumnDimension();\n        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n        for (int i = 0; i < rows; ++i) {\n            final double[] rowI = data[i];\n            for (int j = 0; j < columns; ++j) {\n                visitor.visit(i, j, rowI[j]);\n            }\n        }\n        return visitor.end();\n    }\n",
        "begin_line": 390,
        "end_line": 402,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Visit (but don't change) all matrix entries in row order.\n     * <p>Row order starts at upper left and iterating through all elements\n     * of a row from left to right before going to the leftmost element\n     * of the next row.</p>\n     * @param visitor visitor used to process all matrix entries\n     * @see #walkInRowOrder(RealMatrixChangingVisitor)\n     * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @see #walkInColumnOrder(RealMatrixChangingVisitor)\n     * @see #walkInColumnOrder(RealMatrixPreservingVisitor)\n     * @see #walkInColumnOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInColumnOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @see #walkInOptimizedOrder(RealMatrixChangingVisitor)\n     * @see #walkInOptimizedOrder(RealMatrixPreservingVisitor)\n     * @see #walkInOptimizedOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInOptimizedOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\n     * of the walk\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.transpose#588",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.transpose()",
        "snippet": "    public RealMatrix transpose() {\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        final RealMatrix out = createMatrix(nCols, nRows);\n        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n\n            /** {@inheritDoc} */\n            @Override\n            public void visit(final int row, final int column, final double value) {\n                out.setEntry(column, row, value);\n            }\n\n        });\n\n        return out;\n    }\n",
        "begin_line": 588,
        "end_line": 603,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Returns the transpose of this matrix.\n     *\n     * @return transpose matrix\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.visit#595",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.Anonymous-726239e8-4cac-4156-88f3-ca9c782b9990.visit(int, int, double)",
        "snippet": "            @Override\n            public void visit(final int row, final int column, final double value) {\n                out.setEntry(column, row, value);\n            }\n",
        "begin_line": 595,
        "end_line": 598,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": null,
            "org.apache.commons.math3.linear.AnyMatrix": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.multiply#140",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.multiply(org.apache.commons.math3.linear.RealMatrix)",
        "snippet": "    public RealMatrix multiply(final RealMatrix m) {\n        // Safety check.\n        MatrixUtils.checkMultiplicationCompatible(this, m);\n\n        final int nRows = getRowDimension();\n        final int nCols = m.getColumnDimension();\n        final int nSum  = getColumnDimension();\n        final RealMatrix out = createMatrix(nRows, nCols);\n        for (int row = 0; row < nRows; ++row) {\n            for (int col = 0; col < nCols; ++col) {\n                double sum = 0;\n                for (int i = 0; i < nSum; ++i) {\n                    sum += getEntry(row, i) * m.getEntry(i, col);\n                }\n                out.setEntry(row, col, sum);\n            }\n        }\n\n        return out;\n    }\n",
        "begin_line": 140,
        "end_line": 159,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Compute the sum of this and m.\n     *\n     * @param m    matrix to be added\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.walkInOptimizedOrder#859",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)",
        "snippet": "    public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\n        return walkInRowOrder(visitor);\n    }\n",
        "begin_line": 859,
        "end_line": 861,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Visit (but don't change) all matrix entries in row order.\n     * <p>Row order starts at upper left and iterating through all elements\n     * of a row from left to right before going to the leftmost element\n     * of the next row.</p>\n     * @param visitor visitor used to process all matrix entries\n     * @see #walkInRowOrder(RealMatrixChangingVisitor)\n     * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @see #walkInColumnOrder(RealMatrixChangingVisitor)\n     * @see #walkInColumnOrder(RealMatrixPreservingVisitor)\n     * @see #walkInColumnOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInColumnOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @see #walkInOptimizedOrder(RealMatrixChangingVisitor)\n     * @see #walkInOptimizedOrder(RealMatrixPreservingVisitor)\n     * @see #walkInOptimizedOrder(RealMatrixChangingVisitor, int, int, int, int)\n     * @see #walkInOptimizedOrder(RealMatrixPreservingVisitor, int, int, int, int)\n     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\n     * of the walk\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.abs#2991",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(double)",
        "snippet": "    public static double abs(double x) {\n        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n    }\n",
        "begin_line": 2991,
        "end_line": 2993,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.createRealMatrix#80",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int, int)",
        "snippet": "    public static RealMatrix createRealMatrix(final int rows, final int columns) {\n        return (rows * columns <= 4096) ?\n                new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n    }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\n     * Returns a {@link RealMatrix} with specified dimensions.\n     * <p>The type of matrix returned depends on the dimension. Below\n     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n     * square matrix) which can be stored in a 32kB array, a {@link\n     * Array2DRowRealMatrix} instance is built. Above this threshold a {@link\n     * BlockRealMatrix} instance is built.</p>\n     * <p>The matrix elements are all set to 0.0.</p>\n     * @param rows number of rows of the matrix\n     * @param columns number of columns of the matrix\n     * @return  RealMatrix with specified dimensions\n     * @see #createRealMatrix(double[][])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.Array2DRowRealMatrix#55",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int)",
        "snippet": "    public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\n        super(rowDimension, columnDimension);\n        data = new double[rowDimension][columnDimension];\n    }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n     * Create a new RealMatrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows in the new matrix.\n     * @param columnDimension Number of columns in the new matrix.\n     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n     * if the row or column dimension is not positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.createMatrix#135",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.createMatrix(int, int)",
        "snippet": "    @Override\n    public RealMatrix createMatrix(final int rowDimension,\n                                   final int columnDimension) {\n        return new Array2DRowRealMatrix(rowDimension, columnDimension);\n    }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Create a new RealMatrix of the same type as the instance with the supplied\n     * row and column dimensions.\n     *\n     * @param rowDimension  the number of rows in the new matrix\n     * @param columnDimension  the number of columns in the new matrix\n     * @return a new matrix of the same type as the instance\n     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n     * if row or column dimension is not positive.\n     * @since 2.0\n     "
        },
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.getData#244",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.getData()",
        "snippet": "    @Override\n    public double[][] getData() {\n        return copyOut();\n    }\n",
        "begin_line": 244,
        "end_line": 247,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Returns matrix entries as a two-dimensional array.\n     *\n     * @return    2-dimensional array of entries\n     "
        },
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.setEntry#300",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, double)",
        "snippet": "    @Override\n    public void setEntry(final int row, final int column, final double value) {\n        MatrixUtils.checkMatrixIndex(this, row, column);\n        data[row][column] = value;\n    }\n",
        "begin_line": 300,
        "end_line": 304,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Set the entry in the specified row and column.\n     * Row and column indices start at 0.\n     *\n     * @param row Row location of entry to be set.\n     * @param column Column location of entry to be set.\n     * @param value matrix entry to be set.\n     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n     * the row or column index is not valid\n     * @since 2.0\n     "
        },
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.AbstractRealMatrix#62",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix(int, int)",
        "snippet": "    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {\n        if (rowDimension < 1) {\n            throw new NotStrictlyPositiveException(rowDimension);\n        }\n        if (columnDimension < 1) {\n            throw new NotStrictlyPositiveException(columnDimension);\n        }\n    }\n",
        "begin_line": 62,
        "end_line": 69,
        "comment": "\n     * Create a new RealMatrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension  the number of rows in the new matrix\n     * @param columnDimension  the number of columns in the new matrix\n     * @throws NotStrictlyPositiveException if row or column dimension is not positive\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#42",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math3.util.CompositeFormat",
        "signature": "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "snippet": "    public static NumberFormat getDefaultNumberFormat() {\n        return getDefaultNumberFormat(Locale.getDefault());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance()} with the only customizing that the\n     * maximum number of fraction digits is set to 10.\n     * @return the default number format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#112",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public RealMatrixFormat(final String prefix, final String suffix,\n                            final String rowPrefix, final String rowSuffix,\n                            final String rowSeparator, final String columnSeparator) {\n        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,\n                CompositeFormat.getDefaultNumberFormat());\n    }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "\n     * Create an instance with custom prefix, suffix and separator.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param rowPrefix row prefix to use instead of the default \"{\"\n     * @param rowSuffix row suffix to use instead of the default \"}\"\n     * @param rowSeparator tow separator to use instead of the default \";\"\n     * @param columnSeparator column separator to use instead of the default \", \"\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealMatrixFormat.getInstance#214",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getInstance()",
        "snippet": "    public static RealMatrixFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * Returns the default real vector format for the current locale.\n     * @return the default real vector format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.checkMatrixIndex#386",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int)",
        "snippet": "    public static void checkMatrixIndex(final AnyMatrix m,\n                                        final int row, final int column)\n        throws OutOfRangeException {\n        checkRowIndex(m, row);\n        checkColumnIndex(m, column);\n    }\n",
        "begin_line": 386,
        "end_line": 391,
        "comment": "\n     * Check if matrix indices are valid.\n     *\n     * @param m Matrix.\n     * @param row Row index to check.\n     * @param column Column index to check.\n     * @throws OutOfRangeException if {@code row} or {@code column} is not\n     * a valid index.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.checkRowIndex#400",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int)",
        "snippet": "    public static void checkRowIndex(final AnyMatrix m, final int row)\n        throws OutOfRangeException {\n        if (row < 0 ||\n            row >= m.getRowDimension()) {\n            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,\n                                          row, 0, m.getRowDimension() - 1);\n        }\n    }\n",
        "begin_line": 400,
        "end_line": 407,
        "comment": "\n     * Check if a row index is valid.\n     *\n     * @param m Matrix.\n     * @param row Row index to check.\n     * @throws OutOfRangeException if {@code row} is not a valid index.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "MatrixUtils.checkColumnIndex#416",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int)",
        "snippet": "    public static void checkColumnIndex(final AnyMatrix m, final int column)\n        throws OutOfRangeException {\n        if (column < 0 || column >= m.getColumnDimension()) {\n            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,\n                                           column, 0, m.getColumnDimension() - 1);\n        }\n    }\n",
        "begin_line": 416,
        "end_line": 422,
        "comment": "\n     * Check if a column index is valid.\n     *\n     * @param m Matrix.\n     * @param column Column index to check.\n     * @throws OutOfRangeException if {@code column} is not a valid index.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.getEntry#293",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int)",
        "snippet": "    @Override\n    public double getEntry(final int row, final int column) {\n        MatrixUtils.checkMatrixIndex(this, row, column);\n        return data[row][column];\n    }\n",
        "begin_line": 293,
        "end_line": 297,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Get the entry in the specified row and column.\n     * Row and column indices start at 0.\n     *\n     * @param row Row location of entry to be fetched.\n     * @param column Column location of entry to be fetched.\n     * @return the matrix entry at {@code (row, column)}.\n     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n     * row or column index is not valid.\n     "
        },
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.getRowDimension#321",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension()",
        "snippet": "    @Override\n    public int getRowDimension() {\n        return (data == null) ? 0 : data.length;\n    }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": "\n     * Returns the number of rows of this matrix.\n     *\n     * @return the number of rows.\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.getColumnDimension#327",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension()",
        "snippet": "    @Override\n    public int getColumnDimension() {\n        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n    }\n",
        "begin_line": 327,
        "end_line": 330,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": "\n     * Returns the number of columns of this matrix.\n     *\n     * @return the number of columns.\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.copyOut#505",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.copyOut()",
        "snippet": "    private double[][] copyOut() {\n        final int nRows = this.getRowDimension();\n        final double[][] out = new double[nRows][this.getColumnDimension()];\n        // can't copy 2-d array in one shot, otherwise get row references\n        for (int i = 0; i < nRows; i++) {\n            System.arraycopy(data[i], 0, out[i], 0, data[i].length);\n        }\n        return out;\n    }\n",
        "begin_line": 505,
        "end_line": 513,
        "comment": "\n     * Get a fresh copy of the underlying data array.\n     *\n     * @return a copy of the underlying data array.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "MathUtils.checkNotNull#262",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/MathUtils.java",
        "class_name": "org.apache.commons.math3.util.MathUtils",
        "signature": "org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object)",
        "snippet": "    public static void checkNotNull(Object o)\n        throws NullArgumentException {\n        if (o == null) {\n            throw new NullArgumentException();\n        }\n    }\n",
        "begin_line": 262,
        "end_line": 267,
        "comment": "\n     * Checks that an object is not null.\n     *\n     * @param o Object to be checked.\n     * @throws NullArgumentException if {@code o} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math3.util.CompositeFormat",
        "signature": "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    public static NumberFormat getDefaultNumberFormat(final Locale locale) {\n        final NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(10);\n        return nf;\n    }\n",
        "begin_line": 53,
        "end_line": 57,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing that the maximum number of fraction digits is set to 10.\n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#98",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat)",
        "snippet": "    public RealMatrixFormat(final NumberFormat format) {\n        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,\n                DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR, format);\n    }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "\n     * Create an instance with a custom number format for components.\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#130",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)",
        "snippet": "    public RealMatrixFormat(final String prefix, final String suffix,\n                            final String rowPrefix, final String rowSuffix,\n                            final String rowSeparator, final String columnSeparator,\n                            final NumberFormat format) {\n        this.prefix            = prefix;\n        this.suffix            = suffix;\n        this.rowPrefix         = rowPrefix;\n        this.rowSuffix         = rowSuffix;\n        this.rowSeparator      = rowSeparator;\n        this.columnSeparator   = columnSeparator;\n        this.format            = format;\n        // disable grouping to prevent parsing problems\n        this.format.setGroupingUsed(false);\n    }\n",
        "begin_line": 130,
        "end_line": 143,
        "comment": "\n     * Create an instance with custom prefix, suffix, separator and format\n     * for components.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param rowPrefix row prefix to use instead of the default \"{\"\n     * @param rowSuffix row suffix to use instead of the default \"}\"\n     * @param rowSeparator tow separator to use instead of the default \";\"\n     * @param columnSeparator column separator to use instead of the default \", \"\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealMatrixFormat.getFormat#206",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getFormat()",
        "snippet": "    public NumberFormat getFormat() {\n        return format;\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Get the components format.\n     * @return components format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealMatrixFormat.getInstance#223",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale)",
        "snippet": "    public static RealMatrixFormat getInstance(final Locale locale) {\n        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n     * Returns the default real vector format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the real vector format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.Array2DRowRealMatrix#73",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][])",
        "snippet": "    public Array2DRowRealMatrix(final double[][] d)\n        throws DimensionMismatchException, NoDataException, NullArgumentException {\n        copyIn(d);\n    }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "\n     * Create a new {@code RealMatrix} using the input array as the underlying\n     * data array.\n     * <p>The input array is copied, not referenced. This constructor has\n     * the same effect as calling {@link #Array2DRowRealMatrix(double[][], boolean)}\n     * with the second argument set to {@code true}.</p>\n     *\n     * @param d Data for the new matrix.\n     * @throws DimensionMismatchException if {@code d} is not rectangular.\n     * @throws NoDataException if {@code d} row or colum dimension is zero.\n     * @throws NullArgumentException if {@code d} is {@code null}.\n     * @see #Array2DRowRealMatrix(double[][], boolean)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.setSubMatrix#259",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int)",
        "snippet": "    @Override\n    public void setSubMatrix(final double[][] subMatrix,\n                             final int row, final int column) {\n        if (data == null) {\n            if (row > 0) {\n                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n            }\n            if (column > 0) {\n                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n            }\n            MathUtils.checkNotNull(subMatrix);\n            final int nRows = subMatrix.length;\n            if (nRows == 0) {\n                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n            }\n\n            final int nCols = subMatrix[0].length;\n            if (nCols == 0) {\n                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n            }\n            data = new double[subMatrix.length][nCols];\n            for (int i = 0; i < data.length; ++i) {\n                if (subMatrix[i].length != nCols) {\n                    throw new DimensionMismatchException(subMatrix[i].length, nCols);\n                }\n                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n            }\n        } else {\n            super.setSubMatrix(subMatrix, row, column);\n        }\n\n    }\n",
        "begin_line": 259,
        "end_line": 290,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n    * Replace the submatrix starting at <code>row, column</code> using data in\n    * the input <code>subMatrix</code> array. Indexes are 0-based.\n    * <p>\n    * Example:<br>\n    * Starting with <pre>\n    * 1  2  3  4\n    * 5  6  7  8\n    * 9  0  1  2\n    * </pre>\n    * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking\n    * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n    * 1  2  3  4\n    * 5  3  4  8\n    * 9  5  6  2\n    * </pre></p>\n    *\n    * @param subMatrix  array containing the submatrix replacement data\n    * @param row  row coordinate of the top, left element to be replaced\n    * @param column  column coordinate of the top, left element to be replaced\n    * @throws ZeroException if {@code subMatrix} does not contain at least one column.\n    * @throws OutOfRangeException if {@code subMatrix} does not fit into\n    * this matrix from element in {@code (row, column)}.\n    * @throws DimensionMismatchException if {@code subMatrix} is not rectangular.\n    * (not all rows have the same length) or empty.\n    * @throws NullArgumentException if {@code subMatrix} is {@code null}.\n    * @since 2.0\n    "
        },
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "Array2DRowRealMatrix.copyIn#524",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix.copyIn(double[][])",
        "snippet": "    private void copyIn(final double[][] in)\n        throws DimensionMismatchException, NoDataException, NullArgumentException {\n        setSubMatrix(in, 0, 0);\n    }\n",
        "begin_line": 524,
        "end_line": 527,
        "comment": "\n     * Replace data with a fresh copy of the input array.\n     *\n     * @param in Data to copy.\n     * @throws NoDataException if the input array is empty.\n     * @throws DimensionMismatchException if the input array is not rectangular.\n     * @throws NullArgumentException if\n     * the input array is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRealMatrix.AbstractRealMatrix#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix()",
        "snippet": "    protected AbstractRealMatrix() {}\n",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Creates a matrix with no data\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    }
]