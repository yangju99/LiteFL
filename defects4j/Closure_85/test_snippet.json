[
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new UnreachableCodeElimination(compiler, removeNoOpStatements);\n  }\n",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.setUp()",
        "snippet": "  @Override public void setUp() throws Exception {\n    super.setUp();\n    removeNoOpStatements = true;\n  }\n",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 18)",
            "(line 33,col 5)-(line 33,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    // switch statement with stuff after \"return\"\n    test(\"function foo(){switch(foo){case 1:x=1;return;break;\" +\n         \"case 2:{x=2;return;break}default:}}\",\n         \"function foo(){switch(foo){case 1:x=1;return;\" +\n         \"case 2:{x=2}default:}}\");\n\n    // if/else statements with returns\n    test(\"function bar(){if(foo)x=1;else if(bar){return;x=2}\" +\n         \"else{x=3;return;x=4}return 5;x=5}\",\n         \"function bar(){if(foo)x=1;else if(bar){return}\" +\n         \"else{x=3;return}return 5}\");\n\n    // if statements without blocks\n    test(\"function foo(){if(x==3)return;x=4;y++;while(y==4){return;x=3}}\",\n         \"function foo(){if(x==3)return;x=4;y++;while(y==4){return}}\");\n\n    // for/do/while loops\n    test(\"function baz(){for(i=0;i<n;i++){x=3;break;x=4}\" +\n         \"do{x=2;break;x=4}while(x==4);\" +\n         \"while(i<4){x=3;return;x=6}}\",\n         \"function baz(){for(i=0;i<n;){x=3;break}\" +\n         \"do{x=2;break}while(x==4);\" +\n         \"while(i<4){x=3;return}}\");\n\n    // return statements on the same level as conditionals\n    test(\"function foo(){if(x==3){return}return 5;while(y==4){x++;return;x=4}}\",\n         \"function foo(){if(x==3){return}return 5}\");\n\n    // return statements on the same level as conditionals\n    test(\"function foo(){return 3;for(;y==4;){x++;return;x=4}}\",\n         \"function foo(){return 3}\");\n\n    // try/catch statements\n    test(\"function foo(){try{x=3;return x+1;x=5}catch(e){x=4;return 5;x=5}}\",\n         \"function foo(){try{x=3;return x+1}catch(e){x=4;return 5}}\");\n\n    // try/finally statements\n    test(\"function foo(){try{x=3;return x+1;x=5}finally{x=4;return 5;x=5}}\",\n         \"function foo(){try{x=3;return x+1}finally{x=4;return 5}}\");\n\n    // try/catch/finally statements\n    test(\"function foo(){try{x=3;return x+1;x=5}catch(e){x=3;return;x=2}\" +\n         \"finally{x=4;return 5;x=5}}\",\n\n         \"function foo(){try{x=3;return x+1}catch(e){x=3;return}\" +\n         \"finally{x=4;return 5}}\");\n\n    // test a combination of blocks\n    test(\"function foo(){x=3;if(x==4){x=5;return;x=6}else{x=7}return 5;x=3}\",\n         \"function foo(){x=3;if(x==4){x=5;return}else{x=7}return 5}\");\n\n    // test removing multiple statements\n    test(\"function foo() { return 1; var x = 2; var y = 10; return 2;}\",\n         \"function foo() { var y; var x; return 1}\");\n\n    test(\"function foo() { return 1; x = 2; y = 10; return 2;}\",\n         \"function foo(){ return 1}\");\n  }\n",
        "begin_line": 36,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 41,col 35)",
            "(line 44,col 5)-(line 47,col 38)",
            "(line 50,col 5)-(line 51,col 71)",
            "(line 54,col 5)-(line 59,col 36)",
            "(line 62,col 5)-(line 63,col 53)",
            "(line 66,col 5)-(line 67,col 37)",
            "(line 70,col 5)-(line 71,col 70)",
            "(line 74,col 5)-(line 75,col 69)",
            "(line 78,col 5)-(line 82,col 35)",
            "(line 85,col 5)-(line 86,col 70)",
            "(line 89,col 5)-(line 90,col 53)",
            "(line 92,col 5)-(line 93,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testRemoveUselessNameStatements()",
        "snippet": "  public void testRemoveUselessNameStatements() {\n    test(\"a;\", \"\");\n    test(\"a.b;\", \"\");\n    test(\"a.b.MyClass.prototype.memberName;\", \"\");\n  }\n",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 19)",
            "(line 98,col 5)-(line 98,col 21)",
            "(line 99,col 5)-(line 99,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testRemoveUselessStrings()",
        "snippet": "  public void testRemoveUselessStrings() {\n    test(\"'a';\", \"\");\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testNoRemoveUseStrict()",
        "snippet": "  public void testNoRemoveUseStrict() {\n    test(\"'use strict';\", \"'use strict'\");\n  }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testNoRemoveUselessNameStatements()",
        "snippet": "  public void testNoRemoveUselessNameStatements() {\n    removeNoOpStatements = false;\n    testSame(\"a;\");\n    testSame(\"a.b;\");\n    testSame(\"a.b.MyClass.prototype.memberName;\");\n  }\n",
        "begin_line": 110,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 33)",
            "(line 112,col 5)-(line 112,col 19)",
            "(line 113,col 5)-(line 113,col 21)",
            "(line 114,col 5)-(line 114,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testRemoveDo()",
        "snippet": "  public void testRemoveDo() {\n    test(\"do { print(1); break } while(1)\", \"do { print(1); break } while(1)\");\n    test(\"while(1) { break; do { print(1); break } while(1) }\",\n         \"while(1) { break; do {} while(1) }\");\n  }\n",
        "begin_line": 117,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 79)",
            "(line 119,col 5)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testRemoveUselessLiteralValueStatements()",
        "snippet": "  public void testRemoveUselessLiteralValueStatements() {\n    test(\"true;\", \"\");\n    test(\"'hi';\", \"\");\n    test(\"if (x) 1;\", \"\");\n    test(\"while (x) 1;\", \"while (x);\");\n    test(\"do 1; while (x);\", \"do ; while (x);\");\n    test(\"for (;;) 1;\", \"for (;;);\");\n    test(\"switch(x){case 1:true;case 2:'hi';default:true}\",\n         \"switch(x){case 1:case 2:default:}\");\n  }\n",
        "begin_line": 123,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 22)",
            "(line 125,col 5)-(line 125,col 22)",
            "(line 126,col 5)-(line 126,col 26)",
            "(line 127,col 5)-(line 127,col 39)",
            "(line 128,col 5)-(line 128,col 48)",
            "(line 129,col 5)-(line 129,col 37)",
            "(line 130,col 5)-(line 131,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testConditionalDeadCode()",
        "snippet": "  public void testConditionalDeadCode() {\n    test(\"function f() { if (1) return 5; else return 5; x = 1}\",\n        \"function f() { if (1) return 5; else return 5; }\");\n  }\n",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 136,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testSwitchCase()",
        "snippet": "  public void testSwitchCase() {\n    test(\"function f() { switch(x) { default: return 5; foo()}}\",\n         \"function f() { switch(x) { default: return 5;}}\");\n    test(\"function f() { switch(x) { default: return; case 1: foo(); bar()}}\",\n         \"function f() { switch(x) { default: return; case 1: foo(); bar()}}\");\n    test(\"function f() { switch(x) { default: return; case 1: return 5;bar()}}\",\n         \"function f() { switch(x) { default: return; case 1: return 5;}}\");\n  }\n",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 141,col 60)",
            "(line 142,col 5)-(line 143,col 79)",
            "(line 144,col 5)-(line 145,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testTryCatchFinally()",
        "snippet": "  public void testTryCatchFinally() {\n    testSame(\"try {foo()} catch (e) {bar()}\");\n    testSame(\"try { try {foo()} catch (e) {bar()}} catch (x) {bar()}\");\n    test(\"try {var x = 1} catch (e) {e()}\", \"try {var x = 1} finally {}\");\n    test(\"try {var x = 1} catch (e) {e()} finally {x()}\",\n        \" try {var x = 1}                 finally {x()}\");\n    test(\"try {var x = 1} catch (e) {e()} finally {}\",\n        \"try {var x = 1} finally {}\");\n    testSame(\"try {var x = 1} finally {x()}\");\n    testSame(\"try {var x = 1} finally {}\");\n    test(\"function f() {return; try{var x = 1}catch(e){} }\",\n         \"function f() {var x;}\");\n  }\n",
        "begin_line": 148,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 46)",
            "(line 150,col 5)-(line 150,col 71)",
            "(line 151,col 5)-(line 151,col 74)",
            "(line 152,col 5)-(line 153,col 58)",
            "(line 154,col 5)-(line 155,col 38)",
            "(line 156,col 5)-(line 156,col 46)",
            "(line 157,col 5)-(line 157,col 43)",
            "(line 158,col 5)-(line 159,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testRemovalRequiresRedeclaration()",
        "snippet": "  public void testRemovalRequiresRedeclaration() {\n    test(\"while(1) { break; var x = 1}\", \"var x; while(1) { break } \");\n    test(\"while(1) { break; var x=1; var y=1}\",\n        \"var y; var x; while(1) { break } \");\n  }\n",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 71)",
            "(line 164,col 5)-(line 165,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testAssignPropertyOnCreatedObject()",
        "snippet": "  public void testAssignPropertyOnCreatedObject() {\n    testSame(\"this.foo = 3;\");\n    testSame(\"a.foo = 3;\");\n    testSame(\"bar().foo = 3;\");\n    testSame(\"({}).foo = bar();\");\n    testSame(\"(new X()).foo = 3;\");\n\n    test(\"({}).foo = 3;\", \"\");\n    test(\"(function() {}).prototype.toString = function(){};\", \"\");\n    test(\"(function() {}).prototype['toString'] = function(){};\", \"\");\n    test(\"(function() {}).prototype[f] = function(){};\", \"\");\n  }\n",
        "begin_line": 168,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 30)",
            "(line 170,col 5)-(line 170,col 27)",
            "(line 171,col 5)-(line 171,col 31)",
            "(line 172,col 5)-(line 172,col 34)",
            "(line 173,col 5)-(line 173,col 35)",
            "(line 175,col 5)-(line 175,col 30)",
            "(line 176,col 5)-(line 176,col 67)",
            "(line 177,col 5)-(line 177,col 70)",
            "(line 178,col 5)-(line 178,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testUnlessUnconditionalReturn()",
        "snippet": "  public void testUnlessUnconditionalReturn() {\n    test(\"function foo() { return }\", \" function foo() { }\");\n    test(\"function foo() { return; return; x=1 }\", \"function foo() { }\");\n    test(\"function foo() { return; return; var x=1}\", \"function foo() {var x}\");\n    test(\"function foo() { return; function bar() {} }\",\n         \"function foo() {         function bar() {} }\" );\n    testSame(\"function foo() { return 5 }\");\n\n\n    test(\"function() {switch (a) { case 'a': return}}\",\n         \"function() {switch (a) { case 'a': }}\");\n    testSame(\"function() {switch (a) { case 'a': case foo(): }}\");\n    testSame(\"function() {switch (a) { default: return; case 'a': alert(1)}}\");\n    testSame(\"function() {switch (a) { case 'a': return; default: alert(1)}}\");\n  }\n",
        "begin_line": 181,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 61)",
            "(line 183,col 5)-(line 183,col 73)",
            "(line 184,col 5)-(line 184,col 80)",
            "(line 185,col 5)-(line 186,col 58)",
            "(line 187,col 5)-(line 187,col 44)",
            "(line 190,col 5)-(line 191,col 50)",
            "(line 192,col 5)-(line 192,col 66)",
            "(line 193,col 5)-(line 193,col 79)",
            "(line 194,col 5)-(line 194,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testUnlessUnconditionalContinue()",
        "snippet": "  public void testUnlessUnconditionalContinue() {\n    test(\"for(;1;) {continue}\", \" for(;1;) {}\");\n    test(\"for(;0;) {continue}\", \" for(;0;) {}\");\n\n    testSame(\"X: for(;1;) { for(;1;) { if (x()) {continue X} x = 1}}\");\n    test(\"for(;1;) { X: for(;1;) { if (x()) {continue X} }}\",\n         \"for(;1;) { X: for(;1;) { if (x()) {}}}\");\n\n    test(\"do { continue } while(1);\", \"do {  } while(1);\");\n  }\n",
        "begin_line": 197,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 48)",
            "(line 199,col 5)-(line 199,col 48)",
            "(line 201,col 5)-(line 201,col 71)",
            "(line 202,col 5)-(line 203,col 51)",
            "(line 205,col 5)-(line 205,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testUnlessUnconditonalBreak()",
        "snippet": "  public void testUnlessUnconditonalBreak() {\n    test(\"switch (a) { case 'a': break }\", \"switch (a) { case 'a': }\");\n    test(\"switch (a) { case 'a': break; case foo(): }\",\n         \"switch (a) { case 'a':        case foo(): }\");\n    test(\"switch (a) { default: break; case 'a': }\",\n         \"switch (a) { default:        case 'a': }\");\n\n    testSame(\"switch (a) { case 'a': alert(a); break; default: alert(a); }\");\n    testSame(\"switch (a) { default: alert(a); break; case 'a': alert(a); }\");\n\n\n    test(\"X: {switch (a) { case 'a': break X}}\",\n         \"X: {switch (a) { case 'a': }}\");\n\n    testSame(\"X: {switch (a) { case 'a': if (a()) {break X}  a = 1}}\");\n    test(\"X: {switch (a) { case 'a': if (a()) {break X}}}\",\n         \"X: {switch (a) { case 'a': if (a()) {}}}\");\n\n    test(\"X: {switch (a) { case 'a': if (a()) {break X}}}\",\n         \"X: {switch (a) { case 'a': if (a()) {}}}\");\n\n\n    testSame(\"do { break } while(1);\");\n    testSame(\"for(;1;) { break }\");\n  }\n",
        "begin_line": 208,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 71)",
            "(line 210,col 5)-(line 211,col 56)",
            "(line 212,col 5)-(line 213,col 53)",
            "(line 215,col 5)-(line 215,col 77)",
            "(line 216,col 5)-(line 216,col 77)",
            "(line 219,col 5)-(line 220,col 42)",
            "(line 222,col 5)-(line 222,col 71)",
            "(line 223,col 5)-(line 224,col 53)",
            "(line 226,col 5)-(line 227,col 53)",
            "(line 230,col 5)-(line 230,col 39)",
            "(line 231,col 5)-(line 231,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testCascadedRemovalOfUnlessUnconditonalJumps()",
        "snippet": "  public void testCascadedRemovalOfUnlessUnconditonalJumps() {\n    test(\"switch (a) { case 'a': break; case 'b': break; case 'c': break }\",\n         \"switch (a) { case 'a': break; case 'b': case 'c': }\");\n    // Only one break removed per pass.\n    test(\"switch (a) { case 'a': break; case 'b': case 'c': }\",\n         \"switch (a) { case 'a': case 'b': case 'c': }\");\n\n    test(\"function foo() {\" +\n      \"  switch (a) { case 'a':return; case 'b':return; case 'c':return }}\",\n      \"function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}\");\n    test(\"function foo() {\" +\n      \"  switch (a) { case 'a':return; case 'b': case 'c': }}\",\n      \"function foo() { switch (a) { case 'a': case 'b': case 'c': }}\");\n\n    testSame(\"function foo() {\" +\n             \"switch (a) { case 'a':return 2; case 'b':return 1}}\");\n  }\n",
        "begin_line": 234,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 236,col 64)",
            "(line 238,col 5)-(line 239,col 57)",
            "(line 241,col 5)-(line 243,col 79)",
            "(line 244,col 5)-(line 246,col 72)",
            "(line 248,col 5)-(line 249,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeEliminationTest.testIssue311()",
        "snippet": "  public void testIssue311() {\n    test(\"function a(b) {\\n\" +\n         \"  switch (b.v) {\\n\" +\n         \"    case 'SWITCH':\\n\" +\n         \"      if (b.i >= 0) {\\n\" +\n         \"        return b.o;\\n\" +\n         \"      } else {\\n\" +\n         \"        return;\\n\" +\n         \"      }\\n\" +\n         \"      break;\\n\" +\n         \"  }\\n\" +\n         \"}\",\n         \"function a(b) {\\n\" +\n         \"  switch (b.v) {\\n\" +\n         \"    case 'SWITCH':\\n\" +\n         \"      if (b.i >= 0) {\\n\" +\n         \"        return b.o;\\n\" +\n         \"      } else {\\n\" +\n         \"      }\\n\" +\n         \"  }\\n\" +\n         \"}\");\n  }\n",
        "begin_line": 252,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 272,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 108,col 5)-(line 110,col 6)",
            "(line 111,col 5)-(line 111,col 39)",
            "(line 112,col 5)-(line 112,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 136,
        "end_line": 136,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 52)",
            "(line 148,col 5)-(line 150,col 5)",
            "(line 154,col 5)-(line 154,col 32)",
            "(line 156,col 5)-(line 157,col 65)",
            "(line 158,col 5)-(line 158,col 55)",
            "(line 159,col 5)-(line 159,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 170,
        "end_line": 174,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 29)",
            "(line 203,col 5)-(line 203,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 28)",
            "(line 242,col 5)-(line 242,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 250,col 5)-(line 250,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 263,
        "end_line": 271,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 265,col 5)-(line 267,col 40)",
            "(line 269,col 5)-(line 270,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 306,
        "end_line": 309,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 308,col 5)-(line 308,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 339,col 5)-(line 339,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 356,
        "end_line": 363,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 359,col 5)-(line 361,col 6)",
            "(line 362,col 5)-(line 362,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 379,
        "end_line": 399,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 41)",
            "(line 383,col 5)-(line 383,col 28)",
            "(line 385,col 5)-(line 385,col 43)",
            "(line 387,col 5)-(line 389,col 5)",
            "(line 392,col 5)-(line 392,col 39)",
            "(line 393,col 5)-(line 394,col 58)",
            "(line 396,col 5)-(line 396,col 71)",
            "(line 398,col 5)-(line 398,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 435,col 5)-(line 435,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 451,
        "end_line": 462,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 41)",
            "(line 454,col 5)-(line 454,col 28)",
            "(line 456,col 5)-(line 456,col 56)",
            "(line 457,col 5)-(line 459,col 5)",
            "(line 460,col 5)-(line 460,col 55)",
            "(line 461,col 5)-(line 461,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 470,
        "end_line": 472,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 482,
        "end_line": 485,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 484,col 5)-(line 484,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 497,
        "end_line": 504,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 41)",
            "(line 500,col 5)-(line 500,col 28)",
            "(line 502,col 5)-(line 502,col 56)",
            "(line 503,col 5)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 512,col 5)-(line 512,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 524,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 523,col 5)-(line 523,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 534,
        "end_line": 540,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 535,col 5)-(line 539,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 563,
        "end_line": 570,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 565,col 5)-(line 569,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 583,
        "end_line": 589,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 587,col 6)",
            "(line 588,col 5)-(line 588,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 638,
        "end_line": 651,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 639,col 5)-(line 650,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 664,
        "end_line": 667,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 684,
        "end_line": 872,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 51)",
            "(line 688,col 5)-(line 688,col 44)",
            "(line 690,col 5)-(line 690,col 39)",
            "(line 691,col 5)-(line 692,col 66)",
            "(line 694,col 5)-(line 694,col 44)",
            "(line 695,col 5)-(line 695,col 40)",
            "(line 698,col 5)-(line 698,col 38)",
            "(line 699,col 5)-(line 699,col 54)",
            "(line 700,col 5)-(line 700,col 50)",
            "(line 702,col 5)-(line 702,col 45)",
            "(line 703,col 5)-(line 703,col 68)",
            "(line 704,col 5)-(line 704,col 34)",
            "(line 705,col 5)-(line 705,col 59)",
            "(line 706,col 5)-(line 706,col 35)",
            "(line 708,col 5)-(line 709,col 39)",
            "(line 711,col 5)-(line 751,col 5)",
            "(line 753,col 5)-(line 871,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 874,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 876,col 57)",
            "(line 877,col 5)-(line 877,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 883,
        "end_line": 901,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 884,col 5)-(line 884,col 41)",
            "(line 885,col 5)-(line 885,col 62)",
            "(line 886,col 5)-(line 888,col 5)",
            "(line 889,col 5)-(line 889,col 55)",
            "(line 890,col 5)-(line 890,col 39)",
            "(line 891,col 5)-(line 892,col 66)",
            "(line 893,col 5)-(line 893,col 44)",
            "(line 894,col 5)-(line 894,col 42)",
            "(line 896,col 5)-(line 899,col 5)",
            "(line 900,col 5)-(line 900,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 904,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 911,
        "end_line": 917,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 47)",
            "(line 913,col 5)-(line 915,col 5)",
            "(line 916,col 5)-(line 916,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 924,col 5)-(line 924,col 47)",
            "(line 925,col 5)-(line 927,col 5)",
            "(line 928,col 5)-(line 928,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 936,
        "end_line": 943,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 48)",
            "(line 938,col 5)-(line 938,col 47)",
            "(line 939,col 5)-(line 941,col 5)",
            "(line 942,col 5)-(line 942,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 950,
        "end_line": 956,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 47)",
            "(line 952,col 5)-(line 954,col 5)",
            "(line 955,col 5)-(line 955,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 962,
        "end_line": 969,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 53)",
            "(line 964,col 5)-(line 967,col 5)",
            "(line 968,col 5)-(line 968,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 972,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 973,col 7)-(line 973,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 976,
        "end_line": 977,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 979,
        "end_line": 980,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 983,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 984,col 39)",
            "(line 985,col 5)-(line 985,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 41)"
        ]
    }
]