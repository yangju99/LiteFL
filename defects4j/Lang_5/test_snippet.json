[
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        // Testing #LANG-304. Must be called before availableLocaleSet is called.\n        LocaleUtils.isAvailableLocale(Locale.getDefault());\n    }\n",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertNotNull(new LocaleUtils());\n        Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers()));\n    }\n",
        "begin_line": 67,
        "end_line": 75,
        "comment": "\n     * Test that constructors are public, and work, etc.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 41)",
            "(line 70,col 9)-(line 70,col 76)",
            "(line 71,col 9)-(line 71,col 37)",
            "(line 72,col 9)-(line 72,col 62)",
            "(line 73,col 9)-(line 73,col 72)",
            "(line 74,col 9)-(line 74,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String)",
        "snippet": "    private void assertValidToLocale(String language) {\n        Locale locale = LocaleUtils.toLocale(language);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        //country and variant are empty\n        assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty());\n        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());\n    }\n",
        "begin_line": 83,
        "end_line": 90,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param language  the language string\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 55)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 53)",
            "(line 88,col 9)-(line 88,col 81)",
            "(line 89,col 9)-(line 89,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(String localeString, String language, String country) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        //variant is empty\n        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());\n    }\n",
        "begin_line": 99,
        "end_line": 106,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 59)",
            "(line 101,col 9)-(line 101,col 46)",
            "(line 102,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 105,col 9)-(line 105,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(\n            String localeString, String language, \n            String country, String variant) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        assertEquals(variant, locale.getVariant());\n        \n    }\n",
        "begin_line": 116,
        "end_line": 125,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     * @param variant of the resulting Locale\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 59)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 121,col 9)-(line 121,col 53)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part()",
        "snippet": "    @Test\n    public void testToLocale_1Part() {\n        assertEquals(null, LocaleUtils.toLocale((String) null));\n        \n        assertValidToLocale(\"us\");\n        assertValidToLocale(\"fr\");\n        assertValidToLocale(\"de\");\n        assertValidToLocale(\"zh\");\n        // Valid format but lang doesnt exist, should make instance anyway\n        assertValidToLocale(\"qq\");\n        \n        try {\n            LocaleUtils.toLocale(\"Us\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"US\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"u#\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        \n        try {\n            LocaleUtils.toLocale(\"u\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n       \n        try {\n            LocaleUtils.toLocale(\"uuu\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n\n        try {\n            LocaleUtils.toLocale(\"uu_U\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n    }        \n",
        "begin_line": 130,
        "end_line": 172,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 64)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 141,col 9)-(line 144,col 49)",
            "(line 145,col 9)-(line 148,col 49)",
            "(line 149,col 9)-(line 152,col 49)",
            "(line 153,col 9)-(line 156,col 49)",
            "(line 158,col 9)-(line 161,col 49)",
            "(line 163,col 9)-(line 166,col 49)",
            "(line 168,col 9)-(line 171,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part()",
        "snippet": "    @Test\n    public void testToLocale_2Part() {\n        assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n        //valid though doesnt exist\n        assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\n        \n        try {\n            LocaleUtils.toLocale(\"us-EN\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_En\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_en\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_eN\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS_EN\");\n            fail(\"Should fail first part not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_E3\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n    }        \n",
        "begin_line": 177,
        "end_line": 207,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 49)",
            "(line 181,col 9)-(line 181,col 49)",
            "(line 183,col 9)-(line 186,col 49)",
            "(line 187,col 9)-(line 190,col 49)",
            "(line 191,col 9)-(line 194,col 49)",
            "(line 195,col 9)-(line 198,col 49)",
            "(line 199,col 9)-(line 202,col 49)",
            "(line 203,col 9)-(line 206,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part()",
        "snippet": "    @Test\n    public void testToLocale_3Part() {\n        assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n        // this isn't pretty, but was caused by a jdk bug it seems\n        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\n        } else {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"A\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFSAFDFDSDFF\");\n        }\n        \n        try {\n            LocaleUtils.toLocale(\"us_EN-a\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uu_UU_\");\n            fail(\"Must be 3, 5 or 7+ in length\");\n        } catch (IllegalArgumentException iae) {}\n    }\n",
        "begin_line": 212,
        "end_line": 233,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 56)",
            "(line 217,col 9)-(line 223,col 9)",
            "(line 225,col 9)-(line 228,col 49)",
            "(line 229,col 9)-(line 232,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[])",
        "snippet": "    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n        List<Locale> localeList = defaultLocale == null ?\n                LocaleUtils.localeLookupList(locale) :\n                LocaleUtils.localeLookupList(locale, defaultLocale);\n        \n        assertEquals(expected.length, localeList.size());\n        assertEquals(Arrays.asList(expected), localeList);\n        assertUnmodifiableCollection(localeList);\n    }\n",
        "begin_line": 243,
        "end_line": 251,
        "comment": "\n     * Helper method for local lookups.\n     *\n     * @param locale  the input locale\n     * @param defaultLocale  the input default locale\n     * @param expected  expected results\n     ",
        "child_ranges": [
            "(line 244,col 9)-(line 246,col 68)",
            "(line 248,col 9)-(line 248,col 57)",
            "(line 249,col 9)-(line 249,col 58)",
            "(line 250,col 9)-(line 250,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_Locale()",
        "snippet": "    @Test\n    public void testLocaleLookupList_Locale() {\n        assertLocaleLookupList(null, null, new Locale[0]);\n        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, null,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n    }        \n",
        "begin_line": 257,
        "end_line": 272,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 58)",
            "(line 260,col 9)-(line 260,col 73)",
            "(line 261,col 9)-(line 261,col 73)",
            "(line 262,col 9)-(line 262,col 73)",
            "(line 263,col 9)-(line 266,col 28)",
            "(line 267,col 9)-(line 271,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_LocaleLocale()",
        "snippet": "    @Test\n    public void testLocaleLookupList_LocaleLocale() {\n        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n                new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, \n                new Locale[]{LOCALE_EN});\n        \n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, \n            new Locale[]{\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        \n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,\n            new Locale[] {\n                LOCALE_FR_CA,\n                LOCALE_FR,\n                LOCALE_EN});\n    }\n",
        "begin_line": 277,
        "end_line": 326,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 279,col 9)-(line 280,col 41)",
            "(line 281,col 9)-(line 282,col 41)",
            "(line 284,col 9)-(line 287,col 28)",
            "(line 288,col 9)-(line 292,col 28)",
            "(line 293,col 9)-(line 297,col 31)",
            "(line 299,col 9)-(line 303,col 28)",
            "(line 304,col 9)-(line 308,col 28)",
            "(line 309,col 9)-(line 314,col 28)",
            "(line 315,col 9)-(line 320,col 31)",
            "(line 321,col 9)-(line 325,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleList()",
        "snippet": "    @Test\n    public void testAvailableLocaleList() {\n        List<Locale> list = LocaleUtils.availableLocaleList();\n        List<Locale> list2 = LocaleUtils.availableLocaleList();\n        assertNotNull(list);\n        assertSame(list, list2);\n        assertUnmodifiableCollection(list);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        assertEquals(jdkLocaleList, list);\n    }\n",
        "begin_line": 332,
        "end_line": 343,
        "comment": "\n     * Test availableLocaleList() method.\n     ",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 62)",
            "(line 335,col 9)-(line 335,col 63)",
            "(line 336,col 9)-(line 336,col 28)",
            "(line 337,col 9)-(line 337,col 32)",
            "(line 338,col 9)-(line 338,col 43)",
            "(line 340,col 9)-(line 340,col 63)",
            "(line 341,col 9)-(line 341,col 67)",
            "(line 342,col 9)-(line 342,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleSet()",
        "snippet": "    @Test\n    public void testAvailableLocaleSet() {\n        Set<Locale> set = LocaleUtils.availableLocaleSet();\n        Set<Locale> set2 = LocaleUtils.availableLocaleSet();\n        assertNotNull(set);\n        assertSame(set, set2);\n        assertUnmodifiableCollection(set);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList);\n        assertEquals(jdkLocaleSet, set);\n    }\n",
        "begin_line": 349,
        "end_line": 361,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 59)",
            "(line 352,col 9)-(line 352,col 60)",
            "(line 353,col 9)-(line 353,col 27)",
            "(line 354,col 9)-(line 354,col 30)",
            "(line 355,col 9)-(line 355,col 42)",
            "(line 357,col 9)-(line 357,col 63)",
            "(line 358,col 9)-(line 358,col 67)",
            "(line 359,col 9)-(line 359,col 70)",
            "(line 360,col 9)-(line 360,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testIsAvailableLocale()",
        "snippet": "    @SuppressWarnings(\"boxing\") // JUnit4 does not support primitive equality testing apart from long\n    @Test\n    public void testIsAvailableLocale() {\n        Set<Locale> set = LocaleUtils.availableLocaleSet();\n        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\n        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\n        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\n        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n    }\n",
        "begin_line": 367,
        "end_line": 378,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 59)",
            "(line 371,col 9)-(line 371,col 88)",
            "(line 372,col 9)-(line 372,col 94)",
            "(line 373,col 9)-(line 373,col 104)",
            "(line 374,col 9)-(line 374,col 88)",
            "(line 375,col 9)-(line 375,col 94)",
            "(line 376,col 9)-(line 376,col 88)",
            "(line 377,col 9)-(line 377,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertLanguageByCountry(String country, String[] languages) {\n        List<Locale> list = LocaleUtils.languagesByCountry(country);\n        List<Locale> list2 = LocaleUtils.languagesByCountry(country);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (String language : languages) {\n            Iterator<Locale> iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().isEmpty());\n                assertEquals(country, locale.getCountry());\n                if (language.equals(locale.getLanguage())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + language\n                        + \" for country: \" + country);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n",
        "begin_line": 390,
        "end_line": 417,
        "comment": "\n     * Make sure the language by country is correct. It checks that \n     * the LocaleUtils.languagesByCountry(country) call contains the \n     * array of languages passed in. It may contain more due to JVM \n     * variations.\n     *\n     * @param country\n     * @param languages array of languages that should be returned\n     ",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 68)",
            "(line 392,col 9)-(line 392,col 69)",
            "(line 393,col 9)-(line 393,col 28)",
            "(line 394,col 9)-(line 394,col 32)",
            "(line 396,col 9)-(line 415,col 9)",
            "(line 416,col 9)-(line 416,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLanguagesByCountry()",
        "snippet": "    @Test\n    public void testLanguagesByCountry() {\n        assertLanguageByCountry(null, new String[0]);\n        assertLanguageByCountry(\"GB\", new String[]{\"en\"});\n        assertLanguageByCountry(\"ZZ\", new String[0]);\n        assertLanguageByCountry(\"CH\", new String[]{\"fr\", \"de\", \"it\"});\n    }\n",
        "begin_line": 422,
        "end_line": 428,
        "comment": "\n     * Test languagesByCountry() method.\n     ",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 53)",
            "(line 425,col 9)-(line 425,col 58)",
            "(line 426,col 9)-(line 426,col 53)",
            "(line 427,col 9)-(line 427,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertCountriesByLanguage(String language, String[] countries) {\n        List<Locale> list = LocaleUtils.countriesByLanguage(language);\n        List<Locale> list2 = LocaleUtils.countriesByLanguage(language);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (String countrie : countries) {\n            Iterator<Locale> iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().isEmpty());\n                assertEquals(language, locale.getLanguage());\n                if (countrie.equals(locale.getCountry())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + countrie\n                        + \" for country: \" + language);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n",
        "begin_line": 441,
        "end_line": 468,
        "comment": "\n     * Make sure the country by language is correct. It checks that \n     * the LocaleUtils.countryByLanguage(language) call contains the \n     * array of countries passed in. It may contain more due to JVM \n     * variations.\n     *\n     *\n     * @param language\n     * @param countries array of countries that should be returned\n     ",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 70)",
            "(line 443,col 9)-(line 443,col 71)",
            "(line 444,col 9)-(line 444,col 28)",
            "(line 445,col 9)-(line 445,col 32)",
            "(line 447,col 9)-(line 466,col 9)",
            "(line 467,col 9)-(line 467,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testCountriesByLanguage()",
        "snippet": "    @Test\n    public void testCountriesByLanguage() {\n        assertCountriesByLanguage(null, new String[0]);\n        assertCountriesByLanguage(\"de\", new String[]{\"DE\", \"CH\", \"AT\", \"LU\"});\n        assertCountriesByLanguage(\"zz\", new String[0]);\n        assertCountriesByLanguage(\"it\", new String[]{\"IT\", \"CH\"});\n    }\n",
        "begin_line": 473,
        "end_line": 479,
        "comment": "\n     * Test countriesByLanguage() method.\n     ",
        "child_ranges": [
            "(line 475,col 9)-(line 475,col 55)",
            "(line 476,col 9)-(line 476,col 78)",
            "(line 477,col 9)-(line 477,col 55)",
            "(line 478,col 9)-(line 478,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection<?>)",
        "snippet": "    private static void assertUnmodifiableCollection(Collection<?> coll) {\n        try {\n            coll.add(null);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 484,
        "end_line": 489,
        "comment": "\n     * @param coll  the collection to check\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 488,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLang328()",
        "snippet": "    @Test\n    public void testLang328() {\n        assertValidToLocale(\"fr__P\", \"fr\", \"\", \"P\");\n        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n    }\n",
        "begin_line": 494,
        "end_line": 498,
        "comment": "\n     * Tests #LANG-328 - only language+variant\n     ",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 52)",
            "(line 497,col 9)-(line 497,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLang865()",
        "snippet": "    @Test\n    public void testLang865() {\n        assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");\n        assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");\n        assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            fail(\"Must be at least 3 chars if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            fail(\"Must be uppercase if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            fail(\"Must be uppercase if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            fail(\"Must be letter if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            fail(\"Must be letter if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            fail(\"Must be at least 5 chars if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");\n        } catch (final IllegalArgumentException iae) {\n        }\n    }\n",
        "begin_line": 503,
        "end_line": 543,
        "comment": "\n     * Tests #LANG-865, strings starting with an underscore.\n     ",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 49)",
            "(line 506,col 9)-(line 506,col 52)",
            "(line 507,col 9)-(line 507,col 60)",
            "(line 508,col 9)-(line 512,col 9)",
            "(line 513,col 9)-(line 517,col 9)",
            "(line 518,col 9)-(line 522,col 9)",
            "(line 523,col 9)-(line 527,col 9)",
            "(line 528,col 9)-(line 532,col 9)",
            "(line 533,col 9)-(line 537,col 9)",
            "(line 538,col 9)-(line 542,col 9)"
        ]
    }
]