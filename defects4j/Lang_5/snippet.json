[
    {
        "name": "LocaleUtils.toLocale#88",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "class_name": "org.apache.commons.lang3.LocaleUtils",
        "signature": "org.apache.commons.lang3.LocaleUtils.toLocale(java.lang.String)",
        "snippet": "    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) {\n                return new Locale(str);\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            if (len < 7) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }\n",
        "begin_line": 88,
        "end_line": 128,
        "comment": "\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "LocaleUtils.availableLocaleList#192",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "class_name": "org.apache.commons.lang3.LocaleUtils",
        "signature": "org.apache.commons.lang3.LocaleUtils.availableLocaleList()",
        "snippet": "    public static List<Locale> availableLocaleList() {\n        return SyncAvoid.AVAILABLE_LOCALE_LIST;\n    }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n     * <p>Obtains an unmodifiable list of installed locales.</p>\n     * \n     * <p>This method is a wrapper around {@link Locale#getAvailableLocales()}.\n     * It is more efficient, as the JDK method must create a new array each\n     * time it is called.</p>\n     *\n     * @return the unmodifiable list of available locales\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "LocaleUtils.isAvailableLocale#217",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "class_name": "org.apache.commons.lang3.LocaleUtils",
        "signature": "org.apache.commons.lang3.LocaleUtils.isAvailableLocale(java.util.Locale)",
        "snippet": "    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * <p>Checks if the locale specified is in the list of available locales.</p>\n     *\n     * @param locale the Locale object to check if it is available\n     * @return true if the locale is a known locale\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    }
]