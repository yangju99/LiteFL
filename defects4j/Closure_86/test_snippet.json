[
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parse(java.lang.String)",
        "snippet": "  private static Node parse(String js) {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 39)",
            "(line 39,col 5)-(line 39,col 40)",
            "(line 40,col 5)-(line 40,col 46)",
            "(line 41,col 5)-(line 41,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getNode(java.lang.String)",
        "snippet": "  static Node getNode(String js) {\n    Node root = parse(\"var a=(\" + js + \");\");\n    Node expr = root.getFirstChild();\n    Node var = expr.getFirstChild();\n    return var.getFirstChild();\n  }\n",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 45)",
            "(line 46,col 5)-(line 46,col 37)",
            "(line 47,col 5)-(line 47,col 36)",
            "(line 48,col 5)-(line 48,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLiteralOrConstValue()",
        "snippet": "  public void testIsLiteralOrConstValue() {\n    assertLiteralAndImmutable(getNode(\"10\"));\n    assertLiteralAndImmutable(getNode(\"-10\"));\n    assertLiteralButNotImmutable(getNode(\"[10, 20]\"));\n    assertLiteralButNotImmutable(getNode(\"{'a': 20}\"));\n    assertLiteralButNotImmutable(getNode(\"[10, , 1.0, [undefined], 'a']\"));\n    assertLiteralButNotImmutable(getNode(\"/abc/\"));\n    assertLiteralAndImmutable(getNode(\"\\\"string\\\"\"));\n    assertLiteralAndImmutable(getNode(\"'aaa'\"));\n    assertLiteralAndImmutable(getNode(\"null\"));\n    assertLiteralAndImmutable(getNode(\"undefined\"));\n    assertLiteralAndImmutable(getNode(\"void 0\"));\n    assertNotLiteral(getNode(\"abc\"));\n    assertNotLiteral(getNode(\"[10, foo(), 20]\"));\n    assertNotLiteral(getNode(\"foo()\"));\n    assertNotLiteral(getNode(\"c + d\"));\n    assertNotLiteral(getNode(\"{'a': foo()}\"));\n    assertNotLiteral(getNode(\"void foo()\"));\n  }\n",
        "begin_line": 51,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 45)",
            "(line 53,col 5)-(line 53,col 46)",
            "(line 54,col 5)-(line 54,col 54)",
            "(line 55,col 5)-(line 55,col 55)",
            "(line 56,col 5)-(line 56,col 75)",
            "(line 57,col 5)-(line 57,col 51)",
            "(line 58,col 5)-(line 58,col 53)",
            "(line 59,col 5)-(line 59,col 48)",
            "(line 60,col 5)-(line 60,col 47)",
            "(line 61,col 5)-(line 61,col 52)",
            "(line 62,col 5)-(line 62,col 49)",
            "(line 63,col 5)-(line 63,col 37)",
            "(line 64,col 5)-(line 64,col 49)",
            "(line 65,col 5)-(line 65,col 39)",
            "(line 66,col 5)-(line 66,col 39)",
            "(line 67,col 5)-(line 67,col 46)",
            "(line 68,col 5)-(line 68,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralAndImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralAndImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertTrue(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 49)",
            "(line 73,col 5)-(line 73,col 50)",
            "(line 74,col 5)-(line 74,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralButNotImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralButNotImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 49)",
            "(line 79,col 5)-(line 79,col 50)",
            "(line 80,col 5)-(line 80,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNotLiteral(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertNotLiteral(Node n) {\n    assertFalse(NodeUtil.isLiteralValue(n, true));\n    assertFalse(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 83,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 50)",
            "(line 85,col 5)-(line 85,col 51)",
            "(line 86,col 5)-(line 86,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetBooleanValue()",
        "snippet": "  public void testGetBooleanValue() {\n    assertBooleanTrue(\"true\");\n    assertBooleanTrue(\"10\");\n    assertBooleanTrue(\"'0'\");\n    assertBooleanTrue(\"/a/\");\n    assertBooleanTrue(\"{}\");\n    assertBooleanTrue(\"[]\");\n    assertBooleanFalse(\"false\");\n    assertBooleanFalse(\"null\");\n    assertBooleanFalse(\"0\");\n    assertBooleanFalse(\"''\");\n    assertBooleanFalse(\"undefined\");\n    assertBooleanFalse(\"void 0\");\n    assertBooleanFalse(\"void foo()\");\n    assertBooleanUnknown(\"b\");\n    assertBooleanUnknown(\"-'0.0'\");\n  }\n",
        "begin_line": 89,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 30)",
            "(line 91,col 5)-(line 91,col 28)",
            "(line 92,col 5)-(line 92,col 29)",
            "(line 93,col 5)-(line 93,col 29)",
            "(line 94,col 5)-(line 94,col 28)",
            "(line 95,col 5)-(line 95,col 28)",
            "(line 96,col 5)-(line 96,col 32)",
            "(line 97,col 5)-(line 97,col 31)",
            "(line 98,col 5)-(line 98,col 28)",
            "(line 99,col 5)-(line 99,col 29)",
            "(line 100,col 5)-(line 100,col 36)",
            "(line 101,col 5)-(line 101,col 33)",
            "(line 102,col 5)-(line 102,col 37)",
            "(line 103,col 5)-(line 103,col 30)",
            "(line 104,col 5)-(line 104,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanTrue(java.lang.String)",
        "snippet": "  private void assertBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanFalse(java.lang.String)",
        "snippet": "  private void assertBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetExpressionBooleanValue()",
        "snippet": "  public void testGetExpressionBooleanValue() {\n    assertExpressionBooleanTrue(\"a=true\");\n    assertExpressionBooleanFalse(\"a=false\");\n\n    assertExpressionBooleanTrue(\"a=(false,true)\");\n    assertExpressionBooleanFalse(\"a=(true,false)\");\n\n    assertExpressionBooleanTrue(\"a=(false || true)\");\n    assertExpressionBooleanFalse(\"a=(true && false)\");\n\n    assertExpressionBooleanTrue(\"a=!(true && false)\");\n\n    assertExpressionBooleanTrue(\"a,true\");\n    assertExpressionBooleanFalse(\"a,false\");\n\n    assertExpressionBooleanTrue(\"true||false\");\n    assertExpressionBooleanFalse(\"false||false\");\n\n    assertExpressionBooleanTrue(\"true&&true\");\n    assertExpressionBooleanFalse(\"true&&false\");\n\n    assertExpressionBooleanFalse(\"!true\");\n    assertExpressionBooleanTrue(\"!false\");\n    assertExpressionBooleanTrue(\"!''\");\n\n    // Assignment ops other than ASSIGN are unknown.\n    assertExpressionBooleanUnknown(\"a *= 2\");\n\n    // Complex expressions that contain anything other then \"=\", \",\", or \"!\" are\n    // unknown.\n    assertExpressionBooleanUnknown(\"2 + 2\");\n\n    assertExpressionBooleanTrue(\"a=1\");\n    assertExpressionBooleanTrue(\"a=/a/\");\n    assertExpressionBooleanTrue(\"a={}\");\n\n    assertExpressionBooleanTrue(\"true\");\n    assertExpressionBooleanTrue(\"10\");\n    assertExpressionBooleanTrue(\"'0'\");\n    assertExpressionBooleanTrue(\"/a/\");\n    assertExpressionBooleanTrue(\"{}\");\n    assertExpressionBooleanTrue(\"[]\");\n    assertExpressionBooleanFalse(\"false\");\n    assertExpressionBooleanFalse(\"null\");\n    assertExpressionBooleanFalse(\"0\");\n    assertExpressionBooleanFalse(\"''\");\n    assertExpressionBooleanFalse(\"undefined\");\n    assertExpressionBooleanFalse(\"void 0\");\n    assertExpressionBooleanFalse(\"void foo()\");\n\n    assertExpressionBooleanTrue(\"a?true:true\");\n    assertExpressionBooleanFalse(\"a?false:false\");\n    assertExpressionBooleanUnknown(\"a?true:false\");\n    assertExpressionBooleanUnknown(\"a?true:foo()\");\n\n    assertExpressionBooleanUnknown(\"b\");\n    assertExpressionBooleanUnknown(\"-'0.0'\");\n  }\n",
        "begin_line": 119,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 42)",
            "(line 121,col 5)-(line 121,col 44)",
            "(line 123,col 5)-(line 123,col 50)",
            "(line 124,col 5)-(line 124,col 51)",
            "(line 126,col 5)-(line 126,col 53)",
            "(line 127,col 5)-(line 127,col 54)",
            "(line 129,col 5)-(line 129,col 54)",
            "(line 131,col 5)-(line 131,col 42)",
            "(line 132,col 5)-(line 132,col 44)",
            "(line 134,col 5)-(line 134,col 47)",
            "(line 135,col 5)-(line 135,col 49)",
            "(line 137,col 5)-(line 137,col 46)",
            "(line 138,col 5)-(line 138,col 48)",
            "(line 140,col 5)-(line 140,col 42)",
            "(line 141,col 5)-(line 141,col 42)",
            "(line 142,col 5)-(line 142,col 39)",
            "(line 145,col 5)-(line 145,col 45)",
            "(line 149,col 5)-(line 149,col 44)",
            "(line 151,col 5)-(line 151,col 39)",
            "(line 152,col 5)-(line 152,col 41)",
            "(line 153,col 5)-(line 153,col 40)",
            "(line 155,col 5)-(line 155,col 40)",
            "(line 156,col 5)-(line 156,col 38)",
            "(line 157,col 5)-(line 157,col 39)",
            "(line 158,col 5)-(line 158,col 39)",
            "(line 159,col 5)-(line 159,col 38)",
            "(line 160,col 5)-(line 160,col 38)",
            "(line 161,col 5)-(line 161,col 42)",
            "(line 162,col 5)-(line 162,col 41)",
            "(line 163,col 5)-(line 163,col 38)",
            "(line 164,col 5)-(line 164,col 39)",
            "(line 165,col 5)-(line 165,col 46)",
            "(line 166,col 5)-(line 166,col 43)",
            "(line 167,col 5)-(line 167,col 47)",
            "(line 169,col 5)-(line 169,col 47)",
            "(line 170,col 5)-(line 170,col 50)",
            "(line 171,col 5)-(line 171,col 51)",
            "(line 172,col 5)-(line 172,col 51)",
            "(line 174,col 5)-(line 174,col 40)",
            "(line 175,col 5)-(line 175,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanTrue(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 180,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanFalse(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 185,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 188,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 190,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetStringValue()",
        "snippet": "  public void testGetStringValue() {\n    assertEquals(\"true\", NodeUtil.getStringValue(getNode(\"true\")));\n    assertEquals(\"10\", NodeUtil.getStringValue(getNode(\"10\")));\n    assertEquals(\"1\", NodeUtil.getStringValue(getNode(\"1.0\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"'0'\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"/a/\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"{}\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"[]\")));\n    assertEquals(\"false\", NodeUtil.getStringValue(getNode(\"false\")));\n    assertEquals(\"null\", NodeUtil.getStringValue(getNode(\"null\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"0\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"''\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"undefined\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void 0\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void foo()\")));\n    \n    assertEquals(\"NaN\", NodeUtil.getStringValue(getNode(\"NaN\")));\n    assertEquals(\"Infinity\", NodeUtil.getStringValue(getNode(\"Infinity\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"x\")));\n  }\n",
        "begin_line": 193,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 67)",
            "(line 195,col 5)-(line 195,col 63)",
            "(line 196,col 5)-(line 196,col 63)",
            "(line 197,col 5)-(line 197,col 63)",
            "(line 198,col 5)-(line 198,col 64)",
            "(line 199,col 5)-(line 199,col 63)",
            "(line 200,col 5)-(line 200,col 63)",
            "(line 201,col 5)-(line 201,col 69)",
            "(line 202,col 5)-(line 202,col 67)",
            "(line 203,col 5)-(line 203,col 61)",
            "(line 204,col 5)-(line 204,col 61)",
            "(line 205,col 5)-(line 205,col 77)",
            "(line 206,col 5)-(line 206,col 74)",
            "(line 207,col 5)-(line 207,col 78)",
            "(line 209,col 5)-(line 209,col 65)",
            "(line 210,col 5)-(line 210,col 75)",
            "(line 211,col 5)-(line 211,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsObjectLiteralKey1()",
        "snippet": "  public void testIsObjectLiteralKey1() throws Exception {\n    testIsObjectLiteralKey(\n      parseExpr(\"({})\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"a\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"'a'\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"1\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"({a: 1})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({1: 1})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({get a(){}})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({set a(b){}})\").getFirstChild(), true);\n  }\n",
        "begin_line": 214,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 216,col 32)",
            "(line 217,col 5)-(line 218,col 29)",
            "(line 219,col 5)-(line 220,col 31)",
            "(line 221,col 5)-(line 222,col 29)",
            "(line 223,col 5)-(line 224,col 51)",
            "(line 225,col 5)-(line 226,col 51)",
            "(line 227,col 5)-(line 228,col 56)",
            "(line 229,col 5)-(line 230,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parseExpr(java.lang.String)",
        "snippet": "  private Node parseExpr(String js) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.languageIn = LanguageMode.ECMASCRIPT5;\n    compiler.initOptions(options);\n    Node root = compiler.parseTestCode(js);\n    return root.getFirstChild().getFirstChild();\n  }\n",
        "begin_line": 233,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 39)",
            "(line 235,col 5)-(line 235,col 52)",
            "(line 236,col 5)-(line 236,col 50)",
            "(line 237,col 5)-(line 237,col 34)",
            "(line 238,col 5)-(line 238,col 43)",
            "(line 239,col 5)-(line 239,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsObjectLiteralKey(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private void testIsObjectLiteralKey(Node node, boolean expected) {\n    assertEquals(expected, NodeUtil.isObjectLitKey(node, node.getParent()));\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName1()",
        "snippet": "  public void testGetFunctionName1() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"function name(){}\");\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 246,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 39)",
            "(line 248,col 5)-(line 248,col 62)",
            "(line 250,col 5)-(line 250,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName2()",
        "snippet": "  public void testGetFunctionName2() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 253,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 39)",
            "(line 255,col 5)-(line 256,col 41)",
            "(line 258,col 5)-(line 258,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName3()",
        "snippet": "  public void testGetFunctionName3() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"qualified.name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name\");\n  }\n",
        "begin_line": 261,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 39)",
            "(line 263,col 5)-(line 264,col 41)",
            "(line 266,col 5)-(line 266,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName4()",
        "snippet": "  public void testGetFunctionName4() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name2 = function name1(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name2\");\n  }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 39)",
            "(line 271,col 5)-(line 272,col 41)",
            "(line 274,col 5)-(line 274,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName5()",
        "snippet": "  public void testGetFunctionName5() throws Exception {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(\"qualified.name2 = function name1(){}\");\n    Node parent = n.getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name2\");\n  }\n",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 39)",
            "(line 279,col 5)-(line 279,col 76)",
            "(line 280,col 5)-(line 280,col 52)",
            "(line 282,col 5)-(line 282,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private void testGetFunctionName(Node function, String name) {\n    assertEquals(Token.FUNCTION, function.getType());\n    assertEquals(name, NodeUtil.getFunctionName(function));\n  }\n",
        "begin_line": 285,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 53)",
            "(line 287,col 5)-(line 287,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsFunctionDeclaration()",
        "snippet": "  public void testContainsFunctionDeclaration() {\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"function foo(){}\")));\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"(b?function(){}:null)\")));\n\n    assertFalse(NodeUtil.containsFunction(\n                   getNode(\"(b?foo():null)\")));\n    assertFalse(NodeUtil.containsFunction(\n                    getNode(\"foo()\")));\n  }\n",
        "begin_line": 290,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 292,col 49)",
            "(line 293,col 5)-(line 294,col 54)",
            "(line 296,col 5)-(line 297,col 47)",
            "(line 298,col 5)-(line 299,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String)",
        "snippet": "  private void assertSideEffect(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild()));\n  }\n",
        "begin_line": 302,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 303,col 23)",
            "(line 304,col 5)-(line 304,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String, boolean)",
        "snippet": "  private void assertSideEffect(boolean se, String js, boolean GlobalRegExp) {\n    Node n = parse(js);\n    Compiler compiler = new Compiler();\n    compiler.setHasRegExpGlobalReferences(GlobalRegExp);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild(), compiler));\n  }\n",
        "begin_line": 307,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 308,col 5)-(line 308,col 23)",
            "(line 309,col 5)-(line 309,col 39)",
            "(line 310,col 5)-(line 310,col 56)",
            "(line 311,col 5)-(line 311,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayHaveSideEffects()",
        "snippet": "  public void testMayHaveSideEffects() {\n    assertSideEffect(true, \"i++\");\n    assertSideEffect(true, \"[b, [a, i++]]\");\n    assertSideEffect(true, \"i=3\");\n    assertSideEffect(true, \"[0, i=3]\");\n    assertSideEffect(true, \"b()\");\n    assertSideEffect(true, \"[1, b()]\");\n    assertSideEffect(true, \"b.b=4\");\n    assertSideEffect(true, \"b.b--\");\n    assertSideEffect(true, \"i--\");\n    assertSideEffect(true, \"a[0][i=4]\");\n    assertSideEffect(true, \"a += 3\");\n    assertSideEffect(true, \"a, b, z += 4\");\n    assertSideEffect(true, \"a ? c : d++\");\n    assertSideEffect(true, \"a + c++\");\n    assertSideEffect(true, \"a + c - d()\");\n    assertSideEffect(true, \"a + c - d()\");\n\n    assertSideEffect(true, \"function foo() {}\");\n    assertSideEffect(true, \"while(true);\");\n    assertSideEffect(true, \"if(true){a()}\");\n\n    assertSideEffect(false, \"if(true){a}\");\n    assertSideEffect(false, \"(function() { })\");\n    assertSideEffect(false, \"(function() { i++ })\");\n    assertSideEffect(false, \"[function a(){}]\");\n\n    assertSideEffect(false, \"a\");\n    assertSideEffect(false, \"[b, c [d, [e]]]\");\n    assertSideEffect(false, \"({a: x, b: y, c: z})\");\n    assertSideEffect(false, \"/abc/gi\");\n    assertSideEffect(false, \"'a'\");\n    assertSideEffect(false, \"0\");\n    assertSideEffect(false, \"a + c\");\n    assertSideEffect(false, \"'c' + a[0]\");\n    assertSideEffect(false, \"a[0][1]\");\n    assertSideEffect(false, \"'a' + c\");\n    assertSideEffect(false, \"'a' + a.name\");\n    assertSideEffect(false, \"1, 2, 3\");\n    assertSideEffect(false, \"a, b, 3\");\n    assertSideEffect(false, \"(function(a, b) {  })\");\n    assertSideEffect(false, \"a ? c : d\");\n    assertSideEffect(false, \"'1' + navigator.userAgent\");\n\n    assertSideEffect(false, \"new RegExp('foobar', 'i')\");\n    assertSideEffect(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertSideEffect(false, \"new Array()\");\n    assertSideEffect(false, \"new Array\");\n    assertSideEffect(false, \"new Array(4)\");\n    assertSideEffect(false, \"new Array('a', 'b', 'c')\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n\n    assertSideEffect(false, \"({}).foo = 4\");\n    assertSideEffect(false, \"([]).foo = 4\");\n    assertSideEffect(false, \"(function() {}).foo = 4\");\n\n    assertSideEffect(true, \"this.foo = 4\");\n    assertSideEffect(true, \"a.foo = 4\");\n    assertSideEffect(true, \"(function() { return n; })().foo = 4\");\n    assertSideEffect(true, \"([]).foo = bar()\");\n\n    assertSideEffect(false, \"undefined\");\n    assertSideEffect(false, \"void 0\");\n    assertSideEffect(true, \"void foo()\");\n    assertSideEffect(false, \"-Infinity\");\n    assertSideEffect(false, \"Infinity\");\n    assertSideEffect(false, \"NaN\");\n\n    assertSideEffect(false, \"({}||[]).foo = 2;\");\n    assertSideEffect(false, \"(true ? {} : []).foo = 2;\");\n    assertSideEffect(false, \"({},[]).foo = 2;\");\n  }\n",
        "begin_line": 314,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 34)",
            "(line 316,col 5)-(line 316,col 44)",
            "(line 317,col 5)-(line 317,col 34)",
            "(line 318,col 5)-(line 318,col 39)",
            "(line 319,col 5)-(line 319,col 34)",
            "(line 320,col 5)-(line 320,col 39)",
            "(line 321,col 5)-(line 321,col 36)",
            "(line 322,col 5)-(line 322,col 36)",
            "(line 323,col 5)-(line 323,col 34)",
            "(line 324,col 5)-(line 324,col 40)",
            "(line 325,col 5)-(line 325,col 37)",
            "(line 326,col 5)-(line 326,col 43)",
            "(line 327,col 5)-(line 327,col 42)",
            "(line 328,col 5)-(line 328,col 38)",
            "(line 329,col 5)-(line 329,col 42)",
            "(line 330,col 5)-(line 330,col 42)",
            "(line 332,col 5)-(line 332,col 48)",
            "(line 333,col 5)-(line 333,col 43)",
            "(line 334,col 5)-(line 334,col 44)",
            "(line 336,col 5)-(line 336,col 43)",
            "(line 337,col 5)-(line 337,col 48)",
            "(line 338,col 5)-(line 338,col 52)",
            "(line 339,col 5)-(line 339,col 48)",
            "(line 341,col 5)-(line 341,col 33)",
            "(line 342,col 5)-(line 342,col 47)",
            "(line 343,col 5)-(line 343,col 52)",
            "(line 344,col 5)-(line 344,col 39)",
            "(line 345,col 5)-(line 345,col 35)",
            "(line 346,col 5)-(line 346,col 33)",
            "(line 347,col 5)-(line 347,col 37)",
            "(line 348,col 5)-(line 348,col 42)",
            "(line 349,col 5)-(line 349,col 39)",
            "(line 350,col 5)-(line 350,col 39)",
            "(line 351,col 5)-(line 351,col 44)",
            "(line 352,col 5)-(line 352,col 39)",
            "(line 353,col 5)-(line 353,col 39)",
            "(line 354,col 5)-(line 354,col 53)",
            "(line 355,col 5)-(line 355,col 41)",
            "(line 356,col 5)-(line 356,col 57)",
            "(line 358,col 5)-(line 358,col 57)",
            "(line 359,col 5)-(line 359,col 64)",
            "(line 360,col 5)-(line 360,col 43)",
            "(line 361,col 5)-(line 361,col 41)",
            "(line 362,col 5)-(line 362,col 44)",
            "(line 363,col 5)-(line 363,col 56)",
            "(line 364,col 5)-(line 364,col 59)",
            "(line 365,col 5)-(line 365,col 59)",
            "(line 367,col 5)-(line 367,col 44)",
            "(line 368,col 5)-(line 368,col 44)",
            "(line 369,col 5)-(line 369,col 55)",
            "(line 371,col 5)-(line 371,col 43)",
            "(line 372,col 5)-(line 372,col 40)",
            "(line 373,col 5)-(line 373,col 67)",
            "(line 374,col 5)-(line 374,col 47)",
            "(line 376,col 5)-(line 376,col 41)",
            "(line 377,col 5)-(line 377,col 38)",
            "(line 378,col 5)-(line 378,col 41)",
            "(line 379,col 5)-(line 379,col 41)",
            "(line 380,col 5)-(line 380,col 40)",
            "(line 381,col 5)-(line 381,col 35)",
            "(line 383,col 5)-(line 383,col 49)",
            "(line 384,col 5)-(line 384,col 57)",
            "(line 385,col 5)-(line 385,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testObjectMethodSideEffects()",
        "snippet": "  public void testObjectMethodSideEffects() {\n    // \"toString\" and \"valueOf\" are assumed to be side-effect free\n    assertSideEffect(false, \"o.toString()\");\n    assertSideEffect(false, \"o.valueOf()\");\n\n    // other methods depend on the extern definitions\n    assertSideEffect(true, \"o.watch()\");\n  }\n",
        "begin_line": 388,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 390,col 44)",
            "(line 391,col 5)-(line 391,col 43)",
            "(line 394,col 5)-(line 394,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRegExpSideEffect()",
        "snippet": "  public void testRegExpSideEffect() {\n    // A RegExp Object by itself doesn't have any side-effects\n    assertSideEffect(false, \"/abc/gi\", true);\n    assertSideEffect(false, \"/abc/gi\", false);\n\n    // RegExp instance methods have global side-effects, so whether they are\n    // considered side-effect free depends on whether the global properties\n    // are referenced.\n    assertSideEffect(true, \"(/abc/gi).test('')\", true);\n    assertSideEffect(false, \"(/abc/gi).test('')\", false);\n    assertSideEffect(true, \"(/abc/gi).test(a)\", true);\n    assertSideEffect(false, \"(/abc/gi).test(b)\", false);\n\n    assertSideEffect(true, \"(/abc/gi).exec('')\", true);\n    assertSideEffect(false, \"(/abc/gi).exec('')\", false);\n\n    // Some RegExp object method that may have side-effects.\n    assertSideEffect(true, \"(/abc/gi).foo('')\", true);\n    assertSideEffect(true, \"(/abc/gi).foo('')\", false);\n\n    // Try the string RegExp ops.\n    assertSideEffect(true, \"''.match('a')\", true);\n    assertSideEffect(false, \"''.match('a')\", false);\n    assertSideEffect(true, \"''.match(/(a)/)\", true);\n    assertSideEffect(false, \"''.match(/(a)/)\", false);\n\n    assertSideEffect(true, \"''.replace('a')\", true);\n    assertSideEffect(false, \"''.replace('a')\", false);\n\n    assertSideEffect(true, \"''.search('a')\", true);\n    assertSideEffect(false, \"''.search('a')\", false);\n\n    assertSideEffect(true, \"''.split('a')\", true);\n    assertSideEffect(false, \"''.split('a')\", false);\n\n    // Some non-RegExp string op that may have side-effects.\n    assertSideEffect(true, \"''.foo('a')\", true);\n    assertSideEffect(true, \"''.foo('a')\", false);\n\n    // 'a' might be a RegExp object with the 'g' flag, in which case\n    // the state might change by running any of the string ops.\n    // Specifically, using these methods resets the \"lastIndex\" if used\n    // in combination with a RegExp instance \"exec\" method.\n    assertSideEffect(true, \"''.match(a)\", true);\n    assertSideEffect(true, \"''.match(a)\", false);\n  }\n",
        "begin_line": 397,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 45)",
            "(line 400,col 5)-(line 400,col 46)",
            "(line 405,col 5)-(line 405,col 55)",
            "(line 406,col 5)-(line 406,col 57)",
            "(line 407,col 5)-(line 407,col 54)",
            "(line 408,col 5)-(line 408,col 56)",
            "(line 410,col 5)-(line 410,col 55)",
            "(line 411,col 5)-(line 411,col 57)",
            "(line 414,col 5)-(line 414,col 54)",
            "(line 415,col 5)-(line 415,col 55)",
            "(line 418,col 5)-(line 418,col 50)",
            "(line 419,col 5)-(line 419,col 52)",
            "(line 420,col 5)-(line 420,col 52)",
            "(line 421,col 5)-(line 421,col 54)",
            "(line 423,col 5)-(line 423,col 52)",
            "(line 424,col 5)-(line 424,col 54)",
            "(line 426,col 5)-(line 426,col 51)",
            "(line 427,col 5)-(line 427,col 53)",
            "(line 429,col 5)-(line 429,col 50)",
            "(line 430,col 5)-(line 430,col 52)",
            "(line 433,col 5)-(line 433,col 48)",
            "(line 434,col 5)-(line 434,col 49)",
            "(line 440,col 5)-(line 440,col 48)",
            "(line 441,col 5)-(line 441,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertMutableState(boolean, java.lang.String)",
        "snippet": "  private void assertMutableState(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayEffectMutableState(n.getFirstChild()));\n  }\n",
        "begin_line": 444,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 23)",
            "(line 446,col 5)-(line 446,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayEffectMutableState()",
        "snippet": "  public void testMayEffectMutableState() {\n    assertMutableState(true, \"i++\");\n    assertMutableState(true, \"[b, [a, i++]]\");\n    assertMutableState(true, \"i=3\");\n    assertMutableState(true, \"[0, i=3]\");\n    assertMutableState(true, \"b()\");\n    assertMutableState(true, \"void b()\");\n    assertMutableState(true, \"[1, b()]\");\n    assertMutableState(true, \"b.b=4\");\n    assertMutableState(true, \"b.b--\");\n    assertMutableState(true, \"i--\");\n    assertMutableState(true, \"a[0][i=4]\");\n    assertMutableState(true, \"a += 3\");\n    assertMutableState(true, \"a, b, z += 4\");\n    assertMutableState(true, \"a ? c : d++\");\n    assertMutableState(true, \"a + c++\");\n    assertMutableState(true, \"a + c - d()\");\n    assertMutableState(true, \"a + c - d()\");\n\n    assertMutableState(true, \"function foo() {}\");\n    assertMutableState(true, \"while(true);\");\n    assertMutableState(true, \"if(true){a()}\");\n\n    assertMutableState(false, \"if(true){a}\");\n    assertMutableState(true, \"(function() { })\");\n    assertMutableState(true, \"(function() { i++ })\");\n    assertMutableState(true, \"[function a(){}]\");\n\n    assertMutableState(false, \"a\");\n    assertMutableState(true, \"[b, c [d, [e]]]\");\n    assertMutableState(true, \"({a: x, b: y, c: z})\");\n    // Note: RegEx objects are not immutable,  for instance, the exec\n    // method maintains state for \"global\" searches.\n    assertMutableState(true, \"/abc/gi\");\n    assertMutableState(false, \"'a'\");\n    assertMutableState(false, \"0\");\n    assertMutableState(false, \"a + c\");\n    assertMutableState(false, \"'c' + a[0]\");\n    assertMutableState(false, \"a[0][1]\");\n    assertMutableState(false, \"'a' + c\");\n    assertMutableState(false, \"'a' + a.name\");\n    assertMutableState(false, \"1, 2, 3\");\n    assertMutableState(false, \"a, b, 3\");\n    assertMutableState(true, \"(function(a, b) {  })\");\n    assertMutableState(false, \"a ? c : d\");\n    assertMutableState(false, \"'1' + navigator.userAgent\");\n\n    assertMutableState(true, \"new RegExp('foobar', 'i')\");\n    assertMutableState(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertMutableState(true, \"new Array()\");\n    assertMutableState(true, \"new Array\");\n    assertMutableState(true, \"new Array(4)\");\n    assertMutableState(true, \"new Array('a', 'b', 'c')\");\n    assertMutableState(true, \"new SomeClassINeverHeardOf()\");\n  }\n",
        "begin_line": 449,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 450,col 5)-(line 450,col 36)",
            "(line 451,col 5)-(line 451,col 46)",
            "(line 452,col 5)-(line 452,col 36)",
            "(line 453,col 5)-(line 453,col 41)",
            "(line 454,col 5)-(line 454,col 36)",
            "(line 455,col 5)-(line 455,col 41)",
            "(line 456,col 5)-(line 456,col 41)",
            "(line 457,col 5)-(line 457,col 38)",
            "(line 458,col 5)-(line 458,col 38)",
            "(line 459,col 5)-(line 459,col 36)",
            "(line 460,col 5)-(line 460,col 42)",
            "(line 461,col 5)-(line 461,col 39)",
            "(line 462,col 5)-(line 462,col 45)",
            "(line 463,col 5)-(line 463,col 44)",
            "(line 464,col 5)-(line 464,col 40)",
            "(line 465,col 5)-(line 465,col 44)",
            "(line 466,col 5)-(line 466,col 44)",
            "(line 468,col 5)-(line 468,col 50)",
            "(line 469,col 5)-(line 469,col 45)",
            "(line 470,col 5)-(line 470,col 46)",
            "(line 472,col 5)-(line 472,col 45)",
            "(line 473,col 5)-(line 473,col 49)",
            "(line 474,col 5)-(line 474,col 53)",
            "(line 475,col 5)-(line 475,col 49)",
            "(line 477,col 5)-(line 477,col 35)",
            "(line 478,col 5)-(line 478,col 48)",
            "(line 479,col 5)-(line 479,col 53)",
            "(line 482,col 5)-(line 482,col 40)",
            "(line 483,col 5)-(line 483,col 37)",
            "(line 484,col 5)-(line 484,col 35)",
            "(line 485,col 5)-(line 485,col 39)",
            "(line 486,col 5)-(line 486,col 44)",
            "(line 487,col 5)-(line 487,col 41)",
            "(line 488,col 5)-(line 488,col 41)",
            "(line 489,col 5)-(line 489,col 46)",
            "(line 490,col 5)-(line 490,col 41)",
            "(line 491,col 5)-(line 491,col 41)",
            "(line 492,col 5)-(line 492,col 54)",
            "(line 493,col 5)-(line 493,col 43)",
            "(line 494,col 5)-(line 494,col 59)",
            "(line 496,col 5)-(line 496,col 58)",
            "(line 497,col 5)-(line 497,col 66)",
            "(line 498,col 5)-(line 498,col 44)",
            "(line 499,col 5)-(line 499,col 42)",
            "(line 500,col 5)-(line 500,col 45)",
            "(line 501,col 5)-(line 501,col 57)",
            "(line 502,col 5)-(line 502,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression()",
        "snippet": "  public void testIsFunctionExpression() {\n    assertContainsAnonFunc(true, \"(function(){})\");\n    assertContainsAnonFunc(true, \"[function a(){}]\");\n    assertContainsAnonFunc(false, \"{x: function a(){}}\");\n    assertContainsAnonFunc(true, \"(function a(){})()\");\n    assertContainsAnonFunc(true, \"x = function a(){};\");\n    assertContainsAnonFunc(true, \"var x = function a(){};\");\n    assertContainsAnonFunc(true, \"if (function a(){});\");\n    assertContainsAnonFunc(true, \"while (function a(){});\");\n    assertContainsAnonFunc(true, \"do; while (function a(){});\");\n    assertContainsAnonFunc(true, \"for (function a(){};;);\");\n    assertContainsAnonFunc(true, \"for (;function a(){};);\");\n    assertContainsAnonFunc(true, \"for (;;function a(){});\");\n    assertContainsAnonFunc(true, \"for (p in function a(){});\");\n    assertContainsAnonFunc(true, \"with (function a(){}) {}\");\n    assertContainsAnonFunc(false, \"function a(){}\");\n    assertContainsAnonFunc(false, \"if (x) function a(){};\");\n    assertContainsAnonFunc(false, \"if (x) { function a(){} }\");\n    assertContainsAnonFunc(false, \"if (x); else function a(){};\");\n    assertContainsAnonFunc(false, \"while (x) function a(){};\");\n    assertContainsAnonFunc(false, \"do function a(){} while (0);\");\n    assertContainsAnonFunc(false, \"for (;;) function a(){}\");\n    assertContainsAnonFunc(false, \"for (p in o) function a(){};\");\n    assertContainsAnonFunc(false, \"with (x) function a(){}\");\n  }\n",
        "begin_line": 506,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 507,col 5)-(line 507,col 51)",
            "(line 508,col 5)-(line 508,col 53)",
            "(line 509,col 5)-(line 509,col 57)",
            "(line 510,col 5)-(line 510,col 55)",
            "(line 511,col 5)-(line 511,col 56)",
            "(line 512,col 5)-(line 512,col 60)",
            "(line 513,col 5)-(line 513,col 57)",
            "(line 514,col 5)-(line 514,col 60)",
            "(line 515,col 5)-(line 515,col 64)",
            "(line 516,col 5)-(line 516,col 60)",
            "(line 517,col 5)-(line 517,col 60)",
            "(line 518,col 5)-(line 518,col 60)",
            "(line 519,col 5)-(line 519,col 63)",
            "(line 520,col 5)-(line 520,col 61)",
            "(line 521,col 5)-(line 521,col 52)",
            "(line 522,col 5)-(line 522,col 60)",
            "(line 523,col 5)-(line 523,col 63)",
            "(line 524,col 5)-(line 524,col 66)",
            "(line 525,col 5)-(line 525,col 63)",
            "(line 526,col 5)-(line 526,col 66)",
            "(line 527,col 5)-(line 527,col 61)",
            "(line 528,col 5)-(line 528,col 66)",
            "(line 529,col 5)-(line 529,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testNewFunctionNode()",
        "snippet": "  public void testNewFunctionNode() {\n    Node expected = parse(\"function foo(p1, p2, p3) { throw 2; }\");\n    Node body = new Node(Token.BLOCK, new Node(Token.THROW, Node.newNumber(2)));\n    List<Node> params = Lists.newArrayList(Node.newString(Token.NAME, \"p1\"),\n                                           Node.newString(Token.NAME, \"p2\"),\n                                           Node.newString(Token.NAME, \"p3\"));\n    Node function = NodeUtil.newFunctionNode(\n        \"foo\", params, body, -1, -1);\n    Node actual = new Node(Token.SCRIPT);\n    actual.addChildToFront(function);\n    String difference = expected.checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 532,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 533,col 5)-(line 533,col 67)",
            "(line 534,col 5)-(line 534,col 80)",
            "(line 535,col 5)-(line 537,col 77)",
            "(line 538,col 5)-(line 539,col 37)",
            "(line 540,col 5)-(line 540,col 41)",
            "(line 541,col 5)-(line 541,col 37)",
            "(line 542,col 5)-(line 542,col 57)",
            "(line 543,col 5)-(line 545,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertContainsAnonFunc(boolean, java.lang.String)",
        "snippet": "  private void assertContainsAnonFunc(boolean expected, String js) {\n    Node funcParent = findParentOfFuncDescendant(parse(js));\n    assertNotNull(\"Expected function node in parse tree of: \" + js, funcParent);\n    Node funcNode = getFuncChild(funcParent);\n    assertEquals(expected, NodeUtil.isFunctionExpression(funcNode));\n  }\n",
        "begin_line": 548,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 60)",
            "(line 550,col 5)-(line 550,col 80)",
            "(line 551,col 5)-(line 551,col 45)",
            "(line 552,col 5)-(line 552,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.findParentOfFuncDescendant(com.google.javascript.rhino.Node)",
        "snippet": "  private Node findParentOfFuncDescendant(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return n;\n      }\n      Node result = findParentOfFuncDescendant(c);\n      if (result != null) {\n        return result;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 555,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 564,col 5)",
            "(line 565,col 5)-(line 565,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFuncChild(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getFuncChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 568,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 573,col 5)",
            "(line 574,col 5)-(line 574,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsType()",
        "snippet": "  public void testContainsType() {\n    assertTrue(NodeUtil.containsType(\n        parse(\"this\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"function foo(){}(this)\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"b?this:null\"), Token.THIS));\n\n    assertFalse(NodeUtil.containsType(\n        parse(\"a\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"function foo(){}\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"(b?foo():null)\"), Token.THIS));\n  }\n",
        "begin_line": 577,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 579,col 36)",
            "(line 580,col 5)-(line 581,col 54)",
            "(line 582,col 5)-(line 583,col 43)",
            "(line 585,col 5)-(line 586,col 33)",
            "(line 587,col 5)-(line 588,col 48)",
            "(line 589,col 5)-(line 590,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testReferencesThis()",
        "snippet": "  public void testReferencesThis() {\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"this\")));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"function foo(){}(this)\")));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"b?this:null\")));\n\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"a\")));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"function foo(){}\")));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"(b?foo():null)\")));\n  }\n",
        "begin_line": 593,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 594,col 5)-(line 595,col 24)",
            "(line 596,col 5)-(line 597,col 42)",
            "(line 598,col 5)-(line 599,col 31)",
            "(line 601,col 5)-(line 602,col 21)",
            "(line 603,col 5)-(line 604,col 36)",
            "(line 605,col 5)-(line 606,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNodeTypeReferenceCount()",
        "snippet": "  public void testGetNodeTypeReferenceCount() {\n    assertEquals(0, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"function foo(){}\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(1, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(2, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this;function foo(){}(this)\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n  }\n",
        "begin_line": 609,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 612,col 44)",
            "(line 613,col 5)-(line 615,col 44)",
            "(line 616,col 5)-(line 618,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsNameReferenceCount()",
        "snippet": "  public void testIsNameReferenceCount() {\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"var foo = function(){}\"), \"foo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"goo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"foo\"));\n  }\n",
        "begin_line": 621,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 622,col 5)-(line 623,col 43)",
            "(line 624,col 5)-(line 625,col 49)",
            "(line 626,col 5)-(line 627,col 49)",
            "(line 628,col 5)-(line 629,col 42)",
            "(line 630,col 5)-(line 631,col 70)",
            "(line 633,col 5)-(line 634,col 34)",
            "(line 635,col 5)-(line 636,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNameReferenceCount()",
        "snippet": "  public void testGetNameReferenceCount() {\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"undefined\"), \"undefined\"));\n    assertEquals(2, NodeUtil.getNameReferenceCount(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"goo\"));\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"var foo = function(){}\"), \"foo\"));\n  }\n",
        "begin_line": 640,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 642,col 49)",
            "(line 643,col 5)-(line 644,col 42)",
            "(line 645,col 5)-(line 646,col 70)",
            "(line 648,col 5)-(line 649,col 34)",
            "(line 650,col 5)-(line 651,col 34)",
            "(line 652,col 5)-(line 653,col 43)",
            "(line 654,col 5)-(line 655,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetVarsDeclaredInBranch()",
        "snippet": "  public void testGetVarsDeclaredInBranch() {\n    Compiler compiler = new Compiler();\n\n    assertNodeNames(Sets.newHashSet(\"foo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo;\")));\n    assertNodeNames(Sets.newHashSet(\"foo\",\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo,goo;\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"foo();\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"function(){var foo;}\")));\n    assertNodeNames(Sets.newHashSet(\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var goo;function(){var foo;}\")));\n  }\n",
        "begin_line": 658,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 659,col 39)",
            "(line 661,col 5)-(line 663,col 32)",
            "(line 664,col 5)-(line 666,col 36)",
            "(line 667,col 5)-(line 669,col 30)",
            "(line 670,col 5)-(line 672,col 44)",
            "(line 673,col 5)-(line 675,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNodeNames(java.util.Set<java.lang.String>, java.util.Collection<com.google.javascript.rhino.Node>)",
        "snippet": "  private void assertNodeNames(Set<String> nodeNames, Collection<Node> nodes) {\n    Set<String> actualNames = Sets.newHashSet();\n    for (Node node : nodes) {\n      actualNames.add(node.getString());\n    }\n    assertEquals(nodeNames, actualNames);\n  }\n",
        "begin_line": 678,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 679,col 5)-(line 679,col 48)",
            "(line 680,col 5)-(line 682,col 5)",
            "(line 683,col 5)-(line 683,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsControlStructureCodeBlock()",
        "snippet": "  public void testIsControlStructureCodeBlock() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"if (x) foo(); else boo();\");\n    Node ifNode = root.getFirstChild();\n\n    Node ifCondition = ifNode.getFirstChild();\n    Node ifCase = ifNode.getFirstChild().getNext();\n    Node elseCase = ifNode.getLastChild();\n\n    assertFalse(NodeUtil.isControlStructureCodeBlock(ifNode, ifCondition));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, ifCase));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, elseCase));\n  }\n",
        "begin_line": 686,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 39)",
            "(line 689,col 5)-(line 689,col 51)",
            "(line 690,col 5)-(line 690,col 39)",
            "(line 692,col 5)-(line 692,col 46)",
            "(line 693,col 5)-(line 693,col 51)",
            "(line 694,col 5)-(line 694,col 42)",
            "(line 696,col 5)-(line 696,col 75)",
            "(line 697,col 5)-(line 697,col 69)",
            "(line 698,col 5)-(line 698,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression1()",
        "snippet": "  public void testIsFunctionExpression1() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"(function foo() {})\");\n    Node StatementNode = root.getFirstChild();\n    assertTrue(NodeUtil.isExpressionNode(StatementNode));\n    Node functionNode = StatementNode.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertTrue(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 701,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 702,col 39)",
            "(line 704,col 5)-(line 704,col 45)",
            "(line 705,col 5)-(line 705,col 46)",
            "(line 706,col 5)-(line 706,col 57)",
            "(line 707,col 5)-(line 707,col 54)",
            "(line 708,col 5)-(line 708,col 50)",
            "(line 709,col 5)-(line 709,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression2()",
        "snippet": "  public void testIsFunctionExpression2() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"function foo() {}\");\n    Node functionNode = root.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertFalse(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 712,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 713,col 5)-(line 713,col 39)",
            "(line 715,col 5)-(line 715,col 43)",
            "(line 716,col 5)-(line 716,col 45)",
            "(line 717,col 5)-(line 717,col 50)",
            "(line 718,col 5)-(line 718,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild()",
        "snippet": "  public void testRemoveTryChild() {\n    Compiler compiler = new Compiler();\n\n    Node root = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    // Test removing the finally clause.\n    Node actual = root.cloneTree();\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, finallyBlock);\n    String expected = \"try {foo()} catch(e) {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the try clause.\n    actual = root.cloneTree();\n\n    tryNode = actual.getFirstChild();\n    tryBlock = tryNode.getFirstChild();\n    catchBlocks = tryNode.getFirstChild().getNext();\n    finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, tryBlock);\n    expected = \"try {} catch(e) {} finally {}\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the catch clause.\n    actual = root.cloneTree();\n\n    tryNode = actual.getFirstChild();\n    tryBlock = tryNode.getFirstChild();\n    catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(catchBlocks, catchBlock);\n    expected = \"try {foo()} finally {}\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n  }\n",
        "begin_line": 721,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 722,col 39)",
            "(line 724,col 5)-(line 724,col 60)",
            "(line 727,col 5)-(line 727,col 35)",
            "(line 729,col 5)-(line 729,col 42)",
            "(line 730,col 5)-(line 730,col 44)",
            "(line 731,col 5)-(line 731,col 57)",
            "(line 732,col 5)-(line 732,col 47)",
            "(line 734,col 5)-(line 734,col 48)",
            "(line 735,col 5)-(line 735,col 48)",
            "(line 736,col 5)-(line 736,col 64)",
            "(line 737,col 5)-(line 739,col 5)",
            "(line 742,col 5)-(line 742,col 30)",
            "(line 744,col 5)-(line 744,col 37)",
            "(line 745,col 5)-(line 745,col 39)",
            "(line 746,col 5)-(line 746,col 52)",
            "(line 747,col 5)-(line 747,col 42)",
            "(line 749,col 5)-(line 749,col 44)",
            "(line 750,col 5)-(line 750,col 47)",
            "(line 751,col 5)-(line 751,col 57)",
            "(line 752,col 5)-(line 754,col 5)",
            "(line 757,col 5)-(line 757,col 30)",
            "(line 759,col 5)-(line 759,col 37)",
            "(line 760,col 5)-(line 760,col 39)",
            "(line 761,col 5)-(line 761,col 52)",
            "(line 762,col 5)-(line 762,col 50)",
            "(line 763,col 5)-(line 763,col 42)",
            "(line 765,col 5)-(line 765,col 50)",
            "(line 766,col 5)-(line 766,col 40)",
            "(line 767,col 5)-(line 767,col 57)",
            "(line 768,col 5)-(line 770,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveVarChild()",
        "snippet": "  public void testRemoveVarChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"var foo, goo, hoo\");\n\n    Node varNode = actual.getFirstChild();\n    Node nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    String expected = \"var goo, hoo\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n\n    // Test removing the second child.\n    actual = parse(\"var foo, goo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo, hoo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last child of several children.\n    actual = parse(\"var foo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last.\n    actual = parse(\"var hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 774,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 775,col 5)-(line 775,col 39)",
            "(line 778,col 5)-(line 778,col 45)",
            "(line 780,col 5)-(line 780,col 42)",
            "(line 781,col 5)-(line 781,col 44)",
            "(line 783,col 5)-(line 783,col 44)",
            "(line 784,col 5)-(line 784,col 37)",
            "(line 785,col 5)-(line 785,col 64)",
            "(line 786,col 5)-(line 788,col 5)",
            "(line 792,col 5)-(line 792,col 40)",
            "(line 794,col 5)-(line 794,col 37)",
            "(line 795,col 5)-(line 795,col 49)",
            "(line 797,col 5)-(line 797,col 44)",
            "(line 798,col 5)-(line 798,col 30)",
            "(line 799,col 5)-(line 799,col 57)",
            "(line 800,col 5)-(line 802,col 5)",
            "(line 805,col 5)-(line 805,col 35)",
            "(line 807,col 5)-(line 807,col 37)",
            "(line 808,col 5)-(line 808,col 49)",
            "(line 810,col 5)-(line 810,col 44)",
            "(line 811,col 5)-(line 811,col 25)",
            "(line 812,col 5)-(line 812,col 57)",
            "(line 813,col 5)-(line 815,col 5)",
            "(line 818,col 5)-(line 818,col 30)",
            "(line 820,col 5)-(line 820,col 37)",
            "(line 821,col 5)-(line 821,col 39)",
            "(line 823,col 5)-(line 823,col 44)",
            "(line 824,col 5)-(line 824,col 18)",
            "(line 825,col 5)-(line 825,col 57)",
            "(line 826,col 5)-(line 828,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild1()",
        "snippet": "  public void testRemoveLabelChild1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 831,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 832,col 5)-(line 832,col 39)",
            "(line 835,col 5)-(line 835,col 38)",
            "(line 837,col 5)-(line 837,col 44)",
            "(line 838,col 5)-(line 838,col 52)",
            "(line 840,col 5)-(line 840,col 53)",
            "(line 841,col 5)-(line 841,col 25)",
            "(line 842,col 5)-(line 842,col 64)",
            "(line 843,col 5)-(line 845,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild2()",
        "snippet": "  public void testRemoveLabelChild2() {\n    // Test removing the first child.\n    Node actual = parse(\"achoo: foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 848,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 850,col 5)-(line 850,col 45)",
            "(line 852,col 5)-(line 852,col 44)",
            "(line 853,col 5)-(line 853,col 52)",
            "(line 855,col 5)-(line 855,col 53)",
            "(line 856,col 5)-(line 856,col 25)",
            "(line 857,col 5)-(line 857,col 64)",
            "(line 858,col 5)-(line 860,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveForChild()",
        "snippet": "  public void testRemoveForChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    Node forNode = actual.getFirstChild();\n    Node child = forNode.getFirstChild();\n\n    NodeUtil.removeChild(forNode, child);\n    String expected = \"for(;a<0;a++)foo()\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the condition.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;;a++)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the increment.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;a++);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(a in ack)foo();\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(a in ack);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 863,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 864,col 5)-(line 864,col 39)",
            "(line 867,col 5)-(line 867,col 53)",
            "(line 869,col 5)-(line 869,col 42)",
            "(line 870,col 5)-(line 870,col 41)",
            "(line 872,col 5)-(line 872,col 41)",
            "(line 873,col 5)-(line 873,col 43)",
            "(line 874,col 5)-(line 874,col 64)",
            "(line 875,col 5)-(line 875,col 65)",
            "(line 879,col 5)-(line 879,col 48)",
            "(line 881,col 5)-(line 881,col 37)",
            "(line 882,col 5)-(line 882,col 46)",
            "(line 884,col 5)-(line 884,col 41)",
            "(line 885,col 5)-(line 885,col 40)",
            "(line 886,col 5)-(line 886,col 57)",
            "(line 887,col 5)-(line 887,col 65)",
            "(line 891,col 5)-(line 891,col 48)",
            "(line 893,col 5)-(line 893,col 37)",
            "(line 894,col 5)-(line 894,col 56)",
            "(line 896,col 5)-(line 896,col 41)",
            "(line 897,col 5)-(line 897,col 40)",
            "(line 898,col 5)-(line 898,col 57)",
            "(line 899,col 5)-(line 899,col 65)",
            "(line 903,col 5)-(line 903,col 48)",
            "(line 905,col 5)-(line 905,col 37)",
            "(line 906,col 5)-(line 906,col 35)",
            "(line 908,col 5)-(line 908,col 41)",
            "(line 909,col 5)-(line 909,col 39)",
            "(line 910,col 5)-(line 910,col 57)",
            "(line 911,col 5)-(line 911,col 65)",
            "(line 915,col 5)-(line 915,col 42)",
            "(line 917,col 5)-(line 917,col 37)",
            "(line 918,col 5)-(line 918,col 35)",
            "(line 920,col 5)-(line 920,col 41)",
            "(line 921,col 5)-(line 921,col 32)",
            "(line 922,col 5)-(line 922,col 57)",
            "(line 923,col 5)-(line 923,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock1()",
        "snippet": "  public void testMergeBlock1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"{{a();b();}}\");\n\n    Node parentBlock = actual.getFirstChild();\n    Node childBlock = parentBlock.getFirstChild();\n\n    assertTrue(NodeUtil.tryMergeBlock(childBlock));\n    String expected = \"{a();b();}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 926,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 927,col 39)",
            "(line 930,col 5)-(line 930,col 40)",
            "(line 932,col 5)-(line 932,col 46)",
            "(line 933,col 5)-(line 933,col 50)",
            "(line 935,col 5)-(line 935,col 51)",
            "(line 936,col 5)-(line 936,col 35)",
            "(line 937,col 5)-(line 937,col 64)",
            "(line 938,col 5)-(line 938,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock2()",
        "snippet": "  public void testMergeBlock2() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"foo:{a();}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n  }\n",
        "begin_line": 941,
        "end_line": 951,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 39)",
            "(line 945,col 5)-(line 945,col 38)",
            "(line 947,col 5)-(line 947,col 46)",
            "(line 948,col 5)-(line 948,col 49)",
            "(line 950,col 5)-(line 950,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock3()",
        "snippet": "  public void testMergeBlock3() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"foo:{a();boo()}\";\n    Node actual = parse(\"foo:{a();boo()}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n    String expected = code;\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 953,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 954,col 5)-(line 954,col 39)",
            "(line 957,col 5)-(line 957,col 36)",
            "(line 958,col 5)-(line 958,col 43)",
            "(line 960,col 5)-(line 960,col 46)",
            "(line 961,col 5)-(line 961,col 49)",
            "(line 963,col 5)-(line 963,col 52)",
            "(line 964,col 5)-(line 964,col 27)",
            "(line 965,col 5)-(line 965,col 64)",
            "(line 966,col 5)-(line 966,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetSourceName()",
        "snippet": "  public void testGetSourceName() {\n    Node n = new Node(Token.BLOCK);\n    Node parent = new Node(Token.BLOCK, n);\n    parent.putProp(Node.SOURCENAME_PROP, \"foo\");\n    assertEquals(\"foo\", NodeUtil.getSourceName(n));\n  }\n",
        "begin_line": 969,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 970,col 35)",
            "(line 971,col 5)-(line 971,col 43)",
            "(line 972,col 5)-(line 972,col 48)",
            "(line 973,col 5)-(line 973,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLabelName()",
        "snippet": "  public void testIsLabelName() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"a:while(1) {a; continue a; break a; break;}\";\n    Node actual = parse(code);\n\n    Node labelNode = actual.getFirstChild();\n    assertTrue(labelNode.getType() == Token.LABEL);\n    assertTrue(NodeUtil.isLabelName(labelNode.getFirstChild()));\n    assertFalse(NodeUtil.isLabelName(labelNode.getLastChild()));\n\n    Node whileNode = labelNode.getLastChild();\n    assertTrue(whileNode.getType() == Token.WHILE);\n    Node whileBlock = whileNode.getLastChild();\n    assertTrue(whileBlock.getType() == Token.BLOCK);\n    assertFalse(NodeUtil.isLabelName(whileBlock));\n\n    Node firstStatement = whileBlock.getFirstChild();\n    assertTrue(firstStatement.getType() == Token.EXPR_RESULT);\n    Node variableReference = firstStatement.getFirstChild();\n    assertTrue(variableReference.getType() == Token.NAME);\n    assertFalse(NodeUtil.isLabelName(variableReference));\n\n    Node continueStatement = firstStatement.getNext();\n    assertTrue(continueStatement.getType() == Token.CONTINUE);\n    assertTrue(NodeUtil.isLabelName(continueStatement.getFirstChild()));\n\n    Node firstBreak = continueStatement.getNext();\n    assertTrue(firstBreak.getType() == Token.BREAK);\n    assertTrue(NodeUtil.isLabelName(firstBreak.getFirstChild()));\n\n    Node secondBreak = firstBreak.getNext();\n    assertTrue(secondBreak.getType() == Token.BREAK);\n    assertFalse(secondBreak.hasChildren());\n    assertFalse(NodeUtil.isLabelName(secondBreak.getFirstChild()));\n  }\n",
        "begin_line": 976,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 977,col 5)-(line 977,col 39)",
            "(line 980,col 5)-(line 980,col 64)",
            "(line 981,col 5)-(line 981,col 30)",
            "(line 983,col 5)-(line 983,col 44)",
            "(line 984,col 5)-(line 984,col 51)",
            "(line 985,col 5)-(line 985,col 64)",
            "(line 986,col 5)-(line 986,col 64)",
            "(line 988,col 5)-(line 988,col 46)",
            "(line 989,col 5)-(line 989,col 51)",
            "(line 990,col 5)-(line 990,col 47)",
            "(line 991,col 5)-(line 991,col 52)",
            "(line 992,col 5)-(line 992,col 50)",
            "(line 994,col 5)-(line 994,col 53)",
            "(line 995,col 5)-(line 995,col 62)",
            "(line 996,col 5)-(line 996,col 60)",
            "(line 997,col 5)-(line 997,col 58)",
            "(line 998,col 5)-(line 998,col 57)",
            "(line 1000,col 5)-(line 1000,col 54)",
            "(line 1001,col 5)-(line 1001,col 62)",
            "(line 1002,col 5)-(line 1002,col 72)",
            "(line 1004,col 5)-(line 1004,col 50)",
            "(line 1005,col 5)-(line 1005,col 52)",
            "(line 1006,col 5)-(line 1006,col 65)",
            "(line 1008,col 5)-(line 1008,col 44)",
            "(line 1009,col 5)-(line 1009,col 53)",
            "(line 1010,col 5)-(line 1010,col 43)",
            "(line 1011,col 5)-(line 1011,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue1()",
        "snippet": "  public void testLocalValue1() throws Exception {\n    // Names are not known to be local.\n    assertFalse(testLocalValue(\"x\"));\n    assertFalse(testLocalValue(\"x()\"));\n    assertFalse(testLocalValue(\"this\"));\n    assertFalse(testLocalValue(\"arguments\"));\n\n    // We can't know if new objects are local unless we know\n    // that they don't alias themselves.\n    assertFalse(testLocalValue(\"new x()\"));\n\n    // property references are assume to be non-local\n    assertFalse(testLocalValue(\"(new x()).y\"));\n    assertFalse(testLocalValue(\"(new x())['y']\"));\n\n    // Primitive values are local\n    assertTrue(testLocalValue(\"null\"));\n    assertTrue(testLocalValue(\"undefined\"));\n    assertTrue(testLocalValue(\"Infinity\"));\n    assertTrue(testLocalValue(\"NaN\"));\n    assertTrue(testLocalValue(\"1\"));\n    assertTrue(testLocalValue(\"'a'\"));\n    assertTrue(testLocalValue(\"true\"));\n    assertTrue(testLocalValue(\"false\"));\n    assertTrue(testLocalValue(\"[]\"));\n    assertTrue(testLocalValue(\"{}\"));\n\n    // The contents of arrays and objects don't matter\n    assertTrue(testLocalValue(\"[x]\"));\n    assertTrue(testLocalValue(\"{'a':x}\"));\n\n    // Pre-increment results in primitive number\n    assertTrue(testLocalValue(\"++x\"));\n    assertTrue(testLocalValue(\"--x\"));\n\n    // Post-increment, the previous value matters.\n    assertFalse(testLocalValue(\"x++\"));\n    assertFalse(testLocalValue(\"x--\"));\n\n    // The left side of an only assign matters if it is an alias or mutable.\n    assertTrue(testLocalValue(\"x=1\"));\n    assertFalse(testLocalValue(\"x=[]\"));\n    assertFalse(testLocalValue(\"x=y\"));\n    // The right hand side of assignment opts don't matter, as they force\n    // a local result.\n    assertTrue(testLocalValue(\"x+=y\"));\n    assertTrue(testLocalValue(\"x*=y\"));\n    // Comparisons always result in locals, as they force a local boolean\n    // result.\n    assertTrue(testLocalValue(\"x==y\"));\n    assertTrue(testLocalValue(\"x!=y\"));\n    assertTrue(testLocalValue(\"x>y\"));\n    // Only the right side of a comma matters\n    assertTrue(testLocalValue(\"(1,2)\"));\n    assertTrue(testLocalValue(\"(x,1)\"));\n    assertFalse(testLocalValue(\"(x,y)\"));\n\n    // Both the operands of OR matter\n    assertTrue(testLocalValue(\"1||2\"));\n    assertFalse(testLocalValue(\"x||1\"));\n    assertFalse(testLocalValue(\"x||y\"));\n    assertFalse(testLocalValue(\"1||y\"));\n\n    // Both the operands of AND matter\n    assertTrue(testLocalValue(\"1&&2\"));\n    assertFalse(testLocalValue(\"x&&1\"));\n    assertFalse(testLocalValue(\"x&&y\"));\n    assertFalse(testLocalValue(\"1&&y\"));\n\n    // Only the results of HOOK matter\n    assertTrue(testLocalValue(\"x?1:2\"));\n    assertFalse(testLocalValue(\"x?x:2\"));\n    assertFalse(testLocalValue(\"x?1:x\"));\n    assertFalse(testLocalValue(\"x?x:y\"));\n\n    // Results of ops are local values\n    assertTrue(testLocalValue(\"!y\"));\n    assertTrue(testLocalValue(\"~y\"));\n    assertTrue(testLocalValue(\"y + 1\"));\n    assertTrue(testLocalValue(\"y + z\"));\n    assertTrue(testLocalValue(\"y * z\"));\n\n    assertTrue(testLocalValue(\"'a' in x\"));\n    assertTrue(testLocalValue(\"typeof x\"));\n    assertTrue(testLocalValue(\"x instanceof y\"));\n\n    assertTrue(testLocalValue(\"void x\"));\n    assertTrue(testLocalValue(\"void 0\"));\n\n    assertFalse(testLocalValue(\"{}.x\"));\n\n    assertTrue(testLocalValue(\"{}.toString()\"));\n    assertTrue(testLocalValue(\"o.toString()\"));\n\n    assertFalse(testLocalValue(\"o.valueOf()\"));\n  }\n",
        "begin_line": 1014,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1016,col 5)-(line 1016,col 37)",
            "(line 1017,col 5)-(line 1017,col 39)",
            "(line 1018,col 5)-(line 1018,col 40)",
            "(line 1019,col 5)-(line 1019,col 45)",
            "(line 1023,col 5)-(line 1023,col 43)",
            "(line 1026,col 5)-(line 1026,col 47)",
            "(line 1027,col 5)-(line 1027,col 50)",
            "(line 1030,col 5)-(line 1030,col 39)",
            "(line 1031,col 5)-(line 1031,col 44)",
            "(line 1032,col 5)-(line 1032,col 43)",
            "(line 1033,col 5)-(line 1033,col 38)",
            "(line 1034,col 5)-(line 1034,col 36)",
            "(line 1035,col 5)-(line 1035,col 38)",
            "(line 1036,col 5)-(line 1036,col 39)",
            "(line 1037,col 5)-(line 1037,col 40)",
            "(line 1038,col 5)-(line 1038,col 37)",
            "(line 1039,col 5)-(line 1039,col 37)",
            "(line 1042,col 5)-(line 1042,col 38)",
            "(line 1043,col 5)-(line 1043,col 42)",
            "(line 1046,col 5)-(line 1046,col 38)",
            "(line 1047,col 5)-(line 1047,col 38)",
            "(line 1050,col 5)-(line 1050,col 39)",
            "(line 1051,col 5)-(line 1051,col 39)",
            "(line 1054,col 5)-(line 1054,col 38)",
            "(line 1055,col 5)-(line 1055,col 40)",
            "(line 1056,col 5)-(line 1056,col 39)",
            "(line 1059,col 5)-(line 1059,col 39)",
            "(line 1060,col 5)-(line 1060,col 39)",
            "(line 1063,col 5)-(line 1063,col 39)",
            "(line 1064,col 5)-(line 1064,col 39)",
            "(line 1065,col 5)-(line 1065,col 38)",
            "(line 1067,col 5)-(line 1067,col 40)",
            "(line 1068,col 5)-(line 1068,col 40)",
            "(line 1069,col 5)-(line 1069,col 41)",
            "(line 1072,col 5)-(line 1072,col 39)",
            "(line 1073,col 5)-(line 1073,col 40)",
            "(line 1074,col 5)-(line 1074,col 40)",
            "(line 1075,col 5)-(line 1075,col 40)",
            "(line 1078,col 5)-(line 1078,col 39)",
            "(line 1079,col 5)-(line 1079,col 40)",
            "(line 1080,col 5)-(line 1080,col 40)",
            "(line 1081,col 5)-(line 1081,col 40)",
            "(line 1084,col 5)-(line 1084,col 40)",
            "(line 1085,col 5)-(line 1085,col 41)",
            "(line 1086,col 5)-(line 1086,col 41)",
            "(line 1087,col 5)-(line 1087,col 41)",
            "(line 1090,col 5)-(line 1090,col 37)",
            "(line 1091,col 5)-(line 1091,col 37)",
            "(line 1092,col 5)-(line 1092,col 40)",
            "(line 1093,col 5)-(line 1093,col 40)",
            "(line 1094,col 5)-(line 1094,col 40)",
            "(line 1096,col 5)-(line 1096,col 43)",
            "(line 1097,col 5)-(line 1097,col 43)",
            "(line 1098,col 5)-(line 1098,col 49)",
            "(line 1100,col 5)-(line 1100,col 41)",
            "(line 1101,col 5)-(line 1101,col 41)",
            "(line 1103,col 5)-(line 1103,col 40)",
            "(line 1105,col 5)-(line 1105,col 48)",
            "(line 1106,col 5)-(line 1106,col 47)",
            "(line 1108,col 5)-(line 1108,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue(java.lang.String)",
        "snippet": "  private boolean testLocalValue(String js) {\n    Node script = parse(\"var test = \" + js +\";\");\n    Preconditions.checkState(script.getType() == Token.SCRIPT);\n    Node var = script.getFirstChild();\n    Preconditions.checkState(var.getType() == Token.VAR);\n    Node name = var.getFirstChild();\n    Preconditions.checkState(name.getType() == Token.NAME);\n    Node value = name.getFirstChild();\n\n    return NodeUtil.evaluatesToLocalValue(value);\n  }\n",
        "begin_line": 1111,
        "end_line": 1121,
        "comment": "",
        "child_ranges": [
            "(line 1112,col 5)-(line 1112,col 49)",
            "(line 1113,col 5)-(line 1113,col 63)",
            "(line 1114,col 5)-(line 1114,col 38)",
            "(line 1115,col 5)-(line 1115,col 57)",
            "(line 1116,col 5)-(line 1116,col 36)",
            "(line 1117,col 5)-(line 1117,col 59)",
            "(line 1118,col 5)-(line 1118,col 38)",
            "(line 1120,col 5)-(line 1120,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefine()",
        "snippet": "  public void testValidDefine() {\n    assertTrue(testValidDefineValue(\"1\"));\n    assertTrue(testValidDefineValue(\"-3\"));\n    assertTrue(testValidDefineValue(\"true\"));\n    assertTrue(testValidDefineValue(\"false\"));\n    assertTrue(testValidDefineValue(\"'foo'\"));\n\n    assertFalse(testValidDefineValue(\"x\"));\n    assertFalse(testValidDefineValue(\"null\"));\n    assertFalse(testValidDefineValue(\"undefined\"));\n    assertFalse(testValidDefineValue(\"NaN\"));\n\n    assertTrue(testValidDefineValue(\"!true\"));\n    assertTrue(testValidDefineValue(\"-true\"));\n    assertTrue(testValidDefineValue(\"1 & 8\"));\n    assertTrue(testValidDefineValue(\"1 + 8\"));\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));\n\n    assertFalse(testValidDefineValue(\"1 & foo\"));\n  }\n",
        "begin_line": 1123,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 42)",
            "(line 1125,col 5)-(line 1125,col 43)",
            "(line 1126,col 5)-(line 1126,col 45)",
            "(line 1127,col 5)-(line 1127,col 46)",
            "(line 1128,col 5)-(line 1128,col 46)",
            "(line 1130,col 5)-(line 1130,col 43)",
            "(line 1131,col 5)-(line 1131,col 46)",
            "(line 1132,col 5)-(line 1132,col 51)",
            "(line 1133,col 5)-(line 1133,col 45)",
            "(line 1135,col 5)-(line 1135,col 46)",
            "(line 1136,col 5)-(line 1136,col 46)",
            "(line 1137,col 5)-(line 1137,col 46)",
            "(line 1138,col 5)-(line 1138,col 46)",
            "(line 1139,col 5)-(line 1139,col 50)",
            "(line 1141,col 5)-(line 1141,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefineValue(java.lang.String)",
        "snippet": "  private boolean testValidDefineValue(String js) {\n    Node script = parse(\"var test = \" + js +\";\");\n    Node var = script.getFirstChild();\n    Node name = var.getFirstChild();\n    Node value = name.getFirstChild();\n\n    ImmutableSet<String> defines = ImmutableSet.of();\n    return NodeUtil.isValidDefineValue(value, defines);\n  }\n",
        "begin_line": 1144,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 5)-(line 1145,col 49)",
            "(line 1146,col 5)-(line 1146,col 38)",
            "(line 1147,col 5)-(line 1147,col 36)",
            "(line 1148,col 5)-(line 1148,col 38)",
            "(line 1150,col 5)-(line 1150,col 53)",
            "(line 1151,col 5)-(line 1151,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.PureFunctionIdentifierTest()",
        "snippet": "  public PureFunctionIdentifierTest() {\n    super(kExterns);\n    enableTypeCheck(CheckLevel.ERROR);\n  }\n",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 20)",
            "(line 173,col 5)-(line 173,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // run pass once.\n    return 1;\n  }\n",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.tearDown()",
        "snippet": "  @Override\n  protected void tearDown() throws Exception {\n    super.tearDown();\n    noSideEffectCalls.clear();\n    localResultCalls.clear();\n    boolean regExpHaveSideEffects = true;\n  }\n",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 21)",
            "(line 185,col 5)-(line 185,col 30)",
            "(line 186,col 5)-(line 186,col 29)",
            "(line 187,col 5)-(line 187,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testIssue303()",
        "snippet": "  public void testIssue303() throws Exception {\n    checkMarkedCalls(\n        \"/** @constructor */ function F() {\" +\n        \"  var self = this;\" +\n        \"  window.setTimeout(function() {\" +\n        \"    window.location = self.location;\" +\n        \"  }, 0);\" +\n        \"}\" +\n        \"F.prototype.setLocation = function(x) {\" +\n        \"  this.location = x;\" +\n        \"};\" +\n        \"(new F()).setLocation('http://www.google.com/');\",\n        ImmutableList.<String>of());\n  }\n",
        "begin_line": 190,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 202,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testIssue303b()",
        "snippet": "  public void testIssue303b() throws Exception {\n    checkMarkedCalls(\n        \"/** @constructor */ function F() {\" +\n        \"  var self = this;\" +\n        \"  window.setTimeout(function() {\" +\n        \"    window.location = self.location;\" +\n        \"  }, 0);\" +\n        \"}\" +\n        \"F.prototype.setLocation = function(x) {\" +\n        \"  this.location = x;\" +\n        \"};\" +\n        \"function x() {\" +\n        \"  (new F()).setLocation('http://www.google.com/');\" +\n        \"} window['x'] = x;\",\n        ImmutableList.<String>of());\n  }\n",
        "begin_line": 205,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 219,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new1()",
        "snippet": "  public void testAnnotationInExterns_new1() throws Exception {\n    checkMarkedCalls(\"externSENone()\",\n        ImmutableList.<String>of(\"externSENone\"));\n  }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 223,col 5)-(line 224,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new2()",
        "snippet": "  public void testAnnotationInExterns_new2() throws Exception {\n    checkMarkedCalls(\"externSEThis()\",\n        ImmutableList.<String>of());\n  }\n",
        "begin_line": 227,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 229,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new3()",
        "snippet": "  public void testAnnotationInExterns_new3() throws Exception {\n    checkMarkedCalls(\"new externObjSEThis()\",\n        ImmutableList.<String>of(\"externObjSEThis\"));\n  }\n",
        "begin_line": 232,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 233,col 5)-(line 234,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new4()",
        "snippet": "  public void testAnnotationInExterns_new4() throws Exception {\n    // The entire expression containing \"externObjSEThisMethod\" is considered\n    // side-effect free in this context.\n\n    checkMarkedCalls(\"new externObjSEThis().externObjSEThisMethod('')\",\n        BROKEN_NEW ?\n            ImmutableList.<String>of(\n               \"externObjSEThis\") :\n            ImmutableList.<String>of(\n               \"externObjSEThis\", \"NEW STRING externObjSEThisMethod\"));\n  }\n",
        "begin_line": 237,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 246,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new5()",
        "snippet": "  public void testAnnotationInExterns_new5() throws Exception {\n    checkMarkedCalls(\n        \"function f() { new externObjSEThis() };\" +\n        \"f();\",\n        ImmutableList.<String>of(\"externObjSEThis\", \"f\"));\n  }\n",
        "begin_line": 249,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 250,col 5)-(line 253,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new6()",
        "snippet": "  public void testAnnotationInExterns_new6() throws Exception {\n    // While \"externObjSEThisMethod\" has modifies \"this\"\n    // it does not have global side-effects with \"this\" is\n    // a known local value.\n    checkMarkedCalls(\n        \"function f() {\" +\n        \"  new externObjSEThis().externObjSEThisMethod('') \" +\n        \"};\" +\n        \"f();\",\n        BROKEN_NEW ?\n            ImmutableList.<String>of(\n                \"externObjSEThis\") :\n           ImmutableList.<String>of(\n               \"externObjSEThis\", \"NEW STRING externObjSEThisMethod\", \"f\"));\n  }\n",
        "begin_line": 256,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 269,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new7()",
        "snippet": "  public void testAnnotationInExterns_new7() throws Exception {\n    // While \"externObjSEThisMethod\" has modifies \"this\"\n    // it does not have global side-effects with \"this\" is\n    // a known local value.\n    checkMarkedCalls(\n        \"function f() {\" +\n        \"  var x = new externObjSEThis(); \" +\n        \"  x.externObjSEThisMethod('') \" +\n        \"};\" +\n        \"f();\",\n        ImmutableList.<String>of(\"externObjSEThis\"));\n  }\n",
        "begin_line": 272,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 282,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new8()",
        "snippet": "  public void testAnnotationInExterns_new8() throws Exception {\n    // \"externObjSEThisMethod\" modifies \"this\", the 'this'\n    // is not a known local value, so it must be assumed it is to\n    // have global side-effects.\n    checkMarkedCalls(\n        \"function f(x) {\" +\n        \"  x.externObjSEThisMethod('') \" +\n        \"};\" +\n        \"f(new externObjSEThis());\",\n        ImmutableList.<String>of(\"externObjSEThis\"));\n  }\n",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 294,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new9()",
        "snippet": "  public void testAnnotationInExterns_new9() throws Exception {\n    // \"externObjSEThisMethod\" modifies \"this\", the 'this'\n    // is not a known local value, so it must be assumed it is to\n    // have global side-effects.  All possible values of \"x\" are considered\n    // as no intraprocedural data flow is done.\n    checkMarkedCalls(\n        \"function f(x) {\" +\n        \"  x = new externObjSEThis(); \" +\n        \"  x.externObjSEThisMethod('') \" +\n        \"};\" +\n        \"f(g);\",\n        ImmutableList.<String>of(\"externObjSEThis\"));\n  }\n",
        "begin_line": 297,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 302,col 5)-(line 308,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns_new10()",
        "snippet": "  public void testAnnotationInExterns_new10() throws Exception {\n    // While \"externObjSEThisMethod2\" only modifies it arguments\n    // and the arguments are known local values, we don't\n    // yet connect the dots, and \"f\" is consider to have\n    // global side-effects.\n    checkMarkedCalls(\n        \"function f() {\" +\n        \"  new externObjSEThis().externObjSEThisMethod2('') \" +\n        \"};\" +\n        \"f();\",\n        ImmutableList.<String>of(\"externObjSEThis\"));\n  }\n",
        "begin_line": 312,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 322,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns1()",
        "snippet": "  public void testAnnotationInExterns1() throws Exception {\n    checkMarkedCalls(\"externSef1()\", ImmutableList.<String>of());\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 326,col 5)-(line 326,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns2()",
        "snippet": "  public void testAnnotationInExterns2() throws Exception {\n    checkMarkedCalls(\"externSef2()\", ImmutableList.<String>of());\n  }\n",
        "begin_line": 329,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 330,col 5)-(line 330,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns3()",
        "snippet": "  public void testAnnotationInExterns3() throws Exception {\n    checkMarkedCalls(\"externNsef1()\", ImmutableList.of(\"externNsef1\"));\n  }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 334,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns4()",
        "snippet": "  public void testAnnotationInExterns4() throws Exception {\n    checkMarkedCalls(\"externNsef2()\", ImmutableList.of(\"externNsef2\"));\n  }\n",
        "begin_line": 337,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExterns5()",
        "snippet": "  public void testAnnotationInExterns5() throws Exception {\n    checkMarkedCalls(\"externNsef3()\", ImmutableList.of(\"externNsef3\"));\n  }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNamespaceAnnotationInExterns1()",
        "snippet": "  public void testNamespaceAnnotationInExterns1() throws Exception {\n    checkMarkedCalls(\"externObj.sef1()\", ImmutableList.<String>of());\n  }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 346,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNamespaceAnnotationInExterns2()",
        "snippet": "  public void testNamespaceAnnotationInExterns2() throws Exception {\n    checkMarkedCalls(\"externObj.nsef1()\", ImmutableList.of(\"externObj.nsef1\"));\n  }\n",
        "begin_line": 349,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNamespaceAnnotationInExterns3()",
        "snippet": "  public void testNamespaceAnnotationInExterns3() throws Exception {\n    checkMarkedCalls(\"externObj.nsef2()\", ImmutableList.of(\"externObj.nsef2\"));\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNamespaceAnnotationInExterns4()",
        "snippet": "  public void testNamespaceAnnotationInExterns4() throws Exception {\n    checkMarkedCalls(\"externObj.partialFn()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 357,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 359,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNamespaceAnnotationInExterns5()",
        "snippet": "  public void testNamespaceAnnotationInExterns5() throws Exception {\n    // Test that adding a second definition for a partially defined\n    // function doesn't make us think that the function has no side\n    // effects.\n    String templateSrc = \"var o = {}; o.<fnName> = function(){}; o.<fnName>()\";\n\n    // Ensure that functions with name != \"partialFn\" get marked.\n    checkMarkedCalls(templateSrc.replaceAll(\"<fnName>\", \"notPartialFn\"),\n                     ImmutableList.of(\"o.notPartialFn\"));\n\n    checkMarkedCalls(templateSrc.replaceAll(\"<fnName>\", \"partialFn\"),\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 362,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 366,col 79)",
            "(line 369,col 5)-(line 370,col 57)",
            "(line 372,col 5)-(line 373,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNamespaceAnnotationInExterns6()",
        "snippet": "  public void testNamespaceAnnotationInExterns6() throws Exception {\n    checkMarkedCalls(\"externObj.partialSharedFn()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 376,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 378,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns1()",
        "snippet": "  public void testConstructorAnnotationInExterns1() throws Exception {\n    checkMarkedCalls(\"new externSefConstructor()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 381,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 382,col 5)-(line 383,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns2()",
        "snippet": "  public void testConstructorAnnotationInExterns2() throws Exception {\n    checkMarkedCalls(\"var a = new externSefConstructor();\" +\n                     \"a.sefFnOfSefObj()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 386,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 389,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns3()",
        "snippet": "  public void testConstructorAnnotationInExterns3() throws Exception {\n    checkMarkedCalls(\"var a = new externSefConstructor();\" +\n                     \"a.nsefFnOfSefObj()\",\n                     ImmutableList.of(\"a.nsefFnOfSefObj\"));\n  }\n",
        "begin_line": 392,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 395,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns4()",
        "snippet": "  public void testConstructorAnnotationInExterns4() throws Exception {\n    checkMarkedCalls(\"var a = new externSefConstructor();\" +\n                     \"a.externShared()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 398,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 401,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns5()",
        "snippet": "  public void testConstructorAnnotationInExterns5() throws Exception {\n    checkMarkedCalls(\"new externNsefConstructor()\",\n                     ImmutableList.of(\"externNsefConstructor\"));\n  }\n",
        "begin_line": 404,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 406,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns6()",
        "snippet": "  public void testConstructorAnnotationInExterns6() throws Exception {\n    checkMarkedCalls(\"var a = new externNsefConstructor();\" +\n                     \"a.sefFnOfNsefObj()\",\n                     ImmutableList.of(\"externNsefConstructor\"));\n  }\n",
        "begin_line": 409,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 412,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns7()",
        "snippet": "  public void testConstructorAnnotationInExterns7() throws Exception {\n    checkMarkedCalls(\"var a = new externNsefConstructor();\" +\n                     \"a.nsefFnOfNsefObj()\",\n                     ImmutableList.of(\"externNsefConstructor\",\n                                      \"a.nsefFnOfNsefObj\"));\n  }\n",
        "begin_line": 415,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 416,col 5)-(line 419,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorAnnotationInExterns8()",
        "snippet": "  public void testConstructorAnnotationInExterns8() throws Exception {\n    checkMarkedCalls(\"var a = new externNsefConstructor();\" +\n                     \"a.externShared()\",\n                     ImmutableList.of(\"externNsefConstructor\"));\n  }\n",
        "begin_line": 422,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 425,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testSharedFunctionName1()",
        "snippet": "  public void testSharedFunctionName1() throws Exception {\n    checkMarkedCalls(\"var a; \" +\n                     \"if (true) {\" +\n                     \"  a = new externNsefConstructor()\" +\n                     \"} else {\" +\n                     \"  a = new externSefConstructor()\" +\n                     \"}\" +\n                     \"a.externShared()\",\n                     ImmutableList.of(\"externNsefConstructor\"));\n  }\n",
        "begin_line": 428,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 436,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testSharedFunctionName2()",
        "snippet": "  public void testSharedFunctionName2() throws Exception {\n    // Implementation for both externNsefConstructor and externNsefConstructor2\n    // have no side effects.\n    boolean broken = true;\n    if (broken) {\n      checkMarkedCalls(\"var a; \" +\n                       \"if (true) {\" +\n                       \"  a = new externNsefConstructor()\" +\n                       \"} else {\" +\n                       \"  a = new externNsefConstructor2()\" +\n                       \"}\" +\n                       \"a.externShared()\",\n                       ImmutableList.of(\"externNsefConstructor\",\n                                        \"externNsefConstructor2\"));\n    } else {\n      checkMarkedCalls(\"var a; \" +\n                       \"if (true) {\" +\n                       \"  a = new externNsefConstructor()\" +\n                       \"} else {\" +\n                       \"  a = new externNsefConstructor2()\" +\n                       \"}\" +\n                       \"a.externShared()\",\n                       ImmutableList.of(\"externNsefConstructor\",\n                                        \"externNsefConstructor2\",\n                                        \"a.externShared\"));\n    }\n  }\n",
        "begin_line": 439,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 26)",
            "(line 443,col 5)-(line 464,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs1()",
        "snippet": "  public void testAnnotationInExternStubs1() throws Exception {\n    checkMarkedCalls(\"o.propWithStubBefore('a');\",\n        ImmutableList.<String>of(\"o.propWithStubBefore\"));\n  }\n",
        "begin_line": 467,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 469,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs1b()",
        "snippet": "  public void testAnnotationInExternStubs1b() throws Exception {\n    checkMarkedCalls(\"o.propWithStubBeforeWithJSDoc('a');\",\n        ImmutableList.<String>of(\"o.propWithStubBeforeWithJSDoc\"));\n  }\n",
        "begin_line": 472,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 474,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs2()",
        "snippet": "  public void testAnnotationInExternStubs2() throws Exception {\n    checkMarkedCalls(\"o.propWithStubAfter('a');\",\n        ImmutableList.<String>of(\"o.propWithStubAfter\"));\n  }\n",
        "begin_line": 477,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 478,col 5)-(line 479,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs2b()",
        "snippet": "  public void testAnnotationInExternStubs2b() throws Exception {\n    checkMarkedCalls(\"o.propWithStubAfter('a');\",\n        ImmutableList.<String>of(\"o.propWithStubAfter\"));\n  }\n",
        "begin_line": 482,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 483,col 5)-(line 484,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs3()",
        "snippet": "  public void testAnnotationInExternStubs3() throws Exception {\n    checkMarkedCalls(\"propWithAnnotatedStubAfter('a');\",\n        ImmutableList.<String>of());\n  }\n",
        "begin_line": 487,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 489,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs4()",
        "snippet": "  public void testAnnotationInExternStubs4() throws Exception {\n    // An externs definition with a stub that differs from the declaration.\n    // Verify our assumption is valid about this.\n    String externs =\n      \"/**@constructor*/function externObj5(){}\\n\" +\n\n      \"externObj5.prototype.propWithAnnotatedStubAfter = function(s) {};\\n\" +\n\n      \"/**\\n\" +\n      \" * @param {string} s id.\\n\" +\n      \" * @return {string}\\n\" +\n      \" * @nosideeffects\\n\" +\n      \" */\\n\" +\n      \"externObj5.prototype.propWithAnnotatedStubAfter;\\n\";\n\n    List<String> expected = ImmutableList.<String>of();\n    testSame(externs,\n        \"o.prototype.propWithAnnotatedStubAfter\",\n        TypeValidator.DUP_VAR_DECLARATION, false);\n    assertEquals(expected, noSideEffectCalls);\n    noSideEffectCalls.clear();\n  }\n",
        "begin_line": 492,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 495,col 5)-(line 505,col 59)",
            "(line 507,col 5)-(line 507,col 55)",
            "(line 508,col 5)-(line 510,col 50)",
            "(line 511,col 5)-(line 511,col 46)",
            "(line 512,col 5)-(line 512,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnnotationInExternStubs5()",
        "snippet": "  public void testAnnotationInExternStubs5() throws Exception {\n    // An externs definition with a stub that differs from the declaration.\n    // Verify our assumption is valid about this.\n    String externs =\n      \"/**@constructor*/function externObj5(){}\\n\" +\n\n      \"/**\\n\" +\n      \" * @param {string} s id.\\n\" +\n      \" * @return {string}\\n\" +\n      \" * @nosideeffects\\n\" +\n      \" */\\n\" +\n      \"externObj5.prototype.propWithAnnotatedStubAfter = function(s) {};\\n\" +\n\n      \"/**\\n\" +\n      \" * @param {string} s id.\\n\" +\n      \" * @return {string}\\n\" +\n      \" */\\n\" +\n      \"externObj5.prototype.propWithAnnotatedStubAfter;\\n\";\n\n    List<String> expected = ImmutableList.<String>of();\n    testSame(externs,\n        \"o.prototype.propWithAnnotatedStubAfter\",\n        TypeValidator.DUP_VAR_DECLARATION, false);\n    assertEquals(expected, noSideEffectCalls);\n    noSideEffectCalls.clear();\n  }\n",
        "begin_line": 515,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 518,col 5)-(line 532,col 59)",
            "(line 534,col 5)-(line 534,col 55)",
            "(line 535,col 5)-(line 537,col 50)",
            "(line 538,col 5)-(line 538,col 46)",
            "(line 539,col 5)-(line 539,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testNoSideEffectsSimple()",
        "snippet": "  public void testNoSideEffectsSimple() throws Exception {\n    String prefix = \"function f(){\";\n    String suffix = \"} f()\";\n    List<String> expected = ImmutableList.of(\"f\");\n\n    checkMarkedCalls(\n        prefix + \"\" + suffix, expected);\n    checkMarkedCalls(\n        prefix + \"return 1\" + suffix, expected);\n    checkMarkedCalls(\n        prefix + \"return 1 + 2\" + suffix, expected);\n\n    // local var\n    checkMarkedCalls(\n        prefix + \"var a = 1; return a\" + suffix, expected);\n\n    // mutate local var\n    checkMarkedCalls(\n        prefix + \"var a = 1; a = 2; return a\" + suffix, expected);\n    checkMarkedCalls(\n        prefix + \"var a = 1; a = 2; return a + 1\" + suffix, expected);\n\n    // read from obj literal\n    checkMarkedCalls(\n        prefix + \"var a = {foo : 1}; return a.foo\" + suffix, expected);\n    checkMarkedCalls(\n        prefix + \"var a = {foo : 1}; return a.foo + 1\" + suffix, expected);\n\n    // read from extern\n    checkMarkedCalls(\n        prefix + \"return externObj\" + suffix, expected);\n    checkMarkedCalls(\n        \"function g(x) { x.foo = 3; }\" /* to suppress missing property */ +\n        prefix + \"return externObj.foo\" + suffix, expected);\n  }\n",
        "begin_line": 542,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 543,col 5)-(line 543,col 36)",
            "(line 544,col 5)-(line 544,col 28)",
            "(line 545,col 5)-(line 545,col 50)",
            "(line 547,col 5)-(line 548,col 40)",
            "(line 549,col 5)-(line 550,col 48)",
            "(line 551,col 5)-(line 552,col 52)",
            "(line 555,col 5)-(line 556,col 59)",
            "(line 559,col 5)-(line 560,col 66)",
            "(line 561,col 5)-(line 562,col 70)",
            "(line 565,col 5)-(line 566,col 71)",
            "(line 567,col 5)-(line 568,col 75)",
            "(line 571,col 5)-(line 572,col 56)",
            "(line 573,col 5)-(line 575,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testResultLocalitySimple()",
        "snippet": "  public void testResultLocalitySimple() throws Exception {\n    String prefix = \"var g; function f(){\";\n    String suffix = \"} f()\";\n    List<String> expected = ImmutableList.of(\"f\");\n    List<String> notExpected = ImmutableList.of();\n\n    // no return\n    checkLocalityOfMarkedCalls(\n        prefix + \"\" + suffix, expected);\n    // simple return expressions\n    checkLocalityOfMarkedCalls(\n        prefix + \"return 1\" + suffix, expected);\n    checkLocalityOfMarkedCalls(\n        prefix + \"return 1 + 2\" + suffix, expected);\n\n    // global result\n    checkLocalityOfMarkedCalls(\n        prefix + \"return g\" + suffix, notExpected);\n\n    // multiple returns\n    checkLocalityOfMarkedCalls(\n        prefix + \"return 1; return 2\" + suffix, expected);\n    checkLocalityOfMarkedCalls(\n        prefix + \"return 1; return g\" + suffix, notExpected);\n\n\n    // local var, not yet.\n    checkLocalityOfMarkedCalls(\n        prefix + \"var a = 1; return a\" + suffix, notExpected);\n\n    // mutate local var, not yet.\n    checkLocalityOfMarkedCalls(\n        prefix + \"var a = 1; a = 2; return a\" + suffix, notExpected);\n    checkLocalityOfMarkedCalls(\n        prefix + \"var a = 1; a = 2; return a + 1\" + suffix, expected);\n\n    // read from obj literal\n    checkLocalityOfMarkedCalls(\n        prefix + \"return {foo : 1}.foo\" + suffix,\n        notExpected);\n    checkLocalityOfMarkedCalls(\n        prefix + \"var a = {foo : 1}; return a.foo\" + suffix,\n        notExpected);\n\n    // read from extern\n    checkLocalityOfMarkedCalls(\n        prefix + \"return externObj\" + suffix, notExpected);\n    checkLocalityOfMarkedCalls(\n        \"function inner(x) { x.foo = 3; }\" /* to suppress missing property */ +\n        prefix + \"return externObj.foo\" + suffix, notExpected);\n  }\n",
        "begin_line": 578,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 579,col 43)",
            "(line 580,col 5)-(line 580,col 28)",
            "(line 581,col 5)-(line 581,col 50)",
            "(line 582,col 5)-(line 582,col 50)",
            "(line 585,col 5)-(line 586,col 40)",
            "(line 588,col 5)-(line 589,col 48)",
            "(line 590,col 5)-(line 591,col 52)",
            "(line 594,col 5)-(line 595,col 51)",
            "(line 598,col 5)-(line 599,col 58)",
            "(line 600,col 5)-(line 601,col 61)",
            "(line 605,col 5)-(line 606,col 62)",
            "(line 609,col 5)-(line 610,col 69)",
            "(line 611,col 5)-(line 612,col 70)",
            "(line 615,col 5)-(line 617,col 21)",
            "(line 618,col 5)-(line 620,col 21)",
            "(line 623,col 5)-(line 624,col 59)",
            "(line 625,col 5)-(line 627,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testExternCalls()",
        "snippet": "  public void testExternCalls() throws Exception {\n    String prefix = \"function f(){\";\n    String suffix = \"} f()\";\n\n    checkMarkedCalls(prefix + \"externNsef1()\" + suffix,\n                     ImmutableList.of(\"externNsef1\", \"f\"));\n    checkMarkedCalls(prefix + \"externObj.nsef1()\" + suffix,\n                     ImmutableList.of(\"externObj.nsef1\", \"f\"));\n\n    checkMarkedCalls(prefix + \"externSef1()\" + suffix,\n                     ImmutableList.<String>of());\n    checkMarkedCalls(prefix + \"externObj.sef1()\" + suffix,\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 630,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 631,col 5)-(line 631,col 36)",
            "(line 632,col 5)-(line 632,col 28)",
            "(line 634,col 5)-(line 635,col 59)",
            "(line 636,col 5)-(line 637,col 63)",
            "(line 639,col 5)-(line 640,col 49)",
            "(line 641,col 5)-(line 642,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testApply()",
        "snippet": "  public void testApply() throws Exception {\n    checkMarkedCalls(\"function f() {return 42}\" +\n                     \"f.apply()\",\n                     ImmutableList.of(\"f.apply\"));\n  }\n",
        "begin_line": 645,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 646,col 5)-(line 648,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCall()",
        "snippet": "  public void testCall() throws Exception {\n    checkMarkedCalls(\"function f() {return 42}\" +\n                     \"f.call()\",\n                     ImmutableList.<String>of(\"f.call\"));\n  }\n",
        "begin_line": 651,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 654,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInference1()",
        "snippet": "  public void testInference1() throws Exception {\n    checkMarkedCalls(\"function f() {return g()}\" +\n                     \"function g() {return 42}\" +\n                     \"f()\",\n                     ImmutableList.of(\"g\", \"f\"));\n  }\n",
        "begin_line": 657,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 658,col 5)-(line 661,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInference2()",
        "snippet": "  public void testInference2() throws Exception {\n    checkMarkedCalls(\"var a = 1;\" +\n                     \"function f() {g()}\" +\n                     \"function g() {a=2}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 664,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 669,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInference3()",
        "snippet": "  public void testInference3() throws Exception {\n    checkMarkedCalls(\"var f = function() {return g()};\" +\n                     \"var g = function() {return 42};\" +\n                     \"f()\",\n                     ImmutableList.of(\"g\", \"f\"));\n  }\n",
        "begin_line": 672,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 673,col 5)-(line 676,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInference4()",
        "snippet": "  public void testInference4() throws Exception {\n    checkMarkedCalls(\"var a = 1;\" +\n                     \"var f = function() {g()};\" +\n                     \"var g = function() {a=2};\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 679,
        "end_line": 685,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 684,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInference5()",
        "snippet": "  public void testInference5() throws Exception {\n    checkMarkedCalls(\"var goog = {};\" +\n                     \"goog.f = function() {return goog.g()};\" +\n                     \"goog.g = function() {return 42};\" +\n                     \"goog.f()\",\n                     ImmutableList.of(\"goog.g\", \"goog.f\"));\n  }\n",
        "begin_line": 687,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 688,col 5)-(line 692,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInference6()",
        "snippet": "  public void testInference6() throws Exception {\n    checkMarkedCalls(\"var a = 1;\" +\n                     \"var goog = {};\" +\n                     \"goog.f = function() {goog.g()};\" +\n                     \"goog.g = function() {a=2};\" +\n                     \"goog.f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 695,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 701,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects1()",
        "snippet": "  public void testLocalizedSideEffects1() throws Exception {\n    // Returning a function that contains a modification of a local\n    // is not a global side-effect.\n    checkMarkedCalls(\"function f() {\" +\n                     \"  var x = {foo : 0}; return function() {x.foo++};\" +\n                     \"}\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"f\"));\n  }\n",
        "begin_line": 704,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 707,col 5)-(line 711,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects2()",
        "snippet": "  public void testLocalizedSideEffects2() throws Exception {\n    // Calling a function that contains a modification of a local\n    // is a global side-effect (the value has escaped).\n    checkMarkedCalls(\"function f() {\" +\n                     \"  var x = {foo : 0}; (function() {x.foo++})();\" +\n                     \"}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 714,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 721,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects3()",
        "snippet": "  public void testLocalizedSideEffects3() throws Exception {\n    // A local that might be assigned a gobal value and whose properties\n    // are modified must be considered a global side-effect.\n    checkMarkedCalls(\"var g = {foo:1}; function f() {var x = g; x.foo++}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 724,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 727,col 5)-(line 729,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects4()",
        "snippet": "  public void testLocalizedSideEffects4() throws Exception {\n    // An array is an local object, assigning a local array is not a global\n    // side-effect.\n    checkMarkedCalls(\"function f() {var x = []; x[0] = 1;}\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"f\"));\n  }\n",
        "begin_line": 732,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 737,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects5()",
        "snippet": "  public void testLocalizedSideEffects5() throws Exception {\n    // Assigning a local alias of a global is a global\n    // side-effect.\n    checkMarkedCalls(\"var g = [];function f() {var x = g; x[0] = 1;}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 740,
        "end_line": 746,
        "comment": "",
        "child_ranges": [
            "(line 743,col 5)-(line 745,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects6()",
        "snippet": "  public void testLocalizedSideEffects6() throws Exception {\n    // Returning a local object that has been modified\n    // is not a global side-effect.\n    checkMarkedCalls(\"function f() {\" +\n                     \"  var x = {}; x.foo = 1; return x;\" +\n                     \"}\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"f\"));\n  }\n",
        "begin_line": 748,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 755,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects7()",
        "snippet": "  public void testLocalizedSideEffects7() throws Exception {\n    // Returning a local object that has been modified\n    // is not a global side-effect.\n    checkMarkedCalls(\"/** @constructor A */ function A() {};\" +\n                     \"function f() {\" +\n                     \"  var a = []; a[1] = 1; return a;\" +\n                     \"}\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"f\"));\n  }\n",
        "begin_line": 758,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 761,col 5)-(line 766,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects8()",
        "snippet": "  public void testLocalizedSideEffects8() throws Exception {\n    // Returning a local object that has been modified\n    // is not a global side-effect.\n    checkMarkedCalls(\"/** @constructor A */ function A() {};\" +\n                     \"function f() {\" +\n                     \"  var a = new A; a.foo = 1; return a;\" +\n                     \"}\" +\n                     \"f()\",\n                     BROKEN_NEW ?\n                         ImmutableList.<String>of(\"A\") :\n                         ImmutableList.<String>of(\"A\", \"f\"));\n  }\n",
        "begin_line": 769,
        "end_line": 780,
        "comment": "",
        "child_ranges": [
            "(line 772,col 5)-(line 779,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects9()",
        "snippet": "  public void testLocalizedSideEffects9() throws Exception {\n    // Returning a local object that has been modified\n    // is not a global side-effect.\n    checkMarkedCalls(\"/** @constructor A */ function A() {this.x = 1};\" +\n                     \"function f() {\" +\n                     \"  var a = new A; a.foo = 1; return a;\" +\n                     \"}\" +\n                     \"f()\",\n                     BROKEN_NEW ?\n                         ImmutableList.<String>of(\"A\") :\n                         ImmutableList.<String>of(\"A\", \"f\"));\n  }\n",
        "begin_line": 782,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 785,col 5)-(line 792,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects10()",
        "snippet": "  public void testLocalizedSideEffects10() throws Exception {\n    // Returning a local object that has been modified\n    // is not a global side-effect.\n    checkMarkedCalls(\"/** @constructor A */ function A() {};\" +\n                     \"A.prototype.g = function() {this.x = 1};\" +\n                     \"function f() {\" +\n                     \"  var a = new A; a.g(); return a;\" +\n                     \"}\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"A\"));\n  }\n",
        "begin_line": 795,
        "end_line": 805,
        "comment": "",
        "child_ranges": [
            "(line 798,col 5)-(line 804,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testLocalizedSideEffects11()",
        "snippet": "  public void testLocalizedSideEffects11() throws Exception {\n    // Calling a function of a local object that taints this.\n    checkMarkedCalls(\n        \"/** @constructor */ function A() {}\" +\n        \"A.prototype.update = function() { this.x = 1; };\" +\n        \"/** @constructor */ function B() { \" +\n        \"  this.a_ = new A();\" +\n        \"}\" +\n        \"B.prototype.updateA = function() {\" +\n        \"  var b = this.a_;\" +\n        \"  b.update();\" +\n        \"};\" +\n        \"var x = new B();\" +\n        \"x.updateA();\",\n        ImmutableList.of(\"A\", \"B\"));\n  }\n",
        "begin_line": 807,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 809,col 5)-(line 821,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testUnaryOperators1()",
        "snippet": "  public void testUnaryOperators1() throws Exception {\n    checkMarkedCalls(\"function f() {var x = 1; x++}\" +\n                     \"f()\",\n                     ImmutableList.of(\"f\"));\n  }\n",
        "begin_line": 824,
        "end_line": 828,
        "comment": "",
        "child_ranges": [
            "(line 825,col 5)-(line 827,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testUnaryOperators2()",
        "snippet": "  public void testUnaryOperators2() throws Exception {\n    checkMarkedCalls(\"var x = 1;\" +\n                     \"function f() {x++}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 830,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 831,col 5)-(line 834,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testUnaryOperators3()",
        "snippet": "  public void testUnaryOperators3() throws Exception {\n    checkMarkedCalls(\"function f() {var x = {foo : 0}; x.foo++}\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"f\"));\n  }\n",
        "begin_line": 837,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 840,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testUnaryOperators4()",
        "snippet": "  public void testUnaryOperators4() throws Exception {\n    checkMarkedCalls(\"var x = {foo : 0};\" +\n                     \"function f() {x.foo++}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 843,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 847,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testUnaryOperators5()",
        "snippet": "  public void testUnaryOperators5() throws Exception {\n    checkMarkedCalls(\"function f(x) {x.foo++}\" +\n                     \"f({foo : 0})\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 850,
        "end_line": 854,
        "comment": "",
        "child_ranges": [
            "(line 851,col 5)-(line 853,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testDeleteOperator1()",
        "snippet": "  public void testDeleteOperator1() throws Exception {\n    checkMarkedCalls(\"var x = {};\" +\n                     \"function f() {delete x}\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 856,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 857,col 5)-(line 860,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testDeleteOperator2()",
        "snippet": "  public void testDeleteOperator2() throws Exception {\n    checkMarkedCalls(\"function f() {var x = {}; delete x}\" +\n                     \"f()\",\n                     ImmutableList.of(\"f\"));\n  }\n",
        "begin_line": 863,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 864,col 5)-(line 866,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testOrOperator1()",
        "snippet": "  public void testOrOperator1() throws Exception {\n    checkMarkedCalls(\"var f = externNsef1 || externNsef2;\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 869,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 870,col 5)-(line 872,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testOrOperator2()",
        "snippet": "  public void testOrOperator2() throws Exception {\n    checkMarkedCalls(\"var f = function(){} || externNsef2;\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 875,
        "end_line": 879,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 878,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testOrOperator3()",
        "snippet": "  public void testOrOperator3() throws Exception {\n    checkMarkedCalls(\"var f = externNsef2 || function(){};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 881,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 882,col 5)-(line 884,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testOrOperators4()",
        "snippet": "  public void testOrOperators4() throws Exception {\n    checkMarkedCalls(\"var f = function(){} || function(){};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 887,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 888,col 5)-(line 890,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAndOperator1()",
        "snippet": "  public void testAndOperator1() throws Exception {\n    checkMarkedCalls(\"var f = externNsef1 && externNsef2;\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 893,
        "end_line": 897,
        "comment": "",
        "child_ranges": [
            "(line 894,col 5)-(line 896,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAndOperator2()",
        "snippet": "  public void testAndOperator2() throws Exception {\n    checkMarkedCalls(\"var f = function(){} && externNsef2;\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 899,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 900,col 5)-(line 902,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAndOperator3()",
        "snippet": "  public void testAndOperator3() throws Exception {\n    checkMarkedCalls(\"var f = externNsef2 && function(){};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 905,
        "end_line": 909,
        "comment": "",
        "child_ranges": [
            "(line 906,col 5)-(line 908,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAndOperators4()",
        "snippet": "  public void testAndOperators4() throws Exception {\n    checkMarkedCalls(\"var f = function(){} && function(){};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 911,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 912,col 5)-(line 914,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testHookOperator1()",
        "snippet": "  public void testHookOperator1() throws Exception {\n    checkMarkedCalls(\"var f = true ? externNsef1 : externNsef2;\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 917,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 918,col 5)-(line 920,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testHookOperator2()",
        "snippet": "  public void testHookOperator2() throws Exception {\n    checkMarkedCalls(\"var f = true ? function(){} : externNsef2;\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 923,
        "end_line": 927,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 926,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testHookOperator3()",
        "snippet": "  public void testHookOperator3() throws Exception {\n    checkMarkedCalls(\"var f = true ? externNsef2 : function(){};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 929,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 930,col 5)-(line 932,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testHookOperators4()",
        "snippet": "  public void testHookOperators4() throws Exception {\n    checkMarkedCalls(\"var f = true ? function(){} : function(){};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of());\n  }\n",
        "begin_line": 935,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 936,col 5)-(line 938,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testThrow1()",
        "snippet": "  public void testThrow1() throws Exception {\n    checkMarkedCalls(\"function f(){throw Error()};\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"Error\"));\n  }\n",
        "begin_line": 941,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 944,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testThrow2()",
        "snippet": "  public void testThrow2() throws Exception {\n    checkMarkedCalls(\"/**@constructor*/function A(){throw Error()};\\n\" +\n                     \"function f(){return new A()}\\n\" +\n                     \"f()\",\n                     ImmutableList.<String>of(\"Error\"));\n  }\n",
        "begin_line": 947,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 951,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAssignmentOverride()",
        "snippet": "  public void testAssignmentOverride() throws Exception {\n    checkMarkedCalls(\"/**@constructor*/function A(){}\\n\" +\n                     \"A.prototype.foo = function(){};\\n\" +\n                     \"var a = new A;\\n\" +\n                     \"a.foo();\\n\",\n                     ImmutableList.<String>of(\"A\", \"a.foo\"));\n\n    checkMarkedCalls(\"/**@constructor*/function A(){}\\n\" +\n                     \"A.prototype.foo = function(){};\\n\" +\n                     \"var x = 1\\n\" +\n                     \"function f(){x = 10}\\n\" +\n                     \"var a = new A;\\n\" +\n                     \"a.foo = f;\\n\" +\n                     \"a.foo();\\n\",\n                     ImmutableList.<String>of(\"A\"));\n  }\n",
        "begin_line": 954,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 955,col 5)-(line 959,col 61)",
            "(line 961,col 5)-(line 968,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInheritance1()",
        "snippet": "  public void testInheritance1() throws Exception {\n    String source =\n        CompilerTypeTestCase.CLOSURE_DEFS +\n        \"/**@constructor*/function I(){}\\n\" +\n        \"I.prototype.foo = function(){};\\n\" +\n        \"I.prototype.bar = function(){this.foo()};\\n\" +\n        \"/**@constructor\\n@extends {I}*/function A(){};\\n\" +\n        \"goog.inherits(A, I)\\n;\" +\n        \"/** @override */A.prototype.foo = function(){var data=24};\\n\" +\n        \"var i = new I();i.foo();i.bar();\\n\" +\n        \"var a = new A();a.foo();a.bar();\";\n\n    checkMarkedCalls(source,\n                     ImmutableList.of(\"this.foo\", \"goog.inherits\",\n                                      \"I\", \"i.foo\", \"i.bar\",\n                                      \"A\", \"a.foo\", \"a.bar\"));\n  }\n",
        "begin_line": 971,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 972,col 5)-(line 981,col 43)",
            "(line 983,col 5)-(line 986,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInheritance2()",
        "snippet": "  public void testInheritance2() throws Exception {\n    String source =\n        CompilerTypeTestCase.CLOSURE_DEFS +\n        \"/**@constructor*/function I(){}\\n\" +\n        \"I.prototype.foo = function(){};\\n\" +\n        \"I.prototype.bar = function(){this.foo()};\\n\" +\n        \"/**@constructor\\n@extends {I}*/function A(){};\\n\" +\n        \"goog.inherits(A, I)\\n;\" +\n        \"/** @override */A.prototype.foo = function(){this.data=24};\\n\" +\n        \"var i = new I();i.foo();i.bar();\\n\" +\n        \"var a = new A();a.foo();a.bar();\";\n\n    checkMarkedCalls(source, ImmutableList.of(\"goog.inherits\", \"I\", \"A\"));\n  }\n",
        "begin_line": 989,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 990,col 5)-(line 999,col 43)",
            "(line 1001,col 5)-(line 1001,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallBeforeDefinition()",
        "snippet": "  public void testCallBeforeDefinition() throws Exception {\n    checkMarkedCalls(\"f(); function f(){}\",\n                     ImmutableList.of(\"f\"));\n\n    checkMarkedCalls(\"var a = {}; a.f(); a.f = function (){}\",\n                     ImmutableList.of(\"a.f\"));\n  }\n",
        "begin_line": 1004,
        "end_line": 1010,
        "comment": "",
        "child_ranges": [
            "(line 1005,col 5)-(line 1006,col 44)",
            "(line 1008,col 5)-(line 1009,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorThatModifiesThis1()",
        "snippet": "  public void testConstructorThatModifiesThis1() throws Exception {\n    String source = \"/**@constructor*/function A(){this.foo = 1}\\n\" +\n        \"function f() {return new A}\" +\n        \"f()\";\n\n    checkMarkedCalls(source, ImmutableList.of(\"A\", \"f\"));\n  }\n",
        "begin_line": 1012,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1015,col 14)",
            "(line 1017,col 5)-(line 1017,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorThatModifiesThis2()",
        "snippet": "  public void testConstructorThatModifiesThis2() throws Exception {\n    String source = \"/**@constructor*/function A(){this.foo()}\\n\" +\n        \"A.prototype.foo = function(){this.data=24};\\n\" +\n        \"function f() {return new A}\" +\n        \"f()\";\n\n    checkMarkedCalls(source, ImmutableList.of(\"A\", \"f\"));\n  }\n",
        "begin_line": 1020,
        "end_line": 1027,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1024,col 14)",
            "(line 1026,col 5)-(line 1026,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorThatModifiesThis3()",
        "snippet": "  public void testConstructorThatModifiesThis3() throws Exception {\n\n    // test chained\n    String source = \"/**@constructor*/function A(){this.foo()}\\n\" +\n        \"A.prototype.foo = function(){this.bar()};\\n\" +\n        \"A.prototype.bar = function(){this.data=24};\\n\" +\n        \"function f() {return new A}\" +\n        \"f()\";\n\n    checkMarkedCalls(source, ImmutableList.of(\"A\", \"f\"));\n  }\n",
        "begin_line": 1029,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1032,col 5)-(line 1036,col 14)",
            "(line 1038,col 5)-(line 1038,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorThatModifiesThis4()",
        "snippet": "  public void testConstructorThatModifiesThis4() throws Exception {\n\n    // test \".call\" notation.\n    String source = \"/**@constructor*/function A(){foo.call(this)}\\n\" +\n        \"function foo(){this.data=24};\\n\" +\n        \"function f() {return new A}\" +\n        \"f()\";\n\n    checkMarkedCalls(source, ImmutableList.of(\"A\", \"f\"));\n  }\n",
        "begin_line": 1041,
        "end_line": 1050,
        "comment": "",
        "child_ranges": [
            "(line 1044,col 5)-(line 1047,col 14)",
            "(line 1049,col 5)-(line 1049,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorThatModifiesGlobal1()",
        "snippet": "  public void testConstructorThatModifiesGlobal1() throws Exception {\n    String source = \"var b = 0;\" +\n        \"/**@constructor*/function A(){b=1};\\n\" +\n        \"function f() {return new A}\" +\n        \"f()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of());\n  }\n",
        "begin_line": 1052,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 5)-(line 1056,col 14)",
            "(line 1058,col 5)-(line 1058,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testConstructorThatModifiesGlobal2()",
        "snippet": "  public void testConstructorThatModifiesGlobal2() throws Exception {\n    String source = \"var b = 0;\" +\n        \"/**@constructor*/function A(){this.foo()}\\n\" +\n        \"A.prototype.foo = function(){b=1};\\n\" +\n        \"function f() {return new A}\" +\n        \"f()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of());\n  }\n",
        "begin_line": 1061,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 5)-(line 1066,col 14)",
            "(line 1068,col 5)-(line 1068,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionThatModifiesThis()",
        "snippet": "  public void testCallFunctionThatModifiesThis() throws Exception {\n    String source = \"/**@constructor*/function A(){}\\n\" +\n        \"A.prototype.foo = function(){this.data=24};\\n\" +\n        \"function f(){var a = new A; return a}\\n\" +\n        \"function g(){var a = new A; a.foo(); return a}\\n\" +\n        \"f(); g()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"A\", \"A\", \"f\"));\n  }\n",
        "begin_line": 1071,
        "end_line": 1079,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1076,col 19)",
            "(line 1078,col 5)-(line 1078,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrG()",
        "snippet": "  public void testCallFunctionFOrG() throws Exception {\n    String source = \"function f(){}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (f || g)() }\\n\" +\n        \"h()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(f || g)\", \"h\"));\n  }\n",
        "begin_line": 1081,
        "end_line": 1088,
        "comment": "",
        "child_ranges": [
            "(line 1082,col 5)-(line 1085,col 14)",
            "(line 1087,col 5)-(line 1087,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGViaHook()",
        "snippet": "  public void testCallFunctionFOrGViaHook() throws Exception {\n    String source = \"function f(){}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (false ? f : g)() }\\n\" +\n        \"h()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(f : g)\", \"h\"));\n  }\n",
        "begin_line": 1090,
        "end_line": 1097,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 5)-(line 1094,col 14)",
            "(line 1096,col 5)-(line 1096,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionForGorH()",
        "snippet": "  public void testCallFunctionForGorH() throws Exception {\n    String source = \"function f(){}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){}\\n\" +\n        \"function i(){ (false ? f : (g || h))() }\\n\" +\n        \"i()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(f : (g || h))\", \"i\"));\n  }\n",
        "begin_line": 1099,
        "end_line": 1107,
        "comment": "",
        "child_ranges": [
            "(line 1100,col 5)-(line 1104,col 14)",
            "(line 1106,col 5)-(line 1106,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGWithSideEffects()",
        "snippet": "  public void testCallFunctionFOrGWithSideEffects() throws Exception {\n    String source = \"var x = 0;\\n\" +\n        \"function f(){x = 10}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (f || g)() }\\n\" +\n        \"function i(){ (g || f)() }\\n\" +\n        \"function j(){ (f || f)() }\\n\" +\n        \"function k(){ (g || g)() }\\n\" +\n        \"h(); i(); j(); k()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(g || g)\", \"k\"));\n  }\n",
        "begin_line": 1109,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1110,col 5)-(line 1117,col 29)",
            "(line 1119,col 5)-(line 1119,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGViaHookWithSideEffects()",
        "snippet": "  public void testCallFunctionFOrGViaHookWithSideEffects() throws Exception {\n    String source = \"var x = 0;\\n\" +\n        \"function f(){x = 10}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (false ? f : g)() }\\n\" +\n        \"function i(){ (false ? g : f)() }\\n\" +\n        \"function j(){ (false ? f : f)() }\\n\" +\n        \"function k(){ (false ? g : g)() }\\n\" +\n        \"h(); i(); j(); k()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(g : g)\", \"k\"));\n  }\n",
        "begin_line": 1122,
        "end_line": 1133,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1130,col 29)",
            "(line 1132,col 5)-(line 1132,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallRegExpWithSideEffects()",
        "snippet": "  public void testCallRegExpWithSideEffects() throws Exception {\n    String source = \"var x = 0;\\n\" +\n        \"function k(){(/a/).exec('')}\\n\" +\n        \"k()\";\n\n    regExpHaveSideEffects = true;\n    checkMarkedCalls(source, ImmutableList.<String>of());\n    regExpHaveSideEffects = false;\n    checkMarkedCalls(source, ImmutableList.<String>of(\n        \"REGEXP STRING exec\", \"k\"));\n  }\n",
        "begin_line": 1135,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1136,col 5)-(line 1138,col 14)",
            "(line 1140,col 5)-(line 1140,col 33)",
            "(line 1141,col 5)-(line 1141,col 57)",
            "(line 1142,col 5)-(line 1142,col 34)",
            "(line 1143,col 5)-(line 1144,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnonymousFunction1()",
        "snippet": "  public void testAnonymousFunction1() throws Exception {\n    String source = \"(function (){})();\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\n        \"FUNCTION\"));\n  }\n",
        "begin_line": 1147,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 5)-(line 1148,col 41)",
            "(line 1150,col 5)-(line 1151,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnonymousFunction2()",
        "snippet": "  public void testAnonymousFunction2() throws Exception {\n    String source = \"(Error || function (){})();\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\n        \"(Error || FUNCTION)\"));\n  }\n",
        "begin_line": 1154,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 5)-(line 1155,col 50)",
            "(line 1157,col 5)-(line 1158,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnonymousFunction3()",
        "snippet": "  public void testAnonymousFunction3() throws Exception {\n    String source = \"var a = (Error || function (){})();\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\n        \"(Error || FUNCTION)\"));\n  }\n",
        "begin_line": 1161,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 58)",
            "(line 1164,col 5)-(line 1165,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testAnonymousFunction4()",
        "snippet": "  public void testAnonymousFunction4() throws Exception {\n    String source = \"var a = (Error || function (){});\" +\n                    \"a();\";\n\n    // This should be \"(Error || FUNCTION)\" but isn't.\n    checkMarkedCalls(source, ImmutableList.<String>of());\n  }\n",
        "begin_line": 1169,
        "end_line": 1175,
        "comment": " Indirect complex function definitions aren't yet supported.",
        "child_ranges": [
            "(line 1170,col 5)-(line 1171,col 27)",
            "(line 1174,col 5)-(line 1174,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInvalidAnnotation1()",
        "snippet": "  public void testInvalidAnnotation1() throws Exception {\n    test(\"/** @nosideeffects */ function foo() {}\",\n         null, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n  }\n",
        "begin_line": 1177,
        "end_line": 1180,
        "comment": "",
        "child_ranges": [
            "(line 1178,col 5)-(line 1179,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInvalidAnnotation2()",
        "snippet": "  public void testInvalidAnnotation2() throws Exception {\n    test(\"var f = /** @nosideeffects */ function() {}\",\n         null, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n  }\n",
        "begin_line": 1182,
        "end_line": 1185,
        "comment": "",
        "child_ranges": [
            "(line 1183,col 5)-(line 1184,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInvalidAnnotation3()",
        "snippet": "  public void testInvalidAnnotation3() throws Exception {\n    test(\"/** @nosideeffects */ var f = function() {}\",\n         null, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n  }\n",
        "begin_line": 1187,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 5)-(line 1189,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInvalidAnnotation4()",
        "snippet": "  public void testInvalidAnnotation4() throws Exception {\n    test(\"var f = function() {};\" +\n         \"/** @nosideeffects */ f.x = function() {}\",\n         null, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n  }\n",
        "begin_line": 1192,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1195,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.testInvalidAnnotation5()",
        "snippet": "  public void testInvalidAnnotation5() throws Exception {\n    test(\"var f = function() {};\" +\n         \"f.x = /** @nosideeffects */ function() {}\",\n         null, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n  }\n",
        "begin_line": 1198,
        "end_line": 1202,
        "comment": "",
        "child_ranges": [
            "(line 1199,col 5)-(line 1201,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  void checkMarkedCalls(String source, List<String> expected) {\n    testSame(source);\n    assertEquals(expected, noSideEffectCalls);\n    noSideEffectCalls.clear();\n  }\n",
        "begin_line": 1204,
        "end_line": 1208,
        "comment": "",
        "child_ranges": [
            "(line 1205,col 5)-(line 1205,col 21)",
            "(line 1206,col 5)-(line 1206,col 46)",
            "(line 1207,col 5)-(line 1207,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.checkLocalityOfMarkedCalls(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  void checkLocalityOfMarkedCalls(String source, List<String> expected) {\n    testSame(source);\n    assertEquals(expected, localResultCalls);\n    localResultCalls.clear();\n  }\n",
        "begin_line": 1210,
        "end_line": 1214,
        "comment": "",
        "child_ranges": [
            "(line 1211,col 5)-(line 1211,col 21)",
            "(line 1212,col 5)-(line 1212,col 45)",
            "(line 1213,col 5)-(line 1213,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new NoSideEffectCallEnumerator(compiler);\n  }\n",
        "begin_line": 1216,
        "end_line": 1219,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1218,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.NoSideEffectCallEnumerator.NoSideEffectCallEnumerator(com.google.javascript.jscomp.Compiler)",
        "snippet": "    NoSideEffectCallEnumerator(Compiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 1229,
        "end_line": 1231,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 7)-(line 1230,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.NoSideEffectCallEnumerator.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      compiler.setHasRegExpGlobalReferences(regExpHaveSideEffects);\n      SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);\n      defFinder.process(externs, root);\n      PureFunctionIdentifier passUnderTest =\n          new PureFunctionIdentifier(compiler, defFinder);\n      passUnderTest.process(externs, root);\n\n      // Ensure that debug report computation works.\n      String debugReport = passUnderTest.getDebugReport();\n\n      NodeTraversal.traverse(compiler, externs, this);\n      NodeTraversal.traverse(compiler, root, this);\n    }\n",
        "begin_line": 1233,
        "end_line": 1247,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 7)-(line 1235,col 67)",
            "(line 1236,col 7)-(line 1236,col 78)",
            "(line 1237,col 7)-(line 1237,col 39)",
            "(line 1238,col 7)-(line 1239,col 58)",
            "(line 1240,col 7)-(line 1240,col 43)",
            "(line 1243,col 7)-(line 1243,col 58)",
            "(line 1245,col 7)-(line 1245,col 54)",
            "(line 1246,col 7)-(line 1246,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.NoSideEffectCallEnumerator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.NEW) {\n        if (!NodeUtil.constructorCallHasSideEffects(n)) {\n          noSideEffectCalls.add(generateNameString(n.getFirstChild()));\n        }\n      } else if (n.getType() == Token.CALL) {\n        if (!NodeUtil.functionCallHasSideEffects(n)) {\n          noSideEffectCalls.add(generateNameString(n.getFirstChild()));\n        }\n        if (NodeUtil.callHasLocalResult(n)) {\n          localResultCalls.add(generateNameString(n.getFirstChild()));\n        }\n      }\n    }\n",
        "begin_line": 1249,
        "end_line": 1262,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 7)-(line 1261,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifierTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifierTest.NoSideEffectCallEnumerator.generateNameString(com.google.javascript.rhino.Node)",
        "snippet": "    private String generateNameString(Node node) {\n      if (node.getType() == Token.OR) {\n        return \"(\" + generateNameString(node.getFirstChild()) +\n            \" || \" + generateNameString(node.getLastChild()) + \")\";\n      } else if (node.getType() == Token.HOOK) {\n        return \"(\" + generateNameString(node.getFirstChild().getNext()) +\n            \" : \" + generateNameString(node.getLastChild()) + \")\";\n      } else {\n        String result = node.getQualifiedName();\n        if (result == null) {\n          if (node.getType() == Token.FUNCTION) {\n            result = node.toString(false, false, false).trim();\n          } else {\n            result = node.getFirstChild().toString(false, false, false);\n            result += \" \" + node.getLastChild().toString(false, false, false);\n          }\n        }\n        return result;\n      }\n    }\n",
        "begin_line": 1264,
        "end_line": 1283,
        "comment": "",
        "child_ranges": [
            "(line 1265,col 7)-(line 1282,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 108,col 5)-(line 110,col 6)",
            "(line 111,col 5)-(line 111,col 39)",
            "(line 112,col 5)-(line 112,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 136,
        "end_line": 136,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 52)",
            "(line 148,col 5)-(line 150,col 5)",
            "(line 154,col 5)-(line 154,col 32)",
            "(line 156,col 5)-(line 157,col 65)",
            "(line 158,col 5)-(line 158,col 55)",
            "(line 159,col 5)-(line 159,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 170,
        "end_line": 174,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 29)",
            "(line 203,col 5)-(line 203,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 28)",
            "(line 242,col 5)-(line 242,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 250,col 5)-(line 250,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 263,
        "end_line": 271,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 265,col 5)-(line 267,col 40)",
            "(line 269,col 5)-(line 270,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 306,
        "end_line": 309,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 308,col 5)-(line 308,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 339,col 5)-(line 339,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 356,
        "end_line": 363,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 359,col 5)-(line 361,col 6)",
            "(line 362,col 5)-(line 362,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 379,
        "end_line": 399,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 41)",
            "(line 383,col 5)-(line 383,col 28)",
            "(line 385,col 5)-(line 385,col 43)",
            "(line 387,col 5)-(line 389,col 5)",
            "(line 392,col 5)-(line 392,col 39)",
            "(line 393,col 5)-(line 394,col 58)",
            "(line 396,col 5)-(line 396,col 71)",
            "(line 398,col 5)-(line 398,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 435,col 5)-(line 435,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 451,
        "end_line": 462,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 41)",
            "(line 454,col 5)-(line 454,col 28)",
            "(line 456,col 5)-(line 456,col 56)",
            "(line 457,col 5)-(line 459,col 5)",
            "(line 460,col 5)-(line 460,col 55)",
            "(line 461,col 5)-(line 461,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 470,
        "end_line": 472,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 482,
        "end_line": 485,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 484,col 5)-(line 484,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 497,
        "end_line": 504,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 41)",
            "(line 500,col 5)-(line 500,col 28)",
            "(line 502,col 5)-(line 502,col 56)",
            "(line 503,col 5)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 512,col 5)-(line 512,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 524,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 523,col 5)-(line 523,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 534,
        "end_line": 540,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 535,col 5)-(line 539,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 563,
        "end_line": 570,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 565,col 5)-(line 569,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 583,
        "end_line": 589,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 587,col 6)",
            "(line 588,col 5)-(line 588,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 638,
        "end_line": 651,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 639,col 5)-(line 650,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 664,
        "end_line": 667,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 684,
        "end_line": 872,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 51)",
            "(line 688,col 5)-(line 688,col 44)",
            "(line 690,col 5)-(line 690,col 39)",
            "(line 691,col 5)-(line 692,col 66)",
            "(line 694,col 5)-(line 694,col 44)",
            "(line 695,col 5)-(line 695,col 40)",
            "(line 698,col 5)-(line 698,col 38)",
            "(line 699,col 5)-(line 699,col 54)",
            "(line 700,col 5)-(line 700,col 50)",
            "(line 702,col 5)-(line 702,col 45)",
            "(line 703,col 5)-(line 703,col 68)",
            "(line 704,col 5)-(line 704,col 34)",
            "(line 705,col 5)-(line 705,col 59)",
            "(line 706,col 5)-(line 706,col 35)",
            "(line 708,col 5)-(line 709,col 39)",
            "(line 711,col 5)-(line 751,col 5)",
            "(line 753,col 5)-(line 871,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 874,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 876,col 57)",
            "(line 877,col 5)-(line 877,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 883,
        "end_line": 901,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 884,col 5)-(line 884,col 41)",
            "(line 885,col 5)-(line 885,col 62)",
            "(line 886,col 5)-(line 888,col 5)",
            "(line 889,col 5)-(line 889,col 55)",
            "(line 890,col 5)-(line 890,col 39)",
            "(line 891,col 5)-(line 892,col 66)",
            "(line 893,col 5)-(line 893,col 44)",
            "(line 894,col 5)-(line 894,col 42)",
            "(line 896,col 5)-(line 899,col 5)",
            "(line 900,col 5)-(line 900,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 904,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 911,
        "end_line": 917,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 47)",
            "(line 913,col 5)-(line 915,col 5)",
            "(line 916,col 5)-(line 916,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 924,col 5)-(line 924,col 47)",
            "(line 925,col 5)-(line 927,col 5)",
            "(line 928,col 5)-(line 928,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 936,
        "end_line": 943,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 48)",
            "(line 938,col 5)-(line 938,col 47)",
            "(line 939,col 5)-(line 941,col 5)",
            "(line 942,col 5)-(line 942,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 950,
        "end_line": 956,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 47)",
            "(line 952,col 5)-(line 954,col 5)",
            "(line 955,col 5)-(line 955,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 962,
        "end_line": 969,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 53)",
            "(line 964,col 5)-(line 967,col 5)",
            "(line 968,col 5)-(line 968,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 972,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 973,col 7)-(line 973,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 976,
        "end_line": 977,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 979,
        "end_line": 980,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 983,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 984,col 39)",
            "(line 985,col 5)-(line 985,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 41)"
        ]
    }
]