[
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.assertFraction(int, int, org.apache.commons.math.fraction.Fraction)",
        "snippet": "    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {\n        assertEquals(expectedNumerator, actual.getNumerator());\n        assertEquals(expectedDenominator, actual.getDenominator());\n    }\n",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 63)",
            "(line 30,col 9)-(line 30,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertFraction(0, 1, new Fraction(0, 1));\n        assertFraction(0, 1, new Fraction(0, 2));\n        assertFraction(0, 1, new Fraction(0, -1));\n        assertFraction(1, 2, new Fraction(1, 2));\n        assertFraction(1, 2, new Fraction(2, 4));\n        assertFraction(-1, 2, new Fraction(-1, 2));\n        assertFraction(-1, 2, new Fraction(1, -2));\n        assertFraction(-1, 2, new Fraction(-2, 4));\n        assertFraction(-1, 2, new Fraction(2, -4));\n        \n        // overflow\n        try {\n            new Fraction(Integer.MIN_VALUE, -1);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n        try {\n            new Fraction(1, Integer.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n        try {        \n            assertFraction(0, 1, new Fraction(0.00000000000001));\n            assertFraction(2, 5, new Fraction(0.40000000000001));\n            assertFraction(15, 1, new Fraction(15.0000000000001));\n            \n        } catch (ConvergenceException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 33,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 49)",
            "(line 35,col 9)-(line 35,col 49)",
            "(line 36,col 9)-(line 36,col 50)",
            "(line 37,col 9)-(line 37,col 49)",
            "(line 38,col 9)-(line 38,col 49)",
            "(line 39,col 9)-(line 39,col 51)",
            "(line 40,col 9)-(line 40,col 51)",
            "(line 41,col 9)-(line 41,col 51)",
            "(line 42,col 9)-(line 42,col 51)",
            "(line 45,col 9)-(line 50,col 9)",
            "(line 51,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testGoldenRatio()",
        "snippet": "    public void testGoldenRatio() {\n        try {\n            // the golden ratio is notoriously a difficult number for continuous fraction\n            new Fraction((1 + Math.sqrt(5)) / 2, 1.0e-12, 25);\n            fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n    }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 76,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testDoubleConstructor()",
        "snippet": "    public void testDoubleConstructor() throws ConvergenceException  {\n        assertFraction(1, 2, new Fraction((double)1 / (double)2));\n        assertFraction(1, 3, new Fraction((double)1 / (double)3));\n        assertFraction(2, 3, new Fraction((double)2 / (double)3));\n        assertFraction(1, 4, new Fraction((double)1 / (double)4));\n        assertFraction(3, 4, new Fraction((double)3 / (double)4));\n        assertFraction(1, 5, new Fraction((double)1 / (double)5));\n        assertFraction(2, 5, new Fraction((double)2 / (double)5));\n        assertFraction(3, 5, new Fraction((double)3 / (double)5));\n        assertFraction(4, 5, new Fraction((double)4 / (double)5));\n        assertFraction(1, 6, new Fraction((double)1 / (double)6));\n        assertFraction(5, 6, new Fraction((double)5 / (double)6));\n        assertFraction(1, 7, new Fraction((double)1 / (double)7));\n        assertFraction(2, 7, new Fraction((double)2 / (double)7));\n        assertFraction(3, 7, new Fraction((double)3 / (double)7));\n        assertFraction(4, 7, new Fraction((double)4 / (double)7));\n        assertFraction(5, 7, new Fraction((double)5 / (double)7));\n        assertFraction(6, 7, new Fraction((double)6 / (double)7));\n        assertFraction(1, 8, new Fraction((double)1 / (double)8));\n        assertFraction(3, 8, new Fraction((double)3 / (double)8));\n        assertFraction(5, 8, new Fraction((double)5 / (double)8));\n        assertFraction(7, 8, new Fraction((double)7 / (double)8));\n        assertFraction(1, 9, new Fraction((double)1 / (double)9));\n        assertFraction(2, 9, new Fraction((double)2 / (double)9));\n        assertFraction(4, 9, new Fraction((double)4 / (double)9));\n        assertFraction(5, 9, new Fraction((double)5 / (double)9));\n        assertFraction(7, 9, new Fraction((double)7 / (double)9));\n        assertFraction(8, 9, new Fraction((double)8 / (double)9));\n        assertFraction(1, 10, new Fraction((double)1 / (double)10));\n        assertFraction(3, 10, new Fraction((double)3 / (double)10));\n        assertFraction(7, 10, new Fraction((double)7 / (double)10));\n        assertFraction(9, 10, new Fraction((double)9 / (double)10));\n        assertFraction(1, 11, new Fraction((double)1 / (double)11));\n        assertFraction(2, 11, new Fraction((double)2 / (double)11));\n        assertFraction(3, 11, new Fraction((double)3 / (double)11));\n        assertFraction(4, 11, new Fraction((double)4 / (double)11));\n        assertFraction(5, 11, new Fraction((double)5 / (double)11));\n        assertFraction(6, 11, new Fraction((double)6 / (double)11));\n        assertFraction(7, 11, new Fraction((double)7 / (double)11));\n        assertFraction(8, 11, new Fraction((double)8 / (double)11));\n        assertFraction(9, 11, new Fraction((double)9 / (double)11));\n        assertFraction(10, 11, new Fraction((double)10 / (double)11));\n    }\n",
        "begin_line": 80,
        "end_line": 122,
        "comment": " MATH-179",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 66)",
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 66)",
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 66)",
            "(line 88,col 9)-(line 88,col 66)",
            "(line 89,col 9)-(line 89,col 66)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 94,col 9)-(line 94,col 66)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 99,col 66)",
            "(line 100,col 9)-(line 100,col 66)",
            "(line 101,col 9)-(line 101,col 66)",
            "(line 102,col 9)-(line 102,col 66)",
            "(line 103,col 9)-(line 103,col 66)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 66)",
            "(line 107,col 9)-(line 107,col 66)",
            "(line 108,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 110,col 9)-(line 110,col 68)",
            "(line 111,col 9)-(line 111,col 68)",
            "(line 112,col 9)-(line 112,col 68)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 68)",
            "(line 116,col 9)-(line 116,col 68)",
            "(line 117,col 9)-(line 117,col 68)",
            "(line 118,col 9)-(line 118,col 68)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testDigitLimitConstructor()",
        "snippet": "    public void testDigitLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4,   9));\n        assertFraction(2, 5, new Fraction(0.4,  99));\n        assertFraction(2, 5, new Fraction(0.4, 999));\n\n        assertFraction(3, 5,      new Fraction(0.6152,    9));\n        assertFraction(8, 13,     new Fraction(0.6152,   99));\n        assertFraction(510, 829,  new Fraction(0.6152,  999));\n        assertFraction(769, 1250, new Fraction(0.6152, 9999));\n    }\n",
        "begin_line": 125,
        "end_line": 134,
        "comment": " MATH-181",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 53)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 128,col 9)-(line 128,col 53)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 62)",
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testIntegerOverflow()",
        "snippet": "    public void testIntegerOverflow() {\n        checkIntegerOverflow(0.75000000001455192);\n        checkIntegerOverflow(1.0e10);\n    }\n",
        "begin_line": 136,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 50)",
            "(line 138,col 9)-(line 138,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.checkIntegerOverflow(double)",
        "snippet": "    private void checkIntegerOverflow(double a) {\n        try {\n            new Fraction(a, 1.0e-12, 1000);\n            fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n    }\n",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 149,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testEpsilonLimitConstructor()",
        "snippet": "    public void testEpsilonLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4, 1.0e-5, 100));\n\n        assertFraction(3, 5,      new Fraction(0.6152, 0.02, 100));\n        assertFraction(8, 13,     new Fraction(0.6152, 1.0e-3, 100));\n        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-4, 100));\n        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-5, 100));\n        assertFraction(510, 829,  new Fraction(0.6152, 1.0e-6, 100));\n        assertFraction(769, 1250, new Fraction(0.6152, 1.0e-7, 100));\n    }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 61)",
            "(line 155,col 9)-(line 155,col 67)",
            "(line 156,col 9)-(line 156,col 69)",
            "(line 157,col 9)-(line 157,col 69)",
            "(line 158,col 9)-(line 158,col 69)",
            "(line 159,col 9)-(line 159,col 69)",
            "(line 160,col 9)-(line 160,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n        Fraction third = new Fraction(1, 2);\n        \n        assertEquals(0, first.compareTo(first));\n        assertEquals(0, first.compareTo(third));\n        assertEquals(1, first.compareTo(second));\n        assertEquals(-1, second.compareTo(first));\n\n        // these two values are different approximations of PI\n        // the first  one is approximately PI - 3.07e-18\n        // the second one is approximately PI + 1.936e-17\n        Fraction pi1 = new Fraction(1068966896, 340262731);\n        Fraction pi2 = new Fraction( 411557987, 131002976);\n        assertEquals(-1, pi1.compareTo(pi2));\n        assertEquals( 1, pi2.compareTo(pi1));\n        assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n    }\n",
        "begin_line": 163,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 44)",
            "(line 165,col 9)-(line 165,col 45)",
            "(line 166,col 9)-(line 166,col 44)",
            "(line 168,col 9)-(line 168,col 48)",
            "(line 169,col 9)-(line 169,col 48)",
            "(line 170,col 9)-(line 170,col 49)",
            "(line 171,col 9)-(line 171,col 50)",
            "(line 176,col 9)-(line 176,col 59)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 45)",
            "(line 179,col 9)-(line 179,col 45)",
            "(line 180,col 9)-(line 180,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testDoubleValue()",
        "snippet": "    public void testDoubleValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n\n        assertEquals(0.5, first.doubleValue(), 0.0);\n        assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n    }\n",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 44)",
            "(line 185,col 9)-(line 185,col 45)",
            "(line 187,col 9)-(line 187,col 52)",
            "(line 188,col 9)-(line 188,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testFloatValue()",
        "snippet": "    public void testFloatValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n\n        assertEquals(0.5f, first.floatValue(), 0.0f);\n        assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);\n    }\n",
        "begin_line": 191,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 44)",
            "(line 193,col 9)-(line 193,col 45)",
            "(line 195,col 9)-(line 195,col 53)",
            "(line 196,col 9)-(line 196,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testIntValue()",
        "snippet": "    public void testIntValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(3, 2);\n\n        assertEquals(0, first.intValue());\n        assertEquals(1, second.intValue());\n    }\n",
        "begin_line": 199,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 44)",
            "(line 201,col 9)-(line 201,col 45)",
            "(line 203,col 9)-(line 203,col 42)",
            "(line 204,col 9)-(line 204,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testLongValue()",
        "snippet": "    public void testLongValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(3, 2);\n\n        assertEquals(0L, first.longValue());\n        assertEquals(1L, second.longValue());\n    }\n",
        "begin_line": 207,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 44)",
            "(line 209,col 9)-(line 209,col 45)",
            "(line 211,col 9)-(line 211,col 44)",
            "(line 212,col 9)-(line 212,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testConstructorDouble()",
        "snippet": "    public void testConstructorDouble() {\n        try {\n            assertFraction(1, 2, new Fraction(0.5));\n            assertFraction(1, 3, new Fraction(1.0 / 3.0));\n            assertFraction(17, 100, new Fraction(17.0 / 100.0));\n            assertFraction(317, 100, new Fraction(317.0 / 100.0));\n            assertFraction(-1, 2, new Fraction(-0.5));\n            assertFraction(-1, 3, new Fraction(-1.0 / 3.0));\n            assertFraction(-17, 100, new Fraction(17.0 / -100.0));\n            assertFraction(-317, 100, new Fraction(-317.0 / 100.0));\n        } catch (ConvergenceException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 215,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 227,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testAbs()",
        "snippet": "    public void testAbs() {\n        Fraction a = new Fraction(10, 21);\n        Fraction b = new Fraction(-10, 21);\n        Fraction c = new Fraction(10, -21);\n        \n        assertFraction(10, 21, a.abs());\n        assertFraction(10, 21, b.abs());\n        assertFraction(10, 21, c.abs());\n    }\n",
        "begin_line": 230,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 42)",
            "(line 232,col 9)-(line 232,col 43)",
            "(line 233,col 9)-(line 233,col 43)",
            "(line 235,col 9)-(line 235,col 40)",
            "(line 236,col 9)-(line 236,col 40)",
            "(line 237,col 9)-(line 237,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testReciprocal()",
        "snippet": "    public void testReciprocal() {\n        Fraction f = null;\n        \n        f = new Fraction(50, 75);\n        f = f.reciprocal();\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = new Fraction(4, 3);\n        f = f.reciprocal();\n        assertEquals(3, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = new Fraction(-15, 47);\n        f = f.reciprocal();\n        assertEquals(-47, f.getNumerator());\n        assertEquals(15, f.getDenominator());\n        \n        f = new Fraction(0, 3);\n        try {\n            f = f.reciprocal();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // large values\n        f = new Fraction(Integer.MAX_VALUE, 1);\n        f = f.reciprocal();\n        assertEquals(1, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }\n",
        "begin_line": 240,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 26)",
            "(line 243,col 9)-(line 243,col 33)",
            "(line 244,col 9)-(line 244,col 27)",
            "(line 245,col 9)-(line 245,col 42)",
            "(line 246,col 9)-(line 246,col 44)",
            "(line 248,col 9)-(line 248,col 31)",
            "(line 249,col 9)-(line 249,col 27)",
            "(line 250,col 9)-(line 250,col 42)",
            "(line 251,col 9)-(line 251,col 44)",
            "(line 253,col 9)-(line 253,col 34)",
            "(line 254,col 9)-(line 254,col 27)",
            "(line 255,col 9)-(line 255,col 44)",
            "(line 256,col 9)-(line 256,col 45)",
            "(line 258,col 9)-(line 258,col 31)",
            "(line 259,col 9)-(line 262,col 43)",
            "(line 265,col 9)-(line 265,col 47)",
            "(line 266,col 9)-(line 266,col 27)",
            "(line 267,col 9)-(line 267,col 42)",
            "(line 268,col 9)-(line 268,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testNegate()",
        "snippet": "    public void testNegate() {\n        Fraction f = null;\n        \n        f = new Fraction(50, 75);\n        f = f.negate();\n        assertEquals(-2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = new Fraction(-50, 75);\n        f = f.negate();\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n\n        // large values\n        f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = new Fraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 271,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 26)",
            "(line 274,col 9)-(line 274,col 33)",
            "(line 275,col 9)-(line 275,col 23)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 44)",
            "(line 279,col 9)-(line 279,col 34)",
            "(line 280,col 9)-(line 280,col 23)",
            "(line 281,col 9)-(line 281,col 42)",
            "(line 282,col 9)-(line 282,col 44)",
            "(line 285,col 9)-(line 285,col 65)",
            "(line 286,col 9)-(line 286,col 23)",
            "(line 287,col 9)-(line 287,col 60)",
            "(line 288,col 9)-(line 288,col 60)",
            "(line 290,col 9)-(line 290,col 47)",
            "(line 291,col 9)-(line 294,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testAdd()",
        "snippet": "    public void testAdd() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n        \n        assertFraction(1, 1, a.add(a));\n        assertFraction(7, 6, a.add(b));\n        assertFraction(7, 6, b.add(a));\n        assertFraction(4, 3, b.add(b));\n        \n        Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);\n        Fraction f2 = Fraction.ONE;\n        Fraction f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = new Fraction(-1, 13*13*2*2);\n        f2 = new Fraction(-2, 13*17*2);\n        f = f1.add(f2);\n        assertEquals(13*13*17*2*2, f.getDenominator());\n        assertEquals(-17 - 2*13*2, f.getNumerator());\n        \n        try {\n            f.add(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = new Fraction(1,32768*3);\n        f2 = new Fraction(1,59049);\n        f = f1.add(f2);\n        assertEquals(52451, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, 3);\n        f2 = new Fraction(1,3);\n        f = f1.add(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = new Fraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = new Fraction(Integer.MIN_VALUE, 5);\n        f2 = new Fraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= new Fraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= new Fraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = new Fraction(3,327680);\n        f2 = new Fraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 297,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 40)",
            "(line 299,col 9)-(line 299,col 40)",
            "(line 301,col 9)-(line 301,col 39)",
            "(line 302,col 9)-(line 302,col 39)",
            "(line 303,col 9)-(line 303,col 39)",
            "(line 304,col 9)-(line 304,col 39)",
            "(line 306,col 9)-(line 306,col 61)",
            "(line 307,col 9)-(line 307,col 35)",
            "(line 308,col 9)-(line 308,col 32)",
            "(line 309,col 9)-(line 309,col 58)",
            "(line 310,col 9)-(line 310,col 44)",
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 39)",
            "(line 314,col 9)-(line 314,col 23)",
            "(line 315,col 9)-(line 315,col 55)",
            "(line 316,col 9)-(line 316,col 53)",
            "(line 318,col 9)-(line 321,col 48)",
            "(line 325,col 9)-(line 325,col 37)",
            "(line 326,col 9)-(line 326,col 35)",
            "(line 327,col 9)-(line 327,col 23)",
            "(line 328,col 9)-(line 328,col 46)",
            "(line 329,col 9)-(line 329,col 53)",
            "(line 331,col 9)-(line 331,col 48)",
            "(line 332,col 9)-(line 332,col 31)",
            "(line 333,col 9)-(line 333,col 23)",
            "(line 334,col 9)-(line 334,col 60)",
            "(line 335,col 9)-(line 335,col 44)",
            "(line 337,col 9)-(line 337,col 52)",
            "(line 338,col 9)-(line 338,col 26)",
            "(line 339,col 9)-(line 339,col 23)",
            "(line 340,col 9)-(line 340,col 58)",
            "(line 341,col 9)-(line 341,col 44)",
            "(line 343,col 9)-(line 346,col 43)",
            "(line 349,col 9)-(line 349,col 48)",
            "(line 350,col 9)-(line 350,col 32)",
            "(line 351,col 9)-(line 354,col 43)",
            "(line 356,col 9)-(line 360,col 43)",
            "(line 362,col 9)-(line 366,col 43)",
            "(line 368,col 9)-(line 368,col 36)",
            "(line 369,col 9)-(line 369,col 35)",
            "(line 370,col 9)-(line 373,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testDivide()",
        "snippet": "    public void testDivide() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n        \n        assertFraction(1, 1, a.divide(a));\n        assertFraction(3, 4, a.divide(b));\n        assertFraction(4, 3, b.divide(a));\n        assertFraction(1, 1, b.divide(b));\n        \n        Fraction f1 = new Fraction(3, 5);\n        Fraction f2 = Fraction.ZERO;\n        try {\n            f1.divide(f2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = new Fraction(0, 5);\n        f2 = new Fraction(2, 7);\n        Fraction f = f1.divide(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = new Fraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divide(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = new Fraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f1);  \n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = new Fraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.divide(null);\n            fail(\"IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = new Fraction(1, Integer.MAX_VALUE);\n            f = f1.divide(f1.reciprocal());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f1 = new Fraction(1, -Integer.MAX_VALUE);\n            f = f1.divide(f1.reciprocal());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 376,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 40)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 380,col 9)-(line 380,col 42)",
            "(line 381,col 9)-(line 381,col 42)",
            "(line 382,col 9)-(line 382,col 42)",
            "(line 383,col 9)-(line 383,col 42)",
            "(line 385,col 9)-(line 385,col 41)",
            "(line 386,col 9)-(line 386,col 36)",
            "(line 387,col 9)-(line 390,col 43)",
            "(line 392,col 9)-(line 392,col 32)",
            "(line 393,col 9)-(line 393,col 32)",
            "(line 394,col 9)-(line 394,col 35)",
            "(line 395,col 9)-(line 395,col 37)",
            "(line 397,col 9)-(line 397,col 32)",
            "(line 398,col 9)-(line 398,col 26)",
            "(line 399,col 9)-(line 399,col 26)",
            "(line 400,col 9)-(line 400,col 42)",
            "(line 401,col 9)-(line 401,col 44)",
            "(line 403,col 9)-(line 403,col 48)",
            "(line 404,col 9)-(line 404,col 26)",
            "(line 405,col 9)-(line 405,col 42)",
            "(line 406,col 9)-(line 406,col 44)",
            "(line 408,col 9)-(line 408,col 64)",
            "(line 409,col 9)-(line 409,col 48)",
            "(line 410,col 9)-(line 410,col 26)",
            "(line 411,col 9)-(line 411,col 58)",
            "(line 412,col 9)-(line 412,col 44)",
            "(line 414,col 9)-(line 417,col 48)",
            "(line 419,col 9)-(line 423,col 43)",
            "(line 424,col 9)-(line 428,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testMultiply()",
        "snippet": "    public void testMultiply() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n        \n        assertFraction(1, 4, a.multiply(a));\n        assertFraction(1, 3, a.multiply(b));\n        assertFraction(1, 3, b.multiply(a));\n        assertFraction(4, 9, b.multiply(b));\n        \n        Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);\n        Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        Fraction f = f1.multiply(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiply(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 431,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 40)",
            "(line 433,col 9)-(line 433,col 40)",
            "(line 435,col 9)-(line 435,col 44)",
            "(line 436,col 9)-(line 436,col 44)",
            "(line 437,col 9)-(line 437,col 44)",
            "(line 438,col 9)-(line 438,col 44)",
            "(line 440,col 9)-(line 440,col 57)",
            "(line 441,col 9)-(line 441,col 73)",
            "(line 442,col 9)-(line 442,col 37)",
            "(line 443,col 9)-(line 443,col 58)",
            "(line 444,col 9)-(line 444,col 44)",
            "(line 446,col 9)-(line 449,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testSubtract()",
        "snippet": "    public void testSubtract() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n        \n        assertFraction(0, 1, a.subtract(a));\n        assertFraction(-1, 6, a.subtract(b));\n        assertFraction(1, 6, b.subtract(a));\n        assertFraction(0, 1, b.subtract(b));\n        \n        Fraction f = new Fraction(1,1);\n        try {\n            f.subtract(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        Fraction f1 = new Fraction(1,32768*3);\n        Fraction f2 = new Fraction(1,59049);\n        f = f1.subtract(f2);\n        assertEquals(-13085, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, 3);\n        f2 = new Fraction(1,3).negate();\n        f = f1.subtract(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = new Fraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = new Fraction(1, Integer.MAX_VALUE);\n            f2 = new Fraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            fail(\"expecting ArithmeticException\");  //should overflow\n        } catch (ArithmeticException ex) {}\n        \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = new Fraction(Integer.MIN_VALUE, 5);\n        f2 = new Fraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= new Fraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= new Fraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = new Fraction(3,327680);\n        f2 = new Fraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 452,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 40)",
            "(line 454,col 9)-(line 454,col 40)",
            "(line 456,col 9)-(line 456,col 44)",
            "(line 457,col 9)-(line 457,col 45)",
            "(line 458,col 9)-(line 458,col 44)",
            "(line 459,col 9)-(line 459,col 44)",
            "(line 461,col 9)-(line 461,col 39)",
            "(line 462,col 9)-(line 465,col 48)",
            "(line 469,col 9)-(line 469,col 46)",
            "(line 470,col 9)-(line 470,col 44)",
            "(line 471,col 9)-(line 471,col 28)",
            "(line 472,col 9)-(line 472,col 47)",
            "(line 473,col 9)-(line 473,col 53)",
            "(line 475,col 9)-(line 475,col 48)",
            "(line 476,col 9)-(line 476,col 40)",
            "(line 477,col 9)-(line 477,col 28)",
            "(line 478,col 9)-(line 478,col 60)",
            "(line 479,col 9)-(line 479,col 44)",
            "(line 481,col 9)-(line 481,col 48)",
            "(line 482,col 9)-(line 482,col 26)",
            "(line 483,col 9)-(line 483,col 28)",
            "(line 484,col 9)-(line 484,col 60)",
            "(line 485,col 9)-(line 485,col 44)",
            "(line 487,col 9)-(line 492,col 43)",
            "(line 495,col 9)-(line 495,col 48)",
            "(line 496,col 9)-(line 496,col 31)",
            "(line 497,col 9)-(line 500,col 43)",
            "(line 502,col 9)-(line 506,col 43)",
            "(line 508,col 9)-(line 512,col 43)",
            "(line 514,col 9)-(line 514,col 36)",
            "(line 515,col 9)-(line 515,col 35)",
            "(line 516,col 9)-(line 519,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()",
        "snippet": "    public void testEqualsAndHashCode() {\n        Fraction zero  = new Fraction(0,1);\n        Fraction nullFraction = null;\n        assertTrue( zero.equals(zero));\n        assertFalse(zero.equals(nullFraction));\n        assertFalse(zero.equals(Double.valueOf(0)));\n        Fraction zero2 = new Fraction(0,2);\n        assertTrue(zero.equals(zero2));\n        assertEquals(zero.hashCode(), zero2.hashCode());\n        Fraction one = new Fraction(1,1);\n        assertFalse((one.equals(zero) ||zero.equals(one)));\n    }\n",
        "begin_line": 522,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 523,col 9)-(line 523,col 43)",
            "(line 524,col 9)-(line 524,col 37)",
            "(line 525,col 9)-(line 525,col 39)",
            "(line 526,col 9)-(line 526,col 47)",
            "(line 527,col 9)-(line 527,col 52)",
            "(line 528,col 9)-(line 528,col 43)",
            "(line 529,col 9)-(line 529,col 39)",
            "(line 530,col 9)-(line 530,col 56)",
            "(line 531,col 9)-(line 531,col 41)",
            "(line 532,col 9)-(line 532,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/fraction/FractionTest.java",
        "signature": "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()",
        "snippet": "    public void testGetReducedFraction() {\n        Fraction threeFourths = new Fraction(3, 4);\n        assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));\n        assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));\n        try {\n            Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        assertEquals(Fraction.getReducedFraction\n                (2, Integer.MIN_VALUE).getNumerator(),-1);\n        assertEquals(Fraction.getReducedFraction\n                (1, -1).getNumerator(), -1);\n    }\n",
        "begin_line": 535,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 536,col 9)-(line 536,col 51)",
            "(line 537,col 9)-(line 537,col 75)",
            "(line 538,col 9)-(line 538,col 77)",
            "(line 539,col 9)-(line 544,col 9)",
            "(line 545,col 9)-(line 546,col 58)",
            "(line 547,col 9)-(line 548,col 44)"
        ]
    }
]