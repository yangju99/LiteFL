[
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n  }\n",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 30)",
            "(line 65,col 5)-(line 65,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424()",
        "snippet": "  public void testBug1949424() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO'); FOO.bar = 3;\",\n         CLOSURE_COMPILED + \"var FOO$bar = 3;\");\n  }\n",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 54)",
            "(line 70,col 5)-(line 70,col 38)",
            "(line 71,col 5)-(line 71,col 31)",
            "(line 72,col 5)-(line 73,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424_v2()",
        "snippet": "  public void testBug1949424_v2() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO.BAR'); FOO.BAR = 3;\",\n         CLOSURE_COMPILED + \"var FOO$BAR = 3;\");\n  }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 54)",
            "(line 78,col 5)-(line 78,col 38)",
            "(line 79,col 5)-(line 79,col 31)",
            "(line 80,col 5)-(line 81,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1956277()",
        "snippet": "  public void testBug1956277() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    test(options, \"var CONST = {}; CONST.bar = null;\" +\n         \"function f(url) { CONST.bar = url; }\",\n         \"var CONST$bar = null; function f(url) { CONST$bar = url; }\");\n  }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 54)",
            "(line 86,col 5)-(line 86,col 38)",
            "(line 87,col 5)-(line 87,col 35)",
            "(line 88,col 5)-(line 90,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1962380()",
        "snippet": "  public void testBug1962380() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    options.generateExports = true;\n    test(options,\n         CLOSURE_BOILERPLATE + \"/** @export */ goog.CONSTANT = 1;\" +\n         \"var x = goog.CONSTANT;\",\n         \"(function() {})('goog.CONSTANT', 1);\" +\n         \"var x = 1;\");\n  }\n",
        "begin_line": 93,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 54)",
            "(line 95,col 5)-(line 95,col 38)",
            "(line 96,col 5)-(line 96,col 35)",
            "(line 97,col 5)-(line 97,col 35)",
            "(line 98,col 5)-(line 102,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2410122()",
        "snippet": "  public void testBug2410122() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    options.closurePass = true;\n    test(options,\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"/** @export */ function G() { goog.base(this); } \" +\n         \"goog.inherits(G, F);\",\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"function G() { F.call(this); } \" +\n         \"goog.inherits(G, F); goog.exportSymbol('G', G);\");\n  }\n",
        "begin_line": 105,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 54)",
            "(line 107,col 5)-(line 107,col 35)",
            "(line 108,col 5)-(line 108,col 31)",
            "(line 109,col 5)-(line 117,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.removeDeadCode = true;\n    test(options,\n         \"var x; x && alert(1);\",\n         \"\");\n  }\n",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 54)",
            "(line 122,col 5)-(line 122,col 33)",
            "(line 123,col 5)-(line 123,col 35)",
            "(line 124,col 5)-(line 124,col 34)",
            "(line 125,col 5)-(line 127,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOff()",
        "snippet": "  public void testClosurePassOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = false;\n    testSame(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\");\n    testSame(\n        options,\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\");\n  }\n",
        "begin_line": 130,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 54)",
            "(line 132,col 5)-(line 132,col 32)",
            "(line 133,col 5)-(line 135,col 78)",
            "(line 136,col 5)-(line 139,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOn()",
        "snippet": "  public void testClosurePassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\",\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n    test(\n        options,\n        \"/** @define {boolean} */ var COMPILED = false;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\",\n        \"var COMPILED = true;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"'foo';\");\n  }\n",
        "begin_line": 142,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 54)",
            "(line 144,col 5)-(line 144,col 31)",
            "(line 145,col 5)-(line 148,col 56)",
            "(line 149,col 5)-(line 156,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCssNameCheck()",
        "snippet": "  public void testCssNameCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options, \"var x = 'foo';\",\n         CheckMissingGetCssName.MISSING_GETCSSNAME);\n  }\n",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 54)",
            "(line 161,col 5)-(line 161,col 31)",
            "(line 162,col 5)-(line 162,col 59)",
            "(line 163,col 5)-(line 163,col 52)",
            "(line 164,col 5)-(line 165,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2592659()",
        "snippet": "  public void testBug2592659() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.WARNING;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options,\n        \"var goog = {};\\n\" +\n        \"/**\\n\" +\n        \" * @param {string} className\\n\" +\n        \" * @param {string=} opt_modifier\\n\" +\n        \" * @return {string}\\n\" +\n        \"*/\\n\" +\n        \"goog.getCssName = function(className, opt_modifier) {}\\n\" +\n        \"var x = goog.getCssName(123, 'a');\",\n        TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 168,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 54)",
            "(line 170,col 5)-(line 170,col 31)",
            "(line 171,col 5)-(line 171,col 30)",
            "(line 172,col 5)-(line 172,col 61)",
            "(line 173,col 5)-(line 173,col 52)",
            "(line 174,col 5)-(line 183,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner1()",
        "snippet": "  public void testTypedefBeforeOwner1() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo = {}; foo.Bar.Type; foo.Bar = function() {};\");\n  }\n",
        "begin_line": 186,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 187,col 5)-(line 187,col 54)",
            "(line 188,col 5)-(line 188,col 31)",
            "(line 189,col 5)-(line 194,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner2()",
        "snippet": "  public void testTypedefBeforeOwner2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo$Bar$Type; var foo$Bar = function() {};\");\n  }\n",
        "begin_line": 197,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 54)",
            "(line 199,col 5)-(line 199,col 31)",
            "(line 200,col 5)-(line 200,col 38)",
            "(line 201,col 5)-(line 206,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportedNames()",
        "snippet": "  public void testExportedNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('b', goog);\",\n         \"var a = true; var c = {}; c.exportSymbol('b', c);\");\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('a', goog);\",\n         \"var b = true; var c = {}; c.exportSymbol('a', c);\");\n  }\n",
        "begin_line": 209,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 54)",
            "(line 211,col 5)-(line 211,col 31)",
            "(line 212,col 5)-(line 212,col 58)",
            "(line 213,col 5)-(line 216,col 62)",
            "(line 217,col 5)-(line 220,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOn()",
        "snippet": "  public void testCheckGlobalThisOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 223,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 54)",
            "(line 225,col 5)-(line 225,col 39)",
            "(line 226,col 5)-(line 226,col 52)",
            "(line 227,col 5)-(line 227,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSusiciousCodeOff()",
        "snippet": "  public void testSusiciousCodeOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = false;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 230,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 54)",
            "(line 232,col 5)-(line 232,col 40)",
            "(line 233,col 5)-(line 233,col 52)",
            "(line 234,col 5)-(line 234,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    testSame(options, \"function f() { this.y = 3; }\");\n  }\n",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 54)",
            "(line 239,col 5)-(line 239,col 39)",
            "(line 240,col 5)-(line 240,col 50)",
            "(line 241,col 5)-(line 241,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresAndCheckProvidesOff()",
        "snippet": "  public void testCheckRequiresAndCheckProvidesOff() {\n    testSame(createCompilerOptions(), new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    });\n  }\n",
        "begin_line": 244,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 248,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresOn()",
        "snippet": "  public void testCheckRequiresOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkRequires = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);\n  }\n",
        "begin_line": 251,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 54)",
            "(line 253,col 5)-(line 253,col 45)",
            "(line 254,col 5)-(line 257,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesOn()",
        "snippet": "  public void testCheckProvidesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkProvides = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckProvides.MISSING_PROVIDE_WARNING);\n  }\n",
        "begin_line": 260,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 54)",
            "(line 262,col 5)-(line 262,col 45)",
            "(line 263,col 5)-(line 266,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOff()",
        "snippet": "  public void testGenerateExportsOff() {\n    testSame(createCompilerOptions(), \"/** @export */ function f() {}\");\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOn()",
        "snippet": "  public void testGenerateExportsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    test(options, \"/** @export */ function f() {}\",\n         \"/** @export */ function f() {} goog.exportSymbol('f', f);\");\n  }\n",
        "begin_line": 273,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 274,col 54)",
            "(line 275,col 5)-(line 275,col 35)",
            "(line 276,col 5)-(line 277,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOff()",
        "snippet": "  public void testExportTestFunctionsOff() {\n    testSame(createCompilerOptions(), \"function testFoo() {}\");\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 281,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOn()",
        "snippet": "  public void testExportTestFunctionsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.exportTestFunctions = true;\n    test(options, \"function testFoo() {}\",\n         \"/** @export */ function testFoo() {}\" +\n         \"goog.exportSymbol('testFoo', testFoo);\");\n  }\n",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 285,col 54)",
            "(line 286,col 5)-(line 286,col 39)",
            "(line 287,col 5)-(line 289,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOff()",
        "snippet": "  public void testCheckSymbolsOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3;\");\n  }\n",
        "begin_line": 292,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 293,col 54)",
            "(line 294,col 5)-(line 294,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOn()",
        "snippet": "  public void testCheckSymbolsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    test(options, \"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 297,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 54)",
            "(line 299,col 5)-(line 299,col 32)",
            "(line 300,col 5)-(line 300,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOff()",
        "snippet": "  public void testCheckReferencesOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3; var x = 5;\");\n  }\n",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 54)",
            "(line 305,col 5)-(line 305,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOn()",
        "snippet": "  public void testCheckReferencesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    test(options, \"x = 3; var x = 5;\",\n         VariableReferenceCheck.UNDECLARED_REFERENCE);\n  }\n",
        "begin_line": 308,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 54)",
            "(line 310,col 5)-(line 310,col 50)",
            "(line 311,col 5)-(line 312,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInferTypes()",
        "snippet": "  public void testInferTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.inferTypes = true;\n    options.checkTypes = false;\n    options.closurePass = true;\n\n    test(options,\n        CLOSURE_BOILERPLATE +\n        \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n        TypeCheck.ENUM_NOT_CONSTANT);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n\n    // This does not generate a warning.\n    test(options, \"/** @type {number} */ var n = window.name;\",\n        \"var n = window.name;\");\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n  }\n",
        "begin_line": 315,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 54)",
            "(line 317,col 5)-(line 317,col 30)",
            "(line 318,col 5)-(line 318,col 31)",
            "(line 319,col 5)-(line 319,col 31)",
            "(line 321,col 5)-(line 324,col 37)",
            "(line 325,col 5)-(line 325,col 70)",
            "(line 328,col 5)-(line 329,col 32)",
            "(line 330,col 5)-(line 330,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckAndInference()",
        "snippet": "  public void testTypeCheckAndInference() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {number} */ var n = window.name;\",\n         TypeValidator.TYPE_MISMATCH_WARNING);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0);\n  }\n",
        "begin_line": 333,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 334,col 54)",
            "(line 335,col 5)-(line 335,col 30)",
            "(line 336,col 5)-(line 337,col 46)",
            "(line 338,col 5)-(line 338,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeNameParser()",
        "snippet": "  public void testTypeNameParser() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {n} */ var n = window.name;\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 341,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 54)",
            "(line 343,col 5)-(line 343,col 30)",
            "(line 344,col 5)-(line 345,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMemoizedTypedScopeCreator()",
        "snippet": "  public void testMemoizedTypedScopeCreator() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, \"function someTest() {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function Foo() { this.instProp = 3; }\\n\"\n        + \"  Foo.prototype.protoProp = function(a, b) {};\\n\"\n        + \"  /** @constructor\\n @extends Foo */\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.inherits(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.protoProp(o.protoProp, o.instProp);\\n\"\n        + \"}\",\n        \"function someTest() {\\n\"\n        + \"  function Foo() { this.b = 3; }\\n\"\n        + \"  Foo.prototype.a = function(a, b) {};\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.c(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.a(o.a, o.b);\\n\"\n        + \"}\");\n  }\n",
        "begin_line": 353,
        "end_line": 376,
        "comment": " o.a(o.a, o.a), which is bad.",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 54)",
            "(line 355,col 5)-(line 355,col 30)",
            "(line 356,col 5)-(line 356,col 39)",
            "(line 357,col 5)-(line 357,col 67)",
            "(line 358,col 5)-(line 375,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckTypes()",
        "snippet": "  public void testCheckTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 378,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 379,col 5)-(line 379,col 54)",
            "(line 380,col 5)-(line 380,col 30)",
            "(line 381,col 5)-(line 382,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceCssNames()",
        "snippet": "  public void testReplaceCssNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.gatherCssNames = true;\n    test(options, \"/** @define {boolean} */\\n\"\n         + \"var COMPILED = false;\\n\"\n         + \"goog.setCssNameMapping({'foo':'bar'});\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return goog.getCssName('foo');\\n\"\n         + \"}\",\n         \"var COMPILED = true;\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return \\\"bar\\\";\"\n         + \"}\");\n    assertEquals(\n        ImmutableMap.of(\"foo\", new Integer(1)),\n        lastCompiler.getPassConfig().getIntermediateState().cssNames);\n  }\n",
        "begin_line": 385,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 386,col 54)",
            "(line 387,col 5)-(line 387,col 31)",
            "(line 388,col 5)-(line 388,col 34)",
            "(line 389,col 5)-(line 398,col 16)",
            "(line 399,col 5)-(line 401,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveClosureAsserts()",
        "snippet": "  public void testRemoveClosureAsserts() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    testSame(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\");\n    options.removeClosureAsserts = true;\n    test(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\",\n        \"var goog = {};\");\n  }\n",
        "begin_line": 404,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 405,col 54)",
            "(line 406,col 5)-(line 406,col 31)",
            "(line 407,col 5)-(line 409,col 40)",
            "(line 410,col 5)-(line 410,col 40)",
            "(line 411,col 5)-(line 414,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeprecation()",
        "snippet": "  public void testDeprecation() {\n    String code = \"/** @deprecated */ function f() { } function g() { f(); }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 417,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 78)",
            "(line 420,col 5)-(line 420,col 54)",
            "(line 421,col 5)-(line 421,col 28)",
            "(line 423,col 5)-(line 423,col 75)",
            "(line 424,col 5)-(line 424,col 28)",
            "(line 426,col 5)-(line 426,col 30)",
            "(line 427,col 5)-(line 427,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVisibility()",
        "snippet": "  public void testVisibility() {\n    String[] code = {\n        \"/** @private */ function f() { }\",\n        \"function g() { f(); }\"\n    };\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 430,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 434,col 6)",
            "(line 436,col 5)-(line 436,col 54)",
            "(line 437,col 5)-(line 437,col 28)",
            "(line 439,col 5)-(line 439,col 75)",
            "(line 440,col 5)-(line 440,col 28)",
            "(line 442,col 5)-(line 442,col 30)",
            "(line 443,col 5)-(line 443,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnreachableCode()",
        "snippet": "  public void testUnreachableCode() {\n    String code = \"function f() { return \\n 3; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkUnreachableCode = CheckLevel.ERROR;\n    test(options, code, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 446,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 447,col 5)-(line 447,col 50)",
            "(line 449,col 5)-(line 449,col 54)",
            "(line 450,col 5)-(line 450,col 28)",
            "(line 452,col 5)-(line 452,col 52)",
            "(line 453,col 5)-(line 453,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    String code =\n        \"/** @return {number} */ function f() { if (f) { return 3; } }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkMissingReturn = CheckLevel.ERROR;\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 456,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 458,col 72)",
            "(line 460,col 5)-(line 460,col 54)",
            "(line 461,col 5)-(line 461,col 28)",
            "(line 463,col 5)-(line 463,col 50)",
            "(line 464,col 5)-(line 464,col 28)",
            "(line 466,col 5)-(line 466,col 30)",
            "(line 467,col 5)-(line 467,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIdGenerators()",
        "snippet": "  public void testIdGenerators() {\n    String code =  \"function f() {} f('id');\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.idGenerators = Sets.newHashSet(\"f\");\n    test(options, code, \"function f() {} 'a';\");\n  }\n",
        "begin_line": 470,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 46)",
            "(line 473,col 5)-(line 473,col 54)",
            "(line 474,col 5)-(line 474,col 28)",
            "(line 476,col 5)-(line 476,col 48)",
            "(line 477,col 5)-(line 477,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeArgumentsArray()",
        "snippet": "  public void testOptimizeArgumentsArray() {\n    String code =  \"function f() { return arguments[0]; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeArgumentsArray = true;\n    String argName = \"JSCompiler_OptimizeArgumentsArray_p0\";\n    test(options, code,\n         \"function f(\" + argName + \") { return \" + argName + \"; }\");\n  }\n",
        "begin_line": 480,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 59)",
            "(line 483,col 5)-(line 483,col 54)",
            "(line 484,col 5)-(line 484,col 28)",
            "(line 486,col 5)-(line 486,col 42)",
            "(line 487,col 5)-(line 487,col 60)",
            "(line 488,col 5)-(line 489,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeParameters()",
        "snippet": "  public void testOptimizeParameters() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeParameters = true;\n    test(options, code, \"function f() { var a = true; return a;} f();\");\n  }\n",
        "begin_line": 492,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 493,col 57)",
            "(line 495,col 5)-(line 495,col 54)",
            "(line 496,col 5)-(line 496,col 28)",
            "(line 498,col 5)-(line 498,col 38)",
            "(line 499,col 5)-(line 499,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeReturns()",
        "snippet": "  public void testOptimizeReturns() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeReturns = true;\n    test(options, code, \"function f(a) {return;} f(true);\");\n  }\n",
        "begin_line": 502,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 503,col 5)-(line 503,col 57)",
            "(line 505,col 5)-(line 505,col 54)",
            "(line 506,col 5)-(line 506,col 28)",
            "(line 508,col 5)-(line 508,col 35)",
            "(line 509,col 5)-(line 509,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveAbstractMethods()",
        "snippet": "  public void testRemoveAbstractMethods() {\n    String code = CLOSURE_BOILERPLATE +\n        \"var x = {}; x.foo = goog.abstractMethod; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options, code, CLOSURE_COMPILED + \" var x$bar = 3;\");\n  }\n",
        "begin_line": 512,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 513,col 5)-(line 514,col 62)",
            "(line 516,col 5)-(line 516,col 54)",
            "(line 517,col 5)-(line 517,col 28)",
            "(line 519,col 5)-(line 519,col 31)",
            "(line 520,col 5)-(line 520,col 38)",
            "(line 521,col 5)-(line 521,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties1()",
        "snippet": "  public void testCollapseProperties1() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 524,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 526,col 44)",
            "(line 528,col 5)-(line 528,col 54)",
            "(line 529,col 5)-(line 529,col 28)",
            "(line 531,col 5)-(line 531,col 38)",
            "(line 532,col 5)-(line 532,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties2()",
        "snippet": "  public void testCollapseProperties2() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.collapseObjectLiterals = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 535,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 537,col 44)",
            "(line 539,col 5)-(line 539,col 54)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 38)",
            "(line 543,col 5)-(line 543,col 42)",
            "(line 544,col 5)-(line 544,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral1()",
        "snippet": "  public void testCollapseObjectLiteral1() {\n    // Verify collapseObjectLiterals does nothing in global scope\n    String code = \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    testSame(options, code);\n  }\n",
        "begin_line": 547,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 54)",
            "(line 551,col 5)-(line 551,col 54)",
            "(line 552,col 5)-(line 552,col 28)",
            "(line 554,col 5)-(line 554,col 42)",
            "(line 555,col 5)-(line 555,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral2()",
        "snippet": "  public void testCollapseObjectLiteral2() {\n    String code =\n        \"function f() {var x = {}; x.FOO = 5; x.bar = 3;}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    test(options, code,\n        \"function f(){\" +\n        \"var JSCompiler_object_inline_FOO_0;\" +\n        \"var JSCompiler_object_inline_bar_1;\" +\n        \"JSCompiler_object_inline_FOO_0=5;\" +\n        \"JSCompiler_object_inline_bar_1=3}\");\n  }\n",
        "begin_line": 558,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 560,col 59)",
            "(line 562,col 5)-(line 562,col 54)",
            "(line 563,col 5)-(line 563,col 28)",
            "(line 565,col 5)-(line 565,col 42)",
            "(line 566,col 5)-(line 571,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTightenTypesWithoutTypeCheck()",
        "snippet": "  public void testTightenTypesWithoutTypeCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.tightenTypes = true;\n    test(options, \"\", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n  }\n",
        "begin_line": 574,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 575,col 54)",
            "(line 576,col 5)-(line 576,col 32)",
            "(line 577,col 5)-(line 577,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDisambiguateProperties()",
        "snippet": "  public void testDisambiguateProperties() {\n    String code =\n        \"/** @constructor */ function Foo(){} Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ function Baz(){} Baz.prototype.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.disambiguateProperties = true;\n    options.checkTypes = true;\n    test(options, code,\n         \"function Foo(){} Foo.prototype.Foo_prototype$bar = 3;\" +\n         \"function Baz(){} Baz.prototype.Baz_prototype$bar = 3;\");\n  }\n",
        "begin_line": 580,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 583,col 70)",
            "(line 585,col 5)-(line 585,col 54)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 588,col 42)",
            "(line 589,col 5)-(line 589,col 30)",
            "(line 590,col 5)-(line 592,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkPureCalls()",
        "snippet": "  public void testMarkPureCalls() {\n    String testCode = \"function foo() {} foo();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.computeFunctionSideEffects = true;\n    test(options, testCode, \"function foo() {}\");\n  }\n",
        "begin_line": 595,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 49)",
            "(line 597,col 5)-(line 597,col 54)",
            "(line 598,col 5)-(line 598,col 34)",
            "(line 600,col 5)-(line 600,col 32)",
            "(line 602,col 5)-(line 602,col 46)",
            "(line 603,col 5)-(line 603,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkNoSideEffects()",
        "snippet": "  public void testMarkNoSideEffects() {\n    String testCode = \"noSideEffects();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.markNoSideEffectCalls = true;\n    test(options, testCode, \"\");\n  }\n",
        "begin_line": 606,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 607,col 41)",
            "(line 608,col 5)-(line 608,col 54)",
            "(line 609,col 5)-(line 609,col 34)",
            "(line 611,col 5)-(line 611,col 32)",
            "(line 613,col 5)-(line 613,col 41)",
            "(line 614,col 5)-(line 614,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testChainedCalls()",
        "snippet": "  public void testChainedCalls() {\n    CompilerOptions options = createCompilerOptions();\n    options.chainCalls = true;\n    test(\n        options,\n        \"/** @constructor */ function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar(); \" +\n        \"f.bar(); \",\n        \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar().bar();\");\n  }\n",
        "begin_line": 617,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 618,col 54)",
            "(line 619,col 5)-(line 619,col 30)",
            "(line 620,col 5)-(line 630,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtraAnnotationNames()",
        "snippet": "  public void testExtraAnnotationNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.setExtraAnnotationNames(Sets.newHashSet(\"TagA\", \"TagB\"));\n    test(\n        options,\n        \"/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();\",\n        \"var f = new Foo(); f.bar();\");\n  }\n",
        "begin_line": 633,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 634,col 54)",
            "(line 635,col 5)-(line 635,col 69)",
            "(line 636,col 5)-(line 639,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizePrototypeMethods()",
        "snippet": "  public void testDevirtualizePrototypeMethods() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    test(\n        options,\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\",\n        \"var Foo = function() {};\" +\n        \"var JSCompiler_StaticMethods_bar = \" +\n        \"    function(JSCompiler_StaticMethods_bar$self) {};\" +\n        \"JSCompiler_StaticMethods_bar(new Foo());\");\n  }\n",
        "begin_line": 642,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 54)",
            "(line 644,col 5)-(line 644,col 48)",
            "(line 645,col 5)-(line 653,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConsts()",
        "snippet": "  public void testCheckConsts() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineConstantVars = true;\n    test(options, \"var FOO = true; FOO = false\",\n        ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 656,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 657,col 5)-(line 657,col 54)",
            "(line 658,col 5)-(line 658,col 38)",
            "(line 659,col 5)-(line 660,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAllChecksOn()",
        "snippet": "  public void testAllChecksOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkControlStructures = true;\n    options.checkRequires = CheckLevel.ERROR;\n    options.checkProvides = CheckLevel.ERROR;\n    options.generateExports = true;\n    options.exportTestFunctions = true;\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"goog\";\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkSymbols = true;\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    options.processObjectPropertyString = true;\n    options.collapseProperties = true;\n    test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED);\n  }\n",
        "begin_line": 663,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 664,col 5)-(line 664,col 54)",
            "(line 665,col 5)-(line 665,col 39)",
            "(line 666,col 5)-(line 666,col 42)",
            "(line 667,col 5)-(line 667,col 45)",
            "(line 668,col 5)-(line 668,col 45)",
            "(line 669,col 5)-(line 669,col 35)",
            "(line 670,col 5)-(line 670,col 39)",
            "(line 671,col 5)-(line 671,col 31)",
            "(line 672,col 5)-(line 672,col 59)",
            "(line 673,col 5)-(line 673,col 53)",
            "(line 674,col 5)-(line 674,col 51)",
            "(line 675,col 5)-(line 675,col 47)",
            "(line 676,col 5)-(line 676,col 32)",
            "(line 677,col 5)-(line 677,col 50)",
            "(line 678,col 5)-(line 678,col 47)",
            "(line 679,col 5)-(line 679,col 38)",
            "(line 680,col 5)-(line 680,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckingWithSyntheticBlocks()",
        "snippet": "  public void testTypeCheckingWithSyntheticBlocks() {\n    CompilerOptions options = createCompilerOptions();\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkTypes = true;\n\n    // We used to have a bug where the CFG drew an\n    // edge straight from synStart to f(progress).\n    // If that happens, then progress will get type {number|undefined}.\n    testSame(\n        options,\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \" synStart('foo');\" +\n        \" var progress = 1;\" +\n        \" f(progress);\" +\n        \" synEnd('foo');\" +\n        \"}\");\n  }\n",
        "begin_line": 683,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 684,col 5)-(line 684,col 54)",
            "(line 685,col 5)-(line 685,col 51)",
            "(line 686,col 5)-(line 686,col 47)",
            "(line 687,col 5)-(line 687,col 30)",
            "(line 692,col 5)-(line 700,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCompilerDoesNotBlowUpIfUndefinedSymbols()",
        "snippet": "  public void testCompilerDoesNotBlowUpIfUndefinedSymbols() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n\n    // Disable the undefined variable check.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n\n    // The compiler used to throw an IllegalStateException on this.\n    testSame(options, \"var x = {foo: y};\");\n  }\n",
        "begin_line": 703,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 704,col 54)",
            "(line 705,col 5)-(line 705,col 32)",
            "(line 708,col 5)-(line 710,col 24)",
            "(line 713,col 5)-(line 713,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstantTagsMustAlwaysBeRemoved()",
        "snippet": "  public void testConstantTagsMustAlwaysBeRemoved() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    String originalText = \"var G_GEO_UNKNOWN_ADDRESS=1;\\n\" +\n        \"function foo() {\" +\n        \"  var localVar = 2;\\n\" +\n        \"  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\\n\" +\n        \"    alert(\\\"A\\\"); }}\";\n    String expectedText = \"var G_GEO_UNKNOWN_ADDRESS=1;\" +\n        \"function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\\\"A\\\")}}\";\n\n    test(options, originalText, expectedText);\n  }\n",
        "begin_line": 719,
        "end_line": 732,
        "comment": " we finish.",
        "child_ranges": [
            "(line 720,col 5)-(line 720,col 54)",
            "(line 722,col 5)-(line 722,col 60)",
            "(line 723,col 5)-(line 727,col 31)",
            "(line 728,col 5)-(line 729,col 77)",
            "(line 731,col 5)-(line 731,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassPreservesJsDoc()",
        "snippet": "  public void testClosurePassPreservesJsDoc() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.closurePass = true;\n\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @constructor */ Foo = function() {};\" +\n         \"var x = new Foo();\",\n         \"var COMPILED=true;var goog={};goog.exportSymbol=function(){};\" +\n         \"var Foo=function(){};var x=new Foo\");\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n         TypeCheck.ENUM_NOT_CONSTANT);\n  }\n",
        "begin_line": 734,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 54)",
            "(line 736,col 5)-(line 736,col 30)",
            "(line 737,col 5)-(line 737,col 31)",
            "(line 739,col 5)-(line 744,col 47)",
            "(line 745,col 5)-(line 748,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst()",
        "snippet": "  public void testProvidedNamespaceIsConst() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo'); \" +\n         \"function f() { foo = {};}\",\n         \"var foo = {}; function f() { foo = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 751,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 752,col 5)-(line 752,col 54)",
            "(line 753,col 5)-(line 753,col 31)",
            "(line 754,col 5)-(line 754,col 38)",
            "(line 755,col 5)-(line 755,col 38)",
            "(line 756,col 5)-(line 760,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst2()",
        "snippet": "  public void testProvidedNamespaceIsConst2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.bar'); \" +\n         \"function f() { foo.bar = {};}\",\n         \"var foo$bar = {};\" +\n         \"function f() { foo$bar = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 763,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 764,col 54)",
            "(line 765,col 5)-(line 765,col 31)",
            "(line 766,col 5)-(line 766,col 38)",
            "(line 767,col 5)-(line 767,col 38)",
            "(line 768,col 5)-(line 773,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst3()",
        "snippet": "  public void testProvidedNamespaceIsConst3() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; \" +\n         \"goog.provide('foo.bar'); goog.provide('foo.bar.baz'); \" +\n         \"/** @constructor */ foo.bar = function() {};\" +\n         \"/** @constructor */ foo.bar.baz = function() {};\",\n         \"var foo$bar = function(){};\" +\n         \"var foo$bar$baz = function(){};\");\n  }\n",
        "begin_line": 776,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 777,col 5)-(line 777,col 54)",
            "(line 778,col 5)-(line 778,col 31)",
            "(line 779,col 5)-(line 779,col 38)",
            "(line 780,col 5)-(line 780,col 38)",
            "(line 781,col 5)-(line 787,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst4()",
        "snippet": "  public void testProvidedNamespaceIsConst4() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"var foo = {}; foo.Bar = {};\",\n         \"var foo = {}; var foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 790,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 54)",
            "(line 792,col 5)-(line 792,col 31)",
            "(line 793,col 5)-(line 793,col 38)",
            "(line 794,col 5)-(line 794,col 38)",
            "(line 795,col 5)-(line 798,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst5()",
        "snippet": "  public void testProvidedNamespaceIsConst5() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 801,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 802,col 54)",
            "(line 803,col 5)-(line 803,col 31)",
            "(line 804,col 5)-(line 804,col 38)",
            "(line 805,col 5)-(line 805,col 38)",
            "(line 806,col 5)-(line 809,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAlwaysOn()",
        "snippet": "  public void testProcessDefinesAlwaysOn() {\n    test(createCompilerOptions(),\n         \"/** @define {boolean} */ var HI = true; HI = false;\",\n         \"var HI = false;false;\");\n  }\n",
        "begin_line": 812,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 813,col 5)-(line 815,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAdditionalReplacements()",
        "snippet": "  public void testProcessDefinesAdditionalReplacements() {\n    CompilerOptions options = createCompilerOptions();\n    options.setDefineToBooleanLiteral(\"HI\", false);\n    test(options,\n         \"/** @define {boolean} */ var HI = true;\",\n         \"var HI = false;\");\n  }\n",
        "begin_line": 818,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 819,col 54)",
            "(line 820,col 5)-(line 820,col 51)",
            "(line 821,col 5)-(line 823,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceMessages()",
        "snippet": "  public void testReplaceMessages() {\n    CompilerOptions options = createCompilerOptions();\n    String prefix = \"var goog = {}; goog.getMsg = function() {};\";\n    testSame(options, prefix + \"var MSG_HI = goog.getMsg('hi');\");\n\n    options.messageBundle = new EmptyMessageBundle();\n    test(options,\n        prefix + \"/** @desc xyz */ var MSG_HI = goog.getMsg('hi');\",\n        prefix + \"var MSG_HI = 'hi';\");\n  }\n",
        "begin_line": 826,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 54)",
            "(line 828,col 5)-(line 828,col 66)",
            "(line 829,col 5)-(line 829,col 66)",
            "(line 831,col 5)-(line 831,col 53)",
            "(line 832,col 5)-(line 834,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalNames()",
        "snippet": "  public void testCheckGlobalNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkGlobalNamesLevel = CheckLevel.ERROR;\n    test(options, \"var x = {}; var y = x.z;\",\n         CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 837,
        "end_line": 842,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 838,col 54)",
            "(line 839,col 5)-(line 839,col 53)",
            "(line 840,col 5)-(line 841,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGetters()",
        "snippet": "  public void testInlineGetters() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function Foo() {} Foo.prototype.bar = function() { return 3; };\" +\n        \"var x = new Foo(); x.bar();\";\n\n    testSame(options, code);\n    options.inlineGetters = true;\n\n    test(options, code,\n         \"function Foo() {} Foo.prototype.bar = function() { return 3 };\" +\n         \"var x = new Foo(); 3;\");\n  }\n",
        "begin_line": 844,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 845,col 5)-(line 845,col 54)",
            "(line 846,col 5)-(line 848,col 38)",
            "(line 850,col 5)-(line 850,col 28)",
            "(line 851,col 5)-(line 851,col 33)",
            "(line 853,col 5)-(line 855,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGettersWithAmbiguate()",
        "snippet": "  public void testInlineGettersWithAmbiguate() {\n    CompilerOptions options = createCompilerOptions();\n\n    String code =\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"/** @type {number} */ Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"/** @constructor */\" +\n        \"function Bar() {}\" +\n        \"/** @type {string} */ Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().getField();\" +\n        \"new Bar().getField();\";\n\n    testSame(options, code);\n\n    options.inlineGetters = true;\n\n    test(options, code,\n        \"function Foo() {}\" +\n        \"Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"function Bar() {}\" +\n        \"Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().field;\" +\n        \"new Bar().field;\");\n\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n\n    // Propagating the wrong type information may cause ambiguate properties\n    // to generate bad code.\n    testSame(options, code);\n  }\n",
        "begin_line": 858,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 859,col 5)-(line 859,col 54)",
            "(line 861,col 5)-(line 871,col 32)",
            "(line 873,col 5)-(line 873,col 28)",
            "(line 875,col 5)-(line 875,col 33)",
            "(line 877,col 5)-(line 885,col 28)",
            "(line 887,col 5)-(line 887,col 30)",
            "(line 888,col 5)-(line 888,col 39)",
            "(line 892,col 5)-(line 892,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x);\";\n    testSame(options, code);\n\n    options.inlineVariables = true;\n    test(options, code, \"(function foo() {})(3);\");\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);\n  }\n",
        "begin_line": 895,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 896,col 5)-(line 896,col 54)",
            "(line 897,col 5)-(line 897,col 57)",
            "(line 898,col 5)-(line 898,col 28)",
            "(line 900,col 5)-(line 900,col 35)",
            "(line 901,col 5)-(line 901,col 51)",
            "(line 903,col 5)-(line 903,col 64)",
            "(line 904,col 5)-(line 904,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);\";\n    testSame(options, code);\n\n    options.inlineConstantVars = true;\n    test(options, code, \"function foo() {} var x = 3; foo(x); foo(4);\");\n  }\n",
        "begin_line": 907,
        "end_line": 914,
        "comment": "",
        "child_ranges": [
            "(line 908,col 5)-(line 908,col 54)",
            "(line 909,col 5)-(line 909,col 80)",
            "(line 910,col 5)-(line 910,col 28)",
            "(line 912,col 5)-(line 912,col 38)",
            "(line 913,col 5)-(line 913,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMinimizeExits()",
        "snippet": "  public void testMinimizeExits() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() {\" +\n        \"  if (window.foo) return; window.h(); \" +\n        \"}\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(\n        options, code,\n        \"function f() {\" +\n        \"  window.foo || window.h(); \" +\n        \"}\");\n  }\n",
        "begin_line": 916,
        "end_line": 930,
        "comment": "",
        "child_ranges": [
            "(line 917,col 5)-(line 917,col 54)",
            "(line 918,col 5)-(line 921,col 12)",
            "(line 922,col 5)-(line 922,col 28)",
            "(line 924,col 5)-(line 924,col 33)",
            "(line 925,col 5)-(line 929,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldConstants()",
        "snippet": "  public void testFoldConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"if (true) { window.foo(); }\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(options, code, \"window.foo();\");\n  }\n",
        "begin_line": 932,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 933,col 5)-(line 933,col 54)",
            "(line 934,col 5)-(line 934,col 48)",
            "(line 935,col 5)-(line 935,col 28)",
            "(line 937,col 5)-(line 937,col 33)",
            "(line 938,col 5)-(line 938,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return; f(); }\";\n    testSame(options, code);\n\n    options.removeDeadCode = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 941,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 54)",
            "(line 943,col 5)-(line 943,col 50)",
            "(line 944,col 5)-(line 944,col 28)",
            "(line 946,col 5)-(line 946,col 34)",
            "(line 947,col 5)-(line 947,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties1()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    test(options, code, \"function Foo() {}\");\n  }\n",
        "begin_line": 950,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 54)",
            "(line 952,col 5)-(line 953,col 64)",
            "(line 954,col 5)-(line 954,col 28)",
            "(line 956,col 5)-(line 956,col 51)",
            "(line 957,col 5)-(line 957,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties2()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\" +\n        \"function f(x) { x.bar(); }\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 960,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 961,col 5)-(line 961,col 54)",
            "(line 962,col 5)-(line 964,col 37)",
            "(line 965,col 5)-(line 965,col 28)",
            "(line 967,col 5)-(line 967,col 51)",
            "(line 968,col 5)-(line 968,col 28)",
            "(line 970,col 5)-(line 970,col 36)",
            "(line 971,col 5)-(line 971,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSmartNamePass()",
        "snippet": "  public void testSmartNamePass() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() { this.bar(); } \" +\n        \"Foo.prototype.bar = function() { return Foo(); };\";\n    testSame(options, code);\n\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 974,
        "end_line": 982,
        "comment": "",
        "child_ranges": [
            "(line 975,col 5)-(line 975,col 54)",
            "(line 976,col 5)-(line 977,col 60)",
            "(line 978,col 5)-(line 978,col 28)",
            "(line 980,col 5)-(line 980,col 36)",
            "(line 981,col 5)-(line 981,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeadAssignmentsElimination()",
        "snippet": "  public void testDeadAssignmentsElimination() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; 4; x = 5; return x; } f(); \";\n    testSame(options, code);\n\n    options.deadAssignmentElimination = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() { var x = 3; 4; x = 5; return x; } f();\");\n  }\n",
        "begin_line": 984,
        "end_line": 994,
        "comment": "",
        "child_ranges": [
            "(line 985,col 5)-(line 985,col 54)",
            "(line 986,col 5)-(line 986,col 74)",
            "(line 987,col 5)-(line 987,col 28)",
            "(line 989,col 5)-(line 989,col 45)",
            "(line 990,col 5)-(line 990,col 28)",
            "(line 992,col 5)-(line 992,col 36)",
            "(line 993,col 5)-(line 993,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineFunctions()",
        "snippet": "  public void testInlineFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 3; } f(); \";\n    testSame(options, code);\n\n    options.inlineFunctions = true;\n    test(options, code, \"3;\");\n  }\n",
        "begin_line": 996,
        "end_line": 1003,
        "comment": "",
        "child_ranges": [
            "(line 997,col 5)-(line 997,col 54)",
            "(line 998,col 5)-(line 998,col 53)",
            "(line 999,col 5)-(line 999,col 28)",
            "(line 1001,col 5)-(line 1001,col 35)",
            "(line 1002,col 5)-(line 1002,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars1()",
        "snippet": "  public void testRemoveUnusedVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f(x) {} f();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() {} f();\");\n  }\n",
        "begin_line": 1005,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 5)-(line 1006,col 54)",
            "(line 1007,col 5)-(line 1007,col 42)",
            "(line 1008,col 5)-(line 1008,col 28)",
            "(line 1010,col 5)-(line 1010,col 36)",
            "(line 1011,col 5)-(line 1011,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars2()",
        "snippet": "  public void testRemoveUnusedVars2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"(function f(x) {})();var g = function() {}; g();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"(function() {})();var g = function() {}; g();\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"(function f() {})();var g = function $g$() {}; g();\");\n  }\n",
        "begin_line": 1014,
        "end_line": 1024,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 5)-(line 1015,col 54)",
            "(line 1016,col 5)-(line 1016,col 69)",
            "(line 1017,col 5)-(line 1017,col 28)",
            "(line 1019,col 5)-(line 1019,col 36)",
            "(line 1020,col 5)-(line 1020,col 73)",
            "(line 1022,col 5)-(line 1022,col 77)",
            "(line 1023,col 5)-(line 1023,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleCodeMotion()",
        "snippet": "  public void testCrossModuleCodeMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var x = 1;\",\n      \"x;\",\n    };\n    testSame(options, code);\n\n    options.crossModuleCodeMotion = true;\n    test(options, code, new String[] {\n      \"\",\n      \"var x = 1; x;\",\n    });\n  }\n",
        "begin_line": 1026,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 5)-(line 1027,col 54)",
            "(line 1028,col 5)-(line 1031,col 6)",
            "(line 1032,col 5)-(line 1032,col 28)",
            "(line 1034,col 5)-(line 1034,col 41)",
            "(line 1035,col 5)-(line 1038,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleMethodMotion()",
        "snippet": "  public void testCrossModuleMethodMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var Foo = function() {}; Foo.prototype.bar = function() {};\" +\n      \"var x = new Foo();\",\n      \"x.bar();\",\n    };\n    testSame(options, code);\n\n    options.crossModuleMethodMotion = true;\n    test(options, code, new String[] {\n      CrossModuleMethodMotion.STUB_DECLARATIONS +\n      \"var Foo = function() {};\" +\n      \"Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;\",\n      \"Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()\",\n    });\n  }\n",
        "begin_line": 1041,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 5)-(line 1042,col 54)",
            "(line 1043,col 5)-(line 1047,col 6)",
            "(line 1048,col 5)-(line 1048,col 28)",
            "(line 1050,col 5)-(line 1050,col 43)",
            "(line 1051,col 5)-(line 1056,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables1()",
        "snippet": "  public void testFlowSensitiveInlineVariables1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; x = 5; return x; }\";\n    testSame(options, code);\n\n    options.flowSensitiveInlineVariables = true;\n    test(options, code, \"function f() { var x = 3; return 5; }\");\n\n    String unusedVar = \"function f() { var x; x = 5; return x; } f()\";\n    test(options, unusedVar, \"function f() { var x; return 5; } f()\");\n\n    options.removeUnusedVars = true;\n    test(options, unusedVar, \"function f() { return 5; } f()\");\n  }\n",
        "begin_line": 1059,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1060,col 54)",
            "(line 1061,col 5)-(line 1061,col 65)",
            "(line 1062,col 5)-(line 1062,col 28)",
            "(line 1064,col 5)-(line 1064,col 48)",
            "(line 1065,col 5)-(line 1065,col 65)",
            "(line 1067,col 5)-(line 1067,col 70)",
            "(line 1068,col 5)-(line 1068,col 70)",
            "(line 1070,col 5)-(line 1070,col 36)",
            "(line 1071,col 5)-(line 1071,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables2()",
        "snippet": "  public void testFlowSensitiveInlineVariables2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function f () {\\n\" +\n        \"    var ab = 0;\\n\" +\n        \"    ab += '-';\\n\" +\n        \"    alert(ab);\\n\" +\n        \"}\",\n        \"function f () {\\n\" +\n        \"    alert('0-');\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 54)",
            "(line 1076,col 5)-(line 1077,col 48)",
            "(line 1078,col 5)-(line 1086,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseAnonymousFunctions()",
        "snippet": "  public void testCollapseAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.collapseAnonymousFunctions = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1089,
        "end_line": 1096,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 5)-(line 1090,col 54)",
            "(line 1091,col 5)-(line 1091,col 43)",
            "(line 1092,col 5)-(line 1092,col 28)",
            "(line 1094,col 5)-(line 1094,col 46)",
            "(line 1095,col 5)-(line 1095,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMoveFunctionDeclarations()",
        "snippet": "  public void testMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f(); function f() { return 3; }\";\n    testSame(options, code);\n\n    options.moveFunctionDeclarations = true;\n    test(options, code, \"function f() { return 3; } var x = f();\");\n  }\n",
        "begin_line": 1098,
        "end_line": 1105,
        "comment": "",
        "child_ranges": [
            "(line 1099,col 5)-(line 1099,col 54)",
            "(line 1100,col 5)-(line 1100,col 60)",
            "(line 1101,col 5)-(line 1101,col 28)",
            "(line 1103,col 5)-(line 1103,col 44)",
            "(line 1104,col 5)-(line 1104,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctions()",
        "snippet": "  public void testNameAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code, \"var f = function $() {}\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"var f = function $f$() {}\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1107,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1108,col 54)",
            "(line 1109,col 5)-(line 1109,col 43)",
            "(line 1110,col 5)-(line 1110,col 28)",
            "(line 1112,col 5)-(line 1112,col 75)",
            "(line 1113,col 5)-(line 1113,col 51)",
            "(line 1114,col 5)-(line 1114,col 65)",
            "(line 1116,col 5)-(line 1116,col 77)",
            "(line 1117,col 5)-(line 1117,col 53)",
            "(line 1118,col 5)-(line 1118,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    String expected = \"var a; var b = function() {}; a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.a = \" + i + \";\";\n      expected += \"a.a = \" + i + \";\";\n    }\n    testSame(options, code);\n\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, expected);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    options.variableRenaming = VariableRenamingPolicy.OFF;\n    testSame(options, code);\n  }\n",
        "begin_line": 1121,
        "end_line": 1138,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1122,col 54)",
            "(line 1123,col 5)-(line 1123,col 43)",
            "(line 1124,col 5)-(line 1124,col 71)",
            "(line 1125,col 5)-(line 1128,col 5)",
            "(line 1129,col 5)-(line 1129,col 28)",
            "(line 1131,col 5)-(line 1131,col 54)",
            "(line 1132,col 5)-(line 1132,col 58)",
            "(line 1133,col 5)-(line 1133,col 34)",
            "(line 1135,col 5)-(line 1135,col 64)",
            "(line 1136,col 5)-(line 1136,col 58)",
            "(line 1137,col 5)-(line 1137,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizationAndExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testDevirtualizationAndExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    options.collapseAnonymousFunctions = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    String code = \"var f = function() {};\";\n    String expected = \"var a; function b() {} a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.argz = function() {arguments};\";\n      code += \"f.prototype.devir\" + i + \" = function() {};\";\n\n      char letter = (char) ('d' + i);\n      expected += \"a.argz = function() {arguments};\";\n      expected += \"function \" + letter + \"(c){}\";\n    }\n\n    code += \"var F = new f(); F.argz();\";\n    expected += \"var n = new b(); n.argz();\";\n\n    for (int i = 0; i < 10; i++) {\n      code += \"F.devir\" + i + \"();\";\n\n      char letter = (char) ('d' + i);\n      expected += letter + \"(n);\";\n    }\n    test(options, code, expected);\n  }\n",
        "begin_line": 1140,
        "end_line": 1167,
        "comment": "",
        "child_ranges": [
            "(line 1141,col 5)-(line 1141,col 54)",
            "(line 1142,col 5)-(line 1142,col 48)",
            "(line 1143,col 5)-(line 1143,col 46)",
            "(line 1144,col 5)-(line 1144,col 54)",
            "(line 1145,col 5)-(line 1145,col 58)",
            "(line 1146,col 5)-(line 1146,col 43)",
            "(line 1147,col 5)-(line 1147,col 64)",
            "(line 1148,col 5)-(line 1155,col 5)",
            "(line 1157,col 5)-(line 1157,col 41)",
            "(line 1158,col 5)-(line 1158,col 45)",
            "(line 1160,col 5)-(line 1165,col 5)",
            "(line 1166,col 5)-(line 1166,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoalesceVariableNames()",
        "snippet": "  public void testCoalesceVariableNames() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() {var x = 3; var y = x; var z = y; return z;}\";\n    testSame(options, code);\n\n    options.coalesceVariableNames = true;\n    test(options, code,\n         \"function f() {var x = 3; x = x; x = x; return x;}\");\n  }\n",
        "begin_line": 1169,
        "end_line": 1177,
        "comment": "",
        "child_ranges": [
            "(line 1170,col 5)-(line 1170,col 54)",
            "(line 1171,col 5)-(line 1171,col 78)",
            "(line 1172,col 5)-(line 1172,col 28)",
            "(line 1174,col 5)-(line 1174,col 41)",
            "(line 1175,col 5)-(line 1176,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPropertyRenaming()",
        "snippet": "  public void testPropertyRenaming() {\n    CompilerOptions options = createCompilerOptions();\n    options.propertyAffinity = true;\n    String code =\n        \"function f() { return this.foo + this['bar'] + this.Baz; }\" +\n        \"f.prototype.bar = 3; f.prototype.Baz = 3;\";\n    String heuristic =\n        \"function f() { return this.foo + this['bar'] + this.a; }\" +\n        \"f.prototype.bar = 3; f.prototype.a = 3;\";\n    String aggHeuristic =\n        \"function f() { return this.foo + this['b'] + this.a; } \" +\n        \"f.prototype.b = 3; f.prototype.a = 3;\";\n    String all =\n        \"function f() { return this.b + this['bar'] + this.a; }\" +\n        \"f.prototype.c = 3; f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, heuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n    test(options, code, aggHeuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, all);\n  }\n",
        "begin_line": 1179,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1180,col 5)-(line 1180,col 54)",
            "(line 1181,col 5)-(line 1181,col 36)",
            "(line 1182,col 5)-(line 1184,col 52)",
            "(line 1185,col 5)-(line 1187,col 50)",
            "(line 1188,col 5)-(line 1190,col 48)",
            "(line 1191,col 5)-(line 1193,col 48)",
            "(line 1194,col 5)-(line 1194,col 28)",
            "(line 1196,col 5)-(line 1196,col 64)",
            "(line 1197,col 5)-(line 1197,col 35)",
            "(line 1199,col 5)-(line 1199,col 75)",
            "(line 1200,col 5)-(line 1200,col 38)",
            "(line 1202,col 5)-(line 1202,col 67)",
            "(line 1203,col 5)-(line 1203,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConvertToDottedProperties()",
        "snippet": "  public void testConvertToDottedProperties() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return this['bar']; } f.prototype.bar = 3;\";\n    String expected =\n        \"function f() { return this.bar; } f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.convertToDottedProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1206,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 5)-(line 1207,col 54)",
            "(line 1208,col 5)-(line 1209,col 68)",
            "(line 1210,col 5)-(line 1211,col 63)",
            "(line 1212,col 5)-(line 1212,col 28)",
            "(line 1214,col 5)-(line 1214,col 45)",
            "(line 1215,col 5)-(line 1215,col 67)",
            "(line 1216,col 5)-(line 1216,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRewriteFunctionExpressions()",
        "snippet": "  public void testRewriteFunctionExpressions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a = function() {};\";\n    String expected = \"function JSCompiler_emptyFn(){return function(){}} \" +\n        \"var a = JSCompiler_emptyFn();\";\n    for (int i = 0; i < 10; i++) {\n      code += \"a = function() {};\";\n      expected += \"a = JSCompiler_emptyFn();\";\n    }\n    testSame(options, code);\n\n    options.rewriteFunctionExpressions = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1219,
        "end_line": 1232,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 5)-(line 1220,col 54)",
            "(line 1221,col 5)-(line 1221,col 43)",
            "(line 1222,col 5)-(line 1223,col 40)",
            "(line 1224,col 5)-(line 1227,col 5)",
            "(line 1228,col 5)-(line 1228,col 28)",
            "(line 1230,col 5)-(line 1230,col 46)",
            "(line 1231,col 5)-(line 1231,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasAllStrings()",
        "snippet": "  public void testAliasAllStrings() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 'a'; }\";\n    String expected = \"var $$S_a = 'a'; function f() { return $$S_a; }\";\n    testSame(options, code);\n\n    options.aliasAllStrings = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1234,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 5)-(line 1235,col 54)",
            "(line 1236,col 5)-(line 1236,col 49)",
            "(line 1237,col 5)-(line 1237,col 72)",
            "(line 1238,col 5)-(line 1238,col 28)",
            "(line 1240,col 5)-(line 1240,col 35)",
            "(line 1241,col 5)-(line 1241,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasExterns()",
        "snippet": "  public void testAliasExterns() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return window + window + window + window; }\";\n    String expected = \"var GLOBAL_window = window;\" +\n        \"function f() { return GLOBAL_window + GLOBAL_window + \" +\n        \"               GLOBAL_window + GLOBAL_window; }\";\n    testSame(options, code);\n\n    options.aliasExternals = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1244,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1245,col 54)",
            "(line 1246,col 5)-(line 1246,col 79)",
            "(line 1247,col 5)-(line 1249,col 58)",
            "(line 1250,col 5)-(line 1250,col 28)",
            "(line 1252,col 5)-(line 1252,col 34)",
            "(line 1253,col 5)-(line 1253,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasKeywords()",
        "snippet": "  public void testAliasKeywords() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return true + true + true + true + true + true; }\";\n    String expected = \"var JSCompiler_alias_TRUE = true;\" +\n        \"function f() { return JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE; }\";\n    testSame(options, code);\n\n    options.aliasKeywords = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1256,
        "end_line": 1269,
        "comment": "",
        "child_ranges": [
            "(line 1257,col 5)-(line 1257,col 54)",
            "(line 1258,col 5)-(line 1259,col 75)",
            "(line 1260,col 5)-(line 1264,col 39)",
            "(line 1265,col 5)-(line 1265,col 28)",
            "(line 1267,col 5)-(line 1267,col 33)",
            "(line 1268,col 5)-(line 1268,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars1()",
        "snippet": "  public void testRenameVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"var abc = 3; function f() { var xyz = 5; return abc + xyz; }\";\n    String local = \"var abc = 3; function f() { var a = 5; return abc + a; }\";\n    String all = \"var a = 3; function c() { var b = 5; return a + b; }\";\n    testSame(options, code);\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    test(options, code, local);\n\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, all);\n\n    options.reserveRawExports = true;\n  }\n",
        "begin_line": 1271,
        "end_line": 1286,
        "comment": "",
        "child_ranges": [
            "(line 1272,col 5)-(line 1272,col 54)",
            "(line 1273,col 5)-(line 1274,col 71)",
            "(line 1275,col 5)-(line 1275,col 78)",
            "(line 1276,col 5)-(line 1276,col 72)",
            "(line 1277,col 5)-(line 1277,col 28)",
            "(line 1279,col 5)-(line 1279,col 60)",
            "(line 1280,col 5)-(line 1280,col 31)",
            "(line 1282,col 5)-(line 1282,col 58)",
            "(line 1283,col 5)-(line 1283,col 29)",
            "(line 1285,col 5)-(line 1285,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars2()",
        "snippet": "  public void testRenameVars2() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n\n    String code =     \"var abc = 3; function f() { window['a'] = 5; }\";\n    String noexport = \"var a = 3;   function b() { window['a'] = 5; }\";\n    String export =   \"var b = 3;   function c() { window['a'] = 5; }\";\n\n    options.reserveRawExports = false;\n    test(options, code, noexport);\n\n    options.reserveRawExports = true;\n    test(options, code, export);\n  }\n",
        "begin_line": 1288,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1289,col 5)-(line 1289,col 54)",
            "(line 1290,col 5)-(line 1290,col 58)",
            "(line 1292,col 5)-(line 1292,col 71)",
            "(line 1293,col 5)-(line 1293,col 71)",
            "(line 1294,col 5)-(line 1294,col 71)",
            "(line 1296,col 5)-(line 1296,col 38)",
            "(line 1297,col 5)-(line 1297,col 34)",
            "(line 1299,col 5)-(line 1299,col 37)",
            "(line 1300,col 5)-(line 1300,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testShadowVaribles()",
        "snippet": "  public void testShadowVaribles() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    options.shadowVariables = true;\n    String code =     \"var f = function(x) { return function(y) {}}\";\n    String expected = \"var f = function(a) { return function(a) {}}\";\n    test(options, code, expected);\n  }\n",
        "begin_line": 1303,
        "end_line": 1310,
        "comment": "",
        "child_ranges": [
            "(line 1304,col 5)-(line 1304,col 54)",
            "(line 1305,col 5)-(line 1305,col 60)",
            "(line 1306,col 5)-(line 1306,col 35)",
            "(line 1307,col 5)-(line 1307,col 69)",
            "(line 1308,col 5)-(line 1308,col 69)",
            "(line 1309,col 5)-(line 1309,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameLabels()",
        "snippet": "  public void testRenameLabels() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"longLabel: while (true) { break longLabel; }\";\n    String expected = \"a: while (true) { break a; }\";\n    testSame(options, code);\n\n    options.labelRenaming = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1312,
        "end_line": 1320,
        "comment": "",
        "child_ranges": [
            "(line 1313,col 5)-(line 1313,col 54)",
            "(line 1314,col 5)-(line 1314,col 65)",
            "(line 1315,col 5)-(line 1315,col 53)",
            "(line 1316,col 5)-(line 1316,col 28)",
            "(line 1318,col 5)-(line 1318,col 33)",
            "(line 1319,col 5)-(line 1319,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBadBreakStatementInIdeMode()",
        "snippet": "  public void testBadBreakStatementInIdeMode() {\n    // Ensure that type-checking doesn't crash, even if the CFG is malformed.\n    // This can happen in IDE mode.\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    options.checkTypes = true;\n    test(options,\n         \"function f() { try { } catch(e) { break; } }\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1322,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1325,col 5)-(line 1325,col 54)",
            "(line 1326,col 5)-(line 1326,col 27)",
            "(line 1327,col 5)-(line 1327,col 30)",
            "(line 1328,col 5)-(line 1330,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue63SourceMap()",
        "snippet": "  public void testIssue63SourceMap() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a;\";\n\n    options.skipAllPasses = true;\n    options.sourceMapOutputPath = \"./src.map\";\n\n    Compiler compiler = compile(options, code);\n    compiler.toSource();\n  }\n",
        "begin_line": 1333,
        "end_line": 1342,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1334,col 54)",
            "(line 1335,col 5)-(line 1335,col 27)",
            "(line 1337,col 5)-(line 1337,col 33)",
            "(line 1338,col 5)-(line 1338,col 46)",
            "(line 1340,col 5)-(line 1340,col 47)",
            "(line 1341,col 5)-(line 1341,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp1()",
        "snippet": "  public void testRegExp1() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String expected = \"\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1344,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1345,col 5)-(line 1345,col 54)",
            "(line 1346,col 5)-(line 1346,col 33)",
            "(line 1348,col 5)-(line 1348,col 39)",
            "(line 1350,col 5)-(line 1350,col 28)",
            "(line 1352,col 5)-(line 1352,col 46)",
            "(line 1354,col 5)-(line 1354,col 25)",
            "(line 1356,col 5)-(line 1356,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp2()",
        "snippet": "  public void testRegExp2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");var a = RegExp.$1\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, CheckRegExp.REGEXP_REFERENCE);\n\n    options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1359,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1360,col 54)",
            "(line 1362,col 5)-(line 1362,col 33)",
            "(line 1364,col 5)-(line 1364,col 56)",
            "(line 1366,col 5)-(line 1366,col 28)",
            "(line 1368,col 5)-(line 1368,col 46)",
            "(line 1370,col 5)-(line 1370,col 54)",
            "(line 1372,col 5)-(line 1372,col 75)",
            "(line 1374,col 5)-(line 1374,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals1()",
        "snippet": "  public void testFoldLocals1() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // An external object, whose constructor has no side-effects,\n    // and whose method \"go\" only modifies the object.\n    String code = \"new Widget().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1377,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1378,col 5)-(line 1378,col 54)",
            "(line 1380,col 5)-(line 1380,col 33)",
            "(line 1384,col 5)-(line 1384,col 39)",
            "(line 1386,col 5)-(line 1386,col 28)",
            "(line 1388,col 5)-(line 1388,col 46)",
            "(line 1390,col 5)-(line 1390,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals2()",
        "snippet": "  public void testFoldLocals2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n    options.checkTypes = true;\n\n    // An external function that returns a local object that the\n    // method \"go\" that only modifies the object.\n    String code = \"widgetToken().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"widgetToken()\");\n  }\n",
        "begin_line": 1393,
        "end_line": 1408,
        "comment": "",
        "child_ranges": [
            "(line 1394,col 5)-(line 1394,col 54)",
            "(line 1396,col 5)-(line 1396,col 33)",
            "(line 1397,col 5)-(line 1397,col 30)",
            "(line 1401,col 5)-(line 1401,col 40)",
            "(line 1403,col 5)-(line 1403,col 28)",
            "(line 1405,col 5)-(line 1405,col 46)",
            "(line 1407,col 5)-(line 1407,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals3()",
        "snippet": "  public void testFoldLocals3() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // A function \"f\" who returns a known local object, and a method that\n    // modifies only modifies that.\n    String definition = \"function f(){return new Widget()}\";\n    String call = \"f().go();\";\n    String code = definition + call;\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    // BROKEN\n    //test(options, code, definition);\n    testSame(options, code);\n  }\n",
        "begin_line": 1411,
        "end_line": 1429,
        "comment": "",
        "child_ranges": [
            "(line 1412,col 5)-(line 1412,col 54)",
            "(line 1414,col 5)-(line 1414,col 33)",
            "(line 1418,col 5)-(line 1418,col 60)",
            "(line 1419,col 5)-(line 1419,col 30)",
            "(line 1420,col 5)-(line 1420,col 36)",
            "(line 1422,col 5)-(line 1422,col 28)",
            "(line 1424,col 5)-(line 1424,col 46)",
            "(line 1428,col 5)-(line 1428,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals4()",
        "snippet": "  public void testFoldLocals4() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/** @constructor */\\n\"\n        + \"function InternalWidget(){this.x = 1;}\"\n        + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\"\n        + \"new InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){this.x = 1;}\"\n      + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1431,
        "end_line": 1450,
        "comment": "",
        "child_ranges": [
            "(line 1432,col 5)-(line 1432,col 54)",
            "(line 1434,col 5)-(line 1434,col 33)",
            "(line 1436,col 5)-(line 1439,col 47)",
            "(line 1441,col 5)-(line 1441,col 28)",
            "(line 1443,col 5)-(line 1443,col 46)",
            "(line 1445,col 5)-(line 1447,col 73)",
            "(line 1449,col 5)-(line 1449,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals5()",
        "snippet": "  public void testFoldLocals5() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){var a={};a.x={};return a}\"\n        + \"fn().x.y = 1;\";\n\n    // \"fn\" returns a unescaped local object, we should be able to fold it,\n    // but we don't currently.\n    String result = \"\"\n        + \"function fn(){var a={x:{}};return a}\"\n        + \"fn().x.y = 1;\";\n\n    test(options, code, result);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1452,
        "end_line": 1472,
        "comment": "",
        "child_ranges": [
            "(line 1453,col 5)-(line 1453,col 54)",
            "(line 1455,col 5)-(line 1455,col 33)",
            "(line 1457,col 5)-(line 1459,col 26)",
            "(line 1463,col 5)-(line 1465,col 26)",
            "(line 1467,col 5)-(line 1467,col 32)",
            "(line 1469,col 5)-(line 1469,col 46)",
            "(line 1471,col 5)-(line 1471,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals6()",
        "snippet": "  public void testFoldLocals6() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){return {}}\"\n        + \"fn().x.y = 1;\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1474,
        "end_line": 1488,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 5)-(line 1475,col 54)",
            "(line 1477,col 5)-(line 1477,col 33)",
            "(line 1479,col 5)-(line 1481,col 26)",
            "(line 1483,col 5)-(line 1483,col 28)",
            "(line 1485,col 5)-(line 1485,col 46)",
            "(line 1487,col 5)-(line 1487,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals7()",
        "snippet": "  public void testFoldLocals7() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function InternalWidget(){return [];}\"\n        + \"Array.prototype.internalGo = function (){this.x = 2};\"\n        + \"InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){return [];}\"\n      + \"Array.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1490,
        "end_line": 1509,
        "comment": "",
        "child_ranges": [
            "(line 1491,col 5)-(line 1491,col 54)",
            "(line 1493,col 5)-(line 1493,col 33)",
            "(line 1495,col 5)-(line 1498,col 43)",
            "(line 1500,col 5)-(line 1500,col 28)",
            "(line 1502,col 5)-(line 1502,col 46)",
            "(line 1504,col 5)-(line 1506,col 64)",
            "(line 1508,col 5)-(line 1508,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVarDeclarationsIntoFor()",
        "snippet": "  public void testVarDeclarationsIntoFor() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"var a = 1; for (var b = 2; ;) {}\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = false;\n\n    test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n  }\n",
        "begin_line": 1511,
        "end_line": 1523,
        "comment": "",
        "child_ranges": [
            "(line 1512,col 5)-(line 1512,col 54)",
            "(line 1514,col 5)-(line 1514,col 49)",
            "(line 1516,col 5)-(line 1516,col 53)",
            "(line 1518,col 5)-(line 1518,col 28)",
            "(line 1520,col 5)-(line 1520,col 49)",
            "(line 1522,col 5)-(line 1522,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExploitAssigns()",
        "snippet": "  public void testExploitAssigns() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"a = 1; b = a; c = b\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"c=b=a=1\");\n  }\n",
        "begin_line": 1525,
        "end_line": 1537,
        "comment": "",
        "child_ranges": [
            "(line 1526,col 5)-(line 1526,col 54)",
            "(line 1528,col 5)-(line 1528,col 49)",
            "(line 1530,col 5)-(line 1530,col 40)",
            "(line 1532,col 5)-(line 1532,col 28)",
            "(line 1534,col 5)-(line 1534,col 48)",
            "(line 1536,col 5)-(line 1536,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRecoverOnBadExterns()",
        "snippet": "  public void testRecoverOnBadExterns() throws Exception {\n    // This test is for a bug in a very narrow set of circumstances:\n    // 1) externs validation has to be off.\n    // 2) aliasExternals has to be on.\n    // 3) The user has to reference a \"normal\" variable in externs.\n    // This case is handled at checking time by injecting a\n    // synthetic extern variable, and adding a \"@suppress {duplicate}\" to\n    // the normal code at compile time. But optimizations may remove that\n    // annotation, so we need to make sure that the variable declarations\n    // are de-duped before that happens.\n    CompilerOptions options = createCompilerOptions();\n\n    options.aliasExternals = true;\n    externs = new JSSourceFile[] {\n      JSSourceFile.fromCode(\"externs\", \"extern.foo\")\n    };\n\n    test(options,\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 1539,
        "end_line": 1562,
        "comment": "",
        "child_ranges": [
            "(line 1549,col 5)-(line 1549,col 54)",
            "(line 1551,col 5)-(line 1551,col 34)",
            "(line 1552,col 5)-(line 1554,col 6)",
            "(line 1556,col 5)-(line 1561,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDuplicateVariablesInExterns()",
        "snippet": "  public void testDuplicateVariablesInExterns() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    externs = new JSSourceFile[] {\n      JSSourceFile.fromCode(\"externs\",\n          \"var externs = {}; /** @suppress {duplicate} */ var externs = {};\")\n    };\n    testSame(options, \"\");\n  }\n",
        "begin_line": 1564,
        "end_line": 1572,
        "comment": "",
        "child_ranges": [
            "(line 1565,col 5)-(line 1565,col 54)",
            "(line 1566,col 5)-(line 1566,col 32)",
            "(line 1567,col 5)-(line 1570,col 6)",
            "(line 1571,col 5)-(line 1571,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode()",
        "snippet": "  public void testLanguageMode() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n\n    String code = \"var a = {get f(){}}\";\n\n    Compiler compiler = compile(options, code);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\n        \"JSC_PARSE_ERROR. Parse error. \" +\n        \"getters are not supported in Internet Explorer \" +\n        \"at i0 line 1 : 0\",\n        compiler.getErrors()[0].toString());\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1574,
        "end_line": 1595,
        "comment": "",
        "child_ranges": [
            "(line 1575,col 5)-(line 1575,col 54)",
            "(line 1576,col 5)-(line 1576,col 52)",
            "(line 1578,col 5)-(line 1578,col 40)",
            "(line 1580,col 5)-(line 1580,col 47)",
            "(line 1581,col 5)-(line 1581,col 49)",
            "(line 1582,col 5)-(line 1586,col 44)",
            "(line 1588,col 5)-(line 1588,col 52)",
            "(line 1590,col 5)-(line 1590,col 28)",
            "(line 1592,col 5)-(line 1592,col 59)",
            "(line 1594,col 5)-(line 1594,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode2()",
        "snippet": "  public void testLanguageMode2() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n\n    String code = \"var a  = 2; delete a;\";\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    test(options,\n        code,\n        code,\n        StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1597,
        "end_line": 1616,
        "comment": "",
        "child_ranges": [
            "(line 1598,col 5)-(line 1598,col 54)",
            "(line 1599,col 5)-(line 1599,col 52)",
            "(line 1600,col 5)-(line 1600,col 73)",
            "(line 1602,col 5)-(line 1602,col 42)",
            "(line 1604,col 5)-(line 1604,col 28)",
            "(line 1606,col 5)-(line 1606,col 52)",
            "(line 1608,col 5)-(line 1608,col 28)",
            "(line 1610,col 5)-(line 1610,col 59)",
            "(line 1612,col 5)-(line 1615,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue598()",
        "snippet": "  public void testIssue598() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    String code =\n        \"'use strict';\\n\" +\n        \"function App() {}\\n\" +\n        \"App.prototype = {\\n\" +\n        \"  get appData() { return this.appData_; },\\n\" +\n        \"  set appData(data) { this.appData_ = data; }\\n\" +\n        \"};\";\n\n    Compiler compiler = compile(options, code);\n    testSame(options, code);\n  }\n",
        "begin_line": 1618,
        "end_line": 1635,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 5)-(line 1619,col 54)",
            "(line 1620,col 5)-(line 1620,col 59)",
            "(line 1621,col 5)-(line 1621,col 60)",
            "(line 1623,col 5)-(line 1623,col 52)",
            "(line 1625,col 5)-(line 1631,col 13)",
            "(line 1633,col 5)-(line 1633,col 47)",
            "(line 1634,col 5)-(line 1634,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoaleseVariables()",
        "snippet": "  public void testCoaleseVariables() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = false;\n    options.coalesceVariableNames = true;\n\n    String code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    String expected =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    a = a;\" +\n        \"    return a;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = false;\n\n    code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    expected =\n        \"function f(a) {\" +\n        \"  if (!a) {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n\n    expected =\n      \"function f(a) {\" +\n      \"  return a;\" +\n      \"}\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1637,
        "end_line": 1699,
        "comment": "",
        "child_ranges": [
            "(line 1638,col 5)-(line 1638,col 54)",
            "(line 1640,col 5)-(line 1640,col 34)",
            "(line 1641,col 5)-(line 1641,col 41)",
            "(line 1643,col 5)-(line 1652,col 12)",
            "(line 1653,col 5)-(line 1662,col 12)",
            "(line 1664,col 5)-(line 1664,col 34)",
            "(line 1666,col 5)-(line 1666,col 33)",
            "(line 1667,col 5)-(line 1667,col 42)",
            "(line 1669,col 5)-(line 1678,col 12)",
            "(line 1679,col 5)-(line 1686,col 12)",
            "(line 1688,col 5)-(line 1688,col 34)",
            "(line 1690,col 5)-(line 1690,col 33)",
            "(line 1691,col 5)-(line 1691,col 41)",
            "(line 1693,col 5)-(line 1696,col 10)",
            "(line 1698,col 5)-(line 1698,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateStatementFusion()",
        "snippet": "  public void testLateStatementFusion() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"while(a){a();if(b){b();b()}}\",\n        \"for(;a;)a(),b&&(b(),b())\");\n  }\n",
        "begin_line": 1701,
        "end_line": 1707,
        "comment": "",
        "child_ranges": [
            "(line 1702,col 5)-(line 1702,col 54)",
            "(line 1703,col 5)-(line 1703,col 33)",
            "(line 1704,col 5)-(line 1706,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateConstantReordering()",
        "snippet": "  public void testLateConstantReordering() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }\",\n        \"   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) \");\n  }\n",
        "begin_line": 1709,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1710,col 5)-(line 1710,col 54)",
            "(line 1711,col 5)-(line 1711,col 33)",
            "(line 1712,col 5)-(line 1714,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testsyntheticBlockOnDeadAssignments()",
        "snippet": "  public void testsyntheticBlockOnDeadAssignments() {\n    CompilerOptions options = createCompilerOptions();\n    options.deadAssignmentElimination = true;\n    options.removeUnusedVars = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"var x; x = 1; START(); x = 1;END();x()\",\n                  \"var x; x = 1;{START();{x = 1}END()}x()\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1725,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1718,col 54)",
            "(line 1719,col 5)-(line 1719,col 45)",
            "(line 1720,col 5)-(line 1720,col 36)",
            "(line 1721,col 5)-(line 1721,col 48)",
            "(line 1722,col 5)-(line 1722,col 44)",
            "(line 1723,col 5)-(line 1724,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug4152835()",
        "snippet": "  public void testBug4152835() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"START();END()\", \"{START();{}END()}\");\n  }\n",
        "begin_line": 1727,
        "end_line": 1733,
        "comment": "",
        "child_ranges": [
            "(line 1728,col 5)-(line 1728,col 54)",
            "(line 1729,col 5)-(line 1729,col 33)",
            "(line 1730,col 5)-(line 1730,col 48)",
            "(line 1731,col 5)-(line 1731,col 44)",
            "(line 1732,col 5)-(line 1732,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug5786871()",
        "snippet": "  public void testBug5786871() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options, \"function () {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1735,
        "end_line": 1739,
        "comment": "",
        "child_ranges": [
            "(line 1736,col 5)-(line 1736,col 54)",
            "(line 1737,col 5)-(line 1737,col 27)",
            "(line 1738,col 5)-(line 1738,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue378()",
        "snippet": "  public void testIssue378() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    testSame(options, \"function f(c) {var f = c; arguments[0] = this;\" +\n                      \"    f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 1741,
        "end_line": 1747,
        "comment": "",
        "child_ranges": [
            "(line 1742,col 5)-(line 1742,col 54)",
            "(line 1743,col 5)-(line 1743,col 35)",
            "(line 1744,col 5)-(line 1744,col 48)",
            "(line 1745,col 5)-(line 1746,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue550()",
        "snippet": "  public void testIssue550() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    test(options,\n        \"function f(h) {\\n\" +\n        \"  var a = h;\\n\" +\n        \"  a = a + 'x';\\n\" +\n        \"  a = a + 'y';\\n\" +\n        \"  return a;\\n\" +\n        \"}\",\n        \"function f(a) {return a + 'xy'}\");\n  }\n",
        "begin_line": 1749,
        "end_line": 1764,
        "comment": "",
        "child_ranges": [
            "(line 1750,col 5)-(line 1750,col 54)",
            "(line 1751,col 5)-(line 1752,col 48)",
            "(line 1753,col 5)-(line 1753,col 33)",
            "(line 1754,col 5)-(line 1754,col 35)",
            "(line 1755,col 5)-(line 1755,col 48)",
            "(line 1756,col 5)-(line 1763,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    CompilerOptions options = createCompilerOptions();\n    options.smartNameRemoval = true;\n    test(options,\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1766,
        "end_line": 1782,
        "comment": "",
        "child_ranges": [
            "(line 1767,col 5)-(line 1767,col 54)",
            "(line 1768,col 5)-(line 1768,col 36)",
            "(line 1769,col 5)-(line 1781,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCodingConvention()",
        "snippet": "  public void testCodingConvention() {\n    Compiler compiler = new Compiler();\n    compiler.initOptions(new CompilerOptions());\n    assertEquals(\n      compiler.getCodingConvention().getClass().toString(),\n      ClosureCodingConvention.class.toString());\n  }\n",
        "begin_line": 1784,
        "end_line": 1790,
        "comment": "",
        "child_ranges": [
            "(line 1785,col 5)-(line 1785,col 39)",
            "(line 1786,col 5)-(line 1786,col 48)",
            "(line 1787,col 5)-(line 1789,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testJQueryStringSplitLoops()",
        "snippet": "  public void testJQueryStringSplitLoops() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"var x='1,2,3,4,5,6,7'.split(',')\");\n\n    options = createCompilerOptions();\n    options.foldConstants = true;\n    options.computeFunctionSideEffects = false;\n    options.removeUnusedVars = true;\n\n    // If we do splits too early, it would add a sideeffect to x.\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"\");\n\n  }\n",
        "begin_line": 1792,
        "end_line": 1809,
        "comment": "",
        "child_ranges": [
            "(line 1793,col 5)-(line 1793,col 54)",
            "(line 1794,col 5)-(line 1794,col 33)",
            "(line 1795,col 5)-(line 1797,col 42)",
            "(line 1799,col 5)-(line 1799,col 38)",
            "(line 1800,col 5)-(line 1800,col 33)",
            "(line 1801,col 5)-(line 1801,col 47)",
            "(line 1802,col 5)-(line 1802,col 36)",
            "(line 1805,col 5)-(line 1807,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAlwaysRunSafetyCheck()",
        "snippet": "  public void testAlwaysRunSafetyCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = false;\n    options.customPasses = ArrayListMultimap.create();\n    options.customPasses.put(\n        CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,\n        new CompilerPass() {\n          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n        });\n    try {\n      test(options,\n           \"var x = 3; function f() { return x + z; }\",\n           \"function f() { return x + z; }\");\n      fail(\"Expected runtime exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 1811,
        "end_line": 1832,
        "comment": "",
        "child_ranges": [
            "(line 1812,col 5)-(line 1812,col 54)",
            "(line 1813,col 5)-(line 1813,col 33)",
            "(line 1814,col 5)-(line 1814,col 54)",
            "(line 1815,col 5)-(line 1823,col 11)",
            "(line 1824,col 5)-(line 1831,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.Anonymous-56d8e59f-03db-4f68-90ba-c4d24fc00eba.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n",
        "begin_line": 1818,
        "end_line": 1822,
        "comment": "",
        "child_ranges": [
            "(line 1819,col 13)-(line 1819,col 59)",
            "(line 1820,col 13)-(line 1820,col 51)",
            "(line 1821,col 13)-(line 1821,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressEs5StrictWarning()",
        "snippet": "  public void testSuppressEs5StrictWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n    testSame(options,\n        \"/** @suppress{es5Strict} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1834,
        "end_line": 1840,
        "comment": "",
        "child_ranges": [
            "(line 1835,col 5)-(line 1835,col 54)",
            "(line 1836,col 5)-(line 1836,col 77)",
            "(line 1837,col 5)-(line 1839,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesWarning()",
        "snippet": "  public void testCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    test(options,\n        \"/** @constructor */\\n\" +\n        \"function f() { var arguments; }\",\n        DiagnosticType.warning(\"JSC_MISSING_PROVIDE\", \"missing goog.provide(''{0}'')\"));\n  }\n",
        "begin_line": 1842,
        "end_line": 1850,
        "comment": "",
        "child_ranges": [
            "(line 1843,col 5)-(line 1843,col 54)",
            "(line 1844,col 5)-(line 1844,col 81)",
            "(line 1845,col 5)-(line 1845,col 49)",
            "(line 1846,col 5)-(line 1849,col 88)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCheckProvidesWarning()",
        "snippet": "  public void testSuppressCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    testSame(options,\n        \"/** @constructor\\n\" +\n        \" *  @suppress{checkProvides} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1852,
        "end_line": 1860,
        "comment": "",
        "child_ranges": [
            "(line 1853,col 5)-(line 1853,col 54)",
            "(line 1854,col 5)-(line 1854,col 81)",
            "(line 1855,col 5)-(line 1855,col 49)",
            "(line 1856,col 5)-(line 1859,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespace()",
        "snippet": "  public void testRenamePrefixNamespace() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x$FOO = 5; _.x$bar = 3;\");\n  }\n",
        "begin_line": 1862,
        "end_line": 1872,
        "comment": "",
        "child_ranges": [
            "(line 1863,col 5)-(line 1864,col 44)",
            "(line 1866,col 5)-(line 1866,col 54)",
            "(line 1867,col 5)-(line 1867,col 28)",
            "(line 1869,col 5)-(line 1869,col 38)",
            "(line 1870,col 5)-(line 1870,col 40)",
            "(line 1871,col 5)-(line 1871,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceActivatesMoveFunctionDeclarations()",
        "snippet": "  public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f; function f() { return 3; }\";\n    testSame(options, code);\n    assertFalse(options.moveFunctionDeclarations);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.f = function() { return 3; }; _.x = _.f;\");\n  }\n",
        "begin_line": 1874,
        "end_line": 1881,
        "comment": "",
        "child_ranges": [
            "(line 1875,col 5)-(line 1875,col 54)",
            "(line 1876,col 5)-(line 1876,col 58)",
            "(line 1877,col 5)-(line 1877,col 28)",
            "(line 1878,col 5)-(line 1878,col 50)",
            "(line 1879,col 5)-(line 1879,col 40)",
            "(line 1880,col 5)-(line 1880,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBrokenNameSpace()",
        "snippet": "  public void testBrokenNameSpace() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var goog; goog.provide('i.am.on.a.Horse');\" +\n                  \"i.am.on.a.Horse = function() {};\" +\n                  \"i.am.on.a.Horse.prototype.x = function() {};\" +\n                  \"i.am.on.a.Boat.prototype.y = function() {}\";\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1883,
        "end_line": 1893,
        "comment": "",
        "child_ranges": [
            "(line 1884,col 5)-(line 1884,col 54)",
            "(line 1885,col 5)-(line 1888,col 63)",
            "(line 1889,col 5)-(line 1889,col 31)",
            "(line 1890,col 5)-(line 1890,col 38)",
            "(line 1891,col 5)-(line 1891,col 36)",
            "(line 1892,col 5)-(line 1892,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNamelessParameter()",
        "snippet": "  public void testNamelessParameter() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"var impl_0;\" +\n        \"$load($init());\" +\n        \"function $load(){\" +\n        \"  window['f'] = impl_0;\" +\n        \"}\" +\n        \"function $init() {\" +\n        \"  impl_0 = {};\" +\n        \"}\";\n    String result =\n        \"window.f = {};\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1895,
        "end_line": 1911,
        "comment": "",
        "child_ranges": [
            "(line 1896,col 5)-(line 1896,col 54)",
            "(line 1897,col 5)-(line 1898,col 48)",
            "(line 1899,col 5)-(line 1907,col 12)",
            "(line 1908,col 5)-(line 1909,col 25)",
            "(line 1910,col 5)-(line 1910,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setAliasExternals(true);\n    String code =\n        \"window.offsetWidth;\";\n    String result =\n        \"window.offsetWidth;\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1913,
        "end_line": 1923,
        "comment": "",
        "child_ranges": [
            "(line 1914,col 5)-(line 1914,col 54)",
            "(line 1915,col 5)-(line 1916,col 48)",
            "(line 1917,col 5)-(line 1917,col 36)",
            "(line 1918,col 5)-(line 1919,col 30)",
            "(line 1920,col 5)-(line 1921,col 30)",
            "(line 1922,col 5)-(line 1922,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNegativeZero()",
        "snippet": "  public void testNegativeZero() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function bar(x) { return x; }\\n\" +\n        \"function foo(x) { print(x / bar(0));\\n\" +\n        \"                 print(x / bar(-0)); }\\n\" +\n        \"foo(3);\",\n        \"print(3/0);print(3/-0);\");\n  }\n",
        "begin_line": 1925,
        "end_line": 1935,
        "comment": "",
        "child_ranges": [
            "(line 1926,col 5)-(line 1926,col 54)",
            "(line 1927,col 5)-(line 1928,col 48)",
            "(line 1929,col 5)-(line 1934,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction()",
        "snippet": "  public void testIncompleteFunction() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"var foo = {bar: function(e) }\" },\n        new String[] { \"var foo = {bar: function(e){}};\" },\n        warnings\n    );\n  }\n",
        "begin_line": 1937,
        "end_line": 1950,
        "comment": "",
        "child_ranges": [
            "(line 1938,col 5)-(line 1938,col 54)",
            "(line 1939,col 5)-(line 1939,col 27)",
            "(line 1940,col 5)-(line 1944,col 40)",
            "(line 1945,col 5)-(line 1949,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  private void testSame(CompilerOptions options, String original) {\n    testSame(options, new String[] { original });\n  }\n",
        "begin_line": 1952,
        "end_line": 1954,
        "comment": "",
        "child_ranges": [
            "(line 1953,col 5)-(line 1953,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  private void testSame(CompilerOptions options, String[] original) {\n    test(options, original, original);\n  }\n",
        "begin_line": 1956,
        "end_line": 1958,
        "comment": "",
        "child_ranges": [
            "(line 1957,col 5)-(line 1957,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, String compiled) {\n    test(options, new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 1964,
        "end_line": 1967,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1966,col 5)-(line 1966,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled) {\n    Compiler compiler = compile(options, original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    Node expectedRoot = parse(compiled, options);\n    String explanation = expectedRoot.checkTreeEquals(root);\n    assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n        \"\\nResult: \" + compiler.toSource(root) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 1973,
        "end_line": 1987,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1975,col 5)-(line 1975,col 51)",
            "(line 1976,col 5)-(line 1979,col 72)",
            "(line 1981,col 5)-(line 1981,col 50)",
            "(line 1982,col 5)-(line 1982,col 49)",
            "(line 1983,col 5)-(line 1983,col 60)",
            "(line 1984,col 5)-(line 1986,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, DiagnosticType warning) {\n    test(options, new String[] { original }, warning);\n  }\n",
        "begin_line": 1993,
        "end_line": 1996,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1995,col 5)-(line 1995,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, String compiled, DiagnosticType warning) {\n    test(options, new String[] { original }, new String[] { compiled },\n         warning);\n  }\n",
        "begin_line": 1998,
        "end_line": 2002,
        "comment": "",
        "child_ranges": [
            "(line 2000,col 5)-(line 2001,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, DiagnosticType warning) {\n    test(options, original, null, warning);\n  }\n",
        "begin_line": 2004,
        "end_line": 2007,
        "comment": "",
        "child_ranges": [
            "(line 2006,col 5)-(line 2006,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType warning) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\"Expected exactly one warning or error\",\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 2013,
        "end_line": 2033,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 2015,col 5)-(line 2015,col 51)",
            "(line 2016,col 5)-(line 2016,col 49)",
            "(line 2017,col 5)-(line 2018,col 72)",
            "(line 2019,col 5)-(line 2023,col 5)",
            "(line 2025,col 5)-(line 2032,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType[])",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType[] warnings) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, warnings.length);\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 2039,
        "end_line": 2052,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 2041,col 5)-(line 2041,col 51)",
            "(line 2042,col 5)-(line 2042,col 63)",
            "(line 2044,col 5)-(line 2051,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  private void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \"+ msg,\n        expected, actual);\n    }\n  }\n",
        "begin_line": 2054,
        "end_line": 2068,
        "comment": "",
        "child_ranges": [
            "(line 2056,col 5)-(line 2056,col 77)",
            "(line 2057,col 5)-(line 2067,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  private Compiler compile(CompilerOptions options, String original) {\n    return compile(options, new String[] { original });\n  }\n",
        "begin_line": 2070,
        "end_line": 2072,
        "comment": "",
        "child_ranges": [
            "(line 2071,col 5)-(line 2071,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  private Compiler compile(CompilerOptions options, String[] original) {\n    Compiler compiler = lastCompiler = new Compiler();\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < original.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    compiler.compile(\n        externs, CompilerTestCase.createModuleChain(original), options);\n    return compiler;\n  }\n",
        "begin_line": 2074,
        "end_line": 2083,
        "comment": "",
        "child_ranges": [
            "(line 2075,col 5)-(line 2075,col 54)",
            "(line 2076,col 5)-(line 2076,col 62)",
            "(line 2077,col 5)-(line 2079,col 5)",
            "(line 2080,col 5)-(line 2081,col 72)",
            "(line 2082,col 5)-(line 2082,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.parse(java.lang.String[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private Node parse(String[] original, CompilerOptions options) {\n    Compiler compiler = new Compiler();\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < inputs.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    compiler.init(externs, inputs, options);\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node all = compiler.parseInputs();\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node n = all.getLastChild();\n    Node externs = all.getFirstChild();\n\n    (new CreateSyntheticBlocks(\n        compiler, \"synStart\", \"synEnd\")).process(externs, n);\n    (new Normalize(compiler, false)).process(externs, n);\n    (MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(\n        externs, n);\n    (new Denormalize(compiler)).process(externs, n);\n    return n;\n  }\n",
        "begin_line": 2085,
        "end_line": 2105,
        "comment": "",
        "child_ranges": [
            "(line 2086,col 5)-(line 2086,col 39)",
            "(line 2087,col 5)-(line 2087,col 62)",
            "(line 2088,col 5)-(line 2090,col 5)",
            "(line 2091,col 5)-(line 2091,col 44)",
            "(line 2092,col 5)-(line 2092,col 49)",
            "(line 2093,col 5)-(line 2093,col 38)",
            "(line 2094,col 5)-(line 2094,col 49)",
            "(line 2095,col 5)-(line 2095,col 32)",
            "(line 2096,col 5)-(line 2096,col 39)",
            "(line 2098,col 5)-(line 2099,col 61)",
            "(line 2100,col 5)-(line 2100,col 57)",
            "(line 2101,col 5)-(line 2102,col 20)",
            "(line 2103,col 5)-(line 2103,col 52)",
            "(line 2104,col 5)-(line 2104,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.createCompilerOptions()",
        "snippet": "  private CompilerOptions createCompilerOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    return options;\n  }\n",
        "begin_line": 2108,
        "end_line": 2112,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": [
            "(line 2109,col 5)-(line 2109,col 52)",
            "(line 2110,col 5)-(line 2110,col 62)",
            "(line 2111,col 5)-(line 2111,col 19)"
        ]
    }
]