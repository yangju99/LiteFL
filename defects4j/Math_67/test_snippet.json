[
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testSinMin()",
        "snippet": "    @Test\n    public void testSinMin() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);\n            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n        assertTrue(minimizer.getEvaluations() > 2900);\n        assertTrue(minimizer.getEvaluations() < 3100);\n    }\n",
        "begin_line": 34,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 53)",
            "(line 37,col 9)-(line 37,col 66)",
            "(line 38,col 9)-(line 38,col 56)",
            "(line 39,col 9)-(line 39,col 32)",
            "(line 40,col 9)-(line 41,col 69)",
            "(line 42,col 9)-(line 42,col 64)",
            "(line 43,col 9)-(line 43,col 48)",
            "(line 44,col 9)-(line 44,col 60)",
            "(line 45,col 9)-(line 50,col 9)",
            "(line 51,col 9)-(line 51,col 54)",
            "(line 52,col 9)-(line 52,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin()",
        "snippet": "    @Test\n    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\n        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n\n        assertTrue(minimizer.getEvaluations()    >= 510);\n        assertTrue(minimizer.getEvaluations()    <= 530);\n        assertTrue(minimizer.getIterationCount() >= 150);\n        assertTrue(minimizer.getIterationCount() <= 170);\n\n    }\n",
        "begin_line": 55,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 66)",
            "(line 61,col 9)-(line 61,col 56)",
            "(line 62,col 9)-(line 62,col 31)",
            "(line 63,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 76)",
            "(line 66,col 9)-(line 66,col 76)",
            "(line 68,col 9)-(line 75,col 9)",
            "(line 76,col 9)-(line 83,col 9)",
            "(line 85,col 9)-(line 85,col 103)",
            "(line 86,col 9)-(line 86,col 72)",
            "(line 87,col 9)-(line 87,col 79)",
            "(line 89,col 9)-(line 89,col 48)",
            "(line 90,col 9)-(line 90,col 60)",
            "(line 91,col 9)-(line 93,col 9)",
            "(line 95,col 9)-(line 95,col 57)",
            "(line 96,col 9)-(line 96,col 57)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 57)"
        ]
    }
]