[
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    assumeStrictThis = false;\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 18)",
            "(line 46,col 5)-(line 46,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.getInjector()",
        "snippet": "  private FunctionInjector getInjector() {\n    Compiler compiler = new Compiler();\n    return new FunctionInjector(\n        compiler, compiler.getUniqueNameIdSupplier(), true,\n        assumeStrictThis, assumeMinimumCapture);\n  }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 39)",
            "(line 51,col 5)-(line 53,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction1()",
        "snippet": "  public void testIsSimpleFunction1() {\n    assertTrue(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){}\")));\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 58,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction2()",
        "snippet": "  public void testIsSimpleFunction2() {\n    assertTrue(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){return 0;}\")));\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 63,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction3()",
        "snippet": "  public void testIsSimpleFunction3() {\n    assertTrue(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){return x ? 0 : 1}\")));\n  }\n",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 68,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction4()",
        "snippet": "  public void testIsSimpleFunction4() {\n    assertFalse(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){return;}\")));\n  }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 73,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction5()",
        "snippet": "  public void testIsSimpleFunction5() {\n    assertFalse(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){return 0; return 0;}\")));\n  }\n",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 78,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction6()",
        "snippet": "  public void testIsSimpleFunction6() {\n    assertFalse(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){var x=true;return x ? 0 : 1}\")));\n  }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 83,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIsSimpleFunction7()",
        "snippet": "  public void testIsSimpleFunction7() {\n    assertFalse(getInjector().isDirectCallNodeReplacementPossible(\n        prep(\"function f(){if (x) return 0; else return 1}\")));\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 88,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction1()",
        "snippet": "  public void testCanInlineReferenceToFunction1() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){}; foo();\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 93,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction2()",
        "snippet": "  public void testCanInlineReferenceToFunction2() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){}; foo();\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 98,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction3()",
        "snippet": "  public void testCanInlineReferenceToFunction3() {\n    // NOTE: FoldConstants will convert this to a empty function,\n    // so there is no need to explicitly support it.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return;}; foo();\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 105,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction4()",
        "snippet": "  public void testCanInlineReferenceToFunction4() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return;}; foo();\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 110,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction5()",
        "snippet": "  public void testCanInlineReferenceToFunction5() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; foo();\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 115,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction6()",
        "snippet": "  public void testCanInlineReferenceToFunction6() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; foo();\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 120,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction7()",
        "snippet": "  public void testCanInlineReferenceToFunction7() {\n    // In var initialization.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; var x=foo();\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 123,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 126,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction8()",
        "snippet": "  public void testCanInlineReferenceToFunction8() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; var x=foo();\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 131,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction9()",
        "snippet": "  public void testCanInlineReferenceToFunction9() {\n    // In assignment.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; var x; x=foo();\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 134,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 137,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction10()",
        "snippet": "  public void testCanInlineReferenceToFunction10() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; var x; x=foo();\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 142,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction11()",
        "snippet": "  public void testCanInlineReferenceToFunction11() {\n    // In expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; var x; x=x+foo();\", \"foo\",\n        INLINE_DIRECT);\n  }\n",
        "begin_line": 145,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 149,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction12()",
        "snippet": "  public void testCanInlineReferenceToFunction12() {\n    // \"foo\" is not known to be side-effect free, it might change the value\n    // of \"x\", so it can't be inlined.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return true;}; var x; x=x+foo();\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 152,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 156,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction12b()",
        "snippet": "  public void testCanInlineReferenceToFunction12b() {\n    // \"foo\" is not known to be side-effect free, it might change the value\n    // of \"x\", so it can't be inlined.\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(){return true;}; var x; x=x+foo();\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 165,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction14()",
        "snippet": "  public void testCanInlineReferenceToFunction14() {\n    // Simple call with parameters\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; foo(x);\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 179,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction15()",
        "snippet": "  public void testCanInlineReferenceToFunction15() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; foo(x);\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 184,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction16()",
        "snippet": "  public void testCanInlineReferenceToFunction16() {\n    // Function \"foo\" as it contains \"var b\" which\n    // must be brought into the global scope.\n    helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE,\n        \"function foo(a){var b;return a;}; foo(goo());\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 192,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 196,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction17()",
        "snippet": "  public void testCanInlineReferenceToFunction17() {\n    // This doesn't bring names into the global name space.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 199,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 204,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction18()",
        "snippet": "  public void testCanInlineReferenceToFunction18() {\n    // Parameter has side-effects.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return a;} foo(x++);\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 207,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 210,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction19()",
        "snippet": "  public void testCanInlineReferenceToFunction19() {\n    // Parameter has mutable parameter referenced more than once.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return a+a} foo([]);\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 213,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 216,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction20()",
        "snippet": "  public void testCanInlineReferenceToFunction20() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return a+a} foo({});\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 221,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction21()",
        "snippet": "  public void testCanInlineReferenceToFunction21() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return a+a} foo(new Date);\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 224,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 226,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction22()",
        "snippet": "  public void testCanInlineReferenceToFunction22() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return a+a} foo(true && new Date);\", \"foo\",\n        INLINE_DIRECT);\n  }\n",
        "begin_line": 229,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 232,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction23()",
        "snippet": "  public void testCanInlineReferenceToFunction23() {\n    // variables to global scope.\n    helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE,\n        \"function foo(a){return a;}; foo(x++);\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 235,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 238,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction24()",
        "snippet": "  public void testCanInlineReferenceToFunction24() {\n    // ... this is OK, because it doesn't introduce a new global name.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 241,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 246,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction25()",
        "snippet": "  public void testCanInlineReferenceToFunction25() {\n    // Parameter has side-effects.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return a+a;}; foo(x++);\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 249,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 252,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction26()",
        "snippet": "  public void testCanInlineReferenceToFunction26() {\n    helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE,\n        \"function foo(a){return a+a;}; foo(x++);\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 255,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 257,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction27()",
        "snippet": "  public void testCanInlineReferenceToFunction27() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return a+a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 260,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 264,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction28()",
        "snippet": "  public void testCanInlineReferenceToFunction28() {\n    // Parameter has side-effects.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; foo(goo());\", \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 267,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 270,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction29()",
        "snippet": "  public void testCanInlineReferenceToFunction29() {\n    helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE,\n        \"function foo(a){return true;}; foo(goo());\", \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 275,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction30()",
        "snippet": "  public void testCanInlineReferenceToFunction30() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo(goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 278,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 282,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction31()",
        "snippet": "  public void testCanInlineReferenceToFunction31() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a) {return true;}; \" +\n        \"function x() {foo.call(this, 1);}\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 285,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 289,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction32()",
        "snippet": "  public void testCanInlineReferenceToFunction32() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.apply(this, [1]); }\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 292,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 296,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction33()",
        "snippet": "  public void testCanInlineReferenceToFunction33() {\n    // No special handling is required for method calls passing this.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.bar(this, 1); }\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 299,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 301,col 5)-(line 304,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction34()",
        "snippet": "  public void testCanInlineReferenceToFunction34() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(this, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 307,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 308,col 5)-(line 311,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction35()",
        "snippet": "  public void testCanInlineReferenceToFunction35() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.apply(this, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 314,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 318,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction36()",
        "snippet": "  public void testCanInlineReferenceToFunction36() {\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.bar(this, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 321,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 325,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction37()",
        "snippet": "  public void testCanInlineReferenceToFunction37() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(null, 1); }\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 328,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 332,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction38()",
        "snippet": "  public void testCanInlineReferenceToFunction38() {\n    assumeStrictThis = false;\n\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(null, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n\n    assumeStrictThis = true;\n\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(null, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 335,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 336,col 5)-(line 336,col 29)",
            "(line 338,col 5)-(line 341,col 29)",
            "(line 343,col 5)-(line 343,col 28)",
            "(line 345,col 5)-(line 348,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction39()",
        "snippet": "  public void testCanInlineReferenceToFunction39() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(bar, 1); }\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 351,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 355,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction40()",
        "snippet": "  public void testCanInlineReferenceToFunction40() {\n    assumeStrictThis = false;\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(bar, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n\n    assumeStrictThis = true;\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(bar, goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 358,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 359,col 29)",
            "(line 360,col 5)-(line 363,col 29)",
            "(line 365,col 5)-(line 365,col 28)",
            "(line 366,col 5)-(line 369,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction41()",
        "snippet": "  public void testCanInlineReferenceToFunction41() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(new bar(), 1); }\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 372,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 376,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction42()",
        "snippet": "  public void testCanInlineReferenceToFunction42() {\n    assumeStrictThis = false;\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(new bar(), goo()); }\",\n        \"foo\", INLINE_BLOCK);\n\n    assumeStrictThis = true;\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(a){return true;}; \" +\n        \"function x() { foo.call(new bar(), goo()); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 379,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 380,col 5)-(line 380,col 29)",
            "(line 381,col 5)-(line 384,col 29)",
            "(line 386,col 5)-(line 386,col 28)",
            "(line 387,col 5)-(line 390,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction43()",
        "snippet": "  public void testCanInlineReferenceToFunction43() {\n    // Handle the case of a missing 'this' value in a call.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return true;}; \" +\n        \"function x() { foo.call(); }\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 393,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 395,col 5)-(line 398,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction44()",
        "snippet": "  public void testCanInlineReferenceToFunction44() {\n    assumeStrictThis = false;\n    // Handle the case of a missing 'this' value in a call.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return true;}; \" +\n        \"function x() { foo.call(); }\",\n        \"foo\", INLINE_BLOCK);\n\n    assumeStrictThis = true;\n    // Handle the case of a missing 'this' value in a call.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return true;}; \" +\n        \"function x() { foo.call(); }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 401,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 29)",
            "(line 404,col 5)-(line 407,col 29)",
            "(line 409,col 5)-(line 409,col 28)",
            "(line 411,col 5)-(line 414,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction45()",
        "snippet": "  public void testCanInlineReferenceToFunction45() {\n    // Call with inner function expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return function() {return true;}}; foo();\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 417,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 421,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction46()",
        "snippet": "  public void testCanInlineReferenceToFunction46() {\n    // Call with inner function expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return function() {return true;}}; foo();\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 424,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 428,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction47()",
        "snippet": "  public void testCanInlineReferenceToFunction47() {\n    // Call with inner function expression and variable decl.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){var a; return function() {return true;}}; foo();\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 431,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 435,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction48()",
        "snippet": "  public void testCanInlineReferenceToFunction48() {\n    // Call with inner function expression and variable decl.\n    // TODO(johnlenz): should we validate no values in scope?\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){var a; return function() {return true;}}; foo();\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 438,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 441,col 5)-(line 443,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction49()",
        "snippet": "  public void testCanInlineReferenceToFunction49() {\n    // Call with inner function expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return function() {var a; return true;}}; foo();\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 446,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 450,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction50()",
        "snippet": "  public void testCanInlineReferenceToFunction50() {\n    // Call with inner function expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){return function() {var a; return true;}}; foo();\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 453,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 455,col 5)-(line 457,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunction51()",
        "snippet": "  public void testCanInlineReferenceToFunction51() {\n    // Call with inner function statement.\n    helperCanInlineReferenceToFunction(CanInlineResult.YES,\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 460,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 464,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression1()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression1() {\n    // Call in if condition\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() { if (foo(1)) throw 'test'; }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 467,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 472,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression2()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression2() {\n    // Call in return expression\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() { return foo(1); }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 475,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 480,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression3()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression3() {\n    // Call in switch expression\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() { switch(foo(1)) { default:break; } }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 483,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 488,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression4()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression4() {\n    // Call in hook condition\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {foo(1)?0:1 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 491,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 496,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression5()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression5() {\n    // Call in hook side-effect free condition\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() {true?foo(1):1 }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 499,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 501,col 5)-(line 504,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression5a()",
        "snippet": " public void testCanInlineReferenceToFunctionInExpression5a() {\n    // Call in hook side-effect free condition\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {true?foo(1):1 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 507,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 513,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression6()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression6() {\n    // Call in expression statement \"condition\"\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {foo(1) && 1 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 516,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 518,col 5)-(line 521,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression7()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression7() {\n    // Call in expression statement after side-effect free \"condition\"\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() {1 && foo(1) }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 524,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 529,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression7a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression7a() {\n    // Call in expression statement after side-effect free \"condition\"\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {1 && foo(1) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 532,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 534,col 5)-(line 538,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression8()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression8() {\n    // Call in expression statement after side-effect free operator\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {1 + foo(1) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 541,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 543,col 5)-(line 546,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression9()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression9() {\n    // Call in VAR expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {var b = 1 + foo(1)}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 549,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 551,col 5)-(line 554,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression10()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression10() {\n    // Call in assignment expression.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return true;}; \" +\n        \"function x() {var b; b += 1 + foo(1) }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 557,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 562,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression10a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression10a() {\n    // Call in assignment expression.\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {var b; b += 1 + foo(1) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 565,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 567,col 5)-(line 571,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression12()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression12() {\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {var a,b,c; a = b = c = foo(1) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 582,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 586,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression13()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression13() {\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(a){return true;}; \" +\n        \"function x() {var a,b,c; a = b = c = 1 + foo(1) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 589,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 593,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression14()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression14() {\n    // ... foo can not be inlined because of possible changes to \"c\".\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"var a = {}, b = {}, c;\" +\n        \"a.test = 'a';\" +\n        \"b.test = 'b';\" +\n        \"c = a;\" +\n        \"function foo(){c = b; return 'foo'};\" +\n        \"c.test=foo();\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 596,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 598,col 5)-(line 605,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression14a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression14a() {\n    // ... foo can be inlined despite possible changes to \"c\".\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"var a = {}, b = {}, c;\" +\n        \"a.test = 'a';\" +\n        \"b.test = 'b';\" +\n        \"c = a;\" +\n        \"function foo(){c = b; return 'foo'};\" +\n        \"c.test=foo();\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 608,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 618,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression18()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression18() {\n    // Call in within a call\n    helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION,\n        \"function foo(){return _g();}; \" +\n        \"function x() {1 + foo()() }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 660,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 662,col 5)-(line 665,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression19()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression19() {\n    // ... unless foo is known to be side-effect free, it might actually\n    // change the value of \"_g\" which would unfortunately change the behavior,\n    // so we can't inline here.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return a;}; \" +\n        \"function x() {1 + _g(foo()) }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 668,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 675,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression19a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression19a() {\n    // ... unless foo is known to be side-effect free, it might actually\n    // change the value of \"_g\" which would unfortunately change the behavior,\n    // so we can't inline here.\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(){return a;}; \" +\n        \"function x() {1 + _g(foo()) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 678,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 686,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression21()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression21() {\n    // Assignments to object are problematic if the call has side-effects,\n    // as the object that is being referred to can change.\n    // Note: This could be changed be inlined if we in some way make \"z\"\n    // as not escaping from the local scope.\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() { z.gack = foo(1) }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 697,
        "end_line": 707,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 706,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression21a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression21a() {\n    // Assignments to object are problematic if the call has side-effects,\n    // as the object that is being referred to can change.\n    // Note: This could be changed be inlined if we in some way make \"z\"\n    // as not escaping from the local scope.\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() { z.gack = foo(1) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 709,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 714,col 5)-(line 719,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression22()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression22() {\n    // ... foo() is after a side-effect\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return a;}; \" +\n        \"function x() {1 + _g(_a(), foo()) }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 722,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 724,col 5)-(line 727,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression22a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression22a() {\n    // ... foo() is after a side-effect\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(){return a;}; \" +\n        \"function x() {1 + _g(_a(), foo()) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 730,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 732,col 5)-(line 736,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression23()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression23() {\n    // ... foo() is after a side-effect\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(){return a;}; \" +\n        \"function x() {1 + _g(_a(), foo.call(this)) }\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 739,
        "end_line": 745,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 744,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInExpression23a()",
        "snippet": "  public void testCanInlineReferenceToFunctionInExpression23a() {\n    // ... foo() is after a side-effect\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.AFTER_PREPARATION,\n        \"function foo(){return a;}; \" +\n        \"function x() {1 + _g(_a(), foo.call(this)) }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 747,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 749,col 5)-(line 753,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInLoop1()",
        "snippet": "  public void testCanInlineReferenceToFunctionInLoop1() {\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.YES,\n        \"function foo(){return a;}; \" +\n        \"while(1) { foo(); }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 756,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 757,col 5)-(line 761,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testCanInlineReferenceToFunctionInLoop2()",
        "snippet": "  public void testCanInlineReferenceToFunctionInLoop2() {\n    // If function contains function, don't inline it into a loop.\n    // TODO(johnlenz): this can be improved by looking to see\n    // if the inner function contains any references to values defined\n    // in the outer function.\n    helperCanInlineReferenceToFunction(\n        CanInlineResult.NO,\n        \"function foo(){return function() {};}; \" +\n        \"while(1) { foo(); }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 764,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 769,col 5)-(line 773,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline1()",
        "snippet": "  public void testInline1() {\n    helperInlineReferenceToFunction(\n        \"function foo(){}; foo();\",\n        \"function foo(){}; void 0\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 776,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 777,col 5)-(line 780,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline2()",
        "snippet": "  public void testInline2() {\n    helperInlineReferenceToFunction(\n        \"function foo(){}; foo();\",\n        \"function foo(){}; {}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 783,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 784,col 5)-(line 787,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline3()",
        "snippet": "  public void testInline3() {\n    helperInlineReferenceToFunction(\n        \"function foo(){return;}; foo();\",\n        \"function foo(){return;}; {}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 790,
        "end_line": 795,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 794,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline4()",
        "snippet": "  public void testInline4() {\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; foo();\",\n        \"function foo(){return true;}; true;\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 797,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 798,col 5)-(line 801,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline5()",
        "snippet": "  public void testInline5() {\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; foo();\",\n        \"function foo(){return true;}; {true;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 804,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 805,col 5)-(line 808,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline6()",
        "snippet": "  public void testInline6() {\n    // In var initialization.\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; var x=foo();\",\n        \"function foo(){return true;}; var x=true;\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 811,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 813,col 5)-(line 816,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline7()",
        "snippet": "  public void testInline7() {\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; var x=foo();\",\n        \"function foo(){return true;}; var x;\" +\n            \"{x=true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 819,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 824,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline8()",
        "snippet": "  public void testInline8() {\n    // In assignment.\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; var x; x=foo();\",\n        \"function foo(){return true;}; var x; x=true;\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 827,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 829,col 5)-(line 832,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline9()",
        "snippet": "  public void testInline9() {\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; var x; x=foo();\",\n        \"function foo(){return true;}; var x;{x=true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 835,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 836,col 5)-(line 839,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline10()",
        "snippet": "  public void testInline10() {\n    // In expression.\n    helperInlineReferenceToFunction(\n        \"function foo(){return true;}; var x; x=x+foo();\",\n        \"function foo(){return true;}; var x; x=x+true;\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 842,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 847,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline11()",
        "snippet": "  public void testInline11() {\n    // Simple call with parameters\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(x);\",\n        \"function foo(a){return true;}; true;\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 850,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 852,col 5)-(line 855,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline12()",
        "snippet": "  public void testInline12() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(x);\",\n        \"function foo(a){return true;}; {true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 858,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 859,col 5)-(line 862,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline13()",
        "snippet": "  public void testInline13() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"function foo(a){return a;}; \" +\n        \"function x() {{var a$$inline_0=x++;\" +\n            \"a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 865,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 867,col 5)-(line 873,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline14()",
        "snippet": "  public void testInline14() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=x++;\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 876,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 878,col 5)-(line 884,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline15()",
        "snippet": "  public void testInline15() {\n    // Parameter has mutable, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(new Date());\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=new Date();\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 887,
        "end_line": 896,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 895,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline16()",
        "snippet": "  public void testInline16() {\n    // Parameter is large, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(function(){});\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=function(){};\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 898,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 900,col 5)-(line 906,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline17()",
        "snippet": "  public void testInline17() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(goo());\",\n        \"function foo(a){return true;};\" +\n            \"{var a$$inline_0=goo();true}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 909,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 911,col 5)-(line 915,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline18()",
        "snippet": "  public void testInline18() {\n    // This doesn't bring names into the global name space.\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n            \"function x() { foo(goo()); }\",\n            \"function foo(a){var b;return a;}; \" +\n            \"function x() {{var a$$inline_0=goo();\" +\n                \"var b$$inline_1;a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 918,
        "end_line": 927,
        "comment": "",
        "child_ranges": [
            "(line 920,col 5)-(line 926,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline19()",
        "snippet": "  public void testInline19() {\n    // Properly alias.\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() {\" +\n           \"{var a$$inline_0=x;\" +\n            \"x = y;\" +\n            \"y = a$$inline_0;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 929,
        "end_line": 943,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 942,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInline19b()",
        "snippet": "  public void testInline19b() {\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() {\" +\n           \"{var b$$inline_1=y;\" +\n            \"y = x;\" +\n            \"x = b$$inline_1;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 945,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 946,col 5)-(line 957,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineIntoLoop()",
        "snippet": "  public void testInlineIntoLoop() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ {\" +\n            \"var b$$inline_1=void 0;1}}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ foo(1); } while(1)\",\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ {\" +\n            \"var b$$inline_1=void 0;1}}while(1)\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){for(var b in c)return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;for(b in c)return a;}; \" +\n        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n              \"1;break JSCompiler_inline_label_foo_2\" +\n            \"}}}}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 960,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 961,col 5)-(line 967,col 29)",
            "(line 969,col 5)-(line 975,col 29)",
            "(line 977,col 5)-(line 985,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction1()",
        "snippet": "  public void testInlineFunctionWithInnerFunction1() {\n    // Call with inner function expression.\n    helperInlineReferenceToFunction(\n        \"function foo(){return function() {return true;}}; foo();\",\n        \"function foo(){return function() {return true;}};\" +\n            \"(function() {return true;})\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 988,
        "end_line": 995,
        "comment": "",
        "child_ranges": [
            "(line 990,col 5)-(line 994,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction2()",
        "snippet": "  public void testInlineFunctionWithInnerFunction2() {\n    // Call with inner function expression.\n    helperInlineReferenceToFunction(\n        \"function foo(){return function() {return true;}}; foo();\",\n        \"function foo(){return function() {return true;}};\" +\n            \"{(function() {return true;})}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 997,
        "end_line": 1004,
        "comment": "",
        "child_ranges": [
            "(line 999,col 5)-(line 1003,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction3()",
        "snippet": "  public void testInlineFunctionWithInnerFunction3() {\n    // Call with inner function expression.\n    helperInlineReferenceToFunction(\n        \"function foo(){return function() {var a; return true;}}; foo();\",\n        \"function foo(){return function() {var a; return true;}};\" +\n            \"(function() {var a; return true;});\",\n        \"foo\", INLINE_DIRECT);\n  }\n",
        "begin_line": 1006,
        "end_line": 1013,
        "comment": "",
        "child_ranges": [
            "(line 1008,col 5)-(line 1012,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction4()",
        "snippet": "  public void testInlineFunctionWithInnerFunction4() {\n    // Call with inner function expression.\n    helperInlineReferenceToFunction(\n        \"function foo(){return function() {var a; return true;}}; foo();\",\n        \"function foo(){return function() {var a; return true;}};\" +\n            \"{(function() {var a$$inline_0; return true;});}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 1015,
        "end_line": 1022,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1021,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction5()",
        "snippet": "  public void testInlineFunctionWithInnerFunction5() {\n    // Call with inner function statement.\n    helperInlineReferenceToFunction(\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"function foo(){function x(){var a;return true}return x};\" +\n            \"{var x$$inline_0 = function(){\" +\n            \"var a$$inline_1;return true};x$$inline_0}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 1024,
        "end_line": 1032,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 5)-(line 1031,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression1()",
        "snippet": "  public void testInlineReferenceInExpression1() {\n    // Call in if condition\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() { if (foo(1)) throw 'test'; }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"if (JSCompiler_inline_result$$0) throw 'test'; }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1034,
        "end_line": 1044,
        "comment": "",
        "child_ranges": [
            "(line 1036,col 5)-(line 1043,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression2()",
        "snippet": "  public void testInlineReferenceInExpression2() {\n    // Call in return expression\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() { return foo(1); }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"return JSCompiler_inline_result$$0; }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1046,
        "end_line": 1056,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 5)-(line 1055,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression3()",
        "snippet": "  public void testInlineReferenceInExpression3() {\n    // Call in switch expression\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() { switch(foo(1)) { default:break; } }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"switch(JSCompiler_inline_result$$0) { default:break; } }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1058,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1067,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression4()",
        "snippet": "  public void testInlineReferenceInExpression4() {\n    // Call in hook condition\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {foo(1)?0:1 }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"JSCompiler_inline_result$$0?0:1 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1070,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1079,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression5()",
        "snippet": "  public void testInlineReferenceInExpression5() {\n    // Call in expression statement \"condition\"\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {foo(1)&&1 }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"JSCompiler_inline_result$$0&&1 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1082,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1084,col 5)-(line 1091,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression6()",
        "snippet": "  public void testInlineReferenceInExpression6() {\n    // Call in expression statement after side-effect free \"condition\"\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {1 + foo(1) }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"1 + JSCompiler_inline_result$$0 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1094,
        "end_line": 1104,
        "comment": "",
        "child_ranges": [
            "(line 1096,col 5)-(line 1103,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression7()",
        "snippet": "  public void testInlineReferenceInExpression7() {\n    // Call in expression statement \"condition\"\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {foo(1) && 1 }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0; \" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"JSCompiler_inline_result$$0&&1 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1106,
        "end_line": 1116,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1115,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression8()",
        "snippet": "  public void testInlineReferenceInExpression8() {\n    // Call in expression statement after side-effect free operator\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {1 + foo(1) }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0;\" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"1 + JSCompiler_inline_result$$0 }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1118,
        "end_line": 1128,
        "comment": "",
        "child_ranges": [
            "(line 1120,col 5)-(line 1127,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression9()",
        "snippet": "  public void testInlineReferenceInExpression9() {\n    // Call in VAR expression.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {var b = 1 + foo(1)}\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { \" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"{JSCompiler_inline_result$$0=true;}\" +\n        \"var b = 1 + JSCompiler_inline_result$$0 \" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1130,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1132,col 5)-(line 1141,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression11()",
        "snippet": "  public void testInlineReferenceInExpression11() {\n    // Call under label\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() {a:foo(1)?0:1 }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() {\" +\n        \"  a:{\" +\n        \"    var JSCompiler_inline_result$$0; \" +\n        \"    {JSCompiler_inline_result$$0=true;}\" +\n        \"    JSCompiler_inline_result$$0?0:1 \" +\n        \"  }\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1158,
        "end_line": 1172,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 5)-(line 1171,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression12()",
        "snippet": "  public void testInlineReferenceInExpression12() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}\" +\n        \"function x() { 1?foo(1):1; }\",\n        \"function foo(a){return true}\" +\n        \"function x() {\" +\n        \"  if(1) {\" +\n        \"    {true;}\" +\n        \"  } else {\" +\n        \"    1;\" +\n        \"  }\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1174,
        "end_line": 1187,
        "comment": "",
        "child_ranges": [
            "(line 1175,col 5)-(line 1186,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression13()",
        "snippet": "  public void testInlineReferenceInExpression13() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; \" +\n        \"function x() { goo() + (1?foo(1):1) }\",\n        \"function foo(a){return true;}; \" +\n        \"function x() { var JSCompiler_temp_const$$0=goo();\" +\n            \"var JSCompiler_temp$$1;\" +\n            \"if(1) {\" +\n            \"  {JSCompiler_temp$$1=true;} \" +\n            \"} else {\" +\n            \"  JSCompiler_temp$$1=1;\" +\n            \"}\" +\n            \"JSCompiler_temp_const$$0 + JSCompiler_temp$$1\" +\n            \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1189,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1190,col 5)-(line 1203,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression14()",
        "snippet": "  public void testInlineReferenceInExpression14() {\n    helperInlineReferenceToFunction(\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() { z.gack = foo(1) }\",\n\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() {\" +\n            \"var JSCompiler_temp_const$$0=z;\" +\n            \"var JSCompiler_inline_result$$1;\" +\n            \"{\" +\n             \"z= {};\" +\n             \"JSCompiler_inline_result$$1 = true;\" +\n            \"}\" +\n            \"JSCompiler_temp_const$$0.gack = JSCompiler_inline_result$$1;\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1206,
        "end_line": 1224,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 5)-(line 1223,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression15()",
        "snippet": "  public void testInlineReferenceInExpression15() {\n    helperInlineReferenceToFunction(\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() { z.gack = foo.call(this,1) }\",\n\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() {\" +\n            \"var JSCompiler_temp_const$$0=z;\" +\n            \"var JSCompiler_inline_result$$1;\" +\n            \"{\" +\n             \"z= {};\" +\n             \"JSCompiler_inline_result$$1 = true;\" +\n            \"}\" +\n            \"JSCompiler_temp_const$$0.gack = JSCompiler_inline_result$$1;\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1226,
        "end_line": 1244,
        "comment": "",
        "child_ranges": [
            "(line 1227,col 5)-(line 1243,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression16()",
        "snippet": "  public void testInlineReferenceInExpression16() {\n    helperInlineReferenceToFunction(\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() { z[bar()] = foo(1) }\",\n\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() {\" +\n            \"var JSCompiler_temp_const$$1=z;\" +\n            \"var JSCompiler_temp_const$$0=bar();\" +\n            \"var JSCompiler_inline_result$$2;\" +\n            \"{\" +\n             \"z= {};\" +\n             \"JSCompiler_inline_result$$2 = true;\" +\n            \"}\" +\n            \"JSCompiler_temp_const$$1[JSCompiler_temp_const$$0] = \" +\n                \"JSCompiler_inline_result$$2;\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1246,
        "end_line": 1266,
        "comment": "",
        "child_ranges": [
            "(line 1247,col 5)-(line 1265,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression17()",
        "snippet": "  public void testInlineReferenceInExpression17() {\n    helperInlineReferenceToFunction(\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() { z.y.x.gack = foo(1) }\",\n\n        \"var z = {};\" +\n        \"function foo(a){z = {};return true;}; \" +\n        \"function x() {\" +\n            \"var JSCompiler_temp_const$$0=z.y.x;\" +\n            \"var JSCompiler_inline_result$$1;\" +\n            \"{\" +\n             \"z= {};\" +\n             \"JSCompiler_inline_result$$1 = true;\" +\n            \"}\" +\n            \"JSCompiler_temp_const$$0.gack = JSCompiler_inline_result$$1;\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1268,
        "end_line": 1286,
        "comment": "",
        "child_ranges": [
            "(line 1269,col 5)-(line 1285,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineWithinCalls1()",
        "snippet": "  public void testInlineWithinCalls1() {\n    // Call in within a call\n    helperInlineReferenceToFunction(\n        \"function foo(){return _g;}; \" +\n        \"function x() {1 + foo()() }\",\n        \"function foo(){return _g;}; \" +\n        \"function x() { var JSCompiler_inline_result$$0;\" +\n        \"{JSCompiler_inline_result$$0=_g;}\" +\n        \"1 + JSCompiler_inline_result$$0() }\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1289,
        "end_line": 1299,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 5)-(line 1298,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testInlineAssignmentToConstant()",
        "snippet": "  public void testInlineAssignmentToConstant() {\n    // Call in within a call\n    helperInlineReferenceToFunction(\n        \"function foo(){return _g;}; \" +\n        \"function x(){var CONSTANT_RESULT = foo(); }\",\n\n        \"function foo(){return _g;}; \" +\n        \"function x() {\" +\n        \"  var JSCompiler_inline_result$$0;\" +\n        \"  {JSCompiler_inline_result$$0=_g;}\" +\n        \"  var CONSTANT_RESULT = JSCompiler_inline_result$$0;\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK, true);\n  }\n",
        "begin_line": 1313,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1315,col 5)-(line 1325,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testBug1897706()",
        "snippet": "  public void testBug1897706() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){}; foo(x())\",\n        \"function foo(a){}; {var a$$inline_0=x()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){bar()}; foo(x())\",\n        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a,b){bar()}; foo(x(),y())\",\n        \"function foo(a,b){bar()};\" +\n        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n        \"foo\", INLINE_BLOCK);\n  }\n",
        "begin_line": 1328,
        "end_line": 1344,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1332,col 29)",
            "(line 1334,col 5)-(line 1337,col 29)",
            "(line 1339,col 5)-(line 1343,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIssue1101a()",
        "snippet": "  public void testIssue1101a() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return modifiyX() + a;} foo(x);\", \"foo\",\n        INLINE_DIRECT);\n  }\n",
        "begin_line": 1346,
        "end_line": 1350,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 5)-(line 1349,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.testIssue1101b()",
        "snippet": "  public void testIssue1101b() {\n    helperCanInlineReferenceToFunction(CanInlineResult.NO,\n        \"function foo(a){return (x.prop = 2),a;} foo(x.prop);\", \"foo\",\n        INLINE_DIRECT);\n  }\n",
        "begin_line": 1352,
        "end_line": 1356,
        "comment": "",
        "child_ranges": [
            "(line 1353,col 5)-(line 1355,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.helperCanInlineReferenceToFunction(com.google.javascript.jscomp.FunctionInjector.CanInlineResult, java.lang.String, java.lang.String, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "  public void helperCanInlineReferenceToFunction(\n      final CanInlineResult expectedResult,\n      final String code,\n      final String fnName,\n      final InliningMode mode) {\n    helperCanInlineReferenceToFunction(\n        expectedResult, code, fnName, mode, false);\n  }\n",
        "begin_line": 1370,
        "end_line": 1377,
        "comment": "",
        "child_ranges": [
            "(line 1375,col 5)-(line 1376,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.helperCanInlineReferenceToFunction(com.google.javascript.jscomp.FunctionInjector.CanInlineResult, java.lang.String, java.lang.String, com.google.javascript.jscomp.FunctionInjector.InliningMode, boolean)",
        "snippet": "  public void helperCanInlineReferenceToFunction(\n      final CanInlineResult expectedResult,\n      final String code,\n      final String fnName,\n      final InliningMode mode,\n      boolean allowDecomposition) {\n    final Compiler compiler = new Compiler();\n    final FunctionInjector injector = new FunctionInjector(\n        compiler, compiler.getUniqueNameIdSupplier(), allowDecomposition,\n        assumeStrictThis,\n        assumeMinimumCapture);\n    final Node tree = parse(compiler, code);\n\n    final Node fnNode = findFunction(tree, fnName);\n    final Set<String> unsafe =\n        FunctionArgumentInjector.findModifiedParameters(fnNode);\n\n    // can-inline tester\n    Method tester = new Method() {\n      @Override\n      public boolean call(NodeTraversal t, Node n, Node parent) {\n        CanInlineResult result = injector.canInlineReferenceToFunction(\n            t, n, fnNode, unsafe, mode,\n            NodeUtil.referencesThis(fnNode),\n            NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode)));\n        assertEquals(expectedResult, result);\n        return true;\n      }\n    };\n\n    compiler.resetUniqueNameId();\n    TestCallback test = new TestCallback(fnName, tester);\n    NodeTraversal.traverse(compiler, tree, test);\n  }\n",
        "begin_line": 1379,
        "end_line": 1412,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 5)-(line 1385,col 45)",
            "(line 1386,col 5)-(line 1389,col 30)",
            "(line 1390,col 5)-(line 1390,col 44)",
            "(line 1392,col 5)-(line 1392,col 51)",
            "(line 1393,col 5)-(line 1394,col 64)",
            "(line 1397,col 5)-(line 1407,col 6)",
            "(line 1409,col 5)-(line 1409,col 33)",
            "(line 1410,col 5)-(line 1410,col 57)",
            "(line 1411,col 5)-(line 1411,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.Anonymous-7ac44961-7d03-476b-a821-6f05e189b2a1.call(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public boolean call(NodeTraversal t, Node n, Node parent) {\n        CanInlineResult result = injector.canInlineReferenceToFunction(\n            t, n, fnNode, unsafe, mode,\n            NodeUtil.referencesThis(fnNode),\n            NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode)));\n        assertEquals(expectedResult, result);\n        return true;\n      }\n",
        "begin_line": 1398,
        "end_line": 1406,
        "comment": "",
        "child_ranges": [
            "(line 1400,col 9)-(line 1403,col 73)",
            "(line 1404,col 9)-(line 1404,col 45)",
            "(line 1405,col 9)-(line 1405,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "  public void helperInlineReferenceToFunction(\n      String code, final String expectedResult,\n      final String fnName, final InliningMode mode) {\n    helperInlineReferenceToFunction(\n        code, expectedResult, fnName, mode, false);\n  }\n",
        "begin_line": 1414,
        "end_line": 1419,
        "comment": "",
        "child_ranges": [
            "(line 1417,col 5)-(line 1418,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.validateSourceInfo(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node)",
        "snippet": "  private void validateSourceInfo(Compiler compiler, Node subtree) {\n    (new LineNumberCheck(compiler)).setCheckSubTree(subtree);\n    // Source information problems are reported as compiler errors.\n    if (compiler.getErrorCount() != 0) {\n      String msg = \"Error encountered: \";\n      for (JSError err : compiler.getErrors()) {\n        msg += err.toString() + \"\\n\";\n      }\n      assertTrue(msg, compiler.getErrorCount() == 0);\n    }\n  }\n",
        "begin_line": 1421,
        "end_line": 1431,
        "comment": "",
        "child_ranges": [
            "(line 1422,col 5)-(line 1422,col 61)",
            "(line 1424,col 5)-(line 1430,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.FunctionInjector.InliningMode, boolean)",
        "snippet": "  public void helperInlineReferenceToFunction(\n      String code, final String expectedResult,\n      final String fnName, final InliningMode mode,\n      final boolean decompose) {\n    final Compiler compiler = new Compiler();\n    final FunctionInjector injector = new FunctionInjector(\n        compiler, compiler.getUniqueNameIdSupplier(), decompose,\n        assumeStrictThis,\n        assumeMinimumCapture);\n\n    List<SourceFile> externsInputs = Lists.newArrayList(\n        SourceFile.fromCode(\"externs\", \"\"));\n\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    compiler.init(externsInputs, Lists.newArrayList(\n        SourceFile.fromCode(\"code\", code)), options);\n    Node parseRoot = compiler.parseInputs();\n    Node externsRoot = parseRoot.getFirstChild();\n    final Node tree = parseRoot.getLastChild();\n    assertNotNull(tree);\n    assertTrue(tree != externsRoot);\n\n    final Node expectedRoot = parseExpected(new Compiler(), expectedResult);\n\n    Node mainRoot = tree;\n    MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n    mark.process(externsRoot, mainRoot);\n\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n\n    final Node fnNode = findFunction(tree, fnName);\n    assertNotNull(fnNode);\n    final Set<String> unsafe =\n        FunctionArgumentInjector.findModifiedParameters(fnNode);\n    assertNotNull(fnNode);\n\n    // inline tester\n    Method tester = new Method() {\n      @Override\n      public boolean call(NodeTraversal t, Node n, Node parent) {\n\n        CanInlineResult canInline = injector.canInlineReferenceToFunction(\n            t, n, fnNode, unsafe, mode,\n            NodeUtil.referencesThis(fnNode),\n            NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode)));\n        assertTrue(\"canInlineReferenceToFunction should not be CAN_NOT_INLINE\",\n            CanInlineResult.NO != canInline);\n        if (decompose) {\n          assertTrue(\"canInlineReferenceToFunction \" +\n              \"should be CAN_INLINE_AFTER_DECOMPOSITION\",\n              CanInlineResult.AFTER_PREPARATION == canInline);\n\n          Set<String> knownConstants = Sets.newHashSet();\n          injector.setKnownConstants(knownConstants);\n          injector.maybePrepareCall(n);\n\n          assertTrue(\"canInlineReferenceToFunction \" +\n              \"should be CAN_INLINE\",\n              CanInlineResult.YES != canInline);\n        }\n\n        Node result = injector.inline(n, fnName, fnNode, mode);\n        validateSourceInfo(compiler, result);\n        String explanation = expectedRoot.checkTreeEquals(tree.getFirstChild());\n        assertNull(\"\\nExpected: \" + toSource(expectedRoot) +\n            \"\\nResult: \" + toSource(tree.getFirstChild()) +\n            \"\\n\" + explanation, explanation);\n        return true;\n      }\n    };\n\n    compiler.resetUniqueNameId();\n    TestCallback test = new TestCallback(fnName, tester);\n    NodeTraversal.traverse(compiler, tree, test);\n  }\n",
        "begin_line": 1433,
        "end_line": 1510,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1437,col 45)",
            "(line 1438,col 5)-(line 1441,col 30)",
            "(line 1443,col 5)-(line 1444,col 44)",
            "(line 1446,col 5)-(line 1446,col 52)",
            "(line 1447,col 5)-(line 1447,col 62)",
            "(line 1448,col 5)-(line 1449,col 53)",
            "(line 1450,col 5)-(line 1450,col 44)",
            "(line 1451,col 5)-(line 1451,col 49)",
            "(line 1452,col 5)-(line 1452,col 47)",
            "(line 1453,col 5)-(line 1453,col 24)",
            "(line 1454,col 5)-(line 1454,col 36)",
            "(line 1456,col 5)-(line 1456,col 76)",
            "(line 1458,col 5)-(line 1458,col 25)",
            "(line 1459,col 5)-(line 1459,col 69)",
            "(line 1460,col 5)-(line 1460,col 40)",
            "(line 1462,col 5)-(line 1462,col 57)",
            "(line 1463,col 5)-(line 1463,col 45)",
            "(line 1464,col 5)-(line 1464,col 58)",
            "(line 1466,col 5)-(line 1466,col 51)",
            "(line 1467,col 5)-(line 1467,col 26)",
            "(line 1468,col 5)-(line 1469,col 64)",
            "(line 1470,col 5)-(line 1470,col 26)",
            "(line 1473,col 5)-(line 1505,col 6)",
            "(line 1507,col 5)-(line 1507,col 33)",
            "(line 1508,col 5)-(line 1508,col 57)",
            "(line 1509,col 5)-(line 1509,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.Anonymous-8f7a49bd-7c7b-4455-83d7-e13e9f66b92d.call(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public boolean call(NodeTraversal t, Node n, Node parent) {\n\n        CanInlineResult canInline = injector.canInlineReferenceToFunction(\n            t, n, fnNode, unsafe, mode,\n            NodeUtil.referencesThis(fnNode),\n            NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode)));\n        assertTrue(\"canInlineReferenceToFunction should not be CAN_NOT_INLINE\",\n            CanInlineResult.NO != canInline);\n        if (decompose) {\n          assertTrue(\"canInlineReferenceToFunction \" +\n              \"should be CAN_INLINE_AFTER_DECOMPOSITION\",\n              CanInlineResult.AFTER_PREPARATION == canInline);\n\n          Set<String> knownConstants = Sets.newHashSet();\n          injector.setKnownConstants(knownConstants);\n          injector.maybePrepareCall(n);\n\n          assertTrue(\"canInlineReferenceToFunction \" +\n              \"should be CAN_INLINE\",\n              CanInlineResult.YES != canInline);\n        }\n\n        Node result = injector.inline(n, fnName, fnNode, mode);\n        validateSourceInfo(compiler, result);\n        String explanation = expectedRoot.checkTreeEquals(tree.getFirstChild());\n        assertNull(\"\\nExpected: \" + toSource(expectedRoot) +\n            \"\\nResult: \" + toSource(tree.getFirstChild()) +\n            \"\\n\" + explanation, explanation);\n        return true;\n      }\n",
        "begin_line": 1474,
        "end_line": 1504,
        "comment": "",
        "child_ranges": [
            "(line 1477,col 9)-(line 1480,col 73)",
            "(line 1481,col 9)-(line 1482,col 45)",
            "(line 1483,col 9)-(line 1495,col 9)",
            "(line 1497,col 9)-(line 1497,col 63)",
            "(line 1498,col 9)-(line 1498,col 45)",
            "(line 1499,col 9)-(line 1499,col 80)",
            "(line 1500,col 9)-(line 1502,col 45)",
            "(line 1503,col 9)-(line 1503,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.Method.call(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    boolean call(NodeTraversal t, Node n, Node parent);\n",
        "begin_line": 1513,
        "end_line": 1513,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.TestCallback.TestCallback(java.lang.String, com.google.javascript.jscomp.FunctionInjectorTest.Method)",
        "snippet": "    TestCallback(String callname, Method method) {\n      this.callname = callname;\n      this.method = method;\n    }\n",
        "begin_line": 1522,
        "end_line": 1525,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 7)-(line 1523,col 31)",
            "(line 1524,col 7)-(line 1524,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.TestCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      return !complete;\n    }\n",
        "begin_line": 1527,
        "end_line": 1531,
        "comment": "",
        "child_ranges": [
            "(line 1530,col 7)-(line 1530,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.TestCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall()) {\n        Node callee;\n        if (NodeUtil.isGet(n.getFirstChild())) {\n          callee = n.getFirstChild().getFirstChild();\n        } else {\n          callee = n.getFirstChild();\n        }\n\n        if (callee.isName() &&\n            callee.getString().equals(callname)) {\n          complete = method.call(t, n, parent);\n        }\n      }\n\n      if (parent == null) {\n        assertTrue(complete);\n      }\n    }\n",
        "begin_line": 1533,
        "end_line": 1552,
        "comment": "",
        "child_ranges": [
            "(line 1535,col 7)-(line 1547,col 7)",
            "(line 1549,col 7)-(line 1551,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.findFunction(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private static Node findFunction(Node n, String name) {\n    if (n.isFunction()) {\n      if (n.getFirstChild().getString().equals(name)) {\n        return n;\n      }\n    }\n\n    for (Node c : n.children()) {\n      Node result = findFunction(c, name);\n      if (result != null) {\n        return result;\n      }\n    }\n\n    return null;\n  }\n",
        "begin_line": 1555,
        "end_line": 1570,
        "comment": "",
        "child_ranges": [
            "(line 1556,col 5)-(line 1560,col 5)",
            "(line 1562,col 5)-(line 1567,col 5)",
            "(line 1569,col 5)-(line 1569,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.prep(java.lang.String)",
        "snippet": "  private static Node prep(String js) {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n.getFirstChild();\n  }\n",
        "begin_line": 1572,
        "end_line": 1577,
        "comment": "",
        "child_ranges": [
            "(line 1573,col 5)-(line 1573,col 39)",
            "(line 1574,col 5)-(line 1574,col 40)",
            "(line 1575,col 5)-(line 1575,col 46)",
            "(line 1576,col 5)-(line 1576,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.parse(com.google.javascript.jscomp.Compiler, java.lang.String)",
        "snippet": "  private static Node parse(Compiler compiler, String js) {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 1579,
        "end_line": 1583,
        "comment": "",
        "child_ranges": [
            "(line 1580,col 5)-(line 1580,col 40)",
            "(line 1581,col 5)-(line 1581,col 46)",
            "(line 1582,col 5)-(line 1582,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.parseExpected(com.google.javascript.jscomp.Compiler, java.lang.String)",
        "snippet": "  private static Node parseExpected(Compiler compiler, String js) {\n    Node n = compiler.parseTestCode(js);\n    String message = \"Unexpected errors: \";\n    JSError[] errs = compiler.getErrors();\n    for (int i = 0; i < errs.length; i++){\n      message += \"\\n\" + errs[i].toString();\n    }\n    assertEquals(message, 0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 1585,
        "end_line": 1594,
        "comment": "",
        "child_ranges": [
            "(line 1586,col 5)-(line 1586,col 40)",
            "(line 1587,col 5)-(line 1587,col 43)",
            "(line 1588,col 5)-(line 1588,col 42)",
            "(line 1589,col 5)-(line 1591,col 5)",
            "(line 1592,col 5)-(line 1592,col 55)",
            "(line 1593,col 5)-(line 1593,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjectorTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
        "signature": "com.google.javascript.jscomp.FunctionInjectorTest.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  private static String toSource(Node n) {\n    return new CodePrinter.Builder(n)\n        .setPrettyPrint(false)\n        .setLineBreak(false)\n        .setSourceMap(null)\n        .build();\n  }\n",
        "begin_line": 1596,
        "end_line": 1602,
        "comment": "",
        "child_ranges": [
            "(line 1597,col 5)-(line 1601,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.InlineFunctionsTest()",
        "snippet": "  public InlineFunctionsTest() {\n    super(EXTERNS);\n    this.enableNormalize();\n    this.enableComputeSideEffects();\n  }\n",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 19)",
            "(line 39,col 5)-(line 39,col 27)",
            "(line 40,col 5)-(line 40,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    super.enableLineNumberCheck(true);\n    allowGlobalFunctionInlining = true;\n    allowBlockInlining = true;\n    assumeStrictThis = false;\n    assumeMinimumCapture = false;\n  }\n",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 18)",
            "(line 46,col 5)-(line 46,col 38)",
            "(line 47,col 5)-(line 47,col 39)",
            "(line 48,col 5)-(line 48,col 30)",
            "(line 49,col 5)-(line 49,col 29)",
            "(line 50,col 5)-(line 50,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    compiler.resetUniqueNameId();\n    return new InlineFunctions(\n        compiler,\n        compiler.getUniqueNameIdSupplier(),\n        allowGlobalFunctionInlining,\n        allowLocalFunctionInlining,\n        allowBlockInlining,\n        assumeStrictThis,\n        assumeMinimumCapture);\n  }\n",
        "begin_line": 53,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 33)",
            "(line 56,col 5)-(line 63,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Some inlining can only be done in multiple passes.\n    return 3;\n  }\n",
        "begin_line": 70,
        "end_line": 74,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction1()",
        "snippet": "  public void testInlineEmptyFunction1() {\n    // Empty function, no params.\n    test(\"function foo(){}\" +\n        \"foo();\",\n        \"void 0;\");\n  }\n",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 80,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction2()",
        "snippet": "  public void testInlineEmptyFunction2() {\n    // Empty function, params with no side-effects.\n    test(\"function foo(){}\" +\n        \"foo(1, new Date, function(){});\",\n        \"void 0;\");\n  }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 87,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction3()",
        "snippet": "  public void testInlineEmptyFunction3() {\n    // Empty function, multiple references.\n    test(\"function foo(){}\" +\n        \"foo();foo();foo();\",\n        \"void 0;void 0;void 0\");\n  }\n",
        "begin_line": 90,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 94,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction4()",
        "snippet": "  public void testInlineEmptyFunction4() {\n    // Empty function, params with side-effects forces block inlining.\n    test(\"function foo(){}\" +\n        \"foo(x());\",\n        \"{var JSCompiler_inline_anon_param_0=x();}\");\n  }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 101,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineEmptyFunction5()",
        "snippet": "  public void testInlineEmptyFunction5() {\n    // Empty function, call params with side-effects in expression can not\n    // be inlined.\n    allowBlockInlining = false;\n    testSame(\"function foo(){}\" +\n        \"foo(x());\");\n  }\n",
        "begin_line": 104,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 31)",
            "(line 108,col 5)-(line 109,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions1()",
        "snippet": "  public void testInlineFunctions1() {\n    // As simple a test as we can get.\n    test(\"function foo(){ return 4 }\" +\n        \"foo();\",\n        \"4\");\n  }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 116,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions2()",
        "snippet": "  public void testInlineFunctions2() {\n    // inline simple constants\n    // NOTE: CD is not inlined.\n    test(\"var t;var AB=function(){return 4};\" +\n         \"function BC(){return 6;}\" +\n         \"CD=function(x){return x + 5};x=CD(3);y=AB();z=BC();\",\n         \"var t;CD=function(x){return x+5};x=CD(3);y=4;z=6\"\n         );\n  }\n",
        "begin_line": 119,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 126,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions3()",
        "snippet": "  public void testInlineFunctions3() {\n    // inline simple constants\n    test(\"var t;var AB=function(){return 4};\" +\n        \"function BC(){return 6;}\" +\n        \"var CD=function(x){return x + 5};x=CD(3);y=AB();z=BC();\",\n        \"var t;x=3+5;y=4;z=6\");\n  }\n",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 134,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions4()",
        "snippet": "  public void testInlineFunctions4() {\n    // don't inline if there are multiple definitions (need DFA for that).\n    test(\"var t; var AB = function() { return 4 }; \" +\n        \"function BC() { return 6; }\" +\n        \"CD = 0;\" +\n        \"CD = function(x) { return x + 5 }; x = CD(3); y = AB(); z = BC();\",\n\n        \"var t;CD=0;CD=function(x){return x+5};x=CD(3);y=4;z=6\");\n  }\n",
        "begin_line": 137,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 144,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions5()",
        "snippet": "  public void testInlineFunctions5() {\n    // inline additions\n    test(\"var FOO_FN=function(x,y) { return \\\"de\\\" + x + \\\"nu\\\" + y };\" +\n         \"var a = FOO_FN(\\\"ez\\\", \\\"ts\\\")\",\n\n         \"var a=\\\"de\\\"+\\\"ez\\\"+\\\"nu\\\"+\\\"ts\\\"\");\n  }\n",
        "begin_line": 147,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 152,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions6()",
        "snippet": "  public void testInlineFunctions6() {\n    // more complex inlines\n    test(\"function BAR_FN(x, y, z) { return z(nochg(x + y)) }\" +\n         \"alert(BAR_FN(1, 2, baz))\",\n\n         \"var JSCompiler_temp_const$$0=alert;\" +\n         \"var JSCompiler_inline_result$$1;\" +\n         \"{JSCompiler_inline_result$$1=baz(nochg(1+2));}\" +\n         \"JSCompiler_temp_const$$0(JSCompiler_inline_result$$1)\");\n  }\n",
        "begin_line": 155,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 163,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions7()",
        "snippet": "  public void testInlineFunctions7() {\n    // inlines appearing multiple times\n    test(\"function FN(x,y,z){return x+x+y}\" +\n         \"var b=FN(1,2,3)\",\n\n         \"var b=1+1+2\");\n  }\n",
        "begin_line": 166,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 171,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions8()",
        "snippet": "  public void testInlineFunctions8() {\n    // check correct parenthesization\n    test(\"function MUL(x,y){return x*y}function ADD(x,y){return x+y}\" +\n         \"var a=1+MUL(2,3);var b=2*ADD(3,4)\",\n\n         \"var a=1+2*3;var b=2*(3+4)\");\n  }\n",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 179,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9()",
        "snippet": "  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }\n",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 187,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10()",
        "snippet": "  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }\n",
        "begin_line": 190,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 197,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions11()",
        "snippet": "  public void testInlineFunctions11() {\n    test(\"function f(x){return x}\" +\n          \"var y=f(i)\",\n          \"var y=i\");\n  }\n",
        "begin_line": 200,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 203,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions12()",
        "snippet": "  public void testInlineFunctions12() {\n    // don't inline if the input parameter has side-effects.\n    allowBlockInlining = false;\n    test(\"function f(x){return x}\" +\n          \"var y=f(i)\",\n          \"var y=i\");\n    testSame(\"function f(x){return x}\" +\n         \"var y=f(i++)\");\n  }\n",
        "begin_line": 206,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 31)",
            "(line 209,col 5)-(line 211,col 21)",
            "(line 212,col 5)-(line 213,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13()",
        "snippet": "  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }\n",
        "begin_line": 216,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 220,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions14()",
        "snippet": "  public void testInlineFunctions14() {\n    // don't remove functions that are referenced on other ways\n    test(\"function FOO(x){return x}var BAR=function(y){return y}\" +\n             \";b=FOO;a(BAR);x=FOO(1);y=BAR(2)\",\n\n         \"function FOO(x){return x}var BAR=function(y){return y}\" +\n             \";b=FOO;a(BAR);x=1;y=2\");\n  }\n",
        "begin_line": 223,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 229,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15a()",
        "snippet": "  public void testInlineFunctions15a() {\n    // closure factories: do inline into global scope.\n    test(\"function foo(){return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var d=c+function(a){return a+1}\");\n  }\n",
        "begin_line": 232,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 238,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b()",
        "snippet": "  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_inline_result$$0;\" +\n         \"{var x$$inline_1;\" +\n         \"JSCompiler_inline_result$$0=function(a$$inline_2){return a$$inline_2+1};}\" +\n         \"var d=c+JSCompiler_inline_result$$0\");\n  }\n",
        "begin_line": 241,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 33)",
            "(line 245,col 5)-(line 250,col 26)",
            "(line 252,col 5)-(line 252,col 32)",
            "(line 254,col 5)-(line 261,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15c()",
        "snippet": "  public void testInlineFunctions15c() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline into non-global scope.\n    test(\"function foo(){return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline into non-global scope.\n    test(\"function foo(){return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x(){var d=c+function(a){return a+1}}\");\n\n  }\n",
        "begin_line": 264,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 265,col 5)-(line 265,col 33)",
            "(line 268,col 5)-(line 273,col 43)",
            "(line 275,col 5)-(line 275,col 32)",
            "(line 278,col 5)-(line 282,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d()",
        "snippet": "  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x(){\" +\n         \"  var JSCompiler_inline_result$$0;\" +\n         \"  {\" +\n         \"    var x$$inline_1;\" +\n         \"    JSCompiler_inline_result$$0=function(a$$inline_2){\" +\n         \"        return a$$inline_2+1};\" +\n         \"  }\" +\n         \"  var d=c+JSCompiler_inline_result$$0\" +\n         \"}\");\n  }\n",
        "begin_line": 286,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 33)",
            "(line 290,col 5)-(line 295,col 43)",
            "(line 297,col 5)-(line 297,col 32)",
            "(line 300,col 5)-(line 312,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a()",
        "snippet": "  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }\n",
        "begin_line": 315,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 33)",
            "(line 318,col 5)-(line 319,col 25)",
            "(line 321,col 5)-(line 321,col 32)",
            "(line 323,col 5)-(line 327,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16b()",
        "snippet": "  public void testInlineFunctions16b() {\n    test(\"function foo(){return window.bar(function(){c()})}\" +\n         \"var d=foo(e)\",\n         \"var d=window.bar(function(){c()})\");\n  }\n",
        "begin_line": 330,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 333,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions17()",
        "snippet": "  public void testInlineFunctions17() {\n    // don't inline recursive functions\n    testSame(\"function foo(x){return x*x+foo(3)}var bar=foo(4)\");\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions18()",
        "snippet": "  public void testInlineFunctions18() {\n    // TRICKY ... test nested inlines\n    allowBlockInlining = false;\n    test(\"function foo(a, b){return a+b}\" +\n         \"function bar(d){return c}\" +\n         \"var d=foo(bar(1),e)\",\n         \"var d=c+e\");\n  }\n",
        "begin_line": 341,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 343,col 5)-(line 343,col 31)",
            "(line 344,col 5)-(line 347,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions19()",
        "snippet": "  public void testInlineFunctions19() {\n    // TRICKY ... test nested inlines\n    // with block inlining possible\n    test(\"function foo(a, b){return a+b}\" +\n        \"function bar(d){return c}\" +\n        \"var d=foo(bar(1),e)\",\n        \"var d=c+e;\");\n  }\n",
        "begin_line": 350,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 356,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions20()",
        "snippet": "  public void testInlineFunctions20() {\n    // Make sure both orderings work\n    allowBlockInlining = false;\n    test(\"function foo(a, b){return a+b}\" +\n         \"function bar(d){return c}\" +\n         \"var d=bar(foo(1,e));\",\n         \"var d=c\");\n  }\n",
        "begin_line": 359,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 361,col 31)",
            "(line 362,col 5)-(line 365,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions21()",
        "snippet": "  public void testInlineFunctions21() {\n    // with block inlining possible\n    test(\"function foo(a, b){return a+b}\" +\n        \"function bar(d){return c}\" +\n        \"var d=bar(foo(1,e))\",\n        \"var d=c\");\n  }\n",
        "begin_line": 368,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 373,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22()",
        "snippet": "  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }\n",
        "begin_line": 376,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 387,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23()",
        "snippet": "  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }\n",
        "begin_line": 390,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 402,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions24()",
        "snippet": "  public void testInlineFunctions24() {\n    // Don't inline functions with 'arguments' or 'this'\n    testSame(\"function foo(x){return this}foo(1)\");\n  }\n",
        "begin_line": 405,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions25()",
        "snippet": "  public void testInlineFunctions25() {\n    testSame(\"function foo(){return arguments[0]}foo()\");\n  }\n",
        "begin_line": 410,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions26()",
        "snippet": "  public void testInlineFunctions26() {\n    // Don't inline external functions\n    testSame(\"function _foo(x){return x}_foo(1)\");\n  }\n",
        "begin_line": 414,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 416,col 5)-(line 416,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions27()",
        "snippet": "  public void testInlineFunctions27() {\n    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n        \"var x = {y: 1, z: foo(2)};\",\n        \"var window={};\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"{\" +\n        \"  window.bar++;\" +\n        \"  JSCompiler_inline_result$$0 = 3;\" +\n        \"}\" +\n        \"var x = {y: 1, z: JSCompiler_inline_result$$0};\");\n  }\n",
        "begin_line": 419,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 420,col 5)-(line 428,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions28()",
        "snippet": "  public void testInlineFunctions28() {\n    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n        \"var x = {y: alert(), z: foo(2)};\",\n        \"var window = {};\" +\n        \"var JSCompiler_temp_const$$0 = alert();\" +\n        \"var JSCompiler_inline_result$$1;\" +\n        \"{\" +\n        \" window.bar++;\" +\n        \" JSCompiler_inline_result$$1 = 3;}\" +\n        \"var x = {\" +\n        \"  y: JSCompiler_temp_const$$0,\" +\n        \"  z: JSCompiler_inline_result$$1\" +\n        \"};\");\n  }\n",
        "begin_line": 431,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 432,col 5)-(line 443,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions29()",
        "snippet": "  public void testInlineFunctions29() {\n    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n        \"var x = {a: alert(), b: alert2(), c: foo(2)};\",\n        \"var window = {};\" +\n        \"var JSCompiler_temp_const$$1 = alert();\" +\n        \"var JSCompiler_temp_const$$0 = alert2();\" +\n        \"var JSCompiler_inline_result$$2;\" +\n        \"{\" +\n        \" window.bar++;\" +\n        \" JSCompiler_inline_result$$2 = 3;}\" +\n        \"var x = {\" +\n        \"  a: JSCompiler_temp_const$$1,\" +\n        \"  b: JSCompiler_temp_const$$0,\" +\n        \"  c: JSCompiler_inline_result$$2\" +\n        \"};\");\n  }\n",
        "begin_line": 446,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 447,col 5)-(line 460,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions30()",
        "snippet": "  public void testInlineFunctions30() {\n    // As simple a test as we can get.\n    testSame(\"function foo(){ return eval() }\" +\n        \"foo();\");\n  }\n",
        "begin_line": 463,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 466,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions31()",
        "snippet": "  public void testInlineFunctions31() {\n    // Don't introduce a duplicate label in the same scope\n    test(\"function foo(){ lab:{4;} }\" +\n        \"lab:{foo();}\",\n        \"lab:{{JSCompiler_inline_label_0:{4}}}\");\n  }\n",
        "begin_line": 469,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 471,col 5)-(line 473,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining1()",
        "snippet": "  public void testMixedModeInlining1() {\n    // Base line tests, direct inlining\n    test(\"function foo(){return 1}\" +\n        \"foo();\",\n        \"1;\");\n  }\n",
        "begin_line": 476,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 478,col 5)-(line 480,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining2()",
        "snippet": "  public void testMixedModeInlining2() {\n    // Base line tests, block inlining. Block inlining is needed by\n    // possible-side-effect parameter.\n    test(\"function foo(){return 1}\" +\n        \"foo(x());\",\n        \"{var JSCompiler_inline_anon_param_0=x();1}\");\n  }\n",
        "begin_line": 483,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 486,col 5)-(line 488,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining3()",
        "snippet": "  public void testMixedModeInlining3() {\n    // Inline using both modes.\n    test(\"function foo(){return 1}\" +\n        \"foo();foo(x());\",\n        \"1;{var JSCompiler_inline_anon_param_0=x();1}\");\n  }\n",
        "begin_line": 491,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 495,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInlining4()",
        "snippet": "  public void testMixedModeInlining4() {\n    // Inline using both modes. Alternating. Second call of each type has\n    // side-effect-less parameter, this is thrown away.\n    test(\"function foo(){return 1}\" +\n        \"foo();foo(x());\" +\n        \"foo(1);foo(1,x());\",\n        \"1;{var JSCompiler_inline_anon_param_0=x();1}\" +\n        \"1;{var JSCompiler_inline_anon_param_4=x();1}\");\n  }\n",
        "begin_line": 498,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 501,col 5)-(line 505,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting1()",
        "snippet": "  public void testMixedModeInliningCosting1() {\n    // Inline using both modes. Costing estimates.\n\n    // Base line.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3)\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+4+5;\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+4+5\");\n  }\n",
        "begin_line": 508,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 512,col 5)-(line 518,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting2()",
        "snippet": "  public void testMixedModeInliningCosting2() {\n    // Don't inline here because the function definition can not be eliminated.\n    // TODO(johnlenz): Should we add constant removing to the unit test?\n    testSame(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\");\n  }\n",
        "begin_line": 521,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 527,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting3()",
        "snippet": "  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }\n",
        "begin_line": 530,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 539,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting4()",
        "snippet": "  public void testMixedModeInliningCosting4() {\n    // Threshold test.\n    testSame(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+101}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\");\n  }\n",
        "begin_line": 542,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 547,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1()",
        "snippet": "  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n",
        "begin_line": 550,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 552,col 5)-(line 554,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2()",
        "snippet": "  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }\n",
        "begin_line": 557,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 560,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3()",
        "snippet": "  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }\n",
        "begin_line": 563,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 567,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4()",
        "snippet": "  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }\n",
        "begin_line": 570,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 572,col 5)-(line 575,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5()",
        "snippet": "  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n",
        "begin_line": 578,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 580,col 5)-(line 582,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6()",
        "snippet": "  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }\n",
        "begin_line": 585,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 588,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7()",
        "snippet": "  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }\n",
        "begin_line": 591,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 593,col 5)-(line 596,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineIfParametersModified8()",
        "snippet": "  public void testInlineIfParametersModified8() {\n    // OK, object parameter modified.\n    test(\"function f(a){return a.x=2}f(o)\", \"{o.x=2}\");\n  }\n",
        "begin_line": 599,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 601,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineIfParametersModified9()",
        "snippet": "  public void testInlineIfParametersModified9() {\n    // OK, array parameter modified.\n    test(\"function f(a){return a[2]=2}f(o)\", \"{o[2]=2}\");\n  }\n",
        "begin_line": 604,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 606,col 5)-(line 606,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverPartialSubtitution1()",
        "snippet": "  public void testInlineNeverPartialSubtitution1() {\n    test(\"function f(z){return x.y.z;}f(1)\",\n         \"x.y.z\");\n  }\n",
        "begin_line": 609,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 611,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverPartialSubtitution2()",
        "snippet": "  public void testInlineNeverPartialSubtitution2() {\n    test(\"function f(z){return x.y[z];}f(a)\",\n         \"x.y[a]\");\n  }\n",
        "begin_line": 614,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 615,col 5)-(line 616,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants()",
        "snippet": "  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }\n",
        "begin_line": 619,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 620,col 5)-(line 622,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues()",
        "snippet": "  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }\n",
        "begin_line": 625,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 626,col 5)-(line 628,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineMutableArgsReferencedOnce()",
        "snippet": "  public void testInlineMutableArgsReferencedOnce() {\n    test(\"function foo(x){return x;}foo([])\", \"[]\");\n  }\n",
        "begin_line": 631,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 632,col 5)-(line 632,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs1()",
        "snippet": "  public void testNoInlineMutableArgs1() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo([])\");\n  }\n",
        "begin_line": 635,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 636,col 31)",
            "(line 637,col 5)-(line 637,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs2()",
        "snippet": "  public void testNoInlineMutableArgs2() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo(new Date)\");\n  }\n",
        "begin_line": 640,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 641,col 31)",
            "(line 642,col 5)-(line 642,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs3()",
        "snippet": "  public void testNoInlineMutableArgs3() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo(true&&new Date)\");\n  }\n",
        "begin_line": 645,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 31)",
            "(line 647,col 5)-(line 647,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMutableArgs4()",
        "snippet": "  public void testNoInlineMutableArgs4() {\n    allowBlockInlining = false;\n    testSame(\"function foo(x){return x+x} foo({})\");\n  }\n",
        "begin_line": 650,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 651,col 5)-(line 651,col 31)",
            "(line 652,col 5)-(line 652,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1()",
        "snippet": "  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 655,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 658,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2()",
        "snippet": "  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 661,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 662,col 5)-(line 664,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3()",
        "snippet": "  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 667,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 668,col 5)-(line 670,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4()",
        "snippet": "  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }\n",
        "begin_line": 673,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 674,col 5)-(line 676,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables1()",
        "snippet": "  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }\n",
        "begin_line": 679,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 685,col 5)-(line 691,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables2()",
        "snippet": "  public void testShadowVariables2() {\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is inlined as its uses global \"a\", and does introduce any new\n    // globals.\n    test(\"var a=0;\" +\n        \"function foo(a){return 3+a}\" +\n        \"function bar(){a=foo(4)}\" +\n        \"bar()\",\n\n        \"var a=0;\" +\n        \"{a=3+4}\");\n  }\n",
        "begin_line": 694,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 698,col 5)-(line 704,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3()",
        "snippet": "  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }\n",
        "begin_line": 707,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 709,col 5)-(line 715,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables4()",
        "snippet": "  public void testShadowVariables4() {\n    // \"foo\" is inlined.\n    // block access to global \"a\".\n    test(\"var a=0;\" +\n         \"function foo(){return 3+a}\" +\n         \"function _bar(a){a=foo(4)+a}\",\n\n         \"var a=0;function _bar(a$$1){\" +\n         \"a$$1=\" +\n         \"3+a+a$$1}\");\n  }\n",
        "begin_line": 718,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 721,col 5)-(line 727,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables5()",
        "snippet": "  public void testShadowVariables5() {\n    // Can't yet inline multiple statements functions into expressions\n    // (though some are possible using the COMMA operator).\n    allowBlockInlining = false;\n    testSame(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)+a}\");\n  }\n",
        "begin_line": 730,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 733,col 31)",
            "(line 734,col 5)-(line 736,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6()",
        "snippet": "  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }\n",
        "begin_line": 739,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 740,col 5)-(line 746,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables7()",
        "snippet": "  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }\n",
        "begin_line": 749,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 750,col 33)",
            "(line 751,col 5)-(line 756,col 11)",
            "(line 758,col 5)-(line 758,col 32)",
            "(line 759,col 5)-(line 764,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables8()",
        "snippet": "  public void testShadowVariables8() {\n    // this should be inlined\n    test(\"var a=0;\" +\n         \"function foo(){return 3}\" +\n         \"function _bar(){var a=foo()}\",\n\n         \"var a=0;\" +\n         \"function _bar(){var a=3}\");\n  }\n",
        "begin_line": 767,
        "end_line": 775,
        "comment": "",
        "child_ranges": [
            "(line 769,col 5)-(line 774,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables9()",
        "snippet": "  public void testShadowVariables9() {\n    // this should be inlined too [even if the global is not declared]\n    test(\"function foo(){return 3}\" +\n         \"function _bar(){var a=foo()}\",\n\n         \"function _bar(){var a=3}\");\n  }\n",
        "begin_line": 777,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 782,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables10()",
        "snippet": "  public void testShadowVariables10() {\n    // callee var must be renamed.\n    test(\"var a;function foo(){return a}\" +\n         \"function _bar(){var a=foo()}\",\n         \"var a;function _bar(){var a$$1=a}\");\n  }\n",
        "begin_line": 785,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 787,col 5)-(line 789,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables11()",
        "snippet": "  public void testShadowVariables11() {\n    // The call has a local variable\n    // which collides with the function being inlined\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+a}\" +\n         \"function _bar(){var a=foo();alert(a)}\",\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var a$$1=a+a;\" +\n         \"alert(a$$1)}\"\n         );\n  }\n",
        "begin_line": 792,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 795,col 5)-(line 801,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables12()",
        "snippet": "  public void testShadowVariables12() {\n    // 2 globals colliding\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+b}\" +\n         \"function _bar(){var a=foo(),b;alert(a)}\",\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var a$$1=a+b,\" +\n         \"b$$1;\" +\n         \"alert(a$$1)}\");\n  }\n",
        "begin_line": 804,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 812,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables13()",
        "snippet": "  public void testShadowVariables13() {\n    // The only change is to remove the collision\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+a}\" +\n         \"function _bar(){var c=foo();alert(c)}\",\n\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var c=a+a;alert(c)}\");\n  }\n",
        "begin_line": 815,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 817,col 5)-(line 822,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables14()",
        "snippet": "  public void testShadowVariables14() {\n    // There is a collision even though it is not read.\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+b}\" +\n         \"function _bar(){var c=foo(),b;alert(c)}\",\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var c=a+b,\" +\n         \"b$$1;alert(c)}\");\n  }\n",
        "begin_line": 825,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 832,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables15()",
        "snippet": "  public void testShadowVariables15() {\n    // Both parent and child reference a global\n    test(\"var a=0;var b=1;\" +\n         \"function foo(){return a+a}\" +\n         \"function _bar(){var c=foo();alert(c+a)}\",\n\n         \"var a=0;var b=1;\" +\n         \"function _bar(){var c=a+a;alert(c+a)}\");\n  }\n",
        "begin_line": 835,
        "end_line": 843,
        "comment": "",
        "child_ranges": [
            "(line 837,col 5)-(line 842,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables16()",
        "snippet": "  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }\n",
        "begin_line": 845,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 846,col 5)-(line 846,col 33)",
            "(line 848,col 5)-(line 853,col 11)",
            "(line 855,col 5)-(line 855,col 32)",
            "(line 857,col 5)-(line 862,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables17()",
        "snippet": "  public void testShadowVariables17() {\n    test(\"var a=0;\" +\n         \"function bar(){return a+a}\" +\n         \"function foo(){return bar()}\" +\n         \"function _goo(){var a=2;var x=foo();}\",\n\n         \"var a=0;\" +\n         \"function _goo(){var a$$1=2;var x=a+a}\");\n  }\n",
        "begin_line": 866,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 867,col 5)-(line 873,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18()",
        "snippet": "  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }\n",
        "begin_line": 876,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 884,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining1()",
        "snippet": "  public void testCostBasedInlining1() {\n    testSame(\n        \"function foo(a){return a}\" +\n        \"foo=new Function(\\\"return 1\\\");\" +\n        \"foo(1)\");\n  }\n",
        "begin_line": 887,
        "end_line": 892,
        "comment": "",
        "child_ranges": [
            "(line 888,col 5)-(line 891,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining2()",
        "snippet": "  public void testCostBasedInlining2() {\n    // Baseline complexity tests.\n    // Single call, function not removed.\n    test(\n        \"function foo(a){return a}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return foo(1)}\",\n\n        \"function foo(a){return a}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return 1}\");\n  }\n",
        "begin_line": 894,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 897,col 5)-(line 904,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining3()",
        "snippet": "  public void testCostBasedInlining3() {\n    // Two calls, function not removed.\n    test(\n        \"function foo(a,b){return a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\",\n\n        \"function foo(a,b){return a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return 1+2}\" +\n        \"function _t2(){return 2+3}\");\n  }\n",
        "begin_line": 907,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 909,col 5)-(line 918,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining4()",
        "snippet": "  public void testCostBasedInlining4() {\n    // Two calls, function not removed.\n    // Here there isn't enough savings to justify inlining.\n    testSame(\n        \"function foo(a,b){return a+b+a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\");\n  }\n",
        "begin_line": 921,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 928,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining5()",
        "snippet": "  public void testCostBasedInlining5() {\n    // Here there is enough savings to justify inlining.\n    test(\n        \"function foo(a,b){return a+b+a+b}\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\",\n\n        \"function _t1(){return 1+2+1+2}\" +\n        \"function _t2(){return 2+3+2+3}\");\n  }\n",
        "begin_line": 931,
        "end_line": 940,
        "comment": "",
        "child_ranges": [
            "(line 933,col 5)-(line 939,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining6()",
        "snippet": "  public void testCostBasedInlining6() {\n    // Here we have a threshold test.\n    // Do inline here:\n    test(\n        \"function foo(a,b){return a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\",\n\n        \"function _t1(){return 1+2+1+2+1+2+1+2+4+5+6+7+8+9+1+2+3+4+5}\" +\n        \"function _t2(){return 2+3+2+3+2+3+2+3+4+5+6+7+8+9+1+2+3+4+5}\");\n  }\n",
        "begin_line": 942,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 945,col 5)-(line 951,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining7()",
        "snippet": "  public void testCostBasedInlining7() {\n    // Don't inline here (not enough savings):\n    testSame(\n        \"function foo(a,b){\" +\n        \"    return a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2+3+4+5+6}\" +\n        \"function _t1(){return foo(1,2)}\" +\n        \"function _t2(){return foo(2,3)}\");\n  }\n",
        "begin_line": 954,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 960,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining8()",
        "snippet": "  public void testCostBasedInlining8() {\n    // Verify multiple references in the same statement:\n    // Here \"f\" is not known to be removable, as it is a used as parameter\n    // and is not known to be side-effect free.  The first call to f() can\n    // not be inlined on the first pass (as the call to f() as a parameter\n    // prevents this). However, the call to f() would be inlinable, if it\n    // is small enough to be inlined without removing the function declaration.\n    // but it is not in this first test.\n    allowBlockInlining = false;\n    testSame(\"function f(a){return chg() + a + a;}\" +\n        \"var a = f(f(1));\");\n  }\n",
        "begin_line": 963,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 971,col 5)-(line 971,col 31)",
            "(line 972,col 5)-(line 973,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9()",
        "snippet": "  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return chg() + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=chg()+1+1;\" +\n         \"a=chg()+a$$inline_0+a$$inline_0}\");\n  }\n",
        "begin_line": 976,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 984,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining10()",
        "snippet": "  public void testCostBasedInlining10() {\n    // But it is small enough here, and on the second iteration, the remaining\n    // call to f() is inlined, as there is no longer a possible side-effect-ing\n    // parameter.\n    allowBlockInlining = false;\n    test(\"function f(a){return nochg() + a + a;}\" +\n        \"var a = f(f(1));\",\n        \"var a= nochg()+(nochg()+1+1)+(nochg()+1+1);\");\n  }\n",
        "begin_line": 987,
        "end_line": 995,
        "comment": "",
        "child_ranges": [
            "(line 991,col 5)-(line 991,col 31)",
            "(line 992,col 5)-(line 994,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11()",
        "snippet": "  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return chg() + a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=chg()+1+1;\" +\n         \"a=chg()+a$$inline_0+a$$inline_0}\");\n  }\n",
        "begin_line": 997,
        "end_line": 1004,
        "comment": "",
        "child_ranges": [
            "(line 999,col 5)-(line 1003,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining12()",
        "snippet": "  public void testCostBasedInlining12() {\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(1) + f(2);\",\n\n         \"var a=1+1+1+(1+2+2)\");\n  }\n",
        "begin_line": 1006,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 1007,col 5)-(line 1010,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex1()",
        "snippet": "  public void testCostBasedInliningComplex1() {\n    testSame(\n        \"function foo(a){a()}\" +\n        \"foo=new Function(\\\"return 1\\\");\" +\n        \"foo(1)\");\n  }\n",
        "begin_line": 1013,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1017,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex2()",
        "snippet": "  public void testCostBasedInliningComplex2() {\n    // Baseline complexity tests.\n    // Single call, function not removed.\n    test(\n        \"function foo(a){a()}\" +\n        \"var b=foo;\" +\n        \"function _t1(){foo(x)}\",\n\n        \"function foo(a){a()}\" +\n        \"var b=foo;\" +\n        \"function _t1(){{x()}}\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1023,col 5)-(line 1030,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex3()",
        "snippet": "  public void testCostBasedInliningComplex3() {\n    // Two calls, function not removed.\n    test(\n        \"function foo(a,b){a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\",\n\n        \"function foo(a,b){a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){{1+2}}\" +\n        \"function _t2(){{2+3}}\");\n  }\n",
        "begin_line": 1033,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1035,col 5)-(line 1044,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex4()",
        "snippet": "  public void testCostBasedInliningComplex4() {\n    // Two calls, function not removed.\n    // Here there isn't enough savings to justify inlining.\n    testSame(\n        \"function foo(a,b){a+b+a+b}\" +\n        \"var b=foo;\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\");\n  }\n",
        "begin_line": 1047,
        "end_line": 1055,
        "comment": "",
        "child_ranges": [
            "(line 1050,col 5)-(line 1054,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex5()",
        "snippet": "  public void testCostBasedInliningComplex5() {\n    // Here there is enough savings to justify inlining.\n    test(\n        \"function foo(a,b){a+b+a+b}\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\",\n\n        \"function _t1(){{1+2+1+2}}\" +\n        \"function _t2(){{2+3+2+3}}\");\n  }\n",
        "begin_line": 1057,
        "end_line": 1066,
        "comment": "",
        "child_ranges": [
            "(line 1059,col 5)-(line 1065,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex6()",
        "snippet": "  public void testCostBasedInliningComplex6() {\n    // Here we have a threshold test.\n    // Do inline here:\n    test(\n        \"function foo(a,b){a+b+a+b+a+b+a+b+4+5+6+7+8+9+1}\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\",\n\n        \"function _t1(){{1+2+1+2+1+2+1+2+4+5+6+7+8+9+1}}\" +\n        \"function _t2(){{2+3+2+3+2+3+2+3+4+5+6+7+8+9+1}}\");\n  }\n",
        "begin_line": 1068,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1071,col 5)-(line 1077,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex7()",
        "snippet": "  public void testCostBasedInliningComplex7() {\n    // Don't inline here (not enough savings):\n    testSame(\n        \"function foo(a,b){a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2}\" +\n        \"function _t1(){foo(1,2)}\" +\n        \"function _t2(){foo(2,3)}\");\n  }\n",
        "begin_line": 1080,
        "end_line": 1086,
        "comment": "",
        "child_ranges": [
            "(line 1082,col 5)-(line 1085,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex8()",
        "snippet": "  public void testCostBasedInliningComplex8() {\n    // Verify multiple references in the same statement.\n    testSame(\"function _f(a){1+a+a}\" +\n             \"a=_f(1)+_f(1)\");\n  }\n",
        "begin_line": 1088,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 5)-(line 1091,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInliningComplex9()",
        "snippet": "  public void testCostBasedInliningComplex9() {\n    test(\"function f(a){1 + a + a;}\" +\n         \"f(1);f(2);\",\n         \"{1+1+1}{1+2+2}\");\n  }\n",
        "begin_line": 1094,
        "end_line": 1098,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 5)-(line 1097,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDoubleInlining1()",
        "snippet": "  public void testDoubleInlining1() {\n    allowBlockInlining = false;\n    test(\"var foo = function(a) { return nochg(a); };\" +\n         \"var bar = function(b) { return b; };\" +\n         \"foo(bar(x));\",\n         \"nochg(x)\");\n  }\n",
        "begin_line": 1100,
        "end_line": 1106,
        "comment": "",
        "child_ranges": [
            "(line 1101,col 5)-(line 1101,col 31)",
            "(line 1102,col 5)-(line 1105,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDoubleInlining2()",
        "snippet": "  public void testDoubleInlining2() {\n    test(\"var foo = function(a) { return getWindow(a); };\" +\n         \"var bar = function(b) { return b; };\" +\n         \"foo(bar(x));\",\n         \"{getWindow(x)}\");\n  }\n",
        "begin_line": 1108,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1109,col 5)-(line 1112,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction1()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction1() {\n    test(\"var g;function _f(){function g(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n  }\n",
        "begin_line": 1115,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1116,col 5)-(line 1119,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction2()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction2() {\n    test(\"var g;function _f(){var g=function(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n  }\n",
        "begin_line": 1122,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1126,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction3()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction3() {\n    test(\"var g;function _f(){var g=function(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n  }\n",
        "begin_line": 1129,
        "end_line": 1134,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 5)-(line 1133,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineOfNonGlobalFunction4()",
        "snippet": "  public void testNoInlineOfNonGlobalFunction4() {\n    test(\"var g;function _f(){function g(){return 0}}\" +\n         \"function _h(){return g()}\",\n         \"var g;function _f(){}\" +\n         \"function _h(){return g()}\");\n\n  }\n",
        "begin_line": 1136,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1137,col 5)-(line 1140,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineMaskedFunction()",
        "snippet": "  public void testNoInlineMaskedFunction() {\n    // Normalization makes this test of marginal value.\n    // The unreferenced function is removed.\n    test(\"var g=function(){return 0};\" +\n         \"function _f(g){return g()}\",\n         \"function _f(g$$1){return g$$1()}\");\n  }\n",
        "begin_line": 1144,
        "end_line": 1150,
        "comment": "",
        "child_ranges": [
            "(line 1147,col 5)-(line 1149,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineNonFunction()",
        "snippet": "  public void testNoInlineNonFunction() {\n    testSame(\"var g=3;function _f(){return g()}\");\n  }\n",
        "begin_line": 1152,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 5)-(line 1153,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineCall()",
        "snippet": "  public void testInlineCall() {\n    test(\"function f(g) { return g.h(); } f('x');\",\n         \"\\\"x\\\".h()\");\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1158,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch1()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch1() {\n    test(\"function f(g) { return g; } f();\",\n         \"void 0\");\n  }\n",
        "begin_line": 1161,
        "end_line": 1164,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1163,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch2()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch2() {\n    test(\"function f() { return 0; } f(1);\",\n         \"0\");\n  }\n",
        "begin_line": 1166,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1167,col 5)-(line 1168,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch3()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch3() {\n    test(\"function f(one, two, three) { return one + two + three; } f(1);\",\n         \"1+void 0+void 0\");\n  }\n",
        "begin_line": 1171,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1173,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctionWithArgsMismatch4()",
        "snippet": "  public void testInlineFunctionWithArgsMismatch4() {\n    test(\"function f(one, two, three) { return one + two + three; }\" +\n         \"f(1,2,3,4,5);\",\n         \"1+2+3\");\n  }\n",
        "begin_line": 1176,
        "end_line": 1180,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 5)-(line 1179,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testArgumentsWithSideEffectsNeverInlined1()",
        "snippet": "  public void testArgumentsWithSideEffectsNeverInlined1() {\n    allowBlockInlining = false;\n    testSame(\"function f(){return 0} f(new goo());\");\n  }\n",
        "begin_line": 1182,
        "end_line": 1185,
        "comment": "",
        "child_ranges": [
            "(line 1183,col 5)-(line 1183,col 31)",
            "(line 1184,col 5)-(line 1184,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testArgumentsWithSideEffectsNeverInlined2()",
        "snippet": "  public void testArgumentsWithSideEffectsNeverInlined2() {\n    allowBlockInlining = false;\n    testSame(\"function f(g,h){return h+g}f(g(),h());\");\n  }\n",
        "begin_line": 1187,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 5)-(line 1188,col 31)",
            "(line 1189,col 5)-(line 1189,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testOneSideEffectCallDoesNotRuinOthers()",
        "snippet": "  public void testOneSideEffectCallDoesNotRuinOthers() {\n    allowBlockInlining = false;\n    test(\"function f(){return 0}f(new goo());f()\",\n         \"function f(){return 0}f(new goo());0\");\n  }\n",
        "begin_line": 1192,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1193,col 31)",
            "(line 1194,col 5)-(line 1195,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall1()",
        "snippet": "  public void testComplexInlineNoResultNoParamCall1() {\n    test(\"function f(){a()}f()\",\n         \"{a()}\");\n  }\n",
        "begin_line": 1198,
        "end_line": 1201,
        "comment": "",
        "child_ranges": [
            "(line 1199,col 5)-(line 1200,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall2()",
        "snippet": "  public void testComplexInlineNoResultNoParamCall2() {\n   test(\"function f(){if (true){return;}else;} f();\",\n         \"{JSCompiler_inline_label_f_0:{\" +\n             \"if(true)break JSCompiler_inline_label_f_0;else;}}\");\n  }\n",
        "begin_line": 1203,
        "end_line": 1207,
        "comment": "",
        "child_ranges": [
            "(line 1204,col 4)-(line 1206,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall3()",
        "snippet": "  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }\n",
        "begin_line": 1209,
        "end_line": 1218,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 5)-(line 1216,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultWithParamCall1()",
        "snippet": "  public void testComplexInlineNoResultWithParamCall1() {\n    test(\"function f(x){a(x)}f(1)\",\n         \"{a(1)}\");\n  }\n",
        "begin_line": 1220,
        "end_line": 1223,
        "comment": "",
        "child_ranges": [
            "(line 1221,col 5)-(line 1222,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultWithParamCall2()",
        "snippet": "  public void testComplexInlineNoResultWithParamCall2() {\n    test(\"function f(x,y){a(x)}var b=1;f(1,b)\",\n         \"var b=1;{a(1)}\");\n  }\n",
        "begin_line": 1225,
        "end_line": 1228,
        "comment": "",
        "child_ranges": [
            "(line 1226,col 5)-(line 1227,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultWithParamCall3()",
        "snippet": "  public void testComplexInlineNoResultWithParamCall3() {\n    test(\"function f(x,y){if (x) y(); return true;}var b=1;f(1,b)\",\n         \"var b=1;{if(1)b();true}\");\n  }\n",
        "begin_line": 1230,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1231,col 5)-(line 1232,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline1()",
        "snippet": "  public void testComplexInline1() {\n    test(\"function f(){if (true){return;}else;} z=f();\",\n         \"{JSCompiler_inline_label_f_0:\" +\n         \"{if(true){z=void 0;\" +\n         \"break JSCompiler_inline_label_f_0}else;z=void 0}}\");\n  }\n",
        "begin_line": 1235,
        "end_line": 1240,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1239,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline2()",
        "snippet": "  public void testComplexInline2() {\n    test(\"function f(){if (true){return;}else return;} z=f();\",\n         \"{JSCompiler_inline_label_f_0:{if(true){z=void 0;\" +\n         \"break JSCompiler_inline_label_f_0}else{z=void 0;\" +\n         \"break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1242,
        "end_line": 1247,
        "comment": "",
        "child_ranges": [
            "(line 1243,col 5)-(line 1246,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline3()",
        "snippet": "  public void testComplexInline3() {\n    test(\"function f(){if (true){return 1;}else return 0;} z=f();\",\n         \"{JSCompiler_inline_label_f_0:{if(true){z=1;\" +\n         \"break JSCompiler_inline_label_f_0}else{z=0;\" +\n         \"break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1249,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 5)-(line 1253,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline4()",
        "snippet": "  public void testComplexInline4() {\n    test(\"function f(x){a(x)} z = f(1)\",\n         \"{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1256,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1257,col 5)-(line 1258,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline5()",
        "snippet": "  public void testComplexInline5() {\n    test(\"function f(x,y){a(x)}var b=1;z=f(1,b)\",\n         \"var b=1;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1261,
        "end_line": 1264,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 5)-(line 1263,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline6()",
        "snippet": "  public void testComplexInline6() {\n    test(\"function f(x,y){if (x) y(); return true;}var b=1;z=f(1,b)\",\n         \"var b=1;{if(1)b();z=true}\");\n  }\n",
        "begin_line": 1266,
        "end_line": 1269,
        "comment": "",
        "child_ranges": [
            "(line 1267,col 5)-(line 1268,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7()",
        "snippet": "  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n",
        "begin_line": 1271,
        "end_line": 1277,
        "comment": "",
        "child_ranges": [
            "(line 1272,col 5)-(line 1276,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline8()",
        "snippet": "  public void testComplexInline8() {\n    test(\"function f(x){a(x)}var z=f(1)\",\n         \"var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1279,
        "end_line": 1282,
        "comment": "",
        "child_ranges": [
            "(line 1280,col 5)-(line 1281,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars1()",
        "snippet": "  public void testComplexInlineVars1() {\n    test(\"function f(){if (true){return;}else;}var z=f();\",\n         \"var z;{JSCompiler_inline_label_f_0:{\" +\n         \"if(true){z=void 0;break JSCompiler_inline_label_f_0}else;z=void 0}}\");\n  }\n",
        "begin_line": 1284,
        "end_line": 1288,
        "comment": "",
        "child_ranges": [
            "(line 1285,col 5)-(line 1287,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars2()",
        "snippet": "  public void testComplexInlineVars2() {\n    test(\"function f(){if (true){return;}else return;}var z=f();\",\n        \"var z;{JSCompiler_inline_label_f_0:{\" +\n        \"if(true){z=void 0;break JSCompiler_inline_label_f_0\" +\n        \"}else{\" +\n        \"z=void 0;break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1290,
        "end_line": 1296,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 5)-(line 1295,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars3()",
        "snippet": "  public void testComplexInlineVars3() {\n    test(\"function f(){if (true){return 1;}else return 0;}var z=f();\",\n         \"var z;{JSCompiler_inline_label_f_0:{if(true){\" +\n         \"z=1;break JSCompiler_inline_label_f_0\" +\n         \"}else{\" +\n         \"z=0;break JSCompiler_inline_label_f_0}z=void 0}}\");\n  }\n",
        "begin_line": 1298,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1299,col 5)-(line 1303,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars4()",
        "snippet": "  public void testComplexInlineVars4() {\n    test(\"function f(x){a(x)}var z = f(1)\",\n         \"var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1306,
        "end_line": 1309,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1308,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars5()",
        "snippet": "  public void testComplexInlineVars5() {\n    test(\"function f(x,y){a(x)}var b=1;var z=f(1,b)\",\n         \"var b=1;var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1311,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1312,col 5)-(line 1313,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars6()",
        "snippet": "  public void testComplexInlineVars6() {\n    test(\"function f(x,y){if (x) y(); return true;}var b=1;var z=f(1,b)\",\n         \"var b=1;var z;{if(1)b();z=true}\");\n  }\n",
        "begin_line": 1316,
        "end_line": 1319,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1318,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7()",
        "snippet": "  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }\n",
        "begin_line": 1321,
        "end_line": 1329,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1328,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars8()",
        "snippet": "  public void testComplexInlineVars8() {\n    test(\"function f(x){a(x)}var x;var z=f(1)\",\n         \"var x;var z;{a(1);z=void 0}\");\n  }\n",
        "begin_line": 1331,
        "end_line": 1334,
        "comment": "",
        "child_ranges": [
            "(line 1332,col 5)-(line 1333,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars9()",
        "snippet": "  public void testComplexInlineVars9() {\n    test(\"function f(x){a(x)}var x;var z=f(1);var y\",\n         \"var x;var z;{a(1);z=void 0}var y\");\n  }\n",
        "begin_line": 1336,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1337,col 5)-(line 1338,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars10()",
        "snippet": "  public void testComplexInlineVars10() {\n    test(\"function f(x){a(x)}var x=blah();var z=f(1);var y=blah();\",\n          \"var x=blah();var z;{a(1);z=void 0}var y=blah()\");\n  }\n",
        "begin_line": 1341,
        "end_line": 1344,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1343,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars11()",
        "snippet": "  public void testComplexInlineVars11() {\n    test(\"function f(x){a(x)}var x=blah();var z=f(1);var y;\",\n         \"var x=blah();var z;{a(1);z=void 0}var y\");\n  }\n",
        "begin_line": 1346,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 5)-(line 1348,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars12()",
        "snippet": "  public void testComplexInlineVars12() {\n    test(\"function f(x){a(x)}var x;var z=f(1);var y=blah();\",\n         \"var x;var z;{a(1);z=void 0}var y=blah()\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1354,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1353,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions1()",
        "snippet": "  public void testComplexInlineInExpresssions1() {\n    test(\"function f(){a()}var z=f()\",\n         \"var z;{a();z=void 0}\");\n  }\n",
        "begin_line": 1356,
        "end_line": 1359,
        "comment": "",
        "child_ranges": [
            "(line 1357,col 5)-(line 1358,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions2()",
        "snippet": "  public void testComplexInlineInExpresssions2() {\n    test(\"function f(){a()}c=z=f()\",\n         \"var JSCompiler_inline_result$$0;\" +\n         \"{a();JSCompiler_inline_result$$0=void 0;}\" +\n         \"c=z=JSCompiler_inline_result$$0\");\n  }\n",
        "begin_line": 1361,
        "end_line": 1366,
        "comment": "",
        "child_ranges": [
            "(line 1362,col 5)-(line 1365,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions3()",
        "snippet": "  public void testComplexInlineInExpresssions3() {\n    test(\"function f(){a()}c=z=f()\",\n        \"var JSCompiler_inline_result$$0;\" +\n        \"{a();JSCompiler_inline_result$$0=void 0;}\" +\n        \"c=z=JSCompiler_inline_result$$0\");\n  }\n",
        "begin_line": 1368,
        "end_line": 1373,
        "comment": "",
        "child_ranges": [
            "(line 1369,col 5)-(line 1372,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions4()",
        "snippet": "  public void testComplexInlineInExpresssions4() {\n    test(\"function f(){a()}if(z=f());\",\n        \"var JSCompiler_inline_result$$0;\" +\n        \"{a();JSCompiler_inline_result$$0=void 0;}\" +\n        \"if(z=JSCompiler_inline_result$$0);\");\n  }\n",
        "begin_line": 1375,
        "end_line": 1380,
        "comment": "",
        "child_ranges": [
            "(line 1376,col 5)-(line 1379,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpresssions5()",
        "snippet": "  public void testComplexInlineInExpresssions5() {\n    test(\"function f(){a()}if(z.y=f());\",\n         \"var JSCompiler_temp_const$$0=z;\" +\n         \"var JSCompiler_inline_result$$1;\" +\n         \"{a();JSCompiler_inline_result$$1=void 0;}\" +\n         \"if(JSCompiler_temp_const$$0.y=JSCompiler_inline_result$$1);\");\n  }\n",
        "begin_line": 1382,
        "end_line": 1388,
        "comment": "",
        "child_ranges": [
            "(line 1383,col 5)-(line 1387,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexNoInline1()",
        "snippet": "  public void testComplexNoInline1() {\n    testSame(\"function f(){a()}while(z=f())continue\");\n  }\n",
        "begin_line": 1390,
        "end_line": 1392,
        "comment": "",
        "child_ranges": [
            "(line 1391,col 5)-(line 1391,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexNoInline2()",
        "snippet": "  public void testComplexNoInline2() {\n    testSame(\"function f(){a()}do;while(z=f())\");\n  }\n",
        "begin_line": 1394,
        "end_line": 1396,
        "comment": "",
        "child_ranges": [
            "(line 1395,col 5)-(line 1395,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample()",
        "snippet": "  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }\n",
        "begin_line": 1398,
        "end_line": 1446,
        "comment": "",
        "child_ranges": [
            "(line 1399,col 5)-(line 1423,col 11)",
            "(line 1425,col 5)-(line 1445,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexSampleNoInline()",
        "snippet": "  public void testComplexSampleNoInline() {\n    testSame(\n      \"foo=function(stylesString,opt_element){\" +\n        \"var styleSheet=null;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"styleSheet=0;\" +\n        \"else \" +\n          \"var head=0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet,stylesString);\" +\n        \"return styleSheet\" +\n     \"};\" +\n     \"goo$zoo=function(element,stylesString){\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element.cssText=stylesString;\" +\n        \"else{\" +\n          \"var propToSet=goog$userAgent$WEBKIT?\\\"innerText\\\":\\\"innerHTML\\\";\" +\n          \"element[propToSet]=stylesString\" +\n        \"}\" +\n      \"}\");\n  }\n",
        "begin_line": 1448,
        "end_line": 1468,
        "comment": "",
        "child_ranges": [
            "(line 1449,col 5)-(line 1467,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexNoVarSub()",
        "snippet": "  public void testComplexNoVarSub() {\n    test(\n        \"function foo(x){\" +\n          \"var x;\" +\n          \"y=x\" +\n        \"}\" +\n        \"foo(1)\",\n\n        \"{y=1}\"\n        );\n   }\n",
        "begin_line": 1471,
        "end_line": 1481,
        "comment": " Test redefinition of parameter name.",
        "child_ranges": [
            "(line 1472,col 5)-(line 1480,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition1()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition1() {\n    test(\"function f(){call(function(){return})}f()\",\n         \"{call(function(){return})}\");\n  }\n",
        "begin_line": 1483,
        "end_line": 1486,
        "comment": "",
        "child_ranges": [
            "(line 1484,col 5)-(line 1485,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n",
        "begin_line": 1488,
        "end_line": 1499,
        "comment": "",
        "child_ranges": [
            "(line 1489,col 5)-(line 1489,col 33)",
            "(line 1492,col 5)-(line 1492,col 59)",
            "(line 1494,col 5)-(line 1494,col 32)",
            "(line 1496,col 5)-(line 1498,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }\n",
        "begin_line": 1501,
        "end_line": 1513,
        "comment": "",
        "child_ranges": [
            "(line 1502,col 5)-(line 1502,col 33)",
            "(line 1505,col 5)-(line 1506,col 67)",
            "(line 1508,col 5)-(line 1508,col 32)",
            "(line 1510,col 5)-(line 1512,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition3()",
        "snippet": "  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }\n",
        "begin_line": 1515,
        "end_line": 1526,
        "comment": "",
        "child_ranges": [
            "(line 1516,col 5)-(line 1516,col 33)",
            "(line 1519,col 5)-(line 1519,col 67)",
            "(line 1521,col 5)-(line 1521,col 32)",
            "(line 1523,col 5)-(line 1524,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDecomposePlusEquals()",
        "snippet": "  public void testDecomposePlusEquals() {\n    test(\"function f(){a=1;return 1} var x = 1; x += f()\",\n        \"var x = 1;\" +\n        \"var JSCompiler_temp_const$$0 = x;\" +\n        \"var JSCompiler_inline_result$$1;\" +\n        \"{a=1;\" +\n        \" JSCompiler_inline_result$$1=1}\" +\n        \"x = JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1;\");\n  }\n",
        "begin_line": 1528,
        "end_line": 1536,
        "comment": "",
        "child_ranges": [
            "(line 1529,col 5)-(line 1535,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall()",
        "snippet": "  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"var JSCompiler_inline_result$$0;\" +\n        \"{\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }\n",
        "begin_line": 1538,
        "end_line": 1559,
        "comment": "",
        "child_ranges": [
            "(line 1539,col 5)-(line 1558,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor1()",
        "snippet": "  public void testInlineConstructor1() {\n    test(\"function f() {} function _g() {f.call(this)}\",\n         \"function _g() {void 0}\");\n  }\n",
        "begin_line": 1561,
        "end_line": 1564,
        "comment": "",
        "child_ranges": [
            "(line 1562,col 5)-(line 1563,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor2()",
        "snippet": "  public void testInlineConstructor2() {\n    test(\"function f() {} f.prototype.a = 0; function _g() {f.call(this)}\",\n         \"function f() {} f.prototype.a = 0; function _g() {void 0}\");\n  }\n",
        "begin_line": 1566,
        "end_line": 1569,
        "comment": "",
        "child_ranges": [
            "(line 1567,col 5)-(line 1568,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor3()",
        "snippet": "  public void testInlineConstructor3() {\n    test(\"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {f.call(this)}\",\n         \"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {{x.call(this)}}\");\n  }\n",
        "begin_line": 1571,
        "end_line": 1576,
        "comment": "",
        "child_ranges": [
            "(line 1572,col 5)-(line 1575,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor4()",
        "snippet": "  public void testInlineConstructor4() {\n    test(\"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {var t = f.call(this)}\",\n         \"function f() {x.call(this)} f.prototype.a = 0;\" +\n         \"function _g() {var t; {x.call(this); t = void 0}}\");\n  }\n",
        "begin_line": 1578,
        "end_line": 1583,
        "comment": "",
        "child_ranges": [
            "(line 1579,col 5)-(line 1582,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining1()",
        "snippet": "  public void testFunctionExpressionInlining1() {\n    test(\"(function(){})()\",\n         \"void 0\");\n  }\n",
        "begin_line": 1585,
        "end_line": 1588,
        "comment": "",
        "child_ranges": [
            "(line 1586,col 5)-(line 1587,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining2()",
        "snippet": "  public void testFunctionExpressionInlining2() {\n    test(\"(function(){foo()})()\",\n         \"{foo()}\");\n  }\n",
        "begin_line": 1590,
        "end_line": 1593,
        "comment": "",
        "child_ranges": [
            "(line 1591,col 5)-(line 1592,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining3()",
        "snippet": "  public void testFunctionExpressionInlining3() {\n    test(\"var a = (function(){return foo()})()\",\n         \"var a = foo()\");\n  }\n",
        "begin_line": 1595,
        "end_line": 1598,
        "comment": "",
        "child_ranges": [
            "(line 1596,col 5)-(line 1597,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionInlining4()",
        "snippet": "  public void testFunctionExpressionInlining4() {\n    test(\"var a; a = 1 + (function(){return foo()})()\",\n         \"var a; a = 1 + foo()\");\n  }\n",
        "begin_line": 1600,
        "end_line": 1603,
        "comment": "",
        "child_ranges": [
            "(line 1601,col 5)-(line 1602,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining1()",
        "snippet": "  public void testFunctionExpressionCallInlining1() {\n    test(\"(function(){}).call(this)\",\n         \"void 0\");\n  }\n",
        "begin_line": 1605,
        "end_line": 1608,
        "comment": "",
        "child_ranges": [
            "(line 1606,col 5)-(line 1607,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining2()",
        "snippet": "  public void testFunctionExpressionCallInlining2() {\n    test(\"(function(){foo(this)}).call(this)\",\n         \"{foo(this)}\");\n  }\n",
        "begin_line": 1610,
        "end_line": 1613,
        "comment": "",
        "child_ranges": [
            "(line 1611,col 5)-(line 1612,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining3()",
        "snippet": "  public void testFunctionExpressionCallInlining3() {\n    test(\"var a = (function(){return foo(this)}).call(this)\",\n         \"var a = foo(this)\");\n  }\n",
        "begin_line": 1615,
        "end_line": 1618,
        "comment": "",
        "child_ranges": [
            "(line 1616,col 5)-(line 1617,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining4()",
        "snippet": "  public void testFunctionExpressionCallInlining4() {\n    test(\"var a; a = 1 + (function(){return foo(this)}).call(this)\",\n         \"var a; a = 1 + foo(this)\");\n  }\n",
        "begin_line": 1620,
        "end_line": 1623,
        "comment": "",
        "child_ranges": [
            "(line 1621,col 5)-(line 1622,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining5()",
        "snippet": "  public void testFunctionExpressionCallInlining5() {\n    test(\"a:(function(){return foo()})()\",\n         \"a:foo()\");\n  }\n",
        "begin_line": 1625,
        "end_line": 1628,
        "comment": "",
        "child_ranges": [
            "(line 1626,col 5)-(line 1627,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining6()",
        "snippet": "  public void testFunctionExpressionCallInlining6() {\n    test(\"a:(function(){return foo()}).call(this)\",\n         \"a:foo()\");\n  }\n",
        "begin_line": 1630,
        "end_line": 1633,
        "comment": "",
        "child_ranges": [
            "(line 1631,col 5)-(line 1632,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining7()",
        "snippet": "  public void testFunctionExpressionCallInlining7() {\n    test(\"a:(function(){})()\",\n         \"a:void 0\");\n  }\n",
        "begin_line": 1635,
        "end_line": 1638,
        "comment": "",
        "child_ranges": [
            "(line 1636,col 5)-(line 1637,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining8()",
        "snippet": "  public void testFunctionExpressionCallInlining8() {\n    test(\"a:(function(){}).call(this)\",\n         \"a:void 0\");\n  }\n",
        "begin_line": 1640,
        "end_line": 1643,
        "comment": "",
        "child_ranges": [
            "(line 1641,col 5)-(line 1642,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining9()",
        "snippet": "  public void testFunctionExpressionCallInlining9() {\n    // ... with unused recursive name.\n    test(\"(function foo(){})()\",\n         \"void 0\");\n  }\n",
        "begin_line": 1645,
        "end_line": 1649,
        "comment": "",
        "child_ranges": [
            "(line 1647,col 5)-(line 1648,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining10()",
        "snippet": "  public void testFunctionExpressionCallInlining10() {\n    // ... with unused recursive name.\n    test(\"(function foo(){}).call(this)\",\n         \"void 0\");\n  }\n",
        "begin_line": 1651,
        "end_line": 1655,
        "comment": "",
        "child_ranges": [
            "(line 1653,col 5)-(line 1654,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11a()",
        "snippet": "  public void testFunctionExpressionCallInlining11a() {\n    // Inline functions that return inner functions.\n    test(\"((function(){return function(){foo()}})())();\", \"{foo()}\");\n  }\n",
        "begin_line": 1657,
        "end_line": 1660,
        "comment": "",
        "child_ranges": [
            "(line 1659,col 5)-(line 1659,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11b()",
        "snippet": "  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"var JSCompiler_inline_result$$0;\" +\n        \"{var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }\n",
        "begin_line": 1662,
        "end_line": 1676,
        "comment": "",
        "child_ranges": [
            "(line 1663,col 5)-(line 1663,col 33)",
            "(line 1665,col 5)-(line 1665,col 69)",
            "(line 1667,col 5)-(line 1667,col 32)",
            "(line 1668,col 5)-(line 1674,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11c()",
        "snippet": "  public void testFunctionExpressionCallInlining11c() {\n    // TODO(johnlenz): Can inline, not temps needed.\n    assumeMinimumCapture = false;\n    testSame(\"function _x() {\" +\n         \"  ((function(){return function(){foo()}})())();\" +\n         \"}\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"function _x() {\" +\n        \"  ((function(){return function(){foo()}})())();\" +\n        \"}\",\n        \"function _x() {\" +\n        \"  {foo()}\" +\n        \"}\");\n  }\n",
        "begin_line": 1678,
        "end_line": 1693,
        "comment": "",
        "child_ranges": [
            "(line 1680,col 5)-(line 1680,col 33)",
            "(line 1681,col 5)-(line 1683,col 14)",
            "(line 1685,col 5)-(line 1685,col 32)",
            "(line 1686,col 5)-(line 1692,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11d()",
        "snippet": "  public void testFunctionExpressionCallInlining11d() {\n    // TODO(johnlenz): Can inline into a function containing eval, if\n    // no names are introduced.\n    assumeMinimumCapture = false;\n    testSame(\"function _x() {\" +\n         \"  eval();\" +\n         \"  ((function(){return function(){foo()}})())();\" +\n         \"}\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"function _x() {\" +\n        \"  eval();\" +\n        \"  ((function(){return function(){foo()}})())();\" +\n        \"}\",\n        \"function _x() {\" +\n        \"  eval();\" +\n        \"  {foo()}\" +\n        \"}\");\n\n  }\n",
        "begin_line": 1695,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1698,col 5)-(line 1698,col 33)",
            "(line 1699,col 5)-(line 1702,col 14)",
            "(line 1704,col 5)-(line 1704,col 32)",
            "(line 1705,col 5)-(line 1713,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11e()",
        "snippet": "  public void testFunctionExpressionCallInlining11e() {\n    // No, don't inline into a function containing eval,\n    // if temps are introduced.\n    assumeMinimumCapture = false;\n    testSame(\"function _x() {\" +\n         \"  eval();\" +\n         \"  ((function(a){return function(){foo()}})())();\" +\n         \"}\");\n\n    assumeMinimumCapture = true;\n    test(\"function _x() {\" +\n        \"  eval();\" +\n        \"  ((function(a){return function(){foo()}})())();\" +\n        \"}\",\n        \"function _x() {\" +\n        \"  eval();\" +\n        \"  {foo();}\" +\n        \"}\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1735,
        "comment": "",
        "child_ranges": [
            "(line 1720,col 5)-(line 1720,col 33)",
            "(line 1721,col 5)-(line 1724,col 14)",
            "(line 1726,col 5)-(line 1726,col 32)",
            "(line 1727,col 5)-(line 1734,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining12()",
        "snippet": "  public void testFunctionExpressionCallInlining12() {\n    // Can't inline functions that recurse.\n    testSame(\"(function foo(){foo()})()\");\n  }\n",
        "begin_line": 1737,
        "end_line": 1740,
        "comment": "",
        "child_ranges": [
            "(line 1739,col 5)-(line 1739,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega()",
        "snippet": "  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }\n",
        "begin_line": 1742,
        "end_line": 1747,
        "comment": "",
        "child_ranges": [
            "(line 1744,col 5)-(line 1746,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining1()",
        "snippet": "  public void testLocalFunctionInlining1() {\n    test(\"function _f(){ function g() {} g() }\",\n         \"function _f(){ void 0 }\");\n  }\n",
        "begin_line": 1749,
        "end_line": 1752,
        "comment": "",
        "child_ranges": [
            "(line 1750,col 5)-(line 1751,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining2()",
        "snippet": "  public void testLocalFunctionInlining2() {\n    test(\"function _f(){ function g() {foo(); bar();} g() }\",\n         \"function _f(){ {foo(); bar();} }\");\n  }\n",
        "begin_line": 1754,
        "end_line": 1757,
        "comment": "",
        "child_ranges": [
            "(line 1755,col 5)-(line 1756,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining3()",
        "snippet": "  public void testLocalFunctionInlining3() {\n    test(\"function _f(){ function g() {foo(); bar();} g() }\",\n         \"function _f(){ {foo(); bar();} }\");\n  }\n",
        "begin_line": 1759,
        "end_line": 1762,
        "comment": "",
        "child_ranges": [
            "(line 1760,col 5)-(line 1761,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining4()",
        "snippet": "  public void testLocalFunctionInlining4() {\n    test(\"function _f(){ function g() {return 1} return g() }\",\n         \"function _f(){ return 1 }\");\n  }\n",
        "begin_line": 1764,
        "end_line": 1767,
        "comment": "",
        "child_ranges": [
            "(line 1765,col 5)-(line 1766,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining5()",
        "snippet": "  public void testLocalFunctionInlining5() {\n    testSame(\"function _f(){ function g() {this;} g() }\");\n  }\n",
        "begin_line": 1769,
        "end_line": 1771,
        "comment": "",
        "child_ranges": [
            "(line 1770,col 5)-(line 1770,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInlining6()",
        "snippet": "  public void testLocalFunctionInlining6() {\n    testSame(\"function _f(){ function g() {this;} return g; }\");\n  }\n",
        "begin_line": 1773,
        "end_line": 1775,
        "comment": "",
        "child_ranges": [
            "(line 1774,col 5)-(line 1774,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly1()",
        "snippet": "  public void testLocalFunctionInliningOnly1() {\n    this.allowGlobalFunctionInlining = true;\n    test(\"function f(){} f()\", \"void 0;\");\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n  }\n",
        "begin_line": 1777,
        "end_line": 1782,
        "comment": "",
        "child_ranges": [
            "(line 1778,col 5)-(line 1778,col 44)",
            "(line 1779,col 5)-(line 1779,col 42)",
            "(line 1780,col 5)-(line 1780,col 45)",
            "(line 1781,col 5)-(line 1781,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly2()",
        "snippet": "  public void testLocalFunctionInliningOnly2() {\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n\n    test(\"function f(){ function g() {return 1} return g() }; f();\",\n         \"function f(){ return 1 }; f();\");\n  }\n",
        "begin_line": 1784,
        "end_line": 1790,
        "comment": "",
        "child_ranges": [
            "(line 1785,col 5)-(line 1785,col 45)",
            "(line 1786,col 5)-(line 1786,col 35)",
            "(line 1788,col 5)-(line 1789,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly3()",
        "snippet": "  public void testLocalFunctionInliningOnly3() {\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n\n    test(\"(function(){ function g() {return 1} return g() })();\",\n         \"(function(){ return 1 })();\");\n  }\n",
        "begin_line": 1792,
        "end_line": 1798,
        "comment": "",
        "child_ranges": [
            "(line 1793,col 5)-(line 1793,col 45)",
            "(line 1794,col 5)-(line 1794,col 35)",
            "(line 1796,col 5)-(line 1797,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLocalFunctionInliningOnly4()",
        "snippet": "  public void testLocalFunctionInliningOnly4() {\n    this.allowGlobalFunctionInlining = false;\n    testSame(\"function f(){} f()\");\n\n    test(\"(function(){ return (function() {return 1})() })();\",\n         \"(function(){ return 1 })();\");\n  }\n",
        "begin_line": 1800,
        "end_line": 1806,
        "comment": "",
        "child_ranges": [
            "(line 1801,col 5)-(line 1801,col 45)",
            "(line 1802,col 5)-(line 1802,col 35)",
            "(line 1804,col 5)-(line 1805,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis1()",
        "snippet": "  public void testInlineWithThis1() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call();\");\n    testSame(\"function f(){this} f.call();\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call();\", \"{}\");\n    test(\"function f(){this} f.call();\",\n         \"{void 0;}\");\n  }\n",
        "begin_line": 1808,
        "end_line": 1820,
        "comment": "",
        "child_ranges": [
            "(line 1809,col 5)-(line 1809,col 29)",
            "(line 1812,col 5)-(line 1812,col 41)",
            "(line 1813,col 5)-(line 1813,col 45)",
            "(line 1815,col 5)-(line 1815,col 28)",
            "(line 1817,col 5)-(line 1817,col 43)",
            "(line 1818,col 5)-(line 1819,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis2()",
        "snippet": "  public void testInlineWithThis2() {\n    // \"this\" can always be replaced with \"this\"\n    assumeStrictThis = false;\n    test(\"function f(){} f.call(this);\", \"void 0\");\n\n    assumeStrictThis = true;\n    test(\"function f(){} f.call(this);\", \"void 0\");\n  }\n",
        "begin_line": 1822,
        "end_line": 1829,
        "comment": "",
        "child_ranges": [
            "(line 1824,col 5)-(line 1824,col 29)",
            "(line 1825,col 5)-(line 1825,col 51)",
            "(line 1827,col 5)-(line 1827,col 28)",
            "(line 1828,col 5)-(line 1828,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis3()",
        "snippet": "  public void testInlineWithThis3() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call([]);\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call([]);\", \"{}\");\n  }\n",
        "begin_line": 1831,
        "end_line": 1840,
        "comment": "",
        "child_ranges": [
            "(line 1832,col 5)-(line 1832,col 29)",
            "(line 1835,col 5)-(line 1835,col 43)",
            "(line 1837,col 5)-(line 1837,col 28)",
            "(line 1839,col 5)-(line 1839,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis4()",
        "snippet": "  public void testInlineWithThis4() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call(new g);\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call(new g);\",\n         \"{var JSCompiler_inline_this_0=new g}\");\n  }\n",
        "begin_line": 1842,
        "end_line": 1852,
        "comment": "",
        "child_ranges": [
            "(line 1843,col 5)-(line 1843,col 29)",
            "(line 1846,col 5)-(line 1846,col 46)",
            "(line 1848,col 5)-(line 1848,col 28)",
            "(line 1850,col 5)-(line 1851,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis5()",
        "snippet": "  public void testInlineWithThis5() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){} f.call(g());\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){} f.call(g());\",\n         \"{var JSCompiler_inline_this_0=g()}\");\n  }\n",
        "begin_line": 1854,
        "end_line": 1864,
        "comment": "",
        "child_ranges": [
            "(line 1855,col 5)-(line 1855,col 29)",
            "(line 1858,col 5)-(line 1858,col 44)",
            "(line 1860,col 5)-(line 1860,col 28)",
            "(line 1862,col 5)-(line 1863,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis6()",
        "snippet": "  public void testInlineWithThis6() {\n    assumeStrictThis = false;\n    // If no \"this\" is provided it might need to be coerced to the global\n    // \"this\".\n    testSame(\"function f(){this} f.call(new g);\");\n\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(){this} f.call(new g);\",\n         \"{var JSCompiler_inline_this_0=new g;JSCompiler_inline_this_0}\");\n  }\n",
        "begin_line": 1866,
        "end_line": 1876,
        "comment": "",
        "child_ranges": [
            "(line 1867,col 5)-(line 1867,col 29)",
            "(line 1870,col 5)-(line 1870,col 50)",
            "(line 1872,col 5)-(line 1872,col 28)",
            "(line 1874,col 5)-(line 1875,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7()",
        "snippet": "  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }\n",
        "begin_line": 1878,
        "end_line": 1885,
        "comment": "",
        "child_ranges": [
            "(line 1879,col 5)-(line 1879,col 28)",
            "(line 1881,col 5)-(line 1882,col 61)",
            "(line 1883,col 5)-(line 1884,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator()",
        "snippet": "  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }\n",
        "begin_line": 1888,
        "end_line": 1957,
        "comment": " http://en.wikipedia.org/wiki/Fixed_point_combinator#Y_combinator",
        "child_ranges": [
            "(line 1889,col 5)-(line 1889,col 33)",
            "(line 1890,col 5)-(line 1912,col 26)",
            "(line 1914,col 5)-(line 1914,col 32)",
            "(line 1915,col 5)-(line 1956,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testRenamePropertyFunction()",
        "snippet": "  public void testRenamePropertyFunction() {\n    testSame(\"function JSCompiler_renameProperty(x) {return x} \" +\n             \"JSCompiler_renameProperty('foo')\");\n  }\n",
        "begin_line": 1959,
        "end_line": 1962,
        "comment": "",
        "child_ranges": [
            "(line 1960,col 5)-(line 1961,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testReplacePropertyFunction()",
        "snippet": "  public void testReplacePropertyFunction() {\n    // baseline: an alias doesn't prevents declaration removal, but not\n    // inlining.\n    test(\"function f(x) {return x} \" +\n         \"foo(window, f); f(1)\",\n         \"function f(x) {return x} \" +\n         \"foo(window, f); 1\");\n    // a reference passed to JSCompiler_ObjectPropertyString prevents inlining\n    // as well.\n    testSame(\"function f(x) {return x} \" +\n             \"new JSCompiler_ObjectPropertyString(window, f); f(1)\");\n  }\n",
        "begin_line": 1964,
        "end_line": 1975,
        "comment": "",
        "child_ranges": [
            "(line 1967,col 5)-(line 1970,col 30)",
            "(line 1973,col 5)-(line 1974,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithClosureContainingThis()",
        "snippet": "  public void testInlineWithClosureContainingThis() {\n    test(\"(function (){return f(function(){return this})})();\",\n         \"f(function(){return this})\");\n  }\n",
        "begin_line": 1977,
        "end_line": 1980,
        "comment": "",
        "child_ranges": [
            "(line 1978,col 5)-(line 1979,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue5159924a()",
        "snippet": "  public void testIssue5159924a() {\n    test(\"function f() { if (x()) return y() }\\n\" +\n         \"while(1){ var m = f() || z() }\",\n         \"for(;1;) {\" +\n         \"  var JSCompiler_inline_result$$0;\" +\n         \"  {\" +\n         \"    JSCompiler_inline_label_f_1: {\" +\n         \"      if(x()) {\" +\n         \"        JSCompiler_inline_result$$0 = y();\" +\n         \"        break JSCompiler_inline_label_f_1\" +\n         \"      }\" +\n         \"      JSCompiler_inline_result$$0 = void 0;\" +\n         \"    }\" +\n         \"  }\" +\n         \"  var m=JSCompiler_inline_result$$0 || z()\" +\n         \"}\");\n  }\n",
        "begin_line": 1982,
        "end_line": 1998,
        "comment": "",
        "child_ranges": [
            "(line 1983,col 5)-(line 1997,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue5159924b()",
        "snippet": "  public void testIssue5159924b() {\n    test(\"function f() { if (x()) return y() }\\n\" +\n         \"while(1){ var m = f() }\",\n         \"for(;1;){\" +\n         \"  var m;\" +\n         \"  {\" +\n         \"    JSCompiler_inline_label_f_0: { \" +\n         \"      if(x()) {\" +\n         \"        m = y();\" +\n         \"        break JSCompiler_inline_label_f_0\" +\n         \"      }\" +\n         \"      m = void 0\" +\n         \"    }\" +\n         \"  }\" +\n         \"}\");\n  }\n",
        "begin_line": 2000,
        "end_line": 2015,
        "comment": "",
        "child_ranges": [
            "(line 2001,col 5)-(line 2014,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testInlineObject()",
        "snippet": "  public void testInlineObject() {\n    new StringCompare().testInlineObject();\n  }\n",
        "begin_line": 2017,
        "end_line": 2019,
        "comment": "",
        "child_ranges": [
            "(line 2018,col 5)-(line 2018,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.StringCompare()",
        "snippet": "    StringCompare() {\n      super(\"\", false);\n      this.enableNormalize();\n      this.enableMarkNoSideEffects();\n    }\n",
        "begin_line": 2024,
        "end_line": 2028,
        "comment": "",
        "child_ranges": [
            "(line 2025,col 7)-(line 2025,col 23)",
            "(line 2026,col 7)-(line 2026,col 29)",
            "(line 2027,col 7)-(line 2027,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.setUp()",
        "snippet": "    @Override\n    public void setUp() throws Exception {\n      super.setUp();\n      super.enableLineNumberCheck(true);\n      allowGlobalFunctionInlining = true;\n    }\n",
        "begin_line": 2030,
        "end_line": 2035,
        "comment": "",
        "child_ranges": [
            "(line 2032,col 7)-(line 2032,col 20)",
            "(line 2033,col 7)-(line 2033,col 40)",
            "(line 2034,col 7)-(line 2034,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "    @Override\n    protected CompilerPass getProcessor(Compiler compiler) {\n      compiler.resetUniqueNameId();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          allowGlobalFunctionInlining,\n          true,  // allowLocalFunctionInlining\n          true,  // allowBlockInlining\n          true,  // assumeStrictThis\n          true); // assumeMinimumCapture\n    }\n",
        "begin_line": 2037,
        "end_line": 2048,
        "comment": "",
        "child_ranges": [
            "(line 2039,col 7)-(line 2039,col 35)",
            "(line 2040,col 7)-(line 2047,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.StringCompare.testInlineObject()",
        "snippet": "    public void testInlineObject() {\n      allowGlobalFunctionInlining = false;\n      // TODO(johnlenz): normalize the AST so an AST comparison can be done.\n      // As is, the expected AST does not match the actual correct result:\n      // The AST matches \"g.a()\" with a FREE_CALL annotation, but this as\n      // expected string would fail as it won't be mark as a free call.\n      // \"(0,g.a)()\" matches the output, but not the resulting AST.\n      test(\"function inner(){function f(){return g.a}(f())()}\",\n           \"function inner(){(0,g.a)()}\");\n    }\n",
        "begin_line": 2050,
        "end_line": 2059,
        "comment": "",
        "child_ranges": [
            "(line 2051,col 7)-(line 2051,col 42)",
            "(line 2057,col 7)-(line 2058,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818()",
        "snippet": "  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout=function(){\" +\n        \"  var self$$2=a.b;\" +\n        \"  var JSCompiler_temp_const$$0=goog.Uri;\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  {\" +\n        \"    var JSCompiler_inline_result$$0;\" +\n        \"    {\" +\n        \"      var self$$inline_1=self$$2;\" +\n        \"      if(!self$$inline_1.domServices_) {\" +\n        \"        self$$inline_1.domServices_=goog$component$DomServices.get(self$$inline_1.appContext_);\" +\n        \"      }\" +\n        \"      JSCompiler_inline_result$$0=self$$inline_1.domServices_;\" +\n        \"    }\" +\n        \"    JSCompiler_inline_result$$1=JSCompiler_inline_result$$0.getDomHelper().getWindow();\" +\n        \"  }\" +\n        \"  var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.location.href)\" +\n        \"}\");\n  }\n",
        "begin_line": 2062,
        "end_line": 2098,
        "comment": "",
        "child_ranges": [
            "(line 2063,col 5)-(line 2097,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue423()",
        "snippet": "  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 2100,
        "end_line": 2152,
        "comment": "",
        "child_ranges": [
            "(line 2101,col 5)-(line 2101,col 33)",
            "(line 2102,col 5)-(line 2126,col 22)",
            "(line 2128,col 5)-(line 2128,col 32)",
            "(line 2129,col 5)-(line 2151,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue728()",
        "snippet": "  public void testIssue728() {\n    String f = \"var f = function() { return false; };\";\n    StringBuilder calls = new StringBuilder();\n    StringBuilder folded = new StringBuilder();\n    for (int i = 0; i < 30; i++) {\n      calls.append(\"if (!f()) alert('x');\");\n      folded.append(\"if (!false) alert('x');\");\n    }\n\n    test(f + calls, folded.toString());\n  }\n",
        "begin_line": 2154,
        "end_line": 2164,
        "comment": "",
        "child_ranges": [
            "(line 2155,col 5)-(line 2155,col 55)",
            "(line 2156,col 5)-(line 2156,col 46)",
            "(line 2157,col 5)-(line 2157,col 47)",
            "(line 2158,col 5)-(line 2161,col 5)",
            "(line 2163,col 5)-(line 2163,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous1()",
        "snippet": "  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }\n",
        "begin_line": 2166,
        "end_line": 2178,
        "comment": "",
        "child_ranges": [
            "(line 2167,col 5)-(line 2167,col 33)",
            "(line 2168,col 5)-(line 2171,col 47)",
            "(line 2173,col 5)-(line 2173,col 32)",
            "(line 2174,col 5)-(line 2177,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous2()",
        "snippet": "  public void testAnonymous2() {\n    testSame(\"(function(){eval();(function(){var b=a;a++;alert(b)})()})();\");\n  }\n",
        "begin_line": 2180,
        "end_line": 2182,
        "comment": "",
        "child_ranges": [
            "(line 2181,col 5)-(line 2181,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous3()",
        "snippet": "  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }\n",
        "begin_line": 2184,
        "end_line": 2195,
        "comment": "",
        "child_ranges": [
            "(line 2186,col 5)-(line 2186,col 33)",
            "(line 2187,col 5)-(line 2187,col 69)",
            "(line 2189,col 5)-(line 2189,col 32)",
            "(line 2190,col 5)-(line 2191,col 61)",
            "(line 2193,col 5)-(line 2194,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testLoopWithFunctionWithFunction()",
        "snippet": "  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 2198,
        "end_line": 2231,
        "comment": "",
        "child_ranges": [
            "(line 2199,col 5)-(line 2199,col 32)",
            "(line 2200,col 5)-(line 2230,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction()",
        "snippet": "  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 2233,
        "end_line": 2257,
        "comment": "",
        "child_ranges": [
            "(line 2234,col 5)-(line 2234,col 32)",
            "(line 2235,col 5)-(line 2256,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCrossModuleInlining1()",
        "snippet": "  public void testCrossModuleInlining1() {\n    test(createModuleChain(\n             // m1\n             \"function foo(){return f(1)+g(2)+h(3);}\",\n             // m2\n             \"foo()\"\n             ),\n         new String[] {\n             // m1\n             \"\",\n             // m2\n             \"f(1)+g(2)+h(3);\"\n            }\n        );\n  }\n",
        "begin_line": 2260,
        "end_line": 2274,
        "comment": " Inline a single reference function into deeper modules",
        "child_ranges": [
            "(line 2261,col 5)-(line 2273,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCrossModuleInlining2()",
        "snippet": "  public void testCrossModuleInlining2() {\n    testSame(createModuleChain(\n                // m1\n                \"foo()\",\n                // m2\n                \"function foo(){return f(1)+g(2)+h(3);}\"\n                )\n            );\n\n    test(createModuleChain(\n             // m1\n             \"foo()\",\n             // m2\n             \"function foo(){return f();}\"\n             ),\n         new String[] {\n             // m1\n             \"f();\",\n             // m2\n             \"\"\n            }\n        );\n  }\n",
        "begin_line": 2278,
        "end_line": 2300,
        "comment": " is cheaper than the call itself.",
        "child_ranges": [
            "(line 2279,col 5)-(line 2285,col 14)",
            "(line 2287,col 5)-(line 2299,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testCrossModuleInlining3()",
        "snippet": "  public void testCrossModuleInlining3() {\n    testSame(createModuleChain(\n                // m1\n                \"foo()\",\n                // m2\n                \"function foo(){return f(1)+g(2)+h(3);}\",\n                // m3\n                \"foo()\"\n                )\n            );\n\n    test(createModuleChain(\n             // m1\n             \"foo()\",\n             // m2\n             \"function foo(){return f();}\",\n             // m3\n             \"foo()\"\n             ),\n         new String[] {\n             // m1\n             \"f();\",\n             // m2\n             \"\",\n             // m3\n             \"f();\"\n            }\n         );\n  }\n",
        "begin_line": 2304,
        "end_line": 2332,
        "comment": " is cheaper than the call itself.",
        "child_ranges": [
            "(line 2305,col 5)-(line 2313,col 14)",
            "(line 2315,col 5)-(line 2331,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.test6671158()",
        "snippet": "  public void test6671158() {\n    test(\n        \"function f() {return g()}\" +\n        \"function Y(a){a.loader_()}\" +\n        \"function _Z(){}\" +\n        \"function _X() { new _Z(a,b, Y(singleton), f()) }\",\n\n        \"function _Z(){}\" +\n        \"function _X(){\" +\n        \"  var JSCompiler_temp_const$$2=_Z;\" +\n        \"  var JSCompiler_temp_const$$1=a;\" +\n        \"  var JSCompiler_temp_const$$0=b;\" +\n        \"  var JSCompiler_inline_result$$3;\" +\n        \"  {\" +\n        \"    singleton.loader_();\" +\n        \"    JSCompiler_inline_result$$3=void 0;\" +\n        \"  }\" +\n        \"  new JSCompiler_temp_const$$2(\" +\n        \"    JSCompiler_temp_const$$1,\" +\n        \"    JSCompiler_temp_const$$0,\" +\n        \"    JSCompiler_inline_result$$3,\" +\n        \"    g())}\");\n  }\n",
        "begin_line": 2334,
        "end_line": 2356,
        "comment": "",
        "child_ranges": [
            "(line 2335,col 5)-(line 2355,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.test8609285a()",
        "snippet": "  public void test8609285a() {\n   test(\n       \"function f(x){ for(x in y){} } f()\",\n       \"{var x$$inline_0=void 0;for(x$$inline_0 in y);}\");\n  }\n",
        "begin_line": 2358,
        "end_line": 2362,
        "comment": "",
        "child_ranges": [
            "(line 2359,col 4)-(line 2361,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.test8609285b()",
        "snippet": "  public void test8609285b() {\n    test(\n        \"function f(x){ for(var x in y){} } f()\",\n        \"{var x$$inline_0=void 0;for(x$$inline_0 in y);}\");\n   }\n",
        "begin_line": 2364,
        "end_line": 2368,
        "comment": "",
        "child_ranges": [
            "(line 2365,col 5)-(line 2367,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctionsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
        "signature": "com.google.javascript.jscomp.InlineFunctionsTest.testIssue1101()",
        "snippet": "  public void testIssue1101() {\n    test(\n        \"var x = (function (saved) {\" +\n        \"    return foo(obj) + saved;\" +\n        \"  })(obj[\\\"prop\\\"]);\",\n        \"var x;\" +\n        \"{\" +\n        \"  var saved$$inline_0=obj[\\\"prop\\\"];x=foo(obj)+saved$$inline_0\" +\n        \"}\");\n  }\n",
        "begin_line": 2370,
        "end_line": 2379,
        "comment": "",
        "child_ranges": [
            "(line 2371,col 5)-(line 2378,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 49)",
            "(line 140,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 21)",
            "(line 161,col 5)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 188,col 5)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 194,col 5)-(line 195,col 65)",
            "(line 196,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 55)",
            "(line 199,col 5)-(line 199,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 29)",
            "(line 254,col 5)-(line 254,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": " TODO(nicksantos): This pass doesn't get run anymore. It should be removed.",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableComputeSideEffects()",
        "snippet": "  void enableComputeSideEffects() {\n    computeSideEffects  = true;\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Run the PureFunctionIdentifier pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(), level);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 40)",
            "(line 350,col 5)-(line 350,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 49)",
            "(line 441,col 5)-(line 441,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 458,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 41)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 43)",
            "(line 466,col 5)-(line 468,col 5)",
            "(line 471,col 5)-(line 471,col 39)",
            "(line 472,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 71)",
            "(line 477,col 5)-(line 477,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 483,col 5)",
            "(line 484,col 5)-(line 484,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 537,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 51)",
            "(line 543,col 5)-(line 545,col 5)",
            "(line 546,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 547,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 41)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 49)",
            "(line 674,col 5)-(line 674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 726,col 5)-(line 737,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 751,
        "end_line": 754,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (!runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (computeSideEffects && i == 0) {\n          PureFunctionIdentifier.Driver mark =\n              new PureFunctionIdentifier.Driver(compiler, null, false);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        if (runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called.\"\n            + \"\\nOriginal: \" + mainRootClone.toStringTree()\n            + \"\\nNew: \" + mainRoot.toStringTree(), hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 1013,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 773,col 5)-(line 773,col 51)",
            "(line 774,col 5)-(line 774,col 44)",
            "(line 776,col 5)-(line 776,col 39)",
            "(line 777,col 5)-(line 778,col 66)",
            "(line 779,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 787,col 5)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 40)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 793,col 54)",
            "(line 794,col 5)-(line 794,col 50)",
            "(line 795,col 5)-(line 795,col 76)",
            "(line 797,col 5)-(line 797,col 45)",
            "(line 798,col 5)-(line 798,col 68)",
            "(line 799,col 5)-(line 799,col 34)",
            "(line 800,col 5)-(line 800,col 59)",
            "(line 801,col 5)-(line 801,col 35)",
            "(line 803,col 5)-(line 804,col 39)",
            "(line 806,col 5)-(line 868,col 5)",
            "(line 870,col 5)-(line 1012,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 57)",
            "(line 1018,col 5)-(line 1018,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 1024,
        "end_line": 1042,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)",
            "(line 1026,col 5)-(line 1026,col 51)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 55)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1033,col 66)",
            "(line 1034,col 5)-(line 1034,col 44)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1037,col 5)-(line 1040,col 5)",
            "(line 1041,col 5)-(line 1041,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String input, String expectedExtern) {\n    testExternChanges(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1046,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String extern, String input, String expectedExtern) {\n    Compiler compiler = createCompiler();\n    CompilerOptions options = getOptions();\n    compiler.init(\n        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n        options);\n    compiler.parseInputs();\n    assertFalse(compiler.hasErrors());\n\n    Node externsAndJs = compiler.getRoot();\n    Node root = externsAndJs.getLastChild();\n\n    Node externs = externsAndJs.getFirstChild();\n\n    Node expected = compiler.parseTestCode(expectedExtern);\n    assertFalse(compiler.hasErrors());\n\n    (getProcessor(compiler)).process(externs, root);\n\n    String externsCode = compiler.toSource(externs);\n    String expectedCode = compiler.toSource(expected);\n\n    assertEquals(expectedCode, externsCode);\n  }\n",
        "begin_line": 1049,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1051,col 41)",
            "(line 1052,col 5)-(line 1052,col 43)",
            "(line 1053,col 5)-(line 1056,col 17)",
            "(line 1057,col 5)-(line 1057,col 27)",
            "(line 1058,col 5)-(line 1058,col 38)",
            "(line 1060,col 5)-(line 1060,col 43)",
            "(line 1061,col 5)-(line 1061,col 44)",
            "(line 1063,col 5)-(line 1063,col 48)",
            "(line 1065,col 5)-(line 1065,col 59)",
            "(line 1066,col 5)-(line 1066,col 38)",
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1070,col 5)-(line 1070,col 52)",
            "(line 1071,col 5)-(line 1071,col 54)",
            "(line 1073,col 5)-(line 1073,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1084,
        "end_line": 1090,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1088,col 5)",
            "(line 1089,col 5)-(line 1089,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1096,
        "end_line": 1102,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1097,col 5)-(line 1097,col 47)",
            "(line 1098,col 5)-(line 1100,col 5)",
            "(line 1101,col 5)-(line 1101,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 48)",
            "(line 1111,col 5)-(line 1111,col 47)",
            "(line 1112,col 5)-(line 1114,col 5)",
            "(line 1115,col 5)-(line 1115,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1123,
        "end_line": 1129,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 47)",
            "(line 1125,col 5)-(line 1127,col 5)",
            "(line 1128,col 5)-(line 1128,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1135,
        "end_line": 1142,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1136,col 5)-(line 1136,col 53)",
            "(line 1137,col 5)-(line 1140,col 5)",
            "(line 1141,col 5)-(line 1141,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1145,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 7)-(line 1146,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1149,
        "end_line": 1150,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1152,
        "end_line": 1153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1157,col 39)",
            "(line 1158,col 5)-(line 1158,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1161,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1166,
        "end_line": 1178,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 52)",
            "(line 1168,col 5)-(line 1176,col 39)",
            "(line 1177,col 5)-(line 1177,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineFunctionsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-6805bcb7-b07c-4370-a44e-83ae8b6fd3e2.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1170,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 13)-(line 1173,col 13)"
        ]
    }
]