[
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestMonthDay_Basics.class);\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.TestMonthDay_Basics(java.lang.String)",
        "snippet": "    public TestMonthDay_Basics(String name) {\n        super(name);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        zone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(LONDON);\n    }\n",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 75,col 41)",
            "(line 76,col 9)-(line 76,col 40)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(zone);\n        zone = null;\n    }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 47)",
            "(line 81,col 9)-(line 81,col 38)",
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGet()",
        "snippet": "    public void testGet() {\n        MonthDay test = new MonthDay();\n        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n        try {\n            test.get(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            test.get(DateTimeFieldType.year());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 86,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 39)",
            "(line 88,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 89,col 66)",
            "(line 90,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 97,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testSize()",
        "snippet": "    public void testSize() {\n        MonthDay test = new MonthDay();\n        assertEquals(2, test.size());\n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 39)",
            "(line 102,col 9)-(line 102,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGetFieldType()",
        "snippet": "    public void testGetFieldType() {\n        MonthDay test = new MonthDay(COPTIC_PARIS);\n        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(0));\n        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(1));\n\n        try {\n            test.getFieldType(-1);\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            test.getFieldType(2);\n        } catch (IndexOutOfBoundsException ex) {}\n    }\n",
        "begin_line": 105,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 74)",
            "(line 108,col 9)-(line 108,col 73)",
            "(line 110,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 115,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGetFieldTypes()",
        "snippet": "    public void testGetFieldTypes() {\n        MonthDay test = new MonthDay(COPTIC_PARIS);\n        DateTimeFieldType[] fields = test.getFieldTypes();\n        assertEquals(2, fields.length);\n        assertSame(DateTimeFieldType.monthOfYear(), fields[0]);\n        assertSame(DateTimeFieldType.dayOfMonth(), fields[1]);\n        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n    }\n",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 39)",
            "(line 122,col 9)-(line 122,col 63)",
            "(line 123,col 9)-(line 123,col 62)",
            "(line 124,col 9)-(line 124,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGetField()",
        "snippet": "    public void testGetField() {\n        MonthDay test = new MonthDay(COPTIC_PARIS);\n        assertSame(COPTIC_UTC.monthOfYear(), test.getField(0));\n        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(1));\n        try {\n            test.getField(-1);\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            test.getField(2);\n        } catch (IndexOutOfBoundsException ex) {}\n    }\n",
        "begin_line": 127,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 63)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 133,col 49)",
            "(line 134,col 9)-(line 136,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGetFields()",
        "snippet": "    public void testGetFields() {\n        MonthDay test = new MonthDay(COPTIC_PARIS);\n        DateTimeField[] fields = test.getFields();\n        assertEquals(2, fields.length);\n        assertSame(COPTIC_UTC.monthOfYear(), fields[0]);\n        assertSame(COPTIC_UTC.dayOfMonth(), fields[1]);\n        assertNotSame(test.getFields(), test.getFields());\n    }\n",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 50)",
            "(line 142,col 9)-(line 142,col 39)",
            "(line 143,col 9)-(line 143,col 56)",
            "(line 144,col 9)-(line 144,col 55)",
            "(line 145,col 9)-(line 145,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGetValue()",
        "snippet": "    public void testGetValue() {\n        MonthDay test = new MonthDay();\n        assertEquals(6, test.getValue(0));\n        assertEquals(9, test.getValue(1));\n        try {\n            test.getValue(-1);\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            test.getValue(2);\n        } catch (IndexOutOfBoundsException ex) {}\n    }\n",
        "begin_line": 148,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 39)",
            "(line 150,col 9)-(line 150,col 42)",
            "(line 151,col 9)-(line 151,col 42)",
            "(line 152,col 9)-(line 154,col 49)",
            "(line 155,col 9)-(line 157,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testGetValues()",
        "snippet": "    public void testGetValues() {\n        MonthDay test = new MonthDay();\n        int[] values = test.getValues();\n        assertEquals(2, values.length);\n        assertEquals(6, values[0]);\n        assertEquals(9, values[1]);\n        assertNotSame(test.getValues(), test.getValues());\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 39)",
            "(line 162,col 9)-(line 162,col 40)",
            "(line 163,col 9)-(line 163,col 39)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 165,col 35)",
            "(line 166,col 9)-(line 166,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testIsSupported()",
        "snippet": "    public void testIsSupported() {\n        MonthDay test = new MonthDay(COPTIC_PARIS);\n        assertEquals(false, test.isSupported(DateTimeFieldType.year()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n        assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));\n    }\n",
        "begin_line": 169,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 51)",
            "(line 171,col 9)-(line 171,col 72)",
            "(line 172,col 9)-(line 172,col 78)",
            "(line 173,col 9)-(line 173,col 77)",
            "(line 174,col 9)-(line 174,col 77)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testEqualsHashCode()",
        "snippet": "    public void testEqualsHashCode() {\n        MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS);\n        MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS);\n        assertEquals(true, test1.equals(test2));\n        assertEquals(true, test2.equals(test1));\n        assertEquals(true, test1.equals(test1));\n        assertEquals(true, test2.equals(test2));\n        assertEquals(true, test1.hashCode() == test2.hashCode());\n        assertEquals(true, test1.hashCode() == test1.hashCode());\n        assertEquals(true, test2.hashCode() == test2.hashCode());\n        \n        MonthDay test3 = new MonthDay(10, 6);\n        assertEquals(false, test1.equals(test3));\n        assertEquals(false, test2.equals(test3));\n        assertEquals(false, test3.equals(test1));\n        assertEquals(false, test3.equals(test2));\n        assertEquals(false, test1.hashCode() == test3.hashCode());\n        assertEquals(false, test2.hashCode() == test3.hashCode());\n        \n        assertEquals(false, test1.equals(\"Hello\"));\n        assertEquals(true, test1.equals(new MockMD()));\n        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n    }\n",
        "begin_line": 177,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 59)",
            "(line 179,col 9)-(line 179,col 59)",
            "(line 180,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 181,col 48)",
            "(line 182,col 9)-(line 182,col 48)",
            "(line 183,col 9)-(line 183,col 48)",
            "(line 184,col 9)-(line 184,col 65)",
            "(line 185,col 9)-(line 185,col 65)",
            "(line 186,col 9)-(line 186,col 65)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 49)",
            "(line 190,col 9)-(line 190,col 49)",
            "(line 191,col 9)-(line 191,col 49)",
            "(line 192,col 9)-(line 192,col 49)",
            "(line 193,col 9)-(line 193,col 66)",
            "(line 194,col 9)-(line 194,col 66)",
            "(line 196,col 9)-(line 196,col 51)",
            "(line 197,col 9)-(line 197,col 55)",
            "(line 198,col 9)-(line 198,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.MockMD.getChronology()",
        "snippet": "        @Override\n        public Chronology getChronology() {\n            return COPTIC_UTC;\n        }\n",
        "begin_line": 203,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.MockMD.getFields()",
        "snippet": "        @Override\n        public DateTimeField[] getFields() {\n            return new DateTimeField[] {\n                COPTIC_UTC.monthOfYear(),\n                COPTIC_UTC.dayOfMonth()\n            };\n        }\n",
        "begin_line": 208,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 210,col 13)-(line 213,col 14)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.MockMD.getValues()",
        "snippet": "        @Override\n        public int[] getValues() {\n            return new int[] {10, 6};\n        }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 218,col 13)-(line 218,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        MonthDay test1 = new MonthDay(6, 6);\n        MonthDay test1a = new MonthDay(6, 6);\n        assertEquals(0, test1.compareTo(test1a));\n        assertEquals(0, test1a.compareTo(test1));\n        assertEquals(0, test1.compareTo(test1));\n        assertEquals(0, test1a.compareTo(test1a));\n        \n        MonthDay test2 = new MonthDay(6, 7);\n        assertEquals(-1, test1.compareTo(test2));\n        assertEquals(+1, test2.compareTo(test1));\n        \n        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n        assertEquals(-1, test1.compareTo(test3));\n        assertEquals(+1, test3.compareTo(test1));\n        assertEquals(0, test3.compareTo(test2));\n        \n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.monthOfYear(),\n            DateTimeFieldType.dayOfMonth()\n        };\n        int[] values = new int[] {6, 6};\n        Partial p = new Partial(types, values);\n        assertEquals(0, test1.compareTo(p));\n        try {\n            test1.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            test1.compareTo(new LocalTime());\n            fail();\n        } catch (ClassCastException ex) {}\n        Partial partial = new Partial()\n            .with(DateTimeFieldType.centuryOfEra(), 1)\n            .with(DateTimeFieldType.halfdayOfDay(), 0)\n            .with(DateTimeFieldType.dayOfMonth(), 9);\n        try {\n            new MonthDay(10, 6).compareTo(partial);\n            fail();\n        } catch (ClassCastException ex) {}\n    }\n",
        "begin_line": 223,
        "end_line": 263,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 44)",
            "(line 225,col 9)-(line 225,col 45)",
            "(line 226,col 9)-(line 226,col 49)",
            "(line 227,col 9)-(line 227,col 49)",
            "(line 228,col 9)-(line 228,col 48)",
            "(line 229,col 9)-(line 229,col 50)",
            "(line 231,col 9)-(line 231,col 44)",
            "(line 232,col 9)-(line 232,col 49)",
            "(line 233,col 9)-(line 233,col 49)",
            "(line 235,col 9)-(line 235,col 82)",
            "(line 236,col 9)-(line 236,col 49)",
            "(line 237,col 9)-(line 237,col 49)",
            "(line 238,col 9)-(line 238,col 48)",
            "(line 240,col 9)-(line 243,col 10)",
            "(line 244,col 9)-(line 244,col 40)",
            "(line 245,col 9)-(line 245,col 47)",
            "(line 246,col 9)-(line 246,col 44)",
            "(line 247,col 9)-(line 250,col 44)",
            "(line 251,col 9)-(line 254,col 42)",
            "(line 255,col 9)-(line 258,col 53)",
            "(line 259,col 9)-(line 262,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testIsEqual_MD()",
        "snippet": "    public void testIsEqual_MD() {\n        MonthDay test1 = new MonthDay(6, 6);\n        MonthDay test1a = new MonthDay(6, 6);\n        assertEquals(true, test1.isEqual(test1a));\n        assertEquals(true, test1a.isEqual(test1));\n        assertEquals(true, test1.isEqual(test1));\n        assertEquals(true, test1a.isEqual(test1a));\n        \n        MonthDay test2 = new MonthDay(6, 7);\n        assertEquals(false, test1.isEqual(test2));\n        assertEquals(false, test2.isEqual(test1));\n        \n        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n        assertEquals(false, test1.isEqual(test3));\n        assertEquals(false, test3.isEqual(test1));\n        assertEquals(true, test3.isEqual(test2));\n        \n        try {\n            new MonthDay(6, 7).isEqual(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 266,
        "end_line": 287,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 44)",
            "(line 268,col 9)-(line 268,col 45)",
            "(line 269,col 9)-(line 269,col 50)",
            "(line 270,col 9)-(line 270,col 50)",
            "(line 271,col 9)-(line 271,col 49)",
            "(line 272,col 9)-(line 272,col 51)",
            "(line 274,col 9)-(line 274,col 44)",
            "(line 275,col 9)-(line 275,col 50)",
            "(line 276,col 9)-(line 276,col 50)",
            "(line 278,col 9)-(line 278,col 82)",
            "(line 279,col 9)-(line 279,col 50)",
            "(line 280,col 9)-(line 280,col 50)",
            "(line 281,col 9)-(line 281,col 49)",
            "(line 283,col 9)-(line 286,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testIsBefore_MD()",
        "snippet": "    public void testIsBefore_MD() {\n        MonthDay test1 = new MonthDay(6, 6);\n        MonthDay test1a = new MonthDay(6, 6);\n        assertEquals(false, test1.isBefore(test1a));\n        assertEquals(false, test1a.isBefore(test1));\n        assertEquals(false, test1.isBefore(test1));\n        assertEquals(false, test1a.isBefore(test1a));\n        \n        MonthDay test2 = new MonthDay(6, 7);\n        assertEquals(true, test1.isBefore(test2));\n        assertEquals(false, test2.isBefore(test1));\n        \n        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n        assertEquals(true, test1.isBefore(test3));\n        assertEquals(false, test3.isBefore(test1));\n        assertEquals(false, test3.isBefore(test2));\n        \n        try {\n            new MonthDay(6, 7).isBefore(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 290,
        "end_line": 311,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 44)",
            "(line 292,col 9)-(line 292,col 45)",
            "(line 293,col 9)-(line 293,col 52)",
            "(line 294,col 9)-(line 294,col 52)",
            "(line 295,col 9)-(line 295,col 51)",
            "(line 296,col 9)-(line 296,col 53)",
            "(line 298,col 9)-(line 298,col 44)",
            "(line 299,col 9)-(line 299,col 50)",
            "(line 300,col 9)-(line 300,col 51)",
            "(line 302,col 9)-(line 302,col 82)",
            "(line 303,col 9)-(line 303,col 50)",
            "(line 304,col 9)-(line 304,col 51)",
            "(line 305,col 9)-(line 305,col 51)",
            "(line 307,col 9)-(line 310,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testIsAfter_MD()",
        "snippet": "    public void testIsAfter_MD() {\n        MonthDay test1 = new MonthDay(6, 6);\n        MonthDay test1a = new MonthDay(6, 6);\n        assertEquals(false, test1.isAfter(test1a));\n        assertEquals(false, test1a.isAfter(test1));\n        assertEquals(false, test1.isAfter(test1));\n        assertEquals(false, test1a.isAfter(test1a));\n        \n        MonthDay test2 = new MonthDay(6, 7);\n        assertEquals(false, test1.isAfter(test2));\n        assertEquals(true, test2.isAfter(test1));\n        \n        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n        assertEquals(false, test1.isAfter(test3));\n        assertEquals(true, test3.isAfter(test1));\n        assertEquals(false, test3.isAfter(test2));\n        \n        try {\n            new MonthDay(6, 7).isAfter(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 314,
        "end_line": 335,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 44)",
            "(line 316,col 9)-(line 316,col 45)",
            "(line 317,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 318,col 51)",
            "(line 319,col 9)-(line 319,col 50)",
            "(line 320,col 9)-(line 320,col 52)",
            "(line 322,col 9)-(line 322,col 44)",
            "(line 323,col 9)-(line 323,col 50)",
            "(line 324,col 9)-(line 324,col 49)",
            "(line 326,col 9)-(line 326,col 82)",
            "(line 327,col 9)-(line 327,col 50)",
            "(line 328,col 9)-(line 328,col 49)",
            "(line 329,col 9)-(line 329,col 50)",
            "(line 331,col 9)-(line 334,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithChronologyRetainFields_Chrono()",
        "snippet": "    public void testWithChronologyRetainFields_Chrono() {\n        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n        MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n        check(base, 6, 6);\n        assertEquals(COPTIC_UTC, base.getChronology());\n        check(test, 6, 6);\n        assertEquals(BUDDHIST_UTC, test.getChronology());\n    }\n",
        "begin_line": 338,
        "end_line": 345,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 57)",
            "(line 340,col 9)-(line 340,col 72)",
            "(line 341,col 9)-(line 341,col 26)",
            "(line 342,col 9)-(line 342,col 55)",
            "(line 343,col 9)-(line 343,col 26)",
            "(line 344,col 9)-(line 344,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithChronologyRetainFields_sameChrono()",
        "snippet": "    public void testWithChronologyRetainFields_sameChrono() {\n        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n        MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);\n        assertSame(base, test);\n    }\n",
        "begin_line": 347,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 57)",
            "(line 349,col 9)-(line 349,col 70)",
            "(line 350,col 9)-(line 350,col 31)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithChronologyRetainFields_nullChrono()",
        "snippet": "    public void testWithChronologyRetainFields_nullChrono() {\n        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n        MonthDay test = base.withChronologyRetainFields(null);\n        check(base, 6, 6);\n        assertEquals(COPTIC_UTC, base.getChronology());\n        check(test, 6, 6);\n        assertEquals(ISO_UTC, test.getChronology());\n    }\n",
        "begin_line": 353,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 57)",
            "(line 355,col 9)-(line 355,col 62)",
            "(line 356,col 9)-(line 356,col 26)",
            "(line 357,col 9)-(line 357,col 55)",
            "(line 358,col 9)-(line 358,col 26)",
            "(line 359,col 9)-(line 359,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithField()",
        "snippet": "    public void testWithField() {\n        MonthDay test = new MonthDay(9, 6);\n        MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10);\n        \n        assertEquals(new MonthDay(9, 6), test);\n        assertEquals(new MonthDay(10, 6), result);\n    }\n",
        "begin_line": 363,
        "end_line": 369,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 43)",
            "(line 365,col 9)-(line 365,col 78)",
            "(line 367,col 9)-(line 367,col 47)",
            "(line 368,col 9)-(line 368,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithField_nullField()",
        "snippet": "    public void testWithField_nullField() {\n        MonthDay test = new MonthDay(9, 6);\n        try {\n            test.withField(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 371,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 43)",
            "(line 373,col 9)-(line 376,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithField_unknownField()",
        "snippet": "    public void testWithField_unknownField() {\n        MonthDay test = new MonthDay(9, 6);\n        try {\n            test.withField(DateTimeFieldType.hourOfDay(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 379,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 43)",
            "(line 381,col 9)-(line 384,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithField_same()",
        "snippet": "    public void testWithField_same() {\n        MonthDay test = new MonthDay(9, 6);\n        MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9);\n        assertEquals(new MonthDay(9, 6), test);\n        assertSame(test, result);\n    }\n",
        "begin_line": 387,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 43)",
            "(line 389,col 9)-(line 389,col 77)",
            "(line 390,col 9)-(line 390,col 47)",
            "(line 391,col 9)-(line 391,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithFieldAdded()",
        "snippet": "    public void testWithFieldAdded() {\n        MonthDay test = new MonthDay(9, 6);\n        MonthDay result = test.withFieldAdded(DurationFieldType.months(), 1);\n        \n        assertEquals(new MonthDay(9, 6), test);\n        assertEquals(new MonthDay(10, 6), result);\n    }\n",
        "begin_line": 395,
        "end_line": 401,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 43)",
            "(line 397,col 9)-(line 397,col 77)",
            "(line 399,col 9)-(line 399,col 47)",
            "(line 400,col 9)-(line 400,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithFieldAdded_nullField_zero()",
        "snippet": "    public void testWithFieldAdded_nullField_zero() {\n        MonthDay test = new MonthDay(9, 6);\n        try {\n            test.withFieldAdded(null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 403,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 43)",
            "(line 405,col 9)-(line 408,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithFieldAdded_nullField_nonZero()",
        "snippet": "    public void testWithFieldAdded_nullField_nonZero() {\n        MonthDay test = new MonthDay(9, 6);\n        try {\n            test.withFieldAdded(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 411,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 43)",
            "(line 413,col 9)-(line 416,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithFieldAdded_zero()",
        "snippet": "    public void testWithFieldAdded_zero() {\n        MonthDay test = new MonthDay(9, 6);\n        MonthDay result = test.withFieldAdded(DurationFieldType.months(), 0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 419,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 43)",
            "(line 421,col 9)-(line 421,col 77)",
            "(line 422,col 9)-(line 422,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithFieldAdded_unknownField()",
        "snippet": "    public void testWithFieldAdded_unknownField() {\n        MonthDay test = new MonthDay(9, 6);\n        try {\n            test.withFieldAdded(DurationFieldType.hours(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 425,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 43)",
            "(line 427,col 9)-(line 430,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlus_RP()",
        "snippet": "    public void testPlus_RP() {\n        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n        MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n        MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance());\n        assertEquals(expected, result);\n        \n        result = test.plus((ReadablePeriod) null);\n        assertSame(test, result);\n    }\n",
        "begin_line": 434,
        "end_line": 442,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 77)",
            "(line 436,col 9)-(line 436,col 72)",
            "(line 437,col 9)-(line 437,col 81)",
            "(line 438,col 9)-(line 438,col 39)",
            "(line 440,col 9)-(line 440,col 50)",
            "(line 441,col 9)-(line 441,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int()",
        "snippet": "    public void testPlusMonths_int() {\n        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n        MonthDay result = test.plusMonths(1);\n        MonthDay expected = new MonthDay(7, 5, BuddhistChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 444,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 77)",
            "(line 446,col 9)-(line 446,col 45)",
            "(line 447,col 9)-(line 447,col 81)",
            "(line 448,col 9)-(line 448,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap()",
        "snippet": "    public void testPlusMonths_int_fromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusMonths(1);\n        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 451,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 76)",
            "(line 453,col 9)-(line 453,col 45)",
            "(line 454,col 9)-(line 454,col 77)",
            "(line 455,col 9)-(line 455,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap()",
        "snippet": "    public void testPlusMonths_int_negativeFromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusMonths(-1);\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 458,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 76)",
            "(line 460,col 9)-(line 460,col 46)",
            "(line 461,col 9)-(line 461,col 77)",
            "(line 462,col 9)-(line 462,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_endOfMonthAdjust()",
        "snippet": "    public void testPlusMonths_int_endOfMonthAdjust() {\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusMonths(1);\n        MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 465,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 76)",
            "(line 467,col 9)-(line 467,col 45)",
            "(line 468,col 9)-(line 468,col 77)",
            "(line 469,col 9)-(line 469,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust()",
        "snippet": "    public void testPlusMonths_int_negativeEndOfMonthAdjust() {\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusMonths(-1);\n        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 472,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 76)",
            "(line 474,col 9)-(line 474,col 46)",
            "(line 475,col 9)-(line 475,col 77)",
            "(line 476,col 9)-(line 476,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_same()",
        "snippet": "    public void testPlusMonths_int_same() {\n        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n        MonthDay result = test.plusMonths(0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 479,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 52)",
            "(line 481,col 9)-(line 481,col 45)",
            "(line 482,col 9)-(line 482,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_wrap()",
        "snippet": "    public void testPlusMonths_int_wrap() {\n        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n        MonthDay result = test.plusMonths(10);\n        MonthDay expected = new MonthDay(4, 5, ISO_UTC);\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 485,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 52)",
            "(line 487,col 9)-(line 487,col 46)",
            "(line 488,col 9)-(line 488,col 56)",
            "(line 489,col 9)-(line 489,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_adjust()",
        "snippet": "    public void testPlusMonths_int_adjust() {\n        MonthDay test = new MonthDay(7, 31, ISO_UTC);\n        MonthDay result = test.plusMonths(2);\n        MonthDay expected = new MonthDay(9, 30, ISO_UTC);\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 492,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 53)",
            "(line 494,col 9)-(line 494,col 45)",
            "(line 495,col 9)-(line 495,col 57)",
            "(line 496,col 9)-(line 496,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusDays_int()",
        "snippet": "    public void testPlusDays_int() {\n        MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());\n        MonthDay result = test.plusDays(1);\n        MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 500,
        "end_line": 505,
        "comment": "-------------------------------------------------------------------------",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 78)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 82)",
            "(line 504,col 9)-(line 504,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap()",
        "snippet": "    public void testPlusDays_int_fromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusDays(1);\n        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 507,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 76)",
            "(line 509,col 9)-(line 509,col 43)",
            "(line 510,col 9)-(line 510,col 76)",
            "(line 511,col 9)-(line 511,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusDays_int_negativeFromLeap()",
        "snippet": "    public void testPlusDays_int_negativeFromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusDays(-1);\n        MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 514,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 515,col 9)-(line 515,col 76)",
            "(line 516,col 9)-(line 516,col 44)",
            "(line 517,col 9)-(line 517,col 77)",
            "(line 518,col 9)-(line 518,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testPlusDays_same()",
        "snippet": "    public void testPlusDays_same() {\n        MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());\n        MonthDay result = test.plusDays(0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 521,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 522,col 9)-(line 522,col 78)",
            "(line 523,col 9)-(line 523,col 43)",
            "(line 524,col 9)-(line 524,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinus_RP()",
        "snippet": "    public void testMinus_RP() {\n        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n        MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n        MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance());\n        assertEquals(expected, result);\n        \n        result = test.minus((ReadablePeriod) null);\n        assertSame(test, result);\n    }\n",
        "begin_line": 528,
        "end_line": 536,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 529,col 9)-(line 529,col 77)",
            "(line 530,col 9)-(line 530,col 73)",
            "(line 531,col 9)-(line 531,col 81)",
            "(line 532,col 9)-(line 532,col 39)",
            "(line 534,col 9)-(line 534,col 51)",
            "(line 535,col 9)-(line 535,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int()",
        "snippet": "    public void testMinusMonths_int() {\n        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n        MonthDay result = test.minusMonths(1);\n        MonthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 538,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 539,col 9)-(line 539,col 77)",
            "(line 540,col 9)-(line 540,col 46)",
            "(line 541,col 9)-(line 541,col 81)",
            "(line 542,col 9)-(line 542,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap()",
        "snippet": "    public void testMinusMonths_int_fromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.minusMonths(1);\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 545,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 546,col 9)-(line 546,col 76)",
            "(line 547,col 9)-(line 547,col 46)",
            "(line 548,col 9)-(line 548,col 77)",
            "(line 549,col 9)-(line 549,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap()",
        "snippet": "    public void testMinusMonths_int_negativeFromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.minusMonths(-1);\n        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 552,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 553,col 9)-(line 553,col 76)",
            "(line 554,col 9)-(line 554,col 47)",
            "(line 555,col 9)-(line 555,col 77)",
            "(line 556,col 9)-(line 556,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust()",
        "snippet": "    public void testMinusMonths_int_endOfMonthAdjust() {\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n        MonthDay result = test.minusMonths(1);\n        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 559,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 76)",
            "(line 561,col 9)-(line 561,col 46)",
            "(line 562,col 9)-(line 562,col 77)",
            "(line 563,col 9)-(line 563,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeEndOfMonthAdjust()",
        "snippet": "    public void testMinusMonths_int_negativeEndOfMonthAdjust() {\n        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n        MonthDay result = test.minusMonths(-1);\n        MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 566,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 567,col 9)-(line 567,col 76)",
            "(line 568,col 9)-(line 568,col 47)",
            "(line 569,col 9)-(line 569,col 77)",
            "(line 570,col 9)-(line 570,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_same()",
        "snippet": "    public void testMinusMonths_int_same() {\n        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n        MonthDay result = test.minusMonths(0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 573,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 574,col 9)-(line 574,col 52)",
            "(line 575,col 9)-(line 575,col 46)",
            "(line 576,col 9)-(line 576,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_wrap()",
        "snippet": "    public void testMinusMonths_int_wrap() {\n        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n        MonthDay result = test.minusMonths(10);\n        MonthDay expected = new MonthDay(8, 5, ISO_UTC);\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 579,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 52)",
            "(line 581,col 9)-(line 581,col 47)",
            "(line 582,col 9)-(line 582,col 56)",
            "(line 583,col 9)-(line 583,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_adjust()",
        "snippet": "    public void testMinusMonths_int_adjust() {\n        MonthDay test = new MonthDay(7, 31, ISO_UTC);\n        MonthDay result = test.minusMonths(3);\n        MonthDay expected = new MonthDay(4, 30, ISO_UTC);\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 586,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 587,col 9)-(line 587,col 53)",
            "(line 588,col 9)-(line 588,col 46)",
            "(line 589,col 9)-(line 589,col 57)",
            "(line 590,col 9)-(line 590,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusDays_int()",
        "snippet": "    public void testMinusDays_int() {\n        MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());\n        MonthDay result = test.minusDays(1);\n        MonthDay expected = new MonthDay(5, 10, BuddhistChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 594,
        "end_line": 599,
        "comment": "-------------------------------------------------------------------------",
        "child_ranges": [
            "(line 595,col 9)-(line 595,col 78)",
            "(line 596,col 9)-(line 596,col 44)",
            "(line 597,col 9)-(line 597,col 82)",
            "(line 598,col 9)-(line 598,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusDays_int_fromLeap()",
        "snippet": "    public void testMinusDays_int_fromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.minusDays(1);\n        MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 601,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 602,col 9)-(line 602,col 76)",
            "(line 603,col 9)-(line 603,col 44)",
            "(line 604,col 9)-(line 604,col 77)",
            "(line 605,col 9)-(line 605,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap()",
        "snippet": "    public void testMinusDays_int_negativeFromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.minusDays(-1);\n        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n",
        "begin_line": 608,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 609,col 9)-(line 609,col 76)",
            "(line 610,col 9)-(line 610,col 45)",
            "(line 611,col 9)-(line 611,col 76)",
            "(line 612,col 9)-(line 612,col 39)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testMinusDays_same()",
        "snippet": "    public void testMinusDays_same() {\n        MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());\n        MonthDay result = test.minusDays(0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 615,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 616,col 9)-(line 616,col 78)",
            "(line 617,col 9)-(line 617,col 44)",
            "(line 618,col 9)-(line 618,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToLocalDate()",
        "snippet": "    public void testToLocalDate() {\n        MonthDay base = new MonthDay(6, 6, COPTIC_UTC);\n        LocalDate test = base.toLocalDate(2009);\n        assertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test);\n        try {\n            base.toLocalDate(0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 622,
        "end_line": 630,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 55)",
            "(line 624,col 9)-(line 624,col 48)",
            "(line 625,col 9)-(line 625,col 66)",
            "(line 626,col 9)-(line 629,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToDateTime_RI()",
        "snippet": "    public void testToDateTime_RI() {\n        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n        \n        DateTime test = base.toDateTime(dt);\n        check(base, 6, 6);\n        DateTime expected = dt;\n        expected = expected.monthOfYear().setCopy(6);\n        expected = expected.dayOfMonth().setCopy(6);\n        assertEquals(expected, test);\n    }\n",
        "begin_line": 633,
        "end_line": 643,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 634,col 9)-(line 634,col 57)",
            "(line 635,col 9)-(line 635,col 59)",
            "(line 637,col 9)-(line 637,col 44)",
            "(line 638,col 9)-(line 638,col 26)",
            "(line 639,col 9)-(line 639,col 31)",
            "(line 640,col 9)-(line 640,col 53)",
            "(line 641,col 9)-(line 641,col 52)",
            "(line 642,col 9)-(line 642,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToDateTime_nullRI()",
        "snippet": "    public void testToDateTime_nullRI() {\n        MonthDay base = new MonthDay(6, 6);\n        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n        \n        DateTime test = base.toDateTime((ReadableInstant) null);\n        check(base, 6, 6);\n        DateTime expected = dt;\n        expected = expected.monthOfYear().setCopy(6);\n        expected = expected.dayOfMonth().setCopy(6);\n        assertEquals(expected, test);\n    }\n",
        "begin_line": 645,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 646,col 9)-(line 646,col 43)",
            "(line 647,col 9)-(line 647,col 59)",
            "(line 648,col 9)-(line 648,col 60)",
            "(line 650,col 9)-(line 650,col 64)",
            "(line 651,col 9)-(line 651,col 26)",
            "(line 652,col 9)-(line 652,col 31)",
            "(line 653,col 9)-(line 653,col 53)",
            "(line 654,col 9)-(line 654,col 52)",
            "(line 655,col 9)-(line 655,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testWithers()",
        "snippet": "    public void testWithers() {\n        MonthDay test = new MonthDay(10, 6);\n        check(test.withMonthOfYear(5), 5, 6);\n        check(test.withDayOfMonth(2), 10, 2);\n        try {\n            test.withMonthOfYear(0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            test.withMonthOfYear(13);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 659,
        "end_line": 671,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 660,col 9)-(line 660,col 44)",
            "(line 661,col 9)-(line 661,col 45)",
            "(line 662,col 9)-(line 662,col 45)",
            "(line 663,col 9)-(line 666,col 48)",
            "(line 667,col 9)-(line 670,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testProperty()",
        "snippet": "    public void testProperty() {\n        MonthDay test = new MonthDay(6, 6);\n        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n        try {\n            test.property(DateTimeFieldType.millisOfDay());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            test.property(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 674,
        "end_line": 686,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 675,col 9)-(line 675,col 43)",
            "(line 676,col 9)-(line 676,col 89)",
            "(line 677,col 9)-(line 677,col 87)",
            "(line 678,col 9)-(line 681,col 48)",
            "(line 682,col 9)-(line 685,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testSerialization()",
        "snippet": "    public void testSerialization() throws Exception {\n        MonthDay test = new MonthDay(5, 6, COPTIC_PARIS);\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(test);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        MonthDay result = (MonthDay) ois.readObject();\n        ois.close();\n        \n        assertEquals(test, result);\n        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n        assertEquals(test.getChronology(), result.getChronology());\n    }\n",
        "begin_line": 689,
        "end_line": 707,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 690,col 9)-(line 690,col 57)",
            "(line 692,col 9)-(line 692,col 65)",
            "(line 693,col 9)-(line 693,col 62)",
            "(line 694,col 9)-(line 694,col 30)",
            "(line 695,col 9)-(line 695,col 42)",
            "(line 696,col 9)-(line 696,col 20)",
            "(line 698,col 9)-(line 698,col 68)",
            "(line 699,col 9)-(line 699,col 60)",
            "(line 700,col 9)-(line 700,col 54)",
            "(line 701,col 9)-(line 701,col 20)",
            "(line 703,col 9)-(line 703,col 35)",
            "(line 704,col 9)-(line 704,col 72)",
            "(line 705,col 9)-(line 705,col 72)",
            "(line 706,col 9)-(line 706,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToString()",
        "snippet": "    public void testToString() {\n        MonthDay test = new MonthDay(5, 6);\n        assertEquals(\"--05-06\", test.toString());\n    }\n",
        "begin_line": 710,
        "end_line": 713,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 711,col 9)-(line 711,col 43)",
            "(line 712,col 9)-(line 712,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToString_String()",
        "snippet": "    public void testToString_String() {\n        MonthDay test = new MonthDay(5, 6);\n        assertEquals(\"05 \\ufffd\\ufffd\", test.toString(\"MM HH\"));\n        assertEquals(\"--05-06\", test.toString((String) null));\n    }\n",
        "begin_line": 716,
        "end_line": 720,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 717,col 9)-(line 717,col 43)",
            "(line 718,col 9)-(line 718,col 64)",
            "(line 719,col 9)-(line 719,col 62)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToString_String_Locale()",
        "snippet": "    public void testToString_String_Locale() {\n        MonthDay test = new MonthDay(5, 6);\n        assertEquals(\"\\ufffd 6/5\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n        assertEquals(\"\\ufffd 6/5\", test.toString(\"EEE d/M\", Locale.FRENCH));\n        assertEquals(\"--05-06\", test.toString(null, Locale.ENGLISH));\n        assertEquals(\"\\ufffd 6/5\", test.toString(\"EEE d/M\", null));\n        assertEquals(\"--05-06\", test.toString(null, null));\n    }\n",
        "begin_line": 723,
        "end_line": 730,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 724,col 9)-(line 724,col 43)",
            "(line 725,col 9)-(line 725,col 77)",
            "(line 726,col 9)-(line 726,col 76)",
            "(line 727,col 9)-(line 727,col 69)",
            "(line 728,col 9)-(line 728,col 67)",
            "(line 729,col 9)-(line 729,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.testToString_DTFormatter()",
        "snippet": "    public void testToString_DTFormatter() {\n        MonthDay test = new MonthDay(5, 6);\n        assertEquals(\"05 \\ufffd\\ufffd\", test.toString(DateTimeFormat.forPattern(\"MM HH\")));\n        assertEquals(\"--05-06\", test.toString((DateTimeFormatter) null));\n    }\n",
        "begin_line": 733,
        "end_line": 737,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 734,col 9)-(line 734,col 43)",
            "(line 735,col 9)-(line 735,col 91)",
            "(line 736,col 9)-(line 736,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonthDay_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonthDay_Basics.java",
        "signature": "org.joda.time.TestMonthDay_Basics.check(org.joda.time.MonthDay, int, int)",
        "snippet": "    private void check(MonthDay test, int month, int day) {\n        assertEquals(month, test.getMonthOfYear());\n        assertEquals(day, test.getDayOfMonth());\n    }\n",
        "begin_line": 740,
        "end_line": 743,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 741,col 9)-(line 741,col 51)",
            "(line 742,col 9)-(line 742,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.getChronology()",
        "snippet": "    public Chronology getChronology() {\n        return ISOChronology.getInstanceUTC();\n    }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.size()",
        "snippet": "    public int size() {\n        return getFields().length;\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 34)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.getFieldType(int)",
        "snippet": "    public DateTimeFieldType getFieldType(int index) {\n        return getFields()[index].getType();\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 44)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.getField(int)",
        "snippet": "    public DateTimeField getField(int index) {\n        return getFields()[index];\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 34)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.getValue(int)",
        "snippet": "    public int getValue(int index) {\n        return getValues()[index];\n    }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 34)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.get(org.joda.time.DateTimeFieldType)",
        "snippet": "    public int get(DateTimeFieldType field) {\n        return 0;\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 17)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.isSupported(org.joda.time.DateTimeFieldType)",
        "snippet": "    public boolean isSupported(DateTimeFieldType field) {\n        return false;\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.toDateTime(org.joda.time.DateTimeZone)",
        "snippet": "    public DateTime toDateTime(DateTimeZone zone) {\n        return null;\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.toDateTime(org.joda.time.ReadableInstant)",
        "snippet": "    public DateTime toDateTime(ReadableInstant base) {\n        return null;\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.getFields()",
        "snippet": "    public DateTimeField[] getFields() {\n        return new DateTimeField[0];\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 36)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.getValues()",
        "snippet": "    public int[] getValues() {\n        return new int[0];\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 26)"
        ]
    },
    {
        "class_name": "org.joda.time.MockPartial",
        "child_classes": [
            "org.joda.time.TestMonthDay_Basics"
        ],
        "src_path": "src/test/java/org/joda/time/MockPartial.java",
        "signature": "org.joda.time.MockPartial.compareTo(org.joda.time.ReadablePartial)",
        "snippet": "    public int compareTo(ReadablePartial partial) {\n        return 0;\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 17)"
        ]
    }
]