[
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    reportMissingOverrides = CheckLevel.WARNING;\n  }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 18)",
            "(line 49,col 5)-(line 49,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        CodingConventions.getDefault()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertTypeEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertTypeEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertTypeEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertTypeEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertTypeEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertTypeEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertTypeEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertTypeEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertTypeEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertTypeEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertTypeEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertTypeEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 52,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 55,col 35)",
            "(line 57,col 5)-(line 57,col 71)",
            "(line 58,col 5)-(line 59,col 39)",
            "(line 60,col 5)-(line 60,col 69)",
            "(line 61,col 5)-(line 61,col 71)",
            "(line 62,col 5)-(line 63,col 41)",
            "(line 64,col 5)-(line 65,col 38)",
            "(line 66,col 5)-(line 66,col 73)",
            "(line 67,col 5)-(line 68,col 42)",
            "(line 69,col 5)-(line 70,col 46)",
            "(line 71,col 5)-(line 71,col 73)",
            "(line 72,col 5)-(line 73,col 38)",
            "(line 74,col 5)-(line 75,col 43)",
            "(line 76,col 5)-(line 77,col 41)",
            "(line 78,col 5)-(line 79,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrivateType()",
        "snippet": "  public void testPrivateType() throws Exception {\n    testTypes(\n        \"/** @private {number} */ var x = false;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 87,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 94,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 98,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 105,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 109,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 115,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 123,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 130,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 136,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 139,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 143,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 146,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 150,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 159,col 5)-(line 162,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck16()",
        "snippet": "  public void testTypeCheck16() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 169,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 175,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 193,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 196,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 201,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 208,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 212,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 221,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 224,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 229,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 232,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 233,col 5)-(line 239,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns2()",
        "snippet": "  public void testTypeCheckCustomExterns2() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @enum {string} */ var Enum = {FOO: 1, BAR: 1};\",\n        \"/** @param {Enum} x */ function f(x) {} f(Enum.FOO); f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: Enum.<string>\",\n        false);\n  }\n",
        "begin_line": 243,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 250,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 253,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 259,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array.<number>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 262,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 268,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 271,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 274,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 282,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 285,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 287,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 290,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 296,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 299,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 305,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 308,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 314,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 317,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 318,col 5)-(line 323,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 326,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 332,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 335,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 336,col 5)-(line 342,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject5()",
        "snippet": "  public void testParameterizedObject5() throws Exception {\n    testTypes(\"/** @constructor */ function F() {\" +\n        \"  /** @type {Object.<number, string>} */ this.numbers = {};\" +\n        \"}\" +\n        \"(new F()).numbers['ten'] = '10';\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 345,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 352,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 357,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 362,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 365,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 368,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 371,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 377,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 380,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 382,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 387,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 390,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 391,col 5)-(line 392,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 395,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 396,col 5)-(line 398,col 23)",
            "(line 400,col 5)-(line 401,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 404,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 406,col 69)",
            "(line 407,col 5)-(line 408,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 412,col 5)-(line 413,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 416,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 417,col 5)-(line 418,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 421,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 422,col 5)-(line 423,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 426,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 429,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 432,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 435,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 438,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 439,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 442,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 443,col 5)-(line 443,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 446,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 449,col 5)-(line 450,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 453,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 454,col 5)-(line 455,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 458,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 459,col 5)-(line 460,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 463,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 473,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 476,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 486,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {Array|T} x\\n\" +\n        \"* @return {null}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 489,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 500,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 503,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 508,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 511,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 512,col 5)-(line 516,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 519,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 524,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 527,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 531,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 534,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 535,col 5)-(line 539,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 542,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 543,col 5)-(line 547,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 550,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 551,col 5)-(line 552,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 555,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 557,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 560,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 561,col 5)-(line 562,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 565,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 566,col 5)-(line 567,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 570,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 571,col 5)-(line 573,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 576,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 580,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 583,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 588,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 591,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 592,col 5)-(line 597,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 600,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 606,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 609,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 615,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 618,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 624,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 627,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 628,col 5)-(line 630,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 633,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 638,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 641,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 647,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction16()",
        "snippet": "  public void testTypeOfReduction16() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function I() {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {*} x\\n\" +\n        \" * @return {I}\\n\" +\n        \" */\\n\" +\n        \"function f(x) { \" +\n        \"  if(goog.isObject(x)) {\" +\n        \"    return /** @type {I} */(x);\" +\n        \"  }\" +\n        \"  return null;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 659,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 660,col 5)-(line 672,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 675,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 676,col 5)-(line 678,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 681,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 685,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 688,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 692,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 695,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 701,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5a()",
        "snippet": "  public void testQualifiedNameReduction5a() throws Exception {\n    testTypes(\"var x = {/** @type {string} */ a:'b' };\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 704,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 705,col 5)-(line 707,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5b()",
        "snippet": "  public void testQualifiedNameReduction5b() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"/** @return {string} */\\n\" +\n        \"var f = function() {\\n\" +\n        \"  return x.a;\\n\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 710,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 719,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5c()",
        "snippet": "  public void testQualifiedNameReduction5c() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @type {number} */ a:0 };\\n\" +\n        \"return (x.a) ? (x.a) : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 722,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 729,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction6()",
        "snippet": "  public void testQualifiedNameReduction6() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {string?} */ get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 732,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 736,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7()",
        "snippet": "  public void testQualifiedNameReduction7() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {number} */ get a() {return 12}};\\n\" +\n        \"return x.a; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 739,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 740,col 5)-(line 746,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7a()",
        "snippet": "  public void testQualifiedNameReduction7a() throws Exception {\n    // It would be nice to find a way to make this an error.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 12}};\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 749,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 754,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction8()",
        "snippet": "  public void testQualifiedNameReduction8() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 757,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 758,col 5)-(line 761,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction9()",
        "snippet": "  public void testQualifiedNameReduction9() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {string} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 764,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 765,col 5)-(line 768,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction10()",
        "snippet": "  public void testQualifiedNameReduction10() throws Exception {\n    // TODO(johnlenz): separate setter property types from getter property\n    // types.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {number} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 771,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 780,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1a()",
        "snippet": "  public void testObjLitDef1a() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 783,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 784,col 5)-(line 789,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1b()",
        "snippet": "  public void testObjLitDef1b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @type {number} */ a:12 };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 792,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 793,col 5)-(line 801,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2a()",
        "snippet": "  public void testObjLitDef2a() throws Exception {\n    testTypes(\n        \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 804,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 805,col 5)-(line 810,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2b()",
        "snippet": "  public void testObjLitDef2b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 813,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 822,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3a()",
        "snippet": "  public void testObjLitDef3a() throws Exception {\n    testTypes(\n        \"/** @type {string} */ var y;\\n\" +\n        \"var x = {/** @return {number} */ get a(){} };\\n\" +\n        \"y = x.a;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 825,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 826,col 5)-(line 832,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3b()",
        "snippet": "  public void testObjLitDef3b() throws Exception {\n    testTypes(\n      \"/** @type {string} */ var y;\\n\" +\n        \"function f(){\" +\n          \"var x = {/** @return {number} */ get a(){} };\\n\" +\n          \"y = x.a;\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 835,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 836,col 5)-(line 845,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef4()",
        "snippet": "  public void testObjLitDef4() throws Exception {\n    testTypes(\n        \"var x = {\" +\n          \"/** @return {number} */ a:12 };\\n\",\n          \"assignment to property a of {a: function (): number}\\n\" +\n          \"found   : number\\n\" +\n          \"required: function (): number\");\n  }\n",
        "begin_line": 848,
        "end_line": 855,
        "comment": "",
        "child_ranges": [
            "(line 849,col 5)-(line 854,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef5()",
        "snippet": "  public void testObjLitDef5() throws Exception {\n    testTypes(\n        \"var x = {};\\n\" +\n        \"/** @return {number} */ x.a = 12;\\n\",\n        \"assignment to property a of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: function (): number\");\n  }\n",
        "begin_line": 857,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 858,col 5)-(line 863,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 867,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 868,col 5)-(line 872,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 875,
        "end_line": 881,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 880,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty1()",
        "snippet": "  public void testUndeclaredGlobalProperty1() throws Exception {\n    testTypes(\"/** @const */ var x = {}; x.y = null;\" +\n        \"function f(a) { x.y = a; }\" +\n        \"/** @param {string} a */ function g(a) { }\" +\n        \"function h() { g(x.y); }\");\n  }\n",
        "begin_line": 883,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 884,col 5)-(line 887,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty2()",
        "snippet": "  public void testUndeclaredGlobalProperty2() throws Exception {\n    testTypes(\"/** @const */ var x = {}; x.y = null;\" +\n        \"function f() { x.y = 3; }\" +\n        \"/** @param {string} a */ function g(a) { }\" +\n        \"function h() { g(x.y); }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 890,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 897,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLocallyInferredGlobalProperty1()",
        "snippet": "  public void testLocallyInferredGlobalProperty1() throws Exception {\n    // We used to have a bug where x.y.z leaked from f into h.\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.z;\" +\n        \"/** @const */ var x = {}; /** @type {F} */ x.y;\" +\n        \"function f() { x.y.z = 'abc'; }\" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"function h() { g(x.y.z); }\",\n        \"assignment to property z of F\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 900,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 911,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 914,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 915,col 5)-(line 917,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 920,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 921,col 5)-(line 927,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 930,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 938,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 941,
        "end_line": 950,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 949,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 952,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 953,col 5)-(line 960,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 963,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 964,col 5)-(line 968,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 971,
        "end_line": 977,
        "comment": "",
        "child_ranges": [
            "(line 972,col 5)-(line 976,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 979,
        "end_line": 988,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 987,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 990,
        "end_line": 1001,
        "comment": "",
        "child_ranges": [
            "(line 991,col 5)-(line 1000,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference9()",
        "snippet": "  public void testPropertyInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @return {function(): ?} */ function f() { \" +\n        \"  return function() {};\" +\n        \"}\" +\n        \"var g = f();\" +\n        \"/** @type {number} */ g.prototype.bar_ = null;\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1003,
        "end_line": 1014,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 5)-(line 1013,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference10()",
        "snippet": "  public void testPropertyInference10() throws Exception {\n    // NOTE(nicksantos): There used to be a bug where a property\n    // on the prototype of one structural function would leak onto\n    // the prototype of other variables with the same structural\n    // function type.\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @return {function(): ?} */ function f() { \" +\n        \"  return function() {};\" +\n        \"}\" +\n        \"var g = f();\" +\n        \"/** @type {number} */ g.prototype.bar_ = 1;\" +\n        \"var h = f();\" +\n        \"/** @type {string} */ h.prototype.bar_ = 1;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1016,
        "end_line": 1033,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1032,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 1035,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1044,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 1047,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1056,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1059,
        "end_line": 1065,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1064,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1067,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1068,col 5)-(line 1072,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1075,
        "end_line": 1081,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 5)-(line 1080,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1083,
        "end_line": 1090,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1089,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1092,
        "end_line": 1099,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 5)-(line 1098,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1101,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1108,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1111,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 5)-(line 1118,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1121,
        "end_line": 1129,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1128,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1131,
        "end_line": 1140,
        "comment": "",
        "child_ranges": [
            "(line 1132,col 5)-(line 1139,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 1142,
        "end_line": 1144,
        "comment": "",
        "child_ranges": [
            "(line 1143,col 5)-(line 1143,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 1146,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1147,col 5)-(line 1147,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1150,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1153,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1156,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1159,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1162,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 5)-(line 1165,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 1168,
        "end_line": 1172,
        "comment": "",
        "child_ranges": [
            "(line 1169,col 5)-(line 1171,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1174,
        "end_line": 1181,
        "comment": "",
        "child_ranges": [
            "(line 1175,col 5)-(line 1180,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1183,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1184,col 5)-(line 1189,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1192,
        "end_line": 1199,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1198,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1201,
        "end_line": 1207,
        "comment": "",
        "child_ranges": [
            "(line 1203,col 5)-(line 1206,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1209,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1211,col 5)-(line 1214,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1217,
        "end_line": 1224,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1223,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1226,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1227,col 5)-(line 1232,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1235,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1241,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1244,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1250,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1253,
        "end_line": 1260,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 5)-(line 1259,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1262,
        "end_line": 1269,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 5)-(line 1268,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1271,
        "end_line": 1278,
        "comment": "",
        "child_ranges": [
            "(line 1272,col 5)-(line 1277,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1280,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1281,col 5)-(line 1283,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1286,
        "end_line": 1290,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 5)-(line 1289,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1292,
        "end_line": 1297,
        "comment": "",
        "child_ranges": [
            "(line 1293,col 5)-(line 1296,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1299,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1300,col 5)-(line 1300,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1303,
        "end_line": 1308,
        "comment": "",
        "child_ranges": [
            "(line 1304,col 5)-(line 1307,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1310,
        "end_line": 1312,
        "comment": "",
        "child_ranges": [
            "(line 1311,col 5)-(line 1311,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1314,
        "end_line": 1317,
        "comment": "",
        "child_ranges": [
            "(line 1315,col 5)-(line 1316,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1319,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1320,col 5)-(line 1323,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1326,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 5)-(line 1330,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1333,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1334,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1337,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1338,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1341,
        "end_line": 1343,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1342,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1345,
        "end_line": 1348,
        "comment": "",
        "child_ranges": [
            "(line 1346,col 5)-(line 1347,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1350,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1351,col 5)-(line 1352,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1355,
        "end_line": 1361,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1360,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1363,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1364,col 5)-(line 1366,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1369,
        "end_line": 1374,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1373,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1376,
        "end_line": 1381,
        "comment": "",
        "child_ranges": [
            "(line 1377,col 5)-(line 1380,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1383,
        "end_line": 1386,
        "comment": "",
        "child_ranges": [
            "(line 1384,col 5)-(line 1385,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1388,
        "end_line": 1394,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1393,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1396,
        "end_line": 1402,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 5)-(line 1401,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1404,
        "end_line": 1407,
        "comment": "",
        "child_ranges": [
            "(line 1405,col 5)-(line 1406,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1409,
        "end_line": 1412,
        "comment": "",
        "child_ranges": [
            "(line 1410,col 5)-(line 1411,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1414,
        "end_line": 1418,
        "comment": "",
        "child_ranges": [
            "(line 1416,col 5)-(line 1417,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1420,
        "end_line": 1423,
        "comment": "",
        "child_ranges": [
            "(line 1421,col 5)-(line 1422,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1425,
        "end_line": 1435,
        "comment": "",
        "child_ranges": [
            "(line 1426,col 5)-(line 1434,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1437,
        "end_line": 1444,
        "comment": "",
        "child_ranges": [
            "(line 1438,col 5)-(line 1443,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1446,
        "end_line": 1452,
        "comment": "",
        "child_ranges": [
            "(line 1447,col 5)-(line 1451,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null)\");\n  }\n",
        "begin_line": 1454,
        "end_line": 1458,
        "comment": "",
        "child_ranges": [
            "(line 1455,col 5)-(line 1457,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null)\");\n  }\n",
        "begin_line": 1460,
        "end_line": 1464,
        "comment": "",
        "child_ranges": [
            "(line 1461,col 5)-(line 1463,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1466,
        "end_line": 1470,
        "comment": "",
        "child_ranges": [
            "(line 1469,col 5)-(line 1469,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1472,
        "end_line": 1476,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 5)-(line 1475,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1478,
        "end_line": 1485,
        "comment": "",
        "child_ranges": [
            "(line 1479,col 5)-(line 1484,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1487,
        "end_line": 1495,
        "comment": "",
        "child_ranges": [
            "(line 1488,col 5)-(line 1494,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1497,
        "end_line": 1505,
        "comment": "",
        "child_ranges": [
            "(line 1498,col 5)-(line 1504,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1507,
        "end_line": 1517,
        "comment": "",
        "child_ranges": [
            "(line 1508,col 5)-(line 1508,col 78)",
            "(line 1511,col 5)-(line 1511,col 47)",
            "(line 1512,col 5)-(line 1512,col 48)",
            "(line 1515,col 5)-(line 1516,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named function expressions create a binding in their body only\n    // the return is wrong but the assignment is OK since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1519,
        "end_line": 1527,
        "comment": "",
        "child_ranges": [
            "(line 1522,col 5)-(line 1526,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping12()",
        "snippet": "  public void testScoping12() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.bar = 3;\" +\n        \"/** @param {!F} f */ function g(f) {\" +\n        \"  /** @return {string} */\" +\n        \"  function h() {\" +\n        \"    return f.bar;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1529,
        "end_line": 1542,
        "comment": "",
        "child_ranges": [
            "(line 1530,col 5)-(line 1541,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1544,
        "end_line": 1549,
        "comment": "",
        "child_ranges": [
            "(line 1545,col 5)-(line 1548,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function (number=): string\");\n  }\n",
        "begin_line": 1551,
        "end_line": 1556,
        "comment": "",
        "child_ranges": [
            "(line 1552,col 5)-(line 1555,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1558,
        "end_line": 1563,
        "comment": "",
        "child_ranges": [
            "(line 1559,col 5)-(line 1562,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, number=): string\");\n  }\n",
        "begin_line": 1565,
        "end_line": 1570,
        "comment": "",
        "child_ranges": [
            "(line 1566,col 5)-(line 1569,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1572,
        "end_line": 1576,
        "comment": "",
        "child_ranges": [
            "(line 1573,col 5)-(line 1575,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1578,
        "end_line": 1582,
        "comment": "",
        "child_ranges": [
            "(line 1579,col 5)-(line 1581,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1584,
        "end_line": 1588,
        "comment": "",
        "child_ranges": [
            "(line 1585,col 5)-(line 1587,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1590,
        "end_line": 1594,
        "comment": "",
        "child_ranges": [
            "(line 1591,col 5)-(line 1593,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1596,
        "end_line": 1601,
        "comment": "",
        "child_ranges": [
            "(line 1598,col 5)-(line 1600,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1603,
        "end_line": 1608,
        "comment": "",
        "child_ranges": [
            "(line 1605,col 5)-(line 1607,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1610,
        "end_line": 1614,
        "comment": "",
        "child_ranges": [
            "(line 1611,col 5)-(line 1613,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1616,
        "end_line": 1619,
        "comment": "",
        "child_ranges": [
            "(line 1617,col 5)-(line 1618,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1621,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1623,col 5)-(line 1629,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1632,
        "end_line": 1640,
        "comment": "",
        "child_ranges": [
            "(line 1633,col 5)-(line 1639,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1642,
        "end_line": 1649,
        "comment": "",
        "child_ranges": [
            "(line 1643,col 5)-(line 1648,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments16()",
        "snippet": "  public void testFunctionArguments16() throws Exception {\n    testTypes(\n        \"/** @param {...number} var_args */\" +\n        \"function g(var_args) {} g(1, true);\",\n        \"actual parameter 2 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 1651,
        "end_line": 1658,
        "comment": "",
        "child_ranges": [
            "(line 1652,col 5)-(line 1657,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments17()",
        "snippet": "  public void testFunctionArguments17() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {booool|string} x */\" +\n        \"function f(x) { g(x) }\" +\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\",\n        Lists.newArrayList(\n            \"Bad type annotation. Unknown type booool\",\n            \"actual parameter 1 of g does not match formal parameter\\n\" +\n            \"found   : (booool|null|string)\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 1660,
        "end_line": 1671,
        "comment": "",
        "child_ranges": [
            "(line 1661,col 5)-(line 1670,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1673,
        "end_line": 1681,
        "comment": "",
        "child_ranges": [
            "(line 1675,col 5)-(line 1680,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1683,
        "end_line": 1691,
        "comment": "",
        "child_ranges": [
            "(line 1684,col 5)-(line 1690,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1693,
        "end_line": 1697,
        "comment": "",
        "child_ranges": [
            "(line 1694,col 5)-(line 1696,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1699,
        "end_line": 1703,
        "comment": "",
        "child_ranges": [
            "(line 1700,col 5)-(line 1702,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1705,
        "end_line": 1709,
        "comment": "",
        "child_ranges": [
            "(line 1706,col 5)-(line 1708,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1711,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1712,col 5)-(line 1714,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1721,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1720,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?=): string\");\n  }\n",
        "begin_line": 1723,
        "end_line": 1727,
        "comment": "",
        "child_ranges": [
            "(line 1724,col 5)-(line 1726,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1729,
        "end_line": 1733,
        "comment": "",
        "child_ranges": [
            "(line 1730,col 5)-(line 1732,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1735,
        "end_line": 1739,
        "comment": "",
        "child_ranges": [
            "(line 1736,col 5)-(line 1738,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1741,
        "end_line": 1745,
        "comment": "",
        "child_ranges": [
            "(line 1742,col 5)-(line 1744,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1747,
        "end_line": 1752,
        "comment": "",
        "child_ranges": [
            "(line 1748,col 5)-(line 1751,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1754,
        "end_line": 1760,
        "comment": "",
        "child_ranges": [
            "(line 1755,col 5)-(line 1759,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1762,
        "end_line": 1768,
        "comment": "",
        "child_ranges": [
            "(line 1763,col 5)-(line 1767,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1770,
        "end_line": 1777,
        "comment": "",
        "child_ranges": [
            "(line 1771,col 5)-(line 1776,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1779,
        "end_line": 1786,
        "comment": "",
        "child_ranges": [
            "(line 1780,col 5)-(line 1785,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1788,
        "end_line": 1794,
        "comment": "",
        "child_ranges": [
            "(line 1789,col 5)-(line 1793,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1796,
        "end_line": 1802,
        "comment": "",
        "child_ranges": [
            "(line 1797,col 5)-(line 1801,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1804,
        "end_line": 1811,
        "comment": "",
        "child_ranges": [
            "(line 1805,col 5)-(line 1810,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1813,
        "end_line": 1819,
        "comment": "",
        "child_ranges": [
            "(line 1814,col 5)-(line 1818,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1821,
        "end_line": 1826,
        "comment": "",
        "child_ranges": [
            "(line 1822,col 5)-(line 1825,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1828,
        "end_line": 1833,
        "comment": "",
        "child_ranges": [
            "(line 1829,col 5)-(line 1832,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference21()",
        "snippet": "  public void testFunctionInference21() throws Exception {\n    testTypes(\n        \"var f = function() { throw 'x' };\" +\n        \"/** @return {boolean} */ var g = f;\");\n    testFunctionType(\n        \"var f = function() { throw 'x' };\",\n        \"f\",\n        \"function (): ?\");\n  }\n",
        "begin_line": 1835,
        "end_line": 1843,
        "comment": "",
        "child_ranges": [
            "(line 1836,col 5)-(line 1838,col 47)",
            "(line 1839,col 5)-(line 1842,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference22()",
        "snippet": "  public void testFunctionInference22() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var f = function() { g(this); };\" +\n        \"/** @param {boolean} x */ var g = function(x) {};\");\n  }\n",
        "begin_line": 1845,
        "end_line": 1849,
        "comment": "",
        "child_ranges": [
            "(line 1846,col 5)-(line 1848,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference23()",
        "snippet": "  public void testFunctionInference23() throws Exception {\n    // We want to make sure that 'prop' isn't declared on all objects.\n    testTypes(\n        \"/** @type {!Function} */ var f = function() {\\n\" +\n        \"  /** @type {number} */ this.prop = 3;\\n\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {Object} x\\n\" +\n        \" * @return {string}\\n\" +\n        \" */ var g = function(x) { return x.prop; };\");\n  }\n",
        "begin_line": 1851,
        "end_line": 1861,
        "comment": "",
        "child_ranges": [
            "(line 1853,col 5)-(line 1860,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1863,
        "end_line": 1873,
        "comment": "",
        "child_ranges": [
            "(line 1864,col 5)-(line 1872,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1875,
        "end_line": 1887,
        "comment": "",
        "child_ranges": [
            "(line 1876,col 5)-(line 1886,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1889,
        "end_line": 1902,
        "comment": "",
        "child_ranges": [
            "(line 1890,col 5)-(line 1901,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1904,
        "end_line": 1917,
        "comment": "",
        "child_ranges": [
            "(line 1905,col 5)-(line 1916,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1919,
        "end_line": 1931,
        "comment": "",
        "child_ranges": [
            "(line 1920,col 5)-(line 1930,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1933,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1934,col 5)-(line 1943,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1946,
        "end_line": 1958,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1957,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1960,
        "end_line": 1971,
        "comment": "",
        "child_ranges": [
            "(line 1961,col 5)-(line 1970,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1973,
        "end_line": 1981,
        "comment": "",
        "child_ranges": [
            "(line 1974,col 5)-(line 1980,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction10()",
        "snippet": "  public void testInnerFunction10() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @type {?number} */ var x = null;\" +\n        \"  /** @return {string} */\" +\n        \"  function g() {\" +\n        \"    if (!x) {\" +\n        \"      x = 1;\" +\n        \"    }\" +\n        \"    return x;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1983,
        "end_line": 1998,
        "comment": "",
        "child_ranges": [
            "(line 1984,col 5)-(line 1997,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction11()",
        "snippet": "  public void testInnerFunction11() throws Exception {\n    // TODO(nicksantos): This is actually bad inference, because\n    // h sets x to null. We should fix this, but for now we do it\n    // this way so that we don't break existing binaries. We will\n    // need to change TypeInference#isUnflowable to fix this.\n    testTypes(\n        \"function f() {\" +\n        \"  /** @type {?number} */ var x = null;\" +\n        \"  /** @return {number} */\" +\n        \"  function g() {\" +\n        \"    x = 1;\" +\n        \"    h();\" +\n        \"    return x;\" +\n        \"  }\" +\n        \"  function h() {\" +\n        \"    x = null;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 2000,
        "end_line": 2018,
        "comment": "",
        "child_ranges": [
            "(line 2005,col 5)-(line 2017,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 2020,
        "end_line": 2024,
        "comment": "",
        "child_ranges": [
            "(line 2021,col 5)-(line 2023,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2026,
        "end_line": 2033,
        "comment": "",
        "child_ranges": [
            "(line 2027,col 5)-(line 2032,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 2035,
        "end_line": 2040,
        "comment": "",
        "child_ranges": [
            "(line 2036,col 5)-(line 2039,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2042,
        "end_line": 2050,
        "comment": "",
        "child_ranges": [
            "(line 2043,col 5)-(line 2049,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2052,
        "end_line": 2060,
        "comment": "",
        "child_ranges": [
            "(line 2053,col 5)-(line 2059,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2062,
        "end_line": 2071,
        "comment": "",
        "child_ranges": [
            "(line 2063,col 5)-(line 2070,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2073,
        "end_line": 2083,
        "comment": "",
        "child_ranges": [
            "(line 2074,col 5)-(line 2082,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2085,
        "end_line": 2097,
        "comment": "",
        "child_ranges": [
            "(line 2086,col 5)-(line 2096,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2099,
        "end_line": 2111,
        "comment": "",
        "child_ranges": [
            "(line 2100,col 5)-(line 2110,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2113,
        "end_line": 2125,
        "comment": "",
        "child_ranges": [
            "(line 2114,col 5)-(line 2124,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2127,
        "end_line": 2140,
        "comment": "",
        "child_ranges": [
            "(line 2128,col 5)-(line 2139,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }\n",
        "begin_line": 2142,
        "end_line": 2150,
        "comment": "",
        "child_ranges": [
            "(line 2143,col 5)-(line 2149,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\",\n        \"mismatch of the foo property type and the type of the property \" +\n        \"it overrides from superclass F\\n\" +\n        \"original: function (this:F): undefined\\n\" +\n        \"override: function (this:G, ?, ?): undefined\");\n  }\n",
        "begin_line": 2152,
        "end_line": 2163,
        "comment": "",
        "child_ranges": [
            "(line 2153,col 5)-(line 2162,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(opt_b, var_args) { };\" +\n        \"(new G()).foo(1, 2, 3);\");\n  }\n",
        "begin_line": 2165,
        "end_line": 2174,
        "comment": "",
        "child_ranges": [
            "(line 2166,col 5)-(line 2173,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 2176,
        "end_line": 2185,
        "comment": "",
        "child_ranges": [
            "(line 2177,col 5)-(line 2184,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2187,
        "end_line": 2194,
        "comment": "",
        "child_ranges": [
            "(line 2188,col 5)-(line 2193,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2196,
        "end_line": 2203,
        "comment": "",
        "child_ranges": [
            "(line 2197,col 5)-(line 2202,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2205,
        "end_line": 2211,
        "comment": "",
        "child_ranges": [
            "(line 2206,col 5)-(line 2210,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 2213,
        "end_line": 2221,
        "comment": "",
        "child_ranges": [
            "(line 2214,col 5)-(line 2220,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2223,
        "end_line": 2229,
        "comment": "",
        "child_ranges": [
            "(line 2224,col 5)-(line 2228,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2231,
        "end_line": 2236,
        "comment": "",
        "child_ranges": [
            "(line 2232,col 5)-(line 2235,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2238,
        "end_line": 2243,
        "comment": "",
        "child_ranges": [
            "(line 2239,col 5)-(line 2242,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 2245,
        "end_line": 2253,
        "comment": "",
        "child_ranges": [
            "(line 2246,col 5)-(line 2252,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2255,
        "end_line": 2261,
        "comment": "",
        "child_ranges": [
            "(line 2256,col 5)-(line 2260,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2263,
        "end_line": 2269,
        "comment": "",
        "child_ranges": [
            "(line 2264,col 5)-(line 2268,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2271,
        "end_line": 2279,
        "comment": "",
        "child_ranges": [
            "(line 2272,col 5)-(line 2278,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        Lists.newArrayList(\n            \"assignment to property foo of goog\\n\" +\n            \"found   : string\\n\" +\n            \"required: Foo\",\n            \"variable goog.foo redefined with type string, \" +\n            \"original definition at [testcode]:1 with type Foo\"));\n  }\n",
        "begin_line": 2281,
        "end_line": 2293,
        "comment": "",
        "child_ranges": [
            "(line 2282,col 5)-(line 2292,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        Lists.newArrayList(\n            \"assignment to property foo of goog\\n\" +\n            \"found   : string\\n\" +\n            \"required: Foo\",\n            \"variable goog.foo redefined with type string, \" +\n            \"original definition at [testcode]:1 with type Foo\"));\n  }\n",
        "begin_line": 2295,
        "end_line": 2307,
        "comment": "",
        "child_ranges": [
            "(line 2296,col 5)-(line 2306,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2309,
        "end_line": 2314,
        "comment": "",
        "child_ranges": [
            "(line 2310,col 5)-(line 2313,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 2316,
        "end_line": 2321,
        "comment": "",
        "child_ranges": [
            "(line 2317,col 5)-(line 2320,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 2323,
        "end_line": 2329,
        "comment": "",
        "child_ranges": [
            "(line 2324,col 5)-(line 2328,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 2331,
        "end_line": 2337,
        "comment": "",
        "child_ranges": [
            "(line 2332,col 5)-(line 2336,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDec20()",
        "snippet": "  public void testDuplicateStaticPropertyDec20() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @fileoverview\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */\" +\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2339,
        "end_line": 2348,
        "comment": "",
        "child_ranges": [
            "(line 2340,col 5)-(line 2347,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at [testcode]:2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 2350,
        "end_line": 2360,
        "comment": "",
        "child_ranges": [
            "(line 2351,col 5)-(line 2359,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod1()",
        "snippet": "  public void testDuplicateInstanceMethod1() throws Exception {\n    // If there's no jsdoc on the methods, then we treat them like\n    // any other inferred properties.\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"F.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 2362,
        "end_line": 2369,
        "comment": "",
        "child_ranges": [
            "(line 2365,col 5)-(line 2368,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod2()",
        "snippet": "  public void testDuplicateInstanceMethod2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\",\n        \"variable F.prototype.bar redefined with type \" +\n        \"function (this:F): undefined, original definition at \" +\n        \"[testcode]:1 with type function (this:F): undefined\");\n  }\n",
        "begin_line": 2371,
        "end_line": 2379,
        "comment": "",
        "child_ranges": [
            "(line 2372,col 5)-(line 2378,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod3()",
        "snippet": "  public void testDuplicateInstanceMethod3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\",\n        \"variable F.prototype.bar redefined with type \" +\n        \"function (this:F): undefined, original definition at \" +\n        \"[testcode]:1 with type function (this:F): undefined\");\n  }\n",
        "begin_line": 2381,
        "end_line": 2389,
        "comment": "",
        "child_ranges": [
            "(line 2382,col 5)-(line 2388,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod4()",
        "snippet": "  public void testDuplicateInstanceMethod4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\" +\n        \"F.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 2391,
        "end_line": 2396,
        "comment": "",
        "child_ranges": [
            "(line 2392,col 5)-(line 2395,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod5()",
        "snippet": "  public void testDuplicateInstanceMethod5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc \\n * @return {number} */ F.prototype.bar = function() {\" +\n        \"  return 3;\" +\n        \"};\" +\n        \"/** jsdoc \\n * @suppress {duplicate} */ \" +\n        \"F.prototype.bar = function() { return ''; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2398,
        "end_line": 2409,
        "comment": "",
        "child_ranges": [
            "(line 2399,col 5)-(line 2408,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod6()",
        "snippet": "  public void testDuplicateInstanceMethod6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc \\n * @return {number} */ F.prototype.bar = function() {\" +\n        \"  return 3;\" +\n        \"};\" +\n        \"/** jsdoc \\n * @return {string} * \\n @suppress {duplicate} */ \" +\n        \"F.prototype.bar = function() { return ''; };\",\n        \"assignment to property bar of F.prototype\\n\" +\n        \"found   : function (this:F): string\\n\" +\n        \"required: function (this:F): number\");\n  }\n",
        "begin_line": 2411,
        "end_line": 2422,
        "comment": "",
        "child_ranges": [
            "(line 2412,col 5)-(line 2421,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 2424,
        "end_line": 2431,
        "comment": "",
        "child_ranges": [
            "(line 2425,col 5)-(line 2430,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 2433,
        "end_line": 2440,
        "comment": "",
        "child_ranges": [
            "(line 2434,col 5)-(line 2439,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 2442,
        "end_line": 2448,
        "comment": "",
        "child_ranges": [
            "(line 2443,col 5)-(line 2447,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2450,
        "end_line": 2457,
        "comment": "",
        "child_ranges": [
            "(line 2451,col 5)-(line 2456,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2459,
        "end_line": 2466,
        "comment": "",
        "child_ranges": [
            "(line 2460,col 5)-(line 2465,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2468,
        "end_line": 2474,
        "comment": "",
        "child_ranges": [
            "(line 2469,col 5)-(line 2473,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2476,
        "end_line": 2482,
        "comment": "",
        "child_ranges": [
            "(line 2477,col 5)-(line 2481,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2484,
        "end_line": 2489,
        "comment": "",
        "child_ranges": [
            "(line 2485,col 5)-(line 2488,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2491,
        "end_line": 2496,
        "comment": "",
        "child_ranges": [
            "(line 2492,col 5)-(line 2495,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2498,
        "end_line": 2503,
        "comment": "",
        "child_ranges": [
            "(line 2499,col 5)-(line 2502,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2505,
        "end_line": 2511,
        "comment": "",
        "child_ranges": [
            "(line 2506,col 5)-(line 2508,col 60)",
            "(line 2509,col 5)-(line 2510,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2517,
        "end_line": 2520,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2519,col 5)-(line 2519,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2526,
        "end_line": 2535,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2529,col 5)-(line 2534,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2542,
        "end_line": 2550,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2544,col 5)-(line 2549,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testClosureTypesMultipleWarnings(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        Lists.newArrayList(\n            \"variable a.A redefined with type function (new:a.A): undefined, \" +\n            \"original definition at [testcode]:1 with type enum{a.A}\",\n            \"assignment to property A of a\\n\" +\n            \"found   : function (new:a.A): undefined\\n\" +\n            \"required: enum{a.A}\"));\n  }\n",
        "begin_line": 2552,
        "end_line": 2561,
        "comment": "",
        "child_ranges": [
            "(line 2553,col 5)-(line 2560,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2563,
        "end_line": 2565,
        "comment": "",
        "child_ranges": [
            "(line 2564,col 5)-(line 2564,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2567,
        "end_line": 2569,
        "comment": "",
        "child_ranges": [
            "(line 2568,col 5)-(line 2568,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2571,
        "end_line": 2573,
        "comment": "",
        "child_ranges": [
            "(line 2572,col 5)-(line 2572,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2575,
        "end_line": 2580,
        "comment": "",
        "child_ranges": [
            "(line 2576,col 5)-(line 2579,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2582,
        "end_line": 2587,
        "comment": "",
        "child_ranges": [
            "(line 2583,col 5)-(line 2586,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2589,
        "end_line": 2597,
        "comment": "",
        "child_ranges": [
            "(line 2590,col 5)-(line 2596,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2599,
        "end_line": 2615,
        "comment": "",
        "child_ranges": [
            "(line 2601,col 5)-(line 2614,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn1()",
        "snippet": "  public void testForIn1() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"for (var k in {}) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2617,
        "end_line": 2626,
        "comment": "",
        "child_ranges": [
            "(line 2618,col 5)-(line 2625,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn2()",
        "snippet": "  public void testForIn2() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, string>} */ var obj = {};\" +\n        \"var k = null;\" +\n        \"for (k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E.<string>\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2628,
        "end_line": 2640,
        "comment": "",
        "child_ranges": [
            "(line 2629,col 5)-(line 2639,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn3()",
        "snippet": "  public void testForIn3() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @type {Object.<number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2642,
        "end_line": 2652,
        "comment": "",
        "child_ranges": [
            "(line 2643,col 5)-(line 2651,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn4()",
        "snippet": "  public void testForIn4() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, Array>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (Array|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2654,
        "end_line": 2665,
        "comment": "",
        "child_ranges": [
            "(line 2655,col 5)-(line 2664,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn5()",
        "snippet": "  public void testForIn5() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @constructor */ var E = function(){};\" +\n        \"/** @type {Object.<E, number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2667,
        "end_line": 2678,
        "comment": "",
        "child_ranges": [
            "(line 2668,col 5)-(line 2677,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to true\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2690,
        "end_line": 2697,
        "comment": "",
        "child_ranges": [
            "(line 2691,col 5)-(line 2696,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2699,
        "end_line": 2703,
        "comment": "",
        "child_ranges": [
            "(line 2701,col 5)-(line 2702,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2705,
        "end_line": 2709,
        "comment": "",
        "child_ranges": [
            "(line 2706,col 5)-(line 2708,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2711,
        "end_line": 2718,
        "comment": "",
        "child_ranges": [
            "(line 2712,col 5)-(line 2717,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2720,
        "end_line": 2727,
        "comment": "",
        "child_ranges": [
            "(line 2721,col 5)-(line 2726,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2729,
        "end_line": 2736,
        "comment": "",
        "child_ranges": [
            "(line 2730,col 5)-(line 2735,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2738,
        "end_line": 2741,
        "comment": "",
        "child_ranges": [
            "(line 2739,col 5)-(line 2740,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2743,
        "end_line": 2749,
        "comment": "",
        "child_ranges": [
            "(line 2744,col 5)-(line 2748,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2751,
        "end_line": 2754,
        "comment": "",
        "child_ranges": [
            "(line 2752,col 5)-(line 2753,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison11()",
        "snippet": "  public void testComparison11() throws Exception {\n    testTypes(\n        \"(function(){}) == 'x'\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 2756,
        "end_line": 2762,
        "comment": "",
        "child_ranges": [
            "(line 2757,col 5)-(line 2761,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison12()",
        "snippet": "  public void testComparison12() throws Exception {\n    testTypes(\n        \"(function(){}) == 3\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 2764,
        "end_line": 2770,
        "comment": "",
        "child_ranges": [
            "(line 2765,col 5)-(line 2769,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison13()",
        "snippet": "  public void testComparison13() throws Exception {\n    testTypes(\n        \"(function(){}) == false\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: boolean\");\n  }\n",
        "begin_line": 2772,
        "end_line": 2778,
        "comment": "",
        "child_ranges": [
            "(line 2773,col 5)-(line 2777,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison14()",
        "snippet": "  public void testComparison14() throws Exception {\n    testTypes(\"/** @type {function((Array|string), Object): number} */\" +\n        \"function f(x, y) { return x === y; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2780,
        "end_line": 2786,
        "comment": "",
        "child_ranges": [
            "(line 2781,col 5)-(line 2785,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison15()",
        "snippet": "  public void testComparison15() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function F() {}\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {F}\\n\" +\n        \" */\\n\" +\n        \"function G(x) {}\\n\" +\n        \"goog.inherits(G, F);\\n\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {G}\\n\" +\n        \" */\\n\" +\n        \"function H(x) {}\\n\" +\n        \"goog.inherits(H, G);\\n\" +\n        \"/** @param {G} x */\" +\n        \"function f(x) { return x.constructor === H; }\",\n        null);\n  }\n",
        "begin_line": 2788,
        "end_line": 2809,
        "comment": "",
        "child_ranges": [
            "(line 2789,col 5)-(line 2808,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator1()",
        "snippet": "  public void testDeleteOperator1() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/** @return {string} */ function f() { return delete x['a']; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2811,
        "end_line": 2818,
        "comment": "",
        "child_ranges": [
            "(line 2812,col 5)-(line 2817,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator2()",
        "snippet": "  public void testDeleteOperator2() throws Exception {\n    testTypes(\n        \"var obj = {};\" +\n        \"/** \\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @return {Object} */ function f(x) { return obj; }\" +\n        \"/** @param {?number} x */ function g(x) {\" +\n        \"  if (x) { delete f(x)['a']; }\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2820,
        "end_line": 2832,
        "comment": "",
        "child_ranges": [
            "(line 2821,col 5)-(line 2831,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2834,
        "end_line": 2842,
        "comment": "",
        "child_ranges": [
            "(line 2835,col 5)-(line 2841,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2844,
        "end_line": 2852,
        "comment": "",
        "child_ranges": [
            "(line 2845,col 5)-(line 2851,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2854,
        "end_line": 2857,
        "comment": "",
        "child_ranges": [
            "(line 2855,col 5)-(line 2856,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2859,
        "end_line": 2862,
        "comment": "",
        "child_ranges": [
            "(line 2860,col 5)-(line 2861,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"variable a.BB redefined with type a.<number>, \" +\n        \"original definition at [testcode]:1 with type a.<number>\");\n  }\n",
        "begin_line": 2864,
        "end_line": 2868,
        "comment": "",
        "child_ranges": [
            "(line 2865,col 5)-(line 2867,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2870,
        "end_line": 2875,
        "comment": "",
        "child_ranges": [
            "(line 2871,col 5)-(line 2874,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 2877,
        "end_line": 2882,
        "comment": "",
        "child_ranges": [
            "(line 2878,col 5)-(line 2881,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2884,
        "end_line": 2889,
        "comment": "",
        "child_ranges": [
            "(line 2885,col 5)-(line 2888,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2891,
        "end_line": 2895,
        "comment": "",
        "child_ranges": [
            "(line 2892,col 5)-(line 2894,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testClosureTypesMultipleWarnings(\"/** @enum */var a=8;\",\n        Lists.newArrayList(\n            \"enum initializer must be an object literal or an enum\",\n            \"initializing variable\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{a}\"));\n  }\n",
        "begin_line": 2897,
        "end_line": 2904,
        "comment": "",
        "child_ranges": [
            "(line 2898,col 5)-(line 2903,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        Lists.newArrayList(\n            \"assignment to property a of goog\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{goog.a}\",\n            \"enum initializer must be an object literal or an enum\"));\n  }\n",
        "begin_line": 2906,
        "end_line": 2915,
        "comment": "",
        "child_ranges": [
            "(line 2907,col 5)-(line 2914,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2917,
        "end_line": 2921,
        "comment": "",
        "child_ranges": [
            "(line 2918,col 5)-(line 2920,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2923,
        "end_line": 2927,
        "comment": "",
        "child_ranges": [
            "(line 2924,col 5)-(line 2926,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2929,
        "end_line": 2933,
        "comment": "",
        "child_ranges": [
            "(line 2930,col 5)-(line 2932,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2935,
        "end_line": 2942,
        "comment": "",
        "child_ranges": [
            "(line 2936,col 5)-(line 2941,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2944,
        "end_line": 2949,
        "comment": "",
        "child_ranges": [
            "(line 2945,col 5)-(line 2948,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2951,
        "end_line": 2957,
        "comment": "",
        "child_ranges": [
            "(line 2952,col 5)-(line 2956,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog .a={BB:1,BB:2}\",\n        \"variable goog.a.BB redefined with type goog.a.<number>, \" +\n        \"original definition at [testcode]:1 with type goog.a.<number>\");\n  }\n",
        "begin_line": 2959,
        "end_line": 2964,
        "comment": "",
        "child_ranges": [
            "(line 2960,col 5)-(line 2963,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"assignment to property BB of enum{goog.a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2966,
        "end_line": 2972,
        "comment": "",
        "child_ranges": [
            "(line 2967,col 5)-(line 2971,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2974,
        "end_line": 2978,
        "comment": "",
        "child_ranges": [
            "(line 2975,col 5)-(line 2977,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2980,
        "end_line": 2987,
        "comment": "",
        "child_ranges": [
            "(line 2981,col 5)-(line 2986,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2989,
        "end_line": 2991,
        "comment": "",
        "child_ranges": [
            "(line 2990,col 5)-(line 2990,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2993,
        "end_line": 3001,
        "comment": "",
        "child_ranges": [
            "(line 2994,col 5)-(line 2996,col 74)",
            "(line 2997,col 5)-(line 2997,col 79)",
            "(line 2998,col 5)-(line 2998,col 37)",
            "(line 2999,col 5)-(line 2999,col 34)",
            "(line 3000,col 5)-(line 3000,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 3003,
        "end_line": 3006,
        "comment": "",
        "child_ranges": [
            "(line 3004,col 5)-(line 3005,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3008,
        "end_line": 3014,
        "comment": "",
        "child_ranges": [
            "(line 3009,col 5)-(line 3013,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3016,
        "end_line": 3022,
        "comment": "",
        "child_ranges": [
            "(line 3017,col 5)-(line 3021,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 3024,
        "end_line": 3027,
        "comment": "",
        "child_ranges": [
            "(line 3025,col 5)-(line 3026,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 3029,
        "end_line": 3032,
        "comment": "",
        "child_ranges": [
            "(line 3030,col 5)-(line 3031,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 3034,
        "end_line": 3038,
        "comment": "",
        "child_ranges": [
            "(line 3036,col 5)-(line 3037,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 3040,
        "end_line": 3044,
        "comment": "",
        "child_ranges": [
            "(line 3042,col 5)-(line 3043,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3046,
        "end_line": 3052,
        "comment": "",
        "child_ranges": [
            "(line 3047,col 5)-(line 3051,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 3054,
        "end_line": 3057,
        "comment": "",
        "child_ranges": [
            "(line 3055,col 5)-(line 3056,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 3059,
        "end_line": 3065,
        "comment": "",
        "child_ranges": [
            "(line 3060,col 5)-(line 3064,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 3067,
        "end_line": 3070,
        "comment": "",
        "child_ranges": [
            "(line 3068,col 5)-(line 3069,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 3072,
        "end_line": 3075,
        "comment": "",
        "child_ranges": [
            "(line 3073,col 5)-(line 3074,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 3077,
        "end_line": 3080,
        "comment": "",
        "child_ranges": [
            "(line 3078,col 5)-(line 3079,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 3082,
        "end_line": 3088,
        "comment": "",
        "child_ranges": [
            "(line 3083,col 5)-(line 3087,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 3090,
        "end_line": 3095,
        "comment": "",
        "child_ranges": [
            "(line 3091,col 5)-(line 3094,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 3097,
        "end_line": 3103,
        "comment": "",
        "child_ranges": [
            "(line 3098,col 5)-(line 3102,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3105,
        "end_line": 3113,
        "comment": "",
        "child_ranges": [
            "(line 3106,col 5)-(line 3112,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3115,
        "end_line": 3123,
        "comment": "",
        "child_ranges": [
            "(line 3116,col 5)-(line 3122,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum41()",
        "snippet": "  public void testEnum41() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var MyEnum = {/** @const */ FOO: 1};\" +\n        \"/** @return {string} */\" +\n        \"function f() { return MyEnum.FOO; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3125,
        "end_line": 3133,
        "comment": "",
        "child_ranges": [
            "(line 3126,col 5)-(line 3132,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum42()",
        "snippet": "  public void testEnum42() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @enum {Object} */ var MyEnum = {FOO: {newProperty: 1, b: 2}};\" +\n        \"f(MyEnum.FOO.newProperty);\");\n  }\n",
        "begin_line": 3135,
        "end_line": 3140,
        "comment": "",
        "child_ranges": [
            "(line 3136,col 5)-(line 3139,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 3142,
        "end_line": 3147,
        "comment": "",
        "child_ranges": [
            "(line 3143,col 5)-(line 3146,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 3149,
        "end_line": 3154,
        "comment": "",
        "child_ranges": [
            "(line 3150,col 5)-(line 3153,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 3156,
        "end_line": 3161,
        "comment": "",
        "child_ranges": [
            "(line 3157,col 5)-(line 3160,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 3163,
        "end_line": 3168,
        "comment": "",
        "child_ranges": [
            "(line 3164,col 5)-(line 3167,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3170,
        "end_line": 3178,
        "comment": "",
        "child_ranges": [
            "(line 3171,col 5)-(line 3177,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 3180,
        "end_line": 3184,
        "comment": "",
        "child_ranges": [
            "(line 3181,col 5)-(line 3183,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3186,
        "end_line": 3193,
        "comment": "",
        "child_ranges": [
            "(line 3187,col 5)-(line 3192,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 3195,
        "end_line": 3200,
        "comment": "",
        "child_ranges": [
            "(line 3196,col 5)-(line 3199,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3202,
        "end_line": 3210,
        "comment": "",
        "child_ranges": [
            "(line 3203,col 5)-(line 3209,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 3212,
        "end_line": 3218,
        "comment": "",
        "child_ranges": [
            "(line 3213,col 5)-(line 3217,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse2()",
        "snippet": "  public void testBackwardsTypedefUse2() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {!(Date|Array)} */ var MyTypedef;\");\n  }\n",
        "begin_line": 3220,
        "end_line": 3224,
        "comment": "",
        "child_ranges": [
            "(line 3221,col 5)-(line 3223,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse4()",
        "snippet": "  public void testBackwardsTypedefUse4() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3226,
        "end_line": 3233,
        "comment": "",
        "child_ranges": [
            "(line 3227,col 5)-(line 3232,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse6()",
        "snippet": "  public void testBackwardsTypedefUse6() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {string} */ goog.MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3235,
        "end_line": 3243,
        "comment": "",
        "child_ranges": [
            "(line 3236,col 5)-(line 3242,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse7()",
        "snippet": "  public void testBackwardsTypedefUse7() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {Object} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 3245,
        "end_line": 3250,
        "comment": "",
        "child_ranges": [
            "(line 3246,col 5)-(line 3249,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8()",
        "snippet": "  public void testBackwardsTypedefUse8() throws Exception {\n    // Technically, this isn't quite right, because the JS runtime\n    // will coerce null -> the global object. But we'll punt on that for now.\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 3252,
        "end_line": 3260,
        "comment": "",
        "child_ranges": [
            "(line 3255,col 5)-(line 3259,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9()",
        "snippet": "  public void testBackwardsTypedefUse9() throws Exception {\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 3262,
        "end_line": 3271,
        "comment": "",
        "child_ranges": [
            "(line 3263,col 5)-(line 3270,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse10()",
        "snippet": "  public void testBackwardsTypedefUse10() throws Exception {\n    testTypes(\n        \"/** @param {goog.MyEnum} x */ function g(x) {}\" +\n        \"var goog = {};\" +\n        \"/** @enum {goog.MyTypedef} */ goog.MyEnum = {FOO: 1};\" +\n        \"/** @typedef {number} */ goog.MyTypedef;\" +\n        \"g(1);\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: goog.MyEnum.<number>\");\n  }\n",
        "begin_line": 3273,
        "end_line": 3283,
        "comment": "",
        "child_ranges": [
            "(line 3274,col 5)-(line 3282,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3285,
        "end_line": 3293,
        "comment": "",
        "child_ranges": [
            "(line 3286,col 5)-(line 3292,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3295,
        "end_line": 3305,
        "comment": "",
        "child_ranges": [
            "(line 3296,col 5)-(line 3304,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 3307,
        "end_line": 3309,
        "comment": "",
        "child_ranges": [
            "(line 3308,col 5)-(line 3308,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3311,
        "end_line": 3315,
        "comment": "",
        "child_ranges": [
            "(line 3313,col 5)-(line 3314,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 3317,
        "end_line": 3320,
        "comment": "",
        "child_ranges": [
            "(line 3318,col 5)-(line 3319,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3322,
        "end_line": 3325,
        "comment": "",
        "child_ranges": [
            "(line 3323,col 5)-(line 3324,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 3327,
        "end_line": 3345,
        "comment": "",
        "child_ranges": [
            "(line 3331,col 5)-(line 3335,col 69)",
            "(line 3336,col 5)-(line 3336,col 71)",
            "(line 3337,col 5)-(line 3337,col 65)",
            "(line 3339,col 5)-(line 3340,col 57)",
            "(line 3341,col 5)-(line 3341,col 75)",
            "(line 3343,col 5)-(line 3343,col 73)",
            "(line 3344,col 5)-(line 3344,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 3347,
        "end_line": 3351,
        "comment": "",
        "child_ranges": [
            "(line 3349,col 5)-(line 3350,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 3353,
        "end_line": 3363,
        "comment": "",
        "child_ranges": [
            "(line 3354,col 5)-(line 3362,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived, ...[?]): ?\");\n  }\n",
        "begin_line": 3365,
        "end_line": 3373,
        "comment": "",
        "child_ranges": [
            "(line 3366,col 5)-(line 3372,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3375,
        "end_line": 3383,
        "comment": "",
        "child_ranges": [
            "(line 3376,col 5)-(line 3382,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 3385,
        "end_line": 3392,
        "comment": "",
        "child_ranges": [
            "(line 3386,col 5)-(line 3391,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 3394,
        "end_line": 3400,
        "comment": "",
        "child_ranges": [
            "(line 3395,col 5)-(line 3399,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3402,
        "end_line": 3413,
        "comment": "",
        "child_ranges": [
            "(line 3403,col 5)-(line 3412,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends12()",
        "snippet": "  public void testGoodExtends12() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {Super} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\");\n  }\n",
        "begin_line": 3415,
        "end_line": 3422,
        "comment": "",
        "child_ranges": [
            "(line 3416,col 5)-(line 3421,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends13()",
        "snippet": "  public void testGoodExtends13() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {B}  */ function C() {}\" +\n        \"/** @constructor \\n * @extends {D}  */ function E() {}\" +\n        \"/** @constructor \\n * @extends {C}  */ function D() {}\" +\n        \"/** @constructor \\n * @extends {A} */ function B() {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @param {number} x */ function f(x) {} f(new E());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3424,
        "end_line": 3435,
        "comment": "",
        "child_ranges": [
            "(line 3425,col 5)-(line 3434,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends14()",
        "snippet": "  public void testGoodExtends14() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Function} f */ function g(f) {\" +\n        \"  /** @constructor */ function NewType() {};\" +\n        \"  goog.inherits(NewType, f);\" +\n        \"  (new NewType());\" +\n        \"}\");\n  }\n",
        "begin_line": 3437,
        "end_line": 3445,
        "comment": "",
        "child_ranges": [
            "(line 3438,col 5)-(line 3444,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends15()",
        "snippet": "  public void testGoodExtends15() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function OldType() {}\" +\n        \"/** @param {?function(new:OldType)} f */ function g(f) {\" +\n        \"  /**\\n\" +\n        \"    * @constructor\\n\" +\n        \"    * @extends {OldType}\\n\" +\n        \"    */\\n\" +\n        \"  function NewType() {};\" +\n        \"  goog.inherits(NewType, f);\" +\n        \"  NewType.prototype.method = function() {\" +\n        \"    NewType.superClass_.foo.call(this);\" +\n        \"  };\" +\n        \"}\",\n        \"Property foo never defined on OldType.prototype\");\n  }\n",
        "begin_line": 3447,
        "end_line": 3463,
        "comment": "",
        "child_ranges": [
            "(line 3448,col 5)-(line 3462,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends16()",
        "snippet": "  public void testGoodExtends16() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Function} f */ function g(f) {\" +\n        \"  /** @constructor */ function NewType() {};\" +\n        \"  goog.inherits(f, NewType);\" +\n        \"  (new NewType());\" +\n        \"}\");\n  }\n",
        "begin_line": 3465,
        "end_line": 3473,
        "comment": "",
        "child_ranges": [
            "(line 3466,col 5)-(line 3472,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends17()",
        "snippet": "  public void testGoodExtends17() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @param {number} x */ base.prototype.bar = function(x) {};\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor.prototype.bar\",\n        \"function (this:base, number): undefined\");\n  }\n",
        "begin_line": 3475,
        "end_line": 3484,
        "comment": "",
        "child_ranges": [
            "(line 3476,col 5)-(line 3483,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 3486,
        "end_line": 3490,
        "comment": "",
        "child_ranges": [
            "(line 3487,col 5)-(line 3489,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 3492,
        "end_line": 3506,
        "comment": "",
        "child_ranges": [
            "(line 3493,col 5)-(line 3505,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 3508,
        "end_line": 3511,
        "comment": "",
        "child_ranges": [
            "(line 3509,col 5)-(line 3510,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends4()",
        "snippet": "  public void testBadExtends4() throws Exception {\n    // If there's a subclass of a class with a bad extends,\n    // we only want to warn about the first one.\n    testTypes(\n        \"/** @constructor \\n * @extends {bad} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @param {Sub} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\",\n        \"Bad type annotation. Unknown type bad\");\n  }\n",
        "begin_line": 3513,
        "end_line": 3522,
        "comment": "",
        "child_ranges": [
            "(line 3516,col 5)-(line 3521,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 3524,
        "end_line": 3532,
        "comment": "",
        "child_ranges": [
            "(line 3525,col 5)-(line 3531,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 3534,
        "end_line": 3540,
        "comment": "",
        "child_ranges": [
            "(line 3535,col 5)-(line 3535,col 76)",
            "(line 3536,col 5)-(line 3539,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 3542,
        "end_line": 3551,
        "comment": "",
        "child_ranges": [
            "(line 3543,col 5)-(line 3543,col 76)",
            "(line 3544,col 5)-(line 3550,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3553,
        "end_line": 3560,
        "comment": "",
        "child_ranges": [
            "(line 3554,col 5)-(line 3554,col 76)",
            "(line 3555,col 5)-(line 3559,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3562,
        "end_line": 3569,
        "comment": "",
        "child_ranges": [
            "(line 3563,col 5)-(line 3563,col 76)",
            "(line 3564,col 5)-(line 3568,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 3571,
        "end_line": 3578,
        "comment": "",
        "child_ranges": [
            "(line 3572,col 5)-(line 3577,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 3580,
        "end_line": 3587,
        "comment": "",
        "child_ranges": [
            "(line 3581,col 5)-(line 3586,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3589,
        "end_line": 3599,
        "comment": "",
        "child_ranges": [
            "(line 3590,col 5)-(line 3598,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 3601,
        "end_line": 3610,
        "comment": "",
        "child_ranges": [
            "(line 3604,col 5)-(line 3609,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment3()",
        "snippet": "  public void testDirectPrototypeAssignment3() throws Exception {\n    // This verifies that the compiler doesn't crash if the user\n    // overwrites the prototype of a global variable in a local scope.\n    testTypes(\n        \"/** @constructor */ var MainWidgetCreator = function() {};\" +\n        \"/** @param {Function} ctor */\" +\n        \"function createMainWidget(ctor) {\" +\n        \"  /** @constructor */ function tempCtor() {};\" +\n        \"  tempCtor.prototype = ctor.prototype;\" +\n        \"  MainWidgetCreator.superClass_ = ctor.prototype;\" +\n        \"  MainWidgetCreator.prototype = new tempCtor();\" +\n        \"}\");\n  }\n",
        "begin_line": 3612,
        "end_line": 3624,
        "comment": "",
        "child_ranges": [
            "(line 3615,col 5)-(line 3623,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 3626,
        "end_line": 3629,
        "comment": "",
        "child_ranges": [
            "(line 3627,col 5)-(line 3628,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3631,
        "end_line": 3638,
        "comment": "",
        "child_ranges": [
            "(line 3632,col 5)-(line 3637,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements3()",
        "snippet": "  public void testGoodImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @constructor \\n @implements {Disposable} */function f() {}\");\n  }\n",
        "begin_line": 3640,
        "end_line": 3643,
        "comment": "",
        "child_ranges": [
            "(line 3641,col 5)-(line 3642,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements4()",
        "snippet": "  public void testGoodImplements4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type {!Function} */\" +\n        \"goog.abstractMethod = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = goog.abstractMethod;\" +\n        \"goog.Disposable.prototype.dispose = goog.abstractMethod;\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @inheritDoc */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() {};\");\n  }\n",
        "begin_line": 3645,
        "end_line": 3656,
        "comment": "",
        "child_ranges": [
            "(line 3646,col 5)-(line 3655,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements5()",
        "snippet": "  public void testGoodImplements5() throws Exception {\n    testTypes(\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = function() {};\" +\n        \"/** @type {Function} */\" +\n        \"goog.Disposable.prototype.dispose = function() {};\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @param {number} key \\n @override */ \" +\n        \"goog.SubDisposable.prototype.dispose = function(key) {};\");\n  }\n",
        "begin_line": 3658,
        "end_line": 3668,
        "comment": "",
        "child_ranges": [
            "(line 3659,col 5)-(line 3667,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements6()",
        "snippet": "  public void testGoodImplements6() throws Exception {\n    testTypes(\n        \"var myNullFunction = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = function() {};\" +\n        \"/** @return {number} */\" +\n        \"goog.Disposable.prototype.dispose = myNullFunction;\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @return {number} \\n @override */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() { return 0; };\");\n  }\n",
        "begin_line": 3670,
        "end_line": 3681,
        "comment": "",
        "child_ranges": [
            "(line 3671,col 5)-(line 3680,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements7()",
        "snippet": "  public void testGoodImplements7() throws Exception {\n    testTypes(\n        \"var myNullFunction = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = function() {};\" +\n        \"/** @return {number} */\" +\n        \"goog.Disposable.prototype.dispose = function() {};\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @return {number} \\n @override */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() { return 0; };\");\n  }\n",
        "begin_line": 3683,
        "end_line": 3694,
        "comment": "",
        "child_ranges": [
            "(line 3684,col 5)-(line 3693,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3696,
        "end_line": 3704,
        "comment": "",
        "child_ranges": [
            "(line 3697,col 5)-(line 3703,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor for f\");\n  }\n",
        "begin_line": 3706,
        "end_line": 3710,
        "comment": "",
        "child_ranges": [
            "(line 3707,col 5)-(line 3709,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {!Function} */ goog.abstractMethod = function(){};\" +\n        \"/** @interface */ var Disposable = goog.abstractMethod;\" +\n        \"Disposable.prototype.method = goog.abstractMethod;\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\",\n        \"property method on interface Disposable is not implemented by type f\");\n  }\n",
        "begin_line": 3712,
        "end_line": 3720,
        "comment": "",
        "child_ranges": [
            "(line 3713,col 5)-(line 3719,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements4()",
        "snippet": "  public void testBadImplements4() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 3722,
        "end_line": 3727,
        "comment": "",
        "child_ranges": [
            "(line 3723,col 5)-(line 3726,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements5()",
        "snippet": "  public void testBadImplements5() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @type {number} */ Disposable.prototype.bar = function() {};\",\n        \"assignment to property bar of Disposable.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3729,
        "end_line": 3735,
        "comment": "",
        "child_ranges": [
            "(line 3730,col 5)-(line 3734,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements6()",
        "snippet": "  public void testBadImplements6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @interface */function Disposable() {}\\n\" +\n        \"/** @type {function()} */ Disposable.prototype.bar = 3;\",\n        Lists.newArrayList(\n            \"assignment to property bar of Disposable.prototype\\n\" +\n            \"found   : number\\n\" +\n            \"required: function (): ?\",\n            \"interface members can only be empty property declarations, \" +\n            \"empty functions, or goog.abstractMethod\"));\n  }\n",
        "begin_line": 3737,
        "end_line": 3747,
        "comment": "",
        "child_ranges": [
            "(line 3738,col 5)-(line 3746,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3749,
        "end_line": 3755,
        "comment": "",
        "child_ranges": [
            "(line 3750,col 5)-(line 3754,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3757,
        "end_line": 3760,
        "comment": "",
        "child_ranges": [
            "(line 3758,col 5)-(line 3759,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; interfaces can only extend interfaces\");\n  }\n",
        "begin_line": 3762,
        "end_line": 3766,
        "comment": "",
        "child_ranges": [
            "(line 3763,col 5)-(line 3765,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; constructors can only extend constructors\");\n  }\n",
        "begin_line": 3768,
        "end_line": 3772,
        "comment": "",
        "child_ranges": [
            "(line 3769,col 5)-(line 3771,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3774,
        "end_line": 3781,
        "comment": "",
        "child_ranges": [
            "(line 3778,col 5)-(line 3780,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3783,
        "end_line": 3790,
        "comment": "",
        "child_ranges": [
            "(line 3787,col 5)-(line 3789,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3792,
        "end_line": 3796,
        "comment": "",
        "child_ranges": [
            "(line 3793,col 5)-(line 3795,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3798,
        "end_line": 3801,
        "comment": "",
        "child_ranges": [
            "(line 3799,col 5)-(line 3800,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3803,
        "end_line": 3806,
        "comment": "",
        "child_ranges": [
            "(line 3804,col 5)-(line 3805,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 3808,
        "end_line": 3813,
        "comment": "",
        "child_ranges": [
            "(line 3809,col 5)-(line 3812,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3815,
        "end_line": 3823,
        "comment": "",
        "child_ranges": [
            "(line 3816,col 5)-(line 3822,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 3825,
        "end_line": 3830,
        "comment": "",
        "child_ranges": [
            "(line 3826,col 5)-(line 3829,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 3832,
        "end_line": 3838,
        "comment": "",
        "child_ranges": [
            "(line 3833,col 5)-(line 3837,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 3840,
        "end_line": 3848,
        "comment": "",
        "child_ranges": [
            "(line 3841,col 5)-(line 3847,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 3850,
        "end_line": 3859,
        "comment": "",
        "child_ranges": [
            "(line 3851,col 5)-(line 3858,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3861,
        "end_line": 3869,
        "comment": "",
        "child_ranges": [
            "(line 3862,col 5)-(line 3868,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\\n\" +\n        \"new Object().prototype = i.prototype;\");\n  }\n",
        "begin_line": 3871,
        "end_line": 3876,
        "comment": "",
        "child_ranges": [
            "(line 3872,col 5)-(line 3875,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3878,
        "end_line": 3885,
        "comment": "",
        "child_ranges": [
            "(line 3879,col 5)-(line 3884,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3887,
        "end_line": 3896,
        "comment": "",
        "child_ranges": [
            "(line 3888,col 5)-(line 3895,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3898,
        "end_line": 3907,
        "comment": "",
        "child_ranges": [
            "(line 3899,col 5)-(line 3906,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3909,
        "end_line": 3914,
        "comment": "",
        "child_ranges": [
            "(line 3910,col 5)-(line 3913,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3916,
        "end_line": 3925,
        "comment": "",
        "child_ranges": [
            "(line 3917,col 5)-(line 3924,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3927,
        "end_line": 3932,
        "comment": "",
        "child_ranges": [
            "(line 3928,col 5)-(line 3931,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop2()",
        "snippet": "  public void testGetprop2() throws Exception {\n    testTypes(\"var x = null; x.alert();\",\n        \"No properties on this expression\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3934,
        "end_line": 3939,
        "comment": "",
        "child_ranges": [
            "(line 3935,col 5)-(line 3938,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop3()",
        "snippet": "  public void testGetprop3() throws Exception {\n    testTypes(\n        \"/** @constructor */ \" +\n        \"function Foo() { /** @type {?Object} */ this.x = null; }\" +\n        \"Foo.prototype.initX = function() { this.x = {foo: 1}; };\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x == null) { this.initX(); alert(this.x.foo); }\" +\n        \"};\");\n  }\n",
        "begin_line": 3941,
        "end_line": 3949,
        "comment": "",
        "child_ranges": [
            "(line 3942,col 5)-(line 3948,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop4()",
        "snippet": "  public void testGetprop4() throws Exception {\n    testTypes(\"var x = null; x.prop = 3;\",\n        \"No properties on this expression\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3951,
        "end_line": 3956,
        "comment": "",
        "child_ranges": [
            "(line 3952,col 5)-(line 3955,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop1()",
        "snippet": "  public void testSetprop1() throws Exception {\n    // Create property on struct in the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() { this.x = 123; }\");\n  }\n",
        "begin_line": 3958,
        "end_line": 3965,
        "comment": "",
        "child_ranges": [
            "(line 3960,col 5)-(line 3964,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop2()",
        "snippet": "  public void testSetprop2() throws Exception {\n    // Create property on struct outside the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(new Foo()).x = 123;\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3967,
        "end_line": 3977,
        "comment": "",
        "child_ranges": [
            "(line 3969,col 5)-(line 3976,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop3()",
        "snippet": "  public void testSetprop3() throws Exception {\n    // Create property on struct outside the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(function() { (new Foo()).x = 123; })();\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3979,
        "end_line": 3989,
        "comment": "",
        "child_ranges": [
            "(line 3981,col 5)-(line 3988,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop4()",
        "snippet": "  public void testSetprop4() throws Exception {\n    // Assign to existing property of struct outside the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() { this.x = 123; }\\n\" +\n              \"(new Foo()).x = \\\"asdf\\\";\");\n  }\n",
        "begin_line": 3991,
        "end_line": 3999,
        "comment": "",
        "child_ranges": [
            "(line 3993,col 5)-(line 3998,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop5()",
        "snippet": "  public void testSetprop5() throws Exception {\n    // Create a property on union that includes a struct\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(true ? new Foo() : {}).x = 123;\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4001,
        "end_line": 4011,
        "comment": "",
        "child_ranges": [
            "(line 4003,col 5)-(line 4010,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop6()",
        "snippet": "  public void testSetprop6() throws Exception {\n    // Create property on struct in another constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @param{Foo} f\\n\" +\n              \" */\\n\" +\n              \"function Bar(f) { f.x = 123; }\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4013,
        "end_line": 4027,
        "comment": "",
        "child_ranges": [
            "(line 4015,col 5)-(line 4026,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop7()",
        "snippet": "  public void testSetprop7() throws Exception {\n    //Bug b/c we require THIS when creating properties on structs for simplicity\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {\\n\" +\n              \"  var t = this;\\n\" +\n              \"  t.x = 123;\\n\" +\n              \"}\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4029,
        "end_line": 4041,
        "comment": "",
        "child_ranges": [
            "(line 4031,col 5)-(line 4040,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop8()",
        "snippet": "  public void testSetprop8() throws Exception {\n    // Create property on struct using DEC\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(new Foo()).x--;\",\n              new String[] {\n                \"Property x never defined on Foo\",\n                \"Cannot add a property to a struct instance \" +\n                \"after it is constructed.\"\n              });\n  }\n",
        "begin_line": 4043,
        "end_line": 4056,
        "comment": "",
        "child_ranges": [
            "(line 4045,col 5)-(line 4055,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop9()",
        "snippet": "  public void testSetprop9() throws Exception {\n    // Create property on struct using ASSIGN_ADD\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(new Foo()).x += 123;\",\n              new String[] {\n                \"Property x never defined on Foo\",\n                \"Cannot add a property to a struct instance \" +\n                \"after it is constructed.\"\n              });\n  }\n",
        "begin_line": 4058,
        "end_line": 4071,
        "comment": "",
        "child_ranges": [
            "(line 4060,col 5)-(line 4070,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop10()",
        "snippet": "  public void testSetprop10() throws Exception {\n    // Create property on object literal that is a struct\n    testTypes(\"/** \\n\" +\n              \" * @constructor \\n\" +\n              \" * @struct \\n\" +\n              \" */ \\n\" +\n              \"function Square(side) { \\n\" +\n              \"  this.side = side; \\n\" +\n              \"} \\n\" +\n              \"Square.prototype = /** @struct */ {\\n\" +\n              \"  area: function() { return this.side * this.side; }\\n\" +\n              \"};\\n\" +\n              \"Square.prototype.id = function(x) { return x; };\\n\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4073,
        "end_line": 4088,
        "comment": "",
        "child_ranges": [
            "(line 4075,col 5)-(line 4087,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop11()",
        "snippet": "  public void testSetprop11() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = new Foo();\\n\" +\n              \"Bar.prototype.someprop = 123;\\n\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4090,
        "end_line": 4101,
        "comment": "",
        "child_ranges": [
            "(line 4091,col 5)-(line 4100,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict1()",
        "snippet": "  public void testGetpropDict1() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1(){ this['prop'] = 123; }\" +\n              \"/** @param{Dict1} x */\" +\n              \"function takesDict(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4103,
        "end_line": 4112,
        "comment": "",
        "child_ranges": [
            "(line 4104,col 5)-(line 4111,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict2()",
        "snippet": "  public void testGetpropDict2() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1(){ this['prop'] = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @extends {Dict1}\\n\" +\n              \" */\" +\n              \"function Dict1kid(){ this['prop'] = 123; }\" +\n              \"/** @param{Dict1kid} x */\" +\n              \"function takesDict(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4114,
        "end_line": 4128,
        "comment": "",
        "child_ranges": [
            "(line 4115,col 5)-(line 4127,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict3()",
        "snippet": "  public void testGetpropDict3() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1() { this['prop'] = 123; }\" +\n              \"/** @constructor */\" +\n              \"function NonDict() { this.prop = 321; }\" +\n              \"/** @param{(NonDict|Dict1)} x */\" +\n              \"function takesDict(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4130,
        "end_line": 4141,
        "comment": "",
        "child_ranges": [
            "(line 4131,col 5)-(line 4140,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict4()",
        "snippet": "  public void testGetpropDict4() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1() { this['prop'] = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1() { this.prop = 123; }\" +\n              \"/** @param{(Struct1|Dict1)} x */\" +\n              \"function takesNothing(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4143,
        "end_line": 4157,
        "comment": "",
        "child_ranges": [
            "(line 4144,col 5)-(line 4156,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict5()",
        "snippet": "  public void testGetpropDict5() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1(){ this.prop = 123; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4159,
        "end_line": 4166,
        "comment": "",
        "child_ranges": [
            "(line 4160,col 5)-(line 4165,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict6()",
        "snippet": "  public void testGetpropDict6() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = new Foo();\\n\" +\n              \"Bar.prototype.someprop = 123;\\n\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4168,
        "end_line": 4178,
        "comment": "",
        "child_ranges": [
            "(line 4169,col 5)-(line 4177,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict7()",
        "snippet": "  public void testGetpropDict7() throws Exception {\n    testTypes(\"(/** @dict */ {x: 123}).x = 321;\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4180,
        "end_line": 4183,
        "comment": "",
        "child_ranges": [
            "(line 4181,col 5)-(line 4182,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct1()",
        "snippet": "  public void testGetelemStruct1() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1(){ this.prop = 123; }\" +\n              \"/** @param{Struct1} x */\" +\n              \"function takesStruct(x) {\" +\n              \"  var z = x;\" +\n              \"  return z['prop'];\" +\n              \"}\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4185,
        "end_line": 4197,
        "comment": "",
        "child_ranges": [
            "(line 4186,col 5)-(line 4196,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct2()",
        "snippet": "  public void testGetelemStruct2() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1(){ this.prop = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @extends {Struct1}\" +\n              \" */\" +\n              \"function Struct1kid(){ this.prop = 123; }\" +\n              \"/** @param{Struct1kid} x */\" +\n              \"function takesStruct2(x) { return x['prop']; }\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4199,
        "end_line": 4213,
        "comment": "",
        "child_ranges": [
            "(line 4200,col 5)-(line 4212,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct3()",
        "snippet": "  public void testGetelemStruct3() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1(){ this.prop = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @extends {Struct1}\\n\" +\n              \" */\" +\n              \"function Struct1kid(){ this.prop = 123; }\" +\n              \"var x = (new Struct1kid())['prop'];\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4215,
        "end_line": 4228,
        "comment": "",
        "child_ranges": [
            "(line 4216,col 5)-(line 4227,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct4()",
        "snippet": "  public void testGetelemStruct4() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1() { this.prop = 123; }\" +\n              \"/** @constructor */\" +\n              \"function NonStruct() { this.prop = 321; }\" +\n              \"/** @param{(NonStruct|Struct1)} x */\" +\n              \"function takesStruct(x) { return x['prop']; }\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4230,
        "end_line": 4241,
        "comment": "",
        "child_ranges": [
            "(line 4231,col 5)-(line 4240,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct5()",
        "snippet": "  public void testGetelemStruct5() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1() { this.prop = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1() { this['prop'] = 123; }\" +\n              \"/** @param{(Struct1|Dict1)} x */\" +\n              \"function takesNothing(x) { return x['prop']; }\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4243,
        "end_line": 4257,
        "comment": "",
        "child_ranges": [
            "(line 4244,col 5)-(line 4256,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct6()",
        "snippet": "  public void testGetelemStruct6() throws Exception {\n    // By casting Bar to Foo, the illegal bracket access is not detected\n    testTypes(\"/** @interface */ function Foo(){}\\n\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" * @implements {Foo}\\n\" +\n              \" */\" +\n              \"function Bar(){ this.x = 123; }\\n\" +\n              \"var z = /** @type {Foo} */(new Bar)['x'];\");\n  }\n",
        "begin_line": 4259,
        "end_line": 4269,
        "comment": "",
        "child_ranges": [
            "(line 4261,col 5)-(line 4268,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct7()",
        "snippet": "  public void testGetelemStruct7() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = new Foo();\\n\" +\n              \"Bar.prototype['someprop'] = 123;\\n\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4271,
        "end_line": 4281,
        "comment": "",
        "child_ranges": [
            "(line 4272,col 5)-(line 4280,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInOnStruct()",
        "snippet": "  public void testInOnStruct() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Foo() {}\\n\" +\n              \"if ('prop' in (new Foo())) {}\",\n              \"Cannot use the IN operator with structs\");\n  }\n",
        "begin_line": 4283,
        "end_line": 4291,
        "comment": "",
        "child_ranges": [
            "(line 4284,col 5)-(line 4290,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForinOnStruct()",
        "snippet": "  public void testForinOnStruct() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Foo() {}\\n\" +\n              \"for (var prop in (new Foo())) {}\",\n              \"Cannot use the IN operator with structs\");\n  }\n",
        "begin_line": 4293,
        "end_line": 4301,
        "comment": "",
        "child_ranges": [
            "(line 4294,col 5)-(line 4300,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 4303,
        "end_line": 4305,
        "comment": "",
        "child_ranges": [
            "(line 4304,col 5)-(line 4304,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4307,
        "end_line": 4312,
        "comment": "",
        "child_ranges": [
            "(line 4308,col 5)-(line 4311,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4314,
        "end_line": 4321,
        "comment": "",
        "child_ranges": [
            "(line 4315,col 5)-(line 4320,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4323,
        "end_line": 4328,
        "comment": "",
        "child_ranges": [
            "(line 4324,col 5)-(line 4327,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4330,
        "end_line": 4335,
        "comment": "",
        "child_ranges": [
            "(line 4331,col 5)-(line 4334,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4337,
        "end_line": 4342,
        "comment": "",
        "child_ranges": [
            "(line 4338,col 5)-(line 4341,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4344,
        "end_line": 4351,
        "comment": "",
        "child_ranges": [
            "(line 4347,col 5)-(line 4350,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess9()",
        "snippet": "  public void testArrayAccess9() throws Exception {\n    testTypes(\"/** @return {?Array} */ function f() { return []; }\" +\n        \"f()[{}]\",\n        \"array access\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4353,
        "end_line": 4359,
        "comment": "",
        "child_ranges": [
            "(line 4354,col 5)-(line 4358,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 4361,
        "end_line": 4367,
        "comment": "",
        "child_ranges": [
            "(line 4362,col 5)-(line 4366,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4369,
        "end_line": 4374,
        "comment": "",
        "child_ranges": [
            "(line 4370,col 5)-(line 4373,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4376,
        "end_line": 4383,
        "comment": "",
        "child_ranges": [
            "(line 4379,col 5)-(line 4382,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 4385,
        "end_line": 4387,
        "comment": "",
        "child_ranges": [
            "(line 4386,col 5)-(line 4386,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4389,
        "end_line": 4396,
        "comment": "",
        "child_ranges": [
            "(line 4390,col 5)-(line 4395,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 4398,
        "end_line": 4400,
        "comment": "",
        "child_ranges": [
            "(line 4399,col 5)-(line 4399,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertTypeEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 4402,
        "end_line": 4408,
        "comment": "",
        "child_ranges": [
            "(line 4403,col 5)-(line 4404,col 79)",
            "(line 4406,col 5)-(line 4407,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 4410,
        "end_line": 4412,
        "comment": "",
        "child_ranges": [
            "(line 4411,col 5)-(line 4411,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertTypeEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 4414,
        "end_line": 4418,
        "comment": "",
        "child_ranges": [
            "(line 4415,col 5)-(line 4415,col 65)",
            "(line 4417,col 5)-(line 4417,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 4420,
        "end_line": 4426,
        "comment": "",
        "child_ranges": [
            "(line 4421,col 5)-(line 4422,col 36)",
            "(line 4424,col 5)-(line 4425,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4428,
        "end_line": 4435,
        "comment": "",
        "child_ranges": [
            "(line 4429,col 5)-(line 4434,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4437,
        "end_line": 4448,
        "comment": "",
        "child_ranges": [
            "(line 4438,col 5)-(line 4447,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 4450,
        "end_line": 4453,
        "comment": "",
        "child_ranges": [
            "(line 4451,col 5)-(line 4452,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 4455,
        "end_line": 4457,
        "comment": "",
        "child_ranges": [
            "(line 4456,col 5)-(line 4456,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 4459,
        "end_line": 4462,
        "comment": "",
        "child_ranges": [
            "(line 4460,col 5)-(line 4461,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4464,
        "end_line": 4469,
        "comment": "",
        "child_ranges": [
            "(line 4465,col 5)-(line 4468,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4471,
        "end_line": 4476,
        "comment": "",
        "child_ranges": [
            "(line 4472,col 5)-(line 4475,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 4478,
        "end_line": 4488,
        "comment": "",
        "child_ranges": [
            "(line 4479,col 5)-(line 4487,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 4490,
        "end_line": 4493,
        "comment": "",
        "child_ranges": [
            "(line 4492,col 5)-(line 4492,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4495,
        "end_line": 4500,
        "comment": "",
        "child_ranges": [
            "(line 4496,col 5)-(line 4499,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4502,
        "end_line": 4508,
        "comment": "",
        "child_ranges": [
            "(line 4503,col 5)-(line 4507,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4510,
        "end_line": 4516,
        "comment": "",
        "child_ranges": [
            "(line 4511,col 5)-(line 4515,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4518,
        "end_line": 4525,
        "comment": "",
        "child_ranges": [
            "(line 4519,col 5)-(line 4524,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 4527,
        "end_line": 4531,
        "comment": "",
        "child_ranges": [
            "(line 4528,col 5)-(line 4530,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 4533,
        "end_line": 4537,
        "comment": "",
        "child_ranges": [
            "(line 4534,col 5)-(line 4536,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 4539,
        "end_line": 4550,
        "comment": "",
        "child_ranges": [
            "(line 4540,col 5)-(line 4549,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 4552,
        "end_line": 4556,
        "comment": "",
        "child_ranges": [
            "(line 4553,col 5)-(line 4555,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4558,
        "end_line": 4565,
        "comment": "",
        "child_ranges": [
            "(line 4559,col 5)-(line 4564,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 4567,
        "end_line": 4570,
        "comment": "",
        "child_ranges": [
            "(line 4568,col 5)-(line 4569,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 4577,
        "end_line": 4582,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 4578,col 6)-(line 4581,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 4587,
        "end_line": 4592,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 4588,col 6)-(line 4591,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 4594,
        "end_line": 4598,
        "comment": "",
        "child_ranges": [
            "(line 4595,col 5)-(line 4597,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4600,
        "end_line": 4607,
        "comment": "",
        "child_ranges": [
            "(line 4601,col 5)-(line 4606,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4609,
        "end_line": 4615,
        "comment": "",
        "child_ranges": [
            "(line 4610,col 5)-(line 4614,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 4617,
        "end_line": 4621,
        "comment": "",
        "child_ranges": [
            "(line 4618,col 5)-(line 4620,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 4623,
        "end_line": 4627,
        "comment": "",
        "child_ranges": [
            "(line 4624,col 5)-(line 4626,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 4629,
        "end_line": 4633,
        "comment": "",
        "child_ranges": [
            "(line 4630,col 5)-(line 4632,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 4635,
        "end_line": 4641,
        "comment": "",
        "child_ranges": [
            "(line 4640,col 5)-(line 4640,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 4643,
        "end_line": 4645,
        "comment": "",
        "child_ranges": [
            "(line 4644,col 5)-(line 4644,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 4647,
        "end_line": 4653,
        "comment": "",
        "child_ranges": [
            "(line 4648,col 5)-(line 4652,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type null */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 4655,
        "end_line": 4660,
        "comment": "",
        "child_ranges": [
            "(line 4656,col 5)-(line 4659,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type null */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 4662,
        "end_line": 4667,
        "comment": "",
        "child_ranges": [
            "(line 4663,col 5)-(line 4666,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 4669,
        "end_line": 4674,
        "comment": "",
        "child_ranges": [
            "(line 4670,col 5)-(line 4673,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 4676,
        "end_line": 4681,
        "comment": "",
        "child_ranges": [
            "(line 4677,col 5)-(line 4680,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 4683,
        "end_line": 4688,
        "comment": "",
        "child_ranges": [
            "(line 4684,col 5)-(line 4687,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 4690,
        "end_line": 4695,
        "comment": "",
        "child_ranges": [
            "(line 4691,col 5)-(line 4694,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 4697,
        "end_line": 4707,
        "comment": "",
        "child_ranges": [
            "(line 4698,col 5)-(line 4706,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 4709,
        "end_line": 4716,
        "comment": "",
        "child_ranges": [
            "(line 4710,col 5)-(line 4715,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4718,
        "end_line": 4725,
        "comment": "",
        "child_ranges": [
            "(line 4719,col 5)-(line 4724,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4727,
        "end_line": 4734,
        "comment": "",
        "child_ranges": [
            "(line 4728,col 5)-(line 4733,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 4736,
        "end_line": 4740,
        "comment": "",
        "child_ranges": [
            "(line 4737,col 5)-(line 4739,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 4742,
        "end_line": 4746,
        "comment": "",
        "child_ranges": [
            "(line 4743,col 5)-(line 4745,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions5()",
        "snippet": "  public void testHigherOrderFunctions5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"/** @type {function(new:Error,...[number]):Date} */ var f;\" +\n        \"g(new f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4748,
        "end_line": 4756,
        "comment": "",
        "child_ranges": [
            "(line 4749,col 5)-(line 4755,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4758,
        "end_line": 4768,
        "comment": "",
        "child_ranges": [
            "(line 4759,col 5)-(line 4767,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4770,
        "end_line": 4780,
        "comment": "",
        "child_ranges": [
            "(line 4771,col 5)-(line 4779,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4782,
        "end_line": 4792,
        "comment": "",
        "child_ranges": [
            "(line 4783,col 5)-(line 4791,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4794,
        "end_line": 4804,
        "comment": "",
        "child_ranges": [
            "(line 4795,col 5)-(line 4803,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 4806,
        "end_line": 4812,
        "comment": "",
        "child_ranges": [
            "(line 4807,col 5)-(line 4811,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 4814,
        "end_line": 4820,
        "comment": "",
        "child_ranges": [
            "(line 4815,col 5)-(line 4819,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4822,
        "end_line": 4832,
        "comment": "",
        "child_ranges": [
            "(line 4823,col 5)-(line 4831,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4834,
        "end_line": 4846,
        "comment": "",
        "child_ranges": [
            "(line 4835,col 5)-(line 4845,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4848,
        "end_line": 4859,
        "comment": "",
        "child_ranges": [
            "(line 4849,col 5)-(line 4858,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4861,
        "end_line": 4871,
        "comment": "",
        "child_ranges": [
            "(line 4862,col 5)-(line 4870,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4873,
        "end_line": 4880,
        "comment": "",
        "child_ranges": [
            "(line 4874,col 5)-(line 4879,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4882,
        "end_line": 4889,
        "comment": "",
        "child_ranges": [
            "(line 4883,col 5)-(line 4888,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4891,
        "end_line": 4898,
        "comment": "",
        "child_ranges": [
            "(line 4892,col 5)-(line 4897,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4900,
        "end_line": 4907,
        "comment": "",
        "child_ranges": [
            "(line 4901,col 5)-(line 4906,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4909,
        "end_line": 4916,
        "comment": "",
        "child_ranges": [
            "(line 4910,col 5)-(line 4915,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4918,
        "end_line": 4925,
        "comment": "",
        "child_ranges": [
            "(line 4919,col 5)-(line 4924,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure7()",
        "snippet": "  public void testClosure7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */ var a = foo();\" +\n        \"/** @type {number} */\" +\n        \"var b = goog.asserts.assert(a);\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4927,
        "end_line": 4936,
        "comment": "",
        "child_ranges": [
            "(line 4928,col 5)-(line 4935,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4938,
        "end_line": 4943,
        "comment": "",
        "child_ranges": [
            "(line 4939,col 5)-(line 4942,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4945,
        "end_line": 4950,
        "comment": "",
        "child_ranges": [
            "(line 4946,col 5)-(line 4949,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4952,
        "end_line": 4957,
        "comment": "",
        "child_ranges": [
            "(line 4953,col 5)-(line 4956,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4959,
        "end_line": 4964,
        "comment": "",
        "child_ranges": [
            "(line 4960,col 5)-(line 4963,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 4966,
        "end_line": 4969,
        "comment": "",
        "child_ranges": [
            "(line 4967,col 5)-(line 4968,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4971,
        "end_line": 4978,
        "comment": "",
        "child_ranges": [
            "(line 4972,col 5)-(line 4977,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4980,
        "end_line": 4987,
        "comment": "",
        "child_ranges": [
            "(line 4981,col 5)-(line 4986,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4989,
        "end_line": 4996,
        "comment": "",
        "child_ranges": [
            "(line 4990,col 5)-(line 4995,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn1()",
        "snippet": "  public void testInferredReturn1() throws Exception {\n    testTypes(\n        \"function f() {} /** @param {number} x */ function g(x) {}\" +\n        \"g(f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4998,
        "end_line": 5005,
        "comment": "",
        "child_ranges": [
            "(line 4999,col 5)-(line 5004,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn2()",
        "snippet": "  public void testInferredReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"g((new Foo()).bar());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5007,
        "end_line": 5016,
        "comment": "",
        "child_ranges": [
            "(line 5008,col 5)-(line 5015,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn3()",
        "snippet": "  public void testInferredReturn3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {number} \\n * @override  */ \" +\n        \"SubFoo.prototype.bar = function() { return 3; }; \",\n        \"mismatch of the bar property type and the type of the property \" +\n        \"it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): undefined\\n\" +\n        \"override: function (this:SubFoo): number\");\n  }\n",
        "begin_line": 5018,
        "end_line": 5029,
        "comment": "",
        "child_ranges": [
            "(line 5019,col 5)-(line 5028,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn4()",
        "snippet": "  public void testInferredReturn4() throws Exception {\n    // By design, this throws a warning. if you want global x to be\n    // defined to some other type of function, then you need to declare it\n    // as a greater type.\n    testTypes(\n        \"var x = function() {};\" +\n        \"x = /** @type {function(): number} */ (function() { return 3; });\",\n        \"assignment\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: function (): undefined\");\n  }\n",
        "begin_line": 5031,
        "end_line": 5041,
        "comment": "",
        "child_ranges": [
            "(line 5035,col 5)-(line 5040,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn5()",
        "snippet": "  public void testInferredReturn5() throws Exception {\n    // If x is local, then the function type is not declared.\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  x = /** @type {function(): number} */ (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5043,
        "end_line": 5055,
        "comment": "",
        "child_ranges": [
            "(line 5045,col 5)-(line 5054,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn6()",
        "snippet": "  public void testInferredReturn6() throws Exception {\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  if (f()) \" +\n        \"    x = /** @type {function(): number} */ \" +\n        \"        (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5057,
        "end_line": 5070,
        "comment": "",
        "child_ranges": [
            "(line 5058,col 5)-(line 5069,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn7()",
        "snippet": "  public void testInferredReturn7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"Foo.prototype.bar = function(x) { return 3; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5072,
        "end_line": 5080,
        "comment": "",
        "child_ranges": [
            "(line 5073,col 5)-(line 5079,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn8()",
        "snippet": "  public void testInferredReturn8() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number} x */ SubFoo.prototype.bar = \" +\n        \"    function(x) { return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5082,
        "end_line": 5093,
        "comment": "",
        "child_ranges": [
            "(line 5083,col 5)-(line 5083,col 44)",
            "(line 5084,col 5)-(line 5092,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam1()",
        "snippet": "  public void testInferredParam1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"Foo.prototype.bar = function(y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5095,
        "end_line": 5104,
        "comment": "",
        "child_ranges": [
            "(line 5096,col 5)-(line 5103,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam2()",
        "snippet": "  public void testInferredParam2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5106,
        "end_line": 5118,
        "comment": "",
        "child_ranges": [
            "(line 5107,col 5)-(line 5107,col 44)",
            "(line 5108,col 5)-(line 5117,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam3()",
        "snippet": "  public void testInferredParam3() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5120,
        "end_line": 5132,
        "comment": "",
        "child_ranges": [
            "(line 5121,col 5)-(line 5121,col 44)",
            "(line 5122,col 5)-(line 5131,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam4()",
        "snippet": "  public void testInferredParam4() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5134,
        "end_line": 5146,
        "comment": "",
        "child_ranges": [
            "(line 5135,col 5)-(line 5135,col 44)",
            "(line 5136,col 5)-(line 5145,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam5()",
        "snippet": "  public void testInferredParam5() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {...number} y  */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5148,
        "end_line": 5161,
        "comment": "",
        "child_ranges": [
            "(line 5149,col 5)-(line 5149,col 44)",
            "(line 5150,col 5)-(line 5160,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam6()",
        "snippet": "  public void testInferredParam6() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {number=} y */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5163,
        "end_line": 5176,
        "comment": "",
        "child_ranges": [
            "(line 5164,col 5)-(line 5164,col 44)",
            "(line 5165,col 5)-(line 5175,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam7()",
        "snippet": "  public void testInferredParam7() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"var bar = /** @type {function(number=,number=)} */ (\" +\n        \"    function(x, y) { f(y); });\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5178,
        "end_line": 5186,
        "comment": "",
        "child_ranges": [
            "(line 5179,col 5)-(line 5185,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams1()",
        "snippet": "  public void testOverriddenParams1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...?} var_args */\" +\n        \"Foo.prototype.bar = function(var_args) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\");\n  }\n",
        "begin_line": 5188,
        "end_line": 5202,
        "comment": "",
        "child_ranges": [
            "(line 5189,col 5)-(line 5201,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams2()",
        "snippet": "  public void testOverriddenParams2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {function(...[?])} */\" +\n        \"Foo.prototype.bar = function(var_args) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {function(number)}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\");\n  }\n",
        "begin_line": 5204,
        "end_line": 5218,
        "comment": "",
        "child_ranges": [
            "(line 5205,col 5)-(line 5217,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams3()",
        "snippet": "  public void testOverriddenParams3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} var_args */\" +\n        \"Foo.prototype.bar = function(var_args) { };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo, ...[number]): undefined\\n\" +\n        \"override: function (this:SubFoo, number): undefined\");\n  }\n",
        "begin_line": 5220,
        "end_line": 5238,
        "comment": "",
        "child_ranges": [
            "(line 5221,col 5)-(line 5237,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams4()",
        "snippet": "  public void testOverriddenParams4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {function(...[number])} */\" +\n        \"Foo.prototype.bar = function(var_args) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {function(number)}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (...[number]): ?\\n\" +\n        \"override: function (number): ?\");\n  }\n",
        "begin_line": 5240,
        "end_line": 5258,
        "comment": "",
        "child_ranges": [
            "(line 5241,col 5)-(line 5257,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams5()",
        "snippet": "  public void testOverriddenParams5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */\" +\n        \"Foo.prototype.bar = function(x) { };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function() {};\" +\n        \"(new SubFoo()).bar();\");\n  }\n",
        "begin_line": 5260,
        "end_line": 5274,
        "comment": "",
        "child_ranges": [
            "(line 5261,col 5)-(line 5273,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams6()",
        "snippet": "  public void testOverriddenParams6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */\" +\n        \"Foo.prototype.bar = function(x) { };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function() {};\" +\n        \"(new SubFoo()).bar(true);\",\n        \"actual parameter 1 of SubFoo.prototype.bar \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5276,
        "end_line": 5294,
        "comment": "",
        "child_ranges": [
            "(line 5277,col 5)-(line 5293,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn1()",
        "snippet": "  public void testOverriddenReturn1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {Object} */ Foo.prototype.bar = \" +\n        \"    function() { return {}; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {SubFoo}\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new Foo(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (SubFoo|null)\");\n  }\n",
        "begin_line": 5296,
        "end_line": 5307,
        "comment": "",
        "child_ranges": [
            "(line 5297,col 5)-(line 5306,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn2()",
        "snippet": "  public void testOverriddenReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {SubFoo} */ Foo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {Foo} x\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); }\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): (SubFoo|null)\\n\" +\n        \"override: function (this:SubFoo): (Foo|null)\");\n  }\n",
        "begin_line": 5309,
        "end_line": 5321,
        "comment": "",
        "child_ranges": [
            "(line 5310,col 5)-(line 5320,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5323,
        "end_line": 5331,
        "comment": "",
        "child_ranges": [
            "(line 5324,col 5)-(line 5330,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty1()",
        "snippet": "  public void testOverriddenProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {Object} */\" +\n        \"Foo.prototype.bar = {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {Array}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = [];\");\n  }\n",
        "begin_line": 5333,
        "end_line": 5347,
        "comment": "",
        "child_ranges": [
            "(line 5334,col 5)-(line 5346,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty2()",
        "snippet": "  public void testOverriddenProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {\" +\n        \"  /** @type {Object} */\" +\n        \"  this.bar = {};\" +\n        \"}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {Array}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = [];\");\n  }\n",
        "begin_line": 5349,
        "end_line": 5364,
        "comment": "",
        "child_ranges": [
            "(line 5350,col 5)-(line 5363,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty3()",
        "snippet": "  public void testOverriddenProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {\" +\n        \"}\" +\n        \"/** @type {string} */ Foo.prototype.data;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @type {string|Object} \\n @override */ \" +\n        \"SubFoo.prototype.data = null;\",\n        \"mismatch of the data property type and the type \" +\n        \"of the property it overrides from superclass Foo\\n\" +\n        \"original: string\\n\" +\n        \"override: (Object|null|string)\");\n  }\n",
        "begin_line": 5366,
        "end_line": 5381,
        "comment": "",
        "child_ranges": [
            "(line 5367,col 5)-(line 5380,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty4()",
        "snippet": "  public void testOverriddenProperty4() throws Exception {\n    // These properties aren't declared, so there should be no warning.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = null;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 3;\");\n  }\n",
        "begin_line": 5383,
        "end_line": 5393,
        "comment": "",
        "child_ranges": [
            "(line 5385,col 5)-(line 5392,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty5()",
        "snippet": "  public void testOverriddenProperty5() throws Exception {\n    // An override should be OK if the superclass property wasn't declared.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = null;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @override */ SubFoo.prototype.bar = 3;\");\n  }\n",
        "begin_line": 5395,
        "end_line": 5405,
        "comment": "",
        "child_ranges": [
            "(line 5397,col 5)-(line 5404,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty6()",
        "snippet": "  public void testOverriddenProperty6() throws Exception {\n    // The override keyword shouldn't be neccessary if the subclass property\n    // is inferred.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {?number} */ Foo.prototype.bar = null;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 3;\");\n  }\n",
        "begin_line": 5407,
        "end_line": 5418,
        "comment": "",
        "child_ranges": [
            "(line 5410,col 5)-(line 5417,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5420,
        "end_line": 5430,
        "comment": "",
        "child_ranges": [
            "(line 5421,col 5)-(line 5429,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 5432,
        "end_line": 5438,
        "comment": "",
        "child_ranges": [
            "(line 5433,col 5)-(line 5437,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5440,
        "end_line": 5450,
        "comment": "",
        "child_ranges": [
            "(line 5441,col 5)-(line 5449,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5452,
        "end_line": 5457,
        "comment": "",
        "child_ranges": [
            "(line 5453,col 5)-(line 5456,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 5459,
        "end_line": 5466,
        "comment": "",
        "child_ranges": [
            "(line 5460,col 5)-(line 5465,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5468,
        "end_line": 5474,
        "comment": "",
        "child_ranges": [
            "(line 5469,col 5)-(line 5473,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5476,
        "end_line": 5485,
        "comment": "",
        "child_ranges": [
            "(line 5477,col 5)-(line 5484,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 5487,
        "end_line": 5492,
        "comment": "",
        "child_ranges": [
            "(line 5489,col 5)-(line 5491,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5494,
        "end_line": 5503,
        "comment": "",
        "child_ranges": [
            "(line 5496,col 5)-(line 5502,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis11()",
        "snippet": "  public void testThis11() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {\" +\n        \"  /** @this {Date} */\" +\n        \"  this.method = function() {\" +\n        \"    f(this);\" +\n        \"  };\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5505,
        "end_line": 5517,
        "comment": "",
        "child_ranges": [
            "(line 5506,col 5)-(line 5516,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis12()",
        "snippet": "  public void testThis12() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {}\" +\n        \"Ctor.prototype['method'] = function() {\" +\n        \"  f(this);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Ctor\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5519,
        "end_line": 5529,
        "comment": "",
        "child_ranges": [
            "(line 5520,col 5)-(line 5528,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis13()",
        "snippet": "  public void testThis13() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {}\" +\n        \"Ctor.prototype = {\" +\n        \"  method: function() {\" +\n        \"    f(this);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Ctor\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5531,
        "end_line": 5543,
        "comment": "",
        "child_ranges": [
            "(line 5532,col 5)-(line 5542,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis14()",
        "snippet": "  public void testThis14() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(this.Object);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : function (new:Object, *=): ?\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5545,
        "end_line": 5552,
        "comment": "",
        "child_ranges": [
            "(line 5546,col 5)-(line 5551,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction1()",
        "snippet": "  public void testThisTypeOfFunction1() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Object)} */ function f() {}\" +\n        \"f();\");\n  }\n",
        "begin_line": 5554,
        "end_line": 5558,
        "comment": "",
        "child_ranges": [
            "(line 5555,col 5)-(line 5557,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction2()",
        "snippet": "  public void testThisTypeOfFunction2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {function(this:F)} */ function f() {}\" +\n        \"f();\",\n        \"\\\"function (this:F): ?\\\" must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 5560,
        "end_line": 5566,
        "comment": "",
        "child_ranges": [
            "(line 5561,col 5)-(line 5565,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction3()",
        "snippet": "  public void testThisTypeOfFunction3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"var f = (new F()).bar; f();\",\n        \"\\\"function (this:F): undefined\\\" must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 5568,
        "end_line": 5574,
        "comment": "",
        "child_ranges": [
            "(line 5569,col 5)-(line 5573,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction4()",
        "snippet": "  public void testThisTypeOfFunction4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.moveTo = function(x, y) {};\" +\n        \"F.prototype.lineTo = function(x, y) {};\" +\n        \"function demo() {\" +\n        \"  var path = new F();\" +\n        \"  var points = [[1,1], [2,2]];\" +\n        \"  for (var i = 0; i < points.length; i++) {\" +\n        \"    (i == 0 ? path.moveTo : path.lineTo)(\" +\n        \"       points[i][0], points[i][1]);\" +\n        \"  }\" +\n        \"}\",\n        \"\\\"function (this:F, ?, ?): undefined\\\" \" +\n        \"must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 5576,
        "end_line": 5591,
        "comment": "",
        "child_ranges": [
            "(line 5577,col 5)-(line 5590,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5593,
        "end_line": 5602,
        "comment": "",
        "child_ranges": [
            "(line 5594,col 5)-(line 5601,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    // this.alert = 3 doesn't count as a declaration, so this isn't a warning.\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 5604,
        "end_line": 5611,
        "comment": "",
        "child_ranges": [
            "(line 5606,col 5)-(line 5610,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2b()",
        "snippet": "  public void testGlobalThis2b() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"/** @return {number} */ this.alert = function() { return 3; };\" +\n        \"(new Bindow()).alert(this.alert())\",\n        \"actual parameter 1 of Bindow.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5614,
        "end_line": 5624,
        "comment": "",
        "child_ranges": [
            "(line 5615,col 5)-(line 5623,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5626,
        "end_line": 5635,
        "comment": "",
        "child_ranges": [
            "(line 5627,col 5)-(line 5634,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5637,
        "end_line": 5646,
        "comment": "",
        "child_ranges": [
            "(line 5638,col 5)-(line 5645,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 5648,
        "end_line": 5656,
        "comment": "",
        "child_ranges": [
            "(line 5649,col 5)-(line 5655,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 5658,
        "end_line": 5665,
        "comment": "",
        "child_ranges": [
            "(line 5659,col 5)-(line 5664,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis7()",
        "snippet": "  public void testGlobalThis7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {Window} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\");\n  }\n",
        "begin_line": 5667,
        "end_line": 5673,
        "comment": "",
        "child_ranges": [
            "(line 5668,col 5)-(line 5672,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis8()",
        "snippet": "  public void testGlobalThis8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {number} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : global this\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5675,
        "end_line": 5684,
        "comment": "",
        "child_ranges": [
            "(line 5676,col 5)-(line 5683,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis9()",
        "snippet": "  public void testGlobalThis9() throws Exception {\n    testTypes(\n        // Window is not marked as a constructor, so the\n        // inheritance doesn't happen.\n        \"function Window() {}\" +\n        \"Window.prototype.alert = function() {};\" +\n        \"this.alert();\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 5686,
        "end_line": 5694,
        "comment": "",
        "child_ranges": [
            "(line 5687,col 5)-(line 5693,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType1()",
        "snippet": "  public void testControlFlowRestrictsType1() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\" +\n        \"/** @type {String?} */ var a = f();\" +\n        \"/** @type String */ var b = new String('foo');\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 5696,
        "end_line": 5706,
        "comment": "",
        "child_ranges": [
            "(line 5697,col 5)-(line 5705,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 5708,
        "end_line": 5721,
        "comment": "",
        "child_ranges": [
            "(line 5709,col 5)-(line 5720,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 5723,
        "end_line": 5731,
        "comment": "",
        "child_ranges": [
            "(line 5724,col 5)-(line 5730,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 5733,
        "end_line": 5737,
        "comment": "",
        "child_ranges": [
            "(line 5734,col 5)-(line 5736,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 5739,
        "end_line": 5743,
        "comment": "",
        "child_ranges": [
            "(line 5740,col 5)-(line 5742,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5745,
        "end_line": 5752,
        "comment": "",
        "child_ranges": [
            "(line 5746,col 5)-(line 5751,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5754,
        "end_line": 5761,
        "comment": "",
        "child_ranges": [
            "(line 5755,col 5)-(line 5760,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 5763,
        "end_line": 5767,
        "comment": "",
        "child_ranges": [
            "(line 5764,col 5)-(line 5766,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 5769,
        "end_line": 5774,
        "comment": "",
        "child_ranges": [
            "(line 5770,col 5)-(line 5773,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType10()",
        "snippet": "  public void testControlFlowRestrictsType10() throws Exception {\n    // We should correctly infer that y will be (null|{}) because\n    // the loop wraps around.\n    testTypes(\"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(y);\" +\n        \"    if (y != null) {\" +\n        \"      // y is None the first time it goes through this branch\\n\" +\n        \"    } else {\" +\n        \"      y = {};\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5776,
        "end_line": 5794,
        "comment": "",
        "child_ranges": [
            "(line 5779,col 5)-(line 5793,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType11()",
        "snippet": "  public void testControlFlowRestrictsType11() throws Exception {\n    testTypes(\"/** @param {boolean} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  if (y != null) {\" +\n        \"    for (var i = 0; i < 10; i++) {\" +\n        \"      f(y);\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 5796,
        "end_line": 5809,
        "comment": "",
        "child_ranges": [
            "(line 5797,col 5)-(line 5808,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 5811,
        "end_line": 5815,
        "comment": "",
        "child_ranges": [
            "(line 5812,col 5)-(line 5814,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 5817,
        "end_line": 5821,
        "comment": "",
        "child_ranges": [
            "(line 5818,col 5)-(line 5820,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 5823,
        "end_line": 5827,
        "comment": "",
        "child_ranges": [
            "(line 5824,col 5)-(line 5826,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 5829,
        "end_line": 5833,
        "comment": "",
        "child_ranges": [
            "(line 5830,col 5)-(line 5832,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5835,
        "end_line": 5851,
        "comment": "",
        "child_ranges": [
            "(line 5837,col 5)-(line 5850,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5853,
        "end_line": 5869,
        "comment": "",
        "child_ranges": [
            "(line 5855,col 5)-(line 5868,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 5871,
        "end_line": 5873,
        "comment": "",
        "child_ranges": [
            "(line 5872,col 5)-(line 5872,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 5875,
        "end_line": 5877,
        "comment": "",
        "child_ranges": [
            "(line 5876,col 5)-(line 5876,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 5879,
        "end_line": 5881,
        "comment": "",
        "child_ranges": [
            "(line 5880,col 5)-(line 5880,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 5883,
        "end_line": 5886,
        "comment": "",
        "child_ranges": [
            "(line 5884,col 5)-(line 5885,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 5888,
        "end_line": 5891,
        "comment": "",
        "child_ranges": [
            "(line 5889,col 5)-(line 5890,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 5893,
        "end_line": 5896,
        "comment": "",
        "child_ranges": [
            "(line 5894,col 5)-(line 5895,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 5898,
        "end_line": 5901,
        "comment": "",
        "child_ranges": [
            "(line 5899,col 5)-(line 5900,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 5903,
        "end_line": 5906,
        "comment": "",
        "child_ranges": [
            "(line 5904,col 5)-(line 5905,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck9()",
        "snippet": "  public void testNoTypeCheck9() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" /** @type {string} */ var a = 1\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5908,
        "end_line": 5915,
        "comment": "",
        "child_ranges": [
            "(line 5909,col 5)-(line 5914,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck10()",
        "snippet": "  public void testNoTypeCheck10() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" function h() {/** @type {string} */ var a = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5917,
        "end_line": 5924,
        "comment": "",
        "child_ranges": [
            "(line 5918,col 5)-(line 5923,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck11()",
        "snippet": "  public void testNoTypeCheck11() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"/** @notypecheck */ function h() {/** @type {string} */ var a = 1}\"\n        );\n  }\n",
        "begin_line": 5926,
        "end_line": 5930,
        "comment": "",
        "child_ranges": [
            "(line 5927,col 5)-(line 5929,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck12()",
        "snippet": "  public void testNoTypeCheck12() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1}\"\n        );\n  }\n",
        "begin_line": 5932,
        "end_line": 5936,
        "comment": "",
        "child_ranges": [
            "(line 5933,col 5)-(line 5935,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck13()",
        "snippet": "  public void testNoTypeCheck13() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1;\" +\n        \"/** @type {string}*/ var b = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5938,
        "end_line": 5946,
        "comment": "",
        "child_ranges": [
            "(line 5939,col 5)-(line 5945,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck14()",
        "snippet": "  public void testNoTypeCheck14() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ function g() { }\" +\n        \"g(1,2,3)\");\n  }\n",
        "begin_line": 5948,
        "end_line": 5951,
        "comment": "",
        "child_ranges": [
            "(line 5949,col 5)-(line 5950,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 5953,
        "end_line": 5959,
        "comment": "",
        "child_ranges": [
            "(line 5954,col 5)-(line 5958,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\",\n             null, false);\n  }\n",
        "begin_line": 5961,
        "end_line": 5970,
        "comment": "",
        "child_ranges": [
            "(line 5962,col 5)-(line 5969,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"});\n  }\n",
        "begin_line": 5972,
        "end_line": 5984,
        "comment": "",
        "child_ranges": [
            "(line 5973,col 5)-(line 5983,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertTypeEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5986,
        "end_line": 5990,
        "comment": "",
        "child_ranges": [
            "(line 5987,col 5)-(line 5987,col 42)",
            "(line 5989,col 5)-(line 5989,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertTypeEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5992,
        "end_line": 5996,
        "comment": "",
        "child_ranges": [
            "(line 5993,col 5)-(line 5993,col 48)",
            "(line 5995,col 5)-(line 5995,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertTypeEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 5998,
        "end_line": 6002,
        "comment": "",
        "child_ranges": [
            "(line 5999,col 5)-(line 5999,col 52)",
            "(line 6001,col 5)-(line 6001,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertTypeEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 6004,
        "end_line": 6008,
        "comment": "",
        "child_ranges": [
            "(line 6005,col 5)-(line 6005,col 54)",
            "(line 6007,col 5)-(line 6007,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertTypeEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 6010,
        "end_line": 6018,
        "comment": "",
        "child_ranges": [
            "(line 6011,col 5)-(line 6011,col 33)",
            "(line 6012,col 5)-(line 6012,col 53)",
            "(line 6013,col 5)-(line 6013,col 24)",
            "(line 6014,col 5)-(line 6014,col 40)",
            "(line 6015,col 5)-(line 6015,col 17)",
            "(line 6017,col 5)-(line 6017,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 6020,
        "end_line": 6025,
        "comment": "",
        "child_ranges": [
            "(line 6021,col 5)-(line 6024,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6027,
        "end_line": 6032,
        "comment": "",
        "child_ranges": [
            "(line 6028,col 5)-(line 6031,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 6034,
        "end_line": 6039,
        "comment": "",
        "child_ranges": [
            "(line 6035,col 5)-(line 6038,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6041,
        "end_line": 6046,
        "comment": "",
        "child_ranges": [
            "(line 6042,col 5)-(line 6045,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null)\");\n  }\n",
        "begin_line": 6048,
        "end_line": 6053,
        "comment": "",
        "child_ranges": [
            "(line 6049,col 5)-(line 6052,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6055,
        "end_line": 6060,
        "comment": "",
        "child_ranges": [
            "(line 6056,col 5)-(line 6059,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE1()",
        "snippet": "  public void testIIFE1() throws Exception {\n    testTypes(\n        \"var namespace = {};\" +\n        \"/** @type {number} */ namespace.prop = 3;\" +\n        \"(function(ns) {\" +\n        \"  ns.prop = true;\" +\n        \"})(namespace);\",\n        \"assignment to property prop of ns\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6062,
        "end_line": 6072,
        "comment": "",
        "child_ranges": [
            "(line 6063,col 5)-(line 6071,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE2()",
        "snippet": "  public void testIIFE2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"(function(ctor) {\" +\n        \"  /** @type {boolean} */ ctor.prop = true;\" +\n        \"})(Foo);\" +\n        \"/** @return {number} */ function f() { return Foo.prop; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6074,
        "end_line": 6084,
        "comment": "",
        "child_ranges": [
            "(line 6075,col 5)-(line 6083,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE3()",
        "snippet": "  public void testIIFE3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"(function(ctor) {\" +\n        \"  /** @type {boolean} */ ctor.prop = true;\" +\n        \"})(Foo);\" +\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Foo.prop);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6086,
        "end_line": 6097,
        "comment": "",
        "child_ranges": [
            "(line 6087,col 5)-(line 6096,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE4()",
        "snippet": "  public void testIIFE4() throws Exception {\n    testTypes(\n        \"/** @const */ var namespace = {};\" +\n        \"(function(ns) {\" +\n        \"  /**\\n\" +\n        \"   * @constructor\\n\" +\n        \"   * @param {number} x\\n\" +\n        \"   */\\n\" +\n        \"   ns.Ctor = function(x) {};\" +\n        \"})(namespace);\" +\n        \"new namespace.Ctor(true);\",\n        \"actual parameter 1 of namespace.Ctor \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6099,
        "end_line": 6114,
        "comment": "",
        "child_ranges": [
            "(line 6100,col 5)-(line 6113,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE5()",
        "snippet": "  public void testIIFE5() throws Exception {\n    // TODO(nicksantos): This behavior is currently incorrect.\n    // To handle this case properly, we'll need to change how we handle\n    // type resolution.\n    testTypes(\n        \"/** @const */ var namespace = {};\" +\n        \"(function(ns) {\" +\n        \"  /**\\n\" +\n        \"   * @constructor\\n\" +\n        \"   */\\n\" +\n        \"   ns.Ctor = function() {};\" +\n        \"   /** @type {boolean} */ ns.Ctor.prototype.bar = true;\" +\n        \"})(namespace);\" +\n        \"/** @param {namespace.Ctor} x\\n\" +\n        \"  * @return {number} */ function f(x) { return x.bar; }\",\n        \"Bad type annotation. Unknown type namespace.Ctor\");\n  }\n",
        "begin_line": 6116,
        "end_line": 6132,
        "comment": "",
        "child_ranges": [
            "(line 6120,col 5)-(line 6131,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNotIIFE1()",
        "snippet": "  public void testNotIIFE1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @param {...?} x */ function g(x) {}\" +\n        \"g(function(y) { f(y); }, true);\");\n  }\n",
        "begin_line": 6134,
        "end_line": 6139,
        "comment": "",
        "child_ranges": [
            "(line 6135,col 5)-(line 6138,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue61()",
        "snippet": "  public void testIssue61() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"(function() {\" +\n        \"  /** @param {string} b */\" +\n        \"  ns.a = function(b) {};\" +\n        \"})();\" +\n        \"function d() {\" +\n        \"  ns.a(123);\" +\n        \"}\",\n        \"actual parameter 1 of ns.a does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6141,
        "end_line": 6154,
        "comment": "",
        "child_ranges": [
            "(line 6142,col 5)-(line 6153,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue61b()",
        "snippet": "  public void testIssue61b() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"(function() {\" +\n        \"  /** @param {string} b */\" +\n        \"  ns.a = function(b) {};\" +\n        \"})();\" +\n        \"ns.a(123);\",\n        \"actual parameter 1 of ns.a does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6156,
        "end_line": 6167,
        "comment": "",
        "child_ranges": [
            "(line 6157,col 5)-(line 6166,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6169,
        "end_line": 6178,
        "comment": "",
        "child_ranges": [
            "(line 6170,col 5)-(line 6177,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 6180,
        "end_line": 6187,
        "comment": "",
        "child_ranges": [
            "(line 6181,col 5)-(line 6186,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 6189,
        "end_line": 6199,
        "comment": "",
        "child_ranges": [
            "(line 6190,col 5)-(line 6198,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue259()",
        "snippet": "  public void testIssue259() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */\" +\n        \"var Clock = function() {\" +\n        \"  /** @constructor */\" +\n        \"  this.Date = function() {};\" +\n        \"  f(new this.Date());\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : this.Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6201,
        "end_line": 6213,
        "comment": "",
        "child_ranges": [
            "(line 6202,col 5)-(line 6212,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue301()",
        "snippet": "  public void testIssue301() throws Exception {\n    testTypes(\n        \"Array.indexOf = function() {};\" +\n        \"var s = 'hello';\" +\n        \"alert(s.toLowerCase.indexOf('1'));\",\n        \"Property indexOf never defined on String.prototype.toLowerCase\");\n  }\n",
        "begin_line": 6215,
        "end_line": 6221,
        "comment": "",
        "child_ranges": [
            "(line 6216,col 5)-(line 6220,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue368()",
        "snippet": "  public void testIssue368() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo(){}\" +\n        \"/**\\n\" +\n        \" * @param {number} one\\n\" +\n        \" * @param {string} two\\n\" +\n        \" */\\n\" +\n        \"Foo.prototype.add = function(one, two) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar(){}\" +\n        \"/** @override */\\n\" +\n        \"Bar.prototype.add = function(ignored) {};\" +\n        \"(new Bar()).add(1, 2);\",\n        \"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6223,
        "end_line": 6242,
        "comment": "",
        "child_ranges": [
            "(line 6224,col 5)-(line 6241,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue380()",
        "snippet": "  public void testIssue380() throws Exception {\n    testTypes(\n        \"/** @type { function(string): {innerHTML: string} } */\\n\" +\n        \"document.getElementById;\\n\" +\n        \"var list = /** @type {!Array.<string>} */ ['hello', 'you'];\\n\" +\n        \"list.push('?');\\n\" +\n        \"document.getElementById('node').innerHTML = list.toString();\",\n        // Parse warning, but still applied.\n        \"Type annotations are not allowed here. \" +\n        \"Are you missing parentheses?\");\n  }\n",
        "begin_line": 6244,
        "end_line": 6254,
        "comment": "",
        "child_ranges": [
            "(line 6245,col 5)-(line 6253,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue483()",
        "snippet": "  public void testIssue483() throws Exception {\n    testTypes(\n        \"/** @constructor */ function C() {\" +\n        \"  /** @type {?Array} */ this.a = [];\" +\n        \"}\" +\n        \"C.prototype.f = function() {\" +\n        \"  if (this.a.length > 0) {\" +\n        \"    g(this.a);\" +\n        \"  }\" +\n        \"};\" +\n        \"/** @param {number} a */ function g(a) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6256,
        "end_line": 6270,
        "comment": "",
        "child_ranges": [
            "(line 6257,col 5)-(line 6269,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537a()",
        "snippet": "  public void testIssue537a() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz()) this.method(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Foo.prototype.method: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 6272,
        "end_line": 6293,
        "comment": "",
        "child_ranges": [
            "(line 6273,col 5)-(line 6292,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537b()",
        "snippet": "  public void testIssue537b() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz(1)) this.method();\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Bar.prototype.baz: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 6295,
        "end_line": 6316,
        "comment": "",
        "child_ranges": [
            "(line 6296,col 5)-(line 6315,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537c()",
        "snippet": "  public void testIssue537c() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz2()) alert(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Property baz2 never defined on Bar\");\n  }\n",
        "begin_line": 6318,
        "end_line": 6336,
        "comment": "",
        "child_ranges": [
            "(line 6319,col 5)-(line 6335,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537d()",
        "snippet": "  public void testIssue537d() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {\" +\n        \"  /** @return {Bar} */ x: function() { new Bar(); },\" +\n        \"  /** @return {Foo} */ y: function() { new Bar(); }\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  this.xy = 3;\" +\n        \"}\" +\n        \"/** @return {Bar} */ function f() { return new Bar(); }\" +\n        \"/** @return {Foo} */ function g() { return new Bar(); }\" +\n        \"Bar.prototype = {\" +\n        \"  /** @return {Bar} */ x: function() { new Bar(); },\" +\n        \"  /** @return {Foo} */ y: function() { new Bar(); }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\");\n  }\n",
        "begin_line": 6338,
        "end_line": 6359,
        "comment": "",
        "child_ranges": [
            "(line 6339,col 5)-(line 6358,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue586()",
        "snippet": "  public void testIssue586() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var MyClass = function() {};\" +\n        \"/** @param {boolean} success */\" +\n        \"MyClass.prototype.fn = function(success) {};\" +\n        \"MyClass.prototype.test = function() {\" +\n        \"  this.fn();\" +\n        \"  this.fn = function() {};\" +\n        \"};\",\n        \"Function MyClass.prototype.fn: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 6361,
        "end_line": 6374,
        "comment": "",
        "child_ranges": [
            "(line 6362,col 5)-(line 6373,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue635()",
        "snippet": "  public void testIssue635() throws Exception {\n    // TODO(nicksantos): Make this emit a warning, because of the 'this' type.\n    testTypes(\n        \"/** @constructor */\" +\n        \"function F() {}\" +\n        \"F.prototype.bar = function() { this.baz(); };\" +\n        \"F.prototype.baz = function() {};\" +\n        \"/** @constructor */\" +\n        \"function G() {}\" +\n        \"G.prototype.bar = F.prototype.bar;\");\n  }\n",
        "begin_line": 6376,
        "end_line": 6386,
        "comment": "",
        "child_ranges": [
            "(line 6378,col 5)-(line 6385,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue635b()",
        "snippet": "  public void testIssue635b() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"function F() {}\" +\n        \"/** @constructor */\" +\n        \"function G() {}\" +\n        \"/** @type {function(new:G)} */ var x = F;\",\n        \"initializing variable\\n\" +\n        \"found   : function (new:F): undefined\\n\" +\n        \"required: function (new:G): ?\");\n  }\n",
        "begin_line": 6388,
        "end_line": 6398,
        "comment": "",
        "child_ranges": [
            "(line 6389,col 5)-(line 6397,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue669()",
        "snippet": "  public void testIssue669() throws Exception {\n    testTypes(\n        \"/** @return {{prop1: (Object|undefined)}} */\" +\n         \"function f(a) {\" +\n         \"  var results;\" +\n         \"  if (a) {\" +\n         \"    results = {};\" +\n         \"    results.prop1 = {a: 3};\" +\n         \"  } else {\" +\n         \"    results = {prop2: 3};\" +\n         \"  }\" +\n         \"  return results;\" +\n         \"}\");\n  }\n",
        "begin_line": 6400,
        "end_line": 6413,
        "comment": "",
        "child_ranges": [
            "(line 6401,col 5)-(line 6412,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue688()",
        "snippet": "  public void testIssue688() throws Exception {\n    testTypes(\n        \"/** @const */ var SOME_DEFAULT =\\n\" +\n        \"    /** @type {TwoNumbers} */ ({first: 1, second: 2});\\n\" +\n        \"/**\\n\" +\n        \"* Class defining an interface with two numbers.\\n\" +\n        \"* @interface\\n\" +\n        \"*/\\n\" +\n        \"function TwoNumbers() {}\\n\" +\n        \"/** @type number */\\n\" +\n        \"TwoNumbers.prototype.first;\\n\" +\n        \"/** @type number */\\n\" +\n        \"TwoNumbers.prototype.second;\\n\" +\n        \"/** @return {number} */ function f() { return SOME_DEFAULT; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (TwoNumbers|null)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6415,
        "end_line": 6432,
        "comment": "",
        "child_ranges": [
            "(line 6416,col 5)-(line 6431,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue700()",
        "snippet": "  public void testIssue700() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {{text: string}} opt_data\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function temp1(opt_data) {\\n\" +\n        \"  return opt_data.text;\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"/**\\n\" +\n        \" * @param {{activity: (boolean|number|string|null|Object)}} opt_data\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function temp2(opt_data) {\\n\" +\n        \"  /** @notypecheck */\\n\" +\n        \"  function __inner() {\\n\" +\n        \"    return temp1(opt_data.activity);\\n\" +\n        \"  }\\n\" +\n        \"  return __inner();\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"/**\\n\" +\n        \" * @param {{n: number, text: string, b: boolean}} opt_data\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function temp3(opt_data) {\\n\" +\n        \"  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"function callee() {\\n\" +\n        \"  var output = temp3({\\n\" +\n        \"    n: 0,\\n\" +\n        \"    text: 'a string',\\n\" +\n        \"    b: true\\n\" +\n        \"  })\\n\" +\n        \"  alert(output);\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"callee();\");\n  }\n",
        "begin_line": 6434,
        "end_line": 6474,
        "comment": "",
        "child_ranges": [
            "(line 6435,col 5)-(line 6473,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue725()",
        "snippet": "  public void testIssue725() throws Exception {\n    testTypes(\n        \"/** @typedef {{name: string}} */ var RecordType1;\" +\n        \"/** @typedef {{name2: string}} */ var RecordType2;\" +\n        \"/** @param {RecordType1} rec */ function f(rec) {\" +\n        \"  alert(rec.name2);\" +\n        \"}\",\n        \"Property name2 never defined on rec\");\n  }\n",
        "begin_line": 6476,
        "end_line": 6484,
        "comment": "",
        "child_ranges": [
            "(line 6477,col 5)-(line 6483,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue726()",
        "snippet": "  public void testIssue726() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @return {!Function} */ \" +\n        \"Foo.prototype.getDeferredBar = function() { \" +\n        \"  var self = this;\" +\n        \"  return function() {\" +\n        \"    self.bar(true);\" +\n        \"  };\" +\n        \"};\",\n        \"actual parameter 1 of Foo.prototype.bar does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6486,
        "end_line": 6500,
        "comment": "",
        "child_ranges": [
            "(line 6487,col 5)-(line 6499,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue765()",
        "snippet": "  public void testIssue765() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var AnotherType = function (parent) {\" +\n        \"    /** @param {string} stringParameter Description... */\" +\n        \"    this.doSomething = function (stringParameter) {};\" +\n        \"};\" +\n        \"/** @constructor */\" +\n        \"var YetAnotherType = function () {\" +\n        \"    this.field = new AnotherType(self);\" +\n        \"    this.testfun=function(stringdata) {\" +\n        \"        this.field.doSomething(null);\" +\n        \"    };\" +\n        \"};\",\n        \"actual parameter 1 of AnotherType.doSomething \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6502,
        "end_line": 6520,
        "comment": "",
        "child_ranges": [
            "(line 6503,col 5)-(line 6519,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue783()",
        "snippet": "  public void testIssue783() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var Type = function () {\" +\n        \"  /** @type {Type} */\" +\n        \"  this.me_ = this;\" +\n        \"};\" +\n        \"Type.prototype.doIt = function() {\" +\n        \"  var me = this.me_;\" +\n        \"  for (var i = 0; i < me.unknownProp; i++) {}\" +\n        \"};\",\n        \"Property unknownProp never defined on Type\");\n  }\n",
        "begin_line": 6522,
        "end_line": 6534,
        "comment": "",
        "child_ranges": [
            "(line 6523,col 5)-(line 6533,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue791()",
        "snippet": "  public void testIssue791() throws Exception {\n    testTypes(\n        \"/** @param {{func: function()}} obj */\" +\n        \"function test1(obj) {}\" +\n        \"var fnStruc1 = {};\" +\n        \"fnStruc1.func = function() {};\" +\n        \"test1(fnStruc1);\");\n  }\n",
        "begin_line": 6536,
        "end_line": 6543,
        "comment": "",
        "child_ranges": [
            "(line 6537,col 5)-(line 6542,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue810()",
        "snippet": "  public void testIssue810() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var Type = function () {\" +\n        \"};\" +\n        \"Type.prototype.doIt = function(obj) {\" +\n        \"  this.prop = obj.unknownProp;\" +\n        \"};\",\n        \"Property unknownProp never defined on obj\");\n  }\n",
        "begin_line": 6545,
        "end_line": 6554,
        "comment": "",
        "child_ranges": [
            "(line 6546,col 5)-(line 6553,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\",\n        \"Type annotations are not allowed here. Are you missing parentheses?\");\n  }\n",
        "begin_line": 6561,
        "end_line": 6569,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 6562,col 5)-(line 6568,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 6576,
        "end_line": 6581,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 6577,col 5)-(line 6578,col 37)",
            "(line 6579,col 5)-(line 6580,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 6586,
        "end_line": 6589,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 6587,col 5)-(line 6588,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 6594,
        "end_line": 6599,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 6595,col 5)-(line 6598,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to function expressions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 6605,
        "end_line": 6616,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 6607,col 5)-(line 6607,col 72)",
            "(line 6608,col 5)-(line 6608,col 42)",
            "(line 6609,col 5)-(line 6609,col 60)",
            "(line 6612,col 5)-(line 6615,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6618,
        "end_line": 6626,
        "comment": "",
        "child_ranges": [
            "(line 6619,col 5)-(line 6625,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6628,
        "end_line": 6635,
        "comment": "",
        "child_ranges": [
            "(line 6629,col 5)-(line 6634,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 6637,
        "end_line": 6650,
        "comment": "",
        "child_ranges": [
            "(line 6638,col 5)-(line 6649,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 6652,
        "end_line": 6679,
        "comment": "",
        "child_ranges": [
            "(line 6653,col 5)-(line 6678,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 6681,
        "end_line": 6691,
        "comment": "",
        "child_ranges": [
            "(line 6682,col 5)-(line 6690,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\" +\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 6693,
        "end_line": 6703,
        "comment": "",
        "child_ranges": [
            "(line 6694,col 5)-(line 6702,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 6705,
        "end_line": 6711,
        "comment": "",
        "child_ranges": [
            "(line 6706,col 5)-(line 6710,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6713,
        "end_line": 6723,
        "comment": "",
        "child_ranges": [
            "(line 6714,col 5)-(line 6722,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 6725,
        "end_line": 6736,
        "comment": "",
        "child_ranges": [
            "(line 6726,col 5)-(line 6735,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6738,
        "end_line": 6747,
        "comment": "",
        "child_ranges": [
            "(line 6739,col 5)-(line 6746,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 6749,
        "end_line": 6758,
        "comment": "",
        "child_ranges": [
            "(line 6750,col 5)-(line 6757,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug7701884()",
        "snippet": "  public void testBug7701884() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Array.<T>} x\\n\" +\n        \" * @param {function(T)} y\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"var forEach = function(x, y) {\\n\" +\n        \"  for (var i = 0; i < x.length; i++) y(x[i]);\\n\" +\n        \"};\" +\n        \"/** @param {number} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {?} x */\" +\n        \"function h(x) {\" +\n        \"  var top = null;\" +\n        \"  forEach(x, function(z) { top = z; });\" +\n        \"  if (top) f(top);\" +\n        \"}\");\n  }\n",
        "begin_line": 6760,
        "end_line": 6778,
        "comment": "",
        "child_ranges": [
            "(line 6761,col 5)-(line 6777,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors1()",
        "snippet": "  public void testScopedConstructors1() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6780,
        "end_line": 6800,
        "comment": "",
        "child_ranges": [
            "(line 6781,col 5)-(line 6799,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors2()",
        "snippet": "  public void testScopedConstructors2() throws Exception {\n    testTypes(\n        \"/** @param {Function} f */\" +\n        \"function foo1(f) {\" +\n        \"  /** @param {Function} g */\" +\n        \"  f.prototype.bar = function(g) {};\" +\n        \"}\");\n  }\n",
        "begin_line": 6802,
        "end_line": 6809,
        "comment": "",
        "child_ranges": [
            "(line 6803,col 5)-(line 6808,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6811,
        "end_line": 6825,
        "comment": "",
        "child_ranges": [
            "(line 6812,col 5)-(line 6824,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6827,
        "end_line": 6840,
        "comment": "",
        "child_ranges": [
            "(line 6828,col 5)-(line 6839,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 6842,
        "end_line": 6855,
        "comment": "",
        "child_ranges": [
            "(line 6843,col 5)-(line 6854,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 6857,
        "end_line": 6868,
        "comment": "",
        "child_ranges": [
            "(line 6858,col 5)-(line 6867,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference5()",
        "snippet": "  public void testQualifiedNameInference5() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"    /** @param {number} x */ ns.foo = function(x) {}; })();\" +\n        \"(function() { ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6870,
        "end_line": 6879,
        "comment": "",
        "child_ranges": [
            "(line 6871,col 5)-(line 6878,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference6()",
        "snippet": "  public void testQualifiedNameInference6() throws Exception {\n    testTypes(\n        \"/** @const */ var ns = {}; \" +\n        \"/** @param {number} x */ ns.foo = function(x) {};\" +\n        \"(function() { \" +\n        \"    ns.foo = function(x) {};\" +\n        \"    ns.foo(true); \" +\n        \"})();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6881,
        "end_line": 6892,
        "comment": "",
        "child_ranges": [
            "(line 6882,col 5)-(line 6891,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference7()",
        "snippet": "  public void testQualifiedNameInference7() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"  /** @param {ns.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6894,
        "end_line": 6906,
        "comment": "",
        "child_ranges": [
            "(line 6895,col 5)-(line 6905,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference8()",
        "snippet": "  public void testQualifiedNameInference8() throws Exception {\n    // We may need to reshuffle name resolution order so that the @param\n    // type resolves correctly.\n    testClosureTypesMultipleWarnings(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"})();\" +\n        \"/** @param {ns.Foo} x */ function f(x) {}\" +\n        \"f(new ns.Foo(true));\",\n        Lists.newArrayList(\n            \"Bad type annotation. Unknown type ns.Foo\",\n            \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n            \"found   : boolean\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 6908,
        "end_line": 6924,
        "comment": "",
        "child_ranges": [
            "(line 6911,col 5)-(line 6923,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference9()",
        "snippet": "  public void testQualifiedNameInference9() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.ns2.Foo = function(x) {};\" +\n        \"  /** @param {ns.ns2.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.ns2.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.ns2.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6926,
        "end_line": 6939,
        "comment": "",
        "child_ranges": [
            "(line 6927,col 5)-(line 6938,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference10()",
        "snippet": "  public void testQualifiedNameInference10() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @interface */ \" +\n        \"  ns.ns2.Foo = function() {};\" +\n        \"  /** @constructor \\n * @implements {ns.ns2.Foo} */ \" +\n        \"  function F() {}\" +\n        \"  (new F());\" +\n        \"})();\");\n  }\n",
        "begin_line": 6941,
        "end_line": 6952,
        "comment": "",
        "child_ranges": [
            "(line 6942,col 5)-(line 6951,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference11()",
        "snippet": "  public void testQualifiedNameInference11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"function f() {\" +\n        \"  var x = new Foo();\" +\n        \"  x.onload = function() {\" +\n        \"    x.onload = null;\" +\n        \"  };\" +\n        \"}\");\n  }\n",
        "begin_line": 6954,
        "end_line": 6963,
        "comment": "",
        "child_ranges": [
            "(line 6955,col 5)-(line 6962,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference12()",
        "snippet": "  public void testQualifiedNameInference12() throws Exception {\n    // We should be able to tell that the two 'this' properties\n    // are different.\n    testTypes(\n        \"/** @param {function(this:Object)} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {\" +\n        \"  /** @type {number} */ this.bar = 3;\" +\n        \"  f(function() { this.bar = true; });\" +\n        \"}\");\n  }\n",
        "begin_line": 6965,
        "end_line": 6974,
        "comment": "",
        "child_ranges": [
            "(line 6968,col 5)-(line 6973,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference13()",
        "snippet": "  public void testQualifiedNameInference13() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"function f(z) {\" +\n        \"  var x = new Foo();\" +\n        \"  if (z) {\" +\n        \"    x.onload = function() {};\" +\n        \"  } else {\" +\n        \"    x.onload = null;\" +\n        \"  };\" +\n        \"}\");\n  }\n",
        "begin_line": 6976,
        "end_line": 6987,
        "comment": "",
        "child_ranges": [
            "(line 6977,col 5)-(line 6986,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 6989,
        "end_line": 7010,
        "comment": "",
        "child_ranges": [
            "(line 6990,col 5)-(line 7001,col 13)",
            "(line 7002,col 5)-(line 7003,col 39)",
            "(line 7004,col 5)-(line 7004,col 37)",
            "(line 7005,col 5)-(line 7005,col 33)",
            "(line 7007,col 5)-(line 7007,col 55)",
            "(line 7008,col 5)-(line 7008,col 37)",
            "(line 7009,col 5)-(line 7009,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 7012,
        "end_line": 7019,
        "comment": "",
        "child_ranges": [
            "(line 7013,col 5)-(line 7013,col 48)",
            "(line 7015,col 5)-(line 7015,col 51)",
            "(line 7016,col 5)-(line 7016,col 39)",
            "(line 7017,col 5)-(line 7017,col 50)",
            "(line 7018,col 5)-(line 7018,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 7021,
        "end_line": 7030,
        "comment": "",
        "child_ranges": [
            "(line 7022,col 5)-(line 7025,col 24)",
            "(line 7027,col 5)-(line 7027,col 49)",
            "(line 7028,col 5)-(line 7028,col 50)",
            "(line 7029,col 5)-(line 7029,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 7032,
        "end_line": 7034,
        "comment": "",
        "child_ranges": [
            "(line 7033,col 5)-(line 7033,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 7036,
        "end_line": 7038,
        "comment": "",
        "child_ranges": [
            "(line 7037,col 5)-(line 7037,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 7040,
        "end_line": 7042,
        "comment": "",
        "child_ranges": [
            "(line 7041,col 5)-(line 7041,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 7044,
        "end_line": 7046,
        "comment": "",
        "child_ranges": [
            "(line 7045,col 5)-(line 7045,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 7048,
        "end_line": 7050,
        "comment": "",
        "child_ranges": [
            "(line 7049,col 5)-(line 7049,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 7052,
        "end_line": 7061,
        "comment": "",
        "child_ranges": [
            "(line 7053,col 5)-(line 7055,col 26)",
            "(line 7057,col 5)-(line 7057,col 49)",
            "(line 7058,col 5)-(line 7058,col 44)",
            "(line 7059,col 5)-(line 7059,col 48)",
            "(line 7060,col 5)-(line 7060,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 7063,
        "end_line": 7068,
        "comment": "",
        "child_ranges": [
            "(line 7064,col 5)-(line 7067,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 7070,
        "end_line": 7075,
        "comment": "",
        "child_ranges": [
            "(line 7071,col 5)-(line 7074,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 7077,
        "end_line": 7082,
        "comment": "",
        "child_ranges": [
            "(line 7078,col 5)-(line 7081,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 7084,
        "end_line": 7090,
        "comment": "",
        "child_ranges": [
            "(line 7085,col 5)-(line 7089,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 7092,
        "end_line": 7098,
        "comment": "",
        "child_ranges": [
            "(line 7093,col 5)-(line 7097,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTypeEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 7100,
        "end_line": 7105,
        "comment": "",
        "child_ranges": [
            "(line 7101,col 5)-(line 7101,col 75)",
            "(line 7102,col 5)-(line 7102,col 32)",
            "(line 7104,col 5)-(line 7104,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 7107,
        "end_line": 7115,
        "comment": "",
        "child_ranges": [
            "(line 7108,col 5)-(line 7110,col 33)",
            "(line 7111,col 5)-(line 7111,col 32)",
            "(line 7113,col 5)-(line 7113,col 50)",
            "(line 7114,col 5)-(line 7114,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 7117,
        "end_line": 7125,
        "comment": "",
        "child_ranges": [
            "(line 7118,col 5)-(line 7120,col 33)",
            "(line 7121,col 5)-(line 7121,col 32)",
            "(line 7123,col 5)-(line 7123,col 50)",
            "(line 7124,col 5)-(line 7124,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 7127,
        "end_line": 7136,
        "comment": "",
        "child_ranges": [
            "(line 7128,col 5)-(line 7131,col 33)",
            "(line 7132,col 5)-(line 7132,col 32)",
            "(line 7134,col 5)-(line 7134,col 50)",
            "(line 7135,col 5)-(line 7135,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7138,
        "end_line": 7149,
        "comment": "",
        "child_ranges": [
            "(line 7139,col 5)-(line 7148,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew17()",
        "snippet": "  public void testNew17() throws Exception {\n    testTypes(\"var goog = {}; goog.x = 3; new goog.x\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 7151,
        "end_line": 7154,
        "comment": "",
        "child_ranges": [
            "(line 7152,col 5)-(line 7153,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew18()",
        "snippet": "  public void testNew18() throws Exception {\n    testTypes(\"var goog = {};\" +\n              \"/** @constructor */ goog.F = function() {};\" +\n              \"/** @constructor */ goog.G = goog.F;\");\n  }\n",
        "begin_line": 7156,
        "end_line": 7160,
        "comment": "",
        "child_ranges": [
            "(line 7157,col 5)-(line 7159,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertTypeEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 7162,
        "end_line": 7164,
        "comment": "",
        "child_ranges": [
            "(line 7163,col 5)-(line 7163,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertTypeEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 7166,
        "end_line": 7168,
        "comment": "",
        "child_ranges": [
            "(line 7167,col 5)-(line 7167,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertTypeEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 7170,
        "end_line": 7172,
        "comment": "",
        "child_ranges": [
            "(line 7171,col 5)-(line 7171,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertTypeEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 7174,
        "end_line": 7176,
        "comment": "",
        "child_ranges": [
            "(line 7175,col 5)-(line 7175,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 7178,
        "end_line": 7180,
        "comment": "",
        "child_ranges": [
            "(line 7179,col 5)-(line 7179,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n    parent.setInputId(new InputId(\"code\"));\n\n    Node externs = new Node(Token.SCRIPT);\n    externs.setInputId(new InputId(\"externs\"));\n\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 7185,
        "end_line": 7198,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 7186,col 5)-(line 7186,col 49)",
            "(line 7187,col 5)-(line 7187,col 47)",
            "(line 7188,col 5)-(line 7188,col 43)",
            "(line 7190,col 5)-(line 7190,col 42)",
            "(line 7191,col 5)-(line 7191,col 47)",
            "(line 7193,col 5)-(line 7193,col 66)",
            "(line 7194,col 5)-(line 7194,col 46)",
            "(line 7196,col 5)-(line 7196,col 52)",
            "(line 7197,col 5)-(line 7197,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 7200,
        "end_line": 7203,
        "comment": "",
        "child_ranges": [
            "(line 7201,col 5)-(line 7202,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 7205,
        "end_line": 7208,
        "comment": "",
        "child_ranges": [
            "(line 7206,col 5)-(line 7207,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 7210,
        "end_line": 7213,
        "comment": "",
        "child_ranges": [
            "(line 7211,col 5)-(line 7212,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 7215,
        "end_line": 7218,
        "comment": "",
        "child_ranges": [
            "(line 7216,col 5)-(line 7217,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 7220,
        "end_line": 7223,
        "comment": "",
        "child_ranges": [
            "(line 7221,col 5)-(line 7222,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 7225,
        "end_line": 7230,
        "comment": "",
        "child_ranges": [
            "(line 7226,col 5)-(line 7229,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 7232,
        "end_line": 7234,
        "comment": "",
        "child_ranges": [
            "(line 7233,col 5)-(line 7233,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 7236,
        "end_line": 7238,
        "comment": "",
        "child_ranges": [
            "(line 7237,col 5)-(line 7237,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 7240,
        "end_line": 7245,
        "comment": "",
        "child_ranges": [
            "(line 7241,col 5)-(line 7244,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 7247,
        "end_line": 7249,
        "comment": "",
        "child_ranges": [
            "(line 7248,col 5)-(line 7248,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 7251,
        "end_line": 7256,
        "comment": "",
        "child_ranges": [
            "(line 7252,col 5)-(line 7255,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 7258,
        "end_line": 7266,
        "comment": "",
        "child_ranges": [
            "(line 7261,col 5)-(line 7265,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 7268,
        "end_line": 7273,
        "comment": "",
        "child_ranges": [
            "(line 7269,col 5)-(line 7272,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 7275,
        "end_line": 7280,
        "comment": "",
        "child_ranges": [
            "(line 7276,col 5)-(line 7279,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 7282,
        "end_line": 7288,
        "comment": "",
        "child_ranges": [
            "(line 7283,col 5)-(line 7287,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 7290,
        "end_line": 7296,
        "comment": "",
        "child_ranges": [
            "(line 7291,col 5)-(line 7295,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 7298,
        "end_line": 7302,
        "comment": "",
        "child_ranges": [
            "(line 7299,col 5)-(line 7301,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 7304,
        "end_line": 7313,
        "comment": "",
        "child_ranges": [
            "(line 7305,col 5)-(line 7312,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 7315,
        "end_line": 7317,
        "comment": "",
        "child_ranges": [
            "(line 7316,col 5)-(line 7316,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 7319,
        "end_line": 7321,
        "comment": "",
        "child_ranges": [
            "(line 7320,col 5)-(line 7320,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 7323,
        "end_line": 7327,
        "comment": "",
        "child_ranges": [
            "(line 7324,col 5)-(line 7326,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7329,
        "end_line": 7336,
        "comment": "",
        "child_ranges": [
            "(line 7330,col 5)-(line 7335,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 7338,
        "end_line": 7343,
        "comment": "",
        "child_ranges": [
            "(line 7339,col 5)-(line 7342,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7345,
        "end_line": 7354,
        "comment": "",
        "child_ranges": [
            "(line 7346,col 5)-(line 7353,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 7356,
        "end_line": 7360,
        "comment": "",
        "child_ranges": [
            "(line 7357,col 5)-(line 7359,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 7362,
        "end_line": 7366,
        "comment": "",
        "child_ranges": [
            "(line 7363,col 5)-(line 7365,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 7368,
        "end_line": 7374,
        "comment": "",
        "child_ranges": [
            "(line 7369,col 5)-(line 7373,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 7376,
        "end_line": 7382,
        "comment": "",
        "child_ranges": [
            "(line 7377,col 5)-(line 7381,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind1()",
        "snippet": "  public void testFunctionBind1() throws Exception {\n    testTypes(\n        \"/** @type {function(string, number): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f.bind(null, 3);\",\n        \"actual parameter 2 of f.bind does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7384,
        "end_line": 7392,
        "comment": "",
        "child_ranges": [
            "(line 7385,col 5)-(line 7391,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind2()",
        "snippet": "  public void testFunctionBind2() throws Exception {\n    testTypes(\n        \"/** @type {function(number): boolean} */\" +\n        \"function f(x) { return true; }\" +\n        \"f(f.bind(null, 3)());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7394,
        "end_line": 7402,
        "comment": "",
        "child_ranges": [
            "(line 7395,col 5)-(line 7401,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind3()",
        "snippet": "  public void testFunctionBind3() throws Exception {\n    testTypes(\n        \"/** @type {function(number, string): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f.bind(null, 3)(true);\",\n        \"actual parameter 1 of function does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7404,
        "end_line": 7412,
        "comment": "",
        "child_ranges": [
            "(line 7405,col 5)-(line 7411,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind4()",
        "snippet": "  public void testFunctionBind4() throws Exception {\n    testTypes(\n        \"/** @param {...number} x */\" +\n        \"function f(x) {}\" +\n        \"f.bind(null, 3, 3, 3)(true);\",\n        \"actual parameter 1 of function does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 7414,
        "end_line": 7422,
        "comment": "",
        "child_ranges": [
            "(line 7415,col 5)-(line 7421,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind5()",
        "snippet": "  public void testFunctionBind5() throws Exception {\n    testTypes(\n        \"/** @param {...number} x */\" +\n        \"function f(x) {}\" +\n        \"f.bind(null, true)(3, 3, 3);\",\n        \"actual parameter 2 of f.bind does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 7424,
        "end_line": 7432,
        "comment": "",
        "child_ranges": [
            "(line 7425,col 5)-(line 7431,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoogBind1()",
        "snippet": "  public void testGoogBind1() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.bind = function(var_args) {};\" +\n        \"/** @type {function(number): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f(goog.bind(f, null, 'x')());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7434,
        "end_line": 7443,
        "comment": "",
        "child_ranges": [
            "(line 7435,col 5)-(line 7442,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoogBind2()",
        "snippet": "  public void testGoogBind2() throws Exception {\n    // TODO(nicksantos): We do not currently type-check the arguments\n    // of the goog.bind.\n    testClosureTypes(\n        \"var goog = {}; goog.bind = function(var_args) {};\" +\n        \"/** @type {function(boolean): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f(goog.bind(f, null, 'x')());\",\n        null);\n  }\n",
        "begin_line": 7445,
        "end_line": 7454,
        "comment": "",
        "child_ranges": [
            "(line 7448,col 5)-(line 7453,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 7456,
        "end_line": 7461,
        "comment": "",
        "child_ranges": [
            "(line 7458,col 5)-(line 7460,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 7463,
        "end_line": 7471,
        "comment": "",
        "child_ranges": [
            "(line 7465,col 5)-(line 7470,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast3a()",
        "snippet": "  public void testCast3a() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function Base() {}\\n\" +\n        \"/** @constructor @extends {Base} */function Derived() {}\\n\" +\n        \"var baseInstance = new Base();\" +\n        \"/** @type {!Derived} */ var baz = baseInstance;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : Base\\n\" +\n        \"required: Derived\");\n  }\n",
        "begin_line": 7473,
        "end_line": 7482,
        "comment": "",
        "child_ranges": [
            "(line 7475,col 5)-(line 7481,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 7484,
        "end_line": 7490,
        "comment": "",
        "child_ranges": [
            "(line 7486,col 5)-(line 7489,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 7492,
        "end_line": 7500,
        "comment": "",
        "child_ranges": [
            "(line 7494,col 5)-(line 7499,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast5a()",
        "snippet": "  public void testCast5a() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var barInstance = new bar;\\n\" +\n        \"var baz = /** @type {!foo} */(barInstance);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 7502,
        "end_line": 7511,
        "comment": "",
        "child_ranges": [
            "(line 7504,col 5)-(line 7510,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 7513,
        "end_line": 7525,
        "comment": "",
        "child_ranges": [
            "(line 7515,col 5)-(line 7524,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7527,
        "end_line": 7530,
        "comment": "",
        "child_ranges": [
            "(line 7528,col 5)-(line 7529,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7532,
        "end_line": 7535,
        "comment": "",
        "child_ranges": [
            "(line 7533,col 5)-(line 7534,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7537,
        "end_line": 7541,
        "comment": "",
        "child_ranges": [
            "(line 7538,col 5)-(line 7540,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7543,
        "end_line": 7547,
        "comment": "",
        "child_ranges": [
            "(line 7544,col 5)-(line 7546,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 7549,
        "end_line": 7553,
        "comment": "",
        "child_ranges": [
            "(line 7550,col 5)-(line 7552,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 7555,
        "end_line": 7559,
        "comment": "",
        "child_ranges": [
            "(line 7556,col 5)-(line 7558,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 7561,
        "end_line": 7569,
        "comment": "",
        "child_ranges": [
            "(line 7564,col 5)-(line 7568,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 7571,
        "end_line": 7578,
        "comment": "",
        "child_ranges": [
            "(line 7574,col 5)-(line 7577,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a run-time cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {number} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 7580,
        "end_line": 7596,
        "comment": "",
        "child_ranges": [
            "(line 7588,col 5)-(line 7595,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // A type cast should not invalidate the checks on the members\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ (\" +\n          \"  {/** @type {string} */ foo: 3});\" +\n        \"}\",\n        \"assignment to property foo of Object\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7598,
        "end_line": 7608,
        "comment": "",
        "child_ranges": [
            "(line 7600,col 5)-(line 7607,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast17a()",
        "snippet": "  public void testCast17a() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ (y)\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ y)\");\n  }\n",
        "begin_line": 7610,
        "end_line": 7617,
        "comment": "",
        "child_ranges": [
            "(line 7612,col 5)-(line 7613,col 61)",
            "(line 7615,col 5)-(line 7616,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast17b()",
        "snippet": "  public void testCast17b() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n  }\n",
        "begin_line": 7619,
        "end_line": 7623,
        "comment": "",
        "child_ranges": [
            "(line 7621,col 5)-(line 7622,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast18()",
        "snippet": "  public void testCast18() throws Exception {\n    // Mostly verifying that legacy annotations are applied\n    // despite the parser warning.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\",\n        \"Type annotations are not allowed here. \" +\n        \"Are you missing parentheses?\");\n\n    // Not really encourage because of possible ambiguity but it works.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\",\n        \"Type annotations are not allowed here. \" +\n        \"Are you missing parentheses?\");\n  }\n",
        "begin_line": 7625,
        "end_line": 7638,
        "comment": "",
        "child_ranges": [
            "(line 7628,col 5)-(line 7631,col 40)",
            "(line 7634,col 5)-(line 7637,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast19()",
        "snippet": "  public void testCast19() throws Exception {\n    testTypes(\n        \"var x = 'string';\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"var y = /** @type {number} */(x);\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: string\\n\" +\n        \"to  : number\");\n  }\n",
        "begin_line": 7640,
        "end_line": 7648,
        "comment": "",
        "child_ranges": [
            "(line 7641,col 5)-(line 7647,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast20()",
        "snippet": "  public void testCast20() throws Exception {\n    testTypes(\n        \"/** @enum {boolean|null} */\\n\" +\n        \"var X = {\" +\n        \"  AA: true,\" +\n        \"  BB: false,\" +\n        \"  CC: null\" +\n        \"};\\n\" +\n        \"var y = /** @type {X} */(true);\");\n  }\n",
        "begin_line": 7650,
        "end_line": 7659,
        "comment": "",
        "child_ranges": [
            "(line 7651,col 5)-(line 7658,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast21()",
        "snippet": "  public void testCast21() throws Exception {\n    testTypes(\n        \"/** @enum {boolean|null} */\\n\" +\n        \"var X = {\" +\n        \"  AA: true,\" +\n        \"  BB: false,\" +\n        \"  CC: null\" +\n        \"};\\n\" +\n        \"var value = true;\\n\" +\n        \"var y = /** @type {X} */(value);\");\n  }\n",
        "begin_line": 7661,
        "end_line": 7671,
        "comment": "",
        "child_ranges": [
            "(line 7662,col 5)-(line 7670,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast22()",
        "snippet": "  public void testCast22() throws Exception {\n    testTypes(\n        \"var x = null;\\n\" +\n        \"var y = /** @type {number} */(x);\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: null\\n\" +\n        \"to  : number\");\n  }\n",
        "begin_line": 7673,
        "end_line": 7680,
        "comment": "",
        "child_ranges": [
            "(line 7674,col 5)-(line 7679,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast23()",
        "snippet": "  public void testCast23() throws Exception {\n    testTypes(\n        \"var x = null;\\n\" +\n        \"var y = /** @type {Number} */(x);\");\n  }\n",
        "begin_line": 7682,
        "end_line": 7686,
        "comment": "",
        "child_ranges": [
            "(line 7683,col 5)-(line 7685,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast24()",
        "snippet": "  public void testCast24() throws Exception {\n    testTypes(\n        \"var x = undefined;\\n\" +\n        \"var y = /** @type {number} */(x);\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: undefined\\n\" +\n        \"to  : number\");\n  }\n",
        "begin_line": 7688,
        "end_line": 7695,
        "comment": "",
        "child_ranges": [
            "(line 7689,col 5)-(line 7694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast25()",
        "snippet": "  public void testCast25() throws Exception {\n    testTypes(\n        \"var x = undefined;\\n\" +\n        \"var y = /** @type {number|undefined} */(x);\");\n  }\n",
        "begin_line": 7697,
        "end_line": 7701,
        "comment": "",
        "child_ranges": [
            "(line 7698,col 5)-(line 7700,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast26()",
        "snippet": "  public void testCast26() throws Exception {\n    testTypes(\n        \"function fn(dir) {\\n\" +\n        \"  var node = dir ? 1 : 2;\\n\" +\n        \"  fn(/** @type {number} */ (node));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 7703,
        "end_line": 7709,
        "comment": "",
        "child_ranges": [
            "(line 7704,col 5)-(line 7708,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast27()",
        "snippet": "  public void testCast27() throws Exception {\n    // C doesn't implement I but a subtype might.\n    testTypes(\n        \"/** @interface */ function I() {}\\n\" +\n        \"/** @constructor */ function C() {}\\n\" +\n        \"var x = new C();\\n\" +\n        \"var y = /** @type {I} */(x);\");\n  }\n",
        "begin_line": 7711,
        "end_line": 7718,
        "comment": "",
        "child_ranges": [
            "(line 7713,col 5)-(line 7717,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast27a()",
        "snippet": "  public void testCast27a() throws Exception {\n    // C doesn't implement I but a subtype might.\n    testTypes(\n        \"/** @interface */ function I() {}\\n\" +\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {C} */ var x ;\\n\" +\n        \"var y = /** @type {I} */(x);\");\n  }\n",
        "begin_line": 7720,
        "end_line": 7727,
        "comment": "",
        "child_ranges": [
            "(line 7722,col 5)-(line 7726,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast28()",
        "snippet": "  public void testCast28() throws Exception {\n    // C doesn't implement I but a subtype might.\n    testTypes(\n        \"/** @interface */ function I() {}\\n\" +\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {!I} */ var x;\\n\" +\n        \"var y = /** @type {C} */(x);\");\n  }\n",
        "begin_line": 7729,
        "end_line": 7736,
        "comment": "",
        "child_ranges": [
            "(line 7731,col 5)-(line 7735,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast28a()",
        "snippet": "  public void testCast28a() throws Exception {\n    // C doesn't implement I but a subtype might.\n    testTypes(\n        \"/** @interface */ function I() {}\\n\" +\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {I} */ var x;\\n\" +\n        \"var y = /** @type {C} */(x);\");\n  }\n",
        "begin_line": 7738,
        "end_line": 7745,
        "comment": "",
        "child_ranges": [
            "(line 7740,col 5)-(line 7744,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast29a()",
        "snippet": "  public void testCast29a() throws Exception {\n    // C doesn't implement the record type but a subtype might.\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"var x = new C();\\n\" +\n        \"var y = /** @type {{remoteJids: Array, sessionId: string}} */(x);\");\n  }\n",
        "begin_line": 7747,
        "end_line": 7753,
        "comment": "",
        "child_ranges": [
            "(line 7749,col 5)-(line 7752,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast29b()",
        "snippet": "  public void testCast29b() throws Exception {\n    // C doesn't implement the record type but a subtype might.\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {C} */ var x;\\n\" +\n        \"var y = /** @type {{prop1: Array, prop2: string}} */(x);\");\n  }\n",
        "begin_line": 7755,
        "end_line": 7761,
        "comment": "",
        "child_ranges": [
            "(line 7757,col 5)-(line 7760,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast29c()",
        "snippet": "  public void testCast29c() throws Exception {\n    // C doesn't implement the record type but a subtype might.\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {{remoteJids: Array, sessionId: string}} */ var x ;\\n\" +\n        \"var y = /** @type {C} */(x);\");\n  }\n",
        "begin_line": 7763,
        "end_line": 7769,
        "comment": "",
        "child_ranges": [
            "(line 7765,col 5)-(line 7768,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast30()",
        "snippet": "  public void testCast30() throws Exception {\n    // Should be able to cast to a looser return type\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {function():string} */ var x ;\\n\" +\n        \"var y = /** @type {function():?} */(x);\");\n  }\n",
        "begin_line": 7771,
        "end_line": 7777,
        "comment": "",
        "child_ranges": [
            "(line 7773,col 5)-(line 7776,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast31()",
        "snippet": "  public void testCast31() throws Exception {\n    // Should be able to cast to a tighter parameter type\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {function(*)} */ var x ;\\n\" +\n        \"var y = /** @type {function(string)} */(x);\");\n  }\n",
        "begin_line": 7779,
        "end_line": 7785,
        "comment": "",
        "child_ranges": [
            "(line 7781,col 5)-(line 7784,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast32()",
        "snippet": "  public void testCast32() throws Exception {\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {Object} */ var x ;\\n\" +\n        \"var y = /** @type {null|{length:number}} */(x);\");\n  }\n",
        "begin_line": 7787,
        "end_line": 7792,
        "comment": "",
        "child_ranges": [
            "(line 7788,col 5)-(line 7791,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast33()",
        "snippet": "  public void testCast33() throws Exception {\n    // null and void should be assignable to any type that accepts one or the\n    // other or both.\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {null|undefined} */ var x ;\\n\" +\n        \"var y = /** @type {string?|undefined} */(x);\");\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {null|undefined} */ var x ;\\n\" +\n        \"var y = /** @type {string|undefined} */(x);\");\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {null|undefined} */ var x ;\\n\" +\n        \"var y = /** @type {string?} */(x);\");\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {null|undefined} */ var x ;\\n\" +\n        \"var y = /** @type {null} */(x);\");\n  }\n",
        "begin_line": 7794,
        "end_line": 7813,
        "comment": "",
        "child_ranges": [
            "(line 7797,col 5)-(line 7800,col 56)",
            "(line 7801,col 5)-(line 7804,col 55)",
            "(line 7805,col 5)-(line 7808,col 46)",
            "(line 7809,col 5)-(line 7812,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast34a()",
        "snippet": "  public void testCast34a() throws Exception {\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {Object} */ var x ;\\n\" +\n        \"var y = /** @type {Function} */(x);\");\n  }\n",
        "begin_line": 7815,
        "end_line": 7820,
        "comment": "",
        "child_ranges": [
            "(line 7816,col 5)-(line 7819,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast34b()",
        "snippet": "  public void testCast34b() throws Exception {\n    testTypes(\n        \"/** @constructor */ function C() {}\\n\" +\n        \"/** @type {Function} */ var x ;\\n\" +\n        \"var y = /** @type {Object} */(x);\");\n  }\n",
        "begin_line": 7822,
        "end_line": 7827,
        "comment": "",
        "child_ranges": [
            "(line 7823,col 5)-(line 7826,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 7829,
        "end_line": 7846,
        "comment": "",
        "child_ranges": [
            "(line 7830,col 5)-(line 7845,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7848,
        "end_line": 7855,
        "comment": "",
        "child_ranges": [
            "(line 7849,col 5)-(line 7854,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7857,
        "end_line": 7864,
        "comment": "",
        "child_ranges": [
            "(line 7858,col 5)-(line 7863,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7866,
        "end_line": 7873,
        "comment": "",
        "child_ranges": [
            "(line 7867,col 5)-(line 7872,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7875,
        "end_line": 7882,
        "comment": "",
        "child_ranges": [
            "(line 7876,col 5)-(line 7881,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 7884,
        "end_line": 7890,
        "comment": "",
        "child_ranges": [
            "(line 7885,col 5)-(line 7889,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 7892,
        "end_line": 7894,
        "comment": "",
        "child_ranges": [
            "(line 7893,col 5)-(line 7893,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof2()",
        "snippet": "  public void testTypeof2() throws Exception {\n    testTypes(\"function f(){ if (typeof 123 == 'numbr') return 321; }\",\n              \"unknown type: numbr\");\n  }\n",
        "begin_line": 7896,
        "end_line": 7899,
        "comment": "",
        "child_ranges": [
            "(line 7897,col 5)-(line 7898,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof3()",
        "snippet": "  public void testTypeof3() throws Exception {\n    testTypes(\"function f() {\" +\n              \"return (typeof 123 == 'number' ||\" +\n              \"typeof 123 == 'string' ||\" +\n              \"typeof 123 == 'boolean' ||\" +\n              \"typeof 123 == 'undefined' ||\" +\n              \"typeof 123 == 'function' ||\" +\n              \"typeof 123 == 'object' ||\" +\n              \"typeof 123 == 'unknown'); }\");\n  }\n",
        "begin_line": 7901,
        "end_line": 7910,
        "comment": "",
        "child_ranges": [
            "(line 7902,col 5)-(line 7909,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 7912,
        "end_line": 7918,
        "comment": "",
        "child_ranges": [
            "(line 7913,col 5)-(line 7917,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 7920,
        "end_line": 7926,
        "comment": "",
        "child_ranges": [
            "(line 7921,col 5)-(line 7925,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 7928,
        "end_line": 7936,
        "comment": "",
        "child_ranges": [
            "(line 7931,col 5)-(line 7935,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 7938,
        "end_line": 7947,
        "comment": "",
        "child_ranges": [
            "(line 7939,col 5)-(line 7946,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 7949,
        "end_line": 7952,
        "comment": "",
        "child_ranges": [
            "(line 7950,col 5)-(line 7951,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 7954,
        "end_line": 7961,
        "comment": "",
        "child_ranges": [
            "(line 7955,col 5)-(line 7960,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 7963,
        "end_line": 7971,
        "comment": "",
        "child_ranges": [
            "(line 7964,col 5)-(line 7965,col 73)",
            "(line 7967,col 5)-(line 7967,col 48)",
            "(line 7968,col 5)-(line 7968,col 45)",
            "(line 7969,col 5)-(line 7969,col 45)",
            "(line 7970,col 5)-(line 7970,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType8()",
        "snippet": "  public void testConstructorType8() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = {x: 0, y: 0};\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7973,
        "end_line": 7989,
        "comment": "",
        "child_ranges": [
            "(line 7974,col 5)-(line 7988,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType9()",
        "snippet": "  public void testConstructorType9() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"ns.extend = function(x) { return x; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = ns.extend({x: 0, y: 0});\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\");\n  }\n",
        "begin_line": 7991,
        "end_line": 8005,
        "comment": "",
        "child_ranges": [
            "(line 7992,col 5)-(line 8004,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType10()",
        "snippet": "  public void testConstructorType10() throws Exception {\n    testTypes(\"/** @constructor */\" +\n              \"function NonStr() {}\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" * @extends{NonStr}\\n\" +\n              \" */\" +\n              \"function NonStrKid() {}\",\n              \"NonStrKid cannot extend this type; \" +\n              \"structs can only extend structs\");\n  }\n",
        "begin_line": 8007,
        "end_line": 8018,
        "comment": "",
        "child_ranges": [
            "(line 8008,col 5)-(line 8017,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType11()",
        "snippet": "  public void testConstructorType11() throws Exception {\n    testTypes(\"/** @constructor */\" +\n              \"function NonDict() {}\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" * @extends{NonDict}\\n\" +\n              \" */\" +\n              \"function NonDictKid() {}\",\n              \"NonDictKid cannot extend this type; \" +\n              \"dicts can only extend dicts\");\n  }\n",
        "begin_line": 8020,
        "end_line": 8031,
        "comment": "",
        "child_ranges": [
            "(line 8021,col 5)-(line 8030,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType12()",
        "snippet": "  public void testConstructorType12() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = {};\\n\",\n              \"Bar cannot extend this type; \" +\n              \"structs can only extend structs\");\n  }\n",
        "begin_line": 8033,
        "end_line": 8042,
        "comment": "",
        "child_ranges": [
            "(line 8034,col 5)-(line 8041,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadStruct()",
        "snippet": "  public void testBadStruct() throws Exception {\n    testTypes(\"/** @struct */function Struct1() {}\",\n              \"@struct used without @constructor for Struct1\");\n  }\n",
        "begin_line": 8044,
        "end_line": 8047,
        "comment": "",
        "child_ranges": [
            "(line 8045,col 5)-(line 8046,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadDict()",
        "snippet": "  public void testBadDict() throws Exception {\n    testTypes(\"/** @dict */function Dict1() {}\",\n              \"@dict used without @constructor for Dict1\");\n  }\n",
        "begin_line": 8049,
        "end_line": 8052,
        "comment": "",
        "child_ranges": [
            "(line 8050,col 5)-(line 8051,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousPrototype1()",
        "snippet": "  public void testAnonymousPrototype1() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"/** @constructor */ ns.Foo = function() {\" +\n        \"  this.bar(3, 5);\" +\n        \"};\" +\n        \"ns.Foo.prototype = {\" +\n        \"  bar: function(x) {}\" +\n        \"};\",\n        \"Function ns.Foo.prototype.bar: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) and no more \" +\n        \"than 1 argument(s).\");\n  }\n",
        "begin_line": 8054,
        "end_line": 8066,
        "comment": "",
        "child_ranges": [
            "(line 8055,col 5)-(line 8065,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousPrototype2()",
        "snippet": "  public void testAnonymousPrototype2() throws Exception {\n    testTypes(\n        \"/** @interface */ var Foo = function() {};\" +\n        \"Foo.prototype = {\" +\n        \"  foo: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {Foo}\\n\" +\n        \" */ var Bar = function() {};\",\n        \"property foo on interface Foo is not implemented by type Bar\");\n  }\n",
        "begin_line": 8068,
        "end_line": 8079,
        "comment": "",
        "child_ranges": [
            "(line 8069,col 5)-(line 8078,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 8081,
        "end_line": 8085,
        "comment": "",
        "child_ranges": [
            "(line 8082,col 5)-(line 8084,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 8087,
        "end_line": 8091,
        "comment": "",
        "child_ranges": [
            "(line 8088,col 5)-(line 8090,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 8093,
        "end_line": 8097,
        "comment": "",
        "child_ranges": [
            "(line 8094,col 5)-(line 8096,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 8099,
        "end_line": 8105,
        "comment": "",
        "child_ranges": [
            "(line 8100,col 5)-(line 8104,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 8107,
        "end_line": 8110,
        "comment": "",
        "child_ranges": [
            "(line 8108,col 5)-(line 8109,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 8112,
        "end_line": 8115,
        "comment": "",
        "child_ranges": [
            "(line 8113,col 5)-(line 8114,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 8117,
        "end_line": 8122,
        "comment": "",
        "child_ranges": [
            "(line 8118,col 5)-(line 8121,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 8124,
        "end_line": 8127,
        "comment": "",
        "child_ranges": [
            "(line 8125,col 5)-(line 8126,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 8129,
        "end_line": 8132,
        "comment": "",
        "child_ranges": [
            "(line 8130,col 5)-(line 8131,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 8134,
        "end_line": 8137,
        "comment": "",
        "child_ranges": [
            "(line 8135,col 5)-(line 8136,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 8139,
        "end_line": 8146,
        "comment": "",
        "child_ranges": [
            "(line 8140,col 5)-(line 8145,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 8148,
        "end_line": 8155,
        "comment": "",
        "child_ranges": [
            "(line 8149,col 5)-(line 8154,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 8157,
        "end_line": 8159,
        "comment": "",
        "child_ranges": [
            "(line 8158,col 5)-(line 8158,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */(new f()); }\");\n  }\n",
        "begin_line": 8161,
        "end_line": 8163,
        "comment": "",
        "child_ranges": [
            "(line 8162,col 5)-(line 8162,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 8165,
        "end_line": 8167,
        "comment": "",
        "child_ranges": [
            "(line 8166,col 5)-(line 8166,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 8169,
        "end_line": 8180,
        "comment": "",
        "child_ranges": [
            "(line 8170,col 5)-(line 8179,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 8182,
        "end_line": 8195,
        "comment": "",
        "child_ranges": [
            "(line 8183,col 5)-(line 8187,col 57)",
            "(line 8189,col 5)-(line 8189,col 55)",
            "(line 8190,col 5)-(line 8190,col 46)",
            "(line 8192,col 5)-(line 8192,col 64)",
            "(line 8193,col 5)-(line 8193,col 42)",
            "(line 8194,col 5)-(line 8194,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top-level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertTypeEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 8197,
        "end_line": 8260,
        "comment": "",
        "child_ranges": [
            "(line 8198,col 5)-(line 8201,col 26)",
            "(line 8203,col 5)-(line 8203,col 55)",
            "(line 8206,col 5)-(line 8206,col 60)",
            "(line 8207,col 5)-(line 8207,col 52)",
            "(line 8208,col 5)-(line 8209,col 57)",
            "(line 8210,col 5)-(line 8211,col 57)",
            "(line 8214,col 5)-(line 8214,col 42)",
            "(line 8215,col 5)-(line 8215,col 47)",
            "(line 8216,col 5)-(line 8216,col 62)",
            "(line 8217,col 5)-(line 8217,col 51)",
            "(line 8220,col 5)-(line 8220,col 46)",
            "(line 8223,col 5)-(line 8223,col 73)",
            "(line 8224,col 5)-(line 8224,col 55)",
            "(line 8225,col 5)-(line 8225,col 66)",
            "(line 8226,col 5)-(line 8226,col 73)",
            "(line 8227,col 5)-(line 8227,col 58)",
            "(line 8230,col 5)-(line 8230,col 53)",
            "(line 8233,col 5)-(line 8233,col 77)",
            "(line 8234,col 5)-(line 8234,col 50)",
            "(line 8238,col 5)-(line 8239,col 57)",
            "(line 8240,col 5)-(line 8240,col 55)",
            "(line 8241,col 5)-(line 8241,col 66)",
            "(line 8242,col 5)-(line 8242,col 73)",
            "(line 8243,col 5)-(line 8243,col 58)",
            "(line 8246,col 5)-(line 8246,col 53)",
            "(line 8250,col 5)-(line 8250,col 57)",
            "(line 8251,col 5)-(line 8252,col 51)",
            "(line 8253,col 5)-(line 8253,col 76)",
            "(line 8254,col 5)-(line 8255,col 54)",
            "(line 8256,col 5)-(line 8257,col 54)",
            "(line 8258,col 5)-(line 8259,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 8262,
        "end_line": 8272,
        "comment": "",
        "child_ranges": [
            "(line 8264,col 5)-(line 8266,col 30)",
            "(line 8268,col 5)-(line 8268,col 55)",
            "(line 8269,col 5)-(line 8270,col 43)",
            "(line 8271,col 5)-(line 8271,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 8274,
        "end_line": 8282,
        "comment": "",
        "child_ranges": [
            "(line 8276,col 5)-(line 8279,col 54)",
            "(line 8281,col 5)-(line 8281,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 8284,
        "end_line": 8292,
        "comment": "",
        "child_ranges": [
            "(line 8286,col 5)-(line 8289,col 54)",
            "(line 8291,col 5)-(line 8291,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 8294,
        "end_line": 8305,
        "comment": "",
        "child_ranges": [
            "(line 8296,col 5)-(line 8296,col 68)",
            "(line 8297,col 5)-(line 8297,col 73)",
            "(line 8298,col 5)-(line 8298,col 45)",
            "(line 8299,col 5)-(line 8299,col 25)",
            "(line 8300,col 5)-(line 8300,col 46)",
            "(line 8301,col 5)-(line 8301,col 54)",
            "(line 8302,col 5)-(line 8302,col 56)",
            "(line 8303,col 5)-(line 8303,col 75)",
            "(line 8304,col 5)-(line 8304,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 8307,
        "end_line": 8318,
        "comment": "",
        "child_ranges": [
            "(line 8309,col 5)-(line 8311,col 43)",
            "(line 8313,col 5)-(line 8313,col 55)",
            "(line 8314,col 5)-(line 8315,col 43)",
            "(line 8316,col 5)-(line 8316,col 53)",
            "(line 8317,col 5)-(line 8317,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 8320,
        "end_line": 8332,
        "comment": "",
        "child_ranges": [
            "(line 8322,col 5)-(line 8324,col 43)",
            "(line 8326,col 5)-(line 8326,col 63)",
            "(line 8327,col 5)-(line 8327,col 69)",
            "(line 8328,col 5)-(line 8329,col 49)",
            "(line 8330,col 5)-(line 8331,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 8334,
        "end_line": 8343,
        "comment": "",
        "child_ranges": [
            "(line 8335,col 5)-(line 8342,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 8345,
        "end_line": 8358,
        "comment": "",
        "child_ranges": [
            "(line 8346,col 5)-(line 8349,col 47)",
            "(line 8351,col 5)-(line 8351,col 55)",
            "(line 8352,col 5)-(line 8352,col 47)",
            "(line 8353,col 5)-(line 8354,col 43)",
            "(line 8355,col 5)-(line 8355,col 53)",
            "(line 8356,col 5)-(line 8356,col 54)",
            "(line 8357,col 5)-(line 8357,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(OBJECT_TYPE, NULL_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 8360,
        "end_line": 8381,
        "comment": "",
        "child_ranges": [
            "(line 8361,col 5)-(line 8369,col 50)",
            "(line 8371,col 5)-(line 8371,col 55)",
            "(line 8372,col 5)-(line 8373,col 43)",
            "(line 8374,col 5)-(line 8374,col 53)",
            "(line 8375,col 5)-(line 8376,col 49)",
            "(line 8377,col 5)-(line 8377,col 54)",
            "(line 8378,col 5)-(line 8378,col 53)",
            "(line 8379,col 5)-(line 8379,col 53)",
            "(line 8380,col 5)-(line 8380,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertTypeEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8383,
        "end_line": 8386,
        "comment": "",
        "child_ranges": [
            "(line 8384,col 5)-(line 8384,col 53)",
            "(line 8385,col 5)-(line 8385,col 84)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertTypeEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8388,
        "end_line": 8395,
        "comment": "",
        "child_ranges": [
            "(line 8391,col 5)-(line 8393,col 41)",
            "(line 8394,col 5)-(line 8394,col 83)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertTypeEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8397,
        "end_line": 8408,
        "comment": "",
        "child_ranges": [
            "(line 8398,col 5)-(line 8405,col 70)",
            "(line 8406,col 5)-(line 8406,col 78)",
            "(line 8407,col 5)-(line 8407,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertTypeEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8410,
        "end_line": 8421,
        "comment": "",
        "child_ranges": [
            "(line 8411,col 5)-(line 8418,col 70)",
            "(line 8419,col 5)-(line 8419,col 64)",
            "(line 8420,col 5)-(line 8420,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertTypeEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 8423,
        "end_line": 8429,
        "comment": "",
        "child_ranges": [
            "(line 8424,col 5)-(line 8426,col 33)",
            "(line 8427,col 5)-(line 8427,col 62)",
            "(line 8428,col 5)-(line 8428,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertTypeEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 8431,
        "end_line": 8437,
        "comment": "",
        "child_ranges": [
            "(line 8432,col 5)-(line 8434,col 32)",
            "(line 8435,col 5)-(line 8435,col 62)",
            "(line 8436,col 5)-(line 8436,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8439,
        "end_line": 8444,
        "comment": "",
        "child_ranges": [
            "(line 8440,col 5)-(line 8443,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 8446,
        "end_line": 8452,
        "comment": "",
        "child_ranges": [
            "(line 8447,col 5)-(line 8451,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 8454,
        "end_line": 8462,
        "comment": "",
        "child_ranges": [
            "(line 8455,col 5)-(line 8461,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8464,
        "end_line": 8470,
        "comment": "",
        "child_ranges": [
            "(line 8465,col 5)-(line 8469,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 8472,
        "end_line": 8481,
        "comment": "",
        "child_ranges": [
            "(line 8473,col 5)-(line 8480,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8483,
        "end_line": 8490,
        "comment": "",
        "child_ranges": [
            "(line 8484,col 5)-(line 8489,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 8492,
        "end_line": 8499,
        "comment": "",
        "child_ranges": [
            "(line 8493,col 5)-(line 8498,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 8501,
        "end_line": 8508,
        "comment": "",
        "child_ranges": [
            "(line 8502,col 5)-(line 8507,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 8510,
        "end_line": 8517,
        "comment": "",
        "child_ranges": [
            "(line 8511,col 5)-(line 8516,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 8519,
        "end_line": 8527,
        "comment": "",
        "child_ranges": [
            "(line 8520,col 5)-(line 8526,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 8529,
        "end_line": 8541,
        "comment": "",
        "child_ranges": [
            "(line 8530,col 5)-(line 8540,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 8543,
        "end_line": 8551,
        "comment": "",
        "child_ranges": [
            "(line 8544,col 5)-(line 8550,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 8553,
        "end_line": 8562,
        "comment": "",
        "child_ranges": [
            "(line 8554,col 5)-(line 8561,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 8564,
        "end_line": 8577,
        "comment": "",
        "child_ranges": [
            "(line 8565,col 5)-(line 8576,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 8579,
        "end_line": 8590,
        "comment": "",
        "child_ranges": [
            "(line 8580,col 5)-(line 8589,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\");\n  }\n",
        "begin_line": 8592,
        "end_line": 8599,
        "comment": "",
        "child_ranges": [
            "(line 8593,col 5)-(line 8598,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 8601,
        "end_line": 8607,
        "comment": "",
        "child_ranges": [
            "(line 8602,col 5)-(line 8606,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testClosureTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 8609,
        "end_line": 8617,
        "comment": "",
        "child_ranges": [
            "(line 8610,col 5)-(line 8616,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck15()",
        "snippet": "  public void testInheritanceCheck15() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo;\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {number} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\");\n  }\n",
        "begin_line": 8619,
        "end_line": 8626,
        "comment": "",
        "child_ranges": [
            "(line 8620,col 5)-(line 8625,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck16()",
        "snippet": "  public void testInheritanceCheck16() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"/** @type {number} */ goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @type {number} */ goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 8628,
        "end_line": 8637,
        "comment": "",
        "child_ranges": [
            "(line 8629,col 5)-(line 8636,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck17()",
        "snippet": "  public void testInheritanceCheck17() throws Exception {\n    // Make sure this warning still works, even when there's no\n    // @override tag.\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"/** @param {number} x */ goog.Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @param {string} x */ goog.Sub.prototype.foo = function(x) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: function (this:goog.Super, number): undefined\\n\" +\n        \"override: function (this:goog.Sub, string): undefined\");\n  }\n",
        "begin_line": 8639,
        "end_line": 8653,
        "comment": "",
        "child_ranges": [
            "(line 8642,col 5)-(line 8642,col 44)",
            "(line 8643,col 5)-(line 8652,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyOverride1()",
        "snippet": "  public void testInterfacePropertyOverride1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Super} */function Sub() {};\" +\n        \"/** @desc description */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8655,
        "end_line": 8661,
        "comment": "",
        "child_ranges": [
            "(line 8656,col 5)-(line 8660,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyOverride2()",
        "snippet": "  public void testInterfacePropertyOverride2() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @desc description */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @interface\\n @extends {Super} */function Sub() {};\" +\n        \"/** @desc description */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8663,
        "end_line": 8670,
        "comment": "",
        "child_ranges": [
            "(line 8664,col 5)-(line 8669,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 8672,
        "end_line": 8680,
        "comment": "",
        "child_ranges": [
            "(line 8673,col 5)-(line 8679,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8682,
        "end_line": 8688,
        "comment": "",
        "child_ranges": [
            "(line 8683,col 5)-(line 8687,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 8690,
        "end_line": 8699,
        "comment": "",
        "child_ranges": [
            "(line 8691,col 5)-(line 8698,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 8701,
        "end_line": 8709,
        "comment": "",
        "child_ranges": [
            "(line 8702,col 5)-(line 8708,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 8711,
        "end_line": 8722,
        "comment": "",
        "child_ranges": [
            "(line 8712,col 5)-(line 8721,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 8724,
        "end_line": 8736,
        "comment": "",
        "child_ranges": [
            "(line 8725,col 5)-(line 8735,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 8738,
        "end_line": 8749,
        "comment": "",
        "child_ranges": [
            "(line 8739,col 5)-(line 8748,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 8751,
        "end_line": 8759,
        "comment": "",
        "child_ranges": [
            "(line 8752,col 5)-(line 8758,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck9()",
        "snippet": "  public void testInterfaceInheritanceCheck9() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.bar = function() {return 3; };\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8761,
        "end_line": 8774,
        "comment": "",
        "child_ranges": [
            "(line 8762,col 5)-(line 8773,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck10()",
        "snippet": "  public void testInterfaceInheritanceCheck10() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {number} \\n * @override */ \" +\n        \"G.prototype.bar = G.prototype.foo;\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8776,
        "end_line": 8790,
        "comment": "",
        "child_ranges": [
            "(line 8777,col 5)-(line 8789,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck12()",
        "snippet": "  public void testInterfaceInheritanceCheck12() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {};\\n\" +\n        \"/** @type {string} */ I.prototype.foobar;\\n\" +\n        \"/** \\n * @constructor \\n * @implements {I} */\\n\" +\n        \"function C() {\\n\" +\n        \"/** \\n * @type {number} */ this.foobar = 2;};\\n\" +\n        \"/** @type {I} */ \\n var test = new C(); alert(test.foobar);\",\n        \"mismatch of the foobar property type and the type of the property\" +\n        \" it overrides from interface I\\n\" +\n        \"original: string\\n\" +\n        \"override: number\");\n  }\n",
        "begin_line": 8792,
        "end_line": 8804,
        "comment": "",
        "child_ranges": [
            "(line 8793,col 5)-(line 8803,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck13()",
        "snippet": "  public void testInterfaceInheritanceCheck13() throws Exception {\n    testTypes(\n        \"function abstractMethod() {};\\n\" +\n        \"/** @interface */var base = function() {};\\n\" +\n        \"/** @extends {base} \\n @interface */ var Int = function() {}\\n\" +\n        \"/** @type {{bar : !Function}} */ var x; \\n\" +\n        \"/** @type {!Function} */ base.prototype.bar = abstractMethod; \\n\" +\n        \"/** @type {Int} */ var foo;\\n\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 8806,
        "end_line": 8815,
        "comment": "",
        "child_ranges": [
            "(line 8807,col 5)-(line 8814,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 8817,
        "end_line": 8823,
        "comment": "",
        "child_ranges": [
            "(line 8818,col 5)-(line 8822,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 8825,
        "end_line": 8832,
        "comment": "",
        "child_ranges": [
            "(line 8826,col 5)-(line 8831,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 8834,
        "end_line": 8843,
        "comment": "",
        "child_ranges": [
            "(line 8837,col 5)-(line 8842,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertTypeEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertTypeEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertTypeEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 8845,
        "end_line": 8863,
        "comment": "",
        "child_ranges": [
            "(line 8846,col 5)-(line 8846,col 63)",
            "(line 8848,col 5)-(line 8848,col 54)",
            "(line 8849,col 5)-(line 8849,col 47)",
            "(line 8852,col 5)-(line 8852,col 49)",
            "(line 8853,col 5)-(line 8853,col 56)",
            "(line 8856,col 5)-(line 8857,col 44)",
            "(line 8858,col 5)-(line 8858,col 68)",
            "(line 8859,col 5)-(line 8859,col 68)",
            "(line 8862,col 5)-(line 8862,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 8865,
        "end_line": 8872,
        "comment": "",
        "child_ranges": [
            "(line 8866,col 5)-(line 8871,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration2()",
        "snippet": "  public void testObjectLiteralDeclaration2() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @type {boolean} */ abc: true\" +\n        \"};\" +\n        \"x.abc = 0;\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 8874,
        "end_line": 8883,
        "comment": "",
        "child_ranges": [
            "(line 8875,col 5)-(line 8882,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration3()",
        "snippet": "  public void testObjectLiteralDeclaration3() throws Exception {\n    testTypes(\n        \"/** @param {{foo: !Function}} x */ function f(x) {}\" +\n        \"f({foo: function() {}});\");\n  }\n",
        "begin_line": 8885,
        "end_line": 8889,
        "comment": "",
        "child_ranges": [
            "(line 8886,col 5)-(line 8888,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration4()",
        "snippet": "  public void testObjectLiteralDeclaration4() throws Exception {\n    testClosureTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : function (string): undefined\\n\" +\n        \"required: function (boolean): undefined\");\n    // TODO(user): suppress {duplicate} currently also silence the\n    // redefining type error in the TypeValidator. Maybe it needs\n    // a new suppress name instead?\n  }\n",
        "begin_line": 8891,
        "end_line": 8906,
        "comment": "",
        "child_ranges": [
            "(line 8892,col 5)-(line 8902,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration5()",
        "snippet": "  public void testObjectLiteralDeclaration5() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\");\n  }\n",
        "begin_line": 8908,
        "end_line": 8917,
        "comment": "",
        "child_ranges": [
            "(line 8909,col 5)-(line 8916,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration6()",
        "snippet": "  public void testObjectLiteralDeclaration6() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 8919,
        "end_line": 8933,
        "comment": "",
        "child_ranges": [
            "(line 8920,col 5)-(line 8932,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration7()",
        "snippet": "  public void testObjectLiteralDeclaration7() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @type {function(boolean): undefined}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 8935,
        "end_line": 8948,
        "comment": "",
        "child_ranges": [
            "(line 8936,col 5)-(line 8947,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertTypeEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8950,
        "end_line": 8955,
        "comment": "",
        "child_ranges": [
            "(line 8953,col 5)-(line 8953,col 41)",
            "(line 8954,col 5)-(line 8954,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertTypeEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8960,
        "end_line": 8964,
        "comment": "",
        "child_ranges": [
            "(line 8961,col 5)-(line 8961,col 45)",
            "(line 8962,col 5)-(line 8963,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertTypeEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8966,
        "end_line": 8970,
        "comment": "",
        "child_ranges": [
            "(line 8967,col 5)-(line 8967,col 42)",
            "(line 8968,col 5)-(line 8969,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8972,
        "end_line": 8983,
        "comment": "",
        "child_ranges": [
            "(line 8973,col 5)-(line 8982,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 9016,
        "end_line": 9021,
        "comment": "",
        "child_ranges": [
            "(line 9019,col 5)-(line 9020,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 9023,
        "end_line": 9026,
        "comment": "",
        "child_ranges": [
            "(line 9024,col 5)-(line 9025,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 9028,
        "end_line": 9031,
        "comment": "",
        "child_ranges": [
            "(line 9029,col 5)-(line 9030,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 9033,
        "end_line": 9038,
        "comment": "",
        "child_ranges": [
            "(line 9034,col 5)-(line 9037,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 9052,
        "end_line": 9055,
        "comment": "",
        "child_ranges": [
            "(line 9053,col 5)-(line 9054,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 9057,
        "end_line": 9060,
        "comment": "",
        "child_ranges": [
            "(line 9058,col 5)-(line 9059,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface1()",
        "snippet": "  public void testDataPropertyOnInterface1() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\");\n  }\n",
        "begin_line": 9070,
        "end_line": 9073,
        "comment": "",
        "child_ranges": [
            "(line 9071,col 5)-(line 9072,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface2()",
        "snippet": "  public void testDataPropertyOnInterface2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 9075,
        "end_line": 9088,
        "comment": "",
        "child_ranges": [
            "(line 9076,col 5)-(line 9076,col 44)",
            "(line 9077,col 5)-(line 9087,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface3()",
        "snippet": "  public void testDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"/** @override */\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 9090,
        "end_line": 9103,
        "comment": "",
        "child_ranges": [
            "(line 9091,col 5)-(line 9102,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface4()",
        "snippet": "  public void testDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() { /** @type {string} */ \\n this.x = 'foo'; }\\n\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 9105,
        "end_line": 9116,
        "comment": "",
        "child_ranges": [
            "(line 9106,col 5)-(line 9115,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 9118,
        "end_line": 9123,
        "comment": "",
        "child_ranges": [
            "(line 9119,col 5)-(line 9122,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 9125,
        "end_line": 9130,
        "comment": "",
        "child_ranges": [
            "(line 9126,col 5)-(line 9129,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 9161,
        "end_line": 9166,
        "comment": "",
        "child_ranges": [
            "(line 9162,col 5)-(line 9165,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9168,
        "end_line": 9174,
        "comment": "",
        "child_ranges": [
            "(line 9169,col 5)-(line 9173,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        Lists.newArrayList(\n            \"assignment to property x of T.prototype\\n\" +\n            \"found   : number\\n\" +\n            \"required: function (this:T): number\",\n            \"interface members can only be empty property declarations, \" +\n            \"empty functions, or goog.abstractMethod\"));\n  }\n",
        "begin_line": 9176,
        "end_line": 9186,
        "comment": "",
        "child_ranges": [
            "(line 9177,col 5)-(line 9185,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 9188,
        "end_line": 9193,
        "comment": "",
        "child_ranges": [
            "(line 9189,col 5)-(line 9192,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 9195,
        "end_line": 9199,
        "comment": "",
        "child_ranges": [
            "(line 9196,col 5)-(line 9198,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 9201,
        "end_line": 9205,
        "comment": "",
        "child_ranges": [
            "(line 9202,col 5)-(line 9204,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 9207,
        "end_line": 9210,
        "comment": "",
        "child_ranges": [
            "(line 9208,col 5)-(line 9209,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 9212,
        "end_line": 9220,
        "comment": "",
        "child_ranges": [
            "(line 9213,col 5)-(line 9219,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplementsLoop()",
        "snippet": "  public void testImplementsLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @implements {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\"));\n  }\n",
        "begin_line": 9222,
        "end_line": 9229,
        "comment": "",
        "child_ranges": [
            "(line 9223,col 5)-(line 9228,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplementsExtendsLoop()",
        "snippet": "  public void testImplementsExtendsLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n            \"/** @constructor \\n * @implements {F} */var G = function() {};\" +\n            \"/** @constructor \\n * @extends {G} */var F = function() {};\" +\n        \"alert((new F).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type F\"));\n  }\n",
        "begin_line": 9231,
        "end_line": 9239,
        "comment": "",
        "child_ranges": [
            "(line 9232,col 5)-(line 9238,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtendsLoop()",
        "snippet": "  public void testInterfaceExtendsLoop() throws Exception {\n    // TODO(user): This should give a cycle in inheritance graph error,\n    // not a cannot resolve error.\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n            \"/** @interface \\n * @extends {F} */var G = function() {};\" +\n            \"/** @interface \\n * @extends {G} */var F = function() {};\",\n        Lists.newArrayList(\n            \"Could not resolve type in @extends tag of G\"));\n  }\n",
        "begin_line": 9241,
        "end_line": 9250,
        "comment": "",
        "child_ranges": [
            "(line 9244,col 5)-(line 9249,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConversionFromInterfaceToRecursiveConstructor()",
        "snippet": "  public void testConversionFromInterfaceToRecursiveConstructor()\n      throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n            \"/** @interface */ var OtherType = function() {}\\n\" +\n            \"/** @implements {MyType} \\n * @constructor */\\n\" +\n            \"var MyType = function() {}\\n\" +\n            \"/** @type {MyType} */\\n\" +\n            \"var x = /** @type {!OtherType} */ (new Object());\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type MyType\",\n            \"initializing variable\\n\" +\n            \"found   : OtherType\\n\" +\n            \"required: (MyType|null)\"));\n  }\n",
        "begin_line": 9252,
        "end_line": 9266,
        "comment": "",
        "child_ranges": [
            "(line 9254,col 5)-(line 9265,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    // For now, we just ignore @type annotations on the prototype.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\");\n  }\n",
        "begin_line": 9268,
        "end_line": 9274,
        "comment": "",
        "child_ranges": [
            "(line 9270,col 5)-(line 9273,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9279,
        "end_line": 9290,
        "comment": "",
        "child_ranges": [
            "(line 9280,col 5)-(line 9289,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9292,
        "end_line": 9304,
        "comment": "",
        "child_ranges": [
            "(line 9293,col 5)-(line 9303,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9306,
        "end_line": 9317,
        "comment": "",
        "child_ranges": [
            "(line 9307,col 5)-(line 9316,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 9319,
        "end_line": 9329,
        "comment": "",
        "child_ranges": [
            "(line 9320,col 5)-(line 9328,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 9331,
        "end_line": 9338,
        "comment": "",
        "child_ranges": [
            "(line 9332,col 5)-(line 9332,col 79)",
            "(line 9333,col 5)-(line 9333,col 62)",
            "(line 9334,col 5)-(line 9334,col 38)",
            "(line 9335,col 5)-(line 9335,col 45)",
            "(line 9336,col 5)-(line 9337,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    Asserts.assertTypeCollectionEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 9340,
        "end_line": 9351,
        "comment": "",
        "child_ranges": [
            "(line 9341,col 5)-(line 9342,col 43)",
            "(line 9343,col 5)-(line 9343,col 62)",
            "(line 9344,col 5)-(line 9344,col 38)",
            "(line 9345,col 5)-(line 9345,col 43)",
            "(line 9346,col 5)-(line 9346,col 46)",
            "(line 9347,col 5)-(line 9347,col 45)",
            "(line 9348,col 5)-(line 9350,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTypeEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    Asserts.assertTypeCollectionEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 9353,
        "end_line": 9367,
        "comment": "",
        "child_ranges": [
            "(line 9354,col 5)-(line 9355,col 75)",
            "(line 9356,col 5)-(line 9356,col 21)",
            "(line 9357,col 5)-(line 9357,col 23)",
            "(line 9358,col 5)-(line 9358,col 62)",
            "(line 9359,col 5)-(line 9359,col 38)",
            "(line 9360,col 5)-(line 9360,col 40)",
            "(line 9361,col 5)-(line 9361,col 43)",
            "(line 9362,col 5)-(line 9362,col 46)",
            "(line 9363,col 5)-(line 9363,col 45)",
            "(line 9364,col 5)-(line 9366,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 9369,
        "end_line": 9372,
        "comment": "",
        "child_ranges": [
            "(line 9370,col 5)-(line 9371,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 9374,
        "end_line": 9376,
        "comment": "",
        "child_ranges": [
            "(line 9375,col 5)-(line 9375,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 9378,
        "end_line": 9382,
        "comment": "",
        "child_ranges": [
            "(line 9379,col 5)-(line 9381,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 9384,
        "end_line": 9389,
        "comment": "",
        "child_ranges": [
            "(line 9385,col 5)-(line 9388,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 9391,
        "end_line": 9395,
        "comment": "",
        "child_ranges": [
            "(line 9392,col 5)-(line 9394,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 9397,
        "end_line": 9401,
        "comment": "",
        "child_ranges": [
            "(line 9398,col 5)-(line 9400,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 9403,
        "end_line": 9407,
        "comment": "",
        "child_ranges": [
            "(line 9404,col 5)-(line 9406,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 9409,
        "end_line": 9415,
        "comment": "",
        "child_ranges": [
            "(line 9410,col 5)-(line 9414,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 9417,
        "end_line": 9423,
        "comment": "",
        "child_ranges": [
            "(line 9418,col 5)-(line 9422,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 9425,
        "end_line": 9431,
        "comment": "",
        "child_ranges": [
            "(line 9426,col 5)-(line 9430,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 9433,
        "end_line": 9441,
        "comment": "",
        "child_ranges": [
            "(line 9434,col 5)-(line 9440,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 9443,
        "end_line": 9447,
        "comment": "",
        "child_ranges": [
            "(line 9444,col 5)-(line 9446,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9449,
        "end_line": 9460,
        "comment": "",
        "child_ranges": [
            "(line 9450,col 5)-(line 9459,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 9462,
        "end_line": 9473,
        "comment": "",
        "child_ranges": [
            "(line 9463,col 5)-(line 9472,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 9475,
        "end_line": 9481,
        "comment": "",
        "child_ranges": [
            "(line 9476,col 5)-(line 9480,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 9483,
        "end_line": 9489,
        "comment": "",
        "child_ranges": [
            "(line 9484,col 5)-(line 9488,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 9491,
        "end_line": 9496,
        "comment": "",
        "child_ranges": [
            "(line 9492,col 5)-(line 9495,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 9498,
        "end_line": 9503,
        "comment": "",
        "child_ranges": [
            "(line 9499,col 5)-(line 9502,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9505,
        "end_line": 9515,
        "comment": "",
        "child_ranges": [
            "(line 9506,col 5)-(line 9514,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 9517,
        "end_line": 9525,
        "comment": "",
        "child_ranges": [
            "(line 9518,col 5)-(line 9524,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|string)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 9527,
        "end_line": 9538,
        "comment": "",
        "child_ranges": [
            "(line 9528,col 5)-(line 9537,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry1()",
        "snippet": "  public void testTypeInferenceWithNoEntry1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function SubFoo() {}\" +\n        \"/** Method */\" +\n        \"SubFoo.prototype.method = function() {\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(this.bar);\" +\n        \"    f(this.bar.baz);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{baz: number})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9540,
        "end_line": 9562,
        "comment": "",
        "child_ranges": [
            "(line 9541,col 5)-(line 9561,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry2()",
        "snippet": "  public void testTypeInferenceWithNoEntry2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @param {!Object} x */ function g(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function SubFoo() {}\" +\n        \"/** Method */\" +\n        \"SubFoo.prototype.method = function() {\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(this.bar);\" +\n        \"    goog.asserts.assert(this.bar);\" +\n        \"    g(this.bar);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{baz: number})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9564,
        "end_line": 9589,
        "comment": "",
        "child_ranges": [
            "(line 9565,col 5)-(line 9588,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9591,
        "end_line": 9604,
        "comment": "",
        "child_ranges": [
            "(line 9592,col 5)-(line 9603,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 9606,
        "end_line": 9610,
        "comment": "",
        "child_ranges": [
            "(line 9607,col 5)-(line 9609,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 9612,
        "end_line": 9614,
        "comment": "",
        "child_ranges": [
            "(line 9613,col 5)-(line 9613,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 9616,
        "end_line": 9625,
        "comment": "",
        "child_ranges": [
            "(line 9617,col 5)-(line 9624,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 9627,
        "end_line": 9635,
        "comment": "",
        "child_ranges": [
            "(line 9628,col 5)-(line 9629,col 53)",
            "(line 9630,col 5)-(line 9630,col 30)",
            "(line 9631,col 5)-(line 9634,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 9637,
        "end_line": 9646,
        "comment": "",
        "child_ranges": [
            "(line 9638,col 5)-(line 9645,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration4()",
        "snippet": "  public void testForwardTypeDeclaration4() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(new MyType());\",\n        null);\n  }\n",
        "begin_line": 9648,
        "end_line": 9655,
        "comment": "",
        "child_ranges": [
            "(line 9649,col 5)-(line 9654,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration5()",
        "snippet": "  public void testForwardTypeDeclaration5() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        \"Could not resolve type in @extends tag of YourType\");\n  }\n",
        "begin_line": 9657,
        "end_line": 9666,
        "comment": "",
        "child_ranges": [
            "(line 9658,col 5)-(line 9665,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration6()",
        "snippet": "  public void testForwardTypeDeclaration6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        Lists.newArrayList(\n            \"Could not resolve type in @implements tag of YourType\",\n            \"property method not defined on any superclass of YourType\"));\n  }\n",
        "begin_line": 9668,
        "end_line": 9679,
        "comment": "",
        "child_ranges": [
            "(line 9669,col 5)-(line 9678,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration7()",
        "snippet": "  public void testForwardTypeDeclaration7() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType=} x */\" +\n        \"function f(x) { return x == undefined; }\", null);\n  }\n",
        "begin_line": 9681,
        "end_line": 9686,
        "comment": "",
        "child_ranges": [
            "(line 9682,col 5)-(line 9685,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration8()",
        "snippet": "  public void testForwardTypeDeclaration8() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { return x.name == undefined; }\", null);\n  }\n",
        "begin_line": 9688,
        "end_line": 9693,
        "comment": "",
        "child_ranges": [
            "(line 9689,col 5)-(line 9692,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration9()",
        "snippet": "  public void testForwardTypeDeclaration9() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { x.name = 'Bob'; }\", null);\n  }\n",
        "begin_line": 9695,
        "end_line": 9700,
        "comment": "",
        "child_ranges": [
            "(line 9696,col 5)-(line 9699,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration10()",
        "snippet": "  public void testForwardTypeDeclaration10() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType|number} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\", null);\n    testClosureTypes(f + \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: (MyType|null|number)\");\n  }\n",
        "begin_line": 9702,
        "end_line": 9711,
        "comment": "",
        "child_ranges": [
            "(line 9703,col 5)-(line 9704,col 60)",
            "(line 9705,col 5)-(line 9705,col 30)",
            "(line 9706,col 5)-(line 9706,col 40)",
            "(line 9707,col 5)-(line 9710,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration12()",
        "snippet": "  public void testForwardTypeDeclaration12() throws Exception {\n    // We assume that {Function} types can produce anything, and don't\n    // want to type-check them.\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @param {!Function} ctor\\n\" +\n        \" * @return {MyType}\\n\" +\n        \" */\\n\" +\n        \"function f(ctor) { return new ctor(); }\", null);\n  }\n",
        "begin_line": 9713,
        "end_line": 9723,
        "comment": "",
        "child_ranges": [
            "(line 9716,col 5)-(line 9722,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration13()",
        "snippet": "  public void testForwardTypeDeclaration13() throws Exception {\n    // Some projects use {Function} registries to register constructors\n    // that aren't in their binaries. We want to make sure we can pass these\n    // around, but still do other checks on them.\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @param {!Function} ctor\\n\" +\n        \" * @return {MyType}\\n\" +\n        \" */\\n\" +\n        \"function f(ctor) { return (new ctor()).impossibleProp; }\",\n        \"Property impossibleProp never defined on ?\");\n  }\n",
        "begin_line": 9725,
        "end_line": 9737,
        "comment": "",
        "child_ranges": [
            "(line 9729,col 5)-(line 9736,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 9739,
        "end_line": 9747,
        "comment": "",
        "child_ranges": [
            "(line 9740,col 5)-(line 9746,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 9749,
        "end_line": 9755,
        "comment": "",
        "child_ranges": [
            "(line 9750,col 5)-(line 9754,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9757,
        "end_line": 9766,
        "comment": "",
        "child_ranges": [
            "(line 9758,col 5)-(line 9765,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9768,
        "end_line": 9777,
        "comment": "",
        "child_ranges": [
            "(line 9769,col 5)-(line 9776,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef4()",
        "snippet": "  public void testTypeDef4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 9779,
        "end_line": 9789,
        "comment": "",
        "child_ranges": [
            "(line 9780,col 5)-(line 9788,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef5()",
        "snippet": "  public void testTypeDef5() throws Exception {\n    // Notice that the error message is slightly different than\n    // the one for testTypeDef4, even though they should be the same.\n    // This is an implementation detail necessary for NamedTypes work out\n    // OK, and it should change if NamedTypes ever go away.\n    testTypes(\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 9791,
        "end_line": 9805,
        "comment": "",
        "child_ranges": [
            "(line 9796,col 5)-(line 9804,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 9807,
        "end_line": 9813,
        "comment": "",
        "child_ranges": [
            "(line 9808,col 5)-(line 9812,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9815,
        "end_line": 9819,
        "comment": "",
        "child_ranges": [
            "(line 9816,col 5)-(line 9817,col 58)",
            "(line 9818,col 5)-(line 9818,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9821,
        "end_line": 9824,
        "comment": "",
        "child_ranges": [
            "(line 9822,col 5)-(line 9822,col 39)",
            "(line 9823,col 5)-(line 9823,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9826,
        "end_line": 9829,
        "comment": "",
        "child_ranges": [
            "(line 9827,col 5)-(line 9827,col 53)",
            "(line 9828,col 5)-(line 9828,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9831,
        "end_line": 9835,
        "comment": "",
        "child_ranges": [
            "(line 9832,col 5)-(line 9833,col 46)",
            "(line 9834,col 5)-(line 9834,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent5()",
        "snippet": "  public void testGetTypedPercent5() throws Exception {\n    String js = \"/** @enum {number} */ keys = {A: 1,B: 2,C: 3};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9837,
        "end_line": 9840,
        "comment": "",
        "child_ranges": [
            "(line 9838,col 5)-(line 9838,col 65)",
            "(line 9839,col 5)-(line 9839,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent6()",
        "snippet": "  public void testGetTypedPercent6() throws Exception {\n    String js = \"a = {TRUE: 1, FALSE: 0};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9842,
        "end_line": 9845,
        "comment": "",
        "child_ranges": [
            "(line 9843,col 5)-(line 9843,col 43)",
            "(line 9844,col 5)-(line 9844,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 9847,
        "end_line": 9857,
        "comment": "",
        "child_ranges": [
            "(line 9848,col 5)-(line 9848,col 40)",
            "(line 9850,col 5)-(line 9850,col 41)",
            "(line 9851,col 5)-(line 9851,col 61)",
            "(line 9852,col 5)-(line 9852,col 46)",
            "(line 9854,col 5)-(line 9854,col 34)",
            "(line 9855,col 5)-(line 9855,col 33)",
            "(line 9856,col 5)-(line 9856,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 9859,
        "end_line": 9866,
        "comment": "",
        "child_ranges": [
            "(line 9860,col 5)-(line 9860,col 54)",
            "(line 9861,col 5)-(line 9861,col 24)",
            "(line 9862,col 5)-(line 9862,col 45)",
            "(line 9863,col 5)-(line 9863,col 52)",
            "(line 9864,col 5)-(line 9864,col 45)",
            "(line 9865,col 5)-(line 9865,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 9868,
        "end_line": 9885,
        "comment": "",
        "child_ranges": [
            "(line 9869,col 5)-(line 9877,col 15)",
            "(line 9878,col 5)-(line 9878,col 46)",
            "(line 9879,col 5)-(line 9879,col 48)",
            "(line 9881,col 5)-(line 9881,col 72)",
            "(line 9882,col 5)-(line 9882,col 74)",
            "(line 9883,col 5)-(line 9884,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9887,
        "end_line": 9903,
        "comment": "",
        "child_ranges": [
            "(line 9888,col 5)-(line 9901,col 37)",
            "(line 9902,col 5)-(line 9902,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 9905,
        "end_line": 9910,
        "comment": "",
        "child_ranges": [
            "(line 9906,col 5)-(line 9909,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 9912,
        "end_line": 9918,
        "comment": "",
        "child_ranges": [
            "(line 9913,col 5)-(line 9917,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 9920,
        "end_line": 9925,
        "comment": "",
        "child_ranges": [
            "(line 9921,col 5)-(line 9924,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 9927,
        "end_line": 9933,
        "comment": "",
        "child_ranges": [
            "(line 9928,col 5)-(line 9932,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 9935,
        "end_line": 9941,
        "comment": "",
        "child_ranges": [
            "(line 9936,col 5)-(line 9940,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 9943,
        "end_line": 9949,
        "comment": "",
        "child_ranges": [
            "(line 9944,col 5)-(line 9948,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 9951,
        "end_line": 9956,
        "comment": "",
        "child_ranges": [
            "(line 9952,col 5)-(line 9955,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 9958,
        "end_line": 9962,
        "comment": "",
        "child_ranges": [
            "(line 9959,col 5)-(line 9961,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 9964,
        "end_line": 9968,
        "comment": "",
        "child_ranges": [
            "(line 9965,col 5)-(line 9967,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 9970,
        "end_line": 9974,
        "comment": "",
        "child_ranges": [
            "(line 9971,col 5)-(line 9973,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 9976,
        "end_line": 9980,
        "comment": "",
        "child_ranges": [
            "(line 9977,col 5)-(line 9979,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 9982,
        "end_line": 9986,
        "comment": "",
        "child_ranges": [
            "(line 9983,col 5)-(line 9985,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 9988,
        "end_line": 9993,
        "comment": "",
        "child_ranges": [
            "(line 9989,col 5)-(line 9992,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 9995,
        "end_line": 10001,
        "comment": "",
        "child_ranges": [
            "(line 9996,col 5)-(line 10000,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 10003,
        "end_line": 10007,
        "comment": "",
        "child_ranges": [
            "(line 10004,col 5)-(line 10006,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 10009,
        "end_line": 10014,
        "comment": "",
        "child_ranges": [
            "(line 10010,col 5)-(line 10013,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 10016,
        "end_line": 10020,
        "comment": "",
        "child_ranges": [
            "(line 10017,col 5)-(line 10019,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 10022,
        "end_line": 10026,
        "comment": "",
        "child_ranges": [
            "(line 10023,col 5)-(line 10025,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 10028,
        "end_line": 10033,
        "comment": "",
        "child_ranges": [
            "(line 10029,col 5)-(line 10032,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 10035,
        "end_line": 10040,
        "comment": "",
        "child_ranges": [
            "(line 10036,col 5)-(line 10039,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 10042,
        "end_line": 10046,
        "comment": "",
        "child_ranges": [
            "(line 10043,col 5)-(line 10045,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 10048,
        "end_line": 10052,
        "comment": "",
        "child_ranges": [
            "(line 10049,col 5)-(line 10051,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 10054,
        "end_line": 10058,
        "comment": "",
        "child_ranges": [
            "(line 10055,col 5)-(line 10057,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 10060,
        "end_line": 10065,
        "comment": "",
        "child_ranges": [
            "(line 10061,col 5)-(line 10064,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 10067,
        "end_line": 10073,
        "comment": "",
        "child_ranges": [
            "(line 10068,col 5)-(line 10072,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 10075,
        "end_line": 10081,
        "comment": "",
        "child_ranges": [
            "(line 10076,col 5)-(line 10080,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 10083,
        "end_line": 10090,
        "comment": "",
        "child_ranges": [
            "(line 10084,col 5)-(line 10089,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 10092,
        "end_line": 10104,
        "comment": "",
        "child_ranges": [
            "(line 10093,col 5)-(line 10097,col 13)",
            "(line 10098,col 5)-(line 10103,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 10106,
        "end_line": 10116,
        "comment": "",
        "child_ranges": [
            "(line 10108,col 5)-(line 10115,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty30()",
        "snippet": "  public void testMissingProperty30() throws Exception {\n    testTypes(\n        \"/** @return {*} */\" +\n        \"function f() {\" +\n        \" return {};\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Object} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 10118,
        "end_line": 10126,
        "comment": "",
        "child_ranges": [
            "(line 10119,col 5)-(line 10125,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty31()",
        "snippet": "  public void testMissingProperty31() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Array} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 10128,
        "end_line": 10136,
        "comment": "",
        "child_ranges": [
            "(line 10129,col 5)-(line 10135,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty32()",
        "snippet": "  public void testMissingProperty32() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Date} y */ function g(y) { return y.a; }\",\n        \"Property a never defined on Date\");\n  }\n",
        "begin_line": 10138,
        "end_line": 10147,
        "comment": "",
        "child_ranges": [
            "(line 10139,col 5)-(line 10146,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty33()",
        "snippet": "  public void testMissingProperty33() throws Exception {\n    testTypes(\n      \"/** @param {Object} x */\" +\n      \"function f(x) { !x.foo || x.foo(); }\");\n  }\n",
        "begin_line": 10149,
        "end_line": 10153,
        "comment": "",
        "child_ranges": [
            "(line 10150,col 5)-(line 10152,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty34()",
        "snippet": "  public void testMissingProperty34() throws Exception {\n    testTypes(\n        \"/** @fileoverview \\n * @suppress {missingProperties} */\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\");\n  }\n",
        "begin_line": 10155,
        "end_line": 10161,
        "comment": "",
        "child_ranges": [
            "(line 10156,col 5)-(line 10160,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty35()",
        "snippet": "  public void testMissingProperty35() throws Exception {\n    // Bar has specialProp defined, so Bar|Baz may have specialProp defined.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @constructor */ function Baz() {}\" +\n        \"/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }\" +\n        \"/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }\");\n  }\n",
        "begin_line": 10163,
        "end_line": 10171,
        "comment": "",
        "child_ranges": [
            "(line 10165,col 5)-(line 10170,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty36()",
        "snippet": "  public void testMissingProperty36() throws Exception {\n    // Foo has baz defined, and SubFoo has bar defined, so some objects with\n    // bar may have baz.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.baz = 0;\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 0;\" +\n        \"/** @param {{bar: number}} x */ function f(x) { return x.baz; }\");\n  }\n",
        "begin_line": 10173,
        "end_line": 10182,
        "comment": "",
        "child_ranges": [
            "(line 10176,col 5)-(line 10181,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty37()",
        "snippet": "  public void testMissingProperty37() throws Exception {\n    // This used to emit a missing property warning because we couldn't\n    // determine that the inf(Foo, {isVisible:boolean}) == SubFoo.\n    testTypes(\n        \"/** @param {{isVisible: boolean}} x */ function f(x){\" +\n        \"  x.isVisible = false;\" +\n        \"}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @type {boolean} */ SubFoo.prototype.isVisible = true;\" +\n        \"/**\\n\" +\n        \" * @param {Foo} x\\n\" +\n        \" * @return {boolean}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return x.isVisible; }\");\n  }\n",
        "begin_line": 10184,
        "end_line": 10202,
        "comment": "",
        "child_ranges": [
            "(line 10187,col 5)-(line 10201,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty38()",
        "snippet": "  public void testMissingProperty38() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @return {Foo|Bar} */ function f() { return new Foo(); }\" +\n        \"f().missing;\",\n        \"Property missing never defined on (Bar|Foo|null)\");\n  }\n",
        "begin_line": 10204,
        "end_line": 10211,
        "comment": "",
        "child_ranges": [
            "(line 10205,col 5)-(line 10210,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty39()",
        "snippet": "  public void testMissingProperty39() throws Exception {\n    testTypes(\n        \"/** @return {string|number} */ function f() { return 3; }\" +\n        \"f().length;\");\n  }\n",
        "begin_line": 10213,
        "end_line": 10217,
        "comment": "",
        "child_ranges": [
            "(line 10214,col 5)-(line 10216,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty40()",
        "snippet": "  public void testMissingProperty40() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {(Array|MissingType)} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 10219,
        "end_line": 10224,
        "comment": "",
        "child_ranges": [
            "(line 10220,col 5)-(line 10223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty41()",
        "snippet": "  public void testMissingProperty41() throws Exception {\n    testTypes(\n        \"/** @param {(Array|Date)} x */\" +\n        \"function f(x) { if (x.impossible) x.impossible(); }\");\n  }\n",
        "begin_line": 10226,
        "end_line": 10230,
        "comment": "",
        "child_ranges": [
            "(line 10227,col 5)-(line 10229,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty42()",
        "snippet": "  public void testMissingProperty42() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { \" +\n        \"  if (typeof x.impossible == 'undefined') throw Error();\" +\n        \"  return x.impossible;\" +\n        \"}\");\n  }\n",
        "begin_line": 10233,
        "end_line": 10240,
        "comment": "",
        "child_ranges": [
            "(line 10234,col 5)-(line 10239,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject1()",
        "snippet": "  public void testReflectObject1() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: 3});\",\n        null);\n  }\n",
        "begin_line": 10242,
        "end_line": 10249,
        "comment": "",
        "child_ranges": [
            "(line 10243,col 5)-(line 10248,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject2()",
        "snippet": "  public void testReflectObject2() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: f(1 + 1)});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10251,
        "end_line": 10261,
        "comment": "",
        "child_ranges": [
            "(line 10252,col 5)-(line 10260,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends1()",
        "snippet": "  public void testLends1() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends */ ({bar: 1}));\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 10263,
        "end_line": 10269,
        "comment": "",
        "child_ranges": [
            "(line 10264,col 5)-(line 10268,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends2()",
        "snippet": "  public void testLends2() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foob} */ ({bar: 1}));\",\n        \"Variable Foob not declared before @lends annotation.\");\n  }\n",
        "begin_line": 10271,
        "end_line": 10277,
        "comment": "",
        "child_ranges": [
            "(line 10272,col 5)-(line 10276,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends3()",
        "snippet": "  public void testLends3() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert(Foo.bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 10279,
        "end_line": 10286,
        "comment": "",
        "child_ranges": [
            "(line 10280,col 5)-(line 10285,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends4()",
        "snippet": "  public void testLends4() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\" +\n        \"alert(Foo.bar);\");\n  }\n",
        "begin_line": 10288,
        "end_line": 10294,
        "comment": "",
        "child_ranges": [
            "(line 10289,col 5)-(line 10293,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends5()",
        "snippet": "  public void testLends5() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert((new Foo()).bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 10296,
        "end_line": 10303,
        "comment": "",
        "child_ranges": [
            "(line 10297,col 5)-(line 10302,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends6()",
        "snippet": "  public void testLends6() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype} */ ({bar: 1}));\" +\n        \"alert((new Foo()).bar);\");\n  }\n",
        "begin_line": 10305,
        "end_line": 10311,
        "comment": "",
        "child_ranges": [
            "(line 10306,col 5)-(line 10310,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends7()",
        "snippet": "  public void testLends7() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype|Foo} */ ({bar: 1}));\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 10313,
        "end_line": 10319,
        "comment": "",
        "child_ranges": [
            "(line 10314,col 5)-(line 10318,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends8()",
        "snippet": "  public void testLends8() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @type {number} */ var Foo = 3;\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\",\n        \"May only lend properties to object types. Foo has type number.\");\n  }\n",
        "begin_line": 10321,
        "end_line": 10327,
        "comment": "",
        "child_ranges": [
            "(line 10322,col 5)-(line 10326,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends9()",
        "snippet": "  public void testLends9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {!Foo} */ ({bar: 1}));\",\n        Lists.newArrayList(\n            \"Bad type annotation. expected closing }\",\n            \"Bad type annotation. missing object name in @lends tag\"));\n  }\n",
        "begin_line": 10329,
        "end_line": 10337,
        "comment": "",
        "child_ranges": [
            "(line 10330,col 5)-(line 10336,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends10()",
        "snippet": "  public void testLends10() throws Exception {\n    testTypes(\n        \"function defineClass(x) { return function() {}; } \" +\n        \"/** @constructor */\" +\n        \"var Foo = defineClass(\" +\n        \"    /** @lends {Foo.prototype} */ ({/** @type {number} */ bar: 1}));\" +\n        \"/** @return {string} */ function f() { return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10339,
        "end_line": 10349,
        "comment": "",
        "child_ranges": [
            "(line 10340,col 5)-(line 10348,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends11()",
        "snippet": "  public void testLends11() throws Exception {\n    testTypes(\n        \"function defineClass(x, y) { return function() {}; } \" +\n        \"/** @constructor */\" +\n        \"var Foo = function() {};\" +\n        \"/** @return {*} */ Foo.prototype.bar = function() { return 3; };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"var SubFoo = defineClass(Foo, \" +\n        \"    /** @lends {SubFoo.prototype} */ ({\\n\" +\n        \"      /** @return {number} */ bar: function() { return 3; }}));\" +\n        \"/** @return {string} */ function f() { return (new SubFoo()).bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10351,
        "end_line": 10368,
        "comment": "",
        "child_ranges": [
            "(line 10352,col 5)-(line 10367,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertTypeEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 10370,
        "end_line": 10374,
        "comment": "",
        "child_ranges": [
            "(line 10371,col 5)-(line 10371,col 76)",
            "(line 10372,col 5)-(line 10373,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertTypeEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 10376,
        "end_line": 10380,
        "comment": "",
        "child_ranges": [
            "(line 10377,col 5)-(line 10377,col 49)",
            "(line 10378,col 5)-(line 10379,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertTypeEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 10382,
        "end_line": 10394,
        "comment": "",
        "child_ranges": [
            "(line 10383,col 5)-(line 10388,col 42)",
            "(line 10391,col 5)-(line 10393,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertTypeEquals(registry.createNullableType(registry.getType(\"Foo\")),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 10396,
        "end_line": 10415,
        "comment": "",
        "child_ranges": [
            "(line 10397,col 5)-(line 10409,col 15)",
            "(line 10412,col 5)-(line 10414,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 10417,
        "end_line": 10425,
        "comment": "",
        "child_ranges": [
            "(line 10418,col 5)-(line 10420,col 41)",
            "(line 10421,col 5)-(line 10421,col 62)",
            "(line 10422,col 5)-(line 10423,col 53)",
            "(line 10424,col 5)-(line 10424,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(\n        new TypedScopeCreator(compiler));\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 10427,
        "end_line": 10450,
        "comment": "",
        "child_ranges": [
            "(line 10428,col 5)-(line 10428,col 58)",
            "(line 10429,col 5)-(line 10429,col 17)",
            "(line 10430,col 5)-(line 10431,col 41)",
            "(line 10432,col 5)-(line 10432,col 55)",
            "(line 10434,col 5)-(line 10434,col 52)",
            "(line 10436,col 5)-(line 10436,col 41)",
            "(line 10437,col 5)-(line 10437,col 66)",
            "(line 10438,col 5)-(line 10438,col 46)",
            "(line 10440,col 5)-(line 10445,col 31)",
            "(line 10447,col 5)-(line 10447,col 48)",
            "(line 10448,col 5)-(line 10449,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUpdateParameterTypeOnClosure()",
        "snippet": "  public void testUpdateParameterTypeOnClosure() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {*=} opt_value\\n\" +\n        \"* @return {?}\\n\" +\n        \"*/\\n\" +\n        \"function Object(opt_value) {}\\n\" +\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {...*} var_args\\n\" +\n        \"*/\\n\" +\n        \"function Function(var_args) {}\\n\" +\n        \"/**\\n\" +\n        \"* @type {Function}\\n\" +\n        \"*/\\n\" +\n        // The line below sets JSDocInfo on Object so that the type of the\n        // argument to function f has JSDoc through its prototype chain.\n        \"Object.prototype.constructor = function() {};\\n\",\n        \"/**\\n\" +\n        \"* @param {function(): boolean} fn\\n\" +\n        \"*/\\n\" +\n        \"function f(fn) {}\\n\" +\n        \"f(function(g) { });\\n\",\n        null,\n        false);\n  }\n",
        "begin_line": 10452,
        "end_line": 10478,
        "comment": "",
        "child_ranges": [
            "(line 10453,col 5)-(line 10477,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplatedThisType1()",
        "snippet": "  public void testTemplatedThisType1() throws Exception {\n    testTypes(\n        \"/** @constructor */\\n\" +\n        \"function Foo() {}\\n\" +\n        \"/**\\n\" +\n        \" * @this {T}\\n\" +\n        \" * @return {T}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"Foo.prototype.method = function() {};\\n\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {}\\n\" +\n        \"var g = new Bar().method();\\n\" +\n        \"/**\\n\" +\n        \" * @param {number} a\\n\" +\n        \" */\\n\" +\n        \"function compute(a) {};\\n\" +\n        \"compute(g);\\n\",\n\n        \"actual parameter 1 of compute does not match formal parameter\\n\" +\n        \"found   : Bar\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 10480,
        "end_line": 10505,
        "comment": "",
        "child_ranges": [
            "(line 10481,col 5)-(line 10504,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplatedThisType2()",
        "snippet": "  public void testTemplatedThisType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @this {Array.<T>|{length:number}}\\n\" +\n        \" * @return {T}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"Array.prototype.method = function() {};\\n\" +\n        \"(function(){\\n\" +\n        \"  Array.prototype.method.call(arguments);\" +\n        \"})();\");\n  }\n",
        "begin_line": 10507,
        "end_line": 10518,
        "comment": "",
        "child_ranges": [
            "(line 10508,col 5)-(line 10517,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType1()",
        "snippet": "  public void testTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() { this });\");\n  }\n",
        "begin_line": 10520,
        "end_line": 10530,
        "comment": "",
        "child_ranges": [
            "(line 10521,col 5)-(line 10529,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType2()",
        "snippet": "  public void testTemplateType2() throws Exception {\n    // \"this\" types need to be coerced for ES3 style function or left\n    // allow for ES5-strict methods.\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\");\n  }\n",
        "begin_line": 10532,
        "end_line": 10543,
        "comment": "",
        "child_ranges": [
            "(line 10535,col 5)-(line 10542,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType3()",
        "snippet": "  public void testTemplateType3() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {T} v\\n\" +\n        \" * @param {function(T)} f\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"function call(v, f) { f.call(null, v); }\" +\n        \"/** @type {string} */ var s;\" +\n        \"call(3, function(x) {\" +\n        \" x = true;\" +\n        \" s = x;\" +\n        \"});\",\n        \"assignment\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10545,
        "end_line": 10561,
        "comment": "",
        "child_ranges": [
            "(line 10546,col 5)-(line 10560,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType4()",
        "snippet": "  public void testTemplateType4() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {...T} p\\n\" +\n        \" * @return {T} \\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"function fn(p) { return p; }\\n\" +\n        \"/** @type {!Object} */ var x;\" +\n        \"x = fn(3, null);\",\n        \"assignment\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 10563,
        "end_line": 10576,
        "comment": "",
        "child_ranges": [
            "(line 10564,col 5)-(line 10575,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType5()",
        "snippet": "  public void testTemplateType5() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array.<T>} arr \\n\" +\n        \" * @param {?function(T)} f \\n\" +\n        \" * @return {T} \\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"function fn(arr, f) { return arr[0]; }\\n\" +\n        \"/** @param {Array.<number>} arr */ function g(arr) {\" +\n        \"  /** @type {!Object} */ var x = fn.call(null, arr, null);\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 10578,
        "end_line": 10593,
        "comment": "",
        "child_ranges": [
            "(line 10579,col 5)-(line 10592,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testBadTemplateType4()",
        "snippet": "  public void disable_testBadTemplateType4() throws Exception {\n    // TODO(johnlenz): Add a check for useless of template types.\n    // Unless there are at least two references to a Template type in\n    // a definition it isn't useful.\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 10595,
        "end_line": 10606,
        "comment": "",
        "child_ranges": [
            "(line 10599,col 5)-(line 10605,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testBadTemplateType5()",
        "snippet": "  public void disable_testBadTemplateType5() throws Exception {\n    // TODO(johnlenz): Add a check for useless of template types.\n    // Unless there are at least two references to a Template type in\n    // a definition it isn't useful.\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 10608,
        "end_line": 10620,
        "comment": "",
        "child_ranges": [
            "(line 10612,col 5)-(line 10619,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testFunctionLiteralUndefinedThisArgument()",
        "snippet": "  public void disable_testFunctionLiteralUndefinedThisArgument()\n      throws Exception {\n    // TODO(johnlenz): this was a weird error.  We should add a general\n    // restriction on what is accepted for T. Something like:\n    // \"@template T of {Object|string}\" or some such.\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; });\",\n        \"Function literal argument refers to undefined this argument\");\n  }\n",
        "begin_line": 10622,
        "end_line": 10636,
        "comment": "",
        "child_ranges": [
            "(line 10627,col 5)-(line 10635,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; }, {});\");\n  }\n",
        "begin_line": 10638,
        "end_line": 10647,
        "comment": "",
        "child_ranges": [
            "(line 10639,col 5)-(line 10646,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument2()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument2() throws Exception {\n    testTypes(\"\"\n        + \"/** @param {string} x */ function f(x) {}\"\n        + \"/**\\n\"\n        + \" * @param {?function(this:T, ...)} fn\\n\"\n        + \" * @param {T=} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"function g() { baz(function() { f(this.length); }, []); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\"\n        + \"found   : number\\n\"\n        + \"required: string\");\n  }\n",
        "begin_line": 10649,
        "end_line": 10662,
        "comment": "",
        "child_ranges": [
            "(line 10650,col 5)-(line 10661,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUnreadNullThisArgument()",
        "snippet": "  public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() {}, null);\");\n  }\n",
        "begin_line": 10664,
        "end_line": 10673,
        "comment": "",
        "child_ranges": [
            "(line 10665,col 5)-(line 10672,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionTemplateThisType()",
        "snippet": "  public void testUnionTemplateThisType() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {F|Array} */ function g() { return []; }\" +\n        \"/** @param {F} x */ function h(x) { }\" +\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(g(), function() { h(this); });\",\n        \"actual parameter 1 of h does not match formal parameter\\n\" +\n        \"found   : (Array|F|null)\\n\" +\n        \"required: (F|null)\");\n  }\n",
        "begin_line": 10675,
        "end_line": 10690,
        "comment": "",
        "child_ranges": [
            "(line 10676,col 5)-(line 10689,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testActiveXObject()",
        "snippet": "  public void testActiveXObject() throws Exception {\n    testTypes(\n        \"/** @type {Object} */ var x = new ActiveXObject();\" +\n        \"/** @type { {impossibleProperty} } */ var y = new ActiveXObject();\");\n  }\n",
        "begin_line": 10692,
        "end_line": 10696,
        "comment": "",
        "child_ranges": [
            "(line 10693,col 5)-(line 10695,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType1()",
        "snippet": "  public void testRecordType1() throws Exception {\n    testTypes(\n        \"/** @param {{prop: number}} x */\" +\n        \"function f(x) {}\" +\n        \"f({});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : {prop: (number|undefined)}\\n\" +\n        \"required: {prop: number}\");\n  }\n",
        "begin_line": 10698,
        "end_line": 10706,
        "comment": "",
        "child_ranges": [
            "(line 10699,col 5)-(line 10705,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType2()",
        "snippet": "  public void testRecordType2() throws Exception {\n    testTypes(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"f({});\");\n  }\n",
        "begin_line": 10708,
        "end_line": 10713,
        "comment": "",
        "child_ranges": [
            "(line 10709,col 5)-(line 10712,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType3()",
        "snippet": "  public void testRecordType3() throws Exception {\n    testTypes(\n        \"/** @param {{prop: number}} x */\" +\n        \"function f(x) {}\" +\n        \"f({prop: 'x'});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : {prop: (number|string)}\\n\" +\n        \"required: {prop: number}\");\n  }\n",
        "begin_line": 10715,
        "end_line": 10723,
        "comment": "",
        "child_ranges": [
            "(line 10716,col 5)-(line 10722,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType4()",
        "snippet": "  public void testRecordType4() throws Exception {\n    // Notice that we do not do flow-based inference on the object type:\n    // We don't try to prove that x.prop may not be string until x\n    // gets passed to g.\n    testClosureTypesMultipleWarnings(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {{prop: (string|undefined)}} x */\" +\n        \"function g(x) {}\" +\n        \"var x = {}; f(x); g(x);\",\n        Lists.newArrayList(\n            \"actual parameter 1 of f does not match formal parameter\\n\" +\n            \"found   : {prop: (number|string|undefined)}\\n\" +\n            \"required: {prop: (number|undefined)}\",\n            \"actual parameter 1 of g does not match formal parameter\\n\" +\n            \"found   : {prop: (number|string|undefined)}\\n\" +\n            \"required: {prop: (string|undefined)}\"));\n  }\n",
        "begin_line": 10725,
        "end_line": 10742,
        "comment": "",
        "child_ranges": [
            "(line 10729,col 5)-(line 10741,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType5()",
        "snippet": "  public void testRecordType5() throws Exception {\n    testTypes(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {{otherProp: (string|undefined)}} x */\" +\n        \"function g(x) {}\" +\n        \"var x = {}; f(x); g(x);\");\n  }\n",
        "begin_line": 10744,
        "end_line": 10751,
        "comment": "",
        "child_ranges": [
            "(line 10745,col 5)-(line 10750,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType6()",
        "snippet": "  public void testRecordType6() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|undefined)}} x */\" +\n        \"function f() { return {}; }\");\n  }\n",
        "begin_line": 10753,
        "end_line": 10757,
        "comment": "",
        "child_ranges": [
            "(line 10754,col 5)-(line 10756,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType7()",
        "snippet": "  public void testRecordType7() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|undefined)}} x */\" +\n        \"function f() { var x = {}; g(x); return x; }\" +\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : {prop: (number|undefined)}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 10759,
        "end_line": 10768,
        "comment": "",
        "child_ranges": [
            "(line 10760,col 5)-(line 10767,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType8()",
        "snippet": "  public void testRecordType8() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|string)}} x */\" +\n        \"function f() { var x = {prop: 3}; g(x.prop); return x; }\" +\n        \"/** @param {string} x */\" +\n        \"function g(x) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10770,
        "end_line": 10779,
        "comment": "",
        "child_ranges": [
            "(line 10771,col 5)-(line 10778,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields1()",
        "snippet": "  public void testDuplicateRecordFields1() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{x:string, x:number}} a\"\n         + \"*/\"\n         + \"function f(a) {};\",\n         \"Parse error. Duplicate record field x\");\n  }\n",
        "begin_line": 10781,
        "end_line": 10787,
        "comment": "",
        "child_ranges": [
            "(line 10782,col 5)-(line 10786,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields2()",
        "snippet": "  public void testDuplicateRecordFields2() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{name:string,number:x,number:y}} a\"\n         + \" */\"\n         + \"function f(a) {};\",\n         new String[] {\"Bad type annotation. Unknown type x\",\n           \"Parse error. Duplicate record field number\",\n           \"Bad type annotation. Unknown type y\"});\n  }\n",
        "begin_line": 10789,
        "end_line": 10797,
        "comment": "",
        "child_ranges": [
            "(line 10790,col 5)-(line 10796,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface1()",
        "snippet": "  public void testMultipleExtendsInterface1() throws Exception {\n    testTypes(\"/** @interface */ function base1() {}\\n\"\n        + \"/** @interface */ function base2() {}\\n\"\n        + \"/** @interface\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\");\n  }\n",
        "begin_line": 10799,
        "end_line": 10807,
        "comment": "",
        "child_ranges": [
            "(line 10800,col 5)-(line 10806,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface2()",
        "snippet": "  public void testMultipleExtendsInterface2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int0.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int0 is not implemented by type Foo\");\n  }\n",
        "begin_line": 10809,
        "end_line": 10818,
        "comment": "",
        "child_ranges": [
            "(line 10810,col 5)-(line 10817,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface3()",
        "snippet": "  public void testMultipleExtendsInterface3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int1.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int1 is not implemented by type Foo\");\n  }\n",
        "begin_line": 10820,
        "end_line": 10829,
        "comment": "",
        "child_ranges": [
            "(line 10821,col 5)-(line 10828,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface4()",
        "snippet": "  public void testMultipleExtendsInterface4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \" @extends {number} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"Int2 @extends non-object type number\");\n  }\n",
        "begin_line": 10831,
        "end_line": 10840,
        "comment": "",
        "child_ranges": [
            "(line 10832,col 5)-(line 10839,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface5()",
        "snippet": "  public void testMultipleExtendsInterface5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @constructor */function Int1() {};\" +\n        \"/** @desc description @ return {string} x */\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Int2 cannot extend this type; interfaces can only extend interfaces\");\n  }\n",
        "begin_line": 10842,
        "end_line": 10850,
        "comment": "",
        "child_ranges": [
            "(line 10843,col 5)-(line 10849,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface6()",
        "snippet": "  public void testMultipleExtendsInterface6() throws Exception {\n    testTypes(\n        \"/** @interface */function Super1() {};\" +\n        \"/** @interface */function Super2() {};\" +\n        \"/** @param {number} bar */Super2.prototype.foo = function(bar) {};\" +\n        \"/** @interface\\n @extends {Super1}\\n \" +\n        \"@extends {Super2} */function Sub() {};\" +\n        \"/** @override\\n @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super2\\n\" +\n        \"original: function (this:Super2, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 10852,
        "end_line": 10865,
        "comment": "",
        "child_ranges": [
            "(line 10853,col 5)-(line 10864,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceAssignment()",
        "snippet": "  public void testMultipleExtendsInterfaceAssignment() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n         \"/** @type {I1} */var i1 = t;\\n\" +\n         \"/** @type {I2} */var i2 = t;\\n\" +\n         \"/** @type {I3} */var i3 = t;\\n\" +\n         \"i1 = i3;\\n\" +\n         \"i2 = i3;\\n\");\n  }\n",
        "begin_line": 10867,
        "end_line": 10879,
        "comment": "",
        "child_ranges": [
            "(line 10868,col 5)-(line 10878,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceParamPass()",
        "snippet": "  public void testMultipleExtendsInterfaceParamPass() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @param x I1 \\n@param y I2\\n@param z I3*/function foo(x,y,z){};\\n\" +\n        \"foo(t,t,t)\\n\");\n  }\n",
        "begin_line": 10881,
        "end_line": 10890,
        "comment": "",
        "child_ranges": [
            "(line 10882,col 5)-(line 10889,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadMultipleExtendsClass()",
        "snippet": "  public void testBadMultipleExtendsClass() throws Exception {\n    testTypes(\"/** @constructor */ function base1() {}\\n\"\n        + \"/** @constructor */ function base2() {}\\n\"\n        + \"/** @constructor\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\",\n        \"Bad type annotation. type annotation incompatible \"\n        + \"with other annotations\");\n  }\n",
        "begin_line": 10892,
        "end_line": 10902,
        "comment": "",
        "child_ranges": [
            "(line 10893,col 5)-(line 10901,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtendsResolution()",
        "snippet": "  public void testInterfaceExtendsResolution() throws Exception {\n    testTypes(\"/** @interface \\n @extends {A} */ function B() {};\\n\" +\n        \"/** @constructor \\n @implements {B} */ function C() {};\\n\" +\n        \"/** @interface */ function A() {};\");\n  }\n",
        "begin_line": 10904,
        "end_line": 10908,
        "comment": "",
        "child_ranges": [
            "(line 10905,col 5)-(line 10907,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyCanBeDefinedInObject()",
        "snippet": "  public void testPropertyCanBeDefinedInObject() throws Exception {\n    testTypes(\"/** @interface */ function I() {};\" +\n        \"I.prototype.bar = function() {};\" +\n        \"/** @type {Object} */ var foo;\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 10910,
        "end_line": 10915,
        "comment": "",
        "child_ranges": [
            "(line 10911,col 5)-(line 10914,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertTypeEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 10917,
        "end_line": 10926,
        "comment": "",
        "child_ranges": [
            "(line 10919,col 5)-(line 10921,col 60)",
            "(line 10922,col 5)-(line 10925,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility1()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility1() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Interface Int2 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 10928,
        "end_line": 10940,
        "comment": "",
        "child_ranges": [
            "(line 10929,col 5)-(line 10939,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility2()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @type {Object} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \"@extends {Int2}*/\" +\n        \"function Int3() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int0 and Int1\",\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int1 and Int2\"\n        });\n  }\n",
        "begin_line": 10942,
        "end_line": 10962,
        "comment": "",
        "child_ranges": [
            "(line 10943,col 5)-(line 10961,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility3()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 10964,
        "end_line": 10977,
        "comment": "",
        "child_ranges": [
            "(line 10965,col 5)-(line 10976,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility4()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface \\n @extends {Int0} */ function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @interface \\n @extends {Int2} */ function Int3() {};\" +\n        \"/** @type {string} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} \\n @extends {Int3} */\" +\n        \"function Int4() {};\",\n        \"Interface Int4 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int2\");\n  }\n",
        "begin_line": 10979,
        "end_line": 10993,
        "comment": "",
        "child_ranges": [
            "(line 10980,col 5)-(line 10992,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility5()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {number} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 10995,
        "end_line": 11016,
        "comment": "",
        "child_ranges": [
            "(line 10996,col 5)-(line 11015,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility6()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility6() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {string} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its\" +\n        \" super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 11018,
        "end_line": 11036,
        "comment": "",
        "child_ranges": [
            "(line 11019,col 5)-(line 11035,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility7()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility7() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 11038,
        "end_line": 11059,
        "comment": "",
        "child_ranges": [
            "(line 11039,col 5)-(line 11058,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility8()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility8() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @type {Null} */\" +\n        \"Int4.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int5 has a property bar with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int4\"});\n  }\n",
        "begin_line": 11061,
        "end_line": 11084,
        "comment": "",
        "child_ranges": [
            "(line 11062,col 5)-(line 11083,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenerics1()",
        "snippet": "  public void testGenerics1() throws Exception {\n    String FN_DECL = \"/** \\n\" +\n        \" * @param {T} x \\n\" +\n        \" * @param {function(T):T} y \\n\" +\n        \" * @template T\\n\" +\n        \" */ \\n\" +\n        \"function f(x,y) { return y(x); }\\n\";\n\n    testTypes(\n        FN_DECL +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"/** @type {string} */\" +\n        \"var result = f('hi', function(x){ out = x; return x; });\");\n\n    testTypes(\n        FN_DECL +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"var result = f(0, function(x){ out = x; return x; });\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n\n    testTypes(\n        FN_DECL +\n        \"var out;\" +\n        \"/** @type {string} */\" +\n        \"var result = f(0, function(x){ out = x; return x; });\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 11086,
        "end_line": 11118,
        "comment": "",
        "child_ranges": [
            "(line 11087,col 5)-(line 11092,col 45)",
            "(line 11094,col 5)-(line 11099,col 68)",
            "(line 11101,col 5)-(line 11108,col 28)",
            "(line 11110,col 5)-(line 11117,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFilter0()",
        "snippet": "  public void testFilter0()\n      throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {T} arr\\n\" +\n        \" * @return {T}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"var filter = function(arr){};\\n\" +\n\n        \"/** @type {!Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"/** @type {!Array.<string>} */\" +\n        \"var result = filter(arr);\");\n  }\n",
        "begin_line": 11120,
        "end_line": 11134,
        "comment": "",
        "child_ranges": [
            "(line 11122,col 5)-(line 11133,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFilter1()",
        "snippet": "  public void testFilter1()\n      throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {!Array.<T>} arr\\n\" +\n        \" * @return {!Array.<T>}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"var filter = function(arr){};\\n\" +\n\n        \"/** @type {!Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"/** @type {!Array.<string>} */\" +\n        \"var result = filter(arr);\");\n  }\n",
        "begin_line": 11136,
        "end_line": 11150,
        "comment": "",
        "child_ranges": [
            "(line 11138,col 5)-(line 11149,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFilter2()",
        "snippet": "  public void testFilter2()\n      throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {!Array.<T>} arr\\n\" +\n        \" * @return {!Array.<T>}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"var filter = function(arr){};\\n\" +\n\n        \"/** @type {!Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"/** @type {!Array.<number>} */\" +\n        \"var result = filter(arr);\",\n        \"initializing variable\\n\" +\n        \"found   : Array.<string>\\n\" +\n        \"required: Array.<number>\");\n  }\n",
        "begin_line": 11152,
        "end_line": 11169,
        "comment": "",
        "child_ranges": [
            "(line 11154,col 5)-(line 11168,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFilter3()",
        "snippet": "  public void testFilter3()\n      throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Array.<T>} arr\\n\" +\n        \" * @return {Array.<T>}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"var filter = function(arr){};\\n\" +\n\n        \"/** @type {Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"/** @type {Array.<number>} */\" +\n        \"var result = filter(arr);\",\n        \"initializing variable\\n\" +\n        \"found   : (Array.<string>|null)\\n\" +\n        \"required: (Array.<number>|null)\");\n  }\n",
        "begin_line": 11171,
        "end_line": 11188,
        "comment": "",
        "child_ranges": [
            "(line 11173,col 5)-(line 11187,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter1()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter1()\n      throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"/** @type {!Array.<number>} */\" +\n        \"var result = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,src) {return false;});\",\n        \"initializing variable\\n\" +\n        \"found   : Array.<string>\\n\" +\n        \"required: Array.<number>\");\n  }\n",
        "begin_line": 11190,
        "end_line": 11203,
        "comment": "",
        "child_ranges": [
            "(line 11192,col 5)-(line 11202,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter2()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {number} */\" +\n        \"var out;\" +\n        \"/** @type {Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"var out4 = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,src) {out = item;});\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 11205,
        "end_line": 11218,
        "comment": "",
        "child_ranges": [
            "(line 11206,col 5)-(line 11217,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter3()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"/** @type {Array.<string>} */ var arr;\\n\" +\n        \"var result = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,src) {out = index;});\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 11220,
        "end_line": 11232,
        "comment": "",
        "child_ranges": [
            "(line 11221,col 5)-(line 11231,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter4()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"/** @type {Array.<string>} */ var arr;\\n\" +\n        \"var out4 = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,srcArr) {out = srcArr;});\",\n        \"assignment\\n\" +\n        \"found   : (null|{length: number})\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 11234,
        "end_line": 11246,
        "comment": "",
        "child_ranges": [
            "(line 11235,col 5)-(line 11245,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCatchExpression1()",
        "snippet": "  public void testCatchExpression1() throws Exception {\n    testTypes(\n        \"function fn() {\" +\n        \"  /** @type {number} */\" +\n        \"  var out = 0;\" +\n        \"  try {\\n\" +\n        \"    foo();\\n\" +\n        \"  } catch (/** @type {string} */ e) {\\n\" +\n        \"    out = e;\" +\n        \"  }\" +\n        \"}\\n\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 11248,
        "end_line": 11262,
        "comment": "",
        "child_ranges": [
            "(line 11249,col 5)-(line 11261,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCatchExpression2()",
        "snippet": "  public void testCatchExpression2() throws Exception {\n    testTypes(\n        \"function fn() {\" +\n        \"  /** @type {number} */\" +\n        \"  var out = 0;\" +\n        \"  /** @type {string} */\" +\n        \"  var e;\" +\n        \"  try {\\n\" +\n        \"    foo();\\n\" +\n        \"  } catch (e) {\\n\" +\n        \"    out = e;\" +\n        \"  }\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 11264,
        "end_line": 11277,
        "comment": "",
        "child_ranges": [
            "(line 11265,col 5)-(line 11276,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterized1()",
        "snippet": "  public void testParameterized1() throws Exception {\n    testTypes(\n        \"/** @type {!Array.<string>} */\" +\n        \"var arr1 = [];\\n\" +\n        \"/** @type {!Array.<number>} */\" +\n        \"var arr2 = [];\\n\" +\n        \"arr1 = arr2;\",\n        \"assignment\\n\" +\n        \"found   : Array.<number>\\n\" +\n        \"required: Array.<string>\");\n  }\n",
        "begin_line": 11279,
        "end_line": 11289,
        "comment": "",
        "child_ranges": [
            "(line 11280,col 5)-(line 11288,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterized2()",
        "snippet": "  public void testParameterized2() throws Exception {\n    testTypes(\n        \"/** @type {!Array.<string>} */\" +\n        \"var arr1 = /** @type {!Array.<number>} */([]);\\n\",\n        \"initializing variable\\n\" +\n        \"found   : Array.<number>\\n\" +\n        \"required: Array.<string>\");\n  }\n",
        "begin_line": 11291,
        "end_line": 11298,
        "comment": "",
        "child_ranges": [
            "(line 11292,col 5)-(line 11297,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterized3()",
        "snippet": "  public void testParameterized3() throws Exception {\n    testTypes(\n        \"/** @type {Array.<string>} */\" +\n        \"var arr1 = /** @type {!Array.<number>} */([]);\\n\",\n        \"initializing variable\\n\" +\n        \"found   : Array.<number>\\n\" +\n        \"required: (Array.<string>|null)\");\n  }\n",
        "begin_line": 11300,
        "end_line": 11307,
        "comment": "",
        "child_ranges": [
            "(line 11301,col 5)-(line 11306,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterized4()",
        "snippet": "  public void testParameterized4() throws Exception {\n    testTypes(\n        \"/** @type {Array.<string>} */\" +\n        \"var arr1 = [];\\n\" +\n        \"/** @type {Array.<number>} */\" +\n        \"var arr2 = arr1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (Array.<string>|null)\\n\" +\n        \"required: (Array.<number>|null)\");\n  }\n",
        "begin_line": 11309,
        "end_line": 11318,
        "comment": "",
        "child_ranges": [
            "(line 11310,col 5)-(line 11317,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedTypeSubtypes2()",
        "snippet": "  public void testParameterizedTypeSubtypes2() throws Exception {\n    JSType arrayOfNumber = createParameterizedType(\n        ARRAY_TYPE, NUMBER_TYPE);\n    JSType arrayOfString = createParameterizedType(\n        ARRAY_TYPE, STRING_TYPE);\n    assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber, NULL_VOID)));\n\n  }\n",
        "begin_line": 11320,
        "end_line": 11327,
        "comment": "",
        "child_ranges": [
            "(line 11321,col 5)-(line 11322,col 33)",
            "(line 11323,col 5)-(line 11324,col 33)",
            "(line 11325,col 5)-(line 11325,col 84)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 11329,
        "end_line": 11331,
        "comment": "",
        "child_ranges": [
            "(line 11330,col 5)-(line 11330,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 11333,
        "end_line": 11335,
        "comment": "",
        "child_ranges": [
            "(line 11334,col 5)-(line 11334,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 11337,
        "end_line": 11339,
        "comment": "",
        "child_ranges": [
            "(line 11338,col 5)-(line 11338,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 11341,
        "end_line": 11345,
        "comment": "",
        "child_ranges": [
            "(line 11343,col 5)-(line 11344,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(\n        \"unexpected error(s) : \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          descriptions.size(), compiler.getWarningCount());\n      Set<String> actualWarningDescriptions = Sets.newHashSet();\n      for (int i = 0; i < descriptions.size(); i++) {\n        actualWarningDescriptions.add(compiler.getWarnings()[i].description);\n      }\n      assertEquals(\n          Sets.newHashSet(descriptions), actualWarningDescriptions);\n    }\n  }\n",
        "begin_line": 11347,
        "end_line": 11394,
        "comment": "",
        "child_ranges": [
            "(line 11349,col 5)-(line 11349,col 40)",
            "(line 11350,col 5)-(line 11350,col 41)",
            "(line 11351,col 5)-(line 11351,col 61)",
            "(line 11352,col 5)-(line 11352,col 46)",
            "(line 11354,col 5)-(line 11356,col 37)",
            "(line 11359,col 5)-(line 11360,col 26)",
            "(line 11362,col 5)-(line 11362,col 65)",
            "(line 11363,col 5)-(line 11370,col 36)",
            "(line 11372,col 5)-(line 11375,col 37)",
            "(line 11377,col 5)-(line 11393,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 11396,
        "end_line": 11399,
        "comment": "",
        "child_ranges": [
            "(line 11398,col 5)-(line 11398,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 11401,
        "end_line": 11426,
        "comment": "",
        "child_ranges": [
            "(line 11403,col 5)-(line 11403,col 44)",
            "(line 11405,col 5)-(line 11405,col 44)",
            "(line 11406,col 5)-(line 11411,col 5)",
            "(line 11412,col 5)-(line 11414,col 5)",
            "(line 11416,col 5)-(line 11416,col 48)",
            "(line 11417,col 5)-(line 11422,col 5)",
            "(line 11423,col 5)-(line 11425,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 11431,
        "end_line": 11433,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 11432,col 5)-(line 11432,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 11435,
        "end_line": 11437,
        "comment": "",
        "child_ranges": [
            "(line 11436,col 5)-(line 11436,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 11443,
        "end_line": 11445,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 11444,col 5)-(line 11444,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(SourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(SourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(new InputId(\"[testcode]\")).getAstRoot(compiler);\n    Node externsNode = compiler.getInput(new InputId(\"[externs]\"))\n        .getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 11447,
        "end_line": 11466,
        "comment": "",
        "child_ranges": [
            "(line 11449,col 5)-(line 11452,col 31)",
            "(line 11454,col 5)-(line 11454,col 79)",
            "(line 11455,col 5)-(line 11456,col 30)",
            "(line 11457,col 5)-(line 11457,col 65)",
            "(line 11458,col 5)-(line 11458,col 46)",
            "(line 11460,col 5)-(line 11462,col 37)",
            "(line 11464,col 5)-(line 11464,col 64)",
            "(line 11465,col 5)-(line 11465,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 11468,
        "end_line": 11475,
        "comment": "",
        "child_ranges": [
            "(line 11469,col 5)-(line 11469,col 45)",
            "(line 11470,col 5)-(line 11470,col 65)",
            "(line 11471,col 5)-(line 11471,col 46)",
            "(line 11473,col 5)-(line 11473,col 47)",
            "(line 11474,col 5)-(line 11474,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry,\n        reportMissingOverrides,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 11477,
        "end_line": 11485,
        "comment": "",
        "child_ranges": [
            "(line 11478,col 5)-(line 11484,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 11487,
        "end_line": 11505,
        "comment": "",
        "child_ranges": [
            "(line 11488,col 5)-(line 11488,col 40)",
            "(line 11489,col 5)-(line 11489,col 46)",
            "(line 11490,col 5)-(line 11490,col 45)",
            "(line 11491,col 5)-(line 11491,col 65)",
            "(line 11493,col 5)-(line 11493,col 47)",
            "(line 11494,col 5)-(line 11494,col 46)",
            "(line 11495,col 5)-(line 11504,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 11507,
        "end_line": 11513,
        "comment": "",
        "child_ranges": [
            "(line 11508,col 5)-(line 11508,col 43)",
            "(line 11509,col 5)-(line 11511,col 5)",
            "(line 11512,col 5)-(line 11512,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 11519,
        "end_line": 11522,
        "comment": "",
        "child_ranges": [
            "(line 11520,col 7)-(line 11520,col 23)",
            "(line 11521,col 7)-(line 11521,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.MISPLACED_TYPE_ANNOTATION, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.CAST, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 89,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 52)",
            "(line 91,col 5)-(line 91,col 52)",
            "(line 92,col 5)-(line 93,col 65)",
            "(line 94,col 5)-(line 95,col 72)",
            "(line 96,col 5)-(line 97,col 51)",
            "(line 98,col 5)-(line 98,col 55)",
            "(line 99,col 5)-(line 99,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    compiler = new Compiler();\n    compiler.initOptions(getOptions());\n    registry = compiler.getTypeRegistry();\n    initTypes();\n  }\n",
        "begin_line": 106,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 30)",
            "(line 109,col 5)-(line 109,col 39)",
            "(line 110,col 5)-(line 110,col 42)",
            "(line 111,col 5)-(line 111,col 16)"
        ]
    }
]