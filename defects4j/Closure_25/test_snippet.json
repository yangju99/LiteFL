[
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.initOptions(options);\n    registry = compiler.getTypeRegistry();\n    assumptions = Maps.newHashMap();\n    returnScope = null;\n  }\n",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 30)",
            "(line 75,col 5)-(line 75,col 52)",
            "(line 76,col 5)-(line 76,col 52)",
            "(line 77,col 5)-(line 77,col 34)",
            "(line 78,col 5)-(line 78,col 42)",
            "(line 79,col 5)-(line 79,col 36)",
            "(line 80,col 5)-(line 80,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.assuming(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assuming(String name, JSType type) {\n    assumptions.put(name, type);\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.assuming(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void assuming(String name, JSTypeNative type) {\n    assuming(name, registry.getNativeType(type));\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.inFunction(java.lang.String)",
        "snippet": "  private void inFunction(String js) {\n    // Parse the body of the function.\n    Node root = compiler.parseTestCode(\"(function() {\" + js + \"});\");\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Node n = root.getFirstChild().getFirstChild();\n    // Create the scope with the assumptions.\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope assumedScope = scopeCreator.createScope(\n        n, scopeCreator.createScope(root, null));\n    for (Map.Entry<String,JSType> entry : assumptions.entrySet()) {\n      assumedScope.declare(entry.getKey(), null, entry.getValue(), null);\n    }\n    // Create the control graph.\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false);\n    cfa.process(null, n);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n    // Create a simple reverse abstract interpreter.\n    ReverseAbstractInterpreter rai = new SemanticReverseAbstractInterpreter(\n        compiler.getCodingConvention(), registry);\n    // Do the type inference by data-flow analysis.\n    TypeInference dfa = new TypeInference(compiler, cfg, rai, assumedScope,\n        ASSERTION_FUNCTION_MAP);\n    dfa.analyze();\n    // Get the scope of the implicit return.\n    BranchedFlowState<FlowScope> rtnState =\n        cfg.getImplicitReturn().getAnnotation();\n    returnScope = rtnState.getIn();\n  }\n",
        "begin_line": 91,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 69)",
            "(line 94,col 5)-(line 96,col 37)",
            "(line 98,col 5)-(line 98,col 50)",
            "(line 100,col 5)-(line 100,col 69)",
            "(line 101,col 5)-(line 102,col 49)",
            "(line 103,col 5)-(line 105,col 5)",
            "(line 107,col 5)-(line 107,col 78)",
            "(line 108,col 5)-(line 108,col 25)",
            "(line 109,col 5)-(line 109,col 46)",
            "(line 111,col 5)-(line 112,col 50)",
            "(line 114,col 5)-(line 115,col 32)",
            "(line 116,col 5)-(line 116,col 18)",
            "(line 118,col 5)-(line 119,col 48)",
            "(line 120,col 5)-(line 120,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.getType(java.lang.String)",
        "snippet": "  private JSType getType(String name) {\n    assertTrue(\"The return scope should not be null.\", returnScope != null);\n    StaticSlot<JSType> var = returnScope.getSlot(name);\n    assertTrue(\"The variable \" + name + \" is missing from the scope.\",\n        var != null);\n    return var.getType();\n  }\n",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 76)",
            "(line 125,col 5)-(line 125,col 55)",
            "(line 126,col 5)-(line 127,col 21)",
            "(line 128,col 5)-(line 128,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verify(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void verify(String name, JSType type) {\n    Asserts.assertTypeEquals(type, getType(name));\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verify(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void verify(String name, JSTypeNative type) {\n    verify(name, registry.getNativeType(type));\n  }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verifySubtypeOf(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void verifySubtypeOf(String name, JSType type) {\n    JSType varType = getType(name);\n    assertTrue(\"The variable \" + name + \" is missing a type.\", varType != null);\n    assertTrue(\"The type \" + varType + \" of variable \" + name +\n        \" is not a subtype of \" + type +\".\",  varType.isSubtype(type));\n  }\n",
        "begin_line": 139,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 35)",
            "(line 141,col 5)-(line 141,col 80)",
            "(line 142,col 5)-(line 143,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verifySubtypeOf(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void verifySubtypeOf(String name, JSTypeNative type) {\n    verifySubtypeOf(name, registry.getNativeType(type));\n  }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createEnumType(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private EnumType createEnumType(String name, JSTypeNative elemType) {\n    return createEnumType(name, registry.getNativeType(elemType));\n  }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createEnumType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private EnumType createEnumType(String name, JSType elemType) {\n    return registry.createEnumType(name, null, elemType);\n  }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 155,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createUndefinableType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType createUndefinableType(JSTypeNative type) {\n    return registry.createUnionType(\n        registry.getNativeType(type), registry.getNativeType(VOID_TYPE));\n  }\n",
        "begin_line": 158,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 159,col 5)-(line 160,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createNullableType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType createNullableType(JSTypeNative type) {\n    return createNullableType(registry.getNativeType(type));\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 164,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private JSType createNullableType(JSType type) {\n    return registry.createNullableType(type);\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType createUnionType(JSTypeNative type1, JSTypeNative type2) {\n    return registry.createUnionType(\n        registry.getNativeType(type1), registry.getNativeType(type2));\n  }\n",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 173,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssumption()",
        "snippet": "  public void testAssumption() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 177,col 5)-(line 177,col 31)",
            "(line 178,col 5)-(line 178,col 19)",
            "(line 179,col 5)-(line 179,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testVar()",
        "snippet": "  public void testVar() {\n    inFunction(\"var x = 1;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 29)",
            "(line 184,col 5)-(line 184,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEmptyVar()",
        "snippet": "  public void testEmptyVar() {\n    inFunction(\"var x;\");\n    verify(\"x\", VOID_TYPE);\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 25)",
            "(line 189,col 5)-(line 189,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssignment()",
        "snippet": "  public void testAssignment() {\n    assuming(\"x\", OBJECT_TYPE);\n    inFunction(\"x = 1;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 192,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 31)",
            "(line 194,col 5)-(line 194,col 25)",
            "(line 195,col 5)-(line 195,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testGetProp()",
        "snippet": "  public void testGetProp() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"x.y();\");\n    verify(\"x\", OBJECT_TYPE);\n  }\n",
        "begin_line": 198,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 51)",
            "(line 200,col 5)-(line 200,col 25)",
            "(line 201,col 5)-(line 201,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testGetElemDereference()",
        "snippet": "  public void testGetElemDereference() {\n    assuming(\"x\", createUndefinableType(OBJECT_TYPE));\n    inFunction(\"x['z'] = 3;\");\n    verify(\"x\", OBJECT_TYPE);\n  }\n",
        "begin_line": 204,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 54)",
            "(line 206,col 5)-(line 206,col 30)",
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf1()",
        "snippet": "  public void testIf1() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = {}; if (x) { y = x; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 210,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 51)",
            "(line 212,col 5)-(line 212,col 48)",
            "(line 213,col 5)-(line 213,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf1a()",
        "snippet": "  public void testIf1a() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = {}; if (x != null) { y = x; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 216,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 51)",
            "(line 218,col 5)-(line 218,col 56)",
            "(line 219,col 5)-(line 219,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf2()",
        "snippet": "  public void testIf2() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = x; if (x) { y = x; } else { y = {}; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 222,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 51)",
            "(line 224,col 5)-(line 224,col 64)",
            "(line 225,col 5)-(line 225,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf3()",
        "snippet": "  public void testIf3() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 1; if (x) { y = x; }\");\n    verify(\"y\", createUnionType(OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 228,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 51)",
            "(line 230,col 5)-(line 230,col 47)",
            "(line 231,col 5)-(line 231,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert1()",
        "snippet": "  public void testAssert1() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 234,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 55)",
            "(line 236,col 5)-(line 236,col 29)",
            "(line 237,col 5)-(line 237,col 62)",
            "(line 238,col 5)-(line 238,col 30)",
            "(line 239,col 5)-(line 239,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert1a()",
        "snippet": "  public void testAssert1a() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x !== null); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 242,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 55)",
            "(line 244,col 5)-(line 244,col 29)",
            "(line 245,col 5)-(line 245,col 71)",
            "(line 246,col 5)-(line 246,col 30)",
            "(line 247,col 5)-(line 247,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert2()",
        "snippet": "  public void testAssert2() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"goog.asserts.assert(1, x); out1 = x;\");\n    verify(\"out1\", startType);\n  }\n",
        "begin_line": 250,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 55)",
            "(line 252,col 5)-(line 252,col 29)",
            "(line 253,col 5)-(line 253,col 55)",
            "(line 254,col 5)-(line 254,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert3()",
        "snippet": "  public void testAssert3() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x && y); out2 = x; out3 = y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n    verify(\"out3\", OBJECT_TYPE);\n  }\n",
        "begin_line": 257,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 55)",
            "(line 259,col 5)-(line 259,col 29)",
            "(line 260,col 5)-(line 260,col 29)",
            "(line 261,col 5)-(line 261,col 77)",
            "(line 262,col 5)-(line 262,col 30)",
            "(line 263,col 5)-(line 263,col 32)",
            "(line 264,col 5)-(line 264,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert4()",
        "snippet": "  public void testAssert4() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x && !y); out2 = x; out3 = y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n    verify(\"out3\", NULL_TYPE);\n  }\n",
        "begin_line": 267,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 55)",
            "(line 269,col 5)-(line 269,col 29)",
            "(line 270,col 5)-(line 270,col 29)",
            "(line 271,col 5)-(line 271,col 78)",
            "(line 272,col 5)-(line 272,col 30)",
            "(line 273,col 5)-(line 273,col 32)",
            "(line 274,col 5)-(line 274,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert5()",
        "snippet": "  public void testAssert5() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"goog.asserts.assert(x || y); out1 = x; out2 = y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", startType);\n  }\n",
        "begin_line": 277,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 55)",
            "(line 279,col 5)-(line 279,col 29)",
            "(line 280,col 5)-(line 280,col 29)",
            "(line 281,col 5)-(line 281,col 67)",
            "(line 282,col 5)-(line 282,col 30)",
            "(line 283,col 5)-(line 283,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert6()",
        "snippet": "  public void testAssert6() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x.y\", startType);\n    inFunction(\"out1 = x.y; goog.asserts.assert(x.y); out2 = x.y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 286,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 55)",
            "(line 288,col 5)-(line 288,col 31)",
            "(line 289,col 5)-(line 289,col 68)",
            "(line 290,col 5)-(line 290,col 30)",
            "(line 291,col 5)-(line 291,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert7()",
        "snippet": "  public void testAssert7() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 294,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 295,col 55)",
            "(line 296,col 5)-(line 296,col 29)",
            "(line 297,col 5)-(line 297,col 59)",
            "(line 298,col 5)-(line 298,col 30)",
            "(line 299,col 5)-(line 299,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert8()",
        "snippet": "  public void testAssert8() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(x != null);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 302,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 303,col 55)",
            "(line 304,col 5)-(line 304,col 29)",
            "(line 305,col 5)-(line 305,col 67)",
            "(line 306,col 5)-(line 306,col 30)",
            "(line 307,col 5)-(line 307,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert9()",
        "snippet": "  public void testAssert9() {\n    JSType startType = createNullableType(NUMBER_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(y = x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 310,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 55)",
            "(line 312,col 5)-(line 312,col 29)",
            "(line 313,col 5)-(line 313,col 63)",
            "(line 314,col 5)-(line 314,col 30)",
            "(line 315,col 5)-(line 315,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert10()",
        "snippet": "  public void testAssert10() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(x && y); out3 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n    verify(\"out3\", OBJECT_TYPE);\n  }\n",
        "begin_line": 318,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 55)",
            "(line 320,col 5)-(line 320,col 29)",
            "(line 321,col 5)-(line 321,col 29)",
            "(line 322,col 5)-(line 322,col 74)",
            "(line 323,col 5)-(line 323,col 30)",
            "(line 324,col 5)-(line 324,col 32)",
            "(line 325,col 5)-(line 325,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertNumber()",
        "snippet": "  public void testAssertNumber() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertNumber(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 328,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 52)",
            "(line 330,col 5)-(line 330,col 29)",
            "(line 331,col 5)-(line 331,col 68)",
            "(line 332,col 5)-(line 332,col 30)",
            "(line 333,col 5)-(line 333,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertNumber2()",
        "snippet": "  public void testAssertNumber2() {\n    // Make sure it ignores expressions.\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"goog.asserts.assertNumber(x + x); out1 = x;\");\n    verify(\"out1\", startType);\n  }\n",
        "begin_line": 336,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 52)",
            "(line 339,col 5)-(line 339,col 29)",
            "(line 340,col 5)-(line 340,col 62)",
            "(line 341,col 5)-(line 341,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertNumber3()",
        "snippet": "  public void testAssertNumber3() {\n    // Make sure it ignores expressions.\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assertNumber(x + x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 346,col 52)",
            "(line 347,col 5)-(line 347,col 29)",
            "(line 348,col 5)-(line 348,col 69)",
            "(line 349,col 5)-(line 349,col 30)",
            "(line 350,col 5)-(line 350,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertString()",
        "snippet": "  public void testAssertString() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertString(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", STRING_TYPE);\n  }\n",
        "begin_line": 353,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 52)",
            "(line 355,col 5)-(line 355,col 29)",
            "(line 356,col 5)-(line 356,col 68)",
            "(line 357,col 5)-(line 357,col 30)",
            "(line 358,col 5)-(line 358,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertFunction()",
        "snippet": "  public void testAssertFunction() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertFunction(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", FUNCTION_INSTANCE_TYPE);\n  }\n",
        "begin_line": 361,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 362,col 52)",
            "(line 363,col 5)-(line 363,col 29)",
            "(line 364,col 5)-(line 364,col 70)",
            "(line 365,col 5)-(line 365,col 30)",
            "(line 366,col 5)-(line 366,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject()",
        "snippet": "  public void testAssertObject() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertObject(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 369,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 52)",
            "(line 371,col 5)-(line 371,col 29)",
            "(line 372,col 5)-(line 372,col 68)",
            "(line 373,col 5)-(line 373,col 30)",
            "(line 374,col 5)-(line 374,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject2()",
        "snippet": "  public void testAssertObject2() {\n    JSType startType = createNullableType(ARRAY_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertObject(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 377,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 378,col 54)",
            "(line 379,col 5)-(line 379,col 29)",
            "(line 380,col 5)-(line 380,col 68)",
            "(line 381,col 5)-(line 381,col 30)",
            "(line 382,col 5)-(line 382,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject3()",
        "snippet": "  public void testAssertObject3() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x.y\", startType);\n    inFunction(\"out1 = x.y; goog.asserts.assertObject(x.y); out2 = x.y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 385,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 386,col 55)",
            "(line 387,col 5)-(line 387,col 31)",
            "(line 388,col 5)-(line 388,col 74)",
            "(line 389,col 5)-(line 389,col 30)",
            "(line 390,col 5)-(line 390,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject4()",
        "snippet": "  public void testAssertObject4() {\n    JSType startType = createNullableType(ARRAY_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assertObject(x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 393,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 54)",
            "(line 395,col 5)-(line 395,col 29)",
            "(line 396,col 5)-(line 396,col 65)",
            "(line 397,col 5)-(line 397,col 30)",
            "(line 398,col 5)-(line 398,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject5()",
        "snippet": "  public void testAssertObject5() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\n        \"out1 = x;\" +\n        \"out2 = /** @type {!Array} */ (goog.asserts.assertObject(x));\");\n    verify(\"out1\", startType);\n    verify(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 401,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 52)",
            "(line 403,col 5)-(line 403,col 29)",
            "(line 404,col 5)-(line 406,col 72)",
            "(line 407,col 5)-(line 407,col 30)",
            "(line 408,col 5)-(line 408,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertArray()",
        "snippet": "  public void testAssertArray() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertArray(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 411,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 412,col 5)-(line 412,col 52)",
            "(line 413,col 5)-(line 413,col 29)",
            "(line 414,col 5)-(line 414,col 67)",
            "(line 415,col 5)-(line 415,col 30)",
            "(line 416,col 5)-(line 416,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertInstanceof()",
        "snippet": "  public void testAssertInstanceof() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 419,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 52)",
            "(line 421,col 5)-(line 421,col 29)",
            "(line 422,col 5)-(line 422,col 72)",
            "(line 423,col 5)-(line 423,col 30)",
            "(line 424,col 5)-(line 424,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testReturn1()",
        "snippet": "  public void testReturn1() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"if (x) { return x; }\\nx = {};\\nreturn x;\");\n    verify(\"x\", OBJECT_TYPE);\n  }\n",
        "begin_line": 427,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 428,col 5)-(line 428,col 51)",
            "(line 429,col 5)-(line 429,col 59)",
            "(line 430,col 5)-(line 430,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testReturn2()",
        "snippet": "  public void testReturn2() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"if (!x) { x = 0; }\\nreturn x;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 433,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 51)",
            "(line 435,col 5)-(line 435,col 48)",
            "(line 436,col 5)-(line 436,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testWhile1()",
        "snippet": "  public void testWhile1() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"while (!x) { if (x == null) { x = 0; } else { x = 1; } }\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 439,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 440,col 51)",
            "(line 441,col 5)-(line 441,col 75)",
            "(line 442,col 5)-(line 442,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testWhile2()",
        "snippet": "  public void testWhile2() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"while (!x) { x = {}; }\");\n    verifySubtypeOf(\"x\", createUnionType(OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 445,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 446,col 51)",
            "(line 447,col 5)-(line 447,col 41)",
            "(line 448,col 5)-(line 448,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testDo()",
        "snippet": "  public void testDo() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"do { x = 1; } while (!x);\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 451,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 452,col 51)",
            "(line 453,col 5)-(line 453,col 44)",
            "(line 454,col 5)-(line 454,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor1()",
        "snippet": "  public void testFor1() {\n    assuming(\"y\", NUMBER_TYPE);\n    inFunction(\"var x = null; var i = null; for (i=y; !i; i=1) { x = 1; }\");\n    verify(\"x\", createNullableType(NUMBER_TYPE));\n    verify(\"i\", NUMBER_TYPE);\n  }\n",
        "begin_line": 457,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 31)",
            "(line 459,col 5)-(line 459,col 76)",
            "(line 460,col 5)-(line 460,col 49)",
            "(line 461,col 5)-(line 461,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor2()",
        "snippet": "  public void testFor2() {\n    assuming(\"y\", OBJECT_TYPE);\n    inFunction(\"var x = null; var i = null; for (i in y) { x = 1; }\");\n    verify(\"x\", createNullableType(NUMBER_TYPE));\n    verify(\"i\", createNullableType(STRING_TYPE));\n  }\n",
        "begin_line": 464,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 31)",
            "(line 466,col 5)-(line 466,col 70)",
            "(line 467,col 5)-(line 467,col 49)",
            "(line 468,col 5)-(line 468,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor3()",
        "snippet": "  public void testFor3() {\n    assuming(\"y\", OBJECT_TYPE);\n    inFunction(\"var x = null; var i = null; for (var i in y) { x = 1; }\");\n    verify(\"x\", createNullableType(NUMBER_TYPE));\n    verify(\"i\", createNullableType(STRING_TYPE));\n  }\n",
        "begin_line": 471,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 472,col 5)-(line 472,col 31)",
            "(line 473,col 5)-(line 473,col 74)",
            "(line 474,col 5)-(line 474,col 49)",
            "(line 475,col 5)-(line 475,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor4()",
        "snippet": "  public void testFor4() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = {};\\n\"  +\n        \"if (x) { for (var i = 0; i < 10; i++) { break; } y = x; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 478,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 479,col 5)-(line 479,col 51)",
            "(line 480,col 5)-(line 481,col 69)",
            "(line 482,col 5)-(line 482,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch1()",
        "snippet": "  public void testSwitch1() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; switch(x) {\\n\" +\n        \"case 1: y = 1; break;\\n\" +\n        \"case 2: y = {};\\n\" +\n        \"case 3: y = {};\\n\" +\n        \"default: y = 0;}\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 485,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 486,col 5)-(line 486,col 31)",
            "(line 487,col 5)-(line 491,col 28)",
            "(line 492,col 5)-(line 492,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch2()",
        "snippet": "  public void testSwitch2() {\n    assuming(\"x\", ALL_TYPE);\n    inFunction(\"var y = null; switch (typeof x) {\\n\" +\n        \"case 'string':\\n\" +\n        \"  y = x;\\n\" +\n        \"  return;\" +\n        \"default:\\n\" +\n        \"  y = 'a';\\n\" +\n        \"}\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 495,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 28)",
            "(line 497,col 5)-(line 503,col 13)",
            "(line 504,col 5)-(line 504,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch3()",
        "snippet": "  public void testSwitch3() {\n    assuming(\"x\",\n        createNullableType(createUnionType(NUMBER_TYPE, STRING_TYPE)));\n    inFunction(\"var y; var z; switch (typeof x) {\\n\" +\n        \"case 'string':\\n\" +\n        \"  y = 1; z = null;\\n\" +\n        \"  return;\\n\" +\n        \"case 'number':\\n\" +\n        \"  y = x; z = null;\\n\" +\n        \"  return;\" +\n        \"default:\\n\" +\n        \"  y = 1; z = x;\\n\" +\n        \"}\");\n    verify(\"y\", NUMBER_TYPE);\n    verify(\"z\", NULL_TYPE);\n  }\n",
        "begin_line": 507,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 509,col 71)",
            "(line 510,col 5)-(line 519,col 13)",
            "(line 520,col 5)-(line 520,col 29)",
            "(line 521,col 5)-(line 521,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch4()",
        "snippet": "  public void testSwitch4() {\n    assuming(\"x\", ALL_TYPE);\n    inFunction(\"var y = null; switch (typeof x) {\\n\" +\n        \"case 'string':\\n\" +\n        \"case 'number':\\n\" +\n        \"  y = x;\\n\" +\n        \"  return;\\n\" +\n        \"default:\\n\" +\n        \"  y = 1;\\n\" +\n        \"}\\n\");\n    verify(\"y\", createUnionType(NUMBER_TYPE, STRING_TYPE));\n  }\n",
        "begin_line": 524,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 525,col 28)",
            "(line 526,col 5)-(line 533,col 15)",
            "(line 534,col 5)-(line 534,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCall1()",
        "snippet": "  public void testCall1() {\n    assuming(\"x\",\n        createNullableType(\n            registry.createFunctionType(registry.getNativeType(NUMBER_TYPE))));\n    inFunction(\"var y = x();\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 537,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 538,col 5)-(line 540,col 79)",
            "(line 541,col 5)-(line 541,col 31)",
            "(line 542,col 5)-(line 542,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testNew1()",
        "snippet": "  public void testNew1() {\n    assuming(\"x\",\n        createNullableType(\n            registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE)));\n    inFunction(\"var y = new x();\");\n    verify(\"y\", JSTypeNative.NO_OBJECT_TYPE);\n  }\n",
        "begin_line": 545,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 548,col 72)",
            "(line 549,col 5)-(line 549,col 35)",
            "(line 550,col 5)-(line 550,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() {\n    inFunction(\"var x = 1; function f() { x = null; };\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 553,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 554,col 57)",
            "(line 555,col 5)-(line 555,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() {\n    inFunction(\"var x = 1; var f = function() { x = null; };\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 558,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 559,col 63)",
            "(line 560,col 5)-(line 560,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testHook()",
        "snippet": "  public void testHook() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = x ? x : {};\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 563,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 564,col 51)",
            "(line 565,col 5)-(line 565,col 38)",
            "(line 566,col 5)-(line 566,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testThrow()",
        "snippet": "  public void testThrow() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"var y = 1;\\n\" +\n        \"if (x == null) { throw new Error('x is null') }\\n\" +\n        \"y = x;\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 569,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 51)",
            "(line 571,col 5)-(line 573,col 18)",
            "(line 574,col 5)-(line 574,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testTry1()",
        "snippet": "  public void testTry1() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; try { y = null; } finally { y = x; }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 577,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 578,col 31)",
            "(line 579,col 5)-(line 579,col 69)",
            "(line 580,col 5)-(line 580,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testTry2()",
        "snippet": "  public void testTry2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null;\\n\" +\n        \"try {  } catch (e) { y = null; } finally { y = x; }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 583,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 584,col 31)",
            "(line 585,col 5)-(line 586,col 63)",
            "(line 587,col 5)-(line 587,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testTry3()",
        "snippet": "  public void testTry3() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; try { y = x; } catch (e) { }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 590,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 591,col 31)",
            "(line 592,col 5)-(line 592,col 61)",
            "(line 593,col 5)-(line 593,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCatch1()",
        "snippet": "  public void testCatch1() {\n    inFunction(\"var y = null; try { foo(); } catch (e) { y = e; }\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 596,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 68)",
            "(line 598,col 5)-(line 598,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCatch2()",
        "snippet": "  public void testCatch2() {\n    inFunction(\"var y = null; var e = 3; try { foo(); } catch (e) { y = e; }\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 601,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 602,col 79)",
            "(line 603,col 5)-(line 603,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testUnknownType1()",
        "snippet": "  public void testUnknownType1() {\n    inFunction(\"var y = 3; y = x;\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 606,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 607,col 36)",
            "(line 608,col 5)-(line 608,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testUnknownType2()",
        "snippet": "  public void testUnknownType2() {\n    assuming(\"x\", ARRAY_TYPE);\n    inFunction(\"var y = 5; y = x[0];\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 611,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 612,col 30)",
            "(line 613,col 5)-(line 613,col 39)",
            "(line 614,col 5)-(line 614,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInfiniteLoop1()",
        "snippet": "  public void testInfiniteLoop1() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"x = {}; while(x != null) { x = {}; }\");\n  }\n",
        "begin_line": 617,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 618,col 51)",
            "(line 619,col 5)-(line 619,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInfiniteLoop2()",
        "snippet": "  public void testInfiniteLoop2() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"x = {}; do { x = null; } while (x == null);\");\n  }\n",
        "begin_line": 622,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 623,col 51)",
            "(line 624,col 5)-(line 624,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testJoin1()",
        "snippet": "  public void testJoin1() {\n    JSType unknownOrNull = createUnionType(NULL_TYPE, UNKNOWN_TYPE);\n    assuming(\"x\", BOOLEAN_TYPE);\n    assuming(\"unknownOrNull\", unknownOrNull);\n    inFunction(\"var y; if (x) y = unknownOrNull; else y = null;\");\n    verify(\"y\", unknownOrNull);\n  }\n",
        "begin_line": 627,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 628,col 5)-(line 628,col 68)",
            "(line 629,col 5)-(line 629,col 32)",
            "(line 630,col 5)-(line 630,col 45)",
            "(line 631,col 5)-(line 631,col 66)",
            "(line 632,col 5)-(line 632,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testJoin2()",
        "snippet": "  public void testJoin2() {\n    JSType unknownOrNull = createUnionType(NULL_TYPE, UNKNOWN_TYPE);\n    assuming(\"x\", BOOLEAN_TYPE);\n    assuming(\"unknownOrNull\", unknownOrNull);\n    inFunction(\"var y; if (x) y = null; else y = unknownOrNull;\");\n    verify(\"y\", unknownOrNull);\n  }\n",
        "begin_line": 635,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 636,col 68)",
            "(line 637,col 5)-(line 637,col 32)",
            "(line 638,col 5)-(line 638,col 45)",
            "(line 639,col 5)-(line 639,col 66)",
            "(line 640,col 5)-(line 640,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testArrayLit()",
        "snippet": "  public void testArrayLit() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 3; if (x) { x = [y = x]; }\");\n    verify(\"x\", createUnionType(NULL_TYPE, ARRAY_TYPE));\n    verify(\"y\", createUnionType(NUMBER_TYPE, OBJECT_TYPE));\n  }\n",
        "begin_line": 643,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 51)",
            "(line 645,col 5)-(line 645,col 53)",
            "(line 646,col 5)-(line 646,col 56)",
            "(line 647,col 5)-(line 647,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testGetElem()",
        "snippet": "  public void testGetElem() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 3; if (x) { x = x[y = x]; }\");\n    verify(\"x\", UNKNOWN_TYPE);\n    verify(\"y\", createUnionType(NUMBER_TYPE, OBJECT_TYPE));\n  }\n",
        "begin_line": 650,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 651,col 5)-(line 651,col 51)",
            "(line 652,col 5)-(line 652,col 54)",
            "(line 653,col 5)-(line 653,col 30)",
            "(line 654,col 5)-(line 654,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI1()",
        "snippet": "  public void testEnumRAI1() {\n    JSType enumType = createEnumType(\"MyEnum\", ARRAY_TYPE).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (x) y = x;\");\n    verify(\"y\", createNullableType(enumType));\n  }\n",
        "begin_line": 657,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 658,col 5)-(line 658,col 77)",
            "(line 659,col 5)-(line 659,col 28)",
            "(line 660,col 5)-(line 660,col 46)",
            "(line 661,col 5)-(line 661,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI2()",
        "snippet": "  public void testEnumRAI2() {\n    JSType enumType = createEnumType(\"MyEnum\", NUMBER_TYPE).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (typeof x == 'number') y = x;\");\n    verify(\"y\", createNullableType(enumType));\n  }\n",
        "begin_line": 664,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 665,col 78)",
            "(line 666,col 5)-(line 666,col 28)",
            "(line 667,col 5)-(line 667,col 65)",
            "(line 668,col 5)-(line 668,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI3()",
        "snippet": "  public void testEnumRAI3() {\n    JSType enumType = createEnumType(\"MyEnum\", NUMBER_TYPE).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (x && typeof x == 'number') y = x;\");\n    verify(\"y\", createNullableType(enumType));\n  }\n",
        "begin_line": 671,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 672,col 78)",
            "(line 673,col 5)-(line 673,col 28)",
            "(line 674,col 5)-(line 674,col 70)",
            "(line 675,col 5)-(line 675,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI4()",
        "snippet": "  public void testEnumRAI4() {\n    JSType enumType = createEnumType(\"MyEnum\",\n        createUnionType(STRING_TYPE, NUMBER_TYPE)).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (typeof x == 'number') y = x;\");\n    verify(\"y\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 678,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 679,col 5)-(line 680,col 69)",
            "(line 681,col 5)-(line 681,col 28)",
            "(line 682,col 5)-(line 682,col 65)",
            "(line 683,col 5)-(line 683,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingAnd()",
        "snippet": "  public void testShortCircuitingAnd() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; if (x && (y = 3)) { }\");\n    verify(\"y\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 686,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 31)",
            "(line 688,col 5)-(line 688,col 54)",
            "(line 689,col 5)-(line 689,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingAnd2()",
        "snippet": "  public void testShortCircuitingAnd2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; var z = 4; if (x && (y = 3)) { z = y; }\");\n    verify(\"z\", NUMBER_TYPE);\n  }\n",
        "begin_line": 692,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 693,col 5)-(line 693,col 31)",
            "(line 694,col 5)-(line 694,col 72)",
            "(line 695,col 5)-(line 695,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingOr()",
        "snippet": "  public void testShortCircuitingOr() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; if (x || (y = 3)) { }\");\n    verify(\"y\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 698,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 31)",
            "(line 700,col 5)-(line 700,col 54)",
            "(line 701,col 5)-(line 701,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingOr2()",
        "snippet": "  public void testShortCircuitingOr2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; var z = 4; if (x || (y = 3)) { z = y; }\");\n    verify(\"z\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 704,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 705,col 5)-(line 705,col 31)",
            "(line 706,col 5)-(line 706,col 72)",
            "(line 707,col 5)-(line 707,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssignInCondition()",
        "snippet": "  public void testAssignInCondition() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"var y; if (!(y = x)) { y = 3; }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 710,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 711,col 51)",
            "(line 712,col 5)-(line 712,col 50)",
            "(line 713,col 5)-(line 713,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf1()",
        "snippet": "  public void testInstanceOf1() {\n    assuming(\"x\", OBJECT_TYPE);\n    inFunction(\"var y = null; if (x instanceof String) y = x;\");\n    verify(\"y\", createNullableType(STRING_OBJECT_TYPE));\n  }\n",
        "begin_line": 716,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 717,col 31)",
            "(line 718,col 5)-(line 718,col 64)",
            "(line 719,col 5)-(line 719,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf2()",
        "snippet": "  public void testInstanceOf2() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 1; if (x instanceof String) y = x;\");\n    verify(\"y\", createUnionType(STRING_OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 722,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 723,col 51)",
            "(line 724,col 5)-(line 724,col 61)",
            "(line 725,col 5)-(line 725,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf3()",
        "snippet": "  public void testInstanceOf3() {\n    assuming(\"x\", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE));\n    inFunction(\"var y = null; if (x instanceof String) y = x;\");\n    verify(\"y\", createNullableType(STRING_OBJECT_TYPE));\n  }\n",
        "begin_line": 728,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 75)",
            "(line 730,col 5)-(line 730,col 64)",
            "(line 731,col 5)-(line 731,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf4()",
        "snippet": "  public void testInstanceOf4() {\n    assuming(\"x\", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE));\n    inFunction(\"var y = null; if (x instanceof String); else y = x;\");\n    verify(\"y\", createNullableType(NUMBER_OBJECT_TYPE));\n  }\n",
        "begin_line": 734,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 75)",
            "(line 736,col 5)-(line 736,col 70)",
            "(line 737,col 5)-(line 737,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf5()",
        "snippet": "  public void testInstanceOf5() {\n    assuming(\"x\", OBJECT_TYPE);\n    inFunction(\"var y = null; if (x instanceof String); else y = x;\");\n    verify(\"y\", createNullableType(OBJECT_TYPE));\n  }\n",
        "begin_line": 740,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 741,col 31)",
            "(line 742,col 5)-(line 742,col 70)",
            "(line 743,col 5)-(line 743,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFlattening()",
        "snippet": "  public void testFlattening() {\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      assuming(\"s\" + i, ALL_TYPE);\n    }\n    assuming(\"b\", JSTypeNative.BOOLEAN_TYPE);\n    StringBuilder body = new StringBuilder();\n    body.append(\"if (b) {\");\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      body.append(\"s\");\n      body.append(i);\n      body.append(\" = 1;\\n\");\n    }\n    body.append(\" } else { \");\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      body.append(\"s\");\n      body.append(i);\n      body.append(\" = 'ONE';\\n\");\n    }\n    body.append(\"}\");\n    JSType numberORString = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    inFunction(body.toString());\n\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      verify(\"s\" + i, numberORString);\n    }\n  }\n",
        "begin_line": 746,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 749,col 5)",
            "(line 750,col 5)-(line 750,col 45)",
            "(line 751,col 5)-(line 751,col 45)",
            "(line 752,col 5)-(line 752,col 28)",
            "(line 753,col 5)-(line 757,col 5)",
            "(line 758,col 5)-(line 758,col 30)",
            "(line 759,col 5)-(line 763,col 5)",
            "(line 764,col 5)-(line 764,col 21)",
            "(line 765,col 5)-(line 765,col 70)",
            "(line 766,col 5)-(line 766,col 32)",
            "(line 768,col 5)-(line 770,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testUnary()",
        "snippet": "  public void testUnary() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = +x;\");\n    verify(\"y\", NUMBER_TYPE);\n    inFunction(\"var z = -x;\");\n    verify(\"z\", NUMBER_TYPE);\n  }\n",
        "begin_line": 773,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 774,col 31)",
            "(line 775,col 5)-(line 775,col 30)",
            "(line 776,col 5)-(line 776,col 29)",
            "(line 777,col 5)-(line 777,col 30)",
            "(line 778,col 5)-(line 778,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAdd1()",
        "snippet": "  public void testAdd1() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = x + 5;\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 781,
        "end_line": 785,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 782,col 31)",
            "(line 783,col 5)-(line 783,col 33)",
            "(line 784,col 5)-(line 784,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAdd2()",
        "snippet": "  public void testAdd2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = x + '5';\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 787,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 788,col 5)-(line 788,col 31)",
            "(line 789,col 5)-(line 789,col 35)",
            "(line 790,col 5)-(line 790,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAdd3()",
        "snippet": "  public void testAdd3() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = '5' + x;\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 793,
        "end_line": 797,
        "comment": "",
        "child_ranges": [
            "(line 794,col 5)-(line 794,col 31)",
            "(line 795,col 5)-(line 795,col 35)",
            "(line 796,col 5)-(line 796,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssignAdd()",
        "snippet": "  public void testAssignAdd() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"x += '5';\");\n    verify(\"x\", STRING_TYPE);\n  }\n",
        "begin_line": 799,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 800,col 5)-(line 800,col 31)",
            "(line 801,col 5)-(line 801,col 28)",
            "(line 802,col 5)-(line 802,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testComparison()",
        "snippet": "  public void testComparison() {\n    inFunction(\"var x = 'foo'; var y = (x = 3) < 4;\");\n    verify(\"x\", NUMBER_TYPE);\n    inFunction(\"var x = 'foo'; var y = (x = 3) > 4;\");\n    verify(\"x\", NUMBER_TYPE);\n    inFunction(\"var x = 'foo'; var y = (x = 3) <= 4;\");\n    verify(\"x\", NUMBER_TYPE);\n    inFunction(\"var x = 'foo'; var y = (x = 3) >= 4;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 805,
        "end_line": 814,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 806,col 54)",
            "(line 807,col 5)-(line 807,col 29)",
            "(line 808,col 5)-(line 808,col 54)",
            "(line 809,col 5)-(line 809,col 29)",
            "(line 810,col 5)-(line 810,col 55)",
            "(line 811,col 5)-(line 811,col 29)",
            "(line 812,col 5)-(line 812,col 55)",
            "(line 813,col 5)-(line 813,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testThrownExpression()",
        "snippet": "  public void testThrownExpression() {\n    inFunction(\"var x = 'foo'; \"\n               + \"try { throw new Error(x = 3); } catch (ex) {}\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 816,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 817,col 5)-(line 818,col 66)",
            "(line 819,col 5)-(line 819,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testObjectLit()",
        "snippet": "  public void testObjectLit() {\n    inFunction(\"var x = {}; var out = x.a;\");\n    verify(\"out\", UNKNOWN_TYPE);  // Shouldn't this be 'undefined'?\n\n    inFunction(\"var x = {a:1}; var out = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n\n    inFunction(\"var x = {a:1}; var out = x.a; x.a = 'string'; var out2 = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n    verify(\"out2\", STRING_TYPE);\n\n    inFunction(\"var x = { get a() {return 1} }; var out = x.a;\");\n    verify(\"out\", UNKNOWN_TYPE);\n\n    inFunction(\n        \"var x = {\" +\n        \"  /** @return {number} */ get a() {return 1}\" +\n        \"};\" +\n        \"var out = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n\n    inFunction(\"var x = { set a(b) {} }; var out = x.a;\");\n    verify(\"out\", UNKNOWN_TYPE);\n\n    inFunction(\"var x = { \" +\n            \"/** @param {number} b */ set a(b) {} };\" +\n            \"var out = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n  }\n",
        "begin_line": 822,
        "end_line": 850,
        "comment": "",
        "child_ranges": [
            "(line 823,col 5)-(line 823,col 45)",
            "(line 824,col 5)-(line 824,col 32)",
            "(line 826,col 5)-(line 826,col 48)",
            "(line 827,col 5)-(line 827,col 31)",
            "(line 829,col 5)-(line 829,col 80)",
            "(line 830,col 5)-(line 830,col 31)",
            "(line 831,col 5)-(line 831,col 32)",
            "(line 833,col 5)-(line 833,col 65)",
            "(line 834,col 5)-(line 834,col 32)",
            "(line 836,col 5)-(line 840,col 26)",
            "(line 841,col 5)-(line 841,col 31)",
            "(line 843,col 5)-(line 843,col 58)",
            "(line 844,col 5)-(line 844,col 32)",
            "(line 846,col 5)-(line 848,col 30)",
            "(line 849,col 5)-(line 849,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCast1()",
        "snippet": "  public void testCast1() {\n    inFunction(\"var x = /** @type {Object} */ (this);\");\n    verify(\"x\", createNullableType(OBJECT_TYPE));\n  }\n",
        "begin_line": 852,
        "end_line": 855,
        "comment": "",
        "child_ranges": [
            "(line 853,col 5)-(line 853,col 56)",
            "(line 854,col 5)-(line 854,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCast2()",
        "snippet": "  public void testCast2() {\n    inFunction(\n        \"/** @return {boolean} */\" +\n        \"Object.prototype.method = function() { return true; };\" +\n        \"var x = /** @type {Object} */ (this).method;\");\n    verify(\n        \"x\",\n        registry.createFunctionType(\n            registry.getNativeObjectType(OBJECT_TYPE),\n            registry.getNativeType(BOOLEAN_TYPE),\n            ImmutableList.<JSType>of() /* params */));\n  }\n",
        "begin_line": 857,
        "end_line": 868,
        "comment": "",
        "child_ranges": [
            "(line 858,col 5)-(line 861,col 56)",
            "(line 862,col 5)-(line 867,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testBackwardsInferenceCall()",
        "snippet": "  public void testBackwardsInferenceCall() {\n    inFunction(\n        \"/** @param {{foo: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"var y = {};\" +\n        \"f(y);\");\n\n    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());\n  }\n",
        "begin_line": 870,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 871,col 5)-(line 875,col 17)",
            "(line 877,col 5)-(line 877,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testBackwardsInferenceNew()",
        "snippet": "  public void testBackwardsInferenceNew() {\n    inFunction(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @param {{foo: (number|undefined)}} x\\n\" +\n        \" */\" +\n        \"function F(x) {}\" +\n        \"var y = {};\" +\n        \"new F(y);\");\n\n    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());\n  }\n",
        "begin_line": 880,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 888,col 21)",
            "(line 890,col 5)-(line 890,col 71)"
        ]
    }
]