[
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestISOPeriodFormat.class);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.TestISOPeriodFormat(java.lang.String)",
        "snippet": "    public TestISOPeriodFormat(String name) {\n        super(name);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 59)",
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 49)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 78,col 9)-(line 78,col 67)",
            "(line 79,col 9)-(line 79,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 47)",
            "(line 84,col 9)-(line 84,col 54)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 42)",
            "(line 87,col 9)-(line 87,col 36)",
            "(line 88,col 9)-(line 88,col 32)",
            "(line 89,col 9)-(line 89,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testSubclassableConstructor()",
        "snippet": "    public void testSubclassableConstructor() {\n        ISOPeriodFormat f = new ISOPeriodFormat() {\n            // test constructor is protected\n        };\n        assertNotNull(f);\n    }\n",
        "begin_line": 93,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 94,col 9)-(line 96,col 10)",
            "(line 97,col 9)-(line 97,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard()",
        "snippet": "    public void testFormatStandard() {\n        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.standard().print(p));\n        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n        assertEquals(\"P1Y2M3W4DT5H6M7S\", ISOPeriodFormat.standard().print(p));\n        \n        p = new Period(0);\n        assertEquals(\"PT0S\", ISOPeriodFormat.standard().print(p));\n        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n        assertEquals(\"PT0M\", ISOPeriodFormat.standard().print(p));\n        \n        assertEquals(\"P1Y4DT5H6M7.008S\", ISOPeriodFormat.standard().print(YEAR_DAY_PERIOD));\n        assertEquals(\"PT0S\", ISOPeriodFormat.standard().print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(\"P1Y2M3W4D\", ISOPeriodFormat.standard().print(DATE_PERIOD));\n        assertEquals(\"PT5H6M7.008S\", ISOPeriodFormat.standard().print(TIME_PERIOD));\n    }\n",
        "begin_line": 101,
        "end_line": 116,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 54)",
            "(line 103,col 9)-(line 103,col 82)",
            "(line 104,col 9)-(line 104,col 47)",
            "(line 105,col 9)-(line 105,col 78)",
            "(line 107,col 9)-(line 107,col 26)",
            "(line 108,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 90)",
            "(line 110,col 9)-(line 110,col 66)",
            "(line 112,col 9)-(line 112,col 92)",
            "(line 113,col 9)-(line 113,col 86)",
            "(line 114,col 9)-(line 114,col 81)",
            "(line 115,col 9)-(line 115,col 84)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative()",
        "snippet": "    public void testFormatStandard_negative() {\n        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n        assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.years(-54);\n        assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(4).withMillis(-8);\n        assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-4).withMillis(8);\n        assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-23);\n        assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.millis(-8);\n        assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n    }\n",
        "begin_line": 118,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 62)",
            "(line 120,col 9)-(line 120,col 89)",
            "(line 122,col 9)-(line 122,col 30)",
            "(line 123,col 9)-(line 123,col 67)",
            "(line 125,col 9)-(line 125,col 45)",
            "(line 126,col 9)-(line 126,col 70)",
            "(line 128,col 9)-(line 128,col 45)",
            "(line 129,col 9)-(line 129,col 71)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 68)",
            "(line 134,col 9)-(line 134,col 30)",
            "(line 135,col 9)-(line 135,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testFormatAlternate()",
        "snippet": "    public void testFormatAlternate() {\n        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n        assertEquals(\"P00010204T050607.008\", ISOPeriodFormat.alternate().print(p));\n        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n        assertEquals(\"P00010204T050607\", ISOPeriodFormat.alternate().print(p));\n        \n        p = new Period(0);\n        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(p));\n        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(p));\n        \n        assertEquals(\"P00010004T050607.008\", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD));\n        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(\"P00010204T000000\", ISOPeriodFormat.alternate().print(DATE_PERIOD));\n        assertEquals(\"P00000000T050607.008\", ISOPeriodFormat.alternate().print(TIME_PERIOD));\n    }\n",
        "begin_line": 139,
        "end_line": 154,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 54)",
            "(line 141,col 9)-(line 141,col 83)",
            "(line 142,col 9)-(line 142,col 47)",
            "(line 143,col 9)-(line 143,col 79)",
            "(line 145,col 9)-(line 145,col 26)",
            "(line 146,col 9)-(line 146,col 79)",
            "(line 147,col 9)-(line 147,col 90)",
            "(line 148,col 9)-(line 148,col 79)",
            "(line 150,col 9)-(line 150,col 97)",
            "(line 151,col 9)-(line 151,col 99)",
            "(line 152,col 9)-(line 152,col 89)",
            "(line 153,col 9)-(line 153,col 93)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testFormatAlternateExtended()",
        "snippet": "    public void testFormatAlternateExtended() {\n        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n        assertEquals(\"P0001-02-04T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(p));\n        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n        assertEquals(\"P0001-02-04T05:06:07\", ISOPeriodFormat.alternateExtended().print(p));\n        \n        p = new Period(0);\n        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(p));\n        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(p));\n        \n        assertEquals(\"P0001-00-04T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(YEAR_DAY_PERIOD));\n        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(\"P0001-02-04T00:00:00\", ISOPeriodFormat.alternateExtended().print(DATE_PERIOD));\n        assertEquals(\"P0000-00-00T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(TIME_PERIOD));\n    }\n",
        "begin_line": 157,
        "end_line": 172,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 54)",
            "(line 159,col 9)-(line 159,col 95)",
            "(line 160,col 9)-(line 160,col 47)",
            "(line 161,col 9)-(line 161,col 91)",
            "(line 163,col 9)-(line 163,col 26)",
            "(line 164,col 9)-(line 164,col 91)",
            "(line 165,col 9)-(line 165,col 90)",
            "(line 166,col 9)-(line 166,col 91)",
            "(line 168,col 9)-(line 168,col 109)",
            "(line 169,col 9)-(line 169,col 111)",
            "(line 170,col 9)-(line 170,col 101)",
            "(line 171,col 9)-(line 171,col 105)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testFormatAlternateWithWeeks()",
        "snippet": "    public void testFormatAlternateWithWeeks() {\n        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n        assertEquals(\"P0001W0304T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(p));\n        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n        assertEquals(\"P0001W0304T050607\", ISOPeriodFormat.alternateWithWeeks().print(p));\n        \n        p = new Period(0);\n        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(p));\n        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(p));\n        \n        assertEquals(\"P0001W0004T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(YEAR_DAY_PERIOD));\n        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(\"P0001W0304T000000\", ISOPeriodFormat.alternateWithWeeks().print(DATE_PERIOD));\n        assertEquals(\"P0000W0000T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(TIME_PERIOD));\n    }\n",
        "begin_line": 175,
        "end_line": 190,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 54)",
            "(line 177,col 9)-(line 177,col 93)",
            "(line 178,col 9)-(line 178,col 47)",
            "(line 179,col 9)-(line 179,col 89)",
            "(line 181,col 9)-(line 181,col 26)",
            "(line 182,col 9)-(line 182,col 89)",
            "(line 183,col 9)-(line 183,col 90)",
            "(line 184,col 9)-(line 184,col 89)",
            "(line 186,col 9)-(line 186,col 107)",
            "(line 187,col 9)-(line 187,col 109)",
            "(line 188,col 9)-(line 188,col 99)",
            "(line 189,col 9)-(line 189,col 103)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestISOPeriodFormat",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
        "signature": "org.joda.time.format.TestISOPeriodFormat.testFormatAlternateExtendedWithWeeks()",
        "snippet": "    public void testFormatAlternateExtendedWithWeeks() {\n        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n        assertEquals(\"P0001-W03-04T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n        assertEquals(\"P0001-W03-04T05:06:07\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n        \n        p = new Period(0);\n        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n        \n        assertEquals(\"P0001-W00-04T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(YEAR_DAY_PERIOD));\n        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(\"P0001-W03-04T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(DATE_PERIOD));\n        assertEquals(\"P0000-W00-00T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(TIME_PERIOD));\n    }\n",
        "begin_line": 193,
        "end_line": 208,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 54)",
            "(line 195,col 9)-(line 195,col 105)",
            "(line 196,col 9)-(line 196,col 47)",
            "(line 197,col 9)-(line 197,col 101)",
            "(line 199,col 9)-(line 199,col 26)",
            "(line 200,col 9)-(line 200,col 101)",
            "(line 201,col 9)-(line 201,col 90)",
            "(line 202,col 9)-(line 202,col 101)",
            "(line 204,col 9)-(line 204,col 119)",
            "(line 205,col 9)-(line 205,col 121)",
            "(line 206,col 9)-(line 206,col 111)",
            "(line 207,col 9)-(line 207,col 115)"
        ]
    }
]