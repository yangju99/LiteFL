[
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestLocalDateTime_Constructors.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.TestLocalDateTime_Constructors(java.lang.String)",
        "snippet": "    public TestLocalDateTime_Constructors(String name) {\n        super(name);\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        zone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(MOSCOW);\n    }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 59)",
            "(line 83,col 9)-(line 83,col 41)",
            "(line 84,col 9)-(line 84,col 40)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(zone);\n        zone = null;\n    }\n",
        "begin_line": 87,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 89,col 38)",
            "(line 90,col 9)-(line 90,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testParse_noFormatter()",
        "snippet": "    public void testParse_noFormatter() throws Throwable {\n        assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse(\"2010-06-30T01:20\"));\n        assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse(\"2010-002T14:50:30.432\"));\n    }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 101)",
            "(line 96,col 9)-(line 96,col 115)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testParse_formatter()",
        "snippet": "    public void testParse_formatter() throws Throwable {\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM HH\").withChronology(ISOChronology.getInstance(PARIS));\n        assertEquals(new LocalDateTime(2010, 6, 30, 13, 0), LocalDateTime.parse(\"2010--30 06 13\", f));\n    }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 123)",
            "(line 101,col 9)-(line 101,col 102)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields()",
        "snippet": "    public void testFactory_fromCalendarFields() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n    }\n",
        "begin_line": 105,
        "end_line": 110,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 75)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 75)",
            "(line 109,col 9)-(line 109,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1()",
        "snippet": "    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n    }\n",
        "begin_line": 112,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 72)",
            "(line 114,col 9)-(line 114,col 52)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 72)",
            "(line 117,col 9)-(line 117,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3()",
        "snippet": "    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n    }\n",
        "begin_line": 120,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 72)",
            "(line 122,col 9)-(line 122,col 52)",
            "(line 123,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 73)",
            "(line 125,col 9)-(line 125,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_null()",
        "snippet": "    public void testFactory_fromCalendarFields_null() throws Exception {\n        try {\n            LocalDateTime.fromCalendarFields((Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 128,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 132,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_after1970()",
        "snippet": "    public void testFactory_fromDateFields_after1970() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 136,
        "end_line": 141,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 75)",
            "(line 138,col 9)-(line 138,col 41)",
            "(line 139,col 9)-(line 139,col 75)",
            "(line 140,col 9)-(line 140,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_before1970()",
        "snippet": "    public void testFactory_fromDateFields_before1970() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 143,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 75)",
            "(line 145,col 9)-(line 145,col 41)",
            "(line 146,col 9)-(line 146,col 75)",
            "(line 147,col 9)-(line 147,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1()",
        "snippet": "    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 72)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 72)",
            "(line 155,col 9)-(line 155,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3()",
        "snippet": "    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 72)",
            "(line 160,col 9)-(line 160,col 52)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 73)",
            "(line 163,col 9)-(line 163,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_null()",
        "snippet": "    public void testFactory_fromDateFields_null() throws Exception {\n        try {\n            LocalDateTime.fromDateFields((Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 166,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 170,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor()",
        "snippet": "    public void testConstructor() throws Throwable {\n        LocalDateTime test = new LocalDateTime();\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n        assertEquals(test, LocalDateTime.now());\n    }\n",
        "begin_line": 174,
        "end_line": 185,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 49)",
            "(line 176,col 9)-(line 176,col 52)",
            "(line 177,col 9)-(line 177,col 43)",
            "(line 178,col 9)-(line 178,col 47)",
            "(line 179,col 9)-(line 179,col 46)",
            "(line 180,col 9)-(line 180,col 62)",
            "(line 181,col 9)-(line 181,col 49)",
            "(line 182,col 9)-(line 182,col 51)",
            "(line 183,col 9)-(line 183,col 51)",
            "(line 184,col 9)-(line 184,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_DateTimeZone()",
        "snippet": "    public void testConstructor_DateTimeZone() throws Throwable {\n        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n        // 23:59 in London is 00:59 the following day in Paris\n        \n        LocalDateTime test = new LocalDateTime(LONDON);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(8, test.getDayOfMonth());\n        assertEquals(23, test.getHourOfDay());\n        assertEquals(59, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n        assertEquals(test, LocalDateTime.now(LONDON));\n        \n        test = new LocalDateTime(PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(0, test.getHourOfDay());\n        assertEquals(59, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n        assertEquals(test, LocalDateTime.now(PARIS));\n    }\n",
        "begin_line": 188,
        "end_line": 214,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 69)",
            "(line 190,col 9)-(line 190,col 60)",
            "(line 193,col 9)-(line 193,col 55)",
            "(line 194,col 9)-(line 194,col 52)",
            "(line 195,col 9)-(line 195,col 43)",
            "(line 196,col 9)-(line 196,col 47)",
            "(line 197,col 9)-(line 197,col 46)",
            "(line 198,col 9)-(line 198,col 46)",
            "(line 199,col 9)-(line 199,col 49)",
            "(line 200,col 9)-(line 200,col 50)",
            "(line 201,col 9)-(line 201,col 50)",
            "(line 202,col 9)-(line 202,col 54)",
            "(line 204,col 9)-(line 204,col 40)",
            "(line 205,col 9)-(line 205,col 52)",
            "(line 206,col 9)-(line 206,col 43)",
            "(line 207,col 9)-(line 207,col 47)",
            "(line 208,col 9)-(line 208,col 46)",
            "(line 209,col 9)-(line 209,col 45)",
            "(line 210,col 9)-(line 210,col 49)",
            "(line 211,col 9)-(line 211,col 50)",
            "(line 212,col 9)-(line 212,col 50)",
            "(line 213,col 9)-(line 213,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullDateTimeZone()",
        "snippet": "    public void testConstructor_nullDateTimeZone() throws Throwable {\n        LocalDateTime test = new LocalDateTime((DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 216,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 68)",
            "(line 218,col 9)-(line 218,col 52)",
            "(line 219,col 9)-(line 219,col 43)",
            "(line 220,col 9)-(line 220,col 47)",
            "(line 221,col 9)-(line 221,col 46)",
            "(line 222,col 9)-(line 222,col 62)",
            "(line 223,col 9)-(line 223,col 49)",
            "(line 224,col 9)-(line 224,col 51)",
            "(line 225,col 9)-(line 225,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Chronology()",
        "snippet": "    public void testConstructor_Chronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime(GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n        assertEquals(test, LocalDateTime.now(GREGORIAN_PARIS));\n    }\n",
        "begin_line": 229,
        "end_line": 240,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 64)",
            "(line 231,col 9)-(line 231,col 58)",
            "(line 232,col 9)-(line 232,col 43)",
            "(line 233,col 9)-(line 233,col 47)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 61)",
            "(line 236,col 9)-(line 236,col 49)",
            "(line 237,col 9)-(line 237,col 51)",
            "(line 238,col 9)-(line 238,col 51)",
            "(line 239,col 9)-(line 239,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullChronology()",
        "snippet": "    public void testConstructor_nullChronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime((Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 242,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 66)",
            "(line 244,col 9)-(line 244,col 52)",
            "(line 245,col 9)-(line 245,col 43)",
            "(line 246,col 9)-(line 246,col 47)",
            "(line 247,col 9)-(line 247,col 46)",
            "(line 248,col 9)-(line 248,col 62)",
            "(line 249,col 9)-(line 249,col 49)",
            "(line 250,col 9)-(line 250,col 51)",
            "(line 251,col 9)-(line 251,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long1()",
        "snippet": "    public void testConstructor_long1() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME1);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 255,
        "end_line": 265,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 59)",
            "(line 257,col 9)-(line 257,col 52)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 47)",
            "(line 260,col 9)-(line 260,col 46)",
            "(line 261,col 9)-(line 261,col 62)",
            "(line 262,col 9)-(line 262,col 49)",
            "(line 263,col 9)-(line 263,col 50)",
            "(line 264,col 9)-(line 264,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long2()",
        "snippet": "    public void testConstructor_long2() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME2);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1971, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(7, test.getDayOfMonth());\n        assertEquals(14 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(28, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 267,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 59)",
            "(line 269,col 9)-(line 269,col 52)",
            "(line 270,col 9)-(line 270,col 43)",
            "(line 271,col 9)-(line 271,col 47)",
            "(line 272,col 9)-(line 272,col 46)",
            "(line 273,col 9)-(line 273,col 62)",
            "(line 274,col 9)-(line 274,col 49)",
            "(line 275,col 9)-(line 275,col 50)",
            "(line 276,col 9)-(line 276,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long1_DateTimeZone()",
        "snippet": "    public void testConstructor_long1_DateTimeZone() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME1, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 280,
        "end_line": 290,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 66)",
            "(line 282,col 9)-(line 282,col 52)",
            "(line 283,col 9)-(line 283,col 43)",
            "(line 284,col 9)-(line 284,col 47)",
            "(line 285,col 9)-(line 285,col 46)",
            "(line 286,col 9)-(line 286,col 61)",
            "(line 287,col 9)-(line 287,col 49)",
            "(line 288,col 9)-(line 288,col 50)",
            "(line 289,col 9)-(line 289,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long2_DateTimeZone()",
        "snippet": "    public void testConstructor_long2_DateTimeZone() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME2, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1971, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(7, test.getDayOfMonth());\n        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(28, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 292,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 66)",
            "(line 294,col 9)-(line 294,col 52)",
            "(line 295,col 9)-(line 295,col 43)",
            "(line 296,col 9)-(line 296,col 47)",
            "(line 297,col 9)-(line 297,col 46)",
            "(line 298,col 9)-(line 298,col 61)",
            "(line 299,col 9)-(line 299,col 49)",
            "(line 300,col 9)-(line 300,col 50)",
            "(line 301,col 9)-(line 301,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long_nullDateTimeZone()",
        "snippet": "    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME1, (DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 304,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 80)",
            "(line 306,col 9)-(line 306,col 52)",
            "(line 307,col 9)-(line 307,col 43)",
            "(line 308,col 9)-(line 308,col 47)",
            "(line 309,col 9)-(line 309,col 46)",
            "(line 310,col 9)-(line 310,col 62)",
            "(line 311,col 9)-(line 311,col 49)",
            "(line 312,col 9)-(line 312,col 50)",
            "(line 313,col 9)-(line 313,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long1_Chronology()",
        "snippet": "    public void testConstructor_long1_Chronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME1, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 317,
        "end_line": 327,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 76)",
            "(line 319,col 9)-(line 319,col 58)",
            "(line 320,col 9)-(line 320,col 43)",
            "(line 321,col 9)-(line 321,col 47)",
            "(line 322,col 9)-(line 322,col 46)",
            "(line 323,col 9)-(line 323,col 61)",
            "(line 324,col 9)-(line 324,col 49)",
            "(line 325,col 9)-(line 325,col 50)",
            "(line 326,col 9)-(line 326,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long2_Chronology()",
        "snippet": "    public void testConstructor_long2_Chronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME2, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1971, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(7, test.getDayOfMonth());\n        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(28, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 329,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 76)",
            "(line 331,col 9)-(line 331,col 58)",
            "(line 332,col 9)-(line 332,col 43)",
            "(line 333,col 9)-(line 333,col 47)",
            "(line 334,col 9)-(line 334,col 46)",
            "(line 335,col 9)-(line 335,col 61)",
            "(line 336,col 9)-(line 336,col 49)",
            "(line 337,col 9)-(line 337,col 50)",
            "(line 338,col 9)-(line 338,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_long_nullChronology()",
        "snippet": "    public void testConstructor_long_nullChronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime(TEST_TIME1, (Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 341,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 78)",
            "(line 343,col 9)-(line 343,col 52)",
            "(line 344,col 9)-(line 344,col 43)",
            "(line 345,col 9)-(line 345,col 47)",
            "(line 346,col 9)-(line 346,col 46)",
            "(line 347,col 9)-(line 347,col 62)",
            "(line 348,col 9)-(line 348,col 49)",
            "(line 349,col 9)-(line 349,col 50)",
            "(line 350,col 9)-(line 350,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object1()",
        "snippet": "    public void testConstructor_Object1() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDateTime test = new LocalDateTime(date);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 354,
        "end_line": 365,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 41)",
            "(line 356,col 9)-(line 356,col 53)",
            "(line 357,col 9)-(line 357,col 52)",
            "(line 358,col 9)-(line 358,col 43)",
            "(line 359,col 9)-(line 359,col 47)",
            "(line 360,col 9)-(line 360,col 46)",
            "(line 361,col 9)-(line 361,col 62)",
            "(line 362,col 9)-(line 362,col 49)",
            "(line 363,col 9)-(line 363,col 50)",
            "(line 364,col 9)-(line 364,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullObject()",
        "snippet": "    public void testConstructor_nullObject() throws Throwable {\n        LocalDateTime test = new LocalDateTime((Object) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 367,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 62)",
            "(line 369,col 9)-(line 369,col 52)",
            "(line 370,col 9)-(line 370,col 43)",
            "(line 371,col 9)-(line 371,col 47)",
            "(line 372,col 9)-(line 372,col 46)",
            "(line 373,col 9)-(line 373,col 62)",
            "(line 374,col 9)-(line 374,col 49)",
            "(line 375,col 9)-(line 375,col 51)",
            "(line 376,col 9)-(line 376,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectString1()",
        "snippet": "    public void testConstructor_ObjectString1() throws Throwable {\n        LocalDateTime test = new LocalDateTime(\"1972-04-06\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(0, test.getHourOfDay());\n        assertEquals(0, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 379,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 61)",
            "(line 381,col 9)-(line 381,col 52)",
            "(line 382,col 9)-(line 382,col 43)",
            "(line 383,col 9)-(line 383,col 47)",
            "(line 384,col 9)-(line 384,col 46)",
            "(line 385,col 9)-(line 385,col 45)",
            "(line 386,col 9)-(line 386,col 48)",
            "(line 387,col 9)-(line 387,col 50)",
            "(line 388,col 9)-(line 388,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectString2()",
        "snippet": "    public void testConstructor_ObjectString2() throws Throwable {\n        LocalDateTime test = new LocalDateTime(\"1972-037\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(2, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(0, test.getHourOfDay());\n        assertEquals(0, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 391,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 59)",
            "(line 393,col 9)-(line 393,col 52)",
            "(line 394,col 9)-(line 394,col 43)",
            "(line 395,col 9)-(line 395,col 47)",
            "(line 396,col 9)-(line 396,col 46)",
            "(line 397,col 9)-(line 397,col 45)",
            "(line 398,col 9)-(line 398,col 48)",
            "(line 399,col 9)-(line 399,col 50)",
            "(line 400,col 9)-(line 400,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectString3()",
        "snippet": "    public void testConstructor_ObjectString3() throws Throwable {\n        LocalDateTime test = new LocalDateTime(\"1972-04-06T10:20:30.040\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 403,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 74)",
            "(line 405,col 9)-(line 405,col 52)",
            "(line 406,col 9)-(line 406,col 43)",
            "(line 407,col 9)-(line 407,col 47)",
            "(line 408,col 9)-(line 408,col 46)",
            "(line 409,col 9)-(line 409,col 46)",
            "(line 410,col 9)-(line 410,col 49)",
            "(line 411,col 9)-(line 411,col 51)",
            "(line 412,col 9)-(line 412,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectString4()",
        "snippet": "    public void testConstructor_ObjectString4() throws Throwable {\n        LocalDateTime test = new LocalDateTime(\"1972-04-06T10:20\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 415,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 67)",
            "(line 417,col 9)-(line 417,col 52)",
            "(line 418,col 9)-(line 418,col 43)",
            "(line 419,col 9)-(line 419,col 47)",
            "(line 420,col 9)-(line 420,col 46)",
            "(line 421,col 9)-(line 421,col 46)",
            "(line 422,col 9)-(line 422,col 49)",
            "(line 423,col 9)-(line 423,col 50)",
            "(line 424,col 9)-(line 424,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectStringEx1()",
        "snippet": "    public void testConstructor_ObjectStringEx1() throws Throwable {\n        try {\n            new LocalDateTime(\"1970-04-06T+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 427,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 428,col 9)-(line 431,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectStringEx2()",
        "snippet": "    public void testConstructor_ObjectStringEx2() throws Throwable {\n        try {\n            new LocalDateTime(\"1970-04-06T10:20:30.040+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 434,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 435,col 9)-(line 438,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectStringEx3()",
        "snippet": "    public void testConstructor_ObjectStringEx3() throws Throwable {\n        try {\n            new LocalDateTime(\"T10:20:30.040\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 441,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 445,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectStringEx4()",
        "snippet": "    public void testConstructor_ObjectStringEx4() throws Throwable {\n        try {\n            new LocalDateTime(\"T10:20:30.040+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 448,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 452,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectStringEx5()",
        "snippet": "    public void testConstructor_ObjectStringEx5() throws Throwable {\n        try {\n            new LocalDateTime(\"10:20:30.040\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 455,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 459,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectStringEx6()",
        "snippet": "    public void testConstructor_ObjectStringEx6() throws Throwable {\n        try {\n            new LocalDateTime(\"10:20:30.040+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 462,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 466,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectLocalDateTime()",
        "snippet": "    public void testConstructor_ObjectLocalDateTime() throws Throwable {\n        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);\n        LocalDateTime test = new LocalDateTime(dt);\n        assertEquals(BUDDHIST_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 469,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 87)",
            "(line 471,col 9)-(line 471,col 51)",
            "(line 472,col 9)-(line 472,col 57)",
            "(line 473,col 9)-(line 473,col 43)",
            "(line 474,col 9)-(line 474,col 47)",
            "(line 475,col 9)-(line 475,col 46)",
            "(line 476,col 9)-(line 476,col 46)",
            "(line 477,col 9)-(line 477,col 49)",
            "(line 478,col 9)-(line 478,col 51)",
            "(line 479,col 9)-(line 479,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectLocalDate()",
        "snippet": "    public void testConstructor_ObjectLocalDate() throws Throwable {\n        LocalDate date = new LocalDate(1970, 5, 6);\n        try {\n            new LocalDateTime(date);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 482,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 51)",
            "(line 484,col 9)-(line 487,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_ObjectLocalTime()",
        "snippet": "    public void testConstructor_ObjectLocalTime() throws Throwable {\n        LocalTime time = new LocalTime(10, 20, 30, 40);\n        try {\n            new LocalDateTime(time);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 55)",
            "(line 492,col 9)-(line 495,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_DateTimeZone()",
        "snippet": "    public void testConstructor_Object_DateTimeZone() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDateTime test = new LocalDateTime(date, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 499,
        "end_line": 510,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 500,col 9)-(line 500,col 41)",
            "(line 501,col 9)-(line 501,col 60)",
            "(line 502,col 9)-(line 502,col 52)",
            "(line 503,col 9)-(line 503,col 43)",
            "(line 504,col 9)-(line 504,col 47)",
            "(line 505,col 9)-(line 505,col 46)",
            "(line 506,col 9)-(line 506,col 61)",
            "(line 507,col 9)-(line 507,col 49)",
            "(line 508,col 9)-(line 508,col 50)",
            "(line 509,col 9)-(line 509,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_DateTimeZoneMoscow()",
        "snippet": "    public void testConstructor_Object_DateTimeZoneMoscow() throws Throwable {\n        LocalDateTime test = new LocalDateTime(\"1970-04-06T12:24:00\", MOSCOW);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 512,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 513,col 9)-(line 513,col 78)",
            "(line 514,col 9)-(line 514,col 52)",
            "(line 515,col 9)-(line 515,col 43)",
            "(line 516,col 9)-(line 516,col 47)",
            "(line 517,col 9)-(line 517,col 46)",
            "(line 518,col 9)-(line 518,col 46)",
            "(line 519,col 9)-(line 519,col 49)",
            "(line 520,col 9)-(line 520,col 50)",
            "(line 521,col 9)-(line 521,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_DateTimeZoneMoscowBadDateTime()",
        "snippet": "    public void testConstructor_Object_DateTimeZoneMoscowBadDateTime() throws Throwable {\n        // 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00\n        // 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00\n        \n        // when a DST non-existing time is passed in, it should still work (ie. zone ignored)\n        LocalDateTime test = new LocalDateTime(\"1981-04-01T00:30:00\", MOSCOW);  // doesnt exist\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1981, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(1, test.getDayOfMonth());\n        assertEquals(0, test.getHourOfDay());\n        assertEquals(30, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 524,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 529,col 9)-(line 529,col 78)",
            "(line 530,col 9)-(line 530,col 52)",
            "(line 531,col 9)-(line 531,col 43)",
            "(line 532,col 9)-(line 532,col 47)",
            "(line 533,col 9)-(line 533,col 46)",
            "(line 534,col 9)-(line 534,col 45)",
            "(line 535,col 9)-(line 535,col 49)",
            "(line 536,col 9)-(line 536,col 50)",
            "(line 537,col 9)-(line 537,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullObject_DateTimeZone()",
        "snippet": "    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n        LocalDateTime test = new LocalDateTime((Object) null, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 540,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 541,col 9)-(line 541,col 69)",
            "(line 542,col 9)-(line 542,col 52)",
            "(line 543,col 9)-(line 543,col 43)",
            "(line 544,col 9)-(line 544,col 47)",
            "(line 545,col 9)-(line 545,col 46)",
            "(line 546,col 9)-(line 546,col 61)",
            "(line 547,col 9)-(line 547,col 49)",
            "(line 548,col 9)-(line 548,col 51)",
            "(line 549,col 9)-(line 549,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_nullDateTimeZone()",
        "snippet": "    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 552,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 553,col 9)-(line 553,col 41)",
            "(line 554,col 9)-(line 554,col 74)",
            "(line 555,col 9)-(line 555,col 52)",
            "(line 556,col 9)-(line 556,col 43)",
            "(line 557,col 9)-(line 557,col 47)",
            "(line 558,col 9)-(line 558,col 46)",
            "(line 559,col 9)-(line 559,col 62)",
            "(line 560,col 9)-(line 560,col 49)",
            "(line 561,col 9)-(line 561,col 50)",
            "(line 562,col 9)-(line 562,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullObject_nullDateTimeZone()",
        "snippet": "    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n        LocalDateTime test = new LocalDateTime((Object) null, (DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 565,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 566,col 9)-(line 566,col 83)",
            "(line 567,col 9)-(line 567,col 52)",
            "(line 568,col 9)-(line 568,col 43)",
            "(line 569,col 9)-(line 569,col 47)",
            "(line 570,col 9)-(line 570,col 46)",
            "(line 571,col 9)-(line 571,col 62)",
            "(line 572,col 9)-(line 572,col 49)",
            "(line 573,col 9)-(line 573,col 51)",
            "(line 574,col 9)-(line 574,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_Chronology()",
        "snippet": "    public void testConstructor_Object_Chronology() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDateTime test = new LocalDateTime(date, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 578,
        "end_line": 589,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 579,col 9)-(line 579,col 41)",
            "(line 580,col 9)-(line 580,col 70)",
            "(line 581,col 9)-(line 581,col 58)",
            "(line 582,col 9)-(line 582,col 43)",
            "(line 583,col 9)-(line 583,col 47)",
            "(line 584,col 9)-(line 584,col 46)",
            "(line 585,col 9)-(line 585,col 61)",
            "(line 586,col 9)-(line 586,col 49)",
            "(line 587,col 9)-(line 587,col 50)",
            "(line 588,col 9)-(line 588,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_ChronologyMoscow()",
        "snippet": "    public void testConstructor_Object_ChronologyMoscow() throws Throwable {\n        LocalDateTime test = new LocalDateTime(\"1970-04-06T12:24:00\", GREGORIAN_MOSCOW);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 591,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 592,col 9)-(line 592,col 88)",
            "(line 593,col 9)-(line 593,col 58)",
            "(line 594,col 9)-(line 594,col 43)",
            "(line 595,col 9)-(line 595,col 47)",
            "(line 596,col 9)-(line 596,col 46)",
            "(line 597,col 9)-(line 597,col 46)",
            "(line 598,col 9)-(line 598,col 49)",
            "(line 599,col 9)-(line 599,col 50)",
            "(line 600,col 9)-(line 600,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_ChronologyMoscowBadDateTime()",
        "snippet": "    public void testConstructor_Object_ChronologyMoscowBadDateTime() throws Throwable {\n        // 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00\n        // 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00\n        \n        // when a DST non-existing time is passed in, it should still work (ie. zone ignored)\n        LocalDateTime test = new LocalDateTime(\"1981-04-01T00:30:00\", GREGORIAN_MOSCOW);  // doesnt exist\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1981, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(1, test.getDayOfMonth());\n        assertEquals(0, test.getHourOfDay());\n        assertEquals(30, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 603,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 608,col 9)-(line 608,col 88)",
            "(line 609,col 9)-(line 609,col 58)",
            "(line 610,col 9)-(line 610,col 43)",
            "(line 611,col 9)-(line 611,col 47)",
            "(line 612,col 9)-(line 612,col 46)",
            "(line 613,col 9)-(line 613,col 45)",
            "(line 614,col 9)-(line 614,col 49)",
            "(line 615,col 9)-(line 615,col 50)",
            "(line 616,col 9)-(line 616,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullObject_Chronology()",
        "snippet": "    public void testConstructor_nullObject_Chronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime((Object) null, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 619,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 79)",
            "(line 621,col 9)-(line 621,col 58)",
            "(line 622,col 9)-(line 622,col 43)",
            "(line 623,col 9)-(line 623,col 47)",
            "(line 624,col 9)-(line 624,col 46)",
            "(line 625,col 9)-(line 625,col 61)",
            "(line 626,col 9)-(line 626,col 49)",
            "(line 627,col 9)-(line 627,col 51)",
            "(line 628,col 9)-(line 628,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_nullChronology()",
        "snippet": "    public void testConstructor_Object_nullChronology() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDateTime test = new LocalDateTime(date, (Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(24, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 631,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 632,col 9)-(line 632,col 41)",
            "(line 633,col 9)-(line 633,col 72)",
            "(line 634,col 9)-(line 634,col 52)",
            "(line 635,col 9)-(line 635,col 43)",
            "(line 636,col 9)-(line 636,col 47)",
            "(line 637,col 9)-(line 637,col 46)",
            "(line 638,col 9)-(line 638,col 62)",
            "(line 639,col 9)-(line 639,col 49)",
            "(line 640,col 9)-(line 640,col 50)",
            "(line 641,col 9)-(line 641,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_nullObject_nullChronology()",
        "snippet": "    public void testConstructor_nullObject_nullChronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime((Object) null, (Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n    }\n",
        "begin_line": 644,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 81)",
            "(line 646,col 9)-(line 646,col 52)",
            "(line 647,col 9)-(line 647,col 43)",
            "(line 648,col 9)-(line 648,col 47)",
            "(line 649,col 9)-(line 649,col 46)",
            "(line 650,col 9)-(line 650,col 62)",
            "(line 651,col 9)-(line 651,col 49)",
            "(line 652,col 9)-(line 652,col 51)",
            "(line 653,col 9)-(line 653,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_int_int_int_int_int()",
        "snippet": "    public void testConstructor_int_int_int_int_int() throws Throwable {\n        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(0, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 657,
        "end_line": 667,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 658,col 9)-(line 658,col 67)",
            "(line 659,col 9)-(line 659,col 52)",
            "(line 660,col 9)-(line 660,col 43)",
            "(line 661,col 9)-(line 661,col 47)",
            "(line 662,col 9)-(line 662,col 46)",
            "(line 663,col 9)-(line 663,col 46)",
            "(line 664,col 9)-(line 664,col 49)",
            "(line 665,col 9)-(line 665,col 50)",
            "(line 666,col 9)-(line 666,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_int_int_int_int_int_int()",
        "snippet": "    public void testConstructor_int_int_int_int_int_int() throws Throwable {\n        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(0, test.getMillisOfSecond());\n    }\n",
        "begin_line": 670,
        "end_line": 680,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 671,col 9)-(line 671,col 71)",
            "(line 672,col 9)-(line 672,col 52)",
            "(line 673,col 9)-(line 673,col 43)",
            "(line 674,col 9)-(line 674,col 47)",
            "(line 675,col 9)-(line 675,col 46)",
            "(line 676,col 9)-(line 676,col 46)",
            "(line 677,col 9)-(line 677,col 49)",
            "(line 678,col 9)-(line 678,col 51)",
            "(line 679,col 9)-(line 679,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_int_int_int_int_int_int_int()",
        "snippet": "    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n        try {\n            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40);\n        try {\n            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 683,
        "end_line": 722,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 684,col 9)-(line 684,col 75)",
            "(line 685,col 9)-(line 685,col 52)",
            "(line 686,col 9)-(line 686,col 43)",
            "(line 687,col 9)-(line 687,col 47)",
            "(line 688,col 9)-(line 688,col 46)",
            "(line 689,col 9)-(line 689,col 46)",
            "(line 690,col 9)-(line 690,col 49)",
            "(line 691,col 9)-(line 691,col 51)",
            "(line 692,col 9)-(line 692,col 51)",
            "(line 693,col 9)-(line 696,col 48)",
            "(line 697,col 9)-(line 700,col 48)",
            "(line 701,col 9)-(line 704,col 48)",
            "(line 705,col 9)-(line 708,col 48)",
            "(line 709,col 9)-(line 712,col 48)",
            "(line 713,col 9)-(line 716,col 48)",
            "(line 717,col 9)-(line 717,col 55)",
            "(line 718,col 9)-(line 721,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_int_int_int_Chronology()",
        "snippet": "    public void testConstructor_int_int_int_Chronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(10, test.getHourOfDay());  // PARIS has no effect\n        assertEquals(20, test.getMinuteOfHour());\n        assertEquals(30, test.getSecondOfMinute());\n        assertEquals(40, test.getMillisOfSecond());\n        try {\n            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40, GREGORIAN_PARIS);\n        try {\n            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 724,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 725,col 9)-(line 725,col 92)",
            "(line 726,col 9)-(line 726,col 58)",
            "(line 727,col 9)-(line 727,col 43)",
            "(line 728,col 9)-(line 728,col 47)",
            "(line 729,col 9)-(line 729,col 46)",
            "(line 730,col 9)-(line 730,col 46)",
            "(line 731,col 9)-(line 731,col 49)",
            "(line 732,col 9)-(line 732,col 51)",
            "(line 733,col 9)-(line 733,col 51)",
            "(line 734,col 9)-(line 737,col 48)",
            "(line 738,col 9)-(line 741,col 48)",
            "(line 742,col 9)-(line 745,col 48)",
            "(line 746,col 9)-(line 749,col 48)",
            "(line 750,col 9)-(line 753,col 48)",
            "(line 754,col 9)-(line 757,col 48)",
            "(line 758,col 9)-(line 758,col 72)",
            "(line 759,col 9)-(line 762,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDateTime_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
        "signature": "org.joda.time.TestLocalDateTime_Constructors.testConstructor_int_int_int_nullChronology()",
        "snippet": "    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 765,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 766,col 9)-(line 766,col 81)",
            "(line 767,col 9)-(line 767,col 52)",
            "(line 768,col 9)-(line 768,col 43)",
            "(line 769,col 9)-(line 769,col 47)",
            "(line 770,col 9)-(line 770,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestLocalDate_Constructors.class);\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.TestLocalDate_Constructors(java.lang.String)",
        "snippet": "    public TestLocalDate_Constructors(String name) {\n        super(name);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        zone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(LONDON);\n    }\n",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 75,col 41)",
            "(line 76,col 9)-(line 76,col 40)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(zone);\n        zone = null;\n    }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 47)",
            "(line 81,col 9)-(line 81,col 38)",
            "(line 82,col 9)-(line 82,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testParse_noFormatter()",
        "snippet": "    public void testParse_noFormatter() throws Throwable {\n        assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse(\"2010-06-30\"));\n        assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse(\"2010-002\"));\n    }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 80)",
            "(line 88,col 9)-(line 88,col 77)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testParse_formatter()",
        "snippet": "    public void testParse_formatter() throws Throwable {\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM\").withChronology(ISOChronology.getInstance(PARIS));\n        assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse(\"2010--30 06\", f));\n    }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 120)",
            "(line 93,col 9)-(line 93,col 84)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields()",
        "snippet": "    public void testFactory_fromCalendarFields() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(1970, 2, 3);\n        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n    }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 75)",
            "(line 99,col 9)-(line 99,col 41)",
            "(line 100,col 9)-(line 100,col 55)",
            "(line 101,col 9)-(line 101,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1()",
        "snippet": "    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(0, 2, 3);\n        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n    }\n",
        "begin_line": 104,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 72)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 52)",
            "(line 109,col 9)-(line 109,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3()",
        "snippet": "    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(-2, 2, 3);\n        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n    }\n",
        "begin_line": 112,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 72)",
            "(line 114,col 9)-(line 114,col 52)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_null()",
        "snippet": "    public void testFactory_fromCalendarFields_null() throws Exception {\n        try {\n            LocalDate.fromCalendarFields((Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 124,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_after1970()",
        "snippet": "    public void testFactory_fromDateFields_after1970() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(1970, 2, 3);\n        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 128,
        "end_line": 133,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 75)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 131,col 9)-(line 131,col 55)",
            "(line 132,col 9)-(line 132,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_before1970()",
        "snippet": "    public void testFactory_fromDateFields_before1970() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(1969, 2, 3);\n        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 135,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 75)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 55)",
            "(line 139,col 9)-(line 139,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1()",
        "snippet": "    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(0, 2, 3);\n        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 72)",
            "(line 144,col 9)-(line 144,col 52)",
            "(line 145,col 9)-(line 145,col 41)",
            "(line 146,col 9)-(line 146,col 52)",
            "(line 147,col 9)-(line 147,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3()",
        "snippet": "    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(-2, 2, 3);\n        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n    }\n",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 72)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 53)",
            "(line 155,col 9)-(line 155,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_null()",
        "snippet": "    public void testFactory_fromDateFields_null() throws Exception {\n        try {\n            LocalDate.fromDateFields((Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 162,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor()",
        "snippet": "    public void testConstructor() throws Throwable {\n        LocalDate test = new LocalDate();\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(test, LocalDate.now());\n    }\n",
        "begin_line": 166,
        "end_line": 173,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 41)",
            "(line 168,col 9)-(line 168,col 52)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 47)",
            "(line 171,col 9)-(line 171,col 46)",
            "(line 172,col 9)-(line 172,col 44)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_DateTimeZone()",
        "snippet": "    public void testConstructor_DateTimeZone() throws Throwable {\n        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n        // 23:59 in London is 00:59 the following day in Paris\n        \n        LocalDate test = new LocalDate(LONDON);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(8, test.getDayOfMonth());\n        assertEquals(test, LocalDate.now(LONDON));\n        \n        test = new LocalDate(PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(test, LocalDate.now(PARIS));\n    }\n",
        "begin_line": 175,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 69)",
            "(line 177,col 9)-(line 177,col 60)",
            "(line 180,col 9)-(line 180,col 47)",
            "(line 181,col 9)-(line 181,col 52)",
            "(line 182,col 9)-(line 182,col 43)",
            "(line 183,col 9)-(line 183,col 47)",
            "(line 184,col 9)-(line 184,col 46)",
            "(line 185,col 9)-(line 185,col 50)",
            "(line 187,col 9)-(line 187,col 36)",
            "(line 188,col 9)-(line 188,col 52)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 190,col 9)-(line 190,col 47)",
            "(line 191,col 9)-(line 191,col 46)",
            "(line 192,col 9)-(line 192,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullDateTimeZone()",
        "snippet": "    public void testConstructor_nullDateTimeZone() throws Throwable {\n        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n        // 23:59 in London is 00:59 the following day in Paris\n        \n        LocalDate test = new LocalDate((DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2005, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(8, test.getDayOfMonth());\n    }\n",
        "begin_line": 195,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 69)",
            "(line 197,col 9)-(line 197,col 60)",
            "(line 200,col 9)-(line 200,col 60)",
            "(line 201,col 9)-(line 201,col 52)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 203,col 9)-(line 203,col 47)",
            "(line 204,col 9)-(line 204,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_Chronology()",
        "snippet": "    public void testConstructor_Chronology() throws Throwable {\n        LocalDate test = new LocalDate(GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(test, LocalDate.now(GREGORIAN_PARIS));\n    }\n",
        "begin_line": 207,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 56)",
            "(line 209,col 9)-(line 209,col 58)",
            "(line 210,col 9)-(line 210,col 43)",
            "(line 211,col 9)-(line 211,col 47)",
            "(line 212,col 9)-(line 212,col 46)",
            "(line 213,col 9)-(line 213,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullChronology()",
        "snippet": "    public void testConstructor_nullChronology() throws Throwable {\n        LocalDate test = new LocalDate((Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 216,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 58)",
            "(line 218,col 9)-(line 218,col 52)",
            "(line 219,col 9)-(line 219,col 43)",
            "(line 220,col 9)-(line 220,col 47)",
            "(line 221,col 9)-(line 221,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long1()",
        "snippet": "    public void testConstructor_long1() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME1);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 225,
        "end_line": 231,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 51)",
            "(line 227,col 9)-(line 227,col 52)",
            "(line 228,col 9)-(line 228,col 43)",
            "(line 229,col 9)-(line 229,col 47)",
            "(line 230,col 9)-(line 230,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long2()",
        "snippet": "    public void testConstructor_long2() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME2);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1971, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(7, test.getDayOfMonth());\n    }\n",
        "begin_line": 233,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 51)",
            "(line 235,col 9)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 43)",
            "(line 237,col 9)-(line 237,col 47)",
            "(line 238,col 9)-(line 238,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long1_DateTimeZone()",
        "snippet": "    public void testConstructor_long1_DateTimeZone() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME1, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n        assertEquals(TEST_TIME1_ROUNDED, test.getLocalMillis());\n    }\n",
        "begin_line": 241,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 58)",
            "(line 243,col 9)-(line 243,col 52)",
            "(line 244,col 9)-(line 244,col 43)",
            "(line 245,col 9)-(line 245,col 47)",
            "(line 246,col 9)-(line 246,col 46)",
            "(line 247,col 9)-(line 247,col 64)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long2_DateTimeZone()",
        "snippet": "    public void testConstructor_long2_DateTimeZone() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME2, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1971, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(7, test.getDayOfMonth());\n    }\n",
        "begin_line": 250,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 58)",
            "(line 252,col 9)-(line 252,col 52)",
            "(line 253,col 9)-(line 253,col 43)",
            "(line 254,col 9)-(line 254,col 47)",
            "(line 255,col 9)-(line 255,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long3_DateTimeZone()",
        "snippet": "    public void testConstructor_long3_DateTimeZone() throws Throwable {\n        DateTime dt = new DateTime(2006, 6, 9, 0, 0, 0, 0, PARIS);\n        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);\n        \n        LocalDate test = new LocalDate(dt.getMillis(), PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2006, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n    }\n",
        "begin_line": 258,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 66)",
            "(line 260,col 9)-(line 260,col 80)",
            "(line 262,col 9)-(line 262,col 62)",
            "(line 263,col 9)-(line 263,col 52)",
            "(line 264,col 9)-(line 264,col 43)",
            "(line 265,col 9)-(line 265,col 47)",
            "(line 266,col 9)-(line 266,col 46)",
            "(line 267,col 9)-(line 267,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long4_DateTimeZone()",
        "snippet": "    public void testConstructor_long4_DateTimeZone() throws Throwable {\n        DateTime dt = new DateTime(2006, 6, 9, 23, 59, 59, 999, PARIS);\n        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);\n        \n        LocalDate test = new LocalDate(dt.getMillis(), PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2006, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n    }\n",
        "begin_line": 270,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 71)",
            "(line 272,col 9)-(line 272,col 80)",
            "(line 274,col 9)-(line 274,col 62)",
            "(line 275,col 9)-(line 275,col 52)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 47)",
            "(line 278,col 9)-(line 278,col 46)",
            "(line 279,col 9)-(line 279,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long_nullDateTimeZone()",
        "snippet": "    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 282,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 72)",
            "(line 284,col 9)-(line 284,col 52)",
            "(line 285,col 9)-(line 285,col 43)",
            "(line 286,col 9)-(line 286,col 47)",
            "(line 287,col 9)-(line 287,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long1_Chronology()",
        "snippet": "    public void testConstructor_long1_Chronology() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 290,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 68)",
            "(line 292,col 9)-(line 292,col 58)",
            "(line 293,col 9)-(line 293,col 43)",
            "(line 294,col 9)-(line 294,col 47)",
            "(line 295,col 9)-(line 295,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long2_Chronology()",
        "snippet": "    public void testConstructor_long2_Chronology() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME2, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1971, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(7, test.getDayOfMonth());\n    }\n",
        "begin_line": 298,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 68)",
            "(line 300,col 9)-(line 300,col 58)",
            "(line 301,col 9)-(line 301,col 43)",
            "(line 302,col 9)-(line 302,col 47)",
            "(line 303,col 9)-(line 303,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_long_nullChronology()",
        "snippet": "    public void testConstructor_long_nullChronology() throws Throwable {\n        LocalDate test = new LocalDate(TEST_TIME1, (Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 306,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 70)",
            "(line 308,col 9)-(line 308,col 52)",
            "(line 309,col 9)-(line 309,col 43)",
            "(line 310,col 9)-(line 310,col 47)",
            "(line 311,col 9)-(line 311,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_Object1()",
        "snippet": "    public void testConstructor_Object1() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDate test = new LocalDate(date);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 315,
        "end_line": 322,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 41)",
            "(line 317,col 9)-(line 317,col 45)",
            "(line 318,col 9)-(line 318,col 52)",
            "(line 319,col 9)-(line 319,col 43)",
            "(line 320,col 9)-(line 320,col 47)",
            "(line 321,col 9)-(line 321,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullObject()",
        "snippet": "    public void testConstructor_nullObject() throws Throwable {\n        LocalDate test = new LocalDate((Object) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 324,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 54)",
            "(line 326,col 9)-(line 326,col 52)",
            "(line 327,col 9)-(line 327,col 43)",
            "(line 328,col 9)-(line 328,col 47)",
            "(line 329,col 9)-(line 329,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectString1()",
        "snippet": "    public void testConstructor_ObjectString1() throws Throwable {\n        LocalDate test = new LocalDate(\"1972-04-06\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 332,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 53)",
            "(line 334,col 9)-(line 334,col 52)",
            "(line 335,col 9)-(line 335,col 43)",
            "(line 336,col 9)-(line 336,col 47)",
            "(line 337,col 9)-(line 337,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectString2()",
        "snippet": "    public void testConstructor_ObjectString2() throws Throwable {\n        LocalDate test = new LocalDate(\"1972-037\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(2, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 340,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 51)",
            "(line 342,col 9)-(line 342,col 52)",
            "(line 343,col 9)-(line 343,col 43)",
            "(line 344,col 9)-(line 344,col 47)",
            "(line 345,col 9)-(line 345,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectString3()",
        "snippet": "    public void testConstructor_ObjectString3() throws Throwable {\n        LocalDate test = new LocalDate(\"1972-02\");\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1972, test.getYear());\n        assertEquals(2, test.getMonthOfYear());\n        assertEquals(1, test.getDayOfMonth());\n    }\n",
        "begin_line": 348,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 50)",
            "(line 350,col 9)-(line 350,col 52)",
            "(line 351,col 9)-(line 351,col 43)",
            "(line 352,col 9)-(line 352,col 47)",
            "(line 353,col 9)-(line 353,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx1()",
        "snippet": "    public void testConstructor_ObjectStringEx1() throws Throwable {\n        try {\n            new LocalDate(\"1970-04-06T+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 356,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 357,col 9)-(line 360,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx2()",
        "snippet": "    public void testConstructor_ObjectStringEx2() throws Throwable {\n        try {\n            new LocalDate(\"1970-04-06T10:20:30.040\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 363,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 364,col 9)-(line 367,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx3()",
        "snippet": "    public void testConstructor_ObjectStringEx3() throws Throwable {\n        try {\n            new LocalDate(\"1970-04-06T10:20:30.040+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 370,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 374,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx4()",
        "snippet": "    public void testConstructor_ObjectStringEx4() throws Throwable {\n        try {\n            new LocalDate(\"T10:20:30.040\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 377,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 381,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx5()",
        "snippet": "    public void testConstructor_ObjectStringEx5() throws Throwable {\n        try {\n            new LocalDate(\"T10:20:30.040+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 384,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 388,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx6()",
        "snippet": "    public void testConstructor_ObjectStringEx6() throws Throwable {\n        try {\n            new LocalDate(\"10:20:30.040\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 391,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 395,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectStringEx7()",
        "snippet": "    public void testConstructor_ObjectStringEx7() throws Throwable {\n        try {\n            new LocalDate(\"10:20:30.040+14:00\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 398,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 402,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectLocalDate()",
        "snippet": "    public void testConstructor_ObjectLocalDate() throws Throwable {\n        LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);\n        LocalDate test = new LocalDate(date);\n        assertEquals(BUDDHIST_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 405,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 65)",
            "(line 407,col 9)-(line 407,col 45)",
            "(line 408,col 9)-(line 408,col 57)",
            "(line 409,col 9)-(line 409,col 43)",
            "(line 410,col 9)-(line 410,col 47)",
            "(line 411,col 9)-(line 411,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectLocalTime()",
        "snippet": "    public void testConstructor_ObjectLocalTime() throws Throwable {\n        LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);\n        try {\n            new LocalDate(time);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 414,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 69)",
            "(line 416,col 9)-(line 419,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectLocalDateTime()",
        "snippet": "    public void testConstructor_ObjectLocalDateTime() throws Throwable {\n        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);\n        LocalDate test = new LocalDate(dt);\n        assertEquals(BUDDHIST_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(5, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 422,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 87)",
            "(line 424,col 9)-(line 424,col 43)",
            "(line 425,col 9)-(line 425,col 57)",
            "(line 426,col 9)-(line 426,col 43)",
            "(line 427,col 9)-(line 427,col 47)",
            "(line 428,col 9)-(line 428,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_ObjectYearMonthDay()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    public void testConstructor_ObjectYearMonthDay() throws Throwable {\n        YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);\n        LocalDate test = new LocalDate(date);\n        assertEquals(BUDDHIST_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 431,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 71)",
            "(line 434,col 9)-(line 434,col 45)",
            "(line 435,col 9)-(line 435,col 57)",
            "(line 436,col 9)-(line 436,col 43)",
            "(line 437,col 9)-(line 437,col 47)",
            "(line 438,col 9)-(line 438,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_Object_DateTimeZone()",
        "snippet": "    public void testConstructor_Object_DateTimeZone() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDate test = new LocalDate(date, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 442,
        "end_line": 449,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 443,col 9)-(line 443,col 41)",
            "(line 444,col 9)-(line 444,col 52)",
            "(line 445,col 9)-(line 445,col 52)",
            "(line 446,col 9)-(line 446,col 43)",
            "(line 447,col 9)-(line 447,col 47)",
            "(line 448,col 9)-(line 448,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullObject_DateTimeZone()",
        "snippet": "    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n        LocalDate test = new LocalDate((Object) null, PARIS);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 451,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 61)",
            "(line 453,col 9)-(line 453,col 52)",
            "(line 454,col 9)-(line 454,col 43)",
            "(line 455,col 9)-(line 455,col 47)",
            "(line 456,col 9)-(line 456,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_Object_nullDateTimeZone()",
        "snippet": "    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDate test = new LocalDate(date, (DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 459,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 460,col 9)-(line 460,col 41)",
            "(line 461,col 9)-(line 461,col 66)",
            "(line 462,col 9)-(line 462,col 52)",
            "(line 463,col 9)-(line 463,col 43)",
            "(line 464,col 9)-(line 464,col 47)",
            "(line 465,col 9)-(line 465,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullObject_nullDateTimeZone()",
        "snippet": "    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n        LocalDate test = new LocalDate((Object) null, (DateTimeZone) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 468,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 75)",
            "(line 470,col 9)-(line 470,col 52)",
            "(line 471,col 9)-(line 471,col 43)",
            "(line 472,col 9)-(line 472,col 47)",
            "(line 473,col 9)-(line 473,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_Object_Chronology()",
        "snippet": "    public void testConstructor_Object_Chronology() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDate test = new LocalDate(date, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 476,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 41)",
            "(line 478,col 9)-(line 478,col 62)",
            "(line 479,col 9)-(line 479,col 58)",
            "(line 480,col 9)-(line 480,col 43)",
            "(line 481,col 9)-(line 481,col 47)",
            "(line 482,col 9)-(line 482,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullObject_Chronology()",
        "snippet": "    public void testConstructor_nullObject_Chronology() throws Throwable {\n        LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 485,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 71)",
            "(line 487,col 9)-(line 487,col 58)",
            "(line 488,col 9)-(line 488,col 43)",
            "(line 489,col 9)-(line 489,col 47)",
            "(line 490,col 9)-(line 490,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_Object_nullChronology()",
        "snippet": "    public void testConstructor_Object_nullChronology() throws Throwable {\n        Date date = new Date(TEST_TIME1);\n        LocalDate test = new LocalDate(date, (Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(4, test.getMonthOfYear());\n        assertEquals(6, test.getDayOfMonth());\n    }\n",
        "begin_line": 493,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 41)",
            "(line 495,col 9)-(line 495,col 64)",
            "(line 496,col 9)-(line 496,col 52)",
            "(line 497,col 9)-(line 497,col 43)",
            "(line 498,col 9)-(line 498,col 47)",
            "(line 499,col 9)-(line 499,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_nullObject_nullChronology()",
        "snippet": "    public void testConstructor_nullObject_nullChronology() throws Throwable {\n        LocalDate test = new LocalDate((Object) null, (Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 502,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 503,col 73)",
            "(line 504,col 9)-(line 504,col 52)",
            "(line 505,col 9)-(line 505,col 43)",
            "(line 506,col 9)-(line 506,col 47)",
            "(line 507,col 9)-(line 507,col 46)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_int_int_int()",
        "snippet": "    public void testConstructor_int_int_int() throws Throwable {\n        LocalDate test = new LocalDate(1970, 6, 9);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        try {\n            new LocalDate(Integer.MIN_VALUE, 6, 9);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(Integer.MAX_VALUE, 6, 9);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 0, 9);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 13, 9);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 6, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 6, 31);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        new LocalDate(1970, 7, 31);\n        try {\n            new LocalDate(1970, 7, 32);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 511,
        "end_line": 546,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 512,col 9)-(line 512,col 51)",
            "(line 513,col 9)-(line 513,col 52)",
            "(line 514,col 9)-(line 514,col 43)",
            "(line 515,col 9)-(line 515,col 47)",
            "(line 516,col 9)-(line 516,col 46)",
            "(line 517,col 9)-(line 520,col 48)",
            "(line 521,col 9)-(line 524,col 48)",
            "(line 525,col 9)-(line 528,col 48)",
            "(line 529,col 9)-(line 532,col 48)",
            "(line 533,col 9)-(line 536,col 48)",
            "(line 537,col 9)-(line 540,col 48)",
            "(line 541,col 9)-(line 541,col 35)",
            "(line 542,col 9)-(line 545,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_int_int_int_Chronology()",
        "snippet": "    public void testConstructor_int_int_int_Chronology() throws Throwable {\n        LocalDate test = new LocalDate(1970, 6, 9, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n        try {\n            new LocalDate(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 0, 9, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 13, 9, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 6, 0, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LocalDate(1970, 6, 31, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        new LocalDate(1970, 7, 31, GREGORIAN_PARIS);\n        try {\n            new LocalDate(1970, 7, 32, GREGORIAN_PARIS);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 548,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 549,col 9)-(line 549,col 68)",
            "(line 550,col 9)-(line 550,col 58)",
            "(line 551,col 9)-(line 551,col 43)",
            "(line 552,col 9)-(line 552,col 47)",
            "(line 553,col 9)-(line 553,col 46)",
            "(line 554,col 9)-(line 557,col 48)",
            "(line 558,col 9)-(line 561,col 48)",
            "(line 562,col 9)-(line 565,col 48)",
            "(line 566,col 9)-(line 569,col 48)",
            "(line 570,col 9)-(line 573,col 48)",
            "(line 574,col 9)-(line 577,col 48)",
            "(line 578,col 9)-(line 578,col 52)",
            "(line 579,col 9)-(line 582,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestLocalDate_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
        "signature": "org.joda.time.TestLocalDate_Constructors.testConstructor_int_int_int_nullChronology()",
        "snippet": "    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n        LocalDate test = new LocalDate(1970, 6, 9, null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1970, test.getYear());\n        assertEquals(6, test.getMonthOfYear());\n        assertEquals(9, test.getDayOfMonth());\n    }\n",
        "begin_line": 585,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 57)",
            "(line 587,col 9)-(line 587,col 52)",
            "(line 588,col 9)-(line 588,col 43)",
            "(line 589,col 9)-(line 589,col 47)",
            "(line 590,col 9)-(line 590,col 46)"
        ]
    }
]