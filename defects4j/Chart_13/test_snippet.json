[
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BorderArrangementTests.class);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.BorderArrangementTests(java.lang.String)",
        "snippet": "    public BorderArrangementTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BorderArrangement b1 = new BorderArrangement();\n        BorderArrangement b2 = new BorderArrangement();\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n\n        b1.add(new EmptyBlock(99.0, 99.0), null);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(99.0, 99.0), null);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(1.0, 1.0), RectangleEdge.LEFT);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(1.0, 1.0), RectangleEdge.LEFT);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(2.0, 2.0), RectangleEdge.RIGHT);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(2.0, 2.0), RectangleEdge.RIGHT);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(3.0, 3.0), RectangleEdge.TOP);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(3.0, 3.0), RectangleEdge.TOP);\n        assertTrue(b1.equals(b2));\n\n        b1.add(new EmptyBlock(4.0, 4.0), RectangleEdge.BOTTOM);\n        assertFalse(b1.equals(b2));\n        b2.add(new EmptyBlock(4.0, 4.0), RectangleEdge.BOTTOM);\n        assertTrue(b1.equals(b2));\n    }\n",
        "begin_line": 95,
        "end_line": 125,
        "comment": "\n     * Confirm that the equals() method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 98,col 34)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 106,col 61)",
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 61)",
            "(line 109,col 9)-(line 109,col 34)",
            "(line 111,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 116,col 9)-(line 116,col 60)",
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 60)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 121,col 63)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 63)",
            "(line 124,col 9)-(line 124,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BorderArrangement b1 = new BorderArrangement();\n        assertFalse(b1 instanceof Cloneable);\n    }\n",
        "begin_line": 130,
        "end_line": 133,
        "comment": "\n     * Immutable - cloning is not necessary.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 55)",
            "(line 132,col 9)-(line 132,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        BorderArrangement b1 = new BorderArrangement();\n        BorderArrangement b2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(b1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            b2 = (BorderArrangement) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(b1, b2);\n    }\n",
        "begin_line": 138,
        "end_line": 157,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 55)",
            "(line 140,col 9)-(line 140,col 36)",
            "(line 141,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testSizing()",
        "snippet": "    public void testSizing() {\n        BlockContainer container = new BlockContainer(new BorderArrangement());\n        BufferedImage image = new BufferedImage(\n            200, 100, BufferedImage.TYPE_INT_RGB\n        );\n        Graphics2D g2 = image.createGraphics();\n        \n        // TBLRC\n        // 00000 - no items\n        Size2D size = container.arrange(g2);\n        assertEquals(0.0, size.width, EPSILON);\n        assertEquals(0.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 00001 - center item only\n        container.add(new EmptyBlock(123.4, 567.8));\n        size = container.arrange(g2);\n        assertEquals(123.4, size.width, EPSILON);\n        assertEquals(567.8, size.height, EPSILON);\n\n        // TBLRC\n        // 00010 - right item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00011 - right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // try case where right item is shorter than center item\n        container.clear();\n        Block rb = new EmptyBlock(12.3, 15.6);\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(rb, RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(20.0, size.height, EPSILON);\n        assertEquals(20.0, rb.getBounds().getHeight(), EPSILON);\n\n        // TBLRC\n        // 00100 - left item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00101 - left and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // try case where left item is shorter than center item\n        container.clear();\n        Block lb = new EmptyBlock(12.3, 15.6);\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(lb, RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(20.0, size.height, EPSILON);\n        assertEquals(20.0, lb.getBounds().getHeight(), EPSILON);\n        \n        // TBLRC\n        // 00110 - left and right items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(22.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00111 - left, right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(27.7, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01000 - bottom item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01001 - bottom and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01010 - bottom and right only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01011 - bottom, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(31.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01100\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01101 - bottom, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(31.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01110 - bottom. left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(31.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01111\n        container.clear();\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 10000 - top item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10001 - top and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n                \n        // TBLRC\n        // 10010 - right and top only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10011 - top, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(33.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n\n        // TBLRC\n        // 10100 - top and left only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10101 - top, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(33.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10110 - top, left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2);\n        assertEquals(33.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10111\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(12.0, size.height, EPSILON);\n\n        // TBLRC\n        // 11000 - top and bottom only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(12.3, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 11001\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n        \n        // TBLRC\n        // 11010 - top, bottom and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n                \n        // TBLRC\n        // 11011\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(16.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11100\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n\n        // TBLRC\n        // 11101\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(14.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11110\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        size = container.arrange(g2);\n        assertEquals(12.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11111 - all\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2);\n        assertEquals(21.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n    }\n",
        "begin_line": 162,
        "end_line": 491,
        "comment": "\n     * Run some checks on sizing.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 79)",
            "(line 164,col 9)-(line 166,col 10)",
            "(line 167,col 9)-(line 167,col 47)",
            "(line 171,col 9)-(line 171,col 44)",
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 173,col 48)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 37)",
            "(line 179,col 9)-(line 179,col 49)",
            "(line 180,col 9)-(line 180,col 50)",
            "(line 184,col 9)-(line 184,col 26)",
            "(line 185,col 9)-(line 185,col 71)",
            "(line 186,col 9)-(line 186,col 37)",
            "(line 187,col 9)-(line 187,col 48)",
            "(line 188,col 9)-(line 188,col 49)",
            "(line 192,col 9)-(line 192,col 26)",
            "(line 193,col 9)-(line 193,col 50)",
            "(line 194,col 9)-(line 194,col 71)",
            "(line 195,col 9)-(line 195,col 37)",
            "(line 196,col 9)-(line 196,col 48)",
            "(line 197,col 9)-(line 197,col 49)",
            "(line 200,col 9)-(line 200,col 26)",
            "(line 201,col 9)-(line 201,col 46)",
            "(line 202,col 9)-(line 202,col 50)",
            "(line 203,col 9)-(line 203,col 47)",
            "(line 204,col 9)-(line 204,col 37)",
            "(line 205,col 9)-(line 205,col 48)",
            "(line 206,col 9)-(line 206,col 49)",
            "(line 207,col 9)-(line 207,col 64)",
            "(line 211,col 9)-(line 211,col 26)",
            "(line 212,col 9)-(line 212,col 70)",
            "(line 213,col 9)-(line 213,col 37)",
            "(line 214,col 9)-(line 214,col 48)",
            "(line 215,col 9)-(line 215,col 49)",
            "(line 219,col 9)-(line 219,col 26)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 221,col 9)-(line 221,col 70)",
            "(line 222,col 9)-(line 222,col 37)",
            "(line 223,col 9)-(line 223,col 48)",
            "(line 224,col 9)-(line 224,col 49)",
            "(line 227,col 9)-(line 227,col 26)",
            "(line 228,col 9)-(line 228,col 46)",
            "(line 229,col 9)-(line 229,col 50)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 37)",
            "(line 232,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 233,col 49)",
            "(line 234,col 9)-(line 234,col 64)",
            "(line 238,col 9)-(line 238,col 26)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 70)",
            "(line 241,col 9)-(line 241,col 37)",
            "(line 242,col 9)-(line 242,col 48)",
            "(line 243,col 9)-(line 243,col 49)",
            "(line 247,col 9)-(line 247,col 26)",
            "(line 248,col 9)-(line 248,col 50)",
            "(line 249,col 9)-(line 249,col 70)",
            "(line 250,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 251,col 37)",
            "(line 252,col 9)-(line 252,col 48)",
            "(line 253,col 9)-(line 253,col 49)",
            "(line 257,col 9)-(line 257,col 26)",
            "(line 258,col 9)-(line 258,col 72)",
            "(line 259,col 9)-(line 259,col 37)",
            "(line 260,col 9)-(line 260,col 48)",
            "(line 261,col 9)-(line 261,col 49)",
            "(line 265,col 9)-(line 265,col 26)",
            "(line 266,col 9)-(line 266,col 50)",
            "(line 267,col 9)-(line 267,col 72)",
            "(line 268,col 9)-(line 268,col 37)",
            "(line 269,col 9)-(line 269,col 48)",
            "(line 270,col 9)-(line 270,col 49)",
            "(line 274,col 9)-(line 274,col 26)",
            "(line 275,col 9)-(line 275,col 71)",
            "(line 276,col 9)-(line 276,col 72)",
            "(line 277,col 9)-(line 277,col 37)",
            "(line 278,col 9)-(line 278,col 48)",
            "(line 279,col 9)-(line 279,col 49)",
            "(line 283,col 9)-(line 283,col 26)",
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 71)",
            "(line 286,col 9)-(line 286,col 72)",
            "(line 287,col 9)-(line 287,col 37)",
            "(line 288,col 9)-(line 288,col 48)",
            "(line 289,col 9)-(line 289,col 49)",
            "(line 293,col 9)-(line 293,col 26)",
            "(line 294,col 9)-(line 294,col 70)",
            "(line 295,col 9)-(line 295,col 72)",
            "(line 296,col 9)-(line 296,col 37)",
            "(line 297,col 9)-(line 297,col 48)",
            "(line 298,col 9)-(line 298,col 49)",
            "(line 302,col 9)-(line 302,col 26)",
            "(line 303,col 9)-(line 303,col 50)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 72)",
            "(line 306,col 9)-(line 306,col 37)",
            "(line 307,col 9)-(line 307,col 48)",
            "(line 308,col 9)-(line 308,col 49)",
            "(line 312,col 9)-(line 312,col 26)",
            "(line 313,col 9)-(line 313,col 71)",
            "(line 314,col 9)-(line 314,col 70)",
            "(line 315,col 9)-(line 315,col 72)",
            "(line 316,col 9)-(line 316,col 37)",
            "(line 317,col 9)-(line 317,col 48)",
            "(line 318,col 9)-(line 318,col 49)",
            "(line 322,col 9)-(line 322,col 26)",
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 68)",
            "(line 325,col 9)-(line 325,col 69)",
            "(line 326,col 9)-(line 326,col 49)",
            "(line 327,col 9)-(line 327,col 37)",
            "(line 328,col 9)-(line 328,col 48)",
            "(line 329,col 9)-(line 329,col 49)",
            "(line 333,col 9)-(line 333,col 26)",
            "(line 334,col 9)-(line 334,col 69)",
            "(line 335,col 9)-(line 335,col 37)",
            "(line 336,col 9)-(line 336,col 48)",
            "(line 337,col 9)-(line 337,col 49)",
            "(line 341,col 9)-(line 341,col 26)",
            "(line 342,col 9)-(line 342,col 50)",
            "(line 343,col 9)-(line 343,col 69)",
            "(line 344,col 9)-(line 344,col 37)",
            "(line 345,col 9)-(line 345,col 48)",
            "(line 346,col 9)-(line 346,col 49)",
            "(line 350,col 9)-(line 350,col 26)",
            "(line 351,col 9)-(line 351,col 71)",
            "(line 352,col 9)-(line 352,col 69)",
            "(line 353,col 9)-(line 353,col 37)",
            "(line 354,col 9)-(line 354,col 48)",
            "(line 355,col 9)-(line 355,col 49)",
            "(line 359,col 9)-(line 359,col 26)",
            "(line 360,col 9)-(line 360,col 50)",
            "(line 361,col 9)-(line 361,col 69)",
            "(line 362,col 9)-(line 362,col 71)",
            "(line 363,col 9)-(line 363,col 37)",
            "(line 364,col 9)-(line 364,col 48)",
            "(line 365,col 9)-(line 365,col 49)",
            "(line 369,col 9)-(line 369,col 26)",
            "(line 370,col 9)-(line 370,col 70)",
            "(line 371,col 9)-(line 371,col 69)",
            "(line 372,col 9)-(line 372,col 37)",
            "(line 373,col 9)-(line 373,col 48)",
            "(line 374,col 9)-(line 374,col 49)",
            "(line 378,col 9)-(line 378,col 26)",
            "(line 379,col 9)-(line 379,col 50)",
            "(line 380,col 9)-(line 380,col 69)",
            "(line 381,col 9)-(line 381,col 70)",
            "(line 382,col 9)-(line 382,col 37)",
            "(line 383,col 9)-(line 383,col 48)",
            "(line 384,col 9)-(line 384,col 49)",
            "(line 388,col 9)-(line 388,col 26)",
            "(line 389,col 9)-(line 389,col 71)",
            "(line 390,col 9)-(line 390,col 69)",
            "(line 391,col 9)-(line 391,col 70)",
            "(line 392,col 9)-(line 392,col 37)",
            "(line 393,col 9)-(line 393,col 48)",
            "(line 394,col 9)-(line 394,col 49)",
            "(line 398,col 9)-(line 398,col 26)",
            "(line 399,col 9)-(line 399,col 67)",
            "(line 400,col 9)-(line 400,col 68)",
            "(line 401,col 9)-(line 401,col 69)",
            "(line 402,col 9)-(line 402,col 49)",
            "(line 403,col 9)-(line 403,col 37)",
            "(line 404,col 9)-(line 404,col 48)",
            "(line 405,col 9)-(line 405,col 49)",
            "(line 409,col 9)-(line 409,col 26)",
            "(line 410,col 9)-(line 410,col 69)",
            "(line 411,col 9)-(line 411,col 72)",
            "(line 412,col 9)-(line 412,col 37)",
            "(line 413,col 9)-(line 413,col 48)",
            "(line 414,col 9)-(line 414,col 49)",
            "(line 418,col 9)-(line 418,col 26)",
            "(line 419,col 9)-(line 419,col 50)",
            "(line 420,col 9)-(line 420,col 69)",
            "(line 421,col 9)-(line 421,col 72)",
            "(line 422,col 9)-(line 422,col 37)",
            "(line 423,col 9)-(line 423,col 48)",
            "(line 424,col 9)-(line 424,col 49)",
            "(line 428,col 9)-(line 428,col 26)",
            "(line 429,col 9)-(line 429,col 71)",
            "(line 430,col 9)-(line 430,col 69)",
            "(line 431,col 9)-(line 431,col 72)",
            "(line 432,col 9)-(line 432,col 37)",
            "(line 433,col 9)-(line 433,col 48)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 438,col 9)-(line 438,col 26)",
            "(line 439,col 9)-(line 439,col 67)",
            "(line 440,col 9)-(line 440,col 70)",
            "(line 441,col 9)-(line 441,col 69)",
            "(line 442,col 9)-(line 442,col 49)",
            "(line 443,col 9)-(line 443,col 37)",
            "(line 444,col 9)-(line 444,col 48)",
            "(line 445,col 9)-(line 445,col 49)",
            "(line 449,col 9)-(line 449,col 26)",
            "(line 450,col 9)-(line 450,col 70)",
            "(line 451,col 9)-(line 451,col 69)",
            "(line 452,col 9)-(line 452,col 72)",
            "(line 453,col 9)-(line 453,col 37)",
            "(line 454,col 9)-(line 454,col 48)",
            "(line 455,col 9)-(line 455,col 49)",
            "(line 459,col 9)-(line 459,col 26)",
            "(line 460,col 9)-(line 460,col 67)",
            "(line 461,col 9)-(line 461,col 70)",
            "(line 462,col 9)-(line 462,col 68)",
            "(line 463,col 9)-(line 463,col 49)",
            "(line 464,col 9)-(line 464,col 37)",
            "(line 465,col 9)-(line 465,col 48)",
            "(line 466,col 9)-(line 466,col 49)",
            "(line 470,col 9)-(line 470,col 26)",
            "(line 471,col 9)-(line 471,col 67)",
            "(line 472,col 9)-(line 472,col 70)",
            "(line 473,col 9)-(line 473,col 68)",
            "(line 474,col 9)-(line 474,col 69)",
            "(line 475,col 9)-(line 475,col 37)",
            "(line 476,col 9)-(line 476,col 48)",
            "(line 477,col 9)-(line 477,col 49)",
            "(line 481,col 9)-(line 481,col 26)",
            "(line 482,col 9)-(line 482,col 67)",
            "(line 483,col 9)-(line 483,col 70)",
            "(line 484,col 9)-(line 484,col 68)",
            "(line 485,col 9)-(line 485,col 69)",
            "(line 486,col 9)-(line 486,col 49)",
            "(line 487,col 9)-(line 487,col 37)",
            "(line 488,col 9)-(line 488,col 48)",
            "(line 489,col 9)-(line 489,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.block.junit.BorderArrangementTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "signature": "org.jfree.chart.block.junit.BorderArrangementTests.testSizingWithWidthConstraint()",
        "snippet": "    public void testSizingWithWidthConstraint() {\n        RectangleConstraint constraint = new RectangleConstraint(\n            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,\n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE\n        );\n                \n        BlockContainer container = new BlockContainer(new BorderArrangement());\n        BufferedImage image = new BufferedImage(\n            200, 100, BufferedImage.TYPE_INT_RGB\n        );\n        Graphics2D g2 = image.createGraphics();\n        \n        // TBLRC\n        // 00001 - center item only\n        container.add(new EmptyBlock(5.0, 6.0));\n        Size2D size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(6.0, size.height, EPSILON);\n        \n        container.clear();\n        container.add(new EmptyBlock(15.0, 16.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n        // TBLRC\n        // 00010 - right item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00011 - right and center items\n        container.clear();\n        container.add(new EmptyBlock(7.0, 20.0));\n        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00100 - left item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00101 - left and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00110 - left and right items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00111 - left, right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01000 - bottom item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01001 - bottom and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01010 - bottom and right only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01011 - bottom, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01100\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01101 - bottom, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01110 - bottom. left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01111\n        container.clear();\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 10000 - top item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10001 - top and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n                \n        // TBLRC\n        // 10010 - right and top only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10011 - top, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n\n        // TBLRC\n        // 10100 - top and left only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10101 - top, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10110 - top, left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10111\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(12.0, size.height, EPSILON);\n\n        // TBLRC\n        // 11000 - top and bottom only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 11001\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n        \n        // TBLRC\n        // 11010 - top, bottom and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n                \n        // TBLRC\n        // 11011\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11100\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n\n        // TBLRC\n        // 11101\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11110\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11111 - all\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n        // TBLRC\n        // 00000 - no items\n        container.clear();\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(0.0, size.height, EPSILON);\n        \n    }\n",
        "begin_line": 496,
        "end_line": 817,
        "comment": "\n     * Run some checks on sizing when there is a fixed width constraint.\n     ",
        "child_ranges": [
            "(line 497,col 9)-(line 500,col 10)",
            "(line 502,col 9)-(line 502,col 79)",
            "(line 503,col 9)-(line 505,col 10)",
            "(line 506,col 9)-(line 506,col 47)",
            "(line 510,col 9)-(line 510,col 48)",
            "(line 511,col 9)-(line 511,col 56)",
            "(line 512,col 9)-(line 512,col 48)",
            "(line 513,col 9)-(line 513,col 48)",
            "(line 515,col 9)-(line 515,col 26)",
            "(line 516,col 9)-(line 516,col 50)",
            "(line 517,col 9)-(line 517,col 49)",
            "(line 518,col 9)-(line 518,col 48)",
            "(line 519,col 9)-(line 519,col 49)",
            "(line 523,col 9)-(line 523,col 26)",
            "(line 524,col 9)-(line 524,col 71)",
            "(line 525,col 9)-(line 525,col 49)",
            "(line 526,col 9)-(line 526,col 48)",
            "(line 527,col 9)-(line 527,col 49)",
            "(line 531,col 9)-(line 531,col 26)",
            "(line 532,col 9)-(line 532,col 49)",
            "(line 533,col 9)-(line 533,col 70)",
            "(line 534,col 9)-(line 534,col 49)",
            "(line 535,col 9)-(line 535,col 48)",
            "(line 536,col 9)-(line 536,col 49)",
            "(line 540,col 9)-(line 540,col 26)",
            "(line 541,col 9)-(line 541,col 70)",
            "(line 542,col 9)-(line 542,col 49)",
            "(line 543,col 9)-(line 543,col 48)",
            "(line 544,col 9)-(line 544,col 49)",
            "(line 548,col 9)-(line 548,col 26)",
            "(line 549,col 9)-(line 549,col 50)",
            "(line 550,col 9)-(line 550,col 70)",
            "(line 551,col 9)-(line 551,col 49)",
            "(line 552,col 9)-(line 552,col 48)",
            "(line 553,col 9)-(line 553,col 49)",
            "(line 557,col 9)-(line 557,col 26)",
            "(line 558,col 9)-(line 558,col 71)",
            "(line 559,col 9)-(line 559,col 70)",
            "(line 560,col 9)-(line 560,col 49)",
            "(line 561,col 9)-(line 561,col 48)",
            "(line 562,col 9)-(line 562,col 49)",
            "(line 566,col 9)-(line 566,col 26)",
            "(line 567,col 9)-(line 567,col 50)",
            "(line 568,col 9)-(line 568,col 70)",
            "(line 569,col 9)-(line 569,col 69)",
            "(line 570,col 9)-(line 570,col 49)",
            "(line 571,col 9)-(line 571,col 48)",
            "(line 572,col 9)-(line 572,col 49)",
            "(line 576,col 9)-(line 576,col 26)",
            "(line 577,col 9)-(line 577,col 72)",
            "(line 578,col 9)-(line 578,col 49)",
            "(line 579,col 9)-(line 579,col 48)",
            "(line 580,col 9)-(line 580,col 49)",
            "(line 584,col 9)-(line 584,col 26)",
            "(line 585,col 9)-(line 585,col 50)",
            "(line 586,col 9)-(line 586,col 72)",
            "(line 587,col 9)-(line 587,col 49)",
            "(line 588,col 9)-(line 588,col 48)",
            "(line 589,col 9)-(line 589,col 49)",
            "(line 593,col 9)-(line 593,col 26)",
            "(line 594,col 9)-(line 594,col 71)",
            "(line 595,col 9)-(line 595,col 72)",
            "(line 596,col 9)-(line 596,col 49)",
            "(line 597,col 9)-(line 597,col 48)",
            "(line 598,col 9)-(line 598,col 49)",
            "(line 602,col 9)-(line 602,col 26)",
            "(line 603,col 9)-(line 603,col 50)",
            "(line 604,col 9)-(line 604,col 71)",
            "(line 605,col 9)-(line 605,col 72)",
            "(line 606,col 9)-(line 606,col 49)",
            "(line 607,col 9)-(line 607,col 48)",
            "(line 608,col 9)-(line 608,col 49)",
            "(line 612,col 9)-(line 612,col 26)",
            "(line 613,col 9)-(line 613,col 70)",
            "(line 614,col 9)-(line 614,col 72)",
            "(line 615,col 9)-(line 615,col 49)",
            "(line 616,col 9)-(line 616,col 48)",
            "(line 617,col 9)-(line 617,col 49)",
            "(line 621,col 9)-(line 621,col 26)",
            "(line 622,col 9)-(line 622,col 50)",
            "(line 623,col 9)-(line 623,col 70)",
            "(line 624,col 9)-(line 624,col 72)",
            "(line 625,col 9)-(line 625,col 49)",
            "(line 626,col 9)-(line 626,col 48)",
            "(line 627,col 9)-(line 627,col 49)",
            "(line 631,col 9)-(line 631,col 26)",
            "(line 632,col 9)-(line 632,col 71)",
            "(line 633,col 9)-(line 633,col 70)",
            "(line 634,col 9)-(line 634,col 72)",
            "(line 635,col 9)-(line 635,col 49)",
            "(line 636,col 9)-(line 636,col 48)",
            "(line 637,col 9)-(line 637,col 49)",
            "(line 641,col 9)-(line 641,col 26)",
            "(line 642,col 9)-(line 642,col 70)",
            "(line 643,col 9)-(line 643,col 68)",
            "(line 644,col 9)-(line 644,col 69)",
            "(line 645,col 9)-(line 645,col 49)",
            "(line 646,col 9)-(line 646,col 49)",
            "(line 647,col 9)-(line 647,col 48)",
            "(line 648,col 9)-(line 648,col 49)",
            "(line 652,col 9)-(line 652,col 26)",
            "(line 653,col 9)-(line 653,col 69)",
            "(line 654,col 9)-(line 654,col 49)",
            "(line 655,col 9)-(line 655,col 48)",
            "(line 656,col 9)-(line 656,col 49)",
            "(line 660,col 9)-(line 660,col 26)",
            "(line 661,col 9)-(line 661,col 50)",
            "(line 662,col 9)-(line 662,col 69)",
            "(line 663,col 9)-(line 663,col 49)",
            "(line 664,col 9)-(line 664,col 48)",
            "(line 665,col 9)-(line 665,col 49)",
            "(line 669,col 9)-(line 669,col 26)",
            "(line 670,col 9)-(line 670,col 71)",
            "(line 671,col 9)-(line 671,col 69)",
            "(line 672,col 9)-(line 672,col 49)",
            "(line 673,col 9)-(line 673,col 48)",
            "(line 674,col 9)-(line 674,col 49)",
            "(line 678,col 9)-(line 678,col 26)",
            "(line 679,col 9)-(line 679,col 50)",
            "(line 680,col 9)-(line 680,col 69)",
            "(line 681,col 9)-(line 681,col 71)",
            "(line 682,col 9)-(line 682,col 49)",
            "(line 683,col 9)-(line 683,col 48)",
            "(line 684,col 9)-(line 684,col 49)",
            "(line 688,col 9)-(line 688,col 26)",
            "(line 689,col 9)-(line 689,col 70)",
            "(line 690,col 9)-(line 690,col 69)",
            "(line 691,col 9)-(line 691,col 49)",
            "(line 692,col 9)-(line 692,col 48)",
            "(line 693,col 9)-(line 693,col 49)",
            "(line 697,col 9)-(line 697,col 26)",
            "(line 698,col 9)-(line 698,col 50)",
            "(line 699,col 9)-(line 699,col 69)",
            "(line 700,col 9)-(line 700,col 70)",
            "(line 701,col 9)-(line 701,col 49)",
            "(line 702,col 9)-(line 702,col 48)",
            "(line 703,col 9)-(line 703,col 49)",
            "(line 707,col 9)-(line 707,col 26)",
            "(line 708,col 9)-(line 708,col 71)",
            "(line 709,col 9)-(line 709,col 69)",
            "(line 710,col 9)-(line 710,col 70)",
            "(line 711,col 9)-(line 711,col 49)",
            "(line 712,col 9)-(line 712,col 48)",
            "(line 713,col 9)-(line 713,col 49)",
            "(line 717,col 9)-(line 717,col 26)",
            "(line 718,col 9)-(line 718,col 67)",
            "(line 719,col 9)-(line 719,col 68)",
            "(line 720,col 9)-(line 720,col 69)",
            "(line 721,col 9)-(line 721,col 49)",
            "(line 722,col 9)-(line 722,col 49)",
            "(line 723,col 9)-(line 723,col 48)",
            "(line 724,col 9)-(line 724,col 49)",
            "(line 728,col 9)-(line 728,col 26)",
            "(line 729,col 9)-(line 729,col 69)",
            "(line 730,col 9)-(line 730,col 72)",
            "(line 731,col 9)-(line 731,col 49)",
            "(line 732,col 9)-(line 732,col 48)",
            "(line 733,col 9)-(line 733,col 49)",
            "(line 737,col 9)-(line 737,col 26)",
            "(line 738,col 9)-(line 738,col 50)",
            "(line 739,col 9)-(line 739,col 69)",
            "(line 740,col 9)-(line 740,col 72)",
            "(line 741,col 9)-(line 741,col 49)",
            "(line 742,col 9)-(line 742,col 48)",
            "(line 743,col 9)-(line 743,col 49)",
            "(line 747,col 9)-(line 747,col 26)",
            "(line 748,col 9)-(line 748,col 71)",
            "(line 749,col 9)-(line 749,col 69)",
            "(line 750,col 9)-(line 750,col 72)",
            "(line 751,col 9)-(line 751,col 49)",
            "(line 752,col 9)-(line 752,col 48)",
            "(line 753,col 9)-(line 753,col 49)",
            "(line 757,col 9)-(line 757,col 26)",
            "(line 758,col 9)-(line 758,col 67)",
            "(line 759,col 9)-(line 759,col 70)",
            "(line 760,col 9)-(line 760,col 69)",
            "(line 761,col 9)-(line 761,col 49)",
            "(line 762,col 9)-(line 762,col 49)",
            "(line 763,col 9)-(line 763,col 48)",
            "(line 764,col 9)-(line 764,col 49)",
            "(line 768,col 9)-(line 768,col 26)",
            "(line 769,col 9)-(line 769,col 70)",
            "(line 770,col 9)-(line 770,col 69)",
            "(line 771,col 9)-(line 771,col 72)",
            "(line 772,col 9)-(line 772,col 49)",
            "(line 773,col 9)-(line 773,col 48)",
            "(line 774,col 9)-(line 774,col 49)",
            "(line 778,col 9)-(line 778,col 26)",
            "(line 779,col 9)-(line 779,col 67)",
            "(line 780,col 9)-(line 780,col 70)",
            "(line 781,col 9)-(line 781,col 68)",
            "(line 782,col 9)-(line 782,col 49)",
            "(line 783,col 9)-(line 783,col 49)",
            "(line 784,col 9)-(line 784,col 48)",
            "(line 785,col 9)-(line 785,col 49)",
            "(line 789,col 9)-(line 789,col 26)",
            "(line 790,col 9)-(line 790,col 67)",
            "(line 791,col 9)-(line 791,col 70)",
            "(line 792,col 9)-(line 792,col 68)",
            "(line 793,col 9)-(line 793,col 69)",
            "(line 794,col 9)-(line 794,col 49)",
            "(line 795,col 9)-(line 795,col 48)",
            "(line 796,col 9)-(line 796,col 49)",
            "(line 800,col 9)-(line 800,col 26)",
            "(line 801,col 9)-(line 801,col 67)",
            "(line 802,col 9)-(line 802,col 70)",
            "(line 803,col 9)-(line 803,col 68)",
            "(line 804,col 9)-(line 804,col 69)",
            "(line 805,col 9)-(line 805,col 49)",
            "(line 806,col 9)-(line 806,col 49)",
            "(line 807,col 9)-(line 807,col 48)",
            "(line 808,col 9)-(line 808,col 49)",
            "(line 812,col 9)-(line 812,col 26)",
            "(line 813,col 9)-(line 813,col 49)",
            "(line 814,col 9)-(line 814,col 48)",
            "(line 815,col 9)-(line 815,col 48)"
        ]
    }
]