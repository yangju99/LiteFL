[
    {
        "name": "Range.Range#83",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower \n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.RectangleConstraint#88",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, double)",
        "snippet": "    public RectangleConstraint(double w, double h) {\n        this(\n            w, null, LengthConstraintType.FIXED, \n            h, null, LengthConstraintType.FIXED\n        );  \n    }\n",
        "begin_line": 88,
        "end_line": 93,
        "comment": "\r\n     * Creates a new \"fixed width and height\" instance.\r\n     * \r\n     * @param w  the fixed width.\r\n     * @param h  the fixed height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "BorderArrangement.arrange#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint\n                = container.toContentConstraint(constraint);\n        Size2D contentSize = null;\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(container, g2);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeFN(container, g2, constraint.getWidth());\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                contentSize = arrangeFF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeFR(container, g2, constraint);\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(container, constraint.getWidthRange(),\n                        constraint.getHeightRange(), g2);\n            }\n        }\n        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),\n                container.calculateTotalHeight(contentSize.getHeight()));\n    }\n",
        "begin_line": 128,
        "end_line": 172,
        "comment": "\r\n     * Arranges the items in the specified container, subject to the given\r\n     * constraint.\r\n     *\r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint.\r\n     *\r\n     * @return The block size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "BorderArrangement.arrangeFN#275",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrangeFN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, double)",
        "snippet": "    protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,\n                               double width) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        RectangleConstraint c1 = new RectangleConstraint(width, null,\n                LengthConstraintType.FIXED, 0.0, null,\n                LengthConstraintType.NONE);\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2, c1);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(0.0,\n                new Range(0.0, width), LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, c2);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        if (this.rightBlock != null) {\n            double maxW = Math.max(width - w[2], 0.0);\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(Math.min(w[2], maxW), maxW),\n                    LengthConstraintType.RANGE, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.rightBlock.arrange(g2, c3);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                    - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.centerBlock.arrange(g2, c4);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        return arrange(container, g2, new RectangleConstraint(width, height));\n    }\n",
        "begin_line": 275,
        "end_line": 324,
        "comment": "\r\n     * Arranges the container width a fixed width and no constraint on the\r\n     * height.\r\n     *\r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * @param width  the fixed width.\r\n     *\r\n     * @return The container size after arranging the contents.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "BorderArrangement.arrangeFF#422",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrangeFF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n",
        "begin_line": 422,
        "end_line": 489,
        "comment": "\r\n     * Arranges the items within a container.\r\n     *\r\n     * @param container  the container.\r\n     * @param constraint  the constraint.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return The container size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentWidth#436",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentWidth(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentWidth(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentWidth(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 436,
        "end_line": 449,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentHeight#451",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentHeight(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentHeight(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentHeight(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 451,
        "end_line": 464,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "EmptyBlock.arrange#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/EmptyBlock.java",
        "class_name": "org.jfree.chart.block.EmptyBlock",
        "signature": "org.jfree.chart.block.EmptyBlock.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        return new Size2D(calculateTotalWidth(getWidth()), \n                calculateTotalHeight(getHeight()));\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "BorderArrangement.clear#494",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.clear()",
        "snippet": "    public void clear() {\n        this.centerBlock = null;\n        this.topBlock = null;\n        this.bottomBlock = null;\n        this.leftBlock = null;\n        this.rightBlock = null;\n    }\n",
        "begin_line": 494,
        "end_line": 500,
        "comment": "\r\n     * Clears the layout.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.getWidth#150",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\r\n     * Returns the natural width of the block, if this is known in advance.\r\n     * The actual width of the block may be overridden if layout constraints\r\n     * make this necessary.  \r\n     * \r\n     * @return The width.\r\n     * \r\n     * @see #setWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.getHeight#174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "\r\n     * Returns the natural height of the block, if this is known in advance.\r\n     * The actual height of the block may be overridden if layout constraints\r\n     * make this necessary.  \r\n     * \r\n     * @return The height.\r\n     * \r\n     * @see #setHeight(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "BorderArrangement.add#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n\n        if (key == null) {\n            this.centerBlock = block;\n        }\n        else {\n            RectangleEdge edge = (RectangleEdge) key;\n            if (edge == RectangleEdge.TOP) {\n                this.topBlock = block;\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                this.bottomBlock = block;\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                this.leftBlock = block;\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                this.rightBlock = block;\n            }\n        }\n    }\n",
        "begin_line": 96,
        "end_line": 116,
        "comment": "\r\n     * Adds a block to the arrangement manager at the specified edge.\r\n     *\r\n     * @param block  the block (<code>null</code> permitted).\r\n     * @param key  the edge (an instance of {@link RectangleEdge}) or\r\n     *             <code>null</code> for the center block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "EmptyBlock.EmptyBlock#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/EmptyBlock.java",
        "class_name": "org.jfree.chart.block.EmptyBlock",
        "signature": "org.jfree.chart.block.EmptyBlock.EmptyBlock(double, double)",
        "snippet": "    public EmptyBlock(double width, double height) {\n        setWidth(width);\n        setHeight(height);\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "\r\n     * Creates a new block with the specified width and height.\r\n     * \r\n     * @param width  the width.\r\n     * @param height  the height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setWidth#161",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setWidth(double)",
        "snippet": "    public void setWidth(double width) {\n        this.width = width;\n    }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\r\n     * Sets the natural width of the block, if this is known in advance.\r\n     * \r\n     * @param width  the width (in Java2D units)\r\n     * \r\n     * @see #getWidth()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setHeight#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setHeight(double)",
        "snippet": "    public void setHeight(double height) {\n        this.height = height;\n    }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\r\n     * Sets the natural width of the block, if this is known in advance.\r\n     * \r\n     * @param height  the width (in Java2D units)\r\n     * \r\n     * @see #getHeight()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.arrange#181",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        return this.arrangement.arrange(this, g2, constraint);\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1374
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setBounds#364",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setBounds(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setBounds(Rectangle2D bounds) {\n        if (bounds == null) {\n            throw new IllegalArgumentException(\"Null 'bounds' argument.\");\n        }\n        this.bounds = bounds;\n    }\n",
        "begin_line": 364,
        "end_line": 369,
        "comment": "\r\n     * Sets the bounds of the block.\r\n     * \r\n     * @param bounds  the bounds (<code>null</code> not permitted).\r\n     * \r\n     * @see #getBounds()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1374
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateTopInset#380",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopInset(double)",
        "snippet": "    public double calculateTopInset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.top * height);\n        }\n        return result;\n    }\n",
        "begin_line": 380,
        "end_line": 386,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateBottomInset#410",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomInset(double)",
        "snippet": "    public double calculateBottomInset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.bottom * height);\n        }\n        return result;\n    }\n",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateLeftInset#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftInset(double)",
        "snippet": "    public double calculateLeftInset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.left * width);\n        }\n        return result;\n    }\n",
        "begin_line": 440,
        "end_line": 446,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateRightInset#470",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightInset(double)",
        "snippet": "    public double calculateRightInset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.right * width);\n        }\n        return result;\n    }\n",
        "begin_line": 470,
        "end_line": 476,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.trimWidth#500",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimWidth(double)",
        "snippet": "    public double trimWidth(double width) {\n        return width - calculateLeftInset(width) - calculateRightInset(width);   \n    }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\n     * Trims the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The trimmed width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.trimHeight#522",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimHeight(double)",
        "snippet": "    public double trimHeight(double height) {\n        return height \n               - calculateTopInset(height) - calculateBottomInset(height);   \n    }\n",
        "begin_line": 522,
        "end_line": 525,
        "comment": "\n     * Trims the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The trimmed height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getWidth#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Returns the fixed width.\r\n     * \r\n     * @return The width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getWidthRange#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthRange()",
        "snippet": "    public Range getWidthRange() {\n        return this.widthRange;   \n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getHeight#196",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\r\n     * Returns the fixed height.\r\n     * \r\n     * @return The height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getHeightRange#205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightRange()",
        "snippet": "    public Range getHeightRange() {\n        return this.heightRange;   \n    }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentWidth#382",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(double)",
        "snippet": "    protected double trimToContentWidth(double fixedWidth) {\n        double result = this.margin.trimWidth(fixedWidth);\n        result = this.frame.getInsets().trimWidth(result);\n        result = this.padding.trimWidth(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 382,
        "end_line": 387,
        "comment": "\r\n     * Calculate the width available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * width.\r\n     * \r\n     * @param fixedWidth  the fixed width.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentHeight(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentHeight#400",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(double)",
        "snippet": "    protected double trimToContentHeight(double fixedHeight) {\n        double result = this.margin.trimHeight(fixedHeight);\n        result = this.frame.getInsets().trimHeight(result);\n        result = this.padding.trimHeight(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 400,
        "end_line": 405,
        "comment": "\r\n     * Calculate the height available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * height.\r\n     * \r\n     * @param fixedHeight  the fixed height.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.toContentConstraint#415",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected RectangleConstraint toContentConstraint(RectangleConstraint c) {\n        if (c == null) {\n            throw new IllegalArgumentException(\"Null 'c' argument.\");\n        }\n        if (c.equals(RectangleConstraint.NONE)) {\n            return c;\n        }\n        double w = c.getWidth();\n        Range wr = c.getWidthRange();\n        double h = c.getHeight();\n        Range hr = c.getHeightRange();\n        double ww = trimToContentWidth(w);\n        double hh = trimToContentHeight(h);\n        Range wwr = trimToContentWidth(wr);\n        Range hhr = trimToContentHeight(hr);\n        return new RectangleConstraint(\n            ww, wwr, c.getWidthConstraintType(), \n            hh, hhr, c.getHeightConstraintType()\n        );\n    }\n",
        "begin_line": 415,
        "end_line": 434,
        "comment": "\r\n     * Returns a constraint for the content of this block that will result in\r\n     * the bounds of the block matching the specified constraint.\r\n     * \r\n     * @param c  the outer constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The content constraint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.Size2D#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D(double, double)",
        "snippet": "    public Size2D(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Creates a new instance with the specified width and height.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.getWidth#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Returns the width.\n     *\n     * @return The width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.getHeight#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Returns the height.\n     *\n     * @return The height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateTopOutset#395",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopOutset(double)",
        "snippet": "    public double calculateTopOutset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.top;\n        }\n        return result;\n    }\n",
        "begin_line": 395,
        "end_line": 401,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateBottomOutset#425",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double)",
        "snippet": "    public double calculateBottomOutset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.bottom;\n        }\n        return result;\n    }\n",
        "begin_line": 425,
        "end_line": 431,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateLeftOutset#455",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double)",
        "snippet": "    public double calculateLeftOutset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.left;\n        }\n        return result;\n    }\n",
        "begin_line": 455,
        "end_line": 461,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateRightOutset#485",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightOutset(double)",
        "snippet": "    public double calculateRightOutset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.right;\n        }\n        return result;\n    }\n",
        "begin_line": 485,
        "end_line": 491,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.extendWidth#511",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendWidth(double)",
        "snippet": "    public double extendWidth(double width) {\n        return width + calculateLeftOutset(width) + calculateRightOutset(width);   \n    }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "\n     * Extends the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The extended width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.extendHeight#534",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendHeight(double)",
        "snippet": "    public double extendHeight(double height) {\n        return height \n               + calculateTopOutset(height) + calculateBottomOutset(height);   \n    }\n",
        "begin_line": 534,
        "end_line": 537,
        "comment": "\n     * Extends the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The extended height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.RectangleConstraint#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType, double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType)",
        "snippet": "    public RectangleConstraint(double w, Range widthRange, \n                               LengthConstraintType widthConstraintType,\n                               double h, Range heightRange, \n                               LengthConstraintType heightConstraintType) {\n        if (widthConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");\n        }\n        if (heightConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'heightType' argument.\"); \n        }\n        this.width = w;\n        this.widthRange = widthRange;\n        this.widthConstraintType = widthConstraintType;\n        this.height = h;\n        this.heightRange = heightRange;\n        this.heightConstraintType = heightConstraintType;\n    }\n",
        "begin_line": 146,
        "end_line": 162,
        "comment": "\r\n     * Creates a new constraint.\r\n     * \r\n     * @param w  the fixed or maximum width.\r\n     * @param widthRange  the width range.\r\n     * @param widthConstraintType  the width type.\r\n     * @param h  the fixed or maximum height.\r\n     * @param heightRange  the height range.\r\n     * @param heightConstraintType  the height type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getWidthConstraintType#187",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthConstraintType()",
        "snippet": "    public LengthConstraintType getWidthConstraintType() {\n        return this.widthConstraintType;\n    }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getHeightConstraintType#214",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightConstraintType()",
        "snippet": "    public LengthConstraintType getHeightConstraintType() {\n        return this.heightConstraintType;\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "LengthConstraintType.LengthConstraintType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "signature": "org.jfree.chart.block.LengthConstraintType.LengthConstraintType(java.lang.String)",
        "snippet": "    private LengthConstraintType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.clear#167",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.clear()",
        "snippet": "    public void clear() {\n        this.blocks.clear();\n        this.arrangement.clear();\n    }\n",
        "begin_line": 167,
        "end_line": 170,
        "comment": "\r\n     * Clears all the blocks from the container.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.getInsets#144",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\r\n     * Returns the space reserved for the border.\r\n     * \r\n     * @return The space (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.calculateTotalWidth#473",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double)",
        "snippet": "    protected double calculateTotalWidth(double contentWidth) {\n        double result = contentWidth;\n        result = this.padding.extendWidth(result);\n        result = this.frame.getInsets().extendWidth(result);\n        result = this.margin.extendWidth(result);\n        return result;\n    }\n",
        "begin_line": 473,
        "end_line": 479,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content width.\r\n     * \r\n     * @param contentWidth  the content width.\r\n     * \r\n     * @return The adjusted width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.calculateTotalHeight#488",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double)",
        "snippet": "    protected double calculateTotalHeight(double contentHeight) {\n        double result = contentHeight;\n        result = this.padding.extendHeight(result);\n        result = this.frame.getInsets().extendHeight(result);\n        result = this.margin.extendHeight(result);\n        return result;\n    }\n",
        "begin_line": 488,
        "end_line": 494,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content height.\r\n     * \r\n     * @param contentHeight  the content height.\r\n     * \r\n     * @return The adjusted height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.add#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block)",
        "snippet": "    public void add(Block block) {\n        add(block, null);\n    }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\r\n     * Adds a block to the container.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.add#159",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        this.blocks.add(block);\n        this.arrangement.add(block, key);\n    }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "\r\n     * Adds a block to the container.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     * @param key  the key (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 1
    },
    {
        "name": "BorderArrangement.BorderArrangement#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.BorderArrangement()",
        "snippet": "    public BorderArrangement() {\n    }\n",
        "begin_line": 86,
        "end_line": 87,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.128
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.getLowerBound#98",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getLowerBound()",
        "snippet": "    public double getLowerBound() {\n        return this.lower;\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\r\n     * Returns the lower bound for the range.\r\n     *\r\n     * @return The lower bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.getUpperBound#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getUpperBound()",
        "snippet": "    public double getUpperBound() {\n        return this.upper;\n    }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\r\n     * Returns the upper bound for the range.\r\n     *\r\n     * @return The upper bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleEdge.RectangleEdge#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
        "snippet": "    private RectangleEdge(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.BlockContainer#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
        "snippet": "    public BlockContainer(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;\n        this.blocks = new ArrayList();\n    }    \n",
        "begin_line": 95,
        "end_line": 101,
        "comment": "\r\n     * Creates a new instance with the specified arrangement.\r\n     * \r\n     * @param arrangement  the arrangement manager (<code>null</code> not \r\n     *                     permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.BlockBorder#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
        "snippet": "    public BlockBorder(RectangleInsets insets, Paint paint) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.insets = insets;\n        this.paint = paint;\n    }\n",
        "begin_line": 128,
        "end_line": 137,
        "comment": "\r\n     * Creates a new border.\r\n     * \r\n     * @param insets  the border insets (<code>null</code> not permitted).\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.AbstractBlock#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
        "snippet": "    protected AbstractBlock() {\n        this.id = null;\n        this.width = 0.0;\n        this.height = 0.0;\n        this.bounds = new Rectangle2D.Float();\n        this.margin = RectangleInsets.ZERO_INSETS;\n        this.frame = BlockBorder.NONE; \n        this.padding = RectangleInsets.ZERO_INSETS;\n    }\n",
        "begin_line": 109,
        "end_line": 117,
        "comment": "\r\n     * Creates a new block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0854
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0854
        },
        "num_failing_tests": 1
    }
]