[
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parse(java.lang.String)",
        "snippet": "  private static Node parse(String js) {\n    Compiler compiler = new Compiler();\n    compiler.initCompilerOptionsIfTesting();\n    compiler.getOptions().languageIn = LanguageMode.ECMASCRIPT5;\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 39)",
            "(line 39,col 5)-(line 39,col 44)",
            "(line 40,col 5)-(line 40,col 64)",
            "(line 41,col 5)-(line 41,col 40)",
            "(line 42,col 5)-(line 42,col 46)",
            "(line 43,col 5)-(line 43,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getNode(java.lang.String)",
        "snippet": "  static Node getNode(String js) {\n    Node root = parse(\"var a=(\" + js + \");\");\n    Node expr = root.getFirstChild();\n    Node var = expr.getFirstChild();\n    return var.getFirstChild();\n  }\n",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 45)",
            "(line 48,col 5)-(line 48,col 37)",
            "(line 49,col 5)-(line 49,col 36)",
            "(line 50,col 5)-(line 50,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLiteralOrConstValue()",
        "snippet": "  public void testIsLiteralOrConstValue() {\n    assertLiteralAndImmutable(getNode(\"10\"));\n    assertLiteralAndImmutable(getNode(\"-10\"));\n    assertLiteralButNotImmutable(getNode(\"[10, 20]\"));\n    assertLiteralButNotImmutable(getNode(\"{'a': 20}\"));\n    assertLiteralButNotImmutable(getNode(\"[10, , 1.0, [undefined], 'a']\"));\n    assertLiteralButNotImmutable(getNode(\"/abc/\"));\n    assertLiteralAndImmutable(getNode(\"\\\"string\\\"\"));\n    assertLiteralAndImmutable(getNode(\"'aaa'\"));\n    assertLiteralAndImmutable(getNode(\"null\"));\n    assertLiteralAndImmutable(getNode(\"undefined\"));\n    assertLiteralAndImmutable(getNode(\"void 0\"));\n    assertNotLiteral(getNode(\"abc\"));\n    assertNotLiteral(getNode(\"[10, foo(), 20]\"));\n    assertNotLiteral(getNode(\"foo()\"));\n    assertNotLiteral(getNode(\"c + d\"));\n    assertNotLiteral(getNode(\"{'a': foo()}\"));\n    assertNotLiteral(getNode(\"void foo()\"));\n  }\n",
        "begin_line": 53,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 45)",
            "(line 55,col 5)-(line 55,col 46)",
            "(line 56,col 5)-(line 56,col 54)",
            "(line 57,col 5)-(line 57,col 55)",
            "(line 58,col 5)-(line 58,col 75)",
            "(line 59,col 5)-(line 59,col 51)",
            "(line 60,col 5)-(line 60,col 53)",
            "(line 61,col 5)-(line 61,col 48)",
            "(line 62,col 5)-(line 62,col 47)",
            "(line 63,col 5)-(line 63,col 52)",
            "(line 64,col 5)-(line 64,col 49)",
            "(line 65,col 5)-(line 65,col 37)",
            "(line 66,col 5)-(line 66,col 49)",
            "(line 67,col 5)-(line 67,col 39)",
            "(line 68,col 5)-(line 68,col 39)",
            "(line 69,col 5)-(line 69,col 46)",
            "(line 70,col 5)-(line 70,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralAndImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralAndImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertTrue(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 49)",
            "(line 75,col 5)-(line 75,col 50)",
            "(line 76,col 5)-(line 76,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralButNotImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralButNotImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 49)",
            "(line 81,col 5)-(line 81,col 50)",
            "(line 82,col 5)-(line 82,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNotLiteral(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertNotLiteral(Node n) {\n    assertFalse(NodeUtil.isLiteralValue(n, true));\n    assertFalse(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 86,col 50)",
            "(line 87,col 5)-(line 87,col 51)",
            "(line 88,col 5)-(line 88,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetBooleanValue()",
        "snippet": "  public void testGetBooleanValue() {\n    assertBooleanTrue(\"true\");\n    assertBooleanTrue(\"10\");\n    assertBooleanTrue(\"'0'\");\n    assertBooleanTrue(\"/a/\");\n    assertBooleanTrue(\"{}\");\n    assertBooleanTrue(\"[]\");\n    assertBooleanFalse(\"false\");\n    assertBooleanFalse(\"null\");\n    assertBooleanFalse(\"0\");\n    assertBooleanFalse(\"''\");\n    assertBooleanFalse(\"undefined\");\n    assertBooleanFalse(\"void 0\");\n    assertBooleanFalse(\"void foo()\");\n    assertBooleanUnknown(\"b\");\n    assertBooleanUnknown(\"-'0.0'\");\n  }\n",
        "begin_line": 91,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 30)",
            "(line 93,col 5)-(line 93,col 28)",
            "(line 94,col 5)-(line 94,col 29)",
            "(line 95,col 5)-(line 95,col 29)",
            "(line 96,col 5)-(line 96,col 28)",
            "(line 97,col 5)-(line 97,col 28)",
            "(line 98,col 5)-(line 98,col 32)",
            "(line 99,col 5)-(line 99,col 31)",
            "(line 100,col 5)-(line 100,col 28)",
            "(line 101,col 5)-(line 101,col 29)",
            "(line 102,col 5)-(line 102,col 36)",
            "(line 103,col 5)-(line 103,col 33)",
            "(line 104,col 5)-(line 104,col 37)",
            "(line 105,col 5)-(line 105,col 30)",
            "(line 106,col 5)-(line 106,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanTrue(java.lang.String)",
        "snippet": "  private void assertBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanFalse(java.lang.String)",
        "snippet": "  private void assertBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN, NodeUtil.getBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetExpressionBooleanValue()",
        "snippet": "  public void testGetExpressionBooleanValue() {\n    assertExpressionBooleanTrue(\"a=true\");\n    assertExpressionBooleanFalse(\"a=false\");\n\n    assertExpressionBooleanTrue(\"a=(false,true)\");\n    assertExpressionBooleanFalse(\"a=(true,false)\");\n\n    assertExpressionBooleanTrue(\"a=(false || true)\");\n    assertExpressionBooleanFalse(\"a=(true && false)\");\n\n    assertExpressionBooleanTrue(\"a=!(true && false)\");\n\n    assertExpressionBooleanTrue(\"a,true\");\n    assertExpressionBooleanFalse(\"a,false\");\n\n    assertExpressionBooleanTrue(\"true||false\");\n    assertExpressionBooleanFalse(\"false||false\");\n\n    assertExpressionBooleanTrue(\"true&&true\");\n    assertExpressionBooleanFalse(\"true&&false\");\n\n    assertExpressionBooleanFalse(\"!true\");\n    assertExpressionBooleanTrue(\"!false\");\n    assertExpressionBooleanTrue(\"!''\");\n\n    // Assignment ops other than ASSIGN are unknown.\n    assertExpressionBooleanUnknown(\"a *= 2\");\n\n    // Complex expressions that contain anything other then \"=\", \",\", or \"!\" are\n    // unknown.\n    assertExpressionBooleanUnknown(\"2 + 2\");\n\n    assertExpressionBooleanTrue(\"a=1\");\n    assertExpressionBooleanTrue(\"a=/a/\");\n    assertExpressionBooleanTrue(\"a={}\");\n\n    assertExpressionBooleanTrue(\"true\");\n    assertExpressionBooleanTrue(\"10\");\n    assertExpressionBooleanTrue(\"'0'\");\n    assertExpressionBooleanTrue(\"/a/\");\n    assertExpressionBooleanTrue(\"{}\");\n    assertExpressionBooleanTrue(\"[]\");\n    assertExpressionBooleanFalse(\"false\");\n    assertExpressionBooleanFalse(\"null\");\n    assertExpressionBooleanFalse(\"0\");\n    assertExpressionBooleanFalse(\"''\");\n    assertExpressionBooleanFalse(\"undefined\");\n    assertExpressionBooleanFalse(\"void 0\");\n    assertExpressionBooleanFalse(\"void foo()\");\n\n    assertExpressionBooleanTrue(\"a?true:true\");\n    assertExpressionBooleanFalse(\"a?false:false\");\n    assertExpressionBooleanUnknown(\"a?true:false\");\n    assertExpressionBooleanUnknown(\"a?true:foo()\");\n\n    assertExpressionBooleanUnknown(\"b\");\n    assertExpressionBooleanUnknown(\"-'0.0'\");\n  }\n",
        "begin_line": 121,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 42)",
            "(line 123,col 5)-(line 123,col 44)",
            "(line 125,col 5)-(line 125,col 50)",
            "(line 126,col 5)-(line 126,col 51)",
            "(line 128,col 5)-(line 128,col 53)",
            "(line 129,col 5)-(line 129,col 54)",
            "(line 131,col 5)-(line 131,col 54)",
            "(line 133,col 5)-(line 133,col 42)",
            "(line 134,col 5)-(line 134,col 44)",
            "(line 136,col 5)-(line 136,col 47)",
            "(line 137,col 5)-(line 137,col 49)",
            "(line 139,col 5)-(line 139,col 46)",
            "(line 140,col 5)-(line 140,col 48)",
            "(line 142,col 5)-(line 142,col 42)",
            "(line 143,col 5)-(line 143,col 42)",
            "(line 144,col 5)-(line 144,col 39)",
            "(line 147,col 5)-(line 147,col 45)",
            "(line 151,col 5)-(line 151,col 44)",
            "(line 153,col 5)-(line 153,col 39)",
            "(line 154,col 5)-(line 154,col 41)",
            "(line 155,col 5)-(line 155,col 40)",
            "(line 157,col 5)-(line 157,col 40)",
            "(line 158,col 5)-(line 158,col 38)",
            "(line 159,col 5)-(line 159,col 39)",
            "(line 160,col 5)-(line 160,col 39)",
            "(line 161,col 5)-(line 161,col 38)",
            "(line 162,col 5)-(line 162,col 38)",
            "(line 163,col 5)-(line 163,col 42)",
            "(line 164,col 5)-(line 164,col 41)",
            "(line 165,col 5)-(line 165,col 38)",
            "(line 166,col 5)-(line 166,col 39)",
            "(line 167,col 5)-(line 167,col 46)",
            "(line 168,col 5)-(line 168,col 43)",
            "(line 169,col 5)-(line 169,col 47)",
            "(line 171,col 5)-(line 171,col 47)",
            "(line 172,col 5)-(line 172,col 50)",
            "(line 173,col 5)-(line 173,col 51)",
            "(line 174,col 5)-(line 174,col 51)",
            "(line 176,col 5)-(line 176,col 40)",
            "(line 177,col 5)-(line 177,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanTrue(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 182,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanFalse(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 187,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertExpressionBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertExpressionBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN,\n        NodeUtil.getExpressionBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 192,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetStringValue()",
        "snippet": "  public void testGetStringValue() {\n    assertEquals(\"true\", NodeUtil.getStringValue(getNode(\"true\")));\n    assertEquals(\"10\", NodeUtil.getStringValue(getNode(\"10\")));\n    assertEquals(\"1\", NodeUtil.getStringValue(getNode(\"1.0\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"'0'\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"/a/\")));\n    assertEquals(\"[object Object]\", NodeUtil.getStringValue(getNode(\"{}\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[]\")));\n    assertEquals(\"false\", NodeUtil.getStringValue(getNode(\"false\")));\n    assertEquals(\"null\", NodeUtil.getStringValue(getNode(\"null\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"0\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"''\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"undefined\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void 0\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void foo()\")));\n\n    assertEquals(\"NaN\", NodeUtil.getStringValue(getNode(\"NaN\")));\n    assertEquals(\"Infinity\", NodeUtil.getStringValue(getNode(\"Infinity\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"x\")));\n  }\n",
        "begin_line": 195,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 67)",
            "(line 197,col 5)-(line 197,col 63)",
            "(line 198,col 5)-(line 198,col 63)",
            "(line 199,col 5)-(line 199,col 63)",
            "(line 200,col 5)-(line 200,col 64)",
            "(line 201,col 5)-(line 201,col 76)",
            "(line 202,col 5)-(line 202,col 61)",
            "(line 203,col 5)-(line 203,col 69)",
            "(line 204,col 5)-(line 204,col 67)",
            "(line 205,col 5)-(line 205,col 61)",
            "(line 206,col 5)-(line 206,col 61)",
            "(line 207,col 5)-(line 207,col 77)",
            "(line 208,col 5)-(line 208,col 74)",
            "(line 209,col 5)-(line 209,col 78)",
            "(line 211,col 5)-(line 211,col 65)",
            "(line 212,col 5)-(line 212,col 75)",
            "(line 213,col 5)-(line 213,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetArrayStringValue()",
        "snippet": "  public void testGetArrayStringValue() {\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[]\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"['']\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[null]\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[undefined]\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[void 0]\")));\n    assertEquals(\"NaN\", NodeUtil.getStringValue(getNode(\"[NaN]\")));\n    assertEquals(\",\", NodeUtil.getStringValue(getNode(\"[,'']\")));\n    assertEquals(\",,\", NodeUtil.getStringValue(getNode(\"[[''],[''],['']]\")));\n    assertEquals(\"1,2\", NodeUtil.getStringValue(getNode(\"[[1.0],[2.0]]\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"[a]\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"[1,a]\")));\n  }\n",
        "begin_line": 216,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 61)",
            "(line 218,col 5)-(line 218,col 63)",
            "(line 219,col 5)-(line 219,col 65)",
            "(line 220,col 5)-(line 220,col 70)",
            "(line 221,col 5)-(line 221,col 67)",
            "(line 222,col 5)-(line 222,col 67)",
            "(line 223,col 5)-(line 223,col 65)",
            "(line 224,col 5)-(line 224,col 77)",
            "(line 225,col 5)-(line 225,col 75)",
            "(line 226,col 5)-(line 226,col 64)",
            "(line 227,col 5)-(line 227,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsObjectLiteralKey1()",
        "snippet": "  public void testIsObjectLiteralKey1() throws Exception {\n    testIsObjectLiteralKey(\n      parseExpr(\"({})\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"a\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"'a'\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"1\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"({a: 1})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({1: 1})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({get a(){}})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({set a(b){}})\").getFirstChild(), true);\n  }\n",
        "begin_line": 230,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 232,col 32)",
            "(line 233,col 5)-(line 234,col 29)",
            "(line 235,col 5)-(line 236,col 31)",
            "(line 237,col 5)-(line 238,col 29)",
            "(line 239,col 5)-(line 240,col 51)",
            "(line 241,col 5)-(line 242,col 51)",
            "(line 243,col 5)-(line 244,col 56)",
            "(line 245,col 5)-(line 246,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parseExpr(java.lang.String)",
        "snippet": "  private Node parseExpr(String js) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.languageIn = LanguageMode.ECMASCRIPT5;\n    compiler.initOptions(options);\n    Node root = compiler.parseTestCode(js);\n    return root.getFirstChild().getFirstChild();\n  }\n",
        "begin_line": 249,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 250,col 5)-(line 250,col 39)",
            "(line 251,col 5)-(line 251,col 52)",
            "(line 252,col 5)-(line 252,col 50)",
            "(line 253,col 5)-(line 253,col 34)",
            "(line 254,col 5)-(line 254,col 43)",
            "(line 255,col 5)-(line 255,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsObjectLiteralKey(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private void testIsObjectLiteralKey(Node node, boolean expected) {\n    assertEquals(expected, NodeUtil.isObjectLitKey(node, node.getParent()));\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName1()",
        "snippet": "  public void testGetFunctionName1() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"function name(){}\");\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 262,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 39)",
            "(line 264,col 5)-(line 264,col 62)",
            "(line 266,col 5)-(line 266,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName2()",
        "snippet": "  public void testGetFunctionName2() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 39)",
            "(line 271,col 5)-(line 272,col 41)",
            "(line 274,col 5)-(line 274,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName3()",
        "snippet": "  public void testGetFunctionName3() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"qualified.name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name\");\n  }\n",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 39)",
            "(line 279,col 5)-(line 280,col 41)",
            "(line 282,col 5)-(line 282,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName4()",
        "snippet": "  public void testGetFunctionName4() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name2 = function name1(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name2\");\n  }\n",
        "begin_line": 285,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 39)",
            "(line 287,col 5)-(line 288,col 41)",
            "(line 290,col 5)-(line 290,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName5()",
        "snippet": "  public void testGetFunctionName5() throws Exception {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(\"qualified.name2 = function name1(){}\");\n    Node parent = n.getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name2\");\n  }\n",
        "begin_line": 293,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 39)",
            "(line 295,col 5)-(line 295,col 76)",
            "(line 296,col 5)-(line 296,col 52)",
            "(line 298,col 5)-(line 298,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private void testGetFunctionName(Node function, String name) {\n    assertEquals(Token.FUNCTION, function.getType());\n    assertEquals(name, NodeUtil.getFunctionName(function));\n  }\n",
        "begin_line": 301,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 302,col 5)-(line 302,col 53)",
            "(line 303,col 5)-(line 303,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsFunctionDeclaration()",
        "snippet": "  public void testContainsFunctionDeclaration() {\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"function foo(){}\")));\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"(b?function(){}:null)\")));\n\n    assertFalse(NodeUtil.containsFunction(\n                   getNode(\"(b?foo():null)\")));\n    assertFalse(NodeUtil.containsFunction(\n                    getNode(\"foo()\")));\n  }\n",
        "begin_line": 306,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 307,col 5)-(line 308,col 49)",
            "(line 309,col 5)-(line 310,col 54)",
            "(line 312,col 5)-(line 313,col 47)",
            "(line 314,col 5)-(line 315,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String)",
        "snippet": "  private void assertSideEffect(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild()));\n  }\n",
        "begin_line": 318,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 23)",
            "(line 320,col 5)-(line 320,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String, boolean)",
        "snippet": "  private void assertSideEffect(boolean se, String js, boolean GlobalRegExp) {\n    Node n = parse(js);\n    Compiler compiler = new Compiler();\n    compiler.setHasRegExpGlobalReferences(GlobalRegExp);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild(), compiler));\n  }\n",
        "begin_line": 323,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 324,col 5)-(line 324,col 23)",
            "(line 325,col 5)-(line 325,col 39)",
            "(line 326,col 5)-(line 326,col 56)",
            "(line 327,col 5)-(line 327,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayHaveSideEffects()",
        "snippet": "  public void testMayHaveSideEffects() {\n    assertSideEffect(true, \"i++\");\n    assertSideEffect(true, \"[b, [a, i++]]\");\n    assertSideEffect(true, \"i=3\");\n    assertSideEffect(true, \"[0, i=3]\");\n    assertSideEffect(true, \"b()\");\n    assertSideEffect(true, \"[1, b()]\");\n    assertSideEffect(true, \"b.b=4\");\n    assertSideEffect(true, \"b.b--\");\n    assertSideEffect(true, \"i--\");\n    assertSideEffect(true, \"a[0][i=4]\");\n    assertSideEffect(true, \"a += 3\");\n    assertSideEffect(true, \"a, b, z += 4\");\n    assertSideEffect(true, \"a ? c : d++\");\n    assertSideEffect(true, \"a + c++\");\n    assertSideEffect(true, \"a + c - d()\");\n    assertSideEffect(true, \"a + c - d()\");\n\n    assertSideEffect(true, \"function foo() {}\");\n    assertSideEffect(true, \"while(true);\");\n    assertSideEffect(true, \"if(true){a()}\");\n\n    assertSideEffect(false, \"if(true){a}\");\n    assertSideEffect(false, \"(function() { })\");\n    assertSideEffect(false, \"(function() { i++ })\");\n    assertSideEffect(false, \"[function a(){}]\");\n\n    assertSideEffect(false, \"a\");\n    assertSideEffect(false, \"[b, c [d, [e]]]\");\n    assertSideEffect(false, \"({a: x, b: y, c: z})\");\n    assertSideEffect(false, \"/abc/gi\");\n    assertSideEffect(false, \"'a'\");\n    assertSideEffect(false, \"0\");\n    assertSideEffect(false, \"a + c\");\n    assertSideEffect(false, \"'c' + a[0]\");\n    assertSideEffect(false, \"a[0][1]\");\n    assertSideEffect(false, \"'a' + c\");\n    assertSideEffect(false, \"'a' + a.name\");\n    assertSideEffect(false, \"1, 2, 3\");\n    assertSideEffect(false, \"a, b, 3\");\n    assertSideEffect(false, \"(function(a, b) {  })\");\n    assertSideEffect(false, \"a ? c : d\");\n    assertSideEffect(false, \"'1' + navigator.userAgent\");\n\n    assertSideEffect(false, \"new RegExp('foobar', 'i')\");\n    assertSideEffect(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertSideEffect(false, \"new Array()\");\n    assertSideEffect(false, \"new Array\");\n    assertSideEffect(false, \"new Array(4)\");\n    assertSideEffect(false, \"new Array('a', 'b', 'c')\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n\n    assertSideEffect(false, \"({}).foo = 4\");\n    assertSideEffect(false, \"([]).foo = 4\");\n    assertSideEffect(false, \"(function() {}).foo = 4\");\n\n    assertSideEffect(true, \"this.foo = 4\");\n    assertSideEffect(true, \"a.foo = 4\");\n    assertSideEffect(true, \"(function() { return n; })().foo = 4\");\n    assertSideEffect(true, \"([]).foo = bar()\");\n\n    assertSideEffect(false, \"undefined\");\n    assertSideEffect(false, \"void 0\");\n    assertSideEffect(true, \"void foo()\");\n    assertSideEffect(false, \"-Infinity\");\n    assertSideEffect(false, \"Infinity\");\n    assertSideEffect(false, \"NaN\");\n\n    assertSideEffect(false, \"({}||[]).foo = 2;\");\n    assertSideEffect(false, \"(true ? {} : []).foo = 2;\");\n    assertSideEffect(false, \"({},[]).foo = 2;\");\n  }\n",
        "begin_line": 330,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 331,col 34)",
            "(line 332,col 5)-(line 332,col 44)",
            "(line 333,col 5)-(line 333,col 34)",
            "(line 334,col 5)-(line 334,col 39)",
            "(line 335,col 5)-(line 335,col 34)",
            "(line 336,col 5)-(line 336,col 39)",
            "(line 337,col 5)-(line 337,col 36)",
            "(line 338,col 5)-(line 338,col 36)",
            "(line 339,col 5)-(line 339,col 34)",
            "(line 340,col 5)-(line 340,col 40)",
            "(line 341,col 5)-(line 341,col 37)",
            "(line 342,col 5)-(line 342,col 43)",
            "(line 343,col 5)-(line 343,col 42)",
            "(line 344,col 5)-(line 344,col 38)",
            "(line 345,col 5)-(line 345,col 42)",
            "(line 346,col 5)-(line 346,col 42)",
            "(line 348,col 5)-(line 348,col 48)",
            "(line 349,col 5)-(line 349,col 43)",
            "(line 350,col 5)-(line 350,col 44)",
            "(line 352,col 5)-(line 352,col 43)",
            "(line 353,col 5)-(line 353,col 48)",
            "(line 354,col 5)-(line 354,col 52)",
            "(line 355,col 5)-(line 355,col 48)",
            "(line 357,col 5)-(line 357,col 33)",
            "(line 358,col 5)-(line 358,col 47)",
            "(line 359,col 5)-(line 359,col 52)",
            "(line 360,col 5)-(line 360,col 39)",
            "(line 361,col 5)-(line 361,col 35)",
            "(line 362,col 5)-(line 362,col 33)",
            "(line 363,col 5)-(line 363,col 37)",
            "(line 364,col 5)-(line 364,col 42)",
            "(line 365,col 5)-(line 365,col 39)",
            "(line 366,col 5)-(line 366,col 39)",
            "(line 367,col 5)-(line 367,col 44)",
            "(line 368,col 5)-(line 368,col 39)",
            "(line 369,col 5)-(line 369,col 39)",
            "(line 370,col 5)-(line 370,col 53)",
            "(line 371,col 5)-(line 371,col 41)",
            "(line 372,col 5)-(line 372,col 57)",
            "(line 374,col 5)-(line 374,col 57)",
            "(line 375,col 5)-(line 375,col 64)",
            "(line 376,col 5)-(line 376,col 43)",
            "(line 377,col 5)-(line 377,col 41)",
            "(line 378,col 5)-(line 378,col 44)",
            "(line 379,col 5)-(line 379,col 56)",
            "(line 380,col 5)-(line 380,col 59)",
            "(line 381,col 5)-(line 381,col 59)",
            "(line 383,col 5)-(line 383,col 44)",
            "(line 384,col 5)-(line 384,col 44)",
            "(line 385,col 5)-(line 385,col 55)",
            "(line 387,col 5)-(line 387,col 43)",
            "(line 388,col 5)-(line 388,col 40)",
            "(line 389,col 5)-(line 389,col 67)",
            "(line 390,col 5)-(line 390,col 47)",
            "(line 392,col 5)-(line 392,col 41)",
            "(line 393,col 5)-(line 393,col 38)",
            "(line 394,col 5)-(line 394,col 41)",
            "(line 395,col 5)-(line 395,col 41)",
            "(line 396,col 5)-(line 396,col 40)",
            "(line 397,col 5)-(line 397,col 35)",
            "(line 399,col 5)-(line 399,col 49)",
            "(line 400,col 5)-(line 400,col 57)",
            "(line 401,col 5)-(line 401,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testObjectMethodSideEffects()",
        "snippet": "  public void testObjectMethodSideEffects() {\n    // \"toString\" and \"valueOf\" are assumed to be side-effect free\n    assertSideEffect(false, \"o.toString()\");\n    assertSideEffect(false, \"o.valueOf()\");\n\n    // other methods depend on the extern definitions\n    assertSideEffect(true, \"o.watch()\");\n  }\n",
        "begin_line": 404,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 406,col 5)-(line 406,col 44)",
            "(line 407,col 5)-(line 407,col 43)",
            "(line 410,col 5)-(line 410,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRegExpSideEffect()",
        "snippet": "  public void testRegExpSideEffect() {\n    // A RegExp Object by itself doesn't have any side-effects\n    assertSideEffect(false, \"/abc/gi\", true);\n    assertSideEffect(false, \"/abc/gi\", false);\n\n    // RegExp instance methods have global side-effects, so whether they are\n    // considered side-effect free depends on whether the global properties\n    // are referenced.\n    assertSideEffect(true, \"(/abc/gi).test('')\", true);\n    assertSideEffect(false, \"(/abc/gi).test('')\", false);\n    assertSideEffect(true, \"(/abc/gi).test(a)\", true);\n    assertSideEffect(false, \"(/abc/gi).test(b)\", false);\n\n    assertSideEffect(true, \"(/abc/gi).exec('')\", true);\n    assertSideEffect(false, \"(/abc/gi).exec('')\", false);\n\n    // Some RegExp object method that may have side-effects.\n    assertSideEffect(true, \"(/abc/gi).foo('')\", true);\n    assertSideEffect(true, \"(/abc/gi).foo('')\", false);\n\n    // Try the string RegExp ops.\n    assertSideEffect(true, \"''.match('a')\", true);\n    assertSideEffect(false, \"''.match('a')\", false);\n    assertSideEffect(true, \"''.match(/(a)/)\", true);\n    assertSideEffect(false, \"''.match(/(a)/)\", false);\n\n    assertSideEffect(true, \"''.replace('a')\", true);\n    assertSideEffect(false, \"''.replace('a')\", false);\n\n    assertSideEffect(true, \"''.search('a')\", true);\n    assertSideEffect(false, \"''.search('a')\", false);\n\n    assertSideEffect(true, \"''.split('a')\", true);\n    assertSideEffect(false, \"''.split('a')\", false);\n\n    // Some non-RegExp string op that may have side-effects.\n    assertSideEffect(true, \"''.foo('a')\", true);\n    assertSideEffect(true, \"''.foo('a')\", false);\n\n    // 'a' might be a RegExp object with the 'g' flag, in which case\n    // the state might change by running any of the string ops.\n    // Specifically, using these methods resets the \"lastIndex\" if used\n    // in combination with a RegExp instance \"exec\" method.\n    assertSideEffect(true, \"''.match(a)\", true);\n    assertSideEffect(true, \"''.match(a)\", false);\n  }\n",
        "begin_line": 413,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 45)",
            "(line 416,col 5)-(line 416,col 46)",
            "(line 421,col 5)-(line 421,col 55)",
            "(line 422,col 5)-(line 422,col 57)",
            "(line 423,col 5)-(line 423,col 54)",
            "(line 424,col 5)-(line 424,col 56)",
            "(line 426,col 5)-(line 426,col 55)",
            "(line 427,col 5)-(line 427,col 57)",
            "(line 430,col 5)-(line 430,col 54)",
            "(line 431,col 5)-(line 431,col 55)",
            "(line 434,col 5)-(line 434,col 50)",
            "(line 435,col 5)-(line 435,col 52)",
            "(line 436,col 5)-(line 436,col 52)",
            "(line 437,col 5)-(line 437,col 54)",
            "(line 439,col 5)-(line 439,col 52)",
            "(line 440,col 5)-(line 440,col 54)",
            "(line 442,col 5)-(line 442,col 51)",
            "(line 443,col 5)-(line 443,col 53)",
            "(line 445,col 5)-(line 445,col 50)",
            "(line 446,col 5)-(line 446,col 52)",
            "(line 449,col 5)-(line 449,col 48)",
            "(line 450,col 5)-(line 450,col 49)",
            "(line 456,col 5)-(line 456,col 48)",
            "(line 457,col 5)-(line 457,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertMutableState(boolean, java.lang.String)",
        "snippet": "  private void assertMutableState(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayEffectMutableState(n.getFirstChild()));\n  }\n",
        "begin_line": 460,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 23)",
            "(line 462,col 5)-(line 462,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayEffectMutableState()",
        "snippet": "  public void testMayEffectMutableState() {\n    assertMutableState(true, \"i++\");\n    assertMutableState(true, \"[b, [a, i++]]\");\n    assertMutableState(true, \"i=3\");\n    assertMutableState(true, \"[0, i=3]\");\n    assertMutableState(true, \"b()\");\n    assertMutableState(true, \"void b()\");\n    assertMutableState(true, \"[1, b()]\");\n    assertMutableState(true, \"b.b=4\");\n    assertMutableState(true, \"b.b--\");\n    assertMutableState(true, \"i--\");\n    assertMutableState(true, \"a[0][i=4]\");\n    assertMutableState(true, \"a += 3\");\n    assertMutableState(true, \"a, b, z += 4\");\n    assertMutableState(true, \"a ? c : d++\");\n    assertMutableState(true, \"a + c++\");\n    assertMutableState(true, \"a + c - d()\");\n    assertMutableState(true, \"a + c - d()\");\n\n    assertMutableState(true, \"function foo() {}\");\n    assertMutableState(true, \"while(true);\");\n    assertMutableState(true, \"if(true){a()}\");\n\n    assertMutableState(false, \"if(true){a}\");\n    assertMutableState(true, \"(function() { })\");\n    assertMutableState(true, \"(function() { i++ })\");\n    assertMutableState(true, \"[function a(){}]\");\n\n    assertMutableState(false, \"a\");\n    assertMutableState(true, \"[b, c [d, [e]]]\");\n    assertMutableState(true, \"({a: x, b: y, c: z})\");\n    // Note: RegEx objects are not immutable,  for instance, the exec\n    // method maintains state for \"global\" searches.\n    assertMutableState(true, \"/abc/gi\");\n    assertMutableState(false, \"'a'\");\n    assertMutableState(false, \"0\");\n    assertMutableState(false, \"a + c\");\n    assertMutableState(false, \"'c' + a[0]\");\n    assertMutableState(false, \"a[0][1]\");\n    assertMutableState(false, \"'a' + c\");\n    assertMutableState(false, \"'a' + a.name\");\n    assertMutableState(false, \"1, 2, 3\");\n    assertMutableState(false, \"a, b, 3\");\n    assertMutableState(true, \"(function(a, b) {  })\");\n    assertMutableState(false, \"a ? c : d\");\n    assertMutableState(false, \"'1' + navigator.userAgent\");\n\n    assertMutableState(true, \"new RegExp('foobar', 'i')\");\n    assertMutableState(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertMutableState(true, \"new Array()\");\n    assertMutableState(true, \"new Array\");\n    assertMutableState(true, \"new Array(4)\");\n    assertMutableState(true, \"new Array('a', 'b', 'c')\");\n    assertMutableState(true, \"new SomeClassINeverHeardOf()\");\n  }\n",
        "begin_line": 465,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 466,col 5)-(line 466,col 36)",
            "(line 467,col 5)-(line 467,col 46)",
            "(line 468,col 5)-(line 468,col 36)",
            "(line 469,col 5)-(line 469,col 41)",
            "(line 470,col 5)-(line 470,col 36)",
            "(line 471,col 5)-(line 471,col 41)",
            "(line 472,col 5)-(line 472,col 41)",
            "(line 473,col 5)-(line 473,col 38)",
            "(line 474,col 5)-(line 474,col 38)",
            "(line 475,col 5)-(line 475,col 36)",
            "(line 476,col 5)-(line 476,col 42)",
            "(line 477,col 5)-(line 477,col 39)",
            "(line 478,col 5)-(line 478,col 45)",
            "(line 479,col 5)-(line 479,col 44)",
            "(line 480,col 5)-(line 480,col 40)",
            "(line 481,col 5)-(line 481,col 44)",
            "(line 482,col 5)-(line 482,col 44)",
            "(line 484,col 5)-(line 484,col 50)",
            "(line 485,col 5)-(line 485,col 45)",
            "(line 486,col 5)-(line 486,col 46)",
            "(line 488,col 5)-(line 488,col 45)",
            "(line 489,col 5)-(line 489,col 49)",
            "(line 490,col 5)-(line 490,col 53)",
            "(line 491,col 5)-(line 491,col 49)",
            "(line 493,col 5)-(line 493,col 35)",
            "(line 494,col 5)-(line 494,col 48)",
            "(line 495,col 5)-(line 495,col 53)",
            "(line 498,col 5)-(line 498,col 40)",
            "(line 499,col 5)-(line 499,col 37)",
            "(line 500,col 5)-(line 500,col 35)",
            "(line 501,col 5)-(line 501,col 39)",
            "(line 502,col 5)-(line 502,col 44)",
            "(line 503,col 5)-(line 503,col 41)",
            "(line 504,col 5)-(line 504,col 41)",
            "(line 505,col 5)-(line 505,col 46)",
            "(line 506,col 5)-(line 506,col 41)",
            "(line 507,col 5)-(line 507,col 41)",
            "(line 508,col 5)-(line 508,col 54)",
            "(line 509,col 5)-(line 509,col 43)",
            "(line 510,col 5)-(line 510,col 59)",
            "(line 512,col 5)-(line 512,col 58)",
            "(line 513,col 5)-(line 513,col 66)",
            "(line 514,col 5)-(line 514,col 44)",
            "(line 515,col 5)-(line 515,col 42)",
            "(line 516,col 5)-(line 516,col 45)",
            "(line 517,col 5)-(line 517,col 57)",
            "(line 518,col 5)-(line 518,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression()",
        "snippet": "  public void testIsFunctionExpression() {\n    assertContainsAnonFunc(true, \"(function(){})\");\n    assertContainsAnonFunc(true, \"[function a(){}]\");\n    assertContainsAnonFunc(false, \"{x: function a(){}}\");\n    assertContainsAnonFunc(true, \"(function a(){})()\");\n    assertContainsAnonFunc(true, \"x = function a(){};\");\n    assertContainsAnonFunc(true, \"var x = function a(){};\");\n    assertContainsAnonFunc(true, \"if (function a(){});\");\n    assertContainsAnonFunc(true, \"while (function a(){});\");\n    assertContainsAnonFunc(true, \"do; while (function a(){});\");\n    assertContainsAnonFunc(true, \"for (function a(){};;);\");\n    assertContainsAnonFunc(true, \"for (;function a(){};);\");\n    assertContainsAnonFunc(true, \"for (;;function a(){});\");\n    assertContainsAnonFunc(true, \"for (p in function a(){});\");\n    assertContainsAnonFunc(true, \"with (function a(){}) {}\");\n    assertContainsAnonFunc(false, \"function a(){}\");\n    assertContainsAnonFunc(false, \"if (x) function a(){};\");\n    assertContainsAnonFunc(false, \"if (x) { function a(){} }\");\n    assertContainsAnonFunc(false, \"if (x); else function a(){};\");\n    assertContainsAnonFunc(false, \"while (x) function a(){};\");\n    assertContainsAnonFunc(false, \"do function a(){} while (0);\");\n    assertContainsAnonFunc(false, \"for (;;) function a(){}\");\n    assertContainsAnonFunc(false, \"for (p in o) function a(){};\");\n    assertContainsAnonFunc(false, \"with (x) function a(){}\");\n  }\n",
        "begin_line": 522,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 523,col 51)",
            "(line 524,col 5)-(line 524,col 53)",
            "(line 525,col 5)-(line 525,col 57)",
            "(line 526,col 5)-(line 526,col 55)",
            "(line 527,col 5)-(line 527,col 56)",
            "(line 528,col 5)-(line 528,col 60)",
            "(line 529,col 5)-(line 529,col 57)",
            "(line 530,col 5)-(line 530,col 60)",
            "(line 531,col 5)-(line 531,col 64)",
            "(line 532,col 5)-(line 532,col 60)",
            "(line 533,col 5)-(line 533,col 60)",
            "(line 534,col 5)-(line 534,col 60)",
            "(line 535,col 5)-(line 535,col 63)",
            "(line 536,col 5)-(line 536,col 61)",
            "(line 537,col 5)-(line 537,col 52)",
            "(line 538,col 5)-(line 538,col 60)",
            "(line 539,col 5)-(line 539,col 63)",
            "(line 540,col 5)-(line 540,col 66)",
            "(line 541,col 5)-(line 541,col 63)",
            "(line 542,col 5)-(line 542,col 66)",
            "(line 543,col 5)-(line 543,col 61)",
            "(line 544,col 5)-(line 544,col 66)",
            "(line 545,col 5)-(line 545,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testNewFunctionNode()",
        "snippet": "  public void testNewFunctionNode() {\n    Node expected = parse(\"function foo(p1, p2, p3) { throw 2; }\");\n    Node body = new Node(Token.BLOCK, new Node(Token.THROW, Node.newNumber(2)));\n    List<Node> params = Lists.newArrayList(Node.newString(Token.NAME, \"p1\"),\n                                           Node.newString(Token.NAME, \"p2\"),\n                                           Node.newString(Token.NAME, \"p3\"));\n    Node function = NodeUtil.newFunctionNode(\n        \"foo\", params, body, -1, -1);\n    Node actual = new Node(Token.SCRIPT);\n    actual.addChildToFront(function);\n    String difference = expected.checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 548,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 67)",
            "(line 550,col 5)-(line 550,col 80)",
            "(line 551,col 5)-(line 553,col 77)",
            "(line 554,col 5)-(line 555,col 37)",
            "(line 556,col 5)-(line 556,col 41)",
            "(line 557,col 5)-(line 557,col 37)",
            "(line 558,col 5)-(line 558,col 57)",
            "(line 559,col 5)-(line 561,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertContainsAnonFunc(boolean, java.lang.String)",
        "snippet": "  private void assertContainsAnonFunc(boolean expected, String js) {\n    Node funcParent = findParentOfFuncDescendant(parse(js));\n    assertNotNull(\"Expected function node in parse tree of: \" + js, funcParent);\n    Node funcNode = getFuncChild(funcParent);\n    assertEquals(expected, NodeUtil.isFunctionExpression(funcNode));\n  }\n",
        "begin_line": 564,
        "end_line": 569,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 565,col 60)",
            "(line 566,col 5)-(line 566,col 80)",
            "(line 567,col 5)-(line 567,col 45)",
            "(line 568,col 5)-(line 568,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.findParentOfFuncDescendant(com.google.javascript.rhino.Node)",
        "snippet": "  private Node findParentOfFuncDescendant(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return n;\n      }\n      Node result = findParentOfFuncDescendant(c);\n      if (result != null) {\n        return result;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 571,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 572,col 5)-(line 580,col 5)",
            "(line 581,col 5)-(line 581,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFuncChild(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getFuncChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 584,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 589,col 5)",
            "(line 590,col 5)-(line 590,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsType()",
        "snippet": "  public void testContainsType() {\n    assertTrue(NodeUtil.containsType(\n        parse(\"this\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"function foo(){}(this)\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"b?this:null\"), Token.THIS));\n\n    assertFalse(NodeUtil.containsType(\n        parse(\"a\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"function foo(){}\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"(b?foo():null)\"), Token.THIS));\n  }\n",
        "begin_line": 593,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 594,col 5)-(line 595,col 36)",
            "(line 596,col 5)-(line 597,col 54)",
            "(line 598,col 5)-(line 599,col 43)",
            "(line 601,col 5)-(line 602,col 33)",
            "(line 603,col 5)-(line 604,col 48)",
            "(line 605,col 5)-(line 606,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testReferencesThis()",
        "snippet": "  public void testReferencesThis() {\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"this\")));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"function foo(){}(this)\")));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"b?this:null\")));\n\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"a\")));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"function foo(){}\")));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"(b?foo():null)\")));\n  }\n",
        "begin_line": 609,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 611,col 24)",
            "(line 612,col 5)-(line 613,col 42)",
            "(line 614,col 5)-(line 615,col 31)",
            "(line 617,col 5)-(line 618,col 21)",
            "(line 619,col 5)-(line 620,col 36)",
            "(line 621,col 5)-(line 622,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNodeTypeReferenceCount()",
        "snippet": "  public void testGetNodeTypeReferenceCount() {\n    assertEquals(0, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"function foo(){}\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(1, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(2, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this;function foo(){}(this)\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n  }\n",
        "begin_line": 625,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 626,col 5)-(line 628,col 44)",
            "(line 629,col 5)-(line 631,col 44)",
            "(line 632,col 5)-(line 634,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsNameReferenceCount()",
        "snippet": "  public void testIsNameReferenceCount() {\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"var foo = function(){}\"), \"foo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"goo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"foo\"));\n  }\n",
        "begin_line": 637,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 639,col 43)",
            "(line 640,col 5)-(line 641,col 49)",
            "(line 642,col 5)-(line 643,col 49)",
            "(line 644,col 5)-(line 645,col 42)",
            "(line 646,col 5)-(line 647,col 70)",
            "(line 649,col 5)-(line 650,col 34)",
            "(line 651,col 5)-(line 652,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNameReferenceCount()",
        "snippet": "  public void testGetNameReferenceCount() {\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"undefined\"), \"undefined\"));\n    assertEquals(2, NodeUtil.getNameReferenceCount(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"goo\"));\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"var foo = function(){}\"), \"foo\"));\n  }\n",
        "begin_line": 656,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 657,col 5)-(line 658,col 49)",
            "(line 659,col 5)-(line 660,col 42)",
            "(line 661,col 5)-(line 662,col 70)",
            "(line 664,col 5)-(line 665,col 34)",
            "(line 666,col 5)-(line 667,col 34)",
            "(line 668,col 5)-(line 669,col 43)",
            "(line 670,col 5)-(line 671,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetVarsDeclaredInBranch()",
        "snippet": "  public void testGetVarsDeclaredInBranch() {\n    Compiler compiler = new Compiler();\n\n    assertNodeNames(Sets.newHashSet(\"foo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo;\")));\n    assertNodeNames(Sets.newHashSet(\"foo\",\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo,goo;\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"foo();\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"function f(){var foo;}\")));\n    assertNodeNames(Sets.newHashSet(\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var goo;function f(){var foo;}\")));\n  }\n",
        "begin_line": 674,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 675,col 5)-(line 675,col 39)",
            "(line 677,col 5)-(line 679,col 32)",
            "(line 680,col 5)-(line 682,col 36)",
            "(line 683,col 5)-(line 685,col 30)",
            "(line 686,col 5)-(line 688,col 46)",
            "(line 689,col 5)-(line 691,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNodeNames(java.util.Set<java.lang.String>, java.util.Collection<com.google.javascript.rhino.Node>)",
        "snippet": "  private void assertNodeNames(Set<String> nodeNames, Collection<Node> nodes) {\n    Set<String> actualNames = Sets.newHashSet();\n    for (Node node : nodes) {\n      actualNames.add(node.getString());\n    }\n    assertEquals(nodeNames, actualNames);\n  }\n",
        "begin_line": 694,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 695,col 5)-(line 695,col 48)",
            "(line 696,col 5)-(line 698,col 5)",
            "(line 699,col 5)-(line 699,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsControlStructureCodeBlock()",
        "snippet": "  public void testIsControlStructureCodeBlock() {\n    Node root = parse(\"if (x) foo(); else boo();\");\n    Node ifNode = root.getFirstChild();\n\n    Node ifCondition = ifNode.getFirstChild();\n    Node ifCase = ifNode.getFirstChild().getNext();\n    Node elseCase = ifNode.getLastChild();\n\n    assertFalse(NodeUtil.isControlStructureCodeBlock(ifNode, ifCondition));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, ifCase));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, elseCase));\n  }\n",
        "begin_line": 702,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 703,col 5)-(line 703,col 51)",
            "(line 704,col 5)-(line 704,col 39)",
            "(line 706,col 5)-(line 706,col 46)",
            "(line 707,col 5)-(line 707,col 51)",
            "(line 708,col 5)-(line 708,col 42)",
            "(line 710,col 5)-(line 710,col 75)",
            "(line 711,col 5)-(line 711,col 69)",
            "(line 712,col 5)-(line 712,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression1()",
        "snippet": "  public void testIsFunctionExpression1() {\n    Node root = parse(\"(function foo() {})\");\n    Node StatementNode = root.getFirstChild();\n    assertTrue(NodeUtil.isExpressionNode(StatementNode));\n    Node functionNode = StatementNode.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertTrue(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 715,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 45)",
            "(line 717,col 5)-(line 717,col 46)",
            "(line 718,col 5)-(line 718,col 57)",
            "(line 719,col 5)-(line 719,col 54)",
            "(line 720,col 5)-(line 720,col 50)",
            "(line 721,col 5)-(line 721,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression2()",
        "snippet": "  public void testIsFunctionExpression2() {\n    Node root = parse(\"function foo() {}\");\n    Node functionNode = root.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertFalse(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 724,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 725,col 5)-(line 725,col 43)",
            "(line 726,col 5)-(line 726,col 45)",
            "(line 727,col 5)-(line 727,col 50)",
            "(line 728,col 5)-(line 728,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveChildBlock()",
        "snippet": "  public void testRemoveChildBlock() {\n    // Test removing the inner block.\n    Node actual = parse(\"{{x()}}\");\n\n    Node outerBlockNode = actual.getFirstChild();\n    Node innerBlockNode = outerBlockNode.getFirstChild();\n    innerBlockNode.setIsSyntheticBlock(true);\n\n    NodeUtil.removeChild(outerBlockNode, innerBlockNode);\n    String expected = \"{{}}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 731,
        "end_line": 745,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 733,col 35)",
            "(line 735,col 5)-(line 735,col 49)",
            "(line 736,col 5)-(line 736,col 57)",
            "(line 737,col 5)-(line 737,col 45)",
            "(line 739,col 5)-(line 739,col 57)",
            "(line 740,col 5)-(line 740,col 29)",
            "(line 741,col 5)-(line 741,col 64)",
            "(line 742,col 5)-(line 744,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild1()",
        "snippet": "  public void testRemoveTryChild1() {\n    // Test removing the finally clause.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, finallyBlock);\n    String expected = \"try {foo()} catch(e) {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 747,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 749,col 5)-(line 749,col 62)",
            "(line 751,col 5)-(line 751,col 42)",
            "(line 752,col 5)-(line 752,col 44)",
            "(line 753,col 5)-(line 753,col 57)",
            "(line 754,col 5)-(line 754,col 47)",
            "(line 756,col 5)-(line 756,col 48)",
            "(line 757,col 5)-(line 757,col 48)",
            "(line 758,col 5)-(line 758,col 64)",
            "(line 759,col 5)-(line 761,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild2()",
        "snippet": "  public void testRemoveTryChild2() {\n    // Test removing the try clause.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(tryNode, tryBlock);\n    String expected = \"try {} catch(e) {} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 764,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 766,col 62)",
            "(line 768,col 5)-(line 768,col 42)",
            "(line 769,col 5)-(line 769,col 44)",
            "(line 770,col 5)-(line 770,col 57)",
            "(line 772,col 5)-(line 772,col 44)",
            "(line 773,col 5)-(line 773,col 54)",
            "(line 774,col 5)-(line 774,col 64)",
            "(line 775,col 5)-(line 777,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild3()",
        "snippet": "  public void testRemoveTryChild3() {\n    // Test removing the catch clause.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(catchBlocks, catchBlock);\n    String expected = \"try {foo()} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 780,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 782,col 62)",
            "(line 784,col 5)-(line 784,col 42)",
            "(line 785,col 5)-(line 785,col 44)",
            "(line 786,col 5)-(line 786,col 57)",
            "(line 787,col 5)-(line 787,col 50)",
            "(line 788,col 5)-(line 788,col 47)",
            "(line 790,col 5)-(line 790,col 50)",
            "(line 791,col 5)-(line 791,col 47)",
            "(line 792,col 5)-(line 792,col 64)",
            "(line 793,col 5)-(line 795,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild4()",
        "snippet": "  public void testRemoveTryChild4() {\n    // Test removing the catch clause without a finally.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, catchBlocks);\n    String expected = \"try {foo()} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 798,
        "end_line": 814,
        "comment": "",
        "child_ranges": [
            "(line 800,col 5)-(line 800,col 62)",
            "(line 802,col 5)-(line 802,col 42)",
            "(line 803,col 5)-(line 803,col 44)",
            "(line 804,col 5)-(line 804,col 57)",
            "(line 805,col 5)-(line 805,col 50)",
            "(line 806,col 5)-(line 806,col 47)",
            "(line 808,col 5)-(line 808,col 47)",
            "(line 809,col 5)-(line 809,col 47)",
            "(line 810,col 5)-(line 810,col 64)",
            "(line 811,col 5)-(line 813,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild5()",
        "snippet": "  public void testRemoveTryChild5() {\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(catchBlocks, catchBlock);\n    String expected = \"try {foo()} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 816,
        "end_line": 831,
        "comment": "",
        "child_ranges": [
            "(line 817,col 5)-(line 817,col 62)",
            "(line 819,col 5)-(line 819,col 42)",
            "(line 820,col 5)-(line 820,col 44)",
            "(line 821,col 5)-(line 821,col 57)",
            "(line 822,col 5)-(line 822,col 50)",
            "(line 823,col 5)-(line 823,col 47)",
            "(line 825,col 5)-(line 825,col 50)",
            "(line 826,col 5)-(line 826,col 47)",
            "(line 827,col 5)-(line 827,col 64)",
            "(line 828,col 5)-(line 830,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveVarChild()",
        "snippet": "  public void testRemoveVarChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"var foo, goo, hoo\");\n\n    Node varNode = actual.getFirstChild();\n    Node nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    String expected = \"var goo, hoo\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n\n    // Test removing the second child.\n    actual = parse(\"var foo, goo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo, hoo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last child of several children.\n    actual = parse(\"var foo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last.\n    actual = parse(\"var hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 833,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 834,col 5)-(line 834,col 39)",
            "(line 837,col 5)-(line 837,col 45)",
            "(line 839,col 5)-(line 839,col 42)",
            "(line 840,col 5)-(line 840,col 44)",
            "(line 842,col 5)-(line 842,col 44)",
            "(line 843,col 5)-(line 843,col 37)",
            "(line 844,col 5)-(line 844,col 64)",
            "(line 845,col 5)-(line 847,col 5)",
            "(line 851,col 5)-(line 851,col 40)",
            "(line 853,col 5)-(line 853,col 37)",
            "(line 854,col 5)-(line 854,col 49)",
            "(line 856,col 5)-(line 856,col 44)",
            "(line 857,col 5)-(line 857,col 30)",
            "(line 858,col 5)-(line 858,col 57)",
            "(line 859,col 5)-(line 861,col 5)",
            "(line 864,col 5)-(line 864,col 35)",
            "(line 866,col 5)-(line 866,col 37)",
            "(line 867,col 5)-(line 867,col 49)",
            "(line 869,col 5)-(line 869,col 44)",
            "(line 870,col 5)-(line 870,col 25)",
            "(line 871,col 5)-(line 871,col 57)",
            "(line 872,col 5)-(line 874,col 5)",
            "(line 877,col 5)-(line 877,col 30)",
            "(line 879,col 5)-(line 879,col 37)",
            "(line 880,col 5)-(line 880,col 39)",
            "(line 882,col 5)-(line 882,col 44)",
            "(line 883,col 5)-(line 883,col 18)",
            "(line 884,col 5)-(line 884,col 57)",
            "(line 885,col 5)-(line 887,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild1()",
        "snippet": "  public void testRemoveLabelChild1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 890,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 39)",
            "(line 894,col 5)-(line 894,col 38)",
            "(line 896,col 5)-(line 896,col 44)",
            "(line 897,col 5)-(line 897,col 52)",
            "(line 899,col 5)-(line 899,col 53)",
            "(line 900,col 5)-(line 900,col 25)",
            "(line 901,col 5)-(line 901,col 64)",
            "(line 902,col 5)-(line 904,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild2()",
        "snippet": "  public void testRemoveLabelChild2() {\n    // Test removing the first child.\n    Node actual = parse(\"achoo: foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 907,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 909,col 5)-(line 909,col 45)",
            "(line 911,col 5)-(line 911,col 44)",
            "(line 912,col 5)-(line 912,col 52)",
            "(line 914,col 5)-(line 914,col 53)",
            "(line 915,col 5)-(line 915,col 25)",
            "(line 916,col 5)-(line 916,col 64)",
            "(line 917,col 5)-(line 919,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveForChild()",
        "snippet": "  public void testRemoveForChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    Node forNode = actual.getFirstChild();\n    Node child = forNode.getFirstChild();\n\n    NodeUtil.removeChild(forNode, child);\n    String expected = \"for(;a<0;a++)foo()\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the condition.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;;a++)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the increment.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;a++);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(a in ack)foo();\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(a in ack);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 922,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 923,col 5)-(line 923,col 39)",
            "(line 926,col 5)-(line 926,col 53)",
            "(line 928,col 5)-(line 928,col 42)",
            "(line 929,col 5)-(line 929,col 41)",
            "(line 931,col 5)-(line 931,col 41)",
            "(line 932,col 5)-(line 932,col 43)",
            "(line 933,col 5)-(line 933,col 64)",
            "(line 934,col 5)-(line 934,col 65)",
            "(line 938,col 5)-(line 938,col 48)",
            "(line 940,col 5)-(line 940,col 37)",
            "(line 941,col 5)-(line 941,col 46)",
            "(line 943,col 5)-(line 943,col 41)",
            "(line 944,col 5)-(line 944,col 40)",
            "(line 945,col 5)-(line 945,col 57)",
            "(line 946,col 5)-(line 946,col 65)",
            "(line 950,col 5)-(line 950,col 48)",
            "(line 952,col 5)-(line 952,col 37)",
            "(line 953,col 5)-(line 953,col 56)",
            "(line 955,col 5)-(line 955,col 41)",
            "(line 956,col 5)-(line 956,col 40)",
            "(line 957,col 5)-(line 957,col 57)",
            "(line 958,col 5)-(line 958,col 65)",
            "(line 962,col 5)-(line 962,col 48)",
            "(line 964,col 5)-(line 964,col 37)",
            "(line 965,col 5)-(line 965,col 35)",
            "(line 967,col 5)-(line 967,col 41)",
            "(line 968,col 5)-(line 968,col 39)",
            "(line 969,col 5)-(line 969,col 57)",
            "(line 970,col 5)-(line 970,col 65)",
            "(line 974,col 5)-(line 974,col 42)",
            "(line 976,col 5)-(line 976,col 37)",
            "(line 977,col 5)-(line 977,col 35)",
            "(line 979,col 5)-(line 979,col 41)",
            "(line 980,col 5)-(line 980,col 32)",
            "(line 981,col 5)-(line 981,col 57)",
            "(line 982,col 5)-(line 982,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock1()",
        "snippet": "  public void testMergeBlock1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"{{a();b();}}\");\n\n    Node parentBlock = actual.getFirstChild();\n    Node childBlock = parentBlock.getFirstChild();\n\n    assertTrue(NodeUtil.tryMergeBlock(childBlock));\n    String expected = \"{a();b();}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 985,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 39)",
            "(line 989,col 5)-(line 989,col 40)",
            "(line 991,col 5)-(line 991,col 46)",
            "(line 992,col 5)-(line 992,col 50)",
            "(line 994,col 5)-(line 994,col 51)",
            "(line 995,col 5)-(line 995,col 35)",
            "(line 996,col 5)-(line 996,col 64)",
            "(line 997,col 5)-(line 997,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock2()",
        "snippet": "  public void testMergeBlock2() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"foo:{a();}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n  }\n",
        "begin_line": 1000,
        "end_line": 1010,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1001,col 39)",
            "(line 1004,col 5)-(line 1004,col 38)",
            "(line 1006,col 5)-(line 1006,col 46)",
            "(line 1007,col 5)-(line 1007,col 49)",
            "(line 1009,col 5)-(line 1009,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock3()",
        "snippet": "  public void testMergeBlock3() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"foo:{a();boo()}\";\n    Node actual = parse(\"foo:{a();boo()}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n    String expected = code;\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 1012,
        "end_line": 1026,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1013,col 39)",
            "(line 1016,col 5)-(line 1016,col 36)",
            "(line 1017,col 5)-(line 1017,col 43)",
            "(line 1019,col 5)-(line 1019,col 46)",
            "(line 1020,col 5)-(line 1020,col 49)",
            "(line 1022,col 5)-(line 1022,col 52)",
            "(line 1023,col 5)-(line 1023,col 27)",
            "(line 1024,col 5)-(line 1024,col 64)",
            "(line 1025,col 5)-(line 1025,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetSourceName()",
        "snippet": "  public void testGetSourceName() {\n    Node n = new Node(Token.BLOCK);\n    Node parent = new Node(Token.BLOCK, n);\n    parent.putProp(Node.SOURCENAME_PROP, \"foo\");\n    assertEquals(\"foo\", NodeUtil.getSourceName(n));\n  }\n",
        "begin_line": 1028,
        "end_line": 1033,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 5)-(line 1029,col 35)",
            "(line 1030,col 5)-(line 1030,col 43)",
            "(line 1031,col 5)-(line 1031,col 48)",
            "(line 1032,col 5)-(line 1032,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLabelName()",
        "snippet": "  public void testIsLabelName() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"a:while(1) {a; continue a; break a; break;}\";\n    Node actual = parse(code);\n\n    Node labelNode = actual.getFirstChild();\n    assertTrue(labelNode.getType() == Token.LABEL);\n    assertTrue(NodeUtil.isLabelName(labelNode.getFirstChild()));\n    assertFalse(NodeUtil.isLabelName(labelNode.getLastChild()));\n\n    Node whileNode = labelNode.getLastChild();\n    assertTrue(whileNode.getType() == Token.WHILE);\n    Node whileBlock = whileNode.getLastChild();\n    assertTrue(whileBlock.getType() == Token.BLOCK);\n    assertFalse(NodeUtil.isLabelName(whileBlock));\n\n    Node firstStatement = whileBlock.getFirstChild();\n    assertTrue(firstStatement.getType() == Token.EXPR_RESULT);\n    Node variableReference = firstStatement.getFirstChild();\n    assertTrue(variableReference.getType() == Token.NAME);\n    assertFalse(NodeUtil.isLabelName(variableReference));\n\n    Node continueStatement = firstStatement.getNext();\n    assertTrue(continueStatement.getType() == Token.CONTINUE);\n    assertTrue(NodeUtil.isLabelName(continueStatement.getFirstChild()));\n\n    Node firstBreak = continueStatement.getNext();\n    assertTrue(firstBreak.getType() == Token.BREAK);\n    assertTrue(NodeUtil.isLabelName(firstBreak.getFirstChild()));\n\n    Node secondBreak = firstBreak.getNext();\n    assertTrue(secondBreak.getType() == Token.BREAK);\n    assertFalse(secondBreak.hasChildren());\n    assertFalse(NodeUtil.isLabelName(secondBreak.getFirstChild()));\n  }\n",
        "begin_line": 1035,
        "end_line": 1071,
        "comment": "",
        "child_ranges": [
            "(line 1036,col 5)-(line 1036,col 39)",
            "(line 1039,col 5)-(line 1039,col 64)",
            "(line 1040,col 5)-(line 1040,col 30)",
            "(line 1042,col 5)-(line 1042,col 44)",
            "(line 1043,col 5)-(line 1043,col 51)",
            "(line 1044,col 5)-(line 1044,col 64)",
            "(line 1045,col 5)-(line 1045,col 64)",
            "(line 1047,col 5)-(line 1047,col 46)",
            "(line 1048,col 5)-(line 1048,col 51)",
            "(line 1049,col 5)-(line 1049,col 47)",
            "(line 1050,col 5)-(line 1050,col 52)",
            "(line 1051,col 5)-(line 1051,col 50)",
            "(line 1053,col 5)-(line 1053,col 53)",
            "(line 1054,col 5)-(line 1054,col 62)",
            "(line 1055,col 5)-(line 1055,col 60)",
            "(line 1056,col 5)-(line 1056,col 58)",
            "(line 1057,col 5)-(line 1057,col 57)",
            "(line 1059,col 5)-(line 1059,col 54)",
            "(line 1060,col 5)-(line 1060,col 62)",
            "(line 1061,col 5)-(line 1061,col 72)",
            "(line 1063,col 5)-(line 1063,col 50)",
            "(line 1064,col 5)-(line 1064,col 52)",
            "(line 1065,col 5)-(line 1065,col 65)",
            "(line 1067,col 5)-(line 1067,col 44)",
            "(line 1068,col 5)-(line 1068,col 53)",
            "(line 1069,col 5)-(line 1069,col 43)",
            "(line 1070,col 5)-(line 1070,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue1()",
        "snippet": "  public void testLocalValue1() throws Exception {\n    // Names are not known to be local.\n    assertFalse(testLocalValue(\"x\"));\n    assertFalse(testLocalValue(\"x()\"));\n    assertFalse(testLocalValue(\"this\"));\n    assertFalse(testLocalValue(\"arguments\"));\n\n    // We can't know if new objects are local unless we know\n    // that they don't alias themselves.\n    assertFalse(testLocalValue(\"new x()\"));\n\n    // property references are assume to be non-local\n    assertFalse(testLocalValue(\"(new x()).y\"));\n    assertFalse(testLocalValue(\"(new x())['y']\"));\n\n    // Primitive values are local\n    assertTrue(testLocalValue(\"null\"));\n    assertTrue(testLocalValue(\"undefined\"));\n    assertTrue(testLocalValue(\"Infinity\"));\n    assertTrue(testLocalValue(\"NaN\"));\n    assertTrue(testLocalValue(\"1\"));\n    assertTrue(testLocalValue(\"'a'\"));\n    assertTrue(testLocalValue(\"true\"));\n    assertTrue(testLocalValue(\"false\"));\n    assertTrue(testLocalValue(\"[]\"));\n    assertTrue(testLocalValue(\"{}\"));\n\n    // The contents of arrays and objects don't matter\n    assertTrue(testLocalValue(\"[x]\"));\n    assertTrue(testLocalValue(\"{'a':x}\"));\n\n    // Pre-increment results in primitive number\n    assertTrue(testLocalValue(\"++x\"));\n    assertTrue(testLocalValue(\"--x\"));\n\n    // Post-increment, the previous value matters.\n    assertFalse(testLocalValue(\"x++\"));\n    assertFalse(testLocalValue(\"x--\"));\n\n    // The left side of an only assign matters if it is an alias or mutable.\n    assertTrue(testLocalValue(\"x=1\"));\n    assertFalse(testLocalValue(\"x=[]\"));\n    assertFalse(testLocalValue(\"x=y\"));\n    // The right hand side of assignment opts don't matter, as they force\n    // a local result.\n    assertTrue(testLocalValue(\"x+=y\"));\n    assertTrue(testLocalValue(\"x*=y\"));\n    // Comparisons always result in locals, as they force a local boolean\n    // result.\n    assertTrue(testLocalValue(\"x==y\"));\n    assertTrue(testLocalValue(\"x!=y\"));\n    assertTrue(testLocalValue(\"x>y\"));\n    // Only the right side of a comma matters\n    assertTrue(testLocalValue(\"(1,2)\"));\n    assertTrue(testLocalValue(\"(x,1)\"));\n    assertFalse(testLocalValue(\"(x,y)\"));\n\n    // Both the operands of OR matter\n    assertTrue(testLocalValue(\"1||2\"));\n    assertFalse(testLocalValue(\"x||1\"));\n    assertFalse(testLocalValue(\"x||y\"));\n    assertFalse(testLocalValue(\"1||y\"));\n\n    // Both the operands of AND matter\n    assertTrue(testLocalValue(\"1&&2\"));\n    assertFalse(testLocalValue(\"x&&1\"));\n    assertFalse(testLocalValue(\"x&&y\"));\n    assertFalse(testLocalValue(\"1&&y\"));\n\n    // Only the results of HOOK matter\n    assertTrue(testLocalValue(\"x?1:2\"));\n    assertFalse(testLocalValue(\"x?x:2\"));\n    assertFalse(testLocalValue(\"x?1:x\"));\n    assertFalse(testLocalValue(\"x?x:y\"));\n\n    // Results of ops are local values\n    assertTrue(testLocalValue(\"!y\"));\n    assertTrue(testLocalValue(\"~y\"));\n    assertTrue(testLocalValue(\"y + 1\"));\n    assertTrue(testLocalValue(\"y + z\"));\n    assertTrue(testLocalValue(\"y * z\"));\n\n    assertTrue(testLocalValue(\"'a' in x\"));\n    assertTrue(testLocalValue(\"typeof x\"));\n    assertTrue(testLocalValue(\"x instanceof y\"));\n\n    assertTrue(testLocalValue(\"void x\"));\n    assertTrue(testLocalValue(\"void 0\"));\n\n    assertFalse(testLocalValue(\"{}.x\"));\n\n    assertTrue(testLocalValue(\"{}.toString()\"));\n    assertTrue(testLocalValue(\"o.toString()\"));\n\n    assertFalse(testLocalValue(\"o.valueOf()\"));\n\n    assertTrue(testLocalValue(\"delete a.b\"));\n  }\n",
        "begin_line": 1073,
        "end_line": 1170,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 37)",
            "(line 1076,col 5)-(line 1076,col 39)",
            "(line 1077,col 5)-(line 1077,col 40)",
            "(line 1078,col 5)-(line 1078,col 45)",
            "(line 1082,col 5)-(line 1082,col 43)",
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1086,col 50)",
            "(line 1089,col 5)-(line 1089,col 39)",
            "(line 1090,col 5)-(line 1090,col 44)",
            "(line 1091,col 5)-(line 1091,col 43)",
            "(line 1092,col 5)-(line 1092,col 38)",
            "(line 1093,col 5)-(line 1093,col 36)",
            "(line 1094,col 5)-(line 1094,col 38)",
            "(line 1095,col 5)-(line 1095,col 39)",
            "(line 1096,col 5)-(line 1096,col 40)",
            "(line 1097,col 5)-(line 1097,col 37)",
            "(line 1098,col 5)-(line 1098,col 37)",
            "(line 1101,col 5)-(line 1101,col 38)",
            "(line 1102,col 5)-(line 1102,col 42)",
            "(line 1105,col 5)-(line 1105,col 38)",
            "(line 1106,col 5)-(line 1106,col 38)",
            "(line 1109,col 5)-(line 1109,col 39)",
            "(line 1110,col 5)-(line 1110,col 39)",
            "(line 1113,col 5)-(line 1113,col 38)",
            "(line 1114,col 5)-(line 1114,col 40)",
            "(line 1115,col 5)-(line 1115,col 39)",
            "(line 1118,col 5)-(line 1118,col 39)",
            "(line 1119,col 5)-(line 1119,col 39)",
            "(line 1122,col 5)-(line 1122,col 39)",
            "(line 1123,col 5)-(line 1123,col 39)",
            "(line 1124,col 5)-(line 1124,col 38)",
            "(line 1126,col 5)-(line 1126,col 40)",
            "(line 1127,col 5)-(line 1127,col 40)",
            "(line 1128,col 5)-(line 1128,col 41)",
            "(line 1131,col 5)-(line 1131,col 39)",
            "(line 1132,col 5)-(line 1132,col 40)",
            "(line 1133,col 5)-(line 1133,col 40)",
            "(line 1134,col 5)-(line 1134,col 40)",
            "(line 1137,col 5)-(line 1137,col 39)",
            "(line 1138,col 5)-(line 1138,col 40)",
            "(line 1139,col 5)-(line 1139,col 40)",
            "(line 1140,col 5)-(line 1140,col 40)",
            "(line 1143,col 5)-(line 1143,col 40)",
            "(line 1144,col 5)-(line 1144,col 41)",
            "(line 1145,col 5)-(line 1145,col 41)",
            "(line 1146,col 5)-(line 1146,col 41)",
            "(line 1149,col 5)-(line 1149,col 37)",
            "(line 1150,col 5)-(line 1150,col 37)",
            "(line 1151,col 5)-(line 1151,col 40)",
            "(line 1152,col 5)-(line 1152,col 40)",
            "(line 1153,col 5)-(line 1153,col 40)",
            "(line 1155,col 5)-(line 1155,col 43)",
            "(line 1156,col 5)-(line 1156,col 43)",
            "(line 1157,col 5)-(line 1157,col 49)",
            "(line 1159,col 5)-(line 1159,col 41)",
            "(line 1160,col 5)-(line 1160,col 41)",
            "(line 1162,col 5)-(line 1162,col 40)",
            "(line 1164,col 5)-(line 1164,col 48)",
            "(line 1165,col 5)-(line 1165,col 47)",
            "(line 1167,col 5)-(line 1167,col 47)",
            "(line 1169,col 5)-(line 1169,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue2()",
        "snippet": "  public void testLocalValue2() {\n    Node newExpr = getNode(\"new x()\");\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    Preconditions.checkState(newExpr.getType() == Token.NEW);\n    Node.SideEffectFlags flags = new Node.SideEffectFlags();\n\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setMutatesThis();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setReturnsTainted();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setThrows();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setMutatesArguments();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setMutatesGlobalState();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n  }\n",
        "begin_line": 1172,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1173,col 5)-(line 1173,col 38)",
            "(line 1174,col 5)-(line 1174,col 57)",
            "(line 1176,col 5)-(line 1176,col 61)",
            "(line 1177,col 5)-(line 1177,col 60)",
            "(line 1179,col 5)-(line 1179,col 26)",
            "(line 1180,col 5)-(line 1180,col 48)",
            "(line 1182,col 5)-(line 1182,col 56)",
            "(line 1184,col 5)-(line 1184,col 26)",
            "(line 1185,col 5)-(line 1185,col 27)",
            "(line 1186,col 5)-(line 1186,col 48)",
            "(line 1188,col 5)-(line 1188,col 56)",
            "(line 1190,col 5)-(line 1190,col 26)",
            "(line 1191,col 5)-(line 1191,col 30)",
            "(line 1192,col 5)-(line 1192,col 48)",
            "(line 1194,col 5)-(line 1194,col 56)",
            "(line 1196,col 5)-(line 1196,col 26)",
            "(line 1197,col 5)-(line 1197,col 22)",
            "(line 1198,col 5)-(line 1198,col 48)",
            "(line 1200,col 5)-(line 1200,col 57)",
            "(line 1202,col 5)-(line 1202,col 26)",
            "(line 1203,col 5)-(line 1203,col 32)",
            "(line 1204,col 5)-(line 1204,col 48)",
            "(line 1206,col 5)-(line 1206,col 57)",
            "(line 1208,col 5)-(line 1208,col 26)",
            "(line 1209,col 5)-(line 1209,col 34)",
            "(line 1210,col 5)-(line 1210,col 48)",
            "(line 1212,col 5)-(line 1212,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testCallSideEffects()",
        "snippet": "  public void testCallSideEffects() {\n    Node callExpr = getNode(\"new x().method()\");\n    assertTrue(NodeUtil.functionCallHasSideEffects(callExpr));\n\n    Node newExpr = callExpr.getFirstChild().getFirstChild();\n    Preconditions.checkState(newExpr.getType() == Token.NEW);\n    Node.SideEffectFlags flags = new Node.SideEffectFlags();\n\n    // No side effects, local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // Modifies this, local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    flags.setMutatesThis();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // Modifies this, non-local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    flags.setMutatesThis();\n    flags.setReturnsTainted();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // No modifications, non-local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    flags.setReturnsTainted();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // The new modifies global state, no side-effect call, non-local result\n    // This call could be removed, but not the new.\n    flags.clearAllFlags();\n    flags.setMutatesGlobalState();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertTrue(NodeUtil.mayHaveSideEffects(callExpr));\n  }\n",
        "begin_line": 1215,
        "end_line": 1278,
        "comment": "",
        "child_ranges": [
            "(line 1216,col 5)-(line 1216,col 48)",
            "(line 1217,col 5)-(line 1217,col 62)",
            "(line 1219,col 5)-(line 1219,col 60)",
            "(line 1220,col 5)-(line 1220,col 61)",
            "(line 1221,col 5)-(line 1221,col 60)",
            "(line 1224,col 5)-(line 1224,col 26)",
            "(line 1225,col 5)-(line 1225,col 48)",
            "(line 1226,col 5)-(line 1226,col 26)",
            "(line 1227,col 5)-(line 1227,col 49)",
            "(line 1229,col 5)-(line 1229,col 57)",
            "(line 1230,col 5)-(line 1230,col 63)",
            "(line 1231,col 5)-(line 1231,col 55)",
            "(line 1234,col 5)-(line 1234,col 26)",
            "(line 1235,col 5)-(line 1235,col 48)",
            "(line 1236,col 5)-(line 1236,col 26)",
            "(line 1237,col 5)-(line 1237,col 27)",
            "(line 1238,col 5)-(line 1238,col 49)",
            "(line 1240,col 5)-(line 1240,col 57)",
            "(line 1241,col 5)-(line 1241,col 63)",
            "(line 1242,col 5)-(line 1242,col 55)",
            "(line 1245,col 5)-(line 1245,col 26)",
            "(line 1246,col 5)-(line 1246,col 48)",
            "(line 1247,col 5)-(line 1247,col 26)",
            "(line 1248,col 5)-(line 1248,col 27)",
            "(line 1249,col 5)-(line 1249,col 30)",
            "(line 1250,col 5)-(line 1250,col 49)",
            "(line 1252,col 5)-(line 1252,col 58)",
            "(line 1253,col 5)-(line 1253,col 63)",
            "(line 1254,col 5)-(line 1254,col 55)",
            "(line 1257,col 5)-(line 1257,col 26)",
            "(line 1258,col 5)-(line 1258,col 48)",
            "(line 1259,col 5)-(line 1259,col 26)",
            "(line 1260,col 5)-(line 1260,col 30)",
            "(line 1261,col 5)-(line 1261,col 49)",
            "(line 1263,col 5)-(line 1263,col 58)",
            "(line 1264,col 5)-(line 1264,col 63)",
            "(line 1265,col 5)-(line 1265,col 55)",
            "(line 1269,col 5)-(line 1269,col 26)",
            "(line 1270,col 5)-(line 1270,col 34)",
            "(line 1271,col 5)-(line 1271,col 48)",
            "(line 1272,col 5)-(line 1272,col 26)",
            "(line 1273,col 5)-(line 1273,col 49)",
            "(line 1275,col 5)-(line 1275,col 57)",
            "(line 1276,col 5)-(line 1276,col 63)",
            "(line 1277,col 5)-(line 1277,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue(java.lang.String)",
        "snippet": "  private boolean testLocalValue(String js) {\n    return NodeUtil.evaluatesToLocalValue(getNode(js));\n  }\n",
        "begin_line": 1280,
        "end_line": 1282,
        "comment": "",
        "child_ranges": [
            "(line 1281,col 5)-(line 1281,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefine()",
        "snippet": "  public void testValidDefine() {\n    assertTrue(testValidDefineValue(\"1\"));\n    assertTrue(testValidDefineValue(\"-3\"));\n    assertTrue(testValidDefineValue(\"true\"));\n    assertTrue(testValidDefineValue(\"false\"));\n    assertTrue(testValidDefineValue(\"'foo'\"));\n\n    assertFalse(testValidDefineValue(\"x\"));\n    assertFalse(testValidDefineValue(\"null\"));\n    assertFalse(testValidDefineValue(\"undefined\"));\n    assertFalse(testValidDefineValue(\"NaN\"));\n\n    assertTrue(testValidDefineValue(\"!true\"));\n    assertTrue(testValidDefineValue(\"-true\"));\n    assertTrue(testValidDefineValue(\"1 & 8\"));\n    assertTrue(testValidDefineValue(\"1 + 8\"));\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));\n\n    assertFalse(testValidDefineValue(\"1 & foo\"));\n  }\n",
        "begin_line": 1284,
        "end_line": 1303,
        "comment": "",
        "child_ranges": [
            "(line 1285,col 5)-(line 1285,col 42)",
            "(line 1286,col 5)-(line 1286,col 43)",
            "(line 1287,col 5)-(line 1287,col 45)",
            "(line 1288,col 5)-(line 1288,col 46)",
            "(line 1289,col 5)-(line 1289,col 46)",
            "(line 1291,col 5)-(line 1291,col 43)",
            "(line 1292,col 5)-(line 1292,col 46)",
            "(line 1293,col 5)-(line 1293,col 51)",
            "(line 1294,col 5)-(line 1294,col 45)",
            "(line 1296,col 5)-(line 1296,col 46)",
            "(line 1297,col 5)-(line 1297,col 46)",
            "(line 1298,col 5)-(line 1298,col 46)",
            "(line 1299,col 5)-(line 1299,col 46)",
            "(line 1300,col 5)-(line 1300,col 50)",
            "(line 1302,col 5)-(line 1302,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefineValue(java.lang.String)",
        "snippet": "  private boolean testValidDefineValue(String js) {\n    Node script = parse(\"var test = \" + js +\";\");\n    Node var = script.getFirstChild();\n    Node name = var.getFirstChild();\n    Node value = name.getFirstChild();\n\n    ImmutableSet<String> defines = ImmutableSet.of();\n    return NodeUtil.isValidDefineValue(value, defines);\n  }\n",
        "begin_line": 1305,
        "end_line": 1313,
        "comment": "",
        "child_ranges": [
            "(line 1306,col 5)-(line 1306,col 49)",
            "(line 1307,col 5)-(line 1307,col 38)",
            "(line 1308,col 5)-(line 1308,col 36)",
            "(line 1309,col 5)-(line 1309,col 38)",
            "(line 1311,col 5)-(line 1311,col 53)",
            "(line 1312,col 5)-(line 1312,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNumberValue()",
        "snippet": "  public void testGetNumberValue() {\n    // Strings\n    assertEquals(1.0, NodeUtil.getNumberValue(getNode(\"'\\\\uFEFF1'\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"''\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"' '\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"' \\\\t'\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"'+0'\")));\n    assertEquals(-0.0, NodeUtil.getNumberValue(getNode(\"'-0'\")));\n    assertEquals(2.0, NodeUtil.getNumberValue(getNode(\"'+2'\")));\n    assertEquals(-1.6, NodeUtil.getNumberValue(getNode(\"'-1.6'\")));\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"'16'\")));\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"' 16 '\")));\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"' 16 '\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'123e2'\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'123E2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'123e-2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'123E-2'\")));\n    assertEquals(-1.23, NodeUtil.getNumberValue(getNode(\"'-123e-2'\")));\n    assertEquals(-1.23, NodeUtil.getNumberValue(getNode(\"'-123E-2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'+123e-2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'+123E-2'\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'+123e+2'\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'+123E+2'\")));\n\n    assertEquals(15.0, NodeUtil.getNumberValue(getNode(\"'0xf'\")));\n    assertEquals(15.0, NodeUtil.getNumberValue(getNode(\"'0xF'\")));\n\n    // Chrome and rhino behavior differently from FF and IE. FF and IE\n    // consider a negative hex number to be invalid\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-0xf'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-0xF'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xf'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xF'\")));\n\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"'0X10'\")));\n    assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'0X10.8'\")));\n    assertEquals(77.0, NodeUtil.getNumberValue(getNode(\"'077'\")));\n    assertEquals(-77.0, NodeUtil.getNumberValue(getNode(\"'-077'\")));\n    assertEquals(-77.5, NodeUtil.getNumberValue(getNode(\"'-077.5'\")));\n    assertEquals(\n        Double.NEGATIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"'-Infinity'\")));\n    assertEquals(\n        Double.POSITIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"'Infinity'\")));\n    assertEquals(\n        Double.POSITIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"'+Infinity'\")));\n    // FireFox treats \"infinity\" as \"Infinity\", IE treats it as NaN\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-infinity'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'infinity'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+infinity'\")));\n\n    assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'NaN'\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"'some unknown string'\")));\n    assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'123 blah'\")));\n\n    // Literals\n    assertEquals(1.0, NodeUtil.getNumberValue(getNode(\"1\")));\n    // \"-1\" is parsed as a literal\n    assertEquals(-1.0, NodeUtil.getNumberValue(getNode(\"-1\")));\n    // \"+1\" is parse as an op + literal\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"+1\")));\n    assertEquals(22.0, NodeUtil.getNumberValue(getNode(\"22\")));\n    assertEquals(18.0, NodeUtil.getNumberValue(getNode(\"022\")));\n    assertEquals(34.0, NodeUtil.getNumberValue(getNode(\"0x22\")));\n\n    assertEquals(\n        1.0, NodeUtil.getNumberValue(getNode(\"true\")));\n    assertEquals(\n        0.0, NodeUtil.getNumberValue(getNode(\"false\")));\n    assertEquals(\n        0.0, NodeUtil.getNumberValue(getNode(\"null\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"void 0\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"void f\")));\n    // values with side-effects are ignored.\n    assertEquals(\n        null, NodeUtil.getNumberValue(getNode(\"void f()\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"NaN\")));\n    assertEquals(\n        Double.POSITIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"Infinity\")));\n    assertEquals(\n        Double.NEGATIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"-Infinity\")));\n\n    // \"infinity\" is not a known name.\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"infinity\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"-infinity\")));\n\n    // getNumberValue only converts literals\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"x\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"x.y\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"1/2\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"1-2\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"+1\")));\n  }\n",
        "begin_line": 1315,
        "end_line": 1415,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1317,col 70)",
            "(line 1318,col 5)-(line 1318,col 62)",
            "(line 1319,col 5)-(line 1319,col 63)",
            "(line 1320,col 5)-(line 1320,col 66)",
            "(line 1321,col 5)-(line 1321,col 64)",
            "(line 1322,col 5)-(line 1322,col 65)",
            "(line 1323,col 5)-(line 1323,col 64)",
            "(line 1324,col 5)-(line 1324,col 67)",
            "(line 1325,col 5)-(line 1325,col 65)",
            "(line 1326,col 5)-(line 1326,col 67)",
            "(line 1327,col 5)-(line 1327,col 67)",
            "(line 1328,col 5)-(line 1328,col 71)",
            "(line 1329,col 5)-(line 1329,col 71)",
            "(line 1330,col 5)-(line 1330,col 69)",
            "(line 1331,col 5)-(line 1331,col 69)",
            "(line 1332,col 5)-(line 1332,col 71)",
            "(line 1333,col 5)-(line 1333,col 71)",
            "(line 1334,col 5)-(line 1334,col 70)",
            "(line 1335,col 5)-(line 1335,col 70)",
            "(line 1336,col 5)-(line 1336,col 73)",
            "(line 1337,col 5)-(line 1337,col 73)",
            "(line 1339,col 5)-(line 1339,col 66)",
            "(line 1340,col 5)-(line 1340,col 66)",
            "(line 1344,col 5)-(line 1344,col 67)",
            "(line 1345,col 5)-(line 1345,col 67)",
            "(line 1346,col 5)-(line 1346,col 67)",
            "(line 1347,col 5)-(line 1347,col 67)",
            "(line 1349,col 5)-(line 1349,col 67)",
            "(line 1350,col 5)-(line 1350,col 75)",
            "(line 1351,col 5)-(line 1351,col 66)",
            "(line 1352,col 5)-(line 1352,col 68)",
            "(line 1353,col 5)-(line 1353,col 70)",
            "(line 1354,col 5)-(line 1356,col 57)",
            "(line 1357,col 5)-(line 1359,col 56)",
            "(line 1360,col 5)-(line 1362,col 57)",
            "(line 1364,col 5)-(line 1364,col 72)",
            "(line 1365,col 5)-(line 1365,col 71)",
            "(line 1366,col 5)-(line 1366,col 72)",
            "(line 1368,col 5)-(line 1368,col 72)",
            "(line 1369,col 5)-(line 1370,col 79)",
            "(line 1371,col 5)-(line 1371,col 77)",
            "(line 1374,col 5)-(line 1374,col 61)",
            "(line 1376,col 5)-(line 1376,col 63)",
            "(line 1378,col 5)-(line 1378,col 63)",
            "(line 1379,col 5)-(line 1379,col 63)",
            "(line 1380,col 5)-(line 1380,col 64)",
            "(line 1381,col 5)-(line 1381,col 65)",
            "(line 1383,col 5)-(line 1384,col 55)",
            "(line 1385,col 5)-(line 1386,col 56)",
            "(line 1387,col 5)-(line 1388,col 55)",
            "(line 1389,col 5)-(line 1390,col 64)",
            "(line 1391,col 5)-(line 1392,col 64)",
            "(line 1394,col 5)-(line 1395,col 60)",
            "(line 1396,col 5)-(line 1397,col 61)",
            "(line 1398,col 5)-(line 1400,col 54)",
            "(line 1401,col 5)-(line 1403,col 55)",
            "(line 1406,col 5)-(line 1406,col 69)",
            "(line 1407,col 5)-(line 1407,col 70)",
            "(line 1410,col 5)-(line 1410,col 62)",
            "(line 1411,col 5)-(line 1411,col 64)",
            "(line 1412,col 5)-(line 1412,col 64)",
            "(line 1413,col 5)-(line 1413,col 64)",
            "(line 1414,col 5)-(line 1414,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsNumbericResult()",
        "snippet": "  public void testIsNumbericResult() {\n    assertTrue(NodeUtil.isNumericResult(getNode(\"1\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"true\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"+true\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"+1\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"-1\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"-Infinity\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"Infinity\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"NaN\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"undefined\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"void 0\")));\n\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a << b\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a >> b\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a >>> b\")));\n\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a == b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a != b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a === b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a !== b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a < b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a > b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a <= b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a >= b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a in b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a instanceof b\")));\n\n    assertFalse(NodeUtil.isNumericResult(getNode(\"'a'\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"'a'+b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a+'b'\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a+b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a()\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"''.a\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a.b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a.b()\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a().b()\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"new a()\")));\n\n    // Definitely not numberic\n    assertFalse(NodeUtil.isNumericResult(getNode(\"([1,2])\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"({a:1})\")));\n\n    // Recurse into the expression when necessary.\n    assertTrue(NodeUtil.isNumericResult(getNode(\"1 && 2\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"1 || 2\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a ? 2 : 3\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a,1\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a=1\")));\n  }\n",
        "begin_line": 1417,
        "end_line": 1465,
        "comment": "",
        "child_ranges": [
            "(line 1418,col 5)-(line 1418,col 55)",
            "(line 1419,col 5)-(line 1419,col 59)",
            "(line 1420,col 5)-(line 1420,col 59)",
            "(line 1421,col 5)-(line 1421,col 56)",
            "(line 1422,col 5)-(line 1422,col 56)",
            "(line 1423,col 5)-(line 1423,col 63)",
            "(line 1424,col 5)-(line 1424,col 62)",
            "(line 1425,col 5)-(line 1425,col 57)",
            "(line 1426,col 5)-(line 1426,col 64)",
            "(line 1427,col 5)-(line 1427,col 61)",
            "(line 1429,col 5)-(line 1429,col 60)",
            "(line 1430,col 5)-(line 1430,col 60)",
            "(line 1431,col 5)-(line 1431,col 61)",
            "(line 1433,col 5)-(line 1433,col 61)",
            "(line 1434,col 5)-(line 1434,col 61)",
            "(line 1435,col 5)-(line 1435,col 62)",
            "(line 1436,col 5)-(line 1436,col 62)",
            "(line 1437,col 5)-(line 1437,col 60)",
            "(line 1438,col 5)-(line 1438,col 60)",
            "(line 1439,col 5)-(line 1439,col 61)",
            "(line 1440,col 5)-(line 1440,col 61)",
            "(line 1441,col 5)-(line 1441,col 61)",
            "(line 1442,col 5)-(line 1442,col 69)",
            "(line 1444,col 5)-(line 1444,col 58)",
            "(line 1445,col 5)-(line 1445,col 60)",
            "(line 1446,col 5)-(line 1446,col 60)",
            "(line 1447,col 5)-(line 1447,col 58)",
            "(line 1448,col 5)-(line 1448,col 58)",
            "(line 1449,col 5)-(line 1449,col 59)",
            "(line 1450,col 5)-(line 1450,col 58)",
            "(line 1451,col 5)-(line 1451,col 60)",
            "(line 1452,col 5)-(line 1452,col 62)",
            "(line 1453,col 5)-(line 1453,col 62)",
            "(line 1456,col 5)-(line 1456,col 62)",
            "(line 1457,col 5)-(line 1457,col 62)",
            "(line 1460,col 5)-(line 1460,col 60)",
            "(line 1461,col 5)-(line 1461,col 60)",
            "(line 1462,col 5)-(line 1462,col 63)",
            "(line 1463,col 5)-(line 1463,col 57)",
            "(line 1464,col 5)-(line 1464,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsBooleanResult()",
        "snippet": "  public void testIsBooleanResult() {\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"1\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"+true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"+1\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"-1\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"-Infinity\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"Infinity\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"NaN\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"undefined\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"void 0\")));\n\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a << b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a >> b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a >>> b\")));\n\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a == b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a != b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a === b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a !== b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a < b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a > b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a <= b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a >= b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a in b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a instanceof b\")));\n\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'+b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a+'b'\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a+b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"''.a\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a().b()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"new a()\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"delete a\")));\n\n    // Definitely not boolean\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"([true,false])\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"({a:true})\")));\n\n    // These are boolean but aren't handled yet, \"false\" here means \"unknown\".\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true && false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true || false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a ? true : false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a,true\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a=true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a=1\")));\n  }\n",
        "begin_line": 1467,
        "end_line": 1517,
        "comment": "",
        "child_ranges": [
            "(line 1468,col 5)-(line 1468,col 56)",
            "(line 1469,col 5)-(line 1469,col 58)",
            "(line 1470,col 5)-(line 1470,col 60)",
            "(line 1471,col 5)-(line 1471,col 57)",
            "(line 1472,col 5)-(line 1472,col 57)",
            "(line 1473,col 5)-(line 1473,col 64)",
            "(line 1474,col 5)-(line 1474,col 63)",
            "(line 1475,col 5)-(line 1475,col 58)",
            "(line 1476,col 5)-(line 1476,col 64)",
            "(line 1477,col 5)-(line 1477,col 61)",
            "(line 1479,col 5)-(line 1479,col 61)",
            "(line 1480,col 5)-(line 1480,col 61)",
            "(line 1481,col 5)-(line 1481,col 62)",
            "(line 1483,col 5)-(line 1483,col 60)",
            "(line 1484,col 5)-(line 1484,col 60)",
            "(line 1485,col 5)-(line 1485,col 61)",
            "(line 1486,col 5)-(line 1486,col 61)",
            "(line 1487,col 5)-(line 1487,col 59)",
            "(line 1488,col 5)-(line 1488,col 59)",
            "(line 1489,col 5)-(line 1489,col 60)",
            "(line 1490,col 5)-(line 1490,col 60)",
            "(line 1491,col 5)-(line 1491,col 60)",
            "(line 1492,col 5)-(line 1492,col 68)",
            "(line 1494,col 5)-(line 1494,col 58)",
            "(line 1495,col 5)-(line 1495,col 60)",
            "(line 1496,col 5)-(line 1496,col 60)",
            "(line 1497,col 5)-(line 1497,col 58)",
            "(line 1498,col 5)-(line 1498,col 58)",
            "(line 1499,col 5)-(line 1499,col 59)",
            "(line 1500,col 5)-(line 1500,col 58)",
            "(line 1501,col 5)-(line 1501,col 60)",
            "(line 1502,col 5)-(line 1502,col 62)",
            "(line 1503,col 5)-(line 1503,col 62)",
            "(line 1504,col 5)-(line 1504,col 62)",
            "(line 1507,col 5)-(line 1507,col 69)",
            "(line 1508,col 5)-(line 1508,col 65)",
            "(line 1511,col 5)-(line 1511,col 67)",
            "(line 1512,col 5)-(line 1512,col 67)",
            "(line 1513,col 5)-(line 1513,col 70)",
            "(line 1514,col 5)-(line 1514,col 60)",
            "(line 1515,col 5)-(line 1515,col 60)",
            "(line 1516,col 5)-(line 1516,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayBeString()",
        "snippet": "  public void testMayBeString() {\n    assertFalse(NodeUtil.mayBeString(getNode(\"1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"true\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"+true\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"+1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"-1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"-Infinity\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"Infinity\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"NaN\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"undefined\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"void 0\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"null\")));\n\n    assertFalse(NodeUtil.mayBeString(getNode(\"a << b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a >> b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a >>> b\")));\n\n    assertFalse(NodeUtil.mayBeString(getNode(\"a == b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a != b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a === b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a !== b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a < b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a > b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a <= b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a >= b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a in b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a instanceof b\")));\n\n    assertTrue(NodeUtil.mayBeString(getNode(\"'a'\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"'a'+b\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a+'b'\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a+b\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a()\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"''.a\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a.b\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a.b()\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a().b()\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"new a()\")));\n\n    // These can't be strings but they aren't handled yet.\n    assertFalse(NodeUtil.mayBeString(getNode(\"1 && 2\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1 || 2\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1 ? 2 : 3\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1,2\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a=1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1+1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"true+true\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"null+null\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"NaN+NaN\")));\n\n    // These are not strings but they aren't primitives either\n    assertTrue(NodeUtil.mayBeString(getNode(\"([1,2])\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"({a:1})\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"({}+1)\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"(1+{})\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"([]+1)\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"(1+[])\")));\n  }\n",
        "begin_line": 1519,
        "end_line": 1576,
        "comment": "",
        "child_ranges": [
            "(line 1520,col 5)-(line 1520,col 52)",
            "(line 1521,col 5)-(line 1521,col 55)",
            "(line 1522,col 5)-(line 1522,col 56)",
            "(line 1523,col 5)-(line 1523,col 53)",
            "(line 1524,col 5)-(line 1524,col 53)",
            "(line 1525,col 5)-(line 1525,col 60)",
            "(line 1526,col 5)-(line 1526,col 59)",
            "(line 1527,col 5)-(line 1527,col 54)",
            "(line 1528,col 5)-(line 1528,col 60)",
            "(line 1529,col 5)-(line 1529,col 57)",
            "(line 1530,col 5)-(line 1530,col 55)",
            "(line 1532,col 5)-(line 1532,col 57)",
            "(line 1533,col 5)-(line 1533,col 57)",
            "(line 1534,col 5)-(line 1534,col 58)",
            "(line 1536,col 5)-(line 1536,col 57)",
            "(line 1537,col 5)-(line 1537,col 57)",
            "(line 1538,col 5)-(line 1538,col 58)",
            "(line 1539,col 5)-(line 1539,col 58)",
            "(line 1540,col 5)-(line 1540,col 56)",
            "(line 1541,col 5)-(line 1541,col 56)",
            "(line 1542,col 5)-(line 1542,col 57)",
            "(line 1543,col 5)-(line 1543,col 57)",
            "(line 1544,col 5)-(line 1544,col 57)",
            "(line 1545,col 5)-(line 1545,col 65)",
            "(line 1547,col 5)-(line 1547,col 53)",
            "(line 1548,col 5)-(line 1548,col 55)",
            "(line 1549,col 5)-(line 1549,col 55)",
            "(line 1550,col 5)-(line 1550,col 53)",
            "(line 1551,col 5)-(line 1551,col 53)",
            "(line 1552,col 5)-(line 1552,col 54)",
            "(line 1553,col 5)-(line 1553,col 53)",
            "(line 1554,col 5)-(line 1554,col 55)",
            "(line 1555,col 5)-(line 1555,col 57)",
            "(line 1556,col 5)-(line 1556,col 57)",
            "(line 1559,col 5)-(line 1559,col 57)",
            "(line 1560,col 5)-(line 1560,col 57)",
            "(line 1561,col 5)-(line 1561,col 60)",
            "(line 1562,col 5)-(line 1562,col 54)",
            "(line 1563,col 5)-(line 1563,col 54)",
            "(line 1564,col 5)-(line 1564,col 54)",
            "(line 1565,col 5)-(line 1565,col 60)",
            "(line 1566,col 5)-(line 1566,col 60)",
            "(line 1567,col 5)-(line 1567,col 58)",
            "(line 1570,col 5)-(line 1570,col 57)",
            "(line 1571,col 5)-(line 1571,col 57)",
            "(line 1572,col 5)-(line 1572,col 56)",
            "(line 1573,col 5)-(line 1573,col 56)",
            "(line 1574,col 5)-(line 1574,col 56)",
            "(line 1575,col 5)-(line 1575,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNearestFunctionName()",
        "snippet": "  public void testGetNearestFunctionName() {\n    testFunctionName(\"function a() {}\", \"a\");\n    testFunctionName(\"(function a() {})\", \"a\");\n    testFunctionName(\"({a:function () {}})\", \"a\");\n    testFunctionName(\"({get a() {}})\", \"a\");\n    testFunctionName(\"({set a(b) {}})\", \"a\");\n    testFunctionName(\"({set a(b) {}})\", \"a\");\n    testFunctionName(\"({1:function () {}})\", \"1\");\n    testFunctionName(\"var a = function a() {}\", \"a\");\n    testFunctionName(\"var a;a = function a() {}\", \"a\");\n    testFunctionName(\"var o;o.a = function a() {}\", \"o.a\");\n    testFunctionName(\"this.a = function a() {}\", \"this.a\");\n  }\n",
        "begin_line": 1578,
        "end_line": 1590,
        "comment": "",
        "child_ranges": [
            "(line 1579,col 5)-(line 1579,col 45)",
            "(line 1580,col 5)-(line 1580,col 47)",
            "(line 1581,col 5)-(line 1581,col 50)",
            "(line 1582,col 5)-(line 1582,col 44)",
            "(line 1583,col 5)-(line 1583,col 45)",
            "(line 1584,col 5)-(line 1584,col 45)",
            "(line 1585,col 5)-(line 1585,col 50)",
            "(line 1586,col 5)-(line 1586,col 53)",
            "(line 1587,col 5)-(line 1587,col 55)",
            "(line 1588,col 5)-(line 1588,col 59)",
            "(line 1589,col 5)-(line 1589,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testFunctionName(java.lang.String, java.lang.String)",
        "snippet": "  static void testFunctionName(String js, String expected) {\n    assertEquals(\n        expected,\n        NodeUtil.getNearestFunctionName(getFunctionNode(js)));\n  }\n",
        "begin_line": 1592,
        "end_line": 1596,
        "comment": "",
        "child_ranges": [
            "(line 1593,col 5)-(line 1595,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFunctionNode(java.lang.String)",
        "snippet": "  static Node getFunctionNode(String js) {\n    Node root = parse(js);\n    return getFunctionNode(root);\n  }\n",
        "begin_line": 1598,
        "end_line": 1601,
        "comment": "",
        "child_ranges": [
            "(line 1599,col 5)-(line 1599,col 26)",
            "(line 1600,col 5)-(line 1600,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFunctionNode(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getFunctionNode(Node n) {\n    if (n.getType() == Token.FUNCTION) {\n      return n;\n    }\n    for (Node c : n.children()) {\n      Node result = getFunctionNode(c);\n      if (result != null) {\n        return result;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 1603,
        "end_line": 1614,
        "comment": "",
        "child_ranges": [
            "(line 1604,col 5)-(line 1606,col 5)",
            "(line 1607,col 5)-(line 1612,col 5)",
            "(line 1613,col 5)-(line 1613,col 16)"
        ]
    }
]