[
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.createSummaryStatistics()",
        "snippet": "    protected SummaryStatistics createSummaryStatistics() {\n        return new SummaryStatistics();\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testStats()",
        "snippet": "    @Test\n    public void testStats() {\n        SummaryStatistics u = createSummaryStatistics();\n        Assert.assertEquals(\"total count\",0,u.getN(),tolerance);\n        u.addValue(one);\n        u.addValue(twoF);\n        u.addValue(twoL);\n        u.addValue(three);\n        Assert.assertEquals(\"N\",n,u.getN(),tolerance);\n        Assert.assertEquals(\"sum\",sum,u.getSum(),tolerance);\n        Assert.assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n        Assert.assertEquals(\"var\",var,u.getVariance(),tolerance);\n        Assert.assertEquals(\"population var\",popVar,u.getPopulationVariance(),tolerance);\n        Assert.assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n        Assert.assertEquals(\"mean\",mean,u.getMean(),tolerance);\n        Assert.assertEquals(\"min\",min,u.getMin(),tolerance);\n        Assert.assertEquals(\"max\",max,u.getMax(),tolerance);\n        u.clear();\n        Assert.assertEquals(\"total count\",0,u.getN(),tolerance);\n    }\n",
        "begin_line": 57,
        "end_line": 76,
        "comment": " test stats ",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 56)",
            "(line 60,col 9)-(line 60,col 64)",
            "(line 61,col 9)-(line 61,col 24)",
            "(line 62,col 9)-(line 62,col 25)",
            "(line 63,col 9)-(line 63,col 25)",
            "(line 64,col 9)-(line 64,col 26)",
            "(line 65,col 9)-(line 65,col 54)",
            "(line 66,col 9)-(line 66,col 60)",
            "(line 67,col 9)-(line 67,col 66)",
            "(line 68,col 9)-(line 68,col 65)",
            "(line 69,col 9)-(line 69,col 89)",
            "(line 70,col 9)-(line 70,col 74)",
            "(line 71,col 9)-(line 71,col 63)",
            "(line 72,col 9)-(line 72,col 60)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 18)",
            "(line 75,col 9)-(line 75,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testN0andN1Conditions()",
        "snippet": "    @Test\n    public void testN0andN1Conditions() throws Exception {\n        SummaryStatistics u = createSummaryStatistics();\n        Assert.assertTrue(\"Mean of n = 0 set should be NaN\",\n                Double.isNaN( u.getMean() ) );\n        Assert.assertTrue(\"Standard Deviation of n = 0 set should be NaN\",\n                Double.isNaN( u.getStandardDeviation() ) );\n        Assert.assertTrue(\"Variance of n = 0 set should be NaN\",\n                Double.isNaN(u.getVariance() ) );\n\n        /* n=1 */\n        u.addValue(one);\n        Assert.assertTrue(\"mean should be one (n = 1)\",\n                u.getMean() == one);\n        Assert.assertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(),\n                u.getGeometricMean() == one);\n        Assert.assertTrue(\"Std should be zero (n = 1)\",\n                u.getStandardDeviation() == 0.0);\n        Assert.assertTrue(\"variance should be zero (n = 1)\",\n                u.getVariance() == 0.0);\n\n        /* n=2 */\n        u.addValue(twoF);\n        Assert.assertTrue(\"Std should not be zero (n = 2)\",\n                u.getStandardDeviation() != 0.0);\n        Assert.assertTrue(\"variance should not be zero (n = 2)\",\n                u.getVariance() != 0.0);\n\n    }\n",
        "begin_line": 78,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 56)",
            "(line 81,col 9)-(line 82,col 46)",
            "(line 83,col 9)-(line 84,col 59)",
            "(line 85,col 9)-(line 86,col 49)",
            "(line 89,col 9)-(line 89,col 24)",
            "(line 90,col 9)-(line 91,col 36)",
            "(line 92,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 95,col 49)",
            "(line 96,col 9)-(line 97,col 40)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 101,col 9)-(line 102,col 49)",
            "(line 103,col 9)-(line 104,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testProductAndGeometricMean()",
        "snippet": "    @Test\n    public void testProductAndGeometricMean() throws Exception {\n        SummaryStatistics u = createSummaryStatistics();\n        u.addValue( 1.0 );\n        u.addValue( 2.0 );\n        u.addValue( 3.0 );\n        u.addValue( 4.0 );\n\n        Assert.assertEquals( \"Geometric mean not expected\", 2.213364,\n                u.getGeometricMean(), 0.00001 );\n    }\n",
        "begin_line": 108,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 56)",
            "(line 111,col 9)-(line 111,col 26)",
            "(line 112,col 9)-(line 112,col 26)",
            "(line 113,col 9)-(line 113,col 26)",
            "(line 114,col 9)-(line 114,col 26)",
            "(line 116,col 9)-(line 117,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testNaNContracts()",
        "snippet": "    @Test\n    public void testNaNContracts() {\n        SummaryStatistics u = createSummaryStatistics();\n        Assert.assertTrue(\"mean not NaN\",Double.isNaN(u.getMean()));\n        Assert.assertTrue(\"min not NaN\",Double.isNaN(u.getMin()));\n        Assert.assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation()));\n        Assert.assertTrue(\"var not NaN\",Double.isNaN(u.getVariance()));\n        Assert.assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n\n        u.addValue(1.0);\n\n        Assert.assertEquals( \"mean not expected\", 1.0,\n                u.getMean(), Double.MIN_VALUE);\n        Assert.assertEquals( \"variance not expected\", 0.0,\n                u.getVariance(), Double.MIN_VALUE);\n        Assert.assertEquals( \"geometric mean not expected\", 1.0,\n                u.getGeometricMean(), Double.MIN_VALUE);\n\n        u.addValue(-1.0);\n\n        Assert.assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n\n        u.addValue(0.0);\n\n        Assert.assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n\n        //FiXME: test all other NaN contract specs\n    }\n",
        "begin_line": 120,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 56)",
            "(line 123,col 9)-(line 123,col 68)",
            "(line 124,col 9)-(line 124,col 66)",
            "(line 125,col 9)-(line 125,col 84)",
            "(line 126,col 9)-(line 126,col 71)",
            "(line 127,col 9)-(line 127,col 82)",
            "(line 129,col 9)-(line 129,col 24)",
            "(line 131,col 9)-(line 132,col 47)",
            "(line 133,col 9)-(line 134,col 51)",
            "(line 135,col 9)-(line 136,col 56)",
            "(line 138,col 9)-(line 138,col 25)",
            "(line 140,col 9)-(line 140,col 82)",
            "(line 142,col 9)-(line 142,col 24)",
            "(line 144,col 9)-(line 144,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testGetSummary()",
        "snippet": "    @Test\n    public void testGetSummary() {\n        SummaryStatistics u = createSummaryStatistics();\n        StatisticalSummary summary = u.getSummary();\n        verifySummary(u, summary);\n        u.addValue(1d);\n        summary = u.getSummary();\n        verifySummary(u, summary);\n        u.addValue(2d);\n        summary = u.getSummary();\n        verifySummary(u, summary);\n        u.addValue(2d);\n        summary = u.getSummary();\n        verifySummary(u, summary);\n    }\n",
        "begin_line": 149,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 56)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 154,col 9)-(line 154,col 23)",
            "(line 155,col 9)-(line 155,col 33)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 157,col 9)-(line 157,col 23)",
            "(line 158,col 9)-(line 158,col 33)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 160,col 9)-(line 160,col 23)",
            "(line 161,col 9)-(line 161,col 33)",
            "(line 162,col 9)-(line 162,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSerialization()",
        "snippet": "    @Test\n    public void testSerialization() {\n        SummaryStatistics u = createSummaryStatistics();\n        // Empty test\n        TestUtils.checkSerializedEquality(u);\n        SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n        StatisticalSummary summary = s.getSummary();\n        verifySummary(u, summary);\n\n        // Add some data\n        u.addValue(2d);\n        u.addValue(1d);\n        u.addValue(3d);\n        u.addValue(4d);\n        u.addValue(5d);\n\n        // Test again\n        TestUtils.checkSerializedEquality(u);\n        s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n        summary = s.getSummary();\n        verifySummary(u, summary);\n\n    }\n",
        "begin_line": 165,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 56)",
            "(line 169,col 9)-(line 169,col 45)",
            "(line 170,col 9)-(line 170,col 83)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 34)",
            "(line 175,col 9)-(line 175,col 23)",
            "(line 176,col 9)-(line 176,col 23)",
            "(line 177,col 9)-(line 177,col 23)",
            "(line 178,col 9)-(line 178,col 23)",
            "(line 179,col 9)-(line 179,col 23)",
            "(line 182,col 9)-(line 182,col 45)",
            "(line 183,col 9)-(line 183,col 65)",
            "(line 184,col 9)-(line 184,col 33)",
            "(line 185,col 9)-(line 185,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testEqualsAndHashCode()",
        "snippet": "    @Test\n    public void testEqualsAndHashCode() {\n        SummaryStatistics u = createSummaryStatistics();\n        SummaryStatistics t = null;\n        int emptyHash = u.hashCode();\n        Assert.assertTrue(\"reflexive\", u.equals(u));\n        Assert.assertFalse(\"non-null compared to null\", u.equals(t));\n        Assert.assertFalse(\"wrong type\", u.equals(Double.valueOf(0)));\n        t = createSummaryStatistics();\n        Assert.assertTrue(\"empty instances should be equal\", t.equals(u));\n        Assert.assertTrue(\"empty instances should be equal\", u.equals(t));\n        Assert.assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n\n        // Add some data to u\n        u.addValue(2d);\n        u.addValue(1d);\n        u.addValue(3d);\n        u.addValue(4d);\n        Assert.assertFalse(\"different n's should make instances not equal\", t.equals(u));\n        Assert.assertFalse(\"different n's should make instances not equal\", u.equals(t));\n        Assert.assertTrue(\"different n's should make hashcodes different\",\n                u.hashCode() != t.hashCode());\n\n        //Add data in same order to t\n        t.addValue(2d);\n        t.addValue(1d);\n        t.addValue(3d);\n        t.addValue(4d);\n        Assert.assertTrue(\"summaries based on same data should be equal\", t.equals(u));\n        Assert.assertTrue(\"summaries based on same data should be equal\", u.equals(t));\n        Assert.assertEquals(\"summaries based on same data should have same hashcodes\",\n                u.hashCode(), t.hashCode());\n\n        // Clear and make sure summaries are indistinguishable from empty summary\n        u.clear();\n        t.clear();\n        Assert.assertTrue(\"empty instances should be equal\", t.equals(u));\n        Assert.assertTrue(\"empty instances should be equal\", u.equals(t));\n        Assert.assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n        Assert.assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n    }\n",
        "begin_line": 189,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 56)",
            "(line 192,col 9)-(line 192,col 35)",
            "(line 193,col 9)-(line 193,col 37)",
            "(line 194,col 9)-(line 194,col 52)",
            "(line 195,col 9)-(line 195,col 69)",
            "(line 196,col 9)-(line 196,col 70)",
            "(line 197,col 9)-(line 197,col 38)",
            "(line 198,col 9)-(line 198,col 74)",
            "(line 199,col 9)-(line 199,col 74)",
            "(line 200,col 9)-(line 200,col 72)",
            "(line 203,col 9)-(line 203,col 23)",
            "(line 204,col 9)-(line 204,col 23)",
            "(line 205,col 9)-(line 205,col 23)",
            "(line 206,col 9)-(line 206,col 23)",
            "(line 207,col 9)-(line 207,col 89)",
            "(line 208,col 9)-(line 208,col 89)",
            "(line 209,col 9)-(line 210,col 46)",
            "(line 213,col 9)-(line 213,col 23)",
            "(line 214,col 9)-(line 214,col 23)",
            "(line 215,col 9)-(line 215,col 23)",
            "(line 216,col 9)-(line 216,col 23)",
            "(line 217,col 9)-(line 217,col 87)",
            "(line 218,col 9)-(line 218,col 87)",
            "(line 219,col 9)-(line 220,col 44)",
            "(line 223,col 9)-(line 223,col 18)",
            "(line 224,col 9)-(line 224,col 18)",
            "(line 225,col 9)-(line 225,col 74)",
            "(line 226,col 9)-(line 226,col 74)",
            "(line 227,col 9)-(line 227,col 72)",
            "(line 228,col 9)-(line 228,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testCopy()",
        "snippet": "    @Test\n    public void testCopy() throws Exception {\n        SummaryStatistics u = createSummaryStatistics();\n        u.addValue(2d);\n        u.addValue(1d);\n        u.addValue(3d);\n        u.addValue(4d);\n        SummaryStatistics v = new SummaryStatistics(u);\n        Assert.assertEquals(u, v);\n        Assert.assertEquals(v, u);\n        Assert.assertTrue(v.geoMean == v.getGeoMeanImpl());\n        Assert.assertTrue(v.mean == v.getMeanImpl());\n        Assert.assertTrue(v.min == v.getMinImpl());\n        Assert.assertTrue(v.max == v.getMaxImpl());\n        Assert.assertTrue(v.sum == v.getSumImpl());\n        Assert.assertTrue(v.sumsq == v.getSumsqImpl());\n        Assert.assertTrue(v.sumLog == v.getSumLogImpl());\n        Assert.assertTrue(v.variance == v.getVarianceImpl());\n\n        // Make sure both behave the same with additional values added\n        u.addValue(7d);\n        u.addValue(9d);\n        u.addValue(11d);\n        u.addValue(23d);\n        v.addValue(7d);\n        v.addValue(9d);\n        v.addValue(11d);\n        v.addValue(23d);\n        Assert.assertEquals(u, v);\n        Assert.assertEquals(v, u);\n\n        // Check implementation pointers are preserved\n        u.clear();\n        u.setSumImpl(new Sum());\n        SummaryStatistics.copy(u,v);\n        Assert.assertEquals(u.sum, v.sum);\n        Assert.assertEquals(u.getSumImpl(), v.getSumImpl());\n\n    }\n",
        "begin_line": 231,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 56)",
            "(line 234,col 9)-(line 234,col 23)",
            "(line 235,col 9)-(line 235,col 23)",
            "(line 236,col 9)-(line 236,col 23)",
            "(line 237,col 9)-(line 237,col 23)",
            "(line 238,col 9)-(line 238,col 55)",
            "(line 239,col 9)-(line 239,col 34)",
            "(line 240,col 9)-(line 240,col 34)",
            "(line 241,col 9)-(line 241,col 59)",
            "(line 242,col 9)-(line 242,col 53)",
            "(line 243,col 9)-(line 243,col 51)",
            "(line 244,col 9)-(line 244,col 51)",
            "(line 245,col 9)-(line 245,col 51)",
            "(line 246,col 9)-(line 246,col 55)",
            "(line 247,col 9)-(line 247,col 57)",
            "(line 248,col 9)-(line 248,col 61)",
            "(line 251,col 9)-(line 251,col 23)",
            "(line 252,col 9)-(line 252,col 23)",
            "(line 253,col 9)-(line 253,col 24)",
            "(line 254,col 9)-(line 254,col 24)",
            "(line 255,col 9)-(line 255,col 23)",
            "(line 256,col 9)-(line 256,col 23)",
            "(line 257,col 9)-(line 257,col 24)",
            "(line 258,col 9)-(line 258,col 24)",
            "(line 259,col 9)-(line 259,col 34)",
            "(line 260,col 9)-(line 260,col 34)",
            "(line 263,col 9)-(line 263,col 18)",
            "(line 264,col 9)-(line 264,col 32)",
            "(line 265,col 9)-(line 265,col 36)",
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.verifySummary(org.apache.commons.math.stat.descriptive.SummaryStatistics, org.apache.commons.math.stat.descriptive.StatisticalSummary)",
        "snippet": "    private void verifySummary(SummaryStatistics u, StatisticalSummary s) {\n        Assert.assertEquals(\"N\",s.getN(),u.getN());\n        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);\n        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(),tolerance);\n        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(),tolerance);\n        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(),tolerance);\n    }\n",
        "begin_line": 271,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 51)",
            "(line 273,col 9)-(line 273,col 70)",
            "(line 274,col 9)-(line 274,col 80)",
            "(line 275,col 9)-(line 275,col 98)",
            "(line 276,col 9)-(line 276,col 73)",
            "(line 277,col 9)-(line 277,col 70)",
            "(line 278,col 9)-(line 278,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()",
        "snippet": "    @Test\n    public void testSetterInjection() throws Exception {\n        SummaryStatistics u = createSummaryStatistics();\n        u.setMeanImpl(new Sum());\n        u.setSumLogImpl(new Sum());\n        u.addValue(1);\n        u.addValue(3);\n        Assert.assertEquals(4, u.getMean(), 1E-14);\n        Assert.assertEquals(4, u.getSumOfLogs(), 1E-14);\n        Assert.assertEquals(FastMath.exp(2), u.getGeometricMean(), 1E-14);\n        u.clear();\n        u.addValue(1);\n        u.addValue(2);\n        Assert.assertEquals(3, u.getMean(), 1E-14);\n        u.clear();\n        u.setMeanImpl(new Mean()); // OK after clear\n    }\n",
        "begin_line": 281,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 56)",
            "(line 284,col 9)-(line 284,col 33)",
            "(line 285,col 9)-(line 285,col 35)",
            "(line 286,col 9)-(line 286,col 22)",
            "(line 287,col 9)-(line 287,col 22)",
            "(line 288,col 9)-(line 288,col 51)",
            "(line 289,col 9)-(line 289,col 56)",
            "(line 290,col 9)-(line 290,col 74)",
            "(line 291,col 9)-(line 291,col 18)",
            "(line 292,col 9)-(line 292,col 22)",
            "(line 293,col 9)-(line 293,col 22)",
            "(line 294,col 9)-(line 294,col 51)",
            "(line 295,col 9)-(line 295,col 18)",
            "(line 296,col 9)-(line 296,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()",
        "snippet": "    @Test\n    public void testSetterIllegalState() throws Exception {\n        SummaryStatistics u = createSummaryStatistics();\n        u.addValue(1);\n        u.addValue(3);\n        try {\n            u.setMeanImpl(new Sum());\n            Assert.fail(\"Expecting IllegalStateException\");\n        } catch (IllegalStateException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 299,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 56)",
            "(line 302,col 9)-(line 302,col 22)",
            "(line 303,col 9)-(line 303,col 22)",
            "(line 304,col 9)-(line 309,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideVarianceWithMathClass()",
        "snippet": "    @Test\n    public void testOverrideVarianceWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setVarianceImpl(new Variance(false)); //use \"population variance\"\n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); \n    }\n",
        "begin_line": 316,
        "end_line": 325,
        "comment": "\n     * JIRA: MATH-691\n     ",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 39)",
            "(line 319,col 9)-(line 319,col 58)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 321,col 9)-(line 323,col 9)",
            "(line 324,col 9)-(line 324,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideMeanWithMathClass()",
        "snippet": "    @Test\n    public void testOverrideMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setMeanImpl(new Mean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); \n    }\n",
        "begin_line": 327,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 39)",
            "(line 330,col 9)-(line 330,col 58)",
            "(line 331,col 9)-(line 331,col 38)",
            "(line 332,col 9)-(line 334,col 9)",
            "(line 335,col 9)-(line 335,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideGeoMeanWithMathClass()",
        "snippet": "    @Test\n    public void testOverrideGeoMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setGeoMeanImpl(new GeometricMean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); \n    }\n",
        "begin_line": 338,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 39)",
            "(line 341,col 9)-(line 341,col 58)",
            "(line 342,col 9)-(line 342,col 50)",
            "(line 343,col 9)-(line 345,col 9)",
            "(line 346,col 9)-(line 346,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.createSummaryStatistics()",
        "snippet": "    @Override\n    protected SummaryStatistics createSummaryStatistics() {\n        return new SynchronizedSummaryStatistics();\n    }\n",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 51)"
        ]
    }
]