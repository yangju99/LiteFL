[
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-bde0ab0c-8f5b-4026-ab1f-0c38e16ab9d5.toString()",
        "snippet": "        public String toString() {\n            return \"foo\";\n        }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrBuilderAppendInsertTest.class);\n        suite.setName(\"StrBuilder Tests\");\n        return suite;\n    }\n",
        "begin_line": 60,
        "end_line": 64,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 74)",
            "(line 62,col 9)-(line 62,col 42)",
            "(line 63,col 9)-(line 63,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.StrBuilderAppendInsertTest(java.lang.String)",
        "snippet": "    public StrBuilderAppendInsertTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name  the name\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendNewLine()",
        "snippet": "    public void testAppendNewLine() {\n        StrBuilder sb = new StrBuilder(\"---\");\n        sb.appendNewLine().append(\"+++\");\n        assertEquals(\"---\" + SystemUtils.LINE_SEPARATOR + \"+++\", sb.toString());\n        \n        sb = new StrBuilder(\"---\");\n        sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\n        assertEquals(\"---#\" + SystemUtils.LINE_SEPARATOR, sb.toString());\n    }\n",
        "begin_line": 76,
        "end_line": 84,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 46)",
            "(line 78,col 9)-(line 78,col 41)",
            "(line 79,col 9)-(line 79,col 80)",
            "(line 81,col 9)-(line 81,col 35)",
            "(line 82,col 9)-(line 82,col 84)",
            "(line 83,col 9)-(line 83,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithNullText()",
        "snippet": "    public void testAppendWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\");\n        assertEquals(\"\", sb.toString());\n\n        sb.appendNull();\n        assertEquals(\"NULL\", sb.toString());\n\n        sb.append((Object) null);\n        assertEquals(\"NULLNULL\", sb.toString());\n\n        sb.append(FOO);\n        assertEquals(\"NULLNULLfoo\", sb.toString());\n\n        sb.append((String) null);\n        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n\n        sb.append(\"\");\n        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n\n        sb.append(\"bar\");\n        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n\n        sb.append((StringBuffer) null);\n        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n\n        sb.append(new StringBuffer(\"baz\"));\n        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n    }\n",
        "begin_line": 87,
        "end_line": 115,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 41)",
            "(line 89,col 9)-(line 89,col 31)",
            "(line 90,col 9)-(line 90,col 40)",
            "(line 92,col 9)-(line 92,col 24)",
            "(line 93,col 9)-(line 93,col 44)",
            "(line 95,col 9)-(line 95,col 33)",
            "(line 96,col 9)-(line 96,col 48)",
            "(line 98,col 9)-(line 98,col 23)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 101,col 9)-(line 101,col 33)",
            "(line 102,col 9)-(line 102,col 55)",
            "(line 104,col 9)-(line 104,col 22)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 107,col 9)-(line 107,col 25)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 111,col 62)",
            "(line 113,col 9)-(line 113,col 43)",
            "(line 114,col 9)-(line 114,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_Object()",
        "snippet": "    public void testAppend_Object() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendNull();\n        assertEquals(\"\", sb.toString());\n\n        sb.append((Object) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.append(FOO);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append((StringBuffer) null);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"baz\"));\n        assertEquals(\"foobaz\", sb.toString());\n\n        sb.append(new StrBuilder(\"yes\"));\n        assertEquals(\"foobazyes\", sb.toString());\n    }\n",
        "begin_line": 118,
        "end_line": 137,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 41)",
            "(line 120,col 9)-(line 120,col 24)",
            "(line 121,col 9)-(line 121,col 40)",
            "(line 123,col 9)-(line 123,col 33)",
            "(line 124,col 9)-(line 124,col 40)",
            "(line 126,col 9)-(line 126,col 23)",
            "(line 127,col 9)-(line 127,col 43)",
            "(line 129,col 9)-(line 129,col 39)",
            "(line 130,col 9)-(line 130,col 43)",
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 46)",
            "(line 135,col 9)-(line 135,col 41)",
            "(line 136,col 9)-(line 136,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_String()",
        "snippet": "    public void testAppend_String() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((String) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"bar\");\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 140,
        "end_line": 154,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 41)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 143,col 9)-(line 143,col 44)",
            "(line 145,col 9)-(line 145,col 30)",
            "(line 146,col 9)-(line 146,col 25)",
            "(line 147,col 9)-(line 147,col 43)",
            "(line 149,col 9)-(line 149,col 22)",
            "(line 150,col 9)-(line 150,col 43)",
            "(line 152,col 9)-(line 152,col 25)",
            "(line 153,col 9)-(line 153,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_String_int_int()",
        "snippet": "    public void testAppend_String_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((String) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(\"foo\", 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(\"bar\", -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(\"bar\", 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"abcbardef\", 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 157,
        "end_line": 213,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 41)",
            "(line 159,col 9)-(line 159,col 59)",
            "(line 160,col 9)-(line 160,col 44)",
            "(line 162,col 9)-(line 162,col 30)",
            "(line 163,col 9)-(line 163,col 31)",
            "(line 164,col 9)-(line 164,col 43)",
            "(line 166,col 9)-(line 171,col 9)",
            "(line 173,col 9)-(line 178,col 9)",
            "(line 180,col 9)-(line 185,col 9)",
            "(line 187,col 9)-(line 192,col 9)",
            "(line 194,col 9)-(line 199,col 9)",
            "(line 201,col 9)-(line 206,col 9)",
            "(line 208,col 9)-(line 208,col 31)",
            "(line 209,col 9)-(line 209,col 43)",
            "(line 211,col 9)-(line 211,col 37)",
            "(line 212,col 9)-(line 212,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()",
        "snippet": "    public void testAppend_StringBuffer() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StringBuffer) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StringBuffer(\"foo\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"bar\"));\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 216,
        "end_line": 230,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 41)",
            "(line 218,col 9)-(line 218,col 59)",
            "(line 219,col 9)-(line 219,col 44)",
            "(line 221,col 9)-(line 221,col 30)",
            "(line 222,col 9)-(line 222,col 43)",
            "(line 223,col 9)-(line 223,col 43)",
            "(line 225,col 9)-(line 225,col 40)",
            "(line 226,col 9)-(line 226,col 43)",
            "(line 228,col 9)-(line 228,col 43)",
            "(line 229,col 9)-(line 229,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()",
        "snippet": "    public void testAppend_StringBuffer_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StringBuffer(\"foo\"), 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new StringBuffer(\"bar\"), 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 233,
        "end_line": 289,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 235,col 65)",
            "(line 236,col 9)-(line 236,col 44)",
            "(line 238,col 9)-(line 238,col 30)",
            "(line 239,col 9)-(line 239,col 49)",
            "(line 240,col 9)-(line 240,col 43)",
            "(line 242,col 9)-(line 247,col 9)",
            "(line 249,col 9)-(line 254,col 9)",
            "(line 256,col 9)-(line 261,col 9)",
            "(line 263,col 9)-(line 268,col 9)",
            "(line 270,col 9)-(line 275,col 9)",
            "(line 277,col 9)-(line 282,col 9)",
            "(line 284,col 9)-(line 284,col 49)",
            "(line 285,col 9)-(line 285,col 43)",
            "(line 287,col 9)-(line 287,col 55)",
            "(line 288,col 9)-(line 288,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()",
        "snippet": "    public void testAppend_StrBuilder() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StrBuilder) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StrBuilder(\"foo\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"bar\"));\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 292,
        "end_line": 306,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 57)",
            "(line 295,col 9)-(line 295,col 44)",
            "(line 297,col 9)-(line 297,col 30)",
            "(line 298,col 9)-(line 298,col 41)",
            "(line 299,col 9)-(line 299,col 43)",
            "(line 301,col 9)-(line 301,col 38)",
            "(line 302,col 9)-(line 302,col 43)",
            "(line 304,col 9)-(line 304,col 41)",
            "(line 305,col 9)-(line 305,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()",
        "snippet": "    public void testAppend_StrBuilder_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StrBuilder(\"foo\"), 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new StrBuilder(\"bar\"), 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 309,
        "end_line": 365,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 41)",
            "(line 311,col 9)-(line 311,col 63)",
            "(line 312,col 9)-(line 312,col 44)",
            "(line 314,col 9)-(line 314,col 30)",
            "(line 315,col 9)-(line 315,col 47)",
            "(line 316,col 9)-(line 316,col 43)",
            "(line 318,col 9)-(line 323,col 9)",
            "(line 325,col 9)-(line 330,col 9)",
            "(line 332,col 9)-(line 337,col 9)",
            "(line 339,col 9)-(line 344,col 9)",
            "(line 346,col 9)-(line 351,col 9)",
            "(line 353,col 9)-(line 358,col 9)",
            "(line 360,col 9)-(line 360,col 47)",
            "(line 361,col 9)-(line 361,col 43)",
            "(line 363,col 9)-(line 363,col 53)",
            "(line 364,col 9)-(line 364,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_CharArray()",
        "snippet": "    public void testAppend_CharArray() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((char[]) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new char[0]);\n        assertEquals(\"\", sb.toString());\n\n        sb.append(new char[]{'f', 'o', 'o'});\n        assertEquals(\"foo\", sb.toString());\n    }\n",
        "begin_line": 368,
        "end_line": 379,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 41)",
            "(line 370,col 9)-(line 370,col 53)",
            "(line 371,col 9)-(line 371,col 44)",
            "(line 373,col 9)-(line 373,col 30)",
            "(line 374,col 9)-(line 374,col 31)",
            "(line 375,col 9)-(line 375,col 40)",
            "(line 377,col 9)-(line 377,col 45)",
            "(line 378,col 9)-(line 378,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()",
        "snippet": "    public void testAppend_CharArray_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }\n",
        "begin_line": 382,
        "end_line": 438,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 41)",
            "(line 384,col 9)-(line 384,col 59)",
            "(line 385,col 9)-(line 385,col 44)",
            "(line 387,col 9)-(line 387,col 30)",
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 391,col 9)-(line 396,col 9)",
            "(line 398,col 9)-(line 403,col 9)",
            "(line 405,col 9)-(line 410,col 9)",
            "(line 412,col 9)-(line 417,col 9)",
            "(line 419,col 9)-(line 424,col 9)",
            "(line 426,col 9)-(line 431,col 9)",
            "(line 433,col 9)-(line 433,col 51)",
            "(line 434,col 9)-(line 434,col 43)",
            "(line 436,col 9)-(line 436,col 81)",
            "(line 437,col 9)-(line 437,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_Primitive()",
        "snippet": "    public void testAppend_Primitive() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(true);\n        assertEquals(\"true\", sb.toString());\n\n        sb.append(false);\n        assertEquals(\"truefalse\", sb.toString());\n\n        sb.append('!');\n        assertEquals(\"truefalse!\", sb.toString());\n    }\n",
        "begin_line": 441,
        "end_line": 451,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 41)",
            "(line 443,col 9)-(line 443,col 24)",
            "(line 444,col 9)-(line 444,col 44)",
            "(line 446,col 9)-(line 446,col 25)",
            "(line 447,col 9)-(line 447,col 49)",
            "(line 449,col 9)-(line 449,col 23)",
            "(line 450,col 9)-(line 450,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()",
        "snippet": "    public void testAppend_PrimitiveNumber() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(0);\n        assertEquals(\"0\", sb.toString());\n\n        sb.append(1L);\n        assertEquals(\"01\", sb.toString());\n\n        sb.append(2.3f);\n        assertEquals(\"012.3\", sb.toString());\n\n        sb.append(4.5d);\n        assertEquals(\"012.34.5\", sb.toString());\n    }\n",
        "begin_line": 454,
        "end_line": 467,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 455,col 9)-(line 455,col 41)",
            "(line 456,col 9)-(line 456,col 21)",
            "(line 457,col 9)-(line 457,col 41)",
            "(line 459,col 9)-(line 459,col 22)",
            "(line 460,col 9)-(line 460,col 42)",
            "(line 462,col 9)-(line 462,col 24)",
            "(line 463,col 9)-(line 463,col 45)",
            "(line 465,col 9)-(line 465,col 24)",
            "(line 466,col 9)-(line 466,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendPadding()",
        "snippet": "    public void testAppendPadding() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(-1, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(0, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(1, '-');\n        assertEquals(\"foo-\", sb.toString());\n\n        sb.appendPadding(16, '-');\n        assertEquals(20, sb.length());\n        //            12345678901234567890\n        assertEquals(\"foo-----------------\", sb.toString());\n    }\n",
        "begin_line": 470,
        "end_line": 488,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 41)",
            "(line 472,col 9)-(line 472,col 25)",
            "(line 473,col 9)-(line 473,col 43)",
            "(line 475,col 9)-(line 475,col 34)",
            "(line 476,col 9)-(line 476,col 43)",
            "(line 478,col 9)-(line 478,col 33)",
            "(line 479,col 9)-(line 479,col 43)",
            "(line 481,col 9)-(line 481,col 33)",
            "(line 482,col 9)-(line 482,col 44)",
            "(line 484,col 9)-(line 484,col 34)",
            "(line 485,col 9)-(line 485,col 38)",
            "(line 487,col 9)-(line 487,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()",
        "snippet": "    public void testAppendFixedWidthPadLeft() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n        assertEquals(\"o\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n        assertEquals(\"oo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n        assertEquals(\"-foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"-------foo\", sb.toString());\n\n        sb.clear();\n        sb.setNullText(\"null\");\n        sb.appendFixedWidthPadLeft(null, 5, '-');\n        assertEquals(\"-null\", sb.toString());\n    }\n",
        "begin_line": 491,
        "end_line": 526,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 41)",
            "(line 493,col 9)-(line 493,col 51)",
            "(line 494,col 9)-(line 494,col 40)",
            "(line 496,col 9)-(line 496,col 19)",
            "(line 497,col 9)-(line 497,col 50)",
            "(line 498,col 9)-(line 498,col 40)",
            "(line 500,col 9)-(line 500,col 19)",
            "(line 501,col 9)-(line 501,col 50)",
            "(line 502,col 9)-(line 502,col 41)",
            "(line 504,col 9)-(line 504,col 19)",
            "(line 505,col 9)-(line 505,col 50)",
            "(line 506,col 9)-(line 506,col 42)",
            "(line 508,col 9)-(line 508,col 19)",
            "(line 509,col 9)-(line 509,col 50)",
            "(line 510,col 9)-(line 510,col 43)",
            "(line 512,col 9)-(line 512,col 19)",
            "(line 513,col 9)-(line 513,col 50)",
            "(line 514,col 9)-(line 514,col 44)",
            "(line 516,col 9)-(line 516,col 19)",
            "(line 517,col 9)-(line 517,col 51)",
            "(line 518,col 9)-(line 518,col 38)",
            "(line 520,col 9)-(line 520,col 50)",
            "(line 522,col 9)-(line 522,col 19)",
            "(line 523,col 9)-(line 523,col 31)",
            "(line 524,col 9)-(line 524,col 49)",
            "(line 525,col 9)-(line 525,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()",
        "snippet": "    public void testAppendFixedWidthPadLeft_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(123, -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 1, '-');\n        assertEquals(\"3\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 2, '-');\n        assertEquals(\"23\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 3, '-');\n        assertEquals(\"123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 4, '-');\n        assertEquals(\"-123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"-------123\", sb.toString());\n    }\n",
        "begin_line": 529,
        "end_line": 559,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 41)",
            "(line 531,col 9)-(line 531,col 49)",
            "(line 532,col 9)-(line 532,col 40)",
            "(line 534,col 9)-(line 534,col 19)",
            "(line 535,col 9)-(line 535,col 48)",
            "(line 536,col 9)-(line 536,col 40)",
            "(line 538,col 9)-(line 538,col 19)",
            "(line 539,col 9)-(line 539,col 48)",
            "(line 540,col 9)-(line 540,col 41)",
            "(line 542,col 9)-(line 542,col 19)",
            "(line 543,col 9)-(line 543,col 48)",
            "(line 544,col 9)-(line 544,col 42)",
            "(line 546,col 9)-(line 546,col 19)",
            "(line 547,col 9)-(line 547,col 48)",
            "(line 548,col 9)-(line 548,col 43)",
            "(line 550,col 9)-(line 550,col 19)",
            "(line 551,col 9)-(line 551,col 48)",
            "(line 552,col 9)-(line 552,col 44)",
            "(line 554,col 9)-(line 554,col 19)",
            "(line 555,col 9)-(line 555,col 49)",
            "(line 556,col 9)-(line 556,col 38)",
            "(line 558,col 9)-(line 558,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()",
        "snippet": "    public void testAppendFixedWidthPadRight() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n        assertEquals(\"fo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n        assertEquals(\"foo-\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"foo-------\", sb.toString());\n\n        sb.clear();\n        sb.setNullText(\"null\");\n        sb.appendFixedWidthPadRight(null, 5, '-');\n        assertEquals(\"null-\", sb.toString());\n    }\n",
        "begin_line": 562,
        "end_line": 597,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 563,col 9)-(line 563,col 41)",
            "(line 564,col 9)-(line 564,col 52)",
            "(line 565,col 9)-(line 565,col 40)",
            "(line 567,col 9)-(line 567,col 19)",
            "(line 568,col 9)-(line 568,col 51)",
            "(line 569,col 9)-(line 569,col 40)",
            "(line 571,col 9)-(line 571,col 19)",
            "(line 572,col 9)-(line 572,col 51)",
            "(line 573,col 9)-(line 573,col 41)",
            "(line 575,col 9)-(line 575,col 19)",
            "(line 576,col 9)-(line 576,col 51)",
            "(line 577,col 9)-(line 577,col 42)",
            "(line 579,col 9)-(line 579,col 19)",
            "(line 580,col 9)-(line 580,col 51)",
            "(line 581,col 9)-(line 581,col 43)",
            "(line 583,col 9)-(line 583,col 19)",
            "(line 584,col 9)-(line 584,col 51)",
            "(line 585,col 9)-(line 585,col 44)",
            "(line 587,col 9)-(line 587,col 19)",
            "(line 588,col 9)-(line 588,col 52)",
            "(line 589,col 9)-(line 589,col 38)",
            "(line 591,col 9)-(line 591,col 50)",
            "(line 593,col 9)-(line 593,col 19)",
            "(line 594,col 9)-(line 594,col 31)",
            "(line 595,col 9)-(line 595,col 50)",
            "(line 596,col 9)-(line 596,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testLang299()",
        "snippet": "    public void testLang299() {\n        StrBuilder sb = new StrBuilder(1);\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n    }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": " See: http://issues.apache.org/jira/browse/LANG-299",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 42)",
            "(line 602,col 9)-(line 602,col 51)",
            "(line 603,col 9)-(line 603,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()",
        "snippet": "    public void testAppendFixedWidthPadRight_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(123, -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 1, '-');\n        assertEquals(\"1\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 2, '-');\n        assertEquals(\"12\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 3, '-');\n        assertEquals(\"123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 4, '-');\n        assertEquals(\"123-\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"123-------\", sb.toString());\n    }\n",
        "begin_line": 607,
        "end_line": 637,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 608,col 9)-(line 608,col 41)",
            "(line 609,col 9)-(line 609,col 50)",
            "(line 610,col 9)-(line 610,col 40)",
            "(line 612,col 9)-(line 612,col 19)",
            "(line 613,col 9)-(line 613,col 49)",
            "(line 614,col 9)-(line 614,col 40)",
            "(line 616,col 9)-(line 616,col 19)",
            "(line 617,col 9)-(line 617,col 49)",
            "(line 618,col 9)-(line 618,col 41)",
            "(line 620,col 9)-(line 620,col 19)",
            "(line 621,col 9)-(line 621,col 49)",
            "(line 622,col 9)-(line 622,col 42)",
            "(line 624,col 9)-(line 624,col 19)",
            "(line 625,col 9)-(line 625,col 49)",
            "(line 626,col 9)-(line 626,col 43)",
            "(line 628,col 9)-(line 628,col 19)",
            "(line 629,col 9)-(line 629,col 49)",
            "(line 630,col 9)-(line 630,col 44)",
            "(line 632,col 9)-(line 632,col 19)",
            "(line 633,col 9)-(line 633,col 50)",
            "(line 634,col 9)-(line 634,col 38)",
            "(line 636,col 9)-(line 636,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()",
        "snippet": "    public void testAppendWithSeparators_Array() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Object[]) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[0], \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }\n",
        "begin_line": 640,
        "end_line": 660,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 641,col 9)-(line 641,col 41)",
            "(line 642,col 9)-(line 642,col 54)",
            "(line 643,col 9)-(line 643,col 40)",
            "(line 645,col 9)-(line 645,col 19)",
            "(line 646,col 9)-(line 646,col 52)",
            "(line 647,col 9)-(line 647,col 40)",
            "(line 649,col 9)-(line 649,col 19)",
            "(line 650,col 9)-(line 650,col 72)",
            "(line 651,col 9)-(line 651,col 51)",
            "(line 653,col 9)-(line 653,col 19)",
            "(line 654,col 9)-(line 654,col 73)",
            "(line 655,col 9)-(line 655,col 49)",
            "(line 657,col 9)-(line 657,col 19)",
            "(line 658,col 9)-(line 658,col 71)",
            "(line 659,col 9)-(line 659,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()",
        "snippet": "    public void testAppendWithSeparators_Collection() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Collection) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }\n",
        "begin_line": 663,
        "end_line": 683,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 664,col 9)-(line 664,col 41)",
            "(line 665,col 9)-(line 665,col 56)",
            "(line 666,col 9)-(line 666,col 40)",
            "(line 668,col 9)-(line 668,col 19)",
            "(line 669,col 9)-(line 669,col 61)",
            "(line 670,col 9)-(line 670,col 40)",
            "(line 672,col 9)-(line 672,col 19)",
            "(line 673,col 9)-(line 673,col 87)",
            "(line 674,col 9)-(line 674,col 51)",
            "(line 676,col 9)-(line 676,col 19)",
            "(line 677,col 9)-(line 677,col 88)",
            "(line 678,col 9)-(line 678,col 49)",
            "(line 680,col 9)-(line 680,col 19)",
            "(line 681,col 9)-(line 681,col 86)",
            "(line 682,col 9)-(line 682,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()",
        "snippet": "    public void testAppendWithSeparators_Iterator() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Iterator) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }\n",
        "begin_line": 686,
        "end_line": 706,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 687,col 9)-(line 687,col 41)",
            "(line 688,col 9)-(line 688,col 54)",
            "(line 689,col 9)-(line 689,col 40)",
            "(line 691,col 9)-(line 691,col 19)",
            "(line 692,col 9)-(line 692,col 72)",
            "(line 693,col 9)-(line 693,col 40)",
            "(line 695,col 9)-(line 695,col 19)",
            "(line 696,col 9)-(line 696,col 98)",
            "(line 697,col 9)-(line 697,col 51)",
            "(line 699,col 9)-(line 699,col 19)",
            "(line 700,col 9)-(line 700,col 99)",
            "(line 701,col 9)-(line 701,col 49)",
            "(line 703,col 9)-(line 703,col 19)",
            "(line 704,col 9)-(line 704,col 97)",
            "(line 705,col 9)-(line 705,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()",
        "snippet": "    public void testAppendWithSeparatorsWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"null\");\n        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n        assertEquals(\"foo,null,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n        assertEquals(\"foo,null,baz\", sb.toString());\n    }\n",
        "begin_line": 709,
        "end_line": 718,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 710,col 9)-(line 710,col 41)",
            "(line 711,col 9)-(line 711,col 31)",
            "(line 712,col 9)-(line 712,col 71)",
            "(line 713,col 9)-(line 713,col 52)",
            "(line 715,col 9)-(line 715,col 19)",
            "(line 716,col 9)-(line 716,col 86)",
            "(line 717,col 9)-(line 717,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testInsert()",
        "snippet": "    public void testInsert() {\n\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, FOO);\n            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, FOO);\n            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (Object) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, FOO);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, \"foo\");\n            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, \"foo\");\n            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (String) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, \"foo\");\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, new char[]{'f', 'o', 'o'});\n            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, new char[]{'f', 'o', 'o'});\n            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (char[]) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[0]);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[]{'f', 'o', 'o'});\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (char[]) null, 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[0], 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, true);\n            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, true);\n            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, true);\n        assertEquals(\"truebarbaz\", sb.toString());\n\n        sb.insert(0, false);\n        assertEquals(\"falsetruebarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, '!');\n            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, '!');\n            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, '!');\n        assertEquals(\"!barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 0);\n            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 0);\n            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, '0');\n        assertEquals(\"0barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 1L);\n            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 1L);\n            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 1L);\n        assertEquals(\"1barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 2.3F);\n            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 2.3F);\n            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 2.3F);\n        assertEquals(\"2.3barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 4.5D);\n            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 4.5D);\n            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 4.5D);\n        assertEquals(\"4.5barbaz\", sb.toString());\n    }\n",
        "begin_line": 721,
        "end_line": 984,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 723,col 9)-(line 723,col 41)",
            "(line 724,col 9)-(line 724,col 28)",
            "(line 725,col 9)-(line 725,col 46)",
            "(line 727,col 9)-(line 732,col 9)",
            "(line 734,col 9)-(line 739,col 9)",
            "(line 741,col 9)-(line 741,col 36)",
            "(line 742,col 9)-(line 742,col 46)",
            "(line 744,col 9)-(line 744,col 26)",
            "(line 745,col 9)-(line 745,col 49)",
            "(line 747,col 9)-(line 747,col 19)",
            "(line 748,col 9)-(line 748,col 28)",
            "(line 749,col 9)-(line 749,col 46)",
            "(line 751,col 9)-(line 756,col 9)",
            "(line 758,col 9)-(line 763,col 9)",
            "(line 765,col 9)-(line 765,col 36)",
            "(line 766,col 9)-(line 766,col 46)",
            "(line 768,col 9)-(line 768,col 28)",
            "(line 769,col 9)-(line 769,col 49)",
            "(line 771,col 9)-(line 771,col 19)",
            "(line 772,col 9)-(line 772,col 28)",
            "(line 773,col 9)-(line 773,col 46)",
            "(line 775,col 9)-(line 780,col 9)",
            "(line 782,col 9)-(line 787,col 9)",
            "(line 789,col 9)-(line 789,col 36)",
            "(line 790,col 9)-(line 790,col 46)",
            "(line 792,col 9)-(line 792,col 34)",
            "(line 793,col 9)-(line 793,col 46)",
            "(line 795,col 9)-(line 795,col 48)",
            "(line 796,col 9)-(line 796,col 49)",
            "(line 798,col 9)-(line 798,col 19)",
            "(line 799,col 9)-(line 799,col 28)",
            "(line 800,col 9)-(line 800,col 46)",
            "(line 802,col 9)-(line 807,col 9)",
            "(line 809,col 9)-(line 814,col 9)",
            "(line 816,col 9)-(line 816,col 42)",
            "(line 817,col 9)-(line 817,col 46)",
            "(line 819,col 9)-(line 819,col 40)",
            "(line 820,col 9)-(line 820,col 46)",
            "(line 822,col 9)-(line 827,col 9)",
            "(line 829,col 9)-(line 834,col 9)",
            "(line 836,col 9)-(line 841,col 9)",
            "(line 843,col 9)-(line 848,col 9)",
            "(line 850,col 9)-(line 850,col 84)",
            "(line 851,col 9)-(line 851,col 46)",
            "(line 853,col 9)-(line 853,col 84)",
            "(line 854,col 9)-(line 854,col 49)",
            "(line 856,col 9)-(line 856,col 19)",
            "(line 857,col 9)-(line 857,col 28)",
            "(line 858,col 9)-(line 858,col 46)",
            "(line 860,col 9)-(line 865,col 9)",
            "(line 867,col 9)-(line 872,col 9)",
            "(line 874,col 9)-(line 874,col 27)",
            "(line 875,col 9)-(line 875,col 50)",
            "(line 877,col 9)-(line 877,col 28)",
            "(line 878,col 9)-(line 878,col 55)",
            "(line 880,col 9)-(line 880,col 19)",
            "(line 881,col 9)-(line 881,col 28)",
            "(line 882,col 9)-(line 882,col 46)",
            "(line 884,col 9)-(line 889,col 9)",
            "(line 891,col 9)-(line 896,col 9)",
            "(line 898,col 9)-(line 898,col 26)",
            "(line 899,col 9)-(line 899,col 47)",
            "(line 901,col 9)-(line 901,col 19)",
            "(line 902,col 9)-(line 902,col 28)",
            "(line 903,col 9)-(line 903,col 46)",
            "(line 905,col 9)-(line 910,col 9)",
            "(line 912,col 9)-(line 917,col 9)",
            "(line 919,col 9)-(line 919,col 26)",
            "(line 920,col 9)-(line 920,col 47)",
            "(line 922,col 9)-(line 922,col 19)",
            "(line 923,col 9)-(line 923,col 28)",
            "(line 924,col 9)-(line 924,col 46)",
            "(line 926,col 9)-(line 931,col 9)",
            "(line 933,col 9)-(line 938,col 9)",
            "(line 940,col 9)-(line 940,col 25)",
            "(line 941,col 9)-(line 941,col 47)",
            "(line 943,col 9)-(line 943,col 19)",
            "(line 944,col 9)-(line 944,col 28)",
            "(line 945,col 9)-(line 945,col 46)",
            "(line 947,col 9)-(line 952,col 9)",
            "(line 954,col 9)-(line 959,col 9)",
            "(line 961,col 9)-(line 961,col 27)",
            "(line 962,col 9)-(line 962,col 49)",
            "(line 964,col 9)-(line 964,col 19)",
            "(line 965,col 9)-(line 965,col 28)",
            "(line 966,col 9)-(line 966,col 46)",
            "(line 968,col 9)-(line 973,col 9)",
            "(line 975,col 9)-(line 980,col 9)",
            "(line 982,col 9)-(line 982,col 27)",
            "(line 983,col 9)-(line 983,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testInsertWithNullText()",
        "snippet": "    public void testInsertWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"null\");\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, FOO);\n            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, FOO);\n            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (Object) null);\n        assertEquals(\"nullbarbaz\", sb.toString());\n\n        sb.insert(0, FOO);\n        assertEquals(\"foonullbarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, \"foo\");\n            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, \"foo\");\n            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (String) null);\n        assertEquals(\"nullbarbaz\", sb.toString());\n\n        sb.insert(0, \"foo\");\n        assertEquals(\"foonullbarbaz\", sb.toString());\n\n        sb.insert(0, (char[]) null);\n        assertEquals(\"nullfoonullbarbaz\", sb.toString());\n\n        sb.insert(0, (char[]) null, 0, 0);\n        assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\n    }\n",
        "begin_line": 987,
        "end_line": 1042,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 988,col 9)-(line 988,col 41)",
            "(line 989,col 9)-(line 989,col 31)",
            "(line 990,col 9)-(line 990,col 28)",
            "(line 991,col 9)-(line 991,col 46)",
            "(line 993,col 9)-(line 998,col 9)",
            "(line 1000,col 9)-(line 1005,col 9)",
            "(line 1007,col 9)-(line 1007,col 36)",
            "(line 1008,col 9)-(line 1008,col 50)",
            "(line 1010,col 9)-(line 1010,col 26)",
            "(line 1011,col 9)-(line 1011,col 53)",
            "(line 1013,col 9)-(line 1013,col 19)",
            "(line 1014,col 9)-(line 1014,col 28)",
            "(line 1015,col 9)-(line 1015,col 46)",
            "(line 1017,col 9)-(line 1022,col 9)",
            "(line 1024,col 9)-(line 1029,col 9)",
            "(line 1031,col 9)-(line 1031,col 36)",
            "(line 1032,col 9)-(line 1032,col 50)",
            "(line 1034,col 9)-(line 1034,col 28)",
            "(line 1035,col 9)-(line 1035,col 53)",
            "(line 1037,col 9)-(line 1037,col 36)",
            "(line 1038,col 9)-(line 1038,col 57)",
            "(line 1040,col 9)-(line 1040,col 42)",
            "(line 1041,col 9)-(line 1041,col 61)"
        ]
    }
]