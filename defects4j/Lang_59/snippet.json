[
    {
        "name": "StrBuilder.appendFixedWidthPadRight#878",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char)",
        "snippet": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, strLen, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }\n",
        "begin_line": 878,
        "end_line": 895,
        "comment": "\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrBuilder.StrBuilder#106",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilder(int)",
        "snippet": "    public StrBuilder(int initialCapacity) {\n        super();\n        if (initialCapacity <= 0) {\n            initialCapacity = CAPACITY;\n        }\n        buffer = new char[initialCapacity];\n    }\n",
        "begin_line": 106,
        "end_line": 112,
        "comment": "\n     * Constructor that creates an empty builder the specified initial capacity.\n     *\n     * @param initialCapacity  the initial capacity, zero or less will be converted to 32\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrBuilder.ensureCapacity#227",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.ensureCapacity(int)",
        "snippet": "    public StrBuilder ensureCapacity(int capacity) {\n        if (capacity > buffer.length) {\n            char[] old = buffer;\n            buffer = new char[capacity];\n            System.arraycopy(old, 0, buffer, 0, size);\n        }\n        return this;\n    }\n",
        "begin_line": 227,
        "end_line": 234,
        "comment": "\n     * Checks the capacity and ensures that it is at least the size specified.\n     *\n     * @param capacity  the capacity to ensure\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 1
    }
]