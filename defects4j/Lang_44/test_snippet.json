[
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.NumberUtilsTest(java.lang.String)",
        "snippet": "    public NumberUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NumberUtilsTest.class);\n        suite.setName(\"NumberUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 63)",
            "(line 44,col 9)-(line 44,col 43)",
            "(line 45,col 9)-(line 45,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testStringToIntString()",
        "snippet": "    public void testStringToIntString() {\n        assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n        assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n    }\n",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * Test for int stringToInt(String)\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 94)",
            "(line 55,col 9)-(line 55,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testStringToIntStringI()",
        "snippet": "    public void testStringToIntStringI() {\n        assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n        assertTrue(\"stringToInt(String,int) 2 failed\", NumberUtils.stringToInt(\"1234.5\", 5) == 5);\n    }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n     * Test for int stringToInt(String, int)\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 101)",
            "(line 63,col 9)-(line 63,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateNumber()",
        "snippet": "    public void testCreateNumber() {\n        //a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new BigInteger(Long.MAX_VALUE + \"0\"), NumberUtils.createNumber(Long.MAX_VALUE + \"0L\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 9 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 10 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 11 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 12 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 15 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(String) 16 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if(SystemUtils.isJavaVersionAtLeast(1.3f)) { \n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils.createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\n            \"createNumber(String) 16 failed\",\n            new Long(\"10\" + Integer.MAX_VALUE),\n            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\n            \"createNumber(String) 17 failed\",\n            new Long(\"10\" + Integer.MAX_VALUE),\n            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\n            \"createNumber(String) 18 failed\",\n            new BigInteger(\"10\" + Long.MAX_VALUE),\n            NumberUtils.createNumber(\"10\" + Long.MAX_VALUE));\n\n    }\n",
        "begin_line": 66,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 111)",
            "(line 69,col 9)-(line 69,col 111)",
            "(line 70,col 9)-(line 70,col 113)",
            "(line 71,col 9)-(line 71,col 112)",
            "(line 72,col 9)-(line 72,col 145)",
            "(line 73,col 9)-(line 73,col 141)",
            "(line 74,col 9)-(line 74,col 107)",
            "(line 75,col 9)-(line 75,col 113)",
            "(line 76,col 9)-(line 76,col 113)",
            "(line 77,col 9)-(line 77,col 110)",
            "(line 78,col 9)-(line 78,col 112)",
            "(line 79,col 9)-(line 79,col 115)",
            "(line 80,col 9)-(line 80,col 112)",
            "(line 81,col 9)-(line 81,col 117)",
            "(line 82,col 9)-(line 82,col 117)",
            "(line 83,col 9)-(line 83,col 117)",
            "(line 86,col 9)-(line 88,col 9)",
            "(line 89,col 9)-(line 92,col 70)",
            "(line 93,col 9)-(line 96,col 64)",
            "(line 97,col 9)-(line 100,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateFloat()",
        "snippet": "    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateDouble()",
        "snippet": "    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateInteger()",
        "snippet": "    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateLong()",
        "snippet": "    public void testCreateLong() {\n        assertEquals(\"createInteger(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n    }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n    }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMinimumLong()",
        "snippet": "    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.minimum(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.minimum(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.minimum(12345L, 12345L, 12345L));\n\n    }\n",
        "begin_line": 128,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 120)",
            "(line 130,col 9)-(line 130,col 119)",
            "(line 131,col 9)-(line 131,col 120)",
            "(line 132,col 9)-(line 132,col 115)",
            "(line 133,col 9)-(line 133,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMinimumInt()",
        "snippet": "    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.minimum(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.minimum(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.minimum(12345, 12345, 12345));\n\n    }\n",
        "begin_line": 137,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 111)",
            "(line 139,col 9)-(line 139,col 111)",
            "(line 140,col 9)-(line 140,col 111)",
            "(line 141,col 9)-(line 141,col 107)",
            "(line 142,col 9)-(line 142,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMaximumLong()",
        "snippet": "    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.maximum(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.maximum(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.maximum(12345L, 12345L, 12345L));\n\n    }\n",
        "begin_line": 146,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 120)",
            "(line 148,col 9)-(line 148,col 120)",
            "(line 149,col 9)-(line 149,col 120)",
            "(line 150,col 9)-(line 150,col 115)",
            "(line 151,col 9)-(line 151,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMaximumInt()",
        "snippet": "    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.maximum(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.maximum(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.maximum(12345, 12345, 12345));\n\n    }\n",
        "begin_line": 155,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 111)",
            "(line 157,col 9)-(line 157,col 111)",
            "(line 158,col 9)-(line 158,col 111)",
            "(line 159,col 9)-(line 159,col 107)",
            "(line 160,col 9)-(line 160,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCompareDouble()",
        "snippet": "    public void testCompareDouble() {\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);\n        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);\n        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);\n        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);\n        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 164,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 69)",
            "(line 166,col 9)-(line 166,col 84)",
            "(line 167,col 9)-(line 167,col 76)",
            "(line 168,col 9)-(line 168,col 64)",
            "(line 169,col 9)-(line 169,col 64)",
            "(line 170,col 9)-(line 170,col 65)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 77)",
            "(line 173,col 9)-(line 173,col 84)",
            "(line 175,col 9)-(line 175,col 84)",
            "(line 176,col 9)-(line 176,col 97)",
            "(line 177,col 9)-(line 177,col 90)",
            "(line 178,col 9)-(line 178,col 78)",
            "(line 179,col 9)-(line 179,col 78)",
            "(line 180,col 9)-(line 180,col 79)",
            "(line 181,col 9)-(line 181,col 79)",
            "(line 182,col 9)-(line 182,col 91)",
            "(line 183,col 9)-(line 183,col 98)",
            "(line 185,col 9)-(line 185,col 76)",
            "(line 186,col 9)-(line 186,col 90)",
            "(line 187,col 9)-(line 187,col 81)",
            "(line 188,col 9)-(line 188,col 70)",
            "(line 189,col 9)-(line 189,col 70)",
            "(line 190,col 9)-(line 190,col 71)",
            "(line 191,col 9)-(line 191,col 71)",
            "(line 192,col 9)-(line 192,col 83)",
            "(line 193,col 9)-(line 193,col 90)",
            "(line 195,col 9)-(line 195,col 64)",
            "(line 196,col 9)-(line 196,col 78)",
            "(line 197,col 9)-(line 197,col 70)",
            "(line 198,col 9)-(line 198,col 57)",
            "(line 199,col 9)-(line 199,col 58)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 59)",
            "(line 202,col 9)-(line 202,col 71)",
            "(line 203,col 9)-(line 203,col 78)",
            "(line 205,col 9)-(line 205,col 64)",
            "(line 206,col 9)-(line 206,col 78)",
            "(line 207,col 9)-(line 207,col 70)",
            "(line 208,col 9)-(line 208,col 58)",
            "(line 209,col 9)-(line 209,col 57)",
            "(line 210,col 9)-(line 210,col 59)",
            "(line 211,col 9)-(line 211,col 59)",
            "(line 212,col 9)-(line 212,col 71)",
            "(line 213,col 9)-(line 213,col 78)",
            "(line 215,col 9)-(line 215,col 65)",
            "(line 216,col 9)-(line 216,col 79)",
            "(line 217,col 9)-(line 217,col 71)",
            "(line 218,col 9)-(line 218,col 59)",
            "(line 219,col 9)-(line 219,col 59)",
            "(line 220,col 9)-(line 220,col 59)",
            "(line 221,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 72)",
            "(line 223,col 9)-(line 223,col 79)",
            "(line 225,col 9)-(line 225,col 65)",
            "(line 226,col 9)-(line 226,col 79)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 228,col 9)-(line 228,col 59)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 60)",
            "(line 231,col 9)-(line 231,col 59)",
            "(line 232,col 9)-(line 232,col 72)",
            "(line 233,col 9)-(line 233,col 79)",
            "(line 235,col 9)-(line 235,col 77)",
            "(line 236,col 9)-(line 236,col 91)",
            "(line 237,col 9)-(line 237,col 83)",
            "(line 238,col 9)-(line 238,col 71)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 72)",
            "(line 241,col 9)-(line 241,col 72)",
            "(line 242,col 9)-(line 242,col 83)",
            "(line 243,col 9)-(line 243,col 91)",
            "(line 245,col 9)-(line 245,col 84)",
            "(line 246,col 9)-(line 246,col 98)",
            "(line 247,col 9)-(line 247,col 90)",
            "(line 248,col 9)-(line 248,col 78)",
            "(line 249,col 9)-(line 249,col 78)",
            "(line 250,col 9)-(line 250,col 79)",
            "(line 251,col 9)-(line 251,col 79)",
            "(line 252,col 9)-(line 252,col 91)",
            "(line 253,col 9)-(line 253,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCompareFloat()",
        "snippet": "    public void testCompareFloat() {\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);\n        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);\n        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);\n        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);\n        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 256,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 67)",
            "(line 258,col 9)-(line 258,col 82)",
            "(line 259,col 9)-(line 259,col 74)",
            "(line 260,col 9)-(line 260,col 63)",
            "(line 261,col 9)-(line 261,col 63)",
            "(line 262,col 9)-(line 262,col 64)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 264,col 9)-(line 264,col 75)",
            "(line 265,col 9)-(line 265,col 82)",
            "(line 267,col 9)-(line 267,col 82)",
            "(line 268,col 9)-(line 268,col 95)",
            "(line 269,col 9)-(line 269,col 88)",
            "(line 270,col 9)-(line 270,col 77)",
            "(line 271,col 9)-(line 271,col 77)",
            "(line 272,col 9)-(line 272,col 78)",
            "(line 273,col 9)-(line 273,col 78)",
            "(line 274,col 9)-(line 274,col 89)",
            "(line 275,col 9)-(line 275,col 96)",
            "(line 277,col 9)-(line 277,col 74)",
            "(line 278,col 9)-(line 278,col 88)",
            "(line 279,col 9)-(line 279,col 79)",
            "(line 280,col 9)-(line 280,col 69)",
            "(line 281,col 9)-(line 281,col 69)",
            "(line 282,col 9)-(line 282,col 70)",
            "(line 283,col 9)-(line 283,col 70)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 285,col 9)-(line 285,col 88)",
            "(line 287,col 9)-(line 287,col 63)",
            "(line 288,col 9)-(line 288,col 77)",
            "(line 289,col 9)-(line 289,col 69)",
            "(line 290,col 9)-(line 290,col 57)",
            "(line 291,col 9)-(line 291,col 58)",
            "(line 292,col 9)-(line 292,col 59)",
            "(line 293,col 9)-(line 293,col 59)",
            "(line 294,col 9)-(line 294,col 70)",
            "(line 295,col 9)-(line 295,col 77)",
            "(line 297,col 9)-(line 297,col 63)",
            "(line 298,col 9)-(line 298,col 77)",
            "(line 299,col 9)-(line 299,col 69)",
            "(line 300,col 9)-(line 300,col 58)",
            "(line 301,col 9)-(line 301,col 57)",
            "(line 302,col 9)-(line 302,col 59)",
            "(line 303,col 9)-(line 303,col 59)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 77)",
            "(line 307,col 9)-(line 307,col 64)",
            "(line 308,col 9)-(line 308,col 78)",
            "(line 309,col 9)-(line 309,col 70)",
            "(line 310,col 9)-(line 310,col 59)",
            "(line 311,col 9)-(line 311,col 59)",
            "(line 312,col 9)-(line 312,col 59)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 71)",
            "(line 315,col 9)-(line 315,col 78)",
            "(line 317,col 9)-(line 317,col 64)",
            "(line 318,col 9)-(line 318,col 78)",
            "(line 319,col 9)-(line 319,col 70)",
            "(line 320,col 9)-(line 320,col 59)",
            "(line 321,col 9)-(line 321,col 59)",
            "(line 322,col 9)-(line 322,col 60)",
            "(line 323,col 9)-(line 323,col 59)",
            "(line 324,col 9)-(line 324,col 71)",
            "(line 325,col 9)-(line 325,col 78)",
            "(line 327,col 9)-(line 327,col 75)",
            "(line 328,col 9)-(line 328,col 89)",
            "(line 329,col 9)-(line 329,col 81)",
            "(line 330,col 9)-(line 330,col 70)",
            "(line 331,col 9)-(line 331,col 70)",
            "(line 332,col 9)-(line 332,col 71)",
            "(line 333,col 9)-(line 333,col 71)",
            "(line 334,col 9)-(line 334,col 81)",
            "(line 335,col 9)-(line 335,col 89)",
            "(line 337,col 9)-(line 337,col 82)",
            "(line 338,col 9)-(line 338,col 96)",
            "(line 339,col 9)-(line 339,col 88)",
            "(line 340,col 9)-(line 340,col 77)",
            "(line 341,col 9)-(line 341,col 77)",
            "(line 342,col 9)-(line 342,col 78)",
            "(line 343,col 9)-(line 343,col 78)",
            "(line 344,col 9)-(line 344,col 89)",
            "(line 345,col 9)-(line 345,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testIsDigits()",
        "snippet": "    public void testIsDigits() {\n        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n    }\n",
        "begin_line": 348,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 81)",
            "(line 350,col 9)-(line 350,col 77)",
            "(line 351,col 9)-(line 351,col 85)",
            "(line 352,col 9)-(line 352,col 93)",
            "(line 353,col 9)-(line 353,col 90)",
            "(line 354,col 9)-(line 354,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testIsNumber()",
        "snippet": "    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n\n    }\n",
        "begin_line": 361,
        "end_line": 486,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 29)",
            "(line 363,col 9)-(line 363,col 75)",
            "(line 364,col 9)-(line 364,col 93)",
            "(line 365,col 9)-(line 365,col 23)",
            "(line 366,col 9)-(line 366,col 75)",
            "(line 367,col 9)-(line 367,col 93)",
            "(line 368,col 9)-(line 368,col 23)",
            "(line 369,col 9)-(line 369,col 75)",
            "(line 370,col 9)-(line 370,col 93)",
            "(line 371,col 9)-(line 371,col 23)",
            "(line 372,col 9)-(line 372,col 75)",
            "(line 373,col 9)-(line 373,col 93)",
            "(line 374,col 9)-(line 374,col 24)",
            "(line 375,col 9)-(line 375,col 75)",
            "(line 376,col 9)-(line 376,col 93)",
            "(line 377,col 9)-(line 377,col 24)",
            "(line 378,col 9)-(line 378,col 75)",
            "(line 379,col 9)-(line 379,col 93)",
            "(line 380,col 9)-(line 380,col 24)",
            "(line 381,col 9)-(line 381,col 75)",
            "(line 382,col 9)-(line 382,col 93)",
            "(line 383,col 9)-(line 383,col 22)",
            "(line 384,col 9)-(line 384,col 75)",
            "(line 385,col 9)-(line 385,col 93)",
            "(line 386,col 9)-(line 386,col 24)",
            "(line 387,col 9)-(line 387,col 75)",
            "(line 388,col 9)-(line 388,col 93)",
            "(line 389,col 9)-(line 389,col 24)",
            "(line 390,col 9)-(line 390,col 76)",
            "(line 391,col 9)-(line 391,col 94)",
            "(line 392,col 9)-(line 392,col 24)",
            "(line 393,col 9)-(line 393,col 76)",
            "(line 394,col 9)-(line 394,col 94)",
            "(line 395,col 9)-(line 395,col 18)",
            "(line 396,col 9)-(line 396,col 76)",
            "(line 397,col 9)-(line 397,col 94)",
            "(line 398,col 9)-(line 398,col 19)",
            "(line 399,col 9)-(line 399,col 76)",
            "(line 400,col 9)-(line 400,col 94)",
            "(line 401,col 9)-(line 401,col 22)",
            "(line 402,col 9)-(line 402,col 76)",
            "(line 403,col 9)-(line 403,col 94)",
            "(line 404,col 9)-(line 404,col 23)",
            "(line 405,col 9)-(line 405,col 76)",
            "(line 406,col 9)-(line 406,col 94)",
            "(line 407,col 9)-(line 407,col 25)",
            "(line 408,col 9)-(line 408,col 76)",
            "(line 409,col 9)-(line 409,col 94)",
            "(line 410,col 9)-(line 410,col 20)",
            "(line 411,col 9)-(line 411,col 76)",
            "(line 412,col 9)-(line 412,col 94)",
            "(line 413,col 9)-(line 413,col 26)",
            "(line 414,col 9)-(line 414,col 76)",
            "(line 415,col 9)-(line 415,col 94)",
            "(line 416,col 9)-(line 416,col 25)",
            "(line 417,col 9)-(line 417,col 76)",
            "(line 418,col 9)-(line 418,col 94)",
            "(line 419,col 9)-(line 419,col 23)",
            "(line 420,col 9)-(line 420,col 76)",
            "(line 421,col 9)-(line 421,col 94)",
            "(line 422,col 9)-(line 422,col 19)",
            "(line 423,col 9)-(line 423,col 80)",
            "(line 424,col 9)-(line 424,col 98)",
            "(line 425,col 9)-(line 425,col 17)",
            "(line 426,col 9)-(line 426,col 80)",
            "(line 427,col 9)-(line 427,col 98)",
            "(line 428,col 9)-(line 428,col 22)",
            "(line 429,col 9)-(line 429,col 80)",
            "(line 430,col 9)-(line 430,col 98)",
            "(line 431,col 9)-(line 431,col 22)",
            "(line 432,col 9)-(line 432,col 80)",
            "(line 433,col 9)-(line 433,col 98)",
            "(line 434,col 9)-(line 434,col 22)",
            "(line 435,col 9)-(line 435,col 80)",
            "(line 436,col 9)-(line 436,col 98)",
            "(line 437,col 9)-(line 437,col 27)",
            "(line 438,col 9)-(line 438,col 80)",
            "(line 439,col 9)-(line 439,col 98)",
            "(line 440,col 9)-(line 440,col 26)",
            "(line 441,col 9)-(line 441,col 80)",
            "(line 442,col 9)-(line 442,col 98)",
            "(line 443,col 9)-(line 443,col 21)",
            "(line 444,col 9)-(line 444,col 80)",
            "(line 445,col 9)-(line 445,col 98)",
            "(line 446,col 9)-(line 446,col 24)",
            "(line 447,col 9)-(line 447,col 80)",
            "(line 448,col 9)-(line 448,col 98)",
            "(line 449,col 9)-(line 449,col 18)",
            "(line 450,col 9)-(line 450,col 81)",
            "(line 451,col 9)-(line 451,col 99)",
            "(line 452,col 9)-(line 452,col 25)",
            "(line 453,col 9)-(line 453,col 81)",
            "(line 454,col 9)-(line 454,col 99)",
            "(line 455,col 9)-(line 455,col 25)",
            "(line 456,col 9)-(line 456,col 81)",
            "(line 457,col 9)-(line 457,col 99)",
            "(line 458,col 9)-(line 458,col 24)",
            "(line 459,col 9)-(line 459,col 81)",
            "(line 460,col 9)-(line 460,col 99)",
            "(line 461,col 9)-(line 461,col 24)",
            "(line 462,col 9)-(line 462,col 81)",
            "(line 463,col 9)-(line 463,col 99)",
            "(line 464,col 9)-(line 464,col 20)",
            "(line 465,col 9)-(line 465,col 81)",
            "(line 466,col 9)-(line 466,col 99)",
            "(line 467,col 9)-(line 467,col 19)",
            "(line 468,col 9)-(line 468,col 81)",
            "(line 469,col 9)-(line 469,col 99)",
            "(line 470,col 9)-(line 470,col 18)",
            "(line 471,col 9)-(line 471,col 81)",
            "(line 472,col 9)-(line 472,col 99)",
            "(line 473,col 9)-(line 473,col 20)",
            "(line 474,col 9)-(line 474,col 81)",
            "(line 475,col 9)-(line 475,col 99)",
            "(line 476,col 9)-(line 476,col 20)",
            "(line 477,col 9)-(line 477,col 81)",
            "(line 478,col 9)-(line 478,col 99)",
            "(line 479,col 9)-(line 479,col 22)",
            "(line 480,col 9)-(line 480,col 81)",
            "(line 481,col 9)-(line 481,col 99)",
            "(line 482,col 9)-(line 482,col 22)",
            "(line 483,col 9)-(line 483,col 81)",
            "(line 484,col 9)-(line 484,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testIsNumberInvalidInput()",
        "snippet": "    public void testIsNumberInvalidInput() {\n        String val = \"0x\";\n        assertEquals(\"isNumber() with 0x wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \"0x3x3\";\n        assertEquals(\"isNumber() with 0x3x3 wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \"20EE-3\";\n        assertEquals(\"isNumber() with 20EE-3 wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \"2435q\";\n        assertEquals(\"isNumber() with 2435q wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \".\";\n        assertEquals(\"isNumber() with . wasn't false\",  false, NumberUtils.isNumber(val));\n\n    }\n",
        "begin_line": 488,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 26)",
            "(line 490,col 9)-(line 490,col 91)",
            "(line 491,col 9)-(line 491,col 22)",
            "(line 492,col 9)-(line 492,col 94)",
            "(line 493,col 9)-(line 493,col 23)",
            "(line 494,col 9)-(line 494,col 95)",
            "(line 495,col 9)-(line 495,col 22)",
            "(line 496,col 9)-(line 496,col 94)",
            "(line 497,col 9)-(line 497,col 18)",
            "(line 498,col 9)-(line 498,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        } catch (NullPointerException e) {\n            return false;\n        }\n    }\n",
        "begin_line": 502,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 513,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testPublicNoArgConstructor()",
        "snippet": "    public void testPublicNoArgConstructor() {\n        try {\n            NumberUtils nu = new NumberUtils();\n        } catch( Exception e ) {\n            fail( \"Error calling public no-arg constructor\" );\n        }\n    }\n",
        "begin_line": 516,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 517,col 9)-(line 521,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testLang457()",
        "snippet": "    public void testLang457() {\n        String[] badInputs = new String[] { \"l\", \"L\", \"f\", \"F\", \"junk\", \"bobL\"};\n        for(int i=0; i<badInputs.length; i++) {\n            try {\n                NumberUtils.createNumber(badInputs[i]);\n                fail(\"NumberFormatException was expected for \" + badInputs[i]);\n            } catch (NumberFormatException e) {\n                return; // expected\n            }\n        }\n    }\n",
        "begin_line": 524,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 80)",
            "(line 526,col 9)-(line 533,col 9)"
        ]
    }
]