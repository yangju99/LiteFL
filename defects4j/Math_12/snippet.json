[
    {
        "name": "LogNormalDistribution.sample#309",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistribution",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistribution.sample()",
        "snippet": "    @Override\n    public double sample()  {\n        final double n = random.nextGaussian();\n        return FastMath.exp(scale + shape * n);\n    }\n",
        "begin_line": 309,
        "end_line": 313,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.AbstractRealDistribution": "\n     * {@inheritDoc}\n     *\n     * The default implementation uses the\n     * <a href=\"http://en.wikipedia.org/wiki/Inverse_transform_sampling\">\n     * inversion method.\n     * </a>\n     ",
            "org.apache.commons.math3.distribution.RealDistribution": "\n     * Generate a random value sampled from this distribution.\n     *\n     * @return a random value.\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GammaDistribution.sample#372",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.GammaDistribution",
        "signature": "org.apache.commons.math3.distribution.GammaDistribution.sample()",
        "snippet": "    @Override\n    public double sample()  {\n        if (shape < 1) {\n            // [1]: p. 228, Algorithm GS\n\n            while (true) {\n                // Step 1:\n                final double u = random.nextDouble();\n                final double bGS = 1 + shape / FastMath.E;\n                final double p = bGS * u;\n\n                if (p <= 1) {\n                    // Step 2:\n\n                    final double x = FastMath.pow(p, 1 / shape);\n                    final double u2 = random.nextDouble();\n\n                    if (u2 > FastMath.exp(-x)) {\n                        // Reject\n                        continue;\n                    } else {\n                        return scale * x;\n                    }\n                } else {\n                    // Step 3:\n\n                    final double x = -1 * FastMath.log((bGS - p) / shape);\n                    final double u2 = random.nextDouble();\n\n                    if (u2 > FastMath.pow(x, shape - 1)) {\n                        // Reject\n                        continue;\n                    } else {\n                        return scale * x;\n                    }\n                }\n            }\n        }\n\n        // Now shape >= 1\n\n        final double d = shape - 0.333333333333333333;\n        final double c = 1 / (3 * FastMath.sqrt(d));\n\n        while (true) {\n            final double x = random.nextGaussian();\n            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);\n\n            if (v <= 0) {\n                continue;\n            }\n\n            final double x2 = x * x;\n            final double u = random.nextDouble();\n\n            // Squeeze\n            if (u < 1 - 0.0331 * x2 * x2) {\n                return scale * d * v;\n            }\n\n            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {\n                return scale * d * v;\n            }\n        }\n    }\n",
        "begin_line": 372,
        "end_line": 436,
        "comment": "\n     * <p>This implementation uses the following algorithms: </p>\n     *\n     * <p>For 0 < shape < 1: <br/>\n     * Ahrens, J. H. and Dieter, U., <i>Computer methods for\n     * sampling from gamma, beta, Poisson and binomial distributions.</i>\n     * Computing, 12, 223-246, 1974.</p>\n     *\n     * <p>For shape >= 1: <br/>\n     * Marsaglia and Tsang, <i>A Simple Method for Generating\n     * Gamma Variables.</i> ACM Transactions on Mathematical Software,\n     * Volume 26 Issue 3, September, 2000.</p>\n     *\n     * @return random value sampled from the Gamma(shape, scale) distribution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealDistribution.reseedRandomGenerator#245",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.reseedRandomGenerator(long)",
        "snippet": "    public void reseedRandomGenerator(long seed) {\n        random.setSeed(seed);\n        randomData.reSeed(seed);\n    }\n",
        "begin_line": 245,
        "end_line": 248,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.RealDistribution": "\n     * Reseed the random generator used to generate samples.\n     *\n     * @param seed the new seed\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 3
    },
    {
        "name": "RandomDataImpl.reSeed#460",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
        "class_name": "org.apache.commons.math3.random.RandomDataImpl",
        "signature": "org.apache.commons.math3.random.RandomDataImpl.reSeed(long)",
        "snippet": "    public void reSeed(long seed) {\n        delegate.reSeed(seed);\n    }\n",
        "begin_line": 460,
        "end_line": 462,
        "comment": "\n     * Reseeds the random number generator with the supplied seed.\n     * <p>\n     * Will create and initialize if null.\n     * </p>\n     *\n     * @param seed\n     *            the seed value to use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 3
    },
    {
        "name": "RandomDataGenerator.reSeed#647",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.reSeed(long)",
        "snippet": "    public void reSeed(long seed) {\n       getRan().setSeed(seed);\n    }\n",
        "begin_line": 647,
        "end_line": 649,
        "comment": "\n     * Reseeds the random number generator with the supplied seed.\n     * <p>\n     * Will create and initialize if null.\n     * </p>\n     *\n     * @param seed the seed value to use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 3
    },
    {
        "name": "Well19937c.Well19937c#78",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.Well19937c(long)",
        "snippet": "    public Well19937c(long seed) {\n        super(K, M1, M2, M3, seed);\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": " Creates a new random number generator using a single long seed.\n     * @param seed the initial seed (64 bits integer)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3062
        },
        "num_failing_tests": 3
    },
    {
        "name": "RandomDataGenerator.getRan#713",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.getRan()",
        "snippet": "    private RandomGenerator getRan() {\n        if (rand == null) {\n            initRan();\n        }\n        return rand;\n    }\n",
        "begin_line": 713,
        "end_line": 718,
        "comment": "\n     * Returns the RandomGenerator used to generate non-secure random data.\n     * <p>\n     * Creates and initializes a default generator if null. Uses a {@link Well19937c}\n     * generator with {@code System.currentTimeMillis() + System.identityHashCode(this))}\n     * as the default seed.\n     * </p>\n     *\n     * @return the Random used to generate random data\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3062
        },
        "num_failing_tests": 3
    },
    {
        "name": "RandomDataGenerator.initRan#724",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.initRan()",
        "snippet": "    private void initRan() {\n        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));\n    }\n",
        "begin_line": 724,
        "end_line": 726,
        "comment": "\n     * Sets the default generator to a {@link Well19937c} generator seeded with\n     * {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3062
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractWell.AbstractWell#131",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, long)",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final long seed) {\n        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": " Creates a new random number generator using a single long seed.\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     * @param seed the initial seed (64 bits integer)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 3
    },
    {
        "name": "Well19937c.next#83",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.next(int)",
        "snippet": "    @Override\n    protected int next(final int bits) {\n\n        final int indexRm1 = iRm1[index];\n        final int indexRm2 = iRm2[index];\n\n        final int v0       = v[index];\n        final int vM1      = v[i1[index]];\n        final int vM2      = v[i2[index]];\n        final int vM3      = v[i3[index]];\n\n        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);\n        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));\n        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));\n        final int z3 = z1      ^ z2;\n        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));\n\n        v[index]     = z3;\n        v[indexRm1]  = z4;\n        v[indexRm2] &= 0x80000000;\n        index        = indexRm1;\n\n\n        // add Matsumoto-Kurita tempering\n        // to get a maximally-equidistributed generator\n        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);\n        z4 = z4 ^ ((z4 << 15) & 0x9b868000);\n\n        return z4 >>> (32 - bits);\n\n    }\n",
        "begin_line": 83,
        "end_line": 113,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.random.AbstractWell": " {@inheritDoc} ",
            "org.apache.commons.math3.random.BitsStreamGenerator": " Generate next pseudorandom number.\n     * <p>This method is the core generation algorithm. It is used by all the\n     * public generation methods for the various primitive types {@link\n     * #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},\n     * {@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},\n     * {@link #next(int)} and {@link #nextLong()}.</p>\n     * @param bits number of random bits to produce\n     * @return random bits generated\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.2641
        },
        "num_failing_tests": 3
    },
    {
        "name": "BitsStreamGenerator.nextGaussian#98",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian()",
        "snippet": "    public double nextGaussian() {\n\n        final double random;\n        if (Double.isNaN(nextGaussian)) {\n            // generate a new pair of gaussian numbers\n            final double x = nextDouble();\n            final double y = nextDouble();\n            final double alpha = 2 * FastMath.PI * x;\n            final double r      = FastMath.sqrt(-2 * FastMath.log(y));\n            random       = r * FastMath.cos(alpha);\n            nextGaussian = r * FastMath.sin(alpha);\n        } else {\n            // use the second element of the pair already generated\n            random = nextGaussian;\n            nextGaussian = Double.NaN;\n        }\n\n        return random;\n\n    }\n",
        "begin_line": 98,
        "end_line": 117,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.random.RandomGenerator": "\n     * Returns the next pseudorandom, Gaussian (\"normally\") distributed\n     * <code>double</code> value with mean <code>0.0</code> and standard\n     * deviation <code>1.0</code> from this random number generator's sequence.\n     *\n     * @return  the next pseudorandom, Gaussian (\"normally\") distributed\n     * <code>double</code> value with mean <code>0.0</code> and\n     * standard deviation <code>1.0</code> from this random number\n     *  generator's sequence\n     "
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.sin#2225",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.sin(double)",
        "snippet": "    public static double sin(double x) {\n        boolean negative = false;\n        int quadrant = 0;\n        double xa;\n        double xb = 0.0;\n\n        /* Take absolute value of the input */\n        xa = x;\n        if (x < 0) {\n            negative = true;\n            xa = -xa;\n        }\n\n        /* Check for zero and negative zero */\n        if (xa == 0.0) {\n            long bits = Double.doubleToLongBits(x);\n            if (bits < 0) {\n                return -0.0;\n            }\n            return 0.0;\n        }\n\n        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n            return Double.NaN;\n        }\n\n        /* Perform any argument reduction */\n        if (xa > 3294198.0) {\n            // PI * (2**20)\n            // Argument too big for CodyWaite reduction.  Must use\n            // PayneHanek.\n            double reduceResults[] = new double[3];\n            reducePayneHanek(xa, reduceResults);\n            quadrant = ((int) reduceResults[0]) & 3;\n            xa = reduceResults[1];\n            xb = reduceResults[2];\n        } else if (xa > 1.5707963267948966) {\n            final CodyWaite cw = new CodyWaite(xa);\n            quadrant = cw.getK() & 3;\n            xa = cw.getRemA();\n            xb = cw.getRemB();\n        }\n\n        if (negative) {\n            quadrant ^= 2;  // Flip bit 1\n        }\n\n        switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }\n    }\n",
        "begin_line": 2225,
        "end_line": 2284,
        "comment": "\n     * Sine function.\n     *\n     * @param x Argument.\n     * @return sin(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2335
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.cos#2292",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.cos(double)",
        "snippet": "    public static double cos(double x) {\n        int quadrant = 0;\n\n        /* Take absolute value of the input */\n        double xa = x;\n        if (x < 0) {\n            xa = -xa;\n        }\n\n        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n            return Double.NaN;\n        }\n\n        /* Perform any argument reduction */\n        double xb = 0;\n        if (xa > 3294198.0) {\n            // PI * (2**20)\n            // Argument too big for CodyWaite reduction.  Must use\n            // PayneHanek.\n            double reduceResults[] = new double[3];\n            reducePayneHanek(xa, reduceResults);\n            quadrant = ((int) reduceResults[0]) & 3;\n            xa = reduceResults[1];\n            xb = reduceResults[2];\n        } else if (xa > 1.5707963267948966) {\n            final CodyWaite cw = new CodyWaite(xa);\n            quadrant = cw.getK() & 3;\n            xa = cw.getRemA();\n            xb = cw.getRemB();\n        }\n\n        //if (negative)\n        //  quadrant = (quadrant + 2) % 4;\n\n        switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }\n    }\n",
        "begin_line": 2292,
        "end_line": 2338,
        "comment": "\n     * Cosine function.\n     *\n     * @param x Argument.\n     * @return cos(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2335
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.sinQ#1716",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.sinQ(double, double)",
        "snippet": "    private static double sinQ(double xa, double xb) {\n        int idx = (int) ((xa * 8.0) + 0.5);\n        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\n\n        // Table lookups\n        final double sintA = SINE_TABLE_A[idx];\n        final double sintB = SINE_TABLE_B[idx];\n        final double costA = COSINE_TABLE_A[idx];\n        final double costB = COSINE_TABLE_B[idx];\n\n        // Polynomial eval of sin(epsilon), cos(epsilon)\n        double sinEpsA = epsilon;\n        double sinEpsB = polySine(epsilon);\n        final double cosEpsA = 1.0;\n        final double cosEpsB = polyCosine(epsilon);\n\n        // Split epsilon   xa + xb = x\n        final double temp = sinEpsA * HEX_40000000;\n        double temp2 = (sinEpsA + temp) - temp;\n        sinEpsB +=  sinEpsA - temp2;\n        sinEpsA = temp2;\n\n        /* Compute sin(x) by angle addition formula */\n        double result;\n\n        /* Compute the following sum:\n         *\n         * result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n         *          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n         *\n         * Ranges of elements\n         *\n         * xxxtA   0            PI/2\n         * xxxtB   -1.5e-9      1.5e-9\n         * sinEpsA -0.0625      0.0625\n         * sinEpsB -6e-11       6e-11\n         * cosEpsA  1.0\n         * cosEpsB  0           -0.0625\n         *\n         */\n\n        //result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n        //          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n\n        //result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;\n        //result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;\n        double a = 0;\n        double b = 0;\n\n        double t = sintA;\n        double c = a + t;\n        double d = -(c - a - t);\n        a = c;\n        b = b + d;\n\n        t = costA * sinEpsA;\n        c = a + t;\n        d = -(c - a - t);\n        a = c;\n        b = b + d;\n\n        b = b + sintA * cosEpsB + costA * sinEpsB;\n        /*\n    t = sintA*cosEpsB;\n    c = a + t;\n    d = -(c - a - t);\n    a = c;\n    b = b + d;\n\n    t = costA*sinEpsB;\n    c = a + t;\n    d = -(c - a - t);\n    a = c;\n    b = b + d;\n         */\n\n        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\n        /*\n    t = sintB;\n    c = a + t;\n    d = -(c - a - t);\n    a = c;\n    b = b + d;\n\n    t = costB*sinEpsA;\n    c = a + t;\n    d = -(c - a - t);\n    a = c;\n    b = b + d;\n\n    t = sintB*cosEpsB;\n    c = a + t;\n    d = -(c - a - t);\n    a = c;\n    b = b + d;\n\n    t = costB*sinEpsB;\n    c = a + t;\n    d = -(c - a - t);\n    a = c;\n    b = b + d;\n         */\n\n        if (xb != 0.0) {\n            t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;  // approximate cosine*xb\n            c = a + t;\n            d = -(c - a - t);\n            a = c;\n            b = b + d;\n        }\n\n        result = a + b;\n\n        return result;\n    }\n",
        "begin_line": 1716,
        "end_line": 1831,
        "comment": "\n     *  Compute sine over the first quadrant (0 < x < pi/2).\n     *  Use combination of table lookup and rational polynomial expansion.\n     *  @param xa number from which sine is requested\n     *  @param xb extra bits for x (may be 0.0)\n     *  @return sin(xa + xb)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.cosQ#1840",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.cosQ(double, double)",
        "snippet": "    private static double cosQ(double xa, double xb) {\n        final double pi2a = 1.5707963267948966;\n        final double pi2b = 6.123233995736766E-17;\n\n        final double a = pi2a - xa;\n        double b = -(a - pi2a + xa);\n        b += pi2b - xb;\n\n        return sinQ(a, b);\n    }\n",
        "begin_line": 1840,
        "end_line": 1849,
        "comment": "\n     * Compute cosine in the first quadrant by subtracting input from PI/2 and\n     * then calling sinQ.  This is more accurate as the input approaches PI/2.\n     *  @param xa number from which cosine is requested\n     *  @param xb extra bits for x (may be 0.0)\n     *  @return cos(xa + xb)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.polySine#1676",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.polySine(double)",
        "snippet": "    private static double polySine(final double x)\n    {\n        double x2 = x*x;\n\n        double p = 2.7553817452272217E-6;\n        p = p * x2 + -1.9841269659586505E-4;\n        p = p * x2 + 0.008333333333329196;\n        p = p * x2 + -0.16666666666666666;\n        //p *= x2;\n        //p *= x;\n        p = p * x2 * x;\n\n        return p;\n    }\n",
        "begin_line": 1676,
        "end_line": 1689,
        "comment": "\n     *  Computes sin(x) - x, where |x| < 1/16.\n     *  Use a Remez polynomial approximation.\n     *  @param x a number smaller than 1/16\n     *  @return sin(x) - x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.22
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.polyCosine#1697",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.polyCosine(double)",
        "snippet": "    private static double polyCosine(double x) {\n        double x2 = x*x;\n\n        double p = 2.479773539153719E-5;\n        p = p * x2 + -0.0013888888689039883;\n        p = p * x2 + 0.041666666666621166;\n        p = p * x2 + -0.49999999999999994;\n        p *= x2;\n\n        return p;\n    }\n",
        "begin_line": 1697,
        "end_line": 1707,
        "comment": "\n     *  Computes cos(x) - 1, where |x| < 1/16.\n     *  Use a Remez polynomial approximation.\n     *  @param x a number smaller than 1/16\n     *  @return cos(x) - 1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.22
        },
        "num_failing_tests": 3
    },
    {
        "name": "NormalDistribution.sample#254",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.NormalDistribution",
        "signature": "org.apache.commons.math3.distribution.NormalDistribution.sample()",
        "snippet": "    @Override\n    public double sample()  {\n        return standardDeviation * random.nextGaussian() + mean;\n    }\n",
        "begin_line": 254,
        "end_line": 257,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.AbstractRealDistribution": "\n     * {@inheritDoc}\n     *\n     * The default implementation uses the\n     * <a href=\"http://en.wikipedia.org/wiki/Inverse_transform_sampling\">\n     * inversion method.\n     * </a>\n     ",
            "org.apache.commons.math3.distribution.RealDistribution": "\n     * Generate a random value sampled from this distribution.\n     *\n     * @return a random value.\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.nextDouble#86",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.nextDouble()",
        "snippet": "    public double nextDouble() {\n        final long high = ((long) next(26)) << 26;\n        final int  low  = next(26);\n        return (high | low) * 0x1.0p-52d;\n    }\n",
        "begin_line": 86,
        "end_line": 90,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.random.RandomGenerator": "\n     * Returns the next pseudorandom, uniformly distributed\n     * <code>double</code> value between <code>0.0</code> and\n     * <code>1.0</code> from this random number generator's sequence.\n     *\n     * @return  the next pseudorandom, uniformly distributed\n     *  <code>double</code> value between <code>0.0</code> and\n     *  <code>1.0</code> from this random number generator's sequence\n     "
        },
        "susp": {
            "ochiai_susp": 0.1674
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.CodyWaite#3808",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.CodyWaite.CodyWaite(double)",
        "snippet": "        CodyWaite(double xa) {\n            // Estimate k.\n            //k = (int)(xa / 1.5707963267948966);\n            int k = (int)(xa * 0.6366197723675814);\n\n            // Compute remainder.\n            double remA;\n            double remB;\n            while (true) {\n                double a = -k * 1.570796251296997;\n                remA = xa + a;\n                remB = -(remA - xa - a);\n\n                a = -k * 7.549789948768648E-8;\n                double b = remA;\n                remA = a + b;\n                remB += -(remA - b - a);\n\n                a = -k * 6.123233995736766E-17;\n                b = remA;\n                remA = a + b;\n                remB += -(remA - b - a);\n\n                if (remA > 0) {\n                    break;\n                }\n\n                // Remainder is negative, so decrement k and try again.\n                // This should only happen if the input is very close\n                // to an even multiple of pi/2.\n                --k;\n            }\n\n            this.finalK = k;\n            this.finalRemA = remA;\n            this.finalRemB = remB;\n        }\n",
        "begin_line": 3808,
        "end_line": 3844,
        "comment": "\n         * @param xa Argument.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1557
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.getK#3849",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.CodyWaite.getK()",
        "snippet": "        int getK() {\n            return finalK;\n        }\n",
        "begin_line": 3849,
        "end_line": 3851,
        "comment": "\n         * @return k\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1557
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.getRemA#3855",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.CodyWaite.getRemA()",
        "snippet": "        double getRemA() {\n            return finalRemA;\n        }\n",
        "begin_line": 3855,
        "end_line": 3857,
        "comment": "\n         * @return remA\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1557
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.getRemB#3861",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.CodyWaite.getRemB()",
        "snippet": "        double getRemB() {\n            return finalRemB;\n        }\n",
        "begin_line": 3861,
        "end_line": 3863,
        "comment": "\n         * @return remB\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1557
        },
        "num_failing_tests": 2
    },
    {
        "name": "LogNormalDistribution.LogNormalDistribution#96",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistribution",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistribution.LogNormalDistribution(double, double)",
        "snippet": "    public LogNormalDistribution(double scale, double shape)\n        throws NotStrictlyPositiveException {\n        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n    }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "\n     * Create a log-normal distribution using the specified scale and shape.\n     *\n     * @param scale the scale parameter of this distribution\n     * @param shape the shape parameter of this distribution\n     * @throws NotStrictlyPositiveException if {@code shape <= 0}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "LogNormalDistribution.LogNormalDistribution#110",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistribution",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistribution.LogNormalDistribution(double, double, double)",
        "snippet": "    public LogNormalDistribution(double scale, double shape, double inverseCumAccuracy)\n        throws NotStrictlyPositiveException {\n        this(new Well19937c(), scale, shape, inverseCumAccuracy);\n    }\n",
        "begin_line": 110,
        "end_line": 113,
        "comment": "\n     * Create a log-normal distribution using the specified scale, shape and\n     * inverse cumulative distribution accuracy.\n     *\n     * @param scale the scale parameter of this distribution\n     * @param shape the shape parameter of this distribution\n     * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n     * @throws NotStrictlyPositiveException if {@code shape <= 0}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "LogNormalDistribution.LogNormalDistribution#125",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistribution",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistribution.LogNormalDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double)",
        "snippet": "    public LogNormalDistribution(RandomGenerator rng,\n                                 double scale,\n                                 double shape,\n                                 double inverseCumAccuracy)\n        throws NotStrictlyPositiveException {\n        super(rng);\n\n        if (shape <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);\n        }\n\n        this.scale = scale;\n        this.shape = shape;\n        this.solverAbsoluteAccuracy = inverseCumAccuracy;\n    }\n",
        "begin_line": 125,
        "end_line": 139,
        "comment": "\n     * Creates a log-normal distribution.\n     *\n     * @param rng Random number generator.\n     * @param scale Scale parameter of this distribution.\n     * @param shape Shape parameter of this distribution.\n     * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n     * @throws NotStrictlyPositiveException if {@code shape <= 0}.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.log#1129",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.log(double, double[])",
        "snippet": "    private static double log(final double x, final double[] hiPrec) {\n        if (x==0) { // Handle special case of +0/-0\n            return Double.NEGATIVE_INFINITY;\n        }\n        long bits = Double.doubleToLongBits(x);\n\n        /* Handle special cases of negative input, and NaN */\n        if ((bits & 0x8000000000000000L) != 0 || x != x) {\n            if (x != 0.0) {\n                if (hiPrec != null) {\n                    hiPrec[0] = Double.NaN;\n                }\n\n                return Double.NaN;\n            }\n        }\n\n        /* Handle special cases of Positive infinity. */\n        if (x == Double.POSITIVE_INFINITY) {\n            if (hiPrec != null) {\n                hiPrec[0] = Double.POSITIVE_INFINITY;\n            }\n\n            return Double.POSITIVE_INFINITY;\n        }\n\n        /* Extract the exponent */\n        int exp = (int)(bits >> 52)-1023;\n\n        if ((bits & 0x7ff0000000000000L) == 0) {\n            // Subnormal!\n            if (x == 0) {\n                // Zero\n                if (hiPrec != null) {\n                    hiPrec[0] = Double.NEGATIVE_INFINITY;\n                }\n\n                return Double.NEGATIVE_INFINITY;\n            }\n\n            /* Normalize the subnormal number. */\n            bits <<= 1;\n            while ( (bits & 0x0010000000000000L) == 0) {\n                --exp;\n                bits <<= 1;\n            }\n        }\n\n\n        if (exp == -1 || exp == 0) {\n            if (x < 1.01 && x > 0.99 && hiPrec == null) {\n                /* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight\n           polynomial expansion in higer precision. */\n\n               /* Compute x - 1.0 and split it */\n                double xa = x - 1.0;\n                double xb = xa - x + 1.0;\n                double tmp = xa * HEX_40000000;\n                double aa = xa + tmp - tmp;\n                double ab = xa - aa;\n                xa = aa;\n                xb = ab;\n\n                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];\n                double ya = lnCoef_last[0];\n                double yb = lnCoef_last[1];\n\n                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {\n                    /* Multiply a = y * x */\n                    aa = ya * xa;\n                    ab = ya * xb + yb * xa + yb * xb;\n                    /* split, so now y = a */\n                    tmp = aa * HEX_40000000;\n                    ya = aa + tmp - tmp;\n                    yb = aa - ya + ab;\n\n                    /* Add  a = y + lnQuickCoef */\n                    final double[] lnCoef_i = LN_QUICK_COEF[i];\n                    aa = ya + lnCoef_i[0];\n                    ab = yb + lnCoef_i[1];\n                    /* Split y = a */\n                    tmp = aa * HEX_40000000;\n                    ya = aa + tmp - tmp;\n                    yb = aa - ya + ab;\n                }\n\n                /* Multiply a = y * x */\n                aa = ya * xa;\n                ab = ya * xb + yb * xa + yb * xb;\n                /* split, so now y = a */\n                tmp = aa * HEX_40000000;\n                ya = aa + tmp - tmp;\n                yb = aa - ya + ab;\n\n                return ya + yb;\n            }\n        }\n\n        // lnm is a log of a number in the range of 1.0 - 2.0, so 0 <= lnm < ln(2)\n        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n\n        /*\n    double epsilon = x / Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n\n    epsilon -= 1.0;\n         */\n\n        // y is the most significant 10 bits of the mantissa\n        //double y = Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n        //double epsilon = (x - y) / y;\n        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n\n        double lnza = 0.0;\n        double lnzb = 0.0;\n\n        if (hiPrec != null) {\n            /* split epsilon -> x */\n            double tmp = epsilon * HEX_40000000;\n            double aa = epsilon + tmp - tmp;\n            double ab = epsilon - aa;\n            double xa = aa;\n            double xb = ab;\n\n            /* Need a more accurate epsilon, so adjust the division. */\n            final double numer = bits & 0x3ffffffffffL;\n            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n            aa = numer - xa*denom - xb * denom;\n            xb += aa / denom;\n\n            /* Remez polynomial evaluation */\n            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];\n            double ya = lnCoef_last[0];\n            double yb = lnCoef_last[1];\n\n            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n                /* Multiply a = y * x */\n                aa = ya * xa;\n                ab = ya * xb + yb * xa + yb * xb;\n                /* split, so now y = a */\n                tmp = aa * HEX_40000000;\n                ya = aa + tmp - tmp;\n                yb = aa - ya + ab;\n\n                /* Add  a = y + lnHiPrecCoef */\n                final double[] lnCoef_i = LN_HI_PREC_COEF[i];\n                aa = ya + lnCoef_i[0];\n                ab = yb + lnCoef_i[1];\n                /* Split y = a */\n                tmp = aa * HEX_40000000;\n                ya = aa + tmp - tmp;\n                yb = aa - ya + ab;\n            }\n\n            /* Multiply a = y * x */\n            aa = ya * xa;\n            ab = ya * xb + yb * xa + yb * xb;\n\n            /* split, so now lnz = a */\n            /*\n      tmp = aa * 1073741824.0;\n      lnza = aa + tmp - tmp;\n      lnzb = aa - lnza + ab;\n             */\n            lnza = aa + ab;\n            lnzb = -(lnza - aa - ab);\n        } else {\n            /* High precision not required.  Eval Remez polynomial\n         using standard double precision */\n            lnza = -0.16624882440418567;\n            lnza = lnza * epsilon + 0.19999954120254515;\n            lnza = lnza * epsilon + -0.2499999997677497;\n            lnza = lnza * epsilon + 0.3333333333332802;\n            lnza = lnza * epsilon + -0.5;\n            lnza = lnza * epsilon + 1.0;\n            lnza = lnza * epsilon;\n        }\n\n        /* Relative sizes:\n         * lnzb     [0, 2.33E-10]\n         * lnm[1]   [0, 1.17E-7]\n         * ln2B*exp [0, 1.12E-4]\n         * lnza      [0, 9.7E-4]\n         * lnm[0]   [0, 0.692]\n         * ln2A*exp [0, 709]\n         */\n\n        /* Compute the following sum:\n         * lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n         */\n\n        //return lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n        double a = LN_2_A*exp;\n        double b = 0.0;\n        double c = a+lnm[0];\n        double d = -(c-a-lnm[0]);\n        a = c;\n        b = b + d;\n\n        c = a + lnza;\n        d = -(c - a - lnza);\n        a = c;\n        b = b + d;\n\n        c = a + LN_2_B*exp;\n        d = -(c - a - LN_2_B*exp);\n        a = c;\n        b = b + d;\n\n        c = a + lnm[1];\n        d = -(c - a - lnm[1]);\n        a = c;\n        b = b + d;\n\n        c = a + lnzb;\n        d = -(c - a - lnzb);\n        a = c;\n        b = b + d;\n\n        if (hiPrec != null) {\n            hiPrec[0] = a;\n            hiPrec[1] = b;\n        }\n\n        return a + b;\n    }\n",
        "begin_line": 1129,
        "end_line": 1353,
        "comment": "\n     * Internal helper method for natural logarithm function.\n     * @param x original argument of the natural logarithm function\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return log(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1181
        },
        "num_failing_tests": 3
    },
    {
        "name": "NormalDistribution.NormalDistribution#69",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.NormalDistribution",
        "signature": "org.apache.commons.math3.distribution.NormalDistribution.NormalDistribution(double, double)",
        "snippet": "    public NormalDistribution(double mean, double sd)\n        throws NotStrictlyPositiveException {\n        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n    }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "\n     * Create a normal distribution using the given mean and standard deviation.\n     *\n     * @param mean Mean for this distribution.\n     * @param sd Standard deviation for this distribution.\n     * @throws NotStrictlyPositiveException if {@code sd <= 0}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "NormalDistribution.NormalDistribution#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.NormalDistribution",
        "signature": "org.apache.commons.math3.distribution.NormalDistribution.NormalDistribution(double, double, double)",
        "snippet": "    public NormalDistribution(double mean, double sd, double inverseCumAccuracy)\n        throws NotStrictlyPositiveException {\n        this(new Well19937c(), mean, sd, inverseCumAccuracy);\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "\n     * Create a normal distribution using the given mean, standard deviation and\n     * inverse cumulative distribution accuracy.\n     *\n     * @param mean Mean for this distribution.\n     * @param sd Standard deviation for this distribution.\n     * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n     * @throws NotStrictlyPositiveException if {@code sd <= 0}.\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.log#1119",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.log(double)",
        "snippet": "    public static double log(final double x) {\n        return log(x, null);\n    }\n",
        "begin_line": 1119,
        "end_line": 1121,
        "comment": "\n     * Natural logarithm.\n     *\n     * @param x   a double\n     * @return log(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1058
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractRealDistribution.AbstractRealDistribution#76",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)",
        "snippet": "    protected AbstractRealDistribution(RandomGenerator rng) {\n        random = rng;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * @param rng Random number generator.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1041
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMathLiteralArrays.loadLnMant#6173",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMathLiteralArrays.java",
        "class_name": "org.apache.commons.math3.util.FastMathLiteralArrays",
        "signature": "org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()",
        "snippet": "    static double[][] loadLnMant() {\n        return LN_MANT.clone();\n    }\n",
        "begin_line": 6173,
        "end_line": 6175,
        "comment": "\n     * Load \"LN_MANT\".\n     *\n     * @return a clone of the data array.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.exp#841",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.exp(double, double, double[])",
        "snippet": "    private static double exp(double x, double extra, double[] hiPrec) {\n        double intPartA;\n        double intPartB;\n        int intVal;\n\n        /* Lookup exp(floor(x)).\n         * intPartA will have the upper 22 bits, intPartB will have the lower\n         * 52 bits.\n         */\n        if (x < 0.0) {\n            intVal = (int) -x;\n\n            if (intVal > 746) {\n                if (hiPrec != null) {\n                    hiPrec[0] = 0.0;\n                    hiPrec[1] = 0.0;\n                }\n                return 0.0;\n            }\n\n            if (intVal > 709) {\n                /* This will produce a subnormal output */\n                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;\n                if (hiPrec != null) {\n                    hiPrec[0] /= 285040095144011776.0;\n                    hiPrec[1] /= 285040095144011776.0;\n                }\n                return result;\n            }\n\n            if (intVal == 709) {\n                /* exp(1.494140625) is nearly a machine number... */\n                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;\n                if (hiPrec != null) {\n                    hiPrec[0] /= 4.455505956692756620;\n                    hiPrec[1] /= 4.455505956692756620;\n                }\n                return result;\n            }\n\n            intVal++;\n\n            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\n            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\n\n            intVal = -intVal;\n        } else {\n            intVal = (int) x;\n\n            if (intVal > 709) {\n                if (hiPrec != null) {\n                    hiPrec[0] = Double.POSITIVE_INFINITY;\n                    hiPrec[1] = 0.0;\n                }\n                return Double.POSITIVE_INFINITY;\n            }\n\n            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\n            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\n        }\n\n        /* Get the fractional part of x, find the greatest multiple of 2^-10 less than\n         * x and look up the exp function of it.\n         * fracPartA will have the upper 22 bits, fracPartB the lower 52 bits.\n         */\n        final int intFrac = (int) ((x - intVal) * 1024.0);\n        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\n        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\n\n        /* epsilon is the difference in x from the nearest multiple of 2^-10.  It\n         * has a value in the range 0 <= epsilon < 2^-10.\n         * Do the subtraction from x as the last step to avoid possible loss of percison.\n         */\n        final double epsilon = x - (intVal + intFrac / 1024.0);\n\n        /* Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has\n       full double precision (52 bits).  Since z < 2^-10, we will have\n       62 bits of precision when combined with the contant 1.  This will be\n       used in the last addition below to get proper rounding. */\n\n        /* Remez generated polynomial.  Converges on the interval [0, 2^-10], error\n       is less than 0.5 ULP */\n        double z = 0.04168701738764507;\n        z = z * epsilon + 0.1666666505023083;\n        z = z * epsilon + 0.5000000000042687;\n        z = z * epsilon + 1.0;\n        z = z * epsilon + -3.940510424527919E-20;\n\n        /* Compute (intPartA+intPartB) * (fracPartA+fracPartB) by binomial\n       expansion.\n       tempA is exact since intPartA and intPartB only have 22 bits each.\n       tempB will have 52 bits of precision.\n         */\n        double tempA = intPartA * fracPartA;\n        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n\n        /* Compute the result.  (1+z)(tempA+tempB).  Order of operations is\n       important.  For accuracy add by increasing size.  tempA is exact and\n       much larger than the others.  If there are extra bits specified from the\n       pow() function, use them. */\n        final double tempC = tempB + tempA;\n        final double result;\n        if (extra != 0.0) {\n            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;\n        } else {\n            result = tempC*z + tempB + tempA;\n        }\n\n        if (hiPrec != null) {\n            // If requesting high precision\n            hiPrec[0] = tempA;\n            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;\n        }\n\n        return result;\n    }\n",
        "begin_line": 841,
        "end_line": 956,
        "comment": "\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0987
        },
        "num_failing_tests": 2
    },
    {
        "name": "RandomDataImpl.RandomDataImpl#114",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
        "class_name": "org.apache.commons.math3.random.RandomDataImpl",
        "signature": "org.apache.commons.math3.random.RandomDataImpl.RandomDataImpl()",
        "snippet": "    public RandomDataImpl() {\n        delegate = new RandomDataGenerator();\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\n     * Construct a RandomDataImpl, using a default random generator as the source\n     * of randomness.\n     *\n     * <p>The default generator is a {@link Well19937c} seeded\n     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     * The generator is initialized and seeded on first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "RandomDataGenerator.RandomDataGenerator#131",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.RandomDataGenerator()",
        "snippet": "    public RandomDataGenerator() {\n    }\n",
        "begin_line": 131,
        "end_line": 132,
        "comment": "\n     * Construct a RandomDataGenerator, using a default random generator as the source\n     * of randomness.\n     *\n     * <p>The default generator is a {@link Well19937c} seeded\n     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     * The generator is initialized and seeded on first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "Well19937c.Well19937c#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.Well19937c()",
        "snippet": "    public Well19937c() {\n        super(K, M1, M2, M3);\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Creates a new random number generator.\n     * <p>The instance is initialized using the current time as the\n     * seed.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0952
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractWell.AbstractWell#71",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int)",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\n        this(k, m1, m2, m3, null);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": " Creates a new random number generator.\n     * <p>The instance is initialized using the current time plus the\n     * system identity hash code of this instance as the seed.</p>\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0952
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractWell.setSeed#152",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.setSeed(int[])",
        "snippet": "    @Override\n    public void setSeed(final int[] seed) {\n        if (seed == null) {\n            setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n            return;\n        }\n\n        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n\n        if (seed.length < v.length) {\n            for (int i = seed.length; i < v.length; ++i) {\n                final long l = v[i - seed.length];\n                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\n            }\n        }\n\n        index = 0;\n        clear();  // Clear normal deviate cache\n    }\n",
        "begin_line": 152,
        "end_line": 170,
        "comment": " Reinitialize the generator as if just built with the given int array seed.\n     * <p>The state of the generator is exactly the same as a new\n     * generator built with the same seed.</p>\n     * @param seed the initial seed (32 bits integers array). If null\n     * the seed of the generator will be the system time plus the system identity\n     * hash code of the instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0952
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractWell.setSeed#177",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.setSeed(long)",
        "snippet": "    @Override\n    public void setSeed(final long seed) {\n        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n    }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": " Reinitialize the generator as if just built with the given long seed.\n     * <p>The state of the generator is exactly the same as a new\n     * generator built with the same seed.</p>\n     * @param seed the initial seed (64 bits integer)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0952
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractWell.AbstractWell#94",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, int[])",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\n\n        // the bits pool contains k bits, k = r w - p where r is the number\n        // of w bits blocks, w is the block size (always 32 in the original paper)\n        // and p is the number of unused bits in the last block\n        final int w = 32;\n        final int r = (k + w - 1) / w;\n        this.v      = new int[r];\n        this.index  = 0;\n\n        // precompute indirection index tables. These tables are used for optimizing access\n        // they allow saving computations like \"(j + r - 2) % r\" with costly modulo operations\n        iRm1 = new int[r];\n        iRm2 = new int[r];\n        i1   = new int[r];\n        i2   = new int[r];\n        i3   = new int[r];\n        for (int j = 0; j < r; ++j) {\n            iRm1[j] = (j + r - 1) % r;\n            iRm2[j] = (j + r - 2) % r;\n            i1[j]   = (j + m1)    % r;\n            i2[j]   = (j + m2)    % r;\n            i3[j]   = (j + m3)    % r;\n        }\n\n        // initialize the pool content\n        setSeed(seed);\n\n    }\n",
        "begin_line": 94,
        "end_line": 122,
        "comment": " Creates a new random number generator using an int array seed.\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     * @param seed the initial seed (32 bits integers array), if null\n     * the seed of the generator will be related to the current time\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.sqrt#378",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "snippet": "    public static double sqrt(final double a) {\n        return Math.sqrt(a);\n    }\n",
        "begin_line": 378,
        "end_line": 380,
        "comment": " Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0892
        },
        "num_failing_tests": 3
    },
    {
        "name": "NormalDistribution.NormalDistribution#99",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.NormalDistribution",
        "signature": "org.apache.commons.math3.distribution.NormalDistribution.NormalDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double)",
        "snippet": "    public NormalDistribution(RandomGenerator rng,\n                              double mean,\n                              double sd,\n                              double inverseCumAccuracy)\n        throws NotStrictlyPositiveException {\n        super(rng);\n\n        if (sd <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);\n        }\n\n        this.mean = mean;\n        standardDeviation = sd;\n        solverAbsoluteAccuracy = inverseCumAccuracy;\n    }\n",
        "begin_line": 99,
        "end_line": 113,
        "comment": "\n     * Creates a normal distribution.\n     *\n     * @param rng Random number generator.\n     * @param mean Mean for this distribution.\n     * @param sd Standard deviation for this distribution.\n     * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n     * @throws NotStrictlyPositiveException if {@code sd <= 0}.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.BitsStreamGenerator#37",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.BitsStreamGenerator()",
        "snippet": "    public BitsStreamGenerator() {\n        nextGaussian = Double.NaN;\n    }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * Creates a new random number generator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 3
    },
    {
        "name": "BitsStreamGenerator.clear#166",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.clear()",
        "snippet": "    public void clear() {\n        nextGaussian = Double.NaN;\n    }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n     * Clears the cache used by the default implementation of\n     * {@link #nextGaussian}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.exp#830",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.exp(double)",
        "snippet": "    public static double exp(double x) {\n        return exp(x, 0.0, null);\n    }\n",
        "begin_line": 830,
        "end_line": 832,
        "comment": "\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0787
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMathLiteralArrays.loadExpIntA#6141",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMathLiteralArrays.java",
        "class_name": "org.apache.commons.math3.util.FastMathLiteralArrays",
        "signature": "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()",
        "snippet": "    static double[] loadExpIntA() {\n        return EXP_INT_A.clone();\n    }\n",
        "begin_line": 6141,
        "end_line": 6143,
        "comment": "\n     * Load \"EXP_INT_A\".\n     *\n     * @return a clone of the data array.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMathLiteralArrays.loadExpIntB#6149",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMathLiteralArrays.java",
        "class_name": "org.apache.commons.math3.util.FastMathLiteralArrays",
        "signature": "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()",
        "snippet": "    static double[] loadExpIntB() {\n        return EXP_INT_B.clone();\n    }\n",
        "begin_line": 6149,
        "end_line": 6151,
        "comment": "\n     * Load \"EXP_INT_B\".\n     *\n     * @return a clone of the data array.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMathLiteralArrays.loadExpFracA#6157",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMathLiteralArrays.java",
        "class_name": "org.apache.commons.math3.util.FastMathLiteralArrays",
        "signature": "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()",
        "snippet": "    static double[] loadExpFracA() {\n        return EXP_FRAC_A.clone();\n    }\n",
        "begin_line": 6157,
        "end_line": 6159,
        "comment": "\n     * Load \"EXP_FRAC_A\".\n     *\n     * @return a clone of the data array.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMathLiteralArrays.loadExpFracB#6165",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMathLiteralArrays.java",
        "class_name": "org.apache.commons.math3.util.FastMathLiteralArrays",
        "signature": "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()",
        "snippet": "    static double[] loadExpFracB() {\n        return EXP_FRAC_B.clone();\n    }\n",
        "begin_line": 6165,
        "end_line": 6167,
        "comment": "\n     * Load \"EXP_FRAC_B\".\n     *\n     * @return a clone of the data array.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "GammaDistribution.GammaDistribution#92",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.GammaDistribution",
        "signature": "org.apache.commons.math3.distribution.GammaDistribution.GammaDistribution(double, double)",
        "snippet": "    public GammaDistribution(double shape, double scale) throws NotStrictlyPositiveException {\n        this(shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Creates a new gamma distribution with specified values of the shape and\n     * scale parameters.\n     *\n     * @param shape the shape parameter\n     * @param scale the scale parameter\n     * @throws NotStrictlyPositiveException if {@code shape <= 0} or\n     * {@code scale <= 0}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 1
    },
    {
        "name": "GammaDistribution.GammaDistribution#109",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.GammaDistribution",
        "signature": "org.apache.commons.math3.distribution.GammaDistribution.GammaDistribution(double, double, double)",
        "snippet": "    public GammaDistribution(double shape, double scale, double inverseCumAccuracy)\n        throws NotStrictlyPositiveException {\n        this(new Well19937c(), shape, scale, inverseCumAccuracy);\n    }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\n     * Creates a new gamma distribution with specified values of the shape and\n     * scale parameters.\n     *\n     * @param shape the shape parameter\n     * @param scale the scale parameter\n     * @param inverseCumAccuracy the maximum absolute error in inverse\n     * cumulative probability estimates (defaults to\n     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).\n     * @throws NotStrictlyPositiveException if {@code shape <= 0} or\n     * {@code scale <= 0}.\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 1
    },
    {
        "name": "GammaDistribution.GammaDistribution#127",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.GammaDistribution",
        "signature": "org.apache.commons.math3.distribution.GammaDistribution.GammaDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double)",
        "snippet": "    public GammaDistribution(RandomGenerator rng,\n                             double shape,\n                             double scale,\n                             double inverseCumAccuracy)\n        throws NotStrictlyPositiveException {\n        super(rng);\n\n        if (shape <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);\n        }\n        if (scale <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);\n        }\n\n        this.shape = shape;\n        this.scale = scale;\n        this.solverAbsoluteAccuracy = inverseCumAccuracy;\n        this.shiftedShape = shape + Gamma.LANCZOS_G + 0.5;\n        final double aux = FastMath.E / (2.0 * FastMath.PI * shiftedShape);\n        this.densityPrefactor2 = shape * FastMath.sqrt(aux) / Gamma.lanczos(shape);\n        this.densityPrefactor1 = this.densityPrefactor2 / scale *\n                FastMath.pow(shiftedShape, -shape) *\n                FastMath.exp(shape + Gamma.LANCZOS_G);\n        this.minY = shape + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE);\n        this.maxLogY = FastMath.log(Double.MAX_VALUE) / (shape - 1.0);\n    }\n",
        "begin_line": 127,
        "end_line": 152,
        "comment": "\n     * Creates a Gamma distribution.\n     *\n     * @param rng Random number generator.\n     * @param shape the shape parameter\n     * @param scale the scale parameter\n     * @param inverseCumAccuracy the maximum absolute error in inverse\n     * cumulative probability estimates (defaults to\n     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).\n     * @throws NotStrictlyPositiveException if {@code shape <= 0} or\n     * {@code scale <= 0}.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gamma.lanczos#512",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/special/Gamma.java",
        "class_name": "org.apache.commons.math3.special.Gamma",
        "signature": "org.apache.commons.math3.special.Gamma.lanczos(double)",
        "snippet": "    public static double lanczos(final double x) {\n        double sum = 0.0;\n        for (int i = LANCZOS.length - 1; i > 0; --i) {\n            sum = sum + (LANCZOS[i] / (x + i));\n        }\n        return sum + LANCZOS[0];\n    }\n",
        "begin_line": 512,
        "end_line": 518,
        "comment": "\n     * <p>\n     * Returns the Lanczos approximation used to compute the gamma function.\n     * The Lanczos approximation is related to the Gamma function by the\n     * following equation\n     * <center>\n     * {@code gamma(x) = sqrt(2 * pi) / x * (x + g + 0.5) ^ (x + 0.5)\n     *                   * exp(-x - g - 0.5) * lanczos(x)},\n     * </center>\n     * where {@code g} is the Lanczos constant.\n     * </p>\n     *\n     * @param x Argument.\n     * @return The Lanczos approximation.\n     * @see <a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">Lanczos Approximation</a>\n     * equations (1) through (5), and Paul Godfrey's\n     * <a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Note on the computation\n     * of the convergent Lanczos complex Gamma approximation</a>\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.pow#1442",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.pow(double, double)",
        "snippet": "    public static double pow(double x, double y) {\n        final double lns[] = new double[2];\n\n        if (y == 0.0) {\n            return 1.0;\n        }\n\n        if (x != x) { // X is NaN\n            return x;\n        }\n\n\n        if (x == 0) {\n            long bits = Double.doubleToLongBits(x);\n            if ((bits & 0x8000000000000000L) != 0) {\n                // -zero\n                long yi = (long) y;\n\n                if (y < 0 && y == yi && (yi & 1) == 1) {\n                    return Double.NEGATIVE_INFINITY;\n                }\n\n                if (y > 0 && y == yi && (yi & 1) == 1) {\n                    return -0.0;\n                }\n            }\n\n            if (y < 0) {\n                return Double.POSITIVE_INFINITY;\n            }\n            if (y > 0) {\n                return 0.0;\n            }\n\n            return Double.NaN;\n        }\n\n        if (x == Double.POSITIVE_INFINITY) {\n            if (y != y) { // y is NaN\n                return y;\n            }\n            if (y < 0.0) {\n                return 0.0;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (y == Double.POSITIVE_INFINITY) {\n            if (x * x == 1.0) {\n                return Double.NaN;\n            }\n\n            if (x * x > 1.0) {\n                return Double.POSITIVE_INFINITY;\n            } else {\n                return 0.0;\n            }\n        }\n\n        if (x == Double.NEGATIVE_INFINITY) {\n            if (y != y) { // y is NaN\n                return y;\n            }\n\n            if (y < 0) {\n                long yi = (long) y;\n                if (y == yi && (yi & 1) == 1) {\n                    return -0.0;\n                }\n\n                return 0.0;\n            }\n\n            if (y > 0)  {\n                long yi = (long) y;\n                if (y == yi && (yi & 1) == 1) {\n                    return Double.NEGATIVE_INFINITY;\n                }\n\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (y == Double.NEGATIVE_INFINITY) {\n\n            if (x * x == 1.0) {\n                return Double.NaN;\n            }\n\n            if (x * x < 1.0) {\n                return Double.POSITIVE_INFINITY;\n            } else {\n                return 0.0;\n            }\n        }\n\n        /* Handle special case x<0 */\n        if (x < 0) {\n            // y is an even integer in this case\n            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {\n                return pow(-x, y);\n            }\n\n            if (y == (long) y) {\n                // If y is an integer\n                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);\n            } else {\n                return Double.NaN;\n            }\n        }\n\n        /* Split y into ya and yb such that y = ya+yb */\n        double ya;\n        double yb;\n        if (y < 8e298 && y > -8e298) {\n            double tmp1 = y * HEX_40000000;\n            ya = y + tmp1 - tmp1;\n            yb = y - ya;\n        } else {\n            double tmp1 = y * 9.31322574615478515625E-10;\n            double tmp2 = tmp1 * 9.31322574615478515625E-10;\n            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;\n            yb = y - ya;\n        }\n\n        /* Compute ln(x) */\n        final double lores = log(x, lns);\n        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n            return lores;\n        }\n\n        double lna = lns[0];\n        double lnb = lns[1];\n\n        /* resplit lns */\n        double tmp1 = lna * HEX_40000000;\n        double tmp2 = lna + tmp1 - tmp1;\n        lnb += lna - tmp2;\n        lna = tmp2;\n\n        // y*ln(x) = (aa+ab)\n        final double aa = lna * ya;\n        final double ab = lna * yb + lnb * ya + lnb * yb;\n\n        lna = aa+ab;\n        lnb = -(lna - aa - ab);\n\n        double z = 1.0 / 120.0;\n        z = z * lnb + (1.0 / 24.0);\n        z = z * lnb + (1.0 / 6.0);\n        z = z * lnb + 0.5;\n        z = z * lnb + 1.0;\n        z = z * lnb;\n\n        final double result = exp(lna, z, null);\n        //result = result + result * z;\n        return result;\n    }\n",
        "begin_line": 1442,
        "end_line": 1600,
        "comment": "\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0563
        },
        "num_failing_tests": 1
    }
]