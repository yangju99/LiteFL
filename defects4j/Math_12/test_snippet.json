[
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public GammaDistribution makeDistribution() {\n        return new GammaDistribution(4d, 2d);\n    }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R version 2.9.2\n        return new double[] {0.857104827257, 1.64649737269, 2.17973074725, 2.7326367935, 3.48953912565,\n                26.1244815584, 20.0902350297, 17.5345461395, 15.5073130559, 13.3615661365};\n    }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 53,col 9)-(line 54,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900};\n    }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] {0.00427280075546, 0.0204117166709, 0.0362756163658, 0.0542113174239, 0.0773195272491,\n                0.000394468852816, 0.00366559696761, 0.00874649473311, 0.0166712508128, 0.0311798227954};\n    }\n",
        "begin_line": 64,
        "end_line": 68,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 66,col 9)-(line 67,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        super.setUp();\n        setTolerance(1e-9);\n    }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": " --------------------- Override tolerance  --------------",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 22)",
            "(line 74,col 9)-(line 74,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testParameterAccessors()",
        "snippet": "    @Test\n    public void testParameterAccessors() {\n        GammaDistribution distribution = (GammaDistribution) getDistribution();\n        Assert.assertEquals(4d, distribution.getAlpha(), 0);\n        Assert.assertEquals(2d, distribution.getBeta(), 0);\n    }\n",
        "begin_line": 78,
        "end_line": 83,
        "comment": "---------------------------- Additional test cases -------------------------",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 79)",
            "(line 81,col 9)-(line 81,col 60)",
            "(line 82,col 9)-(line 82,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testPreconditions()",
        "snippet": "    @Test\n    public void testPreconditions() {\n        try {\n            new GammaDistribution(0, 1);\n            Assert.fail(\"Expecting NotStrictlyPositiveException for alpha = 0\");\n        } catch (NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n        try {\n            new GammaDistribution(1, 0);\n            Assert.fail(\"Expecting NotStrictlyPositiveException for alpha = 0\");\n        } catch (NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n    }\n",
        "begin_line": 85,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 92,col 9)",
            "(line 93,col 9)-(line 98,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testProbabilities()",
        "snippet": "    @Test\n    public void testProbabilities() {\n        testProbability(-1.000, 4.0, 2.0, .0000);\n        testProbability(15.501, 4.0, 2.0, .9499);\n        testProbability(0.504, 4.0, 1.0, .0018);\n        testProbability(10.011, 1.0, 2.0, .9933);\n        testProbability(5.000, 2.0, 2.0, .7127);\n    }\n",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 49)",
            "(line 105,col 9)-(line 105,col 48)",
            "(line 106,col 9)-(line 106,col 49)",
            "(line 107,col 9)-(line 107,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testValues()",
        "snippet": "    @Test\n    public void testValues() {\n        testValue(15.501, 4.0, 2.0, .9499);\n        testValue(0.504, 4.0, 1.0, .0018);\n        testValue(10.011, 1.0, 2.0, .9933);\n        testValue(5.000, 2.0, 2.0, .7127);\n    }\n",
        "begin_line": 110,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 43)",
            "(line 115,col 9)-(line 115,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testProbability(double, double, double, double)",
        "snippet": "    private void testProbability(double x, double a, double b, double expected) {\n        GammaDistribution distribution = new GammaDistribution( a, b );\n        double actual = distribution.cumulativeProbability(x);\n        Assert.assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n    }\n",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 71)",
            "(line 120,col 9)-(line 120,col 62)",
            "(line 121,col 9)-(line 121,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testValue(double, double, double, double)",
        "snippet": "    private void testValue(double expected, double a, double b, double p) {\n        GammaDistribution distribution = new GammaDistribution( a, b );\n        double actual = distribution.inverseCumulativeProbability(p);\n        Assert.assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n    }\n",
        "begin_line": 124,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 71)",
            "(line 126,col 9)-(line 126,col 69)",
            "(line 127,col 9)-(line 127,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testDensity()",
        "snippet": "    @Test\n    public void testDensity() {\n        double[] x = new double[]{-0.1, 1e-6, 0.5, 1, 2, 5};\n        // R2.5: print(dgamma(x, shape=1, rate=1), digits=10)\n        checkDensity(1, 1, x, new double[]{0.000000000000, 0.999999000001, 0.606530659713, 0.367879441171, 0.135335283237, 0.006737946999});\n        // R2.5: print(dgamma(x, shape=2, rate=1), digits=10)\n        checkDensity(2, 1, x, new double[]{0.000000000000, 0.000000999999, 0.303265329856, 0.367879441171, 0.270670566473, 0.033689734995});\n        // R2.5: print(dgamma(x, shape=4, rate=1), digits=10)\n        checkDensity(4, 1, x, new double[]{0.000000000e+00, 1.666665000e-19, 1.263605541e-02, 6.131324020e-02, 1.804470443e-01, 1.403738958e-01});\n        // R2.5: print(dgamma(x, shape=4, rate=10), digits=10)\n        checkDensity(4, 10, x, new double[]{0.000000000e+00, 1.666650000e-15, 1.403738958e+00, 7.566654960e-02, 2.748204830e-05, 4.018228850e-17});\n        // R2.5: print(dgamma(x, shape=.1, rate=10), digits=10)\n        checkDensity(0.1, 10, x, new double[]{0.000000000e+00, 3.323953832e+04, 1.663849010e-03, 6.007786726e-06, 1.461647647e-10, 5.996008322e-24});\n        // R2.5: print(dgamma(x, shape=.1, rate=20), digits=10)\n        checkDensity(0.1, 20, x, new double[]{0.000000000e+00, 3.562489883e+04, 1.201557345e-05, 2.923295295e-10, 3.228910843e-19, 1.239484589e-45});\n        // R2.5: print(dgamma(x, shape=.1, rate=4), digits=10)\n        checkDensity(0.1, 4, x, new double[]{0.000000000e+00, 3.032938388e+04, 3.049322494e-02, 2.211502311e-03, 2.170613371e-05, 5.846590589e-11});\n        // R2.5: print(dgamma(x, shape=.1, rate=1), digits=10)\n        checkDensity(0.1, 1, x, new double[]{0.000000000e+00, 2.640334143e+04, 1.189704437e-01, 3.866916944e-02, 7.623306235e-03, 1.663849010e-04});\n    }\n",
        "begin_line": 130,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 60)",
            "(line 134,col 9)-(line 134,col 140)",
            "(line 136,col 9)-(line 136,col 140)",
            "(line 138,col 9)-(line 138,col 146)",
            "(line 140,col 9)-(line 140,col 147)",
            "(line 142,col 9)-(line 142,col 149)",
            "(line 144,col 9)-(line 144,col 149)",
            "(line 146,col 9)-(line 146,col 148)",
            "(line 148,col 9)-(line 148,col 148)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.checkDensity(double, double, double[], double[])",
        "snippet": "    private void checkDensity(double alpha, double rate, double[] x, double[] expected) {\n        GammaDistribution d = new GammaDistribution(alpha, 1 / rate);\n        for (int i = 0; i < x.length; i++) {\n            Assert.assertEquals(expected[i], d.density(x[i]), 1e-5);\n        }\n    }\n",
        "begin_line": 151,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 69)",
            "(line 153,col 9)-(line 155,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilityExtremes() {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 60)",
            "(line 161,col 9)-(line 161,col 83)",
            "(line 162,col 9)-(line 162,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMoments()",
        "snippet": "    @Test\n    public void testMoments() {\n        final double tol = 1e-9;\n        GammaDistribution dist;\n\n        dist = new GammaDistribution(1, 2);\n        Assert.assertEquals(dist.getNumericalMean(), 2, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), 4, tol);\n\n        dist = new GammaDistribution(1.1, 4.2);\n        Assert.assertEquals(dist.getNumericalMean(), 1.1d * 4.2d, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), 1.1d * 4.2d * 4.2d, tol);\n    }\n",
        "begin_line": 165,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 32)",
            "(line 168,col 9)-(line 168,col 31)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 61)",
            "(line 172,col 9)-(line 172,col 65)",
            "(line 174,col 9)-(line 174,col 47)",
            "(line 175,col 9)-(line 175,col 71)",
            "(line 176,col 9)-(line 176,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.logGamma(double)",
        "snippet": "    public static double logGamma(double x) {\n        /*\n         * This is a copy of\n         * double Gamma.logGamma(double)\n         * prior to MATH-849\n         */\n        double ret;\n\n        if (Double.isNaN(x) || (x <= 0.0)) {\n            ret = Double.NaN;\n        } else {\n            double sum = Gamma.lanczos(x);\n            double tmp = x + Gamma.LANCZOS_G + .5;\n            ret = ((x + .5) * FastMath.log(tmp)) - tmp +\n                HALF_LOG_2_PI + FastMath.log(sum / x);\n        }\n\n        return ret;\n    }\n",
        "begin_line": 181,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 19)",
            "(line 189,col 9)-(line 196,col 9)",
            "(line 198,col 9)-(line 198,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.density(double, double, double)",
        "snippet": "    public static double density(final double x, final double shape,\n                                 final double scale) {\n        /*\n         * This is a copy of\n         * double GammaDistribution.density(double)\n         * prior to MATH-753.\n         */\n        if (x < 0) {\n            return 0;\n        }\n        return FastMath.pow(x / scale, shape - 1) / scale *\n               FastMath.exp(-x / scale) / FastMath.exp(logGamma(shape));\n    }\n",
        "begin_line": 201,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 210,col 9)",
            "(line 211,col 9)-(line 212,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.doTestMath753(double, double, double, double, double, java.lang.String)",
        "snippet": "    private void doTestMath753(final double shape,\n        final double meanNoOF, final double sdNoOF,\n        final double meanOF, final double sdOF,\n        final String resourceName) throws IOException {\n        final GammaDistribution distribution = new GammaDistribution(shape, 1.0);\n        final SummaryStatistics statOld = new SummaryStatistics();\n        final SummaryStatistics statNewNoOF = new SummaryStatistics();\n        final SummaryStatistics statNewOF = new SummaryStatistics();\n\n        final InputStream resourceAsStream;\n        resourceAsStream = this.getClass().getResourceAsStream(resourceName);\n        Assert.assertNotNull(\"Could not find resource \" + resourceName,\n                             resourceAsStream);\n        final BufferedReader in;\n        in = new BufferedReader(new InputStreamReader(resourceAsStream));\n\n        try {\n            for (String line = in.readLine(); line != null; line = in\n                .readLine()) {\n                final String[] tokens = line.split(\", \");\n                Assert.assertTrue(\"expected two floating-point values\",\n                                  tokens.length == 2);\n                final double x = Double.parseDouble(tokens[0]);\n                final String msg = \"x = \" + x + \", shape = \" + shape +\n                                   \", scale = 1.0\";\n                final double expected = Double.parseDouble(tokens[1]);\n                final double ulp = FastMath.ulp(expected);\n                final double actualOld = density(x, shape, 1.0);\n                final double actualNew = distribution.density(x);\n                final double errOld, errNew;\n                errOld = FastMath.abs((actualOld - expected) / ulp);\n                errNew = FastMath.abs((actualNew - expected) / ulp);\n\n                if (Double.isNaN(actualOld) || Double.isInfinite(actualOld)) {\n                    Assert.assertFalse(msg, Double.isNaN(actualNew));\n                    Assert.assertFalse(msg, Double.isInfinite(actualNew));\n                    statNewOF.addValue(errNew);\n                } else {\n                    statOld.addValue(errOld);\n                    statNewNoOF.addValue(errNew);\n                }\n            }\n            if (statOld.getN() != 0) {\n                /*\n                 * If no overflow occurs, check that new implementation is\n                 * better than old one.\n                 */\n                final StringBuilder sb = new StringBuilder(\"shape = \");\n                sb.append(shape);\n                sb.append(\", scale = 1.0\\n\");\n                sb.append(\"Old implementation\\n\");\n                sb.append(\"------------------\\n\");\n                sb.append(statOld.toString());\n                sb.append(\"New implementation\\n\");\n                sb.append(\"------------------\\n\");\n                sb.append(statNewNoOF.toString());\n                final String msg = sb.toString();\n\n                final double oldMin = statOld.getMin();\n                final double newMin = statNewNoOF.getMin();\n                Assert.assertTrue(msg, newMin <= oldMin);\n\n                final double oldMax = statOld.getMax();\n                final double newMax = statNewNoOF.getMax();\n                Assert.assertTrue(msg, newMax <= oldMax);\n\n                final double oldMean = statOld.getMean();\n                final double newMean = statNewNoOF.getMean();\n                Assert.assertTrue(msg, newMean <= oldMean);\n\n                final double oldSd = statOld.getStandardDeviation();\n                final double newSd = statNewNoOF.getStandardDeviation();\n                Assert.assertTrue(msg, newSd <= oldSd);\n\n                Assert.assertTrue(msg, newMean <= meanNoOF);\n                Assert.assertTrue(msg, newSd <= sdNoOF);\n            }\n            if (statNewOF.getN() != 0) {\n                final double newMean = statNewOF.getMean();\n                final double newSd = statNewOF.getStandardDeviation();\n\n                final StringBuilder sb = new StringBuilder(\"shape = \");\n                sb.append(shape);\n                sb.append(\", scale = 1.0\");\n                sb.append(\", max. mean error (ulps) = \");\n                sb.append(meanOF);\n                sb.append(\", actual mean error (ulps) = \");\n                sb.append(newMean);\n                sb.append(\", max. sd of error (ulps) = \");\n                sb.append(sdOF);\n                sb.append(\", actual sd of error (ulps) = \");\n                sb.append(newSd);\n                final String msg = sb.toString();\n\n                Assert.assertTrue(msg, newMean <= meanOF);\n                Assert.assertTrue(msg, newSd <= sdOF);\n            }\n        } catch (IOException e) {\n            Assert.fail(e.getMessage());\n        } finally {\n            in.close();\n        }\n    }\n",
        "begin_line": 222,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 81)",
            "(line 227,col 9)-(line 227,col 66)",
            "(line 228,col 9)-(line 228,col 70)",
            "(line 229,col 9)-(line 229,col 68)",
            "(line 231,col 9)-(line 231,col 43)",
            "(line 232,col 9)-(line 232,col 77)",
            "(line 233,col 9)-(line 234,col 47)",
            "(line 235,col 9)-(line 235,col 32)",
            "(line 236,col 9)-(line 236,col 73)",
            "(line 238,col 9)-(line 323,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape1()",
        "snippet": "    @Test\n    public void testMath753Shape1() throws IOException {\n        doTestMath753(1.0, 1.5, 0.5, 0.0, 0.0, \"gamma-distribution-shape-1.csv\");\n    }\n",
        "begin_line": 327,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape8()",
        "snippet": "    @Test\n    public void testMath753Shape8() throws IOException {\n        doTestMath753(8.0, 1.5, 1.0, 0.0, 0.0, \"gamma-distribution-shape-8.csv\");\n    }\n",
        "begin_line": 332,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape10()",
        "snippet": "    @Test\n    public void testMath753Shape10() throws IOException {\n        doTestMath753(10.0, 1.0, 1.0, 0.0, 0.0, \"gamma-distribution-shape-10.csv\");\n    }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape100()",
        "snippet": "    @Test\n    public void testMath753Shape100() throws IOException {\n        doTestMath753(100.0, 1.5, 1.0, 0.0, 0.0, \"gamma-distribution-shape-100.csv\");\n    }\n",
        "begin_line": 342,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape142()",
        "snippet": "    @Test\n    public void testMath753Shape142() throws IOException {\n        doTestMath753(142.0, 0.5, 1.5, 40.0, 40.0, \"gamma-distribution-shape-142.csv\");\n    }\n",
        "begin_line": 347,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.GammaDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape1000()",
        "snippet": "    @Test\n    public void testMath753Shape1000() throws IOException {\n        doTestMath753(1000.0, 1.0, 1.0, 160.0, 220.0, \"gamma-distribution-shape-1000.csv\");\n    }\n",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public LogNormalDistribution makeDistribution() {\n        return new LogNormalDistribution(2.1, 1.4);\n    }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": " Creates the default real distribution instance to use in tests. ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R\n        return new double[] { -2.226325228634938, -1.156887023657177,\n                              -0.643949578356075, -0.2027950777320613,\n                              0.305827808237559, 6.42632522863494,\n                              5.35688702365718, 4.843949578356074,\n                              4.40279507773206, 3.89417219176244 };\n    }\n",
        "begin_line": 43,
        "end_line": 51,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 46,col 9)-(line 50,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] { 0, 0, 0, 0, 0.00948199951485, 0.432056525076,\n                              0.381648158697, 0.354555726206, 0.329513316888,\n                              0.298422824228 };\n    }\n",
        "begin_line": 54,
        "end_line": 59,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 56,col 9)-(line 58,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] { 0, 0, 0, 0, 0.0594218160072, 0.0436977691036,\n                              0.0508364857798, 0.054873528325, 0.0587182664085,\n                              0.0636229042785 };\n    }\n",
        "begin_line": 62,
        "end_line": 67,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 64,col 9)-(line 66,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.makeInverseCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeInverseCumulativeTestPoints() {\n        // Exclude the test points less than zero, as they have cumulative\n        // probability of zero, meaning the inverse returns zero, and not the\n        // points less than zero.\n        double[] points = makeCumulativeTestValues();\n        double[] points2 = new double[points.length - 4];\n        System.arraycopy(points, 4, points2, 0, points2.length - 4);\n        return points2;\n        //return Arrays.copyOfRange(points, 4, points.length - 4);\n    }\n",
        "begin_line": 73,
        "end_line": 83,
        "comment": "\n     * Creates the default inverse cumulative probability distribution test\n     * input values.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 79,col 57)",
            "(line 80,col 9)-(line 80,col 68)",
            "(line 81,col 9)-(line 81,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.makeInverseCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeInverseCumulativeTestValues() {\n        // Exclude the test points less than zero, as they have cumulative\n        // probability of zero, meaning the inverse returns zero, and not the\n        // points less than zero.\n        double[] points = makeCumulativeTestPoints();\n        double[] points2 = new double[points.length - 4];\n        System.arraycopy(points, 4, points2, 0, points2.length - 4);\n        return points2;\n        //return Arrays.copyOfRange(points, 1, points.length - 4);\n    }\n",
        "begin_line": 89,
        "end_line": 99,
        "comment": "\n     * Creates the default inverse cumulative probability test expected\n     * values.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 57)",
            "(line 96,col 9)-(line 96,col 68)",
            "(line 97,col 9)-(line 97,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        super.setUp();\n        setTolerance(LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n    }\n",
        "begin_line": 102,
        "end_line": 106,
        "comment": " --------------------- Override tolerance  --------------",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 22)",
            "(line 105,col 9)-(line 105,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.verifyQuantiles()",
        "snippet": "    private void verifyQuantiles() {\n        LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();\n        double mu = distribution.getScale();\n        double sigma = distribution.getShape();\n        setCumulativeTestPoints( new double[] { mu - 2 *sigma, mu - sigma,\n                                                mu, mu + sigma, mu + 2 * sigma,\n                                                mu + 3 * sigma,mu + 4 * sigma,\n                                                mu + 5 * sigma });\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 110,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 86)",
            "(line 112,col 9)-(line 112,col 44)",
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 117,col 66)",
            "(line 118,col 9)-(line 118,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testQuantiles()",
        "snippet": "    @Test\n    public void testQuantiles() {\n        setCumulativeTestValues(new double[] {0, 0.0396495152787,\n                                              0.16601209243, 0.272533253269,\n                                              0.357618409638, 0.426488363093,\n                                              0.483255136841, 0.530823013877});\n        setDensityTestValues(new double[] {0, 0.0873055825147, 0.0847676303432,\n                                           0.0677935186237, 0.0544105523058,\n                                           0.0444614628804, 0.0369750288945,\n                                           0.0312206409653});\n        verifyQuantiles();\n        verifyDensities();\n\n        setDistribution(new LogNormalDistribution(0, 1));\n        setCumulativeTestValues(new double[] {0, 0, 0, 0.5, 0.755891404214,\n                                              0.864031392359, 0.917171480998,\n                                              0.946239689548});\n        setDensityTestValues(new double[] {0, 0, 0, 0.398942280401,\n                                           0.156874019279, 0.07272825614,\n                                           0.0381534565119, 0.0218507148303});\n        verifyQuantiles();\n        verifyDensities();\n\n        setDistribution(new LogNormalDistribution(0, 0.1));\n        setCumulativeTestValues(new double[] {0, 0, 0, 1.28417563064e-117,\n                                              1.39679883412e-58,\n                                              1.09839325447e-33,\n                                              2.52587961726e-20,\n                                              2.0824223487e-12});\n        setDensityTestValues(new double[] {0, 0, 0, 2.96247992535e-114,\n                                           1.1283370232e-55, 4.43812313223e-31,\n                                           5.85346445002e-18,\n                                           2.9446618076e-10});\n        verifyQuantiles();\n        verifyDensities();\n    }\n",
        "begin_line": 121,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 126,col 79)",
            "(line 127,col 9)-(line 130,col 61)",
            "(line 131,col 9)-(line 131,col 26)",
            "(line 132,col 9)-(line 132,col 26)",
            "(line 134,col 9)-(line 134,col 57)",
            "(line 135,col 9)-(line 137,col 63)",
            "(line 138,col 9)-(line 140,col 78)",
            "(line 141,col 9)-(line 141,col 26)",
            "(line 142,col 9)-(line 142,col 26)",
            "(line 144,col 9)-(line 144,col 59)",
            "(line 145,col 9)-(line 149,col 65)",
            "(line 150,col 9)-(line 153,col 62)",
            "(line 154,col 9)-(line 154,col 26)",
            "(line 155,col 9)-(line 155,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilityExtremes() {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(\n                new double[] {0, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 60)",
            "(line 161,col 9)-(line 162,col 60)",
            "(line 163,col 9)-(line 163,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale()",
        "snippet": "    @Test\n    public void testGetScale() {\n        LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();\n        Assert.assertEquals(2.1, distribution.getScale(), 0);\n    }\n",
        "begin_line": 166,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 86)",
            "(line 169,col 9)-(line 169,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape()",
        "snippet": "    @Test\n    public void testGetShape() {\n        LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();\n        Assert.assertEquals(1.4, distribution.getShape(), 0);\n    }\n",
        "begin_line": 172,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 86)",
            "(line 175,col 9)-(line 175,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testPreconditions()",
        "snippet": "    @Test(expected=NotStrictlyPositiveException.class)\n    public void testPreconditions() {\n        new LogNormalDistribution(1, 0);\n    }\n",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensity()",
        "snippet": "    @Test\n    public void testDensity() {\n        double [] x = new double[]{-2, -1, 0, 1, 2};\n        // R 2.13: print(dlnorm(c(-2,-1,0,1,2)), digits=10)\n        checkDensity(0, 1, x, new double[] { 0.0000000000, 0.0000000000,\n                                             0.0000000000, 0.3989422804,\n                                             0.1568740193 });\n        // R 2.13: print(dlnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)\n        checkDensity(1.1, 1, x, new double[] { 0.0000000000, 0.0000000000,\n                                               0.0000000000, 0.2178521770,\n                                               0.1836267118});\n    }\n",
        "begin_line": 183,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 52)",
            "(line 187,col 9)-(line 189,col 61)",
            "(line 191,col 9)-(line 193,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.checkDensity(double, double, double[], double[])",
        "snippet": "    private void checkDensity(double scale, double shape, double[] x,\n        double[] expected) {\n        LogNormalDistribution d = new LogNormalDistribution(scale, shape);\n        for (int i = 0; i < x.length; i++) {\n            Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);\n        }\n    }\n",
        "begin_line": 196,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 74)",
            "(line 199,col 9)-(line 201,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testExtremeValues()",
        "snippet": "    @Test\n    public void testExtremeValues() {\n        LogNormalDistribution d = new LogNormalDistribution(0, 1);\n        for (int i = 0; i < 1e5; i++) { // make sure no convergence exception\n            double upperTail = d.cumulativeProbability(i);\n            if (i <= 72) { // make sure not top-coded\n                Assert.assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                Assert.assertTrue(upperTail > 0.99999);\n            }\n        }\n\n        Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n        Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n        Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n        Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n    }\n",
        "begin_line": 208,
        "end_line": 225,
        "comment": "\n     * Check to make sure top-coding of extreme values works correctly.\n     * Verifies fixes for JIRA MATH-167, MATH-414\n     ",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 66)",
            "(line 211,col 9)-(line 219,col 9)",
            "(line 221,col 9)-(line 221,col 77)",
            "(line 222,col 9)-(line 222,col 78)",
            "(line 223,col 9)-(line 223,col 85)",
            "(line 224,col 9)-(line 224,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.LogNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.LogNormalDistributionTest.testMeanVariance()",
        "snippet": "    @Test\n    public void testMeanVariance() {\n        final double tol = 1e-9;\n        LogNormalDistribution dist;\n\n        dist = new LogNormalDistribution(0, 1);\n        Assert.assertEquals(dist.getNumericalMean(), 1.6487212707001282, tol);\n        Assert.assertEquals(dist.getNumericalVariance(),\n                            4.670774270471604, tol);\n\n        dist = new LogNormalDistribution(2.2, 1.4);\n        Assert.assertEquals(dist.getNumericalMean(), 24.046753552064498, tol);\n        Assert.assertEquals(dist.getNumericalVariance(),\n                            3526.913651880464, tol);\n\n        dist = new LogNormalDistribution(-2000.9, 10.4);\n        Assert.assertEquals(dist.getNumericalMean(), 0.0, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), 0.0, tol);\n    }\n",
        "begin_line": 227,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 32)",
            "(line 230,col 9)-(line 230,col 35)",
            "(line 232,col 9)-(line 232,col 47)",
            "(line 233,col 9)-(line 233,col 78)",
            "(line 234,col 9)-(line 235,col 52)",
            "(line 237,col 9)-(line 237,col 51)",
            "(line 238,col 9)-(line 238,col 78)",
            "(line 239,col 9)-(line 240,col 52)",
            "(line 242,col 9)-(line 242,col 56)",
            "(line 243,col 9)-(line 243,col 63)",
            "(line 244,col 9)-(line 244,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public NormalDistribution makeDistribution() {\n        return new NormalDistribution(2.1, 1.4);\n    }\n",
        "begin_line": 36,
        "end_line": 39,
        "comment": " Creates the default real distribution instance to use in tests. ",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R\n        return new double[] {-2.226325228634938d, -1.156887023657177d, -0.643949578356075d, -0.2027950777320613d, 0.305827808237559d,\n                6.42632522863494d, 5.35688702365718d, 4.843949578356074d, 4.40279507773206d, 3.89417219176244d};\n    }\n",
        "begin_line": 42,
        "end_line": 47,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 45,col 9)-(line 46,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n                0.990d, 0.975d, 0.950d, 0.900d};\n    }\n",
        "begin_line": 50,
        "end_line": 54,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 52,col 9)-(line 53,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] {0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380,\n                0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380};\n    }\n",
        "begin_line": 57,
        "end_line": 61,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 59,col 9)-(line 60,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        super.setUp();\n        setTolerance(defaultTolerance);\n    }\n",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 22)",
            "(line 68,col 9)-(line 68,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.verifyQuantiles()",
        "snippet": "    private void verifyQuantiles() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        double mu = distribution.getMean();\n        double sigma = distribution.getStandardDeviation();\n        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma,\n                mu, mu + sigma, mu + 2 * sigma,  mu + 3 * sigma, mu + 4 * sigma,\n                mu + 5 * sigma});\n        // Quantiles computed using R (same as Mathematica)\n        setCumulativeTestValues(new double[] {0.02275013194817921, 0.158655253931457, 0.5, 0.841344746068543,\n                0.977249868051821, 0.99865010196837, 0.999968328758167,  0.999999713348428});\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 81)",
            "(line 75,col 9)-(line 75,col 43)",
            "(line 76,col 9)-(line 76,col 59)",
            "(line 77,col 9)-(line 79,col 33)",
            "(line 81,col 9)-(line 82,col 93)",
            "(line 83,col 9)-(line 83,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testQuantiles()",
        "snippet": "    @Test\n    public void testQuantiles() {\n        setDensityTestValues(new double[] {0.0385649760808, 0.172836231799, 0.284958771715, 0.172836231799, 0.0385649760808,\n                0.00316560600853, 9.55930184035e-05, 1.06194251052e-06});\n        verifyQuantiles();\n        verifyDensities();\n\n        setDistribution(new NormalDistribution(0, 1));\n        setDensityTestValues(new double[] {0.0539909665132, 0.241970724519, 0.398942280401, 0.241970724519, 0.0539909665132,\n                0.00443184841194, 0.000133830225765, 1.48671951473e-06});\n        verifyQuantiles();\n        verifyDensities();\n\n        setDistribution(new NormalDistribution(0, 0.1));\n        setDensityTestValues(new double[] {0.539909665132, 2.41970724519, 3.98942280401, 2.41970724519,\n                0.539909665132, 0.0443184841194, 0.00133830225765, 1.48671951473e-05});\n        verifyQuantiles();\n        verifyDensities();\n    }\n",
        "begin_line": 86,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 89,col 73)",
            "(line 90,col 9)-(line 90,col 26)",
            "(line 91,col 9)-(line 91,col 26)",
            "(line 93,col 9)-(line 93,col 54)",
            "(line 94,col 9)-(line 95,col 73)",
            "(line 96,col 9)-(line 96,col 26)",
            "(line 97,col 9)-(line 97,col 26)",
            "(line 99,col 9)-(line 99,col 56)",
            "(line 100,col 9)-(line 101,col 87)",
            "(line 102,col 9)-(line 102,col 26)",
            "(line 103,col 9)-(line 103,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilityExtremes() {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(\n                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 106,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 110,col 83)",
            "(line 111,col 9)-(line 111,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean()",
        "snippet": "    @Test\n    public void testGetMean() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        Assert.assertEquals(2.1, distribution.getMean(), 0);\n    }\n",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 81)",
            "(line 117,col 9)-(line 117,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation()",
        "snippet": "    @Test\n    public void testGetStandardDeviation() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        Assert.assertEquals(1.4, distribution.getStandardDeviation(), 0);\n    }\n",
        "begin_line": 120,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 81)",
            "(line 123,col 9)-(line 123,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testPreconditions()",
        "snippet": "    @Test(expected=NotStrictlyPositiveException.class)\n    public void testPreconditions() {\n        new NormalDistribution(1, 0);\n    }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testDensity()",
        "snippet": "    @Test\n    public void testDensity() {\n        double [] x = new double[]{-2, -1, 0, 1, 2};\n        // R 2.5: print(dnorm(c(-2,-1,0,1,2)), digits=10)\n        checkDensity(0, 1, x, new double[]{0.05399096651, 0.24197072452, 0.39894228040, 0.24197072452, 0.05399096651});\n        // R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)\n        checkDensity(1.1, 1, x, new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});\n    }\n",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 52)",
            "(line 135,col 9)-(line 135,col 119)",
            "(line 137,col 9)-(line 137,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.checkDensity(double, double, double[], double[])",
        "snippet": "    private void checkDensity(double mean, double sd, double[] x, double[] expected) {\n        NormalDistribution d = new NormalDistribution(mean, sd);\n        for (int i = 0; i < x.length; i++) {\n            Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);\n        }\n    }\n",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 144,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testExtremeValues()",
        "snippet": "    @Test\n    public void testExtremeValues() {\n        NormalDistribution distribution = new NormalDistribution(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded\n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                Assert.assertTrue(lowerTail > 0.0d);\n                Assert.assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                Assert.assertTrue(lowerTail < 0.00001);\n                Assert.assertTrue(upperTail > 0.99999);\n            }\n        }\n\n        Assert.assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n        Assert.assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n        Assert.assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n        Assert.assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n    }\n",
        "begin_line": 151,
        "end_line": 173,
        "comment": "\n     * Check to make sure top-coding of extreme values works correctly.\n     * Verifies fixes for JIRA MATH-167, MATH-414\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 71)",
            "(line 154,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 169,col 88)",
            "(line 170,col 9)-(line 170,col 89)",
            "(line 171,col 9)-(line 171,col 96)",
            "(line 172,col 9)-(line 172,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testMath280()",
        "snippet": "    @Test\n    public void testMath280() {\n        NormalDistribution normal = new NormalDistribution(0,1);\n        double result = normal.inverseCumulativeProbability(0.9986501019683698);\n        Assert.assertEquals(3.0, result, defaultTolerance);\n        result = normal.inverseCumulativeProbability(0.841344746068543);\n        Assert.assertEquals(1.0, result, defaultTolerance);\n        result = normal.inverseCumulativeProbability(0.9999683287581673);\n        Assert.assertEquals(4.0, result, defaultTolerance);\n        result = normal.inverseCumulativeProbability(0.9772498680518209);\n        Assert.assertEquals(2.0, result, defaultTolerance);\n    }\n",
        "begin_line": 175,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 64)",
            "(line 178,col 9)-(line 178,col 80)",
            "(line 179,col 9)-(line 179,col 59)",
            "(line 180,col 9)-(line 180,col 72)",
            "(line 181,col 9)-(line 181,col 59)",
            "(line 182,col 9)-(line 182,col 73)",
            "(line 183,col 9)-(line 183,col 59)",
            "(line 184,col 9)-(line 184,col 73)",
            "(line 185,col 9)-(line 185,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.NormalDistributionTest.testMoments()",
        "snippet": "    @Test\n    public void testMoments() {\n        final double tol = 1e-9;\n        NormalDistribution dist;\n\n        dist = new NormalDistribution(0, 1);\n        Assert.assertEquals(dist.getNumericalMean(), 0, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), 1, tol);\n\n        dist = new NormalDistribution(2.2, 1.4);\n        Assert.assertEquals(dist.getNumericalMean(), 2.2, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), 1.4 * 1.4, tol);\n\n        dist = new NormalDistribution(-2000.9, 10.4);\n        Assert.assertEquals(dist.getNumericalMean(), -2000.9, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), 10.4 * 10.4, tol);\n    }\n",
        "begin_line": 188,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 32)",
            "(line 191,col 9)-(line 191,col 32)",
            "(line 193,col 9)-(line 193,col 44)",
            "(line 194,col 9)-(line 194,col 61)",
            "(line 195,col 9)-(line 195,col 65)",
            "(line 197,col 9)-(line 197,col 48)",
            "(line 198,col 9)-(line 198,col 63)",
            "(line 199,col 9)-(line 199,col 73)",
            "(line 201,col 9)-(line 201,col 53)",
            "(line 202,col 9)-(line 202,col 67)",
            "(line 203,col 9)-(line 203,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract RealDistribution makeDistribution();\n",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeCumulativeTestPoints();\n",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Creates the default cumulative probability test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 107,
        "end_line": 107,
        "comment": " Creates the default cumulative probability test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeDensityTestValues()",
        "snippet": "    public abstract double[] makeDensityTestValues();\n",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Creates the default density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public double[] makeInverseCumulativeTestPoints() {\n        return makeCumulativeTestValues();\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public double[] makeInverseCumulativeTestValues() {\n        return makeCumulativeTestPoints();\n    }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        distribution = makeDistribution();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();\n        densityTestValues = makeDensityTestValues();\n    }\n",
        "begin_line": 129,
        "end_line": 137,
        "comment": "\n     * Setup sets all test instance data to default values\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 42)",
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 58)",
            "(line 134,col 9)-(line 134,col 72)",
            "(line 135,col 9)-(line 135,col 72)",
            "(line 136,col 9)-(line 136,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() {\n        distribution = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;\n        densityTestValues = null;\n    }\n",
        "begin_line": 142,
        "end_line": 150,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 28)",
            "(line 145,col 9)-(line 145,col 36)",
            "(line 146,col 9)-(line 146,col 36)",
            "(line 147,col 9)-(line 147,col 43)",
            "(line 148,col 9)-(line 148,col 43)",
            "(line 149,col 9)-(line 149,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() {\n        // verify cumulativeProbability(double)\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \"\n                + cumulativeTestPoints[i], cumulativeTestValues[i],\n                distribution.cumulativeProbability(cumulativeTestPoints[i]),\n                getTolerance());\n        }\n        // verify cumulativeProbability(double, double)\n        // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            for (int j = 0; j < cumulativeTestPoints.length; j++) {\n                if (cumulativeTestPoints[i] <= cumulativeTestPoints[j]) {\n                    TestUtils.assertEquals(cumulativeTestValues[j] - cumulativeTestValues[i],\n                        distribution.cumulativeProbability(cumulativeTestPoints[i], cumulativeTestPoints[j]),\n                        getTolerance());\n                } else {\n                    try {\n                        distribution.cumulativeProbability(cumulativeTestPoints[i], cumulativeTestPoints[j]);\n                    } catch (NumberIsTooLargeException e) {\n                        continue;\n                    }\n                    Assert.fail(\"distribution.cumulativeProbability(double, double) should have thrown an exception that second argument is too large\");\n                }\n            }\n        }\n    }\n",
        "begin_line": 158,
        "end_line": 184,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 165,col 9)",
            "(line 168,col 9)-(line 183,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n                 distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]),\n                 getTolerance());\n        }\n    }\n",
        "begin_line": 190,
        "end_line": 197,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.verifyDensities()",
        "snippet": "    protected void verifyDensities() {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect probability density value returned for \"\n                + cumulativeTestPoints[i], densityTestValues[i],\n                 distribution.density(cumulativeTestPoints[i]),\n                 getTolerance());\n        }\n    }\n",
        "begin_line": 202,
        "end_line": 209,
        "comment": "\n     * Verifies that density calculations match expected values\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 208,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    @Test\n    public void testCumulativeProbabilities() {\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 217,
        "end_line": 220,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilities() {\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 226,
        "end_line": 229,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testDensities()",
        "snippet": "    @Test\n    public void testDensities() {\n        verifyDensities();\n    }\n",
        "begin_line": 235,
        "end_line": 238,
        "comment": "\n     * Verifies that density calculations return expected values\n     * for default test instance data\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testConsistency()",
        "snippet": "    @Test\n    public void testConsistency() {\n        for (int i=1; i < cumulativeTestPoints.length; i++) {\n\n            // check that cdf(x, x) = 0\n            // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n            TestUtils.assertEquals(0d,\n               distribution.cumulativeProbability\n                 (cumulativeTestPoints[i], cumulativeTestPoints[i]), tolerance);\n\n            // check that P(a < X <= b) = P(X <= b) - P(X <= a)\n            double upper = FastMath.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double lower = FastMath.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double diff = distribution.cumulativeProbability(upper) -\n                distribution.cumulativeProbability(lower);\n            // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n            double direct = distribution.cumulativeProbability(lower, upper);\n            TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\"\n                    + lower + \",\" + upper + \")\", diff, direct, tolerance);\n        }\n    }\n",
        "begin_line": 243,
        "end_line": 263,
        "comment": "\n     * Verifies that probability computations are consistent\n     ",
        "child_ranges": [
            "(line 245,col 9)-(line 262,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    @Test\n    public void testIllegalArguments() {\n        try {\n            // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n            distribution.cumulativeProbability(1, 0);\n            Assert.fail(\"Expecting MathIllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            Assert.fail(\"Expecting MathIllegalArgumentException for p = -1\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            Assert.fail(\"Expecting MathIllegalArgumentException for p = 2\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 268,
        "end_line": 289,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 282,col 9)",
            "(line 283,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testSampling()",
        "snippet": "    @Test\n    public void testSampling() {\n        final int sampleSize = 1000;\n        distribution.reseedRandomGenerator(1000); // Use fixed seed\n        double[] sample = distribution.sample(sampleSize);\n        double[] quartiles = TestUtils.getDistributionQuartiles(distribution);\n        double[] expected = {250, 250, 250, 250};\n        long[] counts = new long[4];\n        for (int i = 0; i < sampleSize; i++) {\n            TestUtils.updateCounts(sample[i], counts, quartiles);\n        }\n        TestUtils.assertChiSquareAccept(expected, counts, 0.001);\n    }\n",
        "begin_line": 294,
        "end_line": 306,
        "comment": "\n     * Test sampling\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 36)",
            "(line 297,col 9)-(line 297,col 49)",
            "(line 298,col 9)-(line 298,col 58)",
            "(line 299,col 9)-(line 299,col 78)",
            "(line 300,col 9)-(line 300,col 49)",
            "(line 301,col 9)-(line 301,col 36)",
            "(line 302,col 9)-(line 304,col 9)",
            "(line 305,col 9)-(line 305,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testDensityIntegrals()",
        "snippet": "    @Test\n    public void testDensityIntegrals() {\n        final double tol = 1.0e-9;\n        final BaseAbstractUnivariateIntegrator integrator =\n            new IterativeLegendreGaussIntegrator(5, 1.0e-12, 1.0e-10);\n        final UnivariateFunction d = new UnivariateFunction() {\n            public double value(double x) {\n                return distribution.density(x);\n            }\n        };\n        final ArrayList<Double> integrationTestPoints = new ArrayList<Double>();\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            if (Double.isNaN(cumulativeTestValues[i]) ||\n                    cumulativeTestValues[i] < 1.0e-5 ||\n                    cumulativeTestValues[i] > 1 - 1.0e-5) {\n                continue; // exclude integrals outside domain.\n            }\n            integrationTestPoints.add(cumulativeTestPoints[i]);\n        }\n        Collections.sort(integrationTestPoints);\n        for (int i = 1; i < integrationTestPoints.size(); i++) {\n            Assert.assertEquals(\n                    distribution.cumulativeProbability(  // FIXME @4.0 when rename happens\n                            integrationTestPoints.get(0), integrationTestPoints.get(i)),\n                            integrator.integrate(\n                                    1000000, // Triangle integrals are very slow to converge\n                                    d, integrationTestPoints.get(0),\n                                    integrationTestPoints.get(i)), tol);\n        }\n    }\n",
        "begin_line": 316,
        "end_line": 345,
        "comment": "\n     * Verify that density integrals match the distribution.\n     * The (filtered, sorted) cumulativeTestPoints array is used to source\n     * integration limits. The integral of the density (estimated using a\n     * Legendre-Gauss integrator) is compared with the cdf over the same\n     * interval. Test points outside of the domain of the density function\n     * are discarded.\n     ",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 34)",
            "(line 319,col 9)-(line 320,col 70)",
            "(line 321,col 9)-(line 325,col 10)",
            "(line 326,col 9)-(line 326,col 80)",
            "(line 327,col 9)-(line 334,col 9)",
            "(line 335,col 9)-(line 335,col 48)",
            "(line 336,col 9)-(line 344,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.Anonymous-b02e3a45-9eeb-4e68-9e5d-e99cb9aff56d.value(double)",
        "snippet": "            public double value(double x) {\n                return distribution.density(x);\n            }\n",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 323,col 17)-(line 323,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive()",
        "snippet": "    @Test\n    public void testIsSupportLowerBoundInclusive() {\n        final double lowerBound = distribution.getSupportLowerBound();\n        double result = Double.NaN;\n        result = distribution.density(lowerBound);\n        Assert.assertEquals(\n                !Double.isInfinite(lowerBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportLowerBoundInclusive());\n         \n    }\n",
        "begin_line": 351,
        "end_line": 361,
        "comment": "\n     * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound\n     * is finite and density is non-NaN, non-infinite there.\n     ",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 70)",
            "(line 354,col 9)-(line 354,col 35)",
            "(line 355,col 9)-(line 355,col 50)",
            "(line 356,col 9)-(line 359,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive()",
        "snippet": "    @Test\n    public void testIsSupportUpperBoundInclusive() {\n        final double upperBound = distribution.getSupportUpperBound();\n        double result = Double.NaN;\n        result = distribution.density(upperBound);\n        Assert.assertEquals(\n                !Double.isInfinite(upperBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportUpperBoundInclusive());\n         \n    }\n",
        "begin_line": 367,
        "end_line": 377,
        "comment": "\n     * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound\n     * is finite and density is non-NaN, non-infinite there.\n     ",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 70)",
            "(line 370,col 9)-(line 370,col 35)",
            "(line 371,col 9)-(line 371,col 50)",
            "(line 372,col 9)-(line 375,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testDistributionClone()",
        "snippet": "    @Test\n    public void testDistributionClone()\n        throws IOException,\n               ClassNotFoundException {\n        // Construct a distribution and initialize its internal random\n        // generator, using a fixed seed for deterministic results.\n        distribution.reseedRandomGenerator(123);\n        distribution.sample();\n\n        // Clone the distribution.\n        final RealDistribution cloned = deepClone();\n\n        // Make sure they still produce the same samples.\n        final double s1 = distribution.sample();\n        final double s2 = cloned.sample();\n        Assert.assertEquals(s1, s2, 0d);\n    }\n",
        "begin_line": 379,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 48)",
            "(line 386,col 9)-(line 386,col 30)",
            "(line 389,col 9)-(line 389,col 52)",
            "(line 392,col 9)-(line 392,col 48)",
            "(line 393,col 9)-(line 393,col 42)",
            "(line 394,col 9)-(line 394,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected double[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setCumulativeTestPoints(double[])",
        "snippet": "    protected void setCumulativeTestPoints(double[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 408,
        "end_line": 410,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 415,
        "end_line": 417,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 422,
        "end_line": 424,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getDensityTestValues()",
        "snippet": "    protected double[] getDensityTestValues() {\n        return densityTestValues;\n    }\n",
        "begin_line": 426,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setDensityTestValues(double[])",
        "snippet": "    protected void setDensityTestValues(double[] densityTestValues) {\n        this.densityTestValues = densityTestValues;\n    }\n",
        "begin_line": 430,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getDistribution()",
        "snippet": "    protected RealDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setDistribution(org.apache.commons.math3.distribution.RealDistribution)",
        "snippet": "    protected void setDistribution(RealDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 458,
        "end_line": 460,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected double[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 465,
        "end_line": 467,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setInverseCumulativeTestValues(double[])",
        "snippet": "    protected void setInverseCumulativeTestValues(double[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 479,
        "end_line": 481,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 486,
        "end_line": 488,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.NormalDistributionTest",
            "org.apache.commons.math3.distribution.GammaDistributionTest",
            "org.apache.commons.math3.distribution.LogNormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.deepClone()",
        "snippet": "    private RealDistribution deepClone()\n        throws IOException,\n               ClassNotFoundException {\n        // Serialize to byte array.\n        final ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n        final ObjectOutputStream oOut = new ObjectOutputStream(bOut);\n        oOut.writeObject(distribution);\n        final byte[] data = bOut.toByteArray();\n\n        // Deserialize from byte array.\n        final ByteArrayInputStream bIn = new ByteArrayInputStream(data);\n        final ObjectInputStream oIn = new ObjectInputStream(bIn);\n        final Object clone = oIn.readObject();\n        oIn.close();\n\n        return (RealDistribution) clone;\n    }\n",
        "begin_line": 493,
        "end_line": 509,
        "comment": "\n     * Serialization and deserialization loop of the {@link #distribution}.\n     ",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 71)",
            "(line 498,col 9)-(line 498,col 69)",
            "(line 499,col 9)-(line 499,col 39)",
            "(line 500,col 9)-(line 500,col 47)",
            "(line 503,col 9)-(line 503,col 72)",
            "(line 504,col 9)-(line 504,col 65)",
            "(line 505,col 9)-(line 505,col 46)",
            "(line 506,col 9)-(line 506,col 20)",
            "(line 508,col 9)-(line 508,col 40)"
        ]
    }
]