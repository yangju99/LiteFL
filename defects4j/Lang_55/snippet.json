[
    {
        "name": "StopWatch.suspend#175",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.suspend()",
        "snippet": "    public void suspend() {\n        if(this.runningState != STATE_RUNNING) {\n            throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n        }\n        stopTime = System.currentTimeMillis();\n        this.runningState = STATE_SUSPENDED;\n    }\n",
        "begin_line": 175,
        "end_line": 181,
        "comment": "\n     * <p>Suspend the stopwatch for later resumption.</p>\n     * \n     * <p>This method suspends the watch until it is resumed. The watch will not include\n     * time between the suspend and resume calls in the total time.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not currently running.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "StopWatch.getTime#208",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.getTime()",
        "snippet": "    public long getTime() {\n        if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {\n            return this.stopTime - this.startTime;\n        } else\n        if(this.runningState == STATE_UNSTARTED) {\n            return 0;\n        } else\n        if(this.runningState == STATE_RUNNING) {\n            return System.currentTimeMillis() - this.startTime;\n        }\n        throw new RuntimeException(\"Illegal running state has occured. \");\n    }\n",
        "begin_line": 208,
        "end_line": 219,
        "comment": "\n     * <p>Get the time on the stopwatch.</p>\n     * \n     * <p>This is either the time between the start and the moment this method \n     * is called, or the amount of time between start and stop.</p>\n     * \n     * @return the time in milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StopWatch.stop#114",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.stop()",
        "snippet": "    public void stop() {\n        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n            stopTime = System.currentTimeMillis();\n        this.runningState = STATE_STOPPED;\n    }\n",
        "begin_line": 114,
        "end_line": 120,
        "comment": "\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StopWatch.StopWatch#84",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.StopWatch()",
        "snippet": "    public StopWatch() {\n        super();\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p>Constructor.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "StopWatch.start#95",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.start()",
        "snippet": "    public void start() {\n        if(this.runningState == STATE_STOPPED) {\n            throw new IllegalStateException(\"Stopwatch must be reset before being restarted. \");\n        }\n        if(this.runningState != STATE_UNSTARTED) {\n            throw new IllegalStateException(\"Stopwatch already started. \");\n        }\n        stopTime = -1;\n        startTime = System.currentTimeMillis();\n        this.runningState = STATE_RUNNING;\n    }\n",
        "begin_line": 95,
        "end_line": 105,
        "comment": "\n     * <p>Start the stopwatch.</p>\n     * \n     * <p>This method starts a new timing session, clearing any previous values.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is already running.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    }
]