[
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StopWatchTest.class);\n        suite.setName(\"StopWatch Tests\");\n        return suite;\n    }\n",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 61)",
            "(line 38,col 9)-(line 38,col 41)",
            "(line 39,col 9)-(line 39,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.StopWatchTest(java.lang.String)",
        "snippet": "    public StopWatchTest(String s) {\n        super(s);\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSimple()",
        "snippet": "    public void testStopWatchSimple(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long time = watch.getTime();\n        assertEquals(time, watch.getTime());\n        \n        assertTrue(time >= 500);\n        assertTrue(time < 700);\n        \n        watch.reset();\n        assertEquals(0, watch.getTime());\n    }\n",
        "begin_line": 47,
        "end_line": 60,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 42)",
            "(line 49,col 9)-(line 49,col 22)",
            "(line 50,col 13)-(line 50,col 71)",
            "(line 51,col 9)-(line 51,col 21)",
            "(line 52,col 9)-(line 52,col 36)",
            "(line 53,col 9)-(line 53,col 44)",
            "(line 55,col 9)-(line 55,col 32)",
            "(line 56,col 9)-(line 56,col 31)",
            "(line 58,col 9)-(line 58,col 22)",
            "(line 59,col 9)-(line 59,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSimpleGet()",
        "snippet": "    public void testStopWatchSimpleGet(){\n        StopWatch watch = new StopWatch();\n        assertEquals(0, watch.getTime());\n        assertEquals(\"0:00:00.000\", watch.toString());\n        \n        watch.start();\n            try {Thread.sleep(500);} catch (InterruptedException ex) {}\n        assertTrue(watch.getTime() < 2000);\n    }\n",
        "begin_line": 62,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 42)",
            "(line 64,col 9)-(line 64,col 41)",
            "(line 65,col 9)-(line 65,col 54)",
            "(line 67,col 9)-(line 67,col 22)",
            "(line 68,col 13)-(line 68,col 71)",
            "(line 69,col 9)-(line 69,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSplit()",
        "snippet": "    public void testStopWatchSplit(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.split();\n        long splitTime = watch.getSplitTime();\n        String splitStr = watch.toSplitString();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.unsplit();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n\n        assertEquals(\"Formatted split string not the correct length\", \n                     splitStr.length(), 11);\n        assertTrue(splitTime >= 500);\n        assertTrue(splitTime < 700);\n        assertTrue(totalTime >= 1500);\n        assertTrue(totalTime < 1900);\n    }\n",
        "begin_line": 72,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 42)",
            "(line 74,col 9)-(line 74,col 22)",
            "(line 75,col 13)-(line 75,col 71)",
            "(line 76,col 9)-(line 76,col 22)",
            "(line 77,col 9)-(line 77,col 46)",
            "(line 78,col 9)-(line 78,col 48)",
            "(line 79,col 13)-(line 79,col 71)",
            "(line 80,col 9)-(line 80,col 24)",
            "(line 81,col 13)-(line 81,col 71)",
            "(line 82,col 9)-(line 82,col 21)",
            "(line 83,col 9)-(line 83,col 41)",
            "(line 85,col 9)-(line 86,col 44)",
            "(line 87,col 9)-(line 87,col 37)",
            "(line 88,col 9)-(line 88,col 36)",
            "(line 89,col 9)-(line 89,col 38)",
            "(line 90,col 9)-(line 90,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSuspend()",
        "snippet": "    public void testStopWatchSuspend(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.resume();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        \n        assertTrue(suspendTime >= 500);\n        assertTrue(suspendTime < 700);\n        assertTrue(totalTime >= 1000);\n        assertTrue(totalTime < 1300);\n    }\n",
        "begin_line": 93,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 22)",
            "(line 96,col 13)-(line 96,col 71)",
            "(line 97,col 9)-(line 97,col 24)",
            "(line 98,col 9)-(line 98,col 43)",
            "(line 99,col 13)-(line 99,col 71)",
            "(line 100,col 9)-(line 100,col 23)",
            "(line 101,col 13)-(line 101,col 71)",
            "(line 102,col 9)-(line 102,col 21)",
            "(line 103,col 9)-(line 103,col 41)",
            "(line 105,col 9)-(line 105,col 39)",
            "(line 106,col 9)-(line 106,col 38)",
            "(line 107,col 9)-(line 107,col 38)",
            "(line 108,col 9)-(line 108,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testLang315()",
        "snippet": "    public void testLang315() {\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        assertTrue( suspendTime == totalTime );\n    }\n",
        "begin_line": 111,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 113,col 22)",
            "(line 114,col 13)-(line 114,col 71)",
            "(line 115,col 9)-(line 115,col 24)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 13)-(line 117,col 71)",
            "(line 118,col 9)-(line 118,col 21)",
            "(line 119,col 9)-(line 119,col 41)",
            "(line 120,col 9)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testBadStates()",
        "snippet": "    public void testBadStates() {\n        StopWatch watch = new StopWatch();\n        try {\n            watch.stop();\n            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.stop();\n            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.suspend();\n            fail(\"Calling suspend on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.split();\n            fail(\"Calling split on a non-running StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.unsplit();\n            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.resume();\n            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        watch.start();\n\n        try {\n            watch.start();\n            fail(\"Calling start on a started StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.unsplit();\n            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.getSplitTime();\n            fail(\"Calling getSplitTime on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.resume();\n            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        watch.stop();\n\n        try {\n            watch.start();\n            fail(\"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n    }\n",
        "begin_line": 124,
        "end_line": 207,
        "comment": " test bad states",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 133,col 9)-(line 138,col 9)",
            "(line 140,col 9)-(line 145,col 9)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 154,col 9)-(line 159,col 9)",
            "(line 161,col 9)-(line 166,col 9)",
            "(line 168,col 9)-(line 168,col 22)",
            "(line 170,col 9)-(line 175,col 9)",
            "(line 177,col 9)-(line 182,col 9)",
            "(line 184,col 9)-(line 189,col 9)",
            "(line 191,col 9)-(line 196,col 9)",
            "(line 198,col 9)-(line 198,col 21)",
            "(line 200,col 9)-(line 205,col 9)"
        ]
    }
]