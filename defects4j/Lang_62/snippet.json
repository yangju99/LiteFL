[
    {
        "name": "Entities.unescape#813",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.unescape(java.lang.String)",
        "snippet": "    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        }\n\n        StringBuffer buf = new StringBuffer(str.length());\n        buf.append(str.substring(0, firstAmp));\n        for (int i = firstAmp; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if (ch == '&') {\n                int semi = str.indexOf(';', i + 1);\n                if (semi == -1) {\n                    buf.append(ch);\n                    continue;\n                }\n                int amph = str.indexOf('&', i + 1);\n                if( amph != -1 && amph < semi ) {\n                    // Then the text looks like &...&...;\n                    buf.append(ch);\n                    continue;\n                }\n                String entityName = str.substring(i + 1, semi);\n                int entityValue;\n                if (entityName.length() == 0) {\n                    entityValue = -1;\n                } else if (entityName.charAt(0) == '#') {\n                    if (entityName.length() == 1) {\n                        entityValue = -1;\n                    } else {\n                        char charAt1 = entityName.charAt(1);\n                        try {\n                            if (charAt1 == 'x' || charAt1=='X') {\n                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n                            } else {\n                                entityValue = Integer.parseInt(entityName.substring(1));\n                            }\n                        } catch (NumberFormatException ex) {\n                            entityValue = -1;\n                        }\n                    }\n                } else {\n                    entityValue = this.entityValue(entityName);\n                }\n                if (entityValue == -1) {\n                    buf.append('&');\n                    buf.append(entityName);\n                    buf.append(';');\n                } else {\n                    buf.append((char) (entityValue));\n                }\n                i = semi;\n            } else {\n                buf.append(ch);\n            }\n        }\n        return buf.toString();\n    }\n",
        "begin_line": 813,
        "end_line": 870,
        "comment": "\n     * <p>Unescapes the entities in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * unescape(&quot;&amp;foo;&quot;) will return &quot;\\u00A1&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.Entry#83",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.Entry.Entry(int, int, java.lang.Object, org.apache.commons.lang.IntHashMap.Entry)",
        "snippet": "        protected Entry(int hash, int key, Object value, Entry next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\n         * <p>Create a new entry with the given values.</p>\n         *\n         * @param hash The code used to hash the object with\n         * @param key The key used to enter this in the table\n         * @param value The value for this key\n         * @param next A reference to the next entry in the table\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.IntHashMap#95",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap()",
        "snippet": "    public IntHashMap() {\n        this(20, 0.75f);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * <p>Constructs a new, empty hashtable with a default capacity and load\n     * factor, which is <code>20</code> and <code>0.75</code> respectively.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.IntHashMap#120",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap(int, float)",
        "snippet": "    public IntHashMap(int initialCapacity, float loadFactor) {\n        super();\n        if (initialCapacity < 0) {\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        }\n        if (loadFactor <= 0) {\n            throw new IllegalArgumentException(\"Illegal Load: \" + loadFactor);\n        }\n        if (initialCapacity == 0) {\n            initialCapacity = 1;\n        }\n\n        this.loadFactor = loadFactor;\n        table = new Entry[initialCapacity];\n        threshold = (int) (initialCapacity * loadFactor);\n    }\n",
        "begin_line": 120,
        "end_line": 135,
        "comment": "\n     * <p>Constructs a new, empty hashtable with the specified initial\n     * capacity and the specified load factor.</p>\n     *\n     * @param initialCapacity the initial capacity of the hashtable.\n     * @param loadFactor the load factor of the hashtable.\n     * @throws IllegalArgumentException  if the initial capacity is less\n     *             than zero, or if the load factor is nonpositive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.rehash#257",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.rehash()",
        "snippet": "    protected void rehash() {\n        int oldCapacity = table.length;\n        Entry oldMap[] = table;\n\n        int newCapacity = oldCapacity * 2 + 1;\n        Entry newMap[] = new Entry[newCapacity];\n\n        threshold = (int) (newCapacity * loadFactor);\n        table = newMap;\n\n        for (int i = oldCapacity; i-- > 0;) {\n            for (Entry old = oldMap[i]; old != null;) {\n                Entry e = old;\n                old = old.next;\n\n                int index = (e.hash & 0x7FFFFFFF) % newCapacity;\n                e.next = newMap[index];\n                newMap[index] = e;\n            }\n        }\n    }\n",
        "begin_line": 257,
        "end_line": 277,
        "comment": "\n     * <p>Increases the capacity of and internally reorganizes this\n     * hashtable, in order to accommodate and access its entries more\n     * efficiently.</p>\n     *\n     * <p>This method is called automatically when the number of keys\n     * in the hashtable exceeds this hashtable's capacity and load\n     * factor.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.put#294",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.put(int, java.lang.Object)",
        "snippet": "    public Object put(int key, Object value) {\n        // Makes sure the key is not already in the hashtable.\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index]; e != null; e = e.next) {\n            if (e.hash == hash) {\n                Object old = e.value;\n                e.value = value;\n                return old;\n            }\n        }\n\n        if (count >= threshold) {\n            // Rehash the table if the threshold is exceeded\n            rehash();\n\n            tab = table;\n            index = (hash & 0x7FFFFFFF) % tab.length;\n        }\n\n        // Creates the new entry.\n        Entry e = new Entry(hash, key, value, tab[index]);\n        tab[index] = e;\n        count++;\n        return null;\n    }\n",
        "begin_line": 294,
        "end_line": 320,
        "comment": "\n     * <p>Maps the specified <code>key</code> to the specified\n     * <code>value</code> in this hashtable. The key cannot be\n     * <code>null</code>. </p>\n     *\n     * <p>The value can be retrieved by calling the <code>get</code> method\n     * with a key that is equal to the original key.</p>\n     *\n     * @param key     the hashtable key.\n     * @param value   the value.\n     * @return the previous value of the specified key in this hashtable,\n     *         or <code>null</code> if it did not have one.\n     * @throws  NullPointerException  if the key is <code>null</code>.\n     * @see     #get(int)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.add#426",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.PrimitiveEntityMap.add(java.lang.String, int)",
        "snippet": "        public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(value, name);\n        }\n",
        "begin_line": 426,
        "end_line": 429,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        },
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.fillWithHtml40Entities#387",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.fillWithHtml40Entities(org.apache.commons.lang.Entities)",
        "snippet": "    static void fillWithHtml40Entities(Entities entities) {\n        entities.addEntities(BASIC_ARRAY);\n        entities.addEntities(ISO8859_1_ARRAY);\n        entities.addEntities(HTML40_ARRAY);\n    }\n",
        "begin_line": 387,
        "end_line": 391,
        "comment": "\n     * <p>Fills the specified entities instance with HTML 40 entities.</p>\n     * \n     * @param entities the instance to be filled.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.addEntities#700",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.addEntities(java.lang.String[][])",
        "snippet": "    public void addEntities(String[][] entityArray) {\n        for (int i = 0; i < entityArray.length; ++i) {\n            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n        }\n    }\n",
        "begin_line": 700,
        "end_line": 704,
        "comment": "\n     * <p>Adds entities to this entity.</p>\n     * \n     * @param entityArray array of entities to be added\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.addEntity#712",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.addEntity(java.lang.String, int)",
        "snippet": "    public void addEntity(String name, int value) {\n        map.add(name, value);\n    }\n",
        "begin_line": 712,
        "end_line": 714,
        "comment": "\n     * <p>Add an entity to this entity.</p>\n     * \n     * @param name name of the entity\n     * @param value vale of the entity\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    }
]