[
    {
        "class_name": "org.apache.commons.lang.IntHashMap",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.IntHashMap.table",
        "snippet": "    private transient Entry table[];",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * The hash table data.\n     "
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMap",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.IntHashMap.count",
        "snippet": "    private transient int count;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * The total number of entries in the hash table.\n     "
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMap",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.IntHashMap.threshold",
        "snippet": "    private int threshold;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * The table is rehashed when its size exceeds this threshold.  (The\n     * value of this field is (int)(capacity * loadFactor).)\n     *\n     * @serial\n     "
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMap",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.IntHashMap.loadFactor",
        "snippet": "    private float loadFactor;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n     * The load factor for the hashtable.\n     *\n     * @serial\n     "
    },
    {
        "class_name": "org.apache.commons.lang.Entry",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.Entry.hash",
        "snippet": "        int hash;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entry",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.Entry.key",
        "snippet": "        int key;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entry",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.Entry.value",
        "snippet": "        Object value;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entry",
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "signature": "org.apache.commons.lang.Entry.next",
        "snippet": "        Entry next;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.BASIC_ARRAY",
        "snippet": "    private static final String[][] BASIC_ARRAY = {\n        {\"quot\", \"34\"}, // \" - double-quote\n        {\"amp\", \"38\"}, // & - ampersand\n        {\"lt\", \"60\"}, // < - less-than\n        {\"gt\", \"62\"}, // > - greater-than\n    };",
        "begin_line": 41,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.APOS_ARRAY",
        "snippet": "    private static final String[][] APOS_ARRAY = {\n        {\"apos\", \"39\"}, // XML apostrophe\n    };",
        "begin_line": 48,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.ISO8859_1_ARRAY",
        "snippet": "    static final String[][] ISO8859_1_ARRAY = {\n        {\"nbsp\", \"160\"}, // non-breaking space\n        {\"iexcl\", \"161\"}, //inverted exclamation mark\n        {\"cent\", \"162\"}, //cent sign\n        {\"pound\", \"163\"}, //pound sign\n        {\"curren\", \"164\"}, //currency sign\n        {\"yen\", \"165\"}, //yen sign = yuan sign\n        {\"brvbar\", \"166\"}, //broken bar = broken vertical bar\n        {\"sect\", \"167\"}, //section sign\n        {\"uml\", \"168\"}, //diaeresis = spacing diaeresis\n        {\"copy\", \"169\"}, // \\xa9 - copyright sign\n        {\"ordf\", \"170\"}, //feminine ordinal indicator\n        {\"laquo\", \"171\"}, //left-pointing double angle quotation mark = left pointing guillemet\n        {\"not\", \"172\"}, //not sign\n        {\"shy\", \"173\"}, //soft hyphen = discretionary hyphen\n        {\"reg\", \"174\"}, // \\xae - registered trademark sign\n        {\"macr\", \"175\"}, //macron = spacing macron = overline = APL overbar\n        {\"deg\", \"176\"}, //degree sign\n        {\"plusmn\", \"177\"}, //plus-minus sign = plus-or-minus sign\n        {\"sup2\", \"178\"}, //superscript two = superscript digit two = squared\n        {\"sup3\", \"179\"}, //superscript three = superscript digit three = cubed\n        {\"acute\", \"180\"}, //acute accent = spacing acute\n        {\"micro\", \"181\"}, //micro sign\n        {\"para\", \"182\"}, //pilcrow sign = paragraph sign\n        {\"middot\", \"183\"}, //middle dot = Georgian comma = Greek middle dot\n        {\"cedil\", \"184\"}, //cedilla = spacing cedilla\n        {\"sup1\", \"185\"}, //superscript one = superscript digit one\n        {\"ordm\", \"186\"}, //masculine ordinal indicator\n        {\"raquo\", \"187\"}, //right-pointing double angle quotation mark = right pointing guillemet\n        {\"frac14\", \"188\"}, //vulgar fraction one quarter = fraction one quarter\n        {\"frac12\", \"189\"}, //vulgar fraction one half = fraction one half\n        {\"frac34\", \"190\"}, //vulgar fraction three quarters = fraction three quarters\n        {\"iquest\", \"191\"}, //inverted question mark = turned question mark\n        {\"Agrave\", \"192\"}, // \\xc0 - uppercase A, grave accent\n        {\"Aacute\", \"193\"}, // \\xc1 - uppercase A, acute accent\n        {\"Acirc\", \"194\"}, // \\xc2 - uppercase A, circumflex accent\n        {\"Atilde\", \"195\"}, // \\xc3 - uppercase A, tilde\n        {\"Auml\", \"196\"}, // \\xc4 - uppercase A, umlaut\n        {\"Aring\", \"197\"}, // \\xc5 - uppercase A, ring\n        {\"AElig\", \"198\"}, // \\xc6 - uppercase AE\n        {\"Ccedil\", \"199\"}, // \\xc7 - uppercase C, cedilla\n        {\"Egrave\", \"200\"}, // \\xc8 - uppercase E, grave accent\n        {\"Eacute\", \"201\"}, // \\xc9 - uppercase E, acute accent\n        {\"Ecirc\", \"202\"}, // \\xca - uppercase E, circumflex accent\n        {\"Euml\", \"203\"}, // \\xcb - uppercase E, umlaut\n        {\"Igrave\", \"204\"}, // \\xcc - uppercase I, grave accent\n        {\"Iacute\", \"205\"}, // \\xcd - uppercase I, acute accent\n        {\"Icirc\", \"206\"}, // \\xce - uppercase I, circumflex accent\n        {\"Iuml\", \"207\"}, // \\xcf - uppercase I, umlaut\n        {\"ETH\", \"208\"}, // \\xd0 - uppercase Eth, Icelandic\n        {\"Ntilde\", \"209\"}, // \\xd1 - uppercase N, tilde\n        {\"Ograve\", \"210\"}, // \\xd2 - uppercase O, grave accent\n        {\"Oacute\", \"211\"}, // \\xd3 - uppercase O, acute accent\n        {\"Ocirc\", \"212\"}, // \\xd4 - uppercase O, circumflex accent\n        {\"Otilde\", \"213\"}, // \\xd5 - uppercase O, tilde\n        {\"Ouml\", \"214\"}, // \\xd6 - uppercase O, umlaut\n        {\"times\", \"215\"}, //multiplication sign\n        {\"Oslash\", \"216\"}, // \\xd8 - uppercase O, slash\n        {\"Ugrave\", \"217\"}, // \\xd9 - uppercase U, grave accent\n        {\"Uacute\", \"218\"}, // \\xda - uppercase U, acute accent\n        {\"Ucirc\", \"219\"}, // \\xdb - uppercase U, circumflex accent\n        {\"Uuml\", \"220\"}, // \\xdc - uppercase U, umlaut\n        {\"Yacute\", \"221\"}, // \\xdd - uppercase Y, acute accent\n        {\"THORN\", \"222\"}, // \\xde - uppercase THORN, Icelandic\n        {\"szlig\", \"223\"}, // \\xdf - lowercase sharps, German\n        {\"agrave\", \"224\"}, // \\xe0 - lowercase a, grave accent\n        {\"aacute\", \"225\"}, // \\xe1 - lowercase a, acute accent\n        {\"acirc\", \"226\"}, // \\xe2 - lowercase a, circumflex accent\n        {\"atilde\", \"227\"}, // \\xe3 - lowercase a, tilde\n        {\"auml\", \"228\"}, // \\xe4 - lowercase a, umlaut\n        {\"aring\", \"229\"}, // \\xe5 - lowercase a, ring\n        {\"aelig\", \"230\"}, // \\xe6 - lowercase ae\n        {\"ccedil\", \"231\"}, // \\xe7 - lowercase c, cedilla\n        {\"egrave\", \"232\"}, // \\xe8 - lowercase e, grave accent\n        {\"eacute\", \"233\"}, // \\xe9 - lowercase e, acute accent\n        {\"ecirc\", \"234\"}, // \\xea - lowercase e, circumflex accent\n        {\"euml\", \"235\"}, // \\xeb - lowercase e, umlaut\n        {\"igrave\", \"236\"}, // \\xec - lowercase i, grave accent\n        {\"iacute\", \"237\"}, // \\xed - lowercase i, acute accent\n        {\"icirc\", \"238\"}, // \\xee - lowercase i, circumflex accent\n        {\"iuml\", \"239\"}, // \\xef - lowercase i, umlaut\n        {\"eth\", \"240\"}, // \\xf0 - lowercase eth, Icelandic\n        {\"ntilde\", \"241\"}, // \\xf1 - lowercase n, tilde\n        {\"ograve\", \"242\"}, // \\xf2 - lowercase o, grave accent\n        {\"oacute\", \"243\"}, // \\xf3 - lowercase o, acute accent\n        {\"ocirc\", \"244\"}, // \\xf4 - lowercase o, circumflex accent\n        {\"otilde\", \"245\"}, // \\xf5 - lowercase o, tilde\n        {\"ouml\", \"246\"}, // \\xf6 - lowercase o, umlaut\n        {\"divide\", \"247\"}, // division sign\n        {\"oslash\", \"248\"}, // \\xf8 - lowercase o, slash\n        {\"ugrave\", \"249\"}, // \\xf9 - lowercase u, grave accent\n        {\"uacute\", \"250\"}, // \\xfa - lowercase u, acute accent\n        {\"ucirc\", \"251\"}, // \\xfb - lowercase u, circumflex accent\n        {\"uuml\", \"252\"}, // \\xfc - lowercase u, umlaut\n        {\"yacute\", \"253\"}, // \\xfd - lowercase y, acute accent\n        {\"thorn\", \"254\"}, // \\xfe - lowercase thorn, Icelandic\n        {\"yuml\", \"255\"}, // \\xff - lowercase y, umlaut\n    };",
        "begin_line": 53,
        "end_line": 150,
        "comment": " package scoped for testing"
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.HTML40_ARRAY",
        "snippet": "    static final String[][] HTML40_ARRAY = {\n// <!-- Latin Extended-B -->\n        {\"fnof\", \"402\"}, //latin small f with hook = function= florin, U+0192 ISOtech -->\n// <!-- Greek -->\n        {\"Alpha\", \"913\"}, //greek capital letter alpha, U+0391 -->\n        {\"Beta\", \"914\"}, //greek capital letter beta, U+0392 -->\n        {\"Gamma\", \"915\"}, //greek capital letter gamma,U+0393 ISOgrk3 -->\n        {\"Delta\", \"916\"}, //greek capital letter delta,U+0394 ISOgrk3 -->\n        {\"Epsilon\", \"917\"}, //greek capital letter epsilon, U+0395 -->\n        {\"Zeta\", \"918\"}, //greek capital letter zeta, U+0396 -->\n        {\"Eta\", \"919\"}, //greek capital letter eta, U+0397 -->\n        {\"Theta\", \"920\"}, //greek capital letter theta,U+0398 ISOgrk3 -->\n        {\"Iota\", \"921\"}, //greek capital letter iota, U+0399 -->\n        {\"Kappa\", \"922\"}, //greek capital letter kappa, U+039A -->\n        {\"Lambda\", \"923\"}, //greek capital letter lambda,U+039B ISOgrk3 -->\n        {\"Mu\", \"924\"}, //greek capital letter mu, U+039C -->\n        {\"Nu\", \"925\"}, //greek capital letter nu, U+039D -->\n        {\"Xi\", \"926\"}, //greek capital letter xi, U+039E ISOgrk3 -->\n        {\"Omicron\", \"927\"}, //greek capital letter omicron, U+039F -->\n        {\"Pi\", \"928\"}, //greek capital letter pi, U+03A0 ISOgrk3 -->\n        {\"Rho\", \"929\"}, //greek capital letter rho, U+03A1 -->\n// <!-- there is no Sigmaf, and no U+03A2 character either -->\n        {\"Sigma\", \"931\"}, //greek capital letter sigma,U+03A3 ISOgrk3 -->\n        {\"Tau\", \"932\"}, //greek capital letter tau, U+03A4 -->\n        {\"Upsilon\", \"933\"}, //greek capital letter upsilon,U+03A5 ISOgrk3 -->\n        {\"Phi\", \"934\"}, //greek capital letter phi,U+03A6 ISOgrk3 -->\n        {\"Chi\", \"935\"}, //greek capital letter chi, U+03A7 -->\n        {\"Psi\", \"936\"}, //greek capital letter psi,U+03A8 ISOgrk3 -->\n        {\"Omega\", \"937\"}, //greek capital letter omega,U+03A9 ISOgrk3 -->\n        {\"alpha\", \"945\"}, //greek small letter alpha,U+03B1 ISOgrk3 -->\n        {\"beta\", \"946\"}, //greek small letter beta, U+03B2 ISOgrk3 -->\n        {\"gamma\", \"947\"}, //greek small letter gamma,U+03B3 ISOgrk3 -->\n        {\"delta\", \"948\"}, //greek small letter delta,U+03B4 ISOgrk3 -->\n        {\"epsilon\", \"949\"}, //greek small letter epsilon,U+03B5 ISOgrk3 -->\n        {\"zeta\", \"950\"}, //greek small letter zeta, U+03B6 ISOgrk3 -->\n        {\"eta\", \"951\"}, //greek small letter eta, U+03B7 ISOgrk3 -->\n        {\"theta\", \"952\"}, //greek small letter theta,U+03B8 ISOgrk3 -->\n        {\"iota\", \"953\"}, //greek small letter iota, U+03B9 ISOgrk3 -->\n        {\"kappa\", \"954\"}, //greek small letter kappa,U+03BA ISOgrk3 -->\n        {\"lambda\", \"955\"}, //greek small letter lambda,U+03BB ISOgrk3 -->\n        {\"mu\", \"956\"}, //greek small letter mu, U+03BC ISOgrk3 -->\n        {\"nu\", \"957\"}, //greek small letter nu, U+03BD ISOgrk3 -->\n        {\"xi\", \"958\"}, //greek small letter xi, U+03BE ISOgrk3 -->\n        {\"omicron\", \"959\"}, //greek small letter omicron, U+03BF NEW -->\n        {\"pi\", \"960\"}, //greek small letter pi, U+03C0 ISOgrk3 -->\n        {\"rho\", \"961\"}, //greek small letter rho, U+03C1 ISOgrk3 -->\n        {\"sigmaf\", \"962\"}, //greek small letter final sigma,U+03C2 ISOgrk3 -->\n        {\"sigma\", \"963\"}, //greek small letter sigma,U+03C3 ISOgrk3 -->\n        {\"tau\", \"964\"}, //greek small letter tau, U+03C4 ISOgrk3 -->\n        {\"upsilon\", \"965\"}, //greek small letter upsilon,U+03C5 ISOgrk3 -->\n        {\"phi\", \"966\"}, //greek small letter phi, U+03C6 ISOgrk3 -->\n        {\"chi\", \"967\"}, //greek small letter chi, U+03C7 ISOgrk3 -->\n        {\"psi\", \"968\"}, //greek small letter psi, U+03C8 ISOgrk3 -->\n        {\"omega\", \"969\"}, //greek small letter omega,U+03C9 ISOgrk3 -->\n        {\"thetasym\", \"977\"}, //greek small letter theta symbol,U+03D1 NEW -->\n        {\"upsih\", \"978\"}, //greek upsilon with hook symbol,U+03D2 NEW -->\n        {\"piv\", \"982\"}, //greek pi symbol, U+03D6 ISOgrk3 -->\n// <!-- General Punctuation -->\n        {\"bull\", \"8226\"}, //bullet = black small circle,U+2022 ISOpub  -->\n// <!-- bullet is NOT the same as bullet operator, U+2219 -->\n        {\"hellip\", \"8230\"}, //horizontal ellipsis = three dot leader,U+2026 ISOpub  -->\n        {\"prime\", \"8242\"}, //prime = minutes = feet, U+2032 ISOtech -->\n        {\"Prime\", \"8243\"}, //double prime = seconds = inches,U+2033 ISOtech -->\n        {\"oline\", \"8254\"}, //overline = spacing overscore,U+203E NEW -->\n        {\"frasl\", \"8260\"}, //fraction slash, U+2044 NEW -->\n// <!-- Letterlike Symbols -->\n        {\"weierp\", \"8472\"}, //script capital P = power set= Weierstrass p, U+2118 ISOamso -->\n        {\"image\", \"8465\"}, //blackletter capital I = imaginary part,U+2111 ISOamso -->\n        {\"real\", \"8476\"}, //blackletter capital R = real part symbol,U+211C ISOamso -->\n        {\"trade\", \"8482\"}, //trade mark sign, U+2122 ISOnum -->\n        {\"alefsym\", \"8501\"}, //alef symbol = first transfinite cardinal,U+2135 NEW -->\n// <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the \n//      same glyph could be used to depict both characters -->\n// <!-- Arrows -->\n        {\"larr\", \"8592\"}, //leftwards arrow, U+2190 ISOnum -->\n        {\"uarr\", \"8593\"}, //upwards arrow, U+2191 ISOnum-->\n        {\"rarr\", \"8594\"}, //rightwards arrow, U+2192 ISOnum -->\n        {\"darr\", \"8595\"}, //downwards arrow, U+2193 ISOnum -->\n        {\"harr\", \"8596\"}, //left right arrow, U+2194 ISOamsa -->\n        {\"crarr\", \"8629\"}, //downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->\n        {\"lArr\", \"8656\"}, //leftwards double arrow, U+21D0 ISOtech -->\n// <!-- ISO 10646 does not say that lArr is the same as the 'is implied by' \n//      arrow but also does not have any other character for that function. \n//      So ? lArr canbe used for 'is implied by' as ISOtech suggests -->\n        {\"uArr\", \"8657\"}, //upwards double arrow, U+21D1 ISOamsa -->\n        {\"rArr\", \"8658\"}, //rightwards double arrow,U+21D2 ISOtech -->\n// <!-- ISO 10646 does not say this is the 'implies' character but does not\n//      have another character with this function so ?rArr can be used for\n//      'implies' as ISOtech suggests -->\n        {\"dArr\", \"8659\"}, //downwards double arrow, U+21D3 ISOamsa -->\n        {\"hArr\", \"8660\"}, //left right double arrow,U+21D4 ISOamsa -->\n// <!-- Mathematical Operators -->\n        {\"forall\", \"8704\"}, //for all, U+2200 ISOtech -->\n        {\"part\", \"8706\"}, //partial differential, U+2202 ISOtech  -->\n        {\"exist\", \"8707\"}, //there exists, U+2203 ISOtech -->\n        {\"empty\", \"8709\"}, //empty set = null set = diameter,U+2205 ISOamso -->\n        {\"nabla\", \"8711\"}, //nabla = backward difference,U+2207 ISOtech -->\n        {\"isin\", \"8712\"}, //element of, U+2208 ISOtech -->\n        {\"notin\", \"8713\"}, //not an element of, U+2209 ISOtech -->\n        {\"ni\", \"8715\"}, //contains as member, U+220B ISOtech -->\n// <!-- should there be a more memorable name than 'ni'? -->\n        {\"prod\", \"8719\"}, //n-ary product = product sign,U+220F ISOamsb -->\n// <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' \n//      though the same glyph might be used for both -->\n        {\"sum\", \"8721\"}, //n-ary summation, U+2211 ISOamsb -->\n// <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'\n//      though the same glyph might be used for both -->\n        {\"minus\", \"8722\"}, //minus sign, U+2212 ISOtech -->\n        {\"lowast\", \"8727\"}, //asterisk operator, U+2217 ISOtech -->\n        {\"radic\", \"8730\"}, //square root = radical sign,U+221A ISOtech -->\n        {\"prop\", \"8733\"}, //proportional to, U+221D ISOtech -->\n        {\"infin\", \"8734\"}, //infinity, U+221E ISOtech -->\n        {\"ang\", \"8736\"}, //angle, U+2220 ISOamso -->\n        {\"and\", \"8743\"}, //logical and = wedge, U+2227 ISOtech -->\n        {\"or\", \"8744\"}, //logical or = vee, U+2228 ISOtech -->\n        {\"cap\", \"8745\"}, //intersection = cap, U+2229 ISOtech -->\n        {\"cup\", \"8746\"}, //union = cup, U+222A ISOtech -->\n        {\"int\", \"8747\"}, //integral, U+222B ISOtech -->\n        {\"there4\", \"8756\"}, //therefore, U+2234 ISOtech -->\n        {\"sim\", \"8764\"}, //tilde operator = varies with = similar to,U+223C ISOtech -->\n// <!-- tilde operator is NOT the same character as the tilde, U+007E,although\n//      the same glyph might be used to represent both  -->\n        {\"cong\", \"8773\"}, //approximately equal to, U+2245 ISOtech -->\n        {\"asymp\", \"8776\"}, //almost equal to = asymptotic to,U+2248 ISOamsr -->\n        {\"ne\", \"8800\"}, //not equal to, U+2260 ISOtech -->\n        {\"equiv\", \"8801\"}, //identical to, U+2261 ISOtech -->\n        {\"le\", \"8804\"}, //less-than or equal to, U+2264 ISOtech -->\n        {\"ge\", \"8805\"}, //greater-than or equal to,U+2265 ISOtech -->\n        {\"sub\", \"8834\"}, //subset of, U+2282 ISOtech -->\n        {\"sup\", \"8835\"}, //superset of, U+2283 ISOtech -->\n// <!-- note that nsup, 'not a superset of, U+2283' is not covered by the\n//      Symbol font encoding and is not included. Should it be, for symmetry?\n//      It is in ISOamsn  --> <!ENTITY nsub\", \"8836\"},  \n//      not a subset of, U+2284 ISOamsn -->\n        {\"sube\", \"8838\"}, //subset of or equal to, U+2286 ISOtech -->\n        {\"supe\", \"8839\"}, //superset of or equal to,U+2287 ISOtech -->\n        {\"oplus\", \"8853\"}, //circled plus = direct sum,U+2295 ISOamsb -->\n        {\"otimes\", \"8855\"}, //circled times = vector product,U+2297 ISOamsb -->\n        {\"perp\", \"8869\"}, //up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->\n        {\"sdot\", \"8901\"}, //dot operator, U+22C5 ISOamsb -->\n// <!-- dot operator is NOT the same character as U+00B7 middle dot -->\n// <!-- Miscellaneous Technical -->\n        {\"lceil\", \"8968\"}, //left ceiling = apl upstile,U+2308 ISOamsc  -->\n        {\"rceil\", \"8969\"}, //right ceiling, U+2309 ISOamsc  -->\n        {\"lfloor\", \"8970\"}, //left floor = apl downstile,U+230A ISOamsc  -->\n        {\"rfloor\", \"8971\"}, //right floor, U+230B ISOamsc  -->\n        {\"lang\", \"9001\"}, //left-pointing angle bracket = bra,U+2329 ISOtech -->\n// <!-- lang is NOT the same character as U+003C 'less than' or U+2039 'single left-pointing angle quotation mark' -->\n        {\"rang\", \"9002\"}, //right-pointing angle bracket = ket,U+232A ISOtech -->\n// <!-- rang is NOT the same character as U+003E 'greater than' or U+203A \n//      'single right-pointing angle quotation mark' -->\n// <!-- Geometric Shapes -->\n        {\"loz\", \"9674\"}, //lozenge, U+25CA ISOpub -->\n// <!-- Miscellaneous Symbols -->\n        {\"spades\", \"9824\"}, //black spade suit, U+2660 ISOpub -->\n// <!-- black here seems to mean filled as opposed to hollow -->\n        {\"clubs\", \"9827\"}, //black club suit = shamrock,U+2663 ISOpub -->\n        {\"hearts\", \"9829\"}, //black heart suit = valentine,U+2665 ISOpub -->\n        {\"diams\", \"9830\"}, //black diamond suit, U+2666 ISOpub -->\n\n// <!-- Latin Extended-A -->\n        {\"OElig\", \"338\"}, //  -- latin capital ligature OE,U+0152 ISOlat2 -->\n        {\"oelig\", \"339\"}, //  -- latin small ligature oe, U+0153 ISOlat2 -->\n// <!-- ligature is a misnomer, this is a separate character in some languages -->\n        {\"Scaron\", \"352\"}, //  -- latin capital letter S with caron,U+0160 ISOlat2 -->\n        {\"scaron\", \"353\"}, //  -- latin small letter s with caron,U+0161 ISOlat2 -->\n        {\"Yuml\", \"376\"}, //  -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->\n// <!-- Spacing Modifier Letters -->\n        {\"circ\", \"710\"}, //  -- modifier letter circumflex accent,U+02C6 ISOpub -->\n        {\"tilde\", \"732\"}, //small tilde, U+02DC ISOdia -->\n// <!-- General Punctuation -->\n        {\"ensp\", \"8194\"}, //en space, U+2002 ISOpub -->\n        {\"emsp\", \"8195\"}, //em space, U+2003 ISOpub -->\n        {\"thinsp\", \"8201\"}, //thin space, U+2009 ISOpub -->\n        {\"zwnj\", \"8204\"}, //zero width non-joiner,U+200C NEW RFC 2070 -->\n        {\"zwj\", \"8205\"}, //zero width joiner, U+200D NEW RFC 2070 -->\n        {\"lrm\", \"8206\"}, //left-to-right mark, U+200E NEW RFC 2070 -->\n        {\"rlm\", \"8207\"}, //right-to-left mark, U+200F NEW RFC 2070 -->\n        {\"ndash\", \"8211\"}, //en dash, U+2013 ISOpub -->\n        {\"mdash\", \"8212\"}, //em dash, U+2014 ISOpub -->\n        {\"lsquo\", \"8216\"}, //left single quotation mark,U+2018 ISOnum -->\n        {\"rsquo\", \"8217\"}, //right single quotation mark,U+2019 ISOnum -->\n        {\"sbquo\", \"8218\"}, //single low-9 quotation mark, U+201A NEW -->\n        {\"ldquo\", \"8220\"}, //left double quotation mark,U+201C ISOnum -->\n        {\"rdquo\", \"8221\"}, //right double quotation mark,U+201D ISOnum -->\n        {\"bdquo\", \"8222\"}, //double low-9 quotation mark, U+201E NEW -->\n        {\"dagger\", \"8224\"}, //dagger, U+2020 ISOpub -->\n        {\"Dagger\", \"8225\"}, //double dagger, U+2021 ISOpub -->\n        {\"permil\", \"8240\"}, //per mille sign, U+2030 ISOtech -->\n        {\"lsaquo\", \"8249\"}, //single left-pointing angle quotation mark,U+2039 ISO proposed -->\n// <!-- lsaquo is proposed but not yet ISO standardized -->\n        {\"rsaquo\", \"8250\"}, //single right-pointing angle quotation mark,U+203A ISO proposed -->\n// <!-- rsaquo is proposed but not yet ISO standardized -->\n        {\"euro\", \"8364\"}, //  -- euro sign, U+20AC NEW -->\n    };",
        "begin_line": 154,
        "end_line": 348,
        "comment": " package scoped for testing"
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.XML",
        "snippet": "    public static final Entities XML;",
        "begin_line": 353,
        "end_line": 353,
        "comment": "\n     * <p>The set of entities supported by standard XML.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.HTML32",
        "snippet": "    public static final Entities HTML32;",
        "begin_line": 358,
        "end_line": 358,
        "comment": "\n     * <p>The set of entities supported by HTML 3.2.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.HTML40",
        "snippet": "    public static final Entities HTML40;",
        "begin_line": 363,
        "end_line": 363,
        "comment": "\n     * <p>The set of entities supported by HTML 4.0.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.lang.PrimitiveEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.PrimitiveEntityMap.mapNameToValue",
        "snippet": "        private Map mapNameToValue = new HashMap();",
        "begin_line": 420,
        "end_line": 420,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.PrimitiveEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.PrimitiveEntityMap.mapValueToName",
        "snippet": "        private IntHashMap mapValueToName = new IntHashMap();",
        "begin_line": 421,
        "end_line": 421,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.MapIntMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.MapIntMap.mapNameToValue",
        "snippet": "        protected Map mapNameToValue;",
        "begin_line": 452,
        "end_line": 452,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.MapIntMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.MapIntMap.mapValueToName",
        "snippet": "        protected Map mapValueToName;",
        "begin_line": 453,
        "end_line": 453,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.LookupEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.LookupEntityMap.lookupTable",
        "snippet": "        private String[] lookupTable;",
        "begin_line": 503,
        "end_line": 503,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.LookupEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.LookupEntityMap.LOOKUP_TABLE_SIZE",
        "snippet": "        private int LOOKUP_TABLE_SIZE = 256;",
        "begin_line": 504,
        "end_line": 504,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.ArrayEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.ArrayEntityMap.growBy",
        "snippet": "        protected int growBy = 100;",
        "begin_line": 541,
        "end_line": 541,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.ArrayEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.ArrayEntityMap.size",
        "snippet": "        protected int size = 0;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.ArrayEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.ArrayEntityMap.names",
        "snippet": "        protected String[] names;",
        "begin_line": 543,
        "end_line": 543,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.ArrayEntityMap",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.ArrayEntityMap.values",
        "snippet": "        protected int[] values;",
        "begin_line": 544,
        "end_line": 544,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang.Entities",
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "signature": "org.apache.commons.lang.Entities.map",
        "snippet": "    EntityMap map = new Entities.LookupEntityMap();",
        "begin_line": 693,
        "end_line": 693,
        "comment": " package scoped for testing"
    }
]