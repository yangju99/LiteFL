[
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.EntitiesTest(java.lang.String)",
        "snippet": "    public EntitiesTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EntitiesTest.class);\n        suite.setName(\"EntitiesTest Tests\");\n        return suite;\n    }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 60)",
            "(line 46,col 9)-(line 46,col 44)",
            "(line 47,col 9)-(line 47,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        entities = new Entities();\n        entities.addEntity(\"foo\", 161);\n        entities.addEntity(\"bar\", 162);\n    }\n",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 34)",
            "(line 55,col 9)-(line 55,col 39)",
            "(line 56,col 9)-(line 56,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testEscapeNamedEntity()",
        "snippet": "    public void testEscapeNamedEntity() throws Exception\n    {\n        doTestEscapeNamedEntity(\"&foo;\", \"\\u00A1\");\n        doTestEscapeNamedEntity(\"x&foo;\", \"x\\u00A1\");\n        doTestEscapeNamedEntity(\"&foo;x\", \"\\u00A1x\");\n        doTestEscapeNamedEntity(\"x&foo;x\", \"x\\u00A1x\");\n        doTestEscapeNamedEntity(\"&foo;&bar;\", \"\\u00A1\\u00A2\");\n    }\n",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 51)",
            "(line 62,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 63,col 53)",
            "(line 64,col 9)-(line 64,col 55)",
            "(line 65,col 9)-(line 65,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.doTestEscapeNamedEntity(java.lang.String, java.lang.String)",
        "snippet": "    private void doTestEscapeNamedEntity(final String expected, final String entity) throws Exception\n    {\n        assertEquals(expected, entities.escape(entity));\n        StringWriter writer = new StringWriter();\n        entities.escape(writer, entity);\n        assertEquals(expected, writer.toString());\n    }\n",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 56)",
            "(line 71,col 9)-(line 71,col 49)",
            "(line 72,col 9)-(line 72,col 40)",
            "(line 73,col 9)-(line 73,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testUnescapeNamedEntity()",
        "snippet": "    public void testUnescapeNamedEntity() throws Exception\n    {\n        assertEquals(\"\\u00A1\", entities.unescape(\"&foo;\"));\n        assertEquals(\"x\\u00A1\", entities.unescape(\"x&foo;\"));\n        assertEquals(\"\\u00A1x\", entities.unescape(\"&foo;x\"));\n        assertEquals(\"x\\u00A1x\", entities.unescape(\"x&foo;x\"));\n        assertEquals(\"\\u00A1\\u00A2\", entities.unescape(\"&foo;&bar;\"));\n    }\n",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 59)",
            "(line 79,col 9)-(line 79,col 61)",
            "(line 80,col 9)-(line 80,col 61)",
            "(line 81,col 9)-(line 81,col 63)",
            "(line 82,col 9)-(line 82,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        doTestUnescapeEntity(\"&zzzz;\", \"&zzzz;\");\n    }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testUnescapeMiscellaneous()",
        "snippet": "    public void testUnescapeMiscellaneous() throws Exception\n    {\n      doTestUnescapeEntity(\"&hello\", \"&hello\");\n      doTestUnescapeEntity(\"&;\", \"&;\");\n      doTestUnescapeEntity(\"&#;\", \"&#;\");\n      doTestUnescapeEntity(\"&#invalid;\", \"&#invalid;\");\n      doTestUnescapeEntity(\"A\", \"&#X41;\");\n    }\n",
        "begin_line": 90,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 92,col 7)-(line 92,col 47)",
            "(line 93,col 7)-(line 93,col 39)",
            "(line 94,col 7)-(line 94,col 41)",
            "(line 95,col 7)-(line 95,col 55)",
            "(line 96,col 7)-(line 96,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(java.lang.String, java.lang.String)",
        "snippet": "    private void doTestUnescapeEntity(final String expected, final String entity) throws Exception\n    {\n        assertEquals(expected, entities.unescape(entity));\n        StringWriter writer = new StringWriter();\n        entities.unescape(writer, entity);\n        assertEquals(expected, writer.toString());\n    }\n",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 102,col 49)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testAddEntitiesArray()",
        "snippet": "    public void testAddEntitiesArray() throws Exception\n    {\n        String[][] array = {{\"foo\", \"100\"}, {\"bar\", \"101\"}};\n        Entities e = new Entities();\n        e.addEntities(array);\n        assertEquals(\"foo\", e.entityName(100));\n        assertEquals(\"bar\", e.entityName(101));\n        assertEquals(100, e.entityValue(\"foo\"));\n        assertEquals(101, e.entityValue(\"bar\"));\n    }\n",
        "begin_line": 107,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 60)",
            "(line 110,col 9)-(line 110,col 36)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 112,col 47)",
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 48)",
            "(line 115,col 9)-(line 115,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testEntitiesXmlObject()",
        "snippet": "    public void testEntitiesXmlObject() throws Exception\n    {\n        assertEquals(\"gt\", Entities.XML.entityName('>'));\n        assertEquals('>', Entities.XML.entityValue(\"gt\"));\n        assertEquals(-1, Entities.XML.entityValue(\"xyzzy\"));\n    }\n",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 57)",
            "(line 121,col 9)-(line 121,col 58)",
            "(line 122,col 9)-(line 122,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testArrayIntMap()",
        "snippet": "    public void testArrayIntMap() throws Exception\n    {\n        Entities.ArrayEntityMap map = new Entities.ArrayEntityMap(2);\n        checkSomeEntityMap(map);\n        Entities.ArrayEntityMap map1 = new Entities.ArrayEntityMap();\n        checkSomeEntityMap(map1);\n        assertEquals(-1, map.value(\"null\"));\n        assertNull(map.name(-1));\n    }\n",
        "begin_line": 125,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 69)",
            "(line 128,col 9)-(line 128,col 32)",
            "(line 129,col 9)-(line 129,col 69)",
            "(line 130,col 9)-(line 130,col 33)",
            "(line 131,col 9)-(line 131,col 44)",
            "(line 132,col 9)-(line 132,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testTreeIntMap()",
        "snippet": "    public void testTreeIntMap() throws Exception\n    {\n        Entities.EntityMap map = new Entities.TreeEntityMap();\n        checkSomeEntityMap(map);\n    }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 62)",
            "(line 138,col 9)-(line 138,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testHashIntMap()",
        "snippet": "    public void testHashIntMap() throws Exception\n    {\n        Entities.EntityMap map = new Entities.HashEntityMap();\n        checkSomeEntityMap(map);\n        assertEquals(-1, map.value(\"noname\"));\n    }\n",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 62)",
            "(line 144,col 9)-(line 144,col 32)",
            "(line 145,col 9)-(line 145,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testBinaryIntMap()",
        "snippet": "    public void testBinaryIntMap() throws Exception\n    {\n        Entities.BinaryEntityMap map = new Entities.BinaryEntityMap(2);\n        checkSomeEntityMap(map);\n        Entities.BinaryEntityMap map1 = new Entities.BinaryEntityMap();\n        checkSomeEntityMap(map1);\n        \n        // value cannot be added twice\n        map1.add(\"baz4a\", 4);\n        map1.add(\"baz4b\", 4);\n        assertEquals(-1, map1.value(\"baz4b\"));\n        assertEquals(\"baz4a\", map1.name(4));\n        assertNull(map1.name(99));\n        \n        Entities.BinaryEntityMap map2 = new Entities.BinaryEntityMap();\n        map2.add(\"val1\", 1);\n        map2.add(\"val2\", 2);\n        map2.add(\"val3\", 3);\n        map2.add(\"val4\", 4);\n        map2.add(\"val5\", 5);\n        assertEquals(\"val5\", map2.name(5));\n        assertEquals(\"val4\", map2.name(4));\n        assertEquals(\"val3\", map2.name(3));\n        assertEquals(\"val2\", map2.name(2));\n        assertEquals(\"val1\", map2.name(1));\n    }\n",
        "begin_line": 148,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 71)",
            "(line 151,col 9)-(line 151,col 32)",
            "(line 152,col 9)-(line 152,col 71)",
            "(line 153,col 9)-(line 153,col 33)",
            "(line 156,col 9)-(line 156,col 29)",
            "(line 157,col 9)-(line 157,col 29)",
            "(line 158,col 9)-(line 158,col 46)",
            "(line 159,col 9)-(line 159,col 44)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 162,col 9)-(line 162,col 71)",
            "(line 163,col 9)-(line 163,col 28)",
            "(line 164,col 9)-(line 164,col 28)",
            "(line 165,col 9)-(line 165,col 28)",
            "(line 166,col 9)-(line 166,col 28)",
            "(line 167,col 9)-(line 167,col 28)",
            "(line 168,col 9)-(line 168,col 43)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 43)",
            "(line 172,col 9)-(line 172,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testPrimitiveIntMap()",
        "snippet": "    public void testPrimitiveIntMap() throws Exception\n    {\n        Entities.PrimitiveEntityMap map = new Entities.PrimitiveEntityMap();\n        checkSomeEntityMap(map);\n    }\n",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 76)",
            "(line 178,col 9)-(line 178,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.checkSomeEntityMap(org.apache.commons.lang.Entities.EntityMap)",
        "snippet": "    private void checkSomeEntityMap(Entities.EntityMap map) {\n        map.add(\"foo\", 1);\n        assertEquals(1, map.value(\"foo\"));\n        assertEquals(\"foo\", map.name(1));\n        map.add(\"bar\", 2);\n        map.add(\"baz\", 3);\n        assertEquals(3, map.value(\"baz\"));\n        assertEquals(\"baz\", map.name(3));\n    }\n",
        "begin_line": 181,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 26)",
            "(line 183,col 9)-(line 183,col 42)",
            "(line 184,col 9)-(line 184,col 41)",
            "(line 185,col 9)-(line 185,col 26)",
            "(line 186,col 9)-(line 186,col 26)",
            "(line 187,col 9)-(line 187,col 42)",
            "(line 188,col 9)-(line 188,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testHtml40Nbsp()",
        "snippet": "    public void testHtml40Nbsp() throws Exception\n    {\n        assertEquals(\"&nbsp;\", Entities.HTML40.escape(\"\\u00A0\"));\n        Entities e = new Entities();\n        e.map = new Entities.PrimitiveEntityMap();\n        Entities.fillWithHtml40Entities(e);\n        assertEquals(\"&nbsp;\", e.escape(\"\\u00A0\"));\n    }\n",
        "begin_line": 191,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 65)",
            "(line 194,col 9)-(line 194,col 36)",
            "(line 195,col 9)-(line 195,col 50)",
            "(line 196,col 9)-(line 196,col 43)",
            "(line 197,col 9)-(line 197,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testNumberOverflow()",
        "snippet": "    public void testNumberOverflow() throws Exception {\n        doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\n        doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");\n        doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");\n        doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");\n    }\n",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 59)",
            "(line 202,col 9)-(line 202,col 63)",
            "(line 203,col 9)-(line 203,col 61)",
            "(line 204,col 9)-(line 204,col 65)"
        ]
    }
]