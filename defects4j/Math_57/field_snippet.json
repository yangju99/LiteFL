[
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.random",
        "snippet": "    private final Random random;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Random generator for choosing initial centers. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.emptyStrategy",
        "snippet": "    private final EmptyClusterStrategy emptyStrategy;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Selected strategy for empty clusters. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A",
        "snippet": "    private static final double EXP_INT_TABLE_A[] = new double[1500];",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B",
        "snippet": "    private static final double EXP_INT_TABLE_B[] = new double[1500];",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750]\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A",
        "snippet": "    private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B",
        "snippet": "    private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.FACT",
        "snippet": "    private static final double FACT[] = new double[20];",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Factorial table, for Taylor series expansions. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_MANT",
        "snippet": "    private static final double LN_MANT[][] = new double[1024][];",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_SPLIT_COEF",
        "snippet": "    private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
        "begin_line": 85,
        "end_line": 102,
        "comment": " Coefficients for slowLog. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 105,
        "end_line": 115,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 118,
        "end_line": 125,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] = new double[14];",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] = new double[14];",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] = new double[14];",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] = new double[14];",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] = new double[14];",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] = new double[14];",
        "begin_line": 143,
        "end_line": 143,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.RECIP_2PI",
        "snippet": "    private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 146,
        "end_line": 164,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 167,
        "end_line": 169,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EIGHTHS",
        "snippet": "    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 175,
        "end_line": 175,
        "comment": " Eighths.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
        "begin_line": 178,
        "end_line": 182,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.HEX_40000000",
        "snippet": "    private static final long HEX_40000000 = 0x40000000L; // 1073741824L",
        "begin_line": 195,
        "end_line": 195,
        "comment": " 1073741824L"
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.MASK_30BITS",
        "snippet": "    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " 0xFFFFFFFFC0000000L;"
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TWO_POWER_52",
        "snippet": "    private static final double TWO_POWER_52 = 4503599627370496.0;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.EPSILON",
        "snippet": "    public static final double EPSILON = 0x1.0p-53;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Smallest positive number such that 1 - EPSILON is not numerically equal to 1. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SAFE_MIN",
        "snippet": "    public static final double SAFE_MIN = 0x1.0p-1022;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Safe minimum, such that 1 / SAFE_MIN does not overflow.\n     * <p>In IEEE 754 arithmetic, this is also the smallest normalized\n     * number 2<sup>-1022</sup>.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.TWO_PI",
        "snippet": "    public static final double TWO_PI = 2 * FastMath.PI;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * 2 &pi;.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NB",
        "snippet": "    private static final byte  NB = (byte)-1;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " -1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NS",
        "snippet": "    private static final short NS = (short)-1;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " -1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PB",
        "snippet": "    private static final byte  PB = (byte)1;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " 1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PS",
        "snippet": "    private static final short PS = (short)1;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " 1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZB",
        "snippet": "    private static final byte  ZB = (byte)0;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " 0.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZS",
        "snippet": "    private static final short ZS = (short)0;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " 0.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NAN_GAP",
        "snippet": "    private static final int NAN_GAP = 4 * 1024 * 1024;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Gap between NaN and regular numbers. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SGN_MASK",
        "snippet": "    private static final long SGN_MASK = 0x8000000000000000L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Offset to order signed double numbers lexicographically. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SGN_MASK_FLOAT",
        "snippet": "    private static final int SGN_MASK_FLOAT = 0x80000000;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Offset to order signed double numbers lexicographically. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.FACTORIALS",
        "snippet": "    private static final long[] FACTORIALS = new long[] {\n                       1l,                  1l,                   2l,\n                       6l,                 24l,                 120l,\n                     720l,               5040l,               40320l,\n                  362880l,            3628800l,            39916800l,\n               479001600l,         6227020800l,         87178291200l,\n           1307674368000l,     20922789888000l,     355687428096000l,\n        6402373705728000l, 121645100408832000l, 2432902008176640000l };",
        "begin_line": 89,
        "end_line": 96,
        "comment": " All long-representable factorials "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3946024775784901369L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.point",
        "snippet": "    private final int[] point;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3442297081515880464L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.points",
        "snippet": "    private final List<T> points;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The points contained in this cluster. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.center",
        "snippet": "    private final T center;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Center of the cluster. "
    }
]