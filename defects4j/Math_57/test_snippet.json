[
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.dimension2()",
        "snippet": "    @Test\n    public void dimension2() {\n        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer =\n            new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l));\n        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n\n                // first expected cluster\n                new EuclideanIntegerPoint(new int[] { -15,  3 }),\n                new EuclideanIntegerPoint(new int[] { -15,  4 }),\n                new EuclideanIntegerPoint(new int[] { -15,  5 }),\n                new EuclideanIntegerPoint(new int[] { -14,  3 }),\n                new EuclideanIntegerPoint(new int[] { -14,  5 }),\n                new EuclideanIntegerPoint(new int[] { -13,  3 }),\n                new EuclideanIntegerPoint(new int[] { -13,  4 }),\n                new EuclideanIntegerPoint(new int[] { -13,  5 }),\n\n                // second expected cluster\n                new EuclideanIntegerPoint(new int[] { -1,  0 }),\n                new EuclideanIntegerPoint(new int[] { -1, -1 }),\n                new EuclideanIntegerPoint(new int[] {  0, -1 }),\n                new EuclideanIntegerPoint(new int[] {  1, -1 }),\n                new EuclideanIntegerPoint(new int[] {  1, -2 }),\n\n                // third expected cluster\n                new EuclideanIntegerPoint(new int[] { 13,  3 }),\n                new EuclideanIntegerPoint(new int[] { 13,  4 }),\n                new EuclideanIntegerPoint(new int[] { 14,  4 }),\n                new EuclideanIntegerPoint(new int[] { 14,  7 }),\n                new EuclideanIntegerPoint(new int[] { 16,  5 }),\n                new EuclideanIntegerPoint(new int[] { 16,  6 }),\n                new EuclideanIntegerPoint(new int[] { 17,  4 }),\n                new EuclideanIntegerPoint(new int[] { 17,  7 })\n\n        };\n        List<Cluster<EuclideanIntegerPoint>> clusters =\n            transformer.cluster(Arrays.asList(points), 3, 10);\n\n        assertEquals(3, clusters.size());\n        boolean cluster1Found = false;\n        boolean cluster2Found = false;\n        boolean cluster3Found = false;\n        for (Cluster<EuclideanIntegerPoint> cluster : clusters) {\n            int[] center = cluster.getCenter().getPoint();\n            if (center[0] < 0) {\n                cluster1Found = true;\n                assertEquals(8, cluster.getPoints().size());\n                assertEquals(-14, center[0]);\n                assertEquals( 4, center[1]);\n            } else if (center[1] < 0) {\n                cluster2Found = true;\n                assertEquals(5, cluster.getPoints().size());\n                assertEquals( 0, center[0]);\n                assertEquals(-1, center[1]);\n            } else {\n                cluster3Found = true;\n                assertEquals(8, cluster.getPoints().size());\n                assertEquals(15, center[0]);\n                assertEquals(5, center[1]);\n            }\n        }\n        assertTrue(cluster1Found);\n        assertTrue(cluster2Found);\n        assertTrue(cluster3Found);\n\n    }\n",
        "begin_line": 34,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 37,col 91)",
            "(line 38,col 9)-(line 67,col 10)",
            "(line 68,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 41)",
            "(line 72,col 9)-(line 72,col 38)",
            "(line 73,col 9)-(line 73,col 38)",
            "(line 74,col 9)-(line 74,col 38)",
            "(line 75,col 9)-(line 93,col 9)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 34)",
            "(line 96,col 9)-(line 96,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate()",
        "snippet": "    @Test\n    public void testPerformClusterAnalysisDegenerate() {\n        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\n                new Random(1746432956321l));\n        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),\n                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\n        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);\n        assertEquals(1, clusters.size());\n        assertEquals(2, (clusters.get(0).getPoints().size()));\n        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });\n        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });\n        assertTrue(clusters.get(0).getPoints().contains(pt1));\n        assertTrue(clusters.get(0).getPoints().contains(pt2));\n\n    }\n",
        "begin_line": 105,
        "end_line": 120,
        "comment": "\n     * JIRA: MATH-305\n     *\n     * Two points, one cluster, one iteration\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 108,col 44)",
            "(line 109,col 9)-(line 111,col 73)",
            "(line 112,col 9)-(line 112,col 105)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 62)",
            "(line 115,col 9)-(line 115,col 90)",
            "(line 116,col 9)-(line 116,col 90)",
            "(line 117,col 9)-(line 117,col 62)",
            "(line 118,col 9)-(line 118,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testCertainSpace()",
        "snippet": "    @Test\n    public void testCertainSpace() {\n        KMeansPlusPlusClusterer.EmptyClusterStrategy[] strategies = {\n            KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE,\n            KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER,\n            KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT\n        };\n        for (KMeansPlusPlusClusterer.EmptyClusterStrategy strategy : strategies) {\n            KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer =\n                new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l), strategy);\n            int numberOfVariables = 27;\n            // initialise testvalues\n            int position1 = 1;\n            int position2 = position1 + numberOfVariables;\n            int position3 = position2 + numberOfVariables;\n            int position4 = position3 + numberOfVariables;\n            // testvalues will be multiplied\n            int multiplier = 1000000;\n\n            EuclideanIntegerPoint[] breakingPoints = new EuclideanIntegerPoint[numberOfVariables];\n            // define the space which will break the cluster algorithm\n            for (int i = 0; i < numberOfVariables; i++) {\n                int points[] = { position1, position2, position3, position4 };\n                // multiply the values\n                for (int j = 0; j < points.length; j++) {\n                    points[j] = points[j] * multiplier;\n                }\n                EuclideanIntegerPoint euclideanIntegerPoint = new EuclideanIntegerPoint(points);\n                breakingPoints[i] = euclideanIntegerPoint;\n                position1 = position1 + numberOfVariables;\n                position2 = position2 + numberOfVariables;\n                position3 = position3 + numberOfVariables;\n                position4 = position4 + numberOfVariables;\n            }\n\n            for (int n = 2; n < 27; ++n) {\n                List<Cluster<EuclideanIntegerPoint>> clusters =\n                    transformer.cluster(Arrays.asList(breakingPoints), n, 100);\n                Assert.assertEquals(n, clusters.size());\n                int sum = 0;\n                for (Cluster<EuclideanIntegerPoint> cluster : clusters) {\n                    sum += cluster.getPoints().size();\n                }\n                Assert.assertEquals(numberOfVariables, sum);\n            }\n        }\n\n    }\n",
        "begin_line": 122,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 128,col 10)",
            "(line 129,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint.CloseIntegerPoint(org.apache.commons.math.stat.clustering.EuclideanIntegerPoint)",
        "snippet": "        public CloseIntegerPoint(EuclideanIntegerPoint point) {\n            euclideanPoint = point;\n        }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 13)-(line 177,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint.distanceFrom(org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint)",
        "snippet": "        public double distanceFrom(CloseIntegerPoint p) {\n            return euclideanPoint.distanceFrom(p.euclideanPoint) * 0.001;\n        }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 13)-(line 181,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint.centroidOf(java.util.Collection<org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint>)",
        "snippet": "        public CloseIntegerPoint centroidOf(Collection<CloseIntegerPoint> p) {\n            Collection<EuclideanIntegerPoint> euclideanPoints =\n                new ArrayList<EuclideanIntegerPoint>();\n            for (CloseIntegerPoint point : p) {\n                euclideanPoints.add(point.euclideanPoint);\n            }\n            return new CloseIntegerPoint(euclideanPoint.centroidOf(euclideanPoints));\n        }\n",
        "begin_line": 184,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 185,col 13)-(line 186,col 55)",
            "(line 187,col 13)-(line 189,col 13)",
            "(line 190,col 13)-(line 190,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof CloseIntegerPoint)) {\n                return false;\n            }\n            CloseIntegerPoint p = (CloseIntegerPoint) o;\n\n            return euclideanPoint.equals(p.euclideanPoint);\n        }\n",
        "begin_line": 193,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 195,col 13)-(line 197,col 13)",
            "(line 198,col 13)-(line 198,col 56)",
            "(line 200,col 13)-(line 200,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.CloseIntegerPoint.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return euclideanPoint.hashCode();\n        }\n",
        "begin_line": 203,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances()",
        "snippet": "    @Test\n    public void testSmallDistances() {\n        // Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n        // small distance.\n        int[] repeatedArray = { 0 };\n        int[] uniqueArray = { 1 };\n        CloseIntegerPoint repeatedPoint =\n            new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\n        CloseIntegerPoint uniquePoint =\n            new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n\n        Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\n        final int NUM_REPEATED_POINTS = 10 * 1000;\n        for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\n            points.add(repeatedPoint);\n        }\n        points.add(uniquePoint);\n\n        // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n        // cluster centers).\n        final long RANDOM_SEED = 0;\n        final int NUM_CLUSTERS = 2;\n        final int NUM_ITERATIONS = 0;\n        KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\n            new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\n        List<Cluster<CloseIntegerPoint>> clusters =\n            clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n\n        // Check that one of the chosen centers is the unique point.\n        boolean uniquePointIsCenter = false;\n        for (Cluster<CloseIntegerPoint> cluster : clusters) {\n            if (cluster.getCenter().equals(uniquePoint)) {\n                uniquePointIsCenter = true;\n            }\n        }\n        assertTrue(uniquePointIsCenter);\n    }\n",
        "begin_line": 214,
        "end_line": 250,
        "comment": "\n     * Test points that are very close together. See issue MATH-546.\n     ",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 36)",
            "(line 219,col 9)-(line 219,col 34)",
            "(line 220,col 9)-(line 221,col 76)",
            "(line 222,col 9)-(line 223,col 74)",
            "(line 225,col 9)-(line 225,col 82)",
            "(line 226,col 9)-(line 226,col 50)",
            "(line 227,col 9)-(line 229,col 9)",
            "(line 230,col 9)-(line 230,col 32)",
            "(line 234,col 9)-(line 234,col 35)",
            "(line 235,col 9)-(line 235,col 35)",
            "(line 236,col 9)-(line 236,col 37)",
            "(line 237,col 9)-(line 238,col 84)",
            "(line 239,col 9)-(line 240,col 68)",
            "(line 243,col 9)-(line 243,col 44)",
            "(line 244,col 9)-(line 248,col 9)",
            "(line 249,col 9)-(line 249,col 40)"
        ]
    }
]