[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    externs = DEFAULT_EXTERNS;\n    filenames = Maps.newHashMap();\n    lastCompiler = null;\n    lastArg = null;\n    outReader = new ByteArrayOutputStream();\n    errReader = new ByteArrayOutputStream();\n    useStringComparison = false;\n    useModules = ModulePattern.NONE;\n    args.clear();\n    exitCodes = Lists.newArrayList();\n  }\n",
        "begin_line": 110,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 18)",
            "(line 113,col 5)-(line 113,col 30)",
            "(line 114,col 5)-(line 114,col 34)",
            "(line 115,col 5)-(line 115,col 24)",
            "(line 116,col 5)-(line 116,col 19)",
            "(line 117,col 5)-(line 117,col 44)",
            "(line 118,col 5)-(line 118,col 44)",
            "(line 119,col 5)-(line 119,col 32)",
            "(line 120,col 5)-(line 120,col 36)",
            "(line 121,col 5)-(line 121,col 17)",
            "(line 122,col 5)-(line 122,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering1()",
        "snippet": "  public void testWarningGuardOrdering1() {\n    args.add(\"--jscomp_error=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 42)",
            "(line 132,col 5)-(line 132,col 40)",
            "(line 133,col 5)-(line 133,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering2()",
        "snippet": "  public void testWarningGuardOrdering2() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 40)",
            "(line 138,col 5)-(line 138,col 42)",
            "(line 139,col 5)-(line 139,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering3()",
        "snippet": "  public void testWarningGuardOrdering3() {\n    args.add(\"--jscomp_warning=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 142,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 44)",
            "(line 144,col 5)-(line 144,col 40)",
            "(line 145,col 5)-(line 145,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering4()",
        "snippet": "  public void testWarningGuardOrdering4() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_warning=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 40)",
            "(line 150,col 5)-(line 150,col 44)",
            "(line 151,col 5)-(line 151,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSimpleModeLeavesUnusedParams()",
        "snippet": "  public void testSimpleModeLeavesUnusedParams() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    testSame(\"window.f = function(a) {};\");\n  }\n",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 155,col 57)",
            "(line 156,col 5)-(line 156,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testAdvancedModeRemovesUnusedParams()",
        "snippet": "  public void testAdvancedModeRemovesUnusedParams() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"window.f = function(a) {};\", \"window.a = function() {};\");\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 59)",
            "(line 161,col 5)-(line 161,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOffByDefault()",
        "snippet": "  public void testCheckGlobalThisOffByDefault() {\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithAdvancedMode()",
        "snippet": "  public void testCheckGlobalThisOnWithAdvancedMode() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 59)",
            "(line 170,col 5)-(line 170,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithErrorFlag()",
        "snippet": "  public void testCheckGlobalThisOnWithErrorFlag() {\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 42)",
            "(line 175,col 5)-(line 175,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 178,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 40)",
            "(line 180,col 5)-(line 180,col 40)",
            "(line 181,col 5)-(line 181,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 186,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\",\n        \"function a() {}\" +\n        \"a.prototype.a = function(e, d) { alert(d); };\" +\n        \"var b = goog.c.b(a, {a: 1}),c;\" +\n        \"for (c in b) { b[c].call(b); }\" +\n        \"window.Foo = a;\");\n  }\n",
        "begin_line": 189,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 59)",
            "(line 191,col 5)-(line 202,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\n        \"/** @constructor */ function F() { this.a = 0; }\" +\n        \"F.prototype.inc = function() { this.a++; return 10; };\" +\n        \"F.prototype.bar = function() { \" +\n        \"  var c = 3; var val = inc(); this.a += val + c;\" +\n        \"};\" +\n        \"window['f'] = new F();\" +\n        \"window['f']['bar'] = window['f'].bar;\",\n        \"function a(){ this.a = 0; }\" +\n        \"a.prototype.b = function(){ var b=inc(); this.a += b + 3; };\" +\n        \"window.f = new a;\" +\n        \"window.f.bar = window.f.b\");\n  }\n",
        "begin_line": 205,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 59)",
            "(line 207,col 5)-(line 218,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypedAdvanced()",
        "snippet": "  public void testTypedAdvanced() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--use_types_for_optimization\");\n    test(\n        \"/** @constructor */\\n\" +\n        \"function Foo() {}\\n\" +\n        \"Foo.prototype.handle1 = function(x, y) { alert(y); };\\n\" +\n        \"/** @constructor */\\n\" +\n        \"function Bar() {}\\n\" +\n        \"Bar.prototype.handle1 = function(x, y) {};\\n\" +\n        \"new Foo().handle1(1, 2);\\n\" +\n        \"new Bar().handle1(1, 2);\\n\",\n        \"alert(2)\");\n  }\n",
        "begin_line": 221,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 59)",
            "(line 223,col 5)-(line 223,col 45)",
            "(line 224,col 5)-(line 233,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 40)",
            "(line 238,col 5)-(line 238,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOffByDefault()",
        "snippet": "  public void testTypeParsingOffByDefault() {\n    testSame(\"/** @return {number */ function f(a) { return a; }\");\n  }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOnWithVerbose()",
        "snippet": "  public void testTypeParsingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n    test(\"/** @return {n} */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 246,col 40)",
            "(line 247,col 5)-(line 248,col 46)",
            "(line 249,col 5)-(line 250,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 253,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 40)",
            "(line 255,col 5)-(line 255,col 40)",
            "(line 256,col 5)-(line 256,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 259,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 40)",
            "(line 261,col 5)-(line 261,col 62)",
            "(line 263,col 5)-(line 263,col 44)",
            "(line 264,col 5)-(line 265,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 40)",
            "(line 270,col 5)-(line 270,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 273,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 274,col 40)",
            "(line 275,col 5)-(line 275,col 49)",
            "(line 276,col 5)-(line 276,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 279,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 40)",
            "(line 281,col 5)-(line 281,col 43)",
            "(line 282,col 5)-(line 282,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForQuiet()",
        "snippet": "  public void testCheckSymbolsOverrideForQuiet() {\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--jscomp_error=undefinedVars\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 285,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 38)",
            "(line 287,col 5)-(line 287,col 45)",
            "(line 288,col 5)-(line 288,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties1()",
        "snippet": "  public void testCheckUndefinedProperties1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 291,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 40)",
            "(line 293,col 5)-(line 293,col 49)",
            "(line 294,col 5)-(line 294,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties2()",
        "snippet": "  public void testCheckUndefinedProperties2() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 297,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 40)",
            "(line 299,col 5)-(line 299,col 47)",
            "(line 300,col 5)-(line 300,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties3()",
        "snippet": "  public void testCheckUndefinedProperties3() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() {var x = {}; var y = x.bar;}\",\n        TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 303,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 40)",
            "(line 305,col 5)-(line 306,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function f(a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 310,col 68)",
            "(line 311,col 5)-(line 311,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n  }\n",
        "begin_line": 314,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 29)",
            "(line 316,col 5)-(line 316,col 35)",
            "(line 317,col 5)-(line 317,col 20)",
            "(line 317,col 22)-(line 317,col 37)",
            "(line 318,col 5)-(line 318,col 19)",
            "(line 318,col 21)-(line 318,col 36)",
            "(line 319,col 5)-(line 323,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag2()",
        "snippet": "  public void testDefineFlag2() {\n    args.add(\"--define=FOO='x\\\"'\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x\\\\\\\"\\\";\");\n  }\n",
        "begin_line": 326,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 35)",
            "(line 328,col 5)-(line 329,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3()",
        "snippet": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 36)",
            "(line 334,col 5)-(line 335,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 338,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 339,col 5)-(line 339,col 30)",
            "(line 340,col 5)-(line 340,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 343,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 344,col 5)-(line 344,col 60)",
            "(line 345,col 5)-(line 346,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @const \\n * @const */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @const \\n * @const */ var x;\");\n  }\n",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 40)",
            "(line 351,col 5)-(line 352,col 41)",
            "(line 353,col 5)-(line 353,col 38)",
            "(line 354,col 5)-(line 354,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {dom:{}};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 357,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 359,col 33)",
            "(line 360,col 5)-(line 360,col 51)",
            "(line 361,col 5)-(line 361,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGetMsgWiring()",
        "snippet": "  public void testGetMsgWiring() throws Exception {\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\",\n         \"var goog={getMsg:function(a){return a}}, \" +\n         \"MSG_FOO=goog.getMsg('foo');\");\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\" +\n         \"window['foo'] = MSG_FOO;\",\n         \"window.foo = 'foo';\");\n  }\n",
        "begin_line": 364,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 365,col 5)-(line 368,col 40)",
            "(line 369,col 5)-(line 369,col 59)",
            "(line 370,col 5)-(line 373,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCssNameWiring()",
        "snippet": "  public void testCssNameWiring() throws Exception {\n    test(\"var goog = {}; goog.getCssName = function() {};\" +\n         \"goog.setCssNameMapping = function() {};\" +\n         \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n         \"var a = goog.getCssName('goog-button');\" +\n         \"var b = goog.getCssName('css-button');\" +\n         \"var c = goog.getCssName('goog-menu');\" +\n         \"var d = goog.getCssName('css-menu');\",\n         \"var goog = { getCssName: function() {},\" +\n         \"             setCssNameMapping: function() {} },\" +\n         \"    a = 'a-b',\" +\n         \"    b = 'css-b',\" +\n         \"    c = 'a-menu',\" +\n         \"    d = 'css-menu';\");\n  }\n",
        "begin_line": 376,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 389,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70a()",
        "snippet": "  public void testIssue70a() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 396,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 397,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70b()",
        "snippet": "  public void testIssue70b() {\n    test(\"function foo([]) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 401,col 5)-(line 401,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 404,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 405,col 59)",
            "(line 406,col 5)-(line 406,col 31)",
            "(line 407,col 5)-(line 408,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--jscomp_off=es5Strict\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 411,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 412,col 5)-(line 412,col 57)",
            "(line 413,col 5)-(line 413,col 39)",
            "(line 414,col 5)-(line 414,col 40)",
            "(line 415,col 5)-(line 422,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue297()",
        "snippet": "  public void testIssue297() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n         \"}\",\n         \"function f(b) {\" +\n         \" var a;\" +\n         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && 0<a);\" +\n         \"}\");\n  }\n",
        "begin_line": 425,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 426,col 57)",
            "(line 427,col 5)-(line 434,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"element.offsetWidth;\",\n         \"element.offsetWidth\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 437,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 438,col 5)-(line 438,col 59)",
            "(line 439,col 5)-(line 440,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504()",
        "snippet": "  public void testIssue504() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"void function() { alert('hi'); }();\",\n         \"alert('hi');void 0\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 443,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 444,col 59)",
            "(line 445,col 5)-(line 446,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601()",
        "snippet": "  public void testIssue601() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"function f(){return'\\\\v'=='v'}window['f']=f\");\n  }\n",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 450,col 5)-(line 450,col 52)",
            "(line 451,col 5)-(line 452,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601b()",
        "snippet": "  public void testIssue601b() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\v'=='v'}\");\n  }\n",
        "begin_line": 455,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 456,col 59)",
            "(line 457,col 5)-(line 458,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601c()",
        "snippet": "  public void testIssue601c() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\u000B' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\u000B'=='v'}\");\n  }\n",
        "begin_line": 461,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 462,col 59)",
            "(line 463,col 5)-(line 464,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue846()",
        "snippet": "  public void testIssue846() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    testSame(\n        \"try { new Function('this is an error'); } catch(a) { alert('x'); }\");\n  }\n",
        "begin_line": 467,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 468,col 59)",
            "(line 469,col 5)-(line 470,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    test(\"function foo(a) {}\",\n         \"function foo(a) {}\");\n  }\n",
        "begin_line": 473,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 474,col 5)-(line 474,col 57)",
            "(line 475,col 5)-(line 475,col 30)",
            "(line 476,col 5)-(line 477,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 57)",
            "(line 482,col 5)-(line 482,col 29)",
            "(line 483,col 5)-(line 484,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {}\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"throw (new function() {}).a;\");\n  }\n",
        "begin_line": 487,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 59)",
            "(line 489,col 5)-(line 489,col 38)",
            "(line 490,col 5)-(line 490,col 30)",
            "(line 491,col 5)-(line 494,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {}\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"throw (new function Foo() {}).$x$;\");\n  }\n",
        "begin_line": 497,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 498,col 59)",
            "(line 499,col 5)-(line 499,col 38)",
            "(line 500,col 5)-(line 500,col 29)",
            "(line 501,col 5)-(line 504,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag1()",
        "snippet": "  public void testBooleanFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 507,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 508,col 57)",
            "(line 509,col 5)-(line 509,col 24)",
            "(line 510,col 5)-(line 511,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag2()",
        "snippet": "  public void testBooleanFlag2() {\n    args.add(\"--debug\");\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 514,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 24)",
            "(line 516,col 5)-(line 516,col 57)",
            "(line 517,col 5)-(line 518,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHelpFlag()",
        "snippet": "  public void testHelpFlag() {\n    args.add(\"--help\");\n    assertFalse(\n        createCommandLineRunner(\n            new String[] {\"function f() {}\"}).shouldRunCompiler());\n  }\n",
        "begin_line": 521,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 522,col 23)",
            "(line 523,col 5)-(line 525,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting1()",
        "snippet": "  public void testExternsLifting1() throws Exception{\n    String code = \"/** @externs */ function f() {}\";\n    test(new String[] {code},\n         new String[] {});\n\n    assertEquals(2, lastCompiler.getExternsForTesting().size());\n\n    CompilerInput extern = lastCompiler.getExternsForTesting().get(1);\n    assertNull(extern.getModule());\n    assertTrue(extern.isExtern());\n    assertEquals(code, extern.getCode());\n\n    assertEquals(1, lastCompiler.getInputsForTesting().size());\n\n    CompilerInput input = lastCompiler.getInputsForTesting().get(0);\n    assertNotNull(input.getModule());\n    assertFalse(input.isExtern());\n    assertEquals(\"\", input.getCode());\n  }\n",
        "begin_line": 528,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 529,col 5)-(line 529,col 52)",
            "(line 530,col 5)-(line 531,col 26)",
            "(line 533,col 5)-(line 533,col 64)",
            "(line 535,col 5)-(line 535,col 70)",
            "(line 536,col 5)-(line 536,col 35)",
            "(line 537,col 5)-(line 537,col 34)",
            "(line 538,col 5)-(line 538,col 41)",
            "(line 540,col 5)-(line 540,col 63)",
            "(line 542,col 5)-(line 542,col 68)",
            "(line 543,col 5)-(line 543,col 37)",
            "(line 544,col 5)-(line 544,col 34)",
            "(line 545,col 5)-(line 545,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting2()",
        "snippet": "  public void testExternsLifting2() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\"/** @externs */ function f() {}\", \"f(3);\"},\n         new String[] {\"f(3);\"},\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 548,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 40)",
            "(line 550,col 5)-(line 552,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOff()",
        "snippet": "  public void testSourceSortingOff() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    testSame(\n        new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n        });\n  }\n",
        "begin_line": 555,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 556,col 52)",
            "(line 557,col 5)-(line 561,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn()",
        "snippet": "  public void testSourceSortingOn() {\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 564,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 572,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn2()",
        "snippet": "  public void testSourceSortingOn2() {\n    test(new String[] {\n          \"goog.provide('a');\",\n          \"goog.require('a');\\n\" +\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n           \"var a={};\",\n           \"var COMPILED=!1\"\n         });\n  }\n",
        "begin_line": 575,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 584,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn3()",
        "snippet": "  public void testSourceSortingOn3() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.addDependency('sym', [], []);\\nvar x = 3;\",\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n          \"var COMPILED = !1;\",\n          \"var x = 3;\"\n         });\n  }\n",
        "begin_line": 587,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 588,col 5)-(line 588,col 51)",
            "(line 589,col 5)-(line 596,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps1()",
        "snippet": "  public void testSourceSortingCircularDeps1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 599,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 600,col 5)-(line 600,col 51)",
            "(line 601,col 5)-(line 606,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps2()",
        "snippet": "  public void testSourceSortingCircularDeps2() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('roses.lime.juice');\",\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\",\n          \"goog.provide('gimlet');\" +\n          \"     goog.require('gin'); goog.require('roses.lime.juice');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 609,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 51)",
            "(line 611,col 5)-(line 619,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn1()",
        "snippet": "  public void testSourcePruningOn1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 622,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 623,col 51)",
            "(line 624,col 5)-(line 632,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn2()",
        "snippet": "  public void testSourcePruningOn2() {\n    args.add(\"--closure_entry_point=guinness\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var guinness = {};\"\n         });\n  }\n",
        "begin_line": 635,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 636,col 47)",
            "(line 637,col 5)-(line 645,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn3()",
        "snippet": "  public void testSourcePruningOn3() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 648,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 649,col 45)",
            "(line 650,col 5)-(line 657,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn4()",
        "snippet": "  public void testSourcePruningOn4() {\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 660,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 661,col 45)",
            "(line 662,col 5)-(line 662,col 43)",
            "(line 663,col 5)-(line 671,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn5()",
        "snippet": "  public void testSourcePruningOn5() {\n    args.add(\"--closure_entry_point=shiraz\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         Compiler.MISSING_ENTRY_ERROR);\n  }\n",
        "begin_line": 674,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 675,col 5)-(line 675,col 45)",
            "(line 676,col 5)-(line 681,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn6()",
        "snippet": "  public void testSourcePruningOn6() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 684,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 685,col 5)-(line 685,col 45)",
            "(line 686,col 5)-(line 695,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn7()",
        "snippet": "  public void testSourcePruningOn7() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n          \"var COMPILED = !1;\",\n         });\n  }\n",
        "begin_line": 698,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 51)",
            "(line 700,col 5)-(line 705,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn8()",
        "snippet": "  public void testSourcePruningOn8() {\n    args.add(\"--only_closure_dependencies\");\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"/** @externs */\\n\" +\n          \"var externVar;\",\n          \"goog.provide('scotch'); var x = externVar;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = externVar;\",\n         });\n  }\n",
        "begin_line": 708,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 709,col 5)-(line 709,col 44)",
            "(line 710,col 5)-(line 710,col 45)",
            "(line 711,col 5)-(line 711,col 40)",
            "(line 712,col 5)-(line 719,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoCompile()",
        "snippet": "  public void testNoCompile() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"/** @nocompile */\\n\" +\n          \"goog.provide('x');\\n\" +\n          \"var dupeVar;\",\n          \"var dupeVar;\"\n         },\n         new String[] {\n           \"var dupeVar;\"\n         });\n  }\n",
        "begin_line": 722,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 723,col 40)",
            "(line 724,col 5)-(line 732,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDependencySortingWhitespaceMode()",
        "snippet": "  public void testDependencySortingWhitespaceMode() {\n    args.add(\"--manage_closure_dependencies\");\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.provide('hops');\",\n         },\n         new String[] {\n          \"goog.provide('hops');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.require('beer');\"\n         });\n  }\n",
        "begin_line": 735,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 736,col 5)-(line 736,col 46)",
            "(line 737,col 5)-(line 737,col 52)",
            "(line 738,col 5)-(line 747,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testForwardDeclareDroppedTypes()",
        "snippet": "  public void testForwardDeclareDroppedTypes() {\n    args.add(\"--manage_closure_dependencies=true\");\n\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\",\n          \"goog.provide('Scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {}; function f(a) {}\",\n           \"\"\n         });\n\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n         },\n         new String[] {\n           \"var beer = {}; function f(a) {}\",\n           \"\"\n         },\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 750,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 751,col 51)",
            "(line 753,col 5)-(line 753,col 40)",
            "(line 754,col 5)-(line 762,col 12)",
            "(line 764,col 5)-(line 772,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesEmptyEntryPoints()",
        "snippet": "  public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception {\n    // Prevents this from trying to load externs.zip\n    args.add(\"--use_only_custom_externs=true\");\n\n    args.add(\"--only_closure_dependencies=true\");\n    try {\n      CommandLineRunner runner = createCommandLineRunner(new String[0]);\n      runner.doRun();\n      fail(\"Expected FlagUsageException\");\n    } catch (FlagUsageException e) {\n      assertTrue(e.getMessage(),\n          e.getMessage().contains(\"only_closure_dependencies\"));\n    }\n  }\n",
        "begin_line": 775,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 777,col 5)-(line 777,col 47)",
            "(line 779,col 5)-(line 779,col 49)",
            "(line 780,col 5)-(line 787,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesOneEntryPoint()",
        "snippet": "  public void testOnlyClosureDependenciesOneEntryPoint() throws Exception {\n    args.add(\"--only_closure_dependencies=true\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.require('beer'); var beerRequired = 1;\",\n          \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n          \"goog.provide('hops'); var hopsProvided = 1;\",\n          \"goog.provide('scotch'); var scotchProvided = 1;\",\n          \"goog.require('scotch');\\nvar includeFileWithoutProvides = 1;\",\n          \"/** This is base.js */\\nvar COMPILED = false;\",\n         },\n         new String[] {\n           \"var COMPILED = !1;\",\n           \"var hops = {}, hopsProvided = 1;\",\n           \"var beer = {}, beerProvided = 1;\"\n         });\n  }\n",
        "begin_line": 790,
        "end_line": 806,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 49)",
            "(line 792,col 5)-(line 792,col 43)",
            "(line 793,col 5)-(line 805,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion1()",
        "snippet": "  public void testSourceMapExpansion1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--create_source_map=%outname%.map\");\n    testSame(\"var x = 3;\");\n    assertEquals(\"/path/to/out.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 808,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 809,col 5)-(line 809,col 33)",
            "(line 810,col 5)-(line 810,col 32)",
            "(line 811,col 5)-(line 811,col 50)",
            "(line 812,col 5)-(line 812,col 27)",
            "(line 813,col 5)-(line 815,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion2()",
        "snippet": "  public void testSourceMapExpansion2() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 818,
        "end_line": 826,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 819,col 37)",
            "(line 820,col 5)-(line 820,col 50)",
            "(line 821,col 5)-(line 821,col 48)",
            "(line 822,col 5)-(line 822,col 56)",
            "(line 823,col 5)-(line 825,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion3()",
        "snippet": "  public void testSourceMapExpansion3() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo_\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo_m0.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(),\n            lastCompiler.getModuleGraph().getRootModule()));\n  }\n",
        "begin_line": 828,
        "end_line": 837,
        "comment": "",
        "child_ranges": [
            "(line 829,col 5)-(line 829,col 37)",
            "(line 830,col 5)-(line 830,col 50)",
            "(line 831,col 5)-(line 831,col 49)",
            "(line 832,col 5)-(line 832,col 56)",
            "(line 833,col 5)-(line 836,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat1()",
        "snippet": "  public void testSourceMapFormat1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.DEFAULT,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 839,
        "end_line": 845,
        "comment": "",
        "child_ranges": [
            "(line 840,col 5)-(line 840,col 33)",
            "(line 841,col 5)-(line 841,col 32)",
            "(line 842,col 5)-(line 842,col 27)",
            "(line 843,col 5)-(line 844,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat2()",
        "snippet": "  public void testSourceMapFormat2() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--source_map_format=V3\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.V3,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 847,
        "end_line": 854,
        "comment": "",
        "child_ranges": [
            "(line 848,col 5)-(line 848,col 33)",
            "(line 849,col 5)-(line 849,col 32)",
            "(line 850,col 5)-(line 850,col 39)",
            "(line 851,col 5)-(line 851,col 27)",
            "(line 852,col 5)-(line 853,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleWrapperBaseNameExpansion()",
        "snippet": "  public void testModuleWrapperBaseNameExpansion() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--module_wrapper=m0:%s // %basename%\");\n    testSame(new String[] {\n      \"var x = 3;\",\n      \"var y = 4;\"\n    });\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.writeModuleOutput(\n        builder,\n        lastCompiler.getModuleGraph().getRootModule());\n    assertEquals(\"var x=3; // m0.js\\n\", builder.toString());\n  }\n",
        "begin_line": 856,
        "end_line": 869,
        "comment": "",
        "child_ranges": [
            "(line 857,col 5)-(line 857,col 37)",
            "(line 858,col 5)-(line 858,col 53)",
            "(line 859,col 5)-(line 862,col 7)",
            "(line 864,col 5)-(line 864,col 48)",
            "(line 865,col 5)-(line 867,col 55)",
            "(line 868,col 5)-(line 868,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion()",
        "snippet": "  public void testCharSetExpansion() {\n    testSame(\"\");\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n  }\n",
        "begin_line": 871,
        "end_line": 877,
        "comment": "",
        "child_ranges": [
            "(line 872,col 5)-(line 872,col 17)",
            "(line 873,col 5)-(line 873,col 70)",
            "(line 874,col 5)-(line 874,col 32)",
            "(line 875,col 5)-(line 875,col 17)",
            "(line 876,col 5)-(line 876,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testChainModuleManifest()",
        "snippet": "  public void testChainModuleManifest() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m1}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m2}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 879,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 880,col 5)-(line 880,col 37)",
            "(line 881,col 5)-(line 882,col 67)",
            "(line 884,col 5)-(line 884,col 48)",
            "(line 885,col 5)-(line 886,col 54)",
            "(line 887,col 5)-(line 899,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testStarModuleManifest()",
        "snippet": "  public void testStarModuleManifest() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m0}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m0}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 902,
        "end_line": 923,
        "comment": "",
        "child_ranges": [
            "(line 903,col 5)-(line 903,col 36)",
            "(line 904,col 5)-(line 905,col 67)",
            "(line 907,col 5)-(line 907,col 48)",
            "(line 908,col 5)-(line 909,col 54)",
            "(line 910,col 5)-(line 922,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOutputModuleGraphJson()",
        "snippet": "  public void testOutputModuleGraphJson() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n        \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphJsonTo(\n        lastCompiler.getModuleGraph(), builder);\n    assertTrue(builder.toString().indexOf(\"transitive-dependencies\") != -1);\n  }\n",
        "begin_line": 925,
        "end_line": 934,
        "comment": "",
        "child_ranges": [
            "(line 926,col 5)-(line 926,col 36)",
            "(line 927,col 5)-(line 928,col 65)",
            "(line 930,col 5)-(line 930,col 48)",
            "(line 931,col 5)-(line 932,col 48)",
            "(line 933,col 5)-(line 933,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag()",
        "snippet": "  public void testVersionFlag() {\n    args.add(\"--version\");\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 936,
        "end_line": 944,
        "comment": "",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 26)",
            "(line 938,col 5)-(line 938,col 17)",
            "(line 939,col 5)-(line 943,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag2()",
        "snippet": "  public void testVersionFlag2() {\n    lastArg = \"--version\";\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 946,
        "end_line": 954,
        "comment": "",
        "child_ranges": [
            "(line 947,col 5)-(line 947,col 26)",
            "(line 948,col 5)-(line 948,col 17)",
            "(line 949,col 5)-(line 953,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testPrintAstFlag()",
        "snippet": "  public void testPrintAstFlag() {\n    args.add(\"--print_ast=true\");\n    testSame(\"\");\n    assertEquals(\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node1 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> RETURN [label=\\\"SYN_BLOCK\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\\n\",\n        new String(outReader.toByteArray()));\n  }\n",
        "begin_line": 956,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 957,col 5)-(line 957,col 33)",
            "(line 958,col 5)-(line 958,col 17)",
            "(line 959,col 5)-(line 972,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSyntheticExterns()",
        "snippet": "  public void testSyntheticExterns() {\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"myVar.property;\"));\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         \"var theirVar={},myVar={},yourVar={};\");\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var myVar = {};\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 975,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 977,col 59)",
            "(line 978,col 5)-(line 979,col 46)",
            "(line 981,col 5)-(line 981,col 47)",
            "(line 982,col 5)-(line 982,col 40)",
            "(line 983,col 5)-(line 984,col 49)",
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 987,col 40)",
            "(line 988,col 5)-(line 989,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGoogAssertStripping()",
        "snippet": "  public void testGoogAssertStripping() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"goog.asserts.assert(false)\",\n         \"\");\n    args.add(\"--debug\");\n    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n  }\n",
        "begin_line": 992,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 993,col 5)-(line 993,col 59)",
            "(line 994,col 5)-(line 995,col 13)",
            "(line 996,col 5)-(line 996,col 24)",
            "(line 997,col 5)-(line 997,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testMissingReturnCheckOnWithVerbose()",
        "snippet": "  public void testMissingReturnCheckOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number} */ function f() {f()} f();\",\n        CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 1000,
        "end_line": 1004,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1001,col 40)",
            "(line 1002,col 5)-(line 1003,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGenerateExports()",
        "snippet": "  public void testGenerateExports() {\n    args.add(\"--generate_exports=true\");\n    test(\"/** @export */ foo.prototype.x = function() {};\",\n        \"foo.prototype.x=function(){};\"+\n        \"goog.exportSymbol(\\\"foo.prototype.x\\\",foo.prototype.x);\");\n  }\n",
        "begin_line": 1006,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 1007,col 5)-(line 1007,col 40)",
            "(line 1008,col 5)-(line 1010,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDepreciationWithVerbose()",
        "snippet": "  public void testDepreciationWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @deprecated */ function f() {}; f()\",\n       CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 1013,
        "end_line": 1017,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1014,col 40)",
            "(line 1015,col 5)-(line 1016,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTwoParseErrors()",
        "snippet": "  public void testTwoParseErrors() {\n    // If parse errors are reported in different files, make\n    // sure all of them are reported.\n    Compiler compiler = compile(new String[] {\n      \"var a b;\",\n      \"var b c;\"\n    });\n    assertEquals(2, compiler.getErrors().length);\n  }\n",
        "begin_line": 1019,
        "end_line": 1027,
        "comment": "",
        "child_ranges": [
            "(line 1022,col 5)-(line 1025,col 7)",
            "(line 1026,col 5)-(line 1026,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES3ByDefault()",
        "snippet": "  public void testES3ByDefault() {\n    test(\"var x = f.function\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1029,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1030,col 5)-(line 1030,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5ChecksByDefault()",
        "snippet": "  public void testES5ChecksByDefault() {\n    testSame(\"var x = 3; delete x;\");\n  }\n",
        "begin_line": 1033,
        "end_line": 1035,
        "comment": "",
        "child_ranges": [
            "(line 1034,col 5)-(line 1034,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5ChecksInVerbose()",
        "snippet": "  public void testES5ChecksInVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { delete x; }\", StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1037,
        "end_line": 1040,
        "comment": "",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 40)",
            "(line 1039,col 5)-(line 1039,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5()",
        "snippet": "  public void testES5() {\n    args.add(\"--language_in=ECMASCRIPT5\");\n    test(\"var x = f.function\", \"var x = f.function\");\n    test(\"var let\", \"var let\");\n  }\n",
        "begin_line": 1042,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1043,col 5)-(line 1043,col 42)",
            "(line 1044,col 5)-(line 1044,col 53)",
            "(line 1045,col 5)-(line 1045,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5Strict()",
        "snippet": "  public void testES5Strict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    test(\"var x = f.function\", \"'use strict';var x = f.function\");\n    test(\"var let\", RhinoErrorReporter.PARSE_ERROR);\n    test(\"function f(x) { delete x; }\", StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1048,
        "end_line": 1053,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1049,col 49)",
            "(line 1050,col 5)-(line 1050,col 66)",
            "(line 1051,col 5)-(line 1051,col 52)",
            "(line 1052,col 5)-(line 1052,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrict()",
        "snippet": "  public void testES5StrictUseStrict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n  }\n",
        "begin_line": 1055,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 5)-(line 1056,col 49)",
            "(line 1057,col 5)-(line 1057,col 69)",
            "(line 1058,col 5)-(line 1058,col 46)",
            "(line 1059,col 5)-(line 1059,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrictMultipleInputs()",
        "snippet": "  public void testES5StrictUseStrictMultipleInputs() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\",\n        \"var y = f.function\", \"var z = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n    assertEquals(outputSource.substring(13).indexOf(\"'use strict'\"), -1);\n  }\n",
        "begin_line": 1062,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 49)",
            "(line 1064,col 5)-(line 1065,col 53)",
            "(line 1066,col 5)-(line 1066,col 46)",
            "(line 1067,col 5)-(line 1067,col 64)",
            "(line 1068,col 5)-(line 1068,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordDefault()",
        "snippet": "  public void testWithKeywordDefault() {\n    test(\"var x = {}; with (x) {}\", ControlStructureCheck.USE_OF_WITH);\n  }\n",
        "begin_line": 1071,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordWithEs5ChecksOff()",
        "snippet": "  public void testWithKeywordWithEs5ChecksOff() {\n    args.add(\"--jscomp_off=es5Strict\");\n    testSame(\"var x = {}; with (x) {}\");\n  }\n",
        "begin_line": 1075,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 5)-(line 1076,col 39)",
            "(line 1077,col 5)-(line 1077,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoSrCFilesWithManifest()",
        "snippet": "  public void testNoSrCFilesWithManifest() throws IOException {\n    args.add(\"--use_only_custom_externs=true\");\n    args.add(\"--output_manifest=test.MF\");\n    CommandLineRunner runner = createCommandLineRunner(new String[0]);\n    String expectedMessage = \"\";\n    try {\n      runner.doRun();\n    } catch (FlagUsageException e) {\n      expectedMessage = e.getMessage();\n    }\n    assertEquals(expectedMessage, \"Bad --js flag. \" +\n      \"Manifest files cannot be generated when the input is from stdin.\");\n  }\n",
        "begin_line": 1080,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 5)-(line 1081,col 47)",
            "(line 1082,col 5)-(line 1082,col 42)",
            "(line 1083,col 5)-(line 1083,col 70)",
            "(line 1084,col 5)-(line 1084,col 32)",
            "(line 1085,col 5)-(line 1089,col 5)",
            "(line 1090,col 5)-(line 1091,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMD()",
        "snippet": "  public void testTransformAMD() {\n    args.add(\"--transform_amd_modules\");\n    test(\"define({test: 1})\", \"exports = {test: 1}\");\n  }\n",
        "begin_line": 1094,
        "end_line": 1097,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 5)-(line 1095,col 40)",
            "(line 1096,col 5)-(line 1096,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS()",
        "snippet": "  public void testProcessCJS() {\n    useStringComparison = true;\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    String expected = \"var module$foo$bar={test:1};\";\n    test(\"exports.test = 1\", expected);\n    assertEquals(expected + \"\\n\", outReader.toString());\n  }\n",
        "begin_line": 1099,
        "end_line": 1107,
        "comment": "",
        "child_ranges": [
            "(line 1100,col 5)-(line 1100,col 31)",
            "(line 1101,col 5)-(line 1101,col 44)",
            "(line 1102,col 5)-(line 1102,col 49)",
            "(line 1103,col 5)-(line 1103,col 33)",
            "(line 1104,col 5)-(line 1104,col 53)",
            "(line 1105,col 5)-(line 1105,col 39)",
            "(line 1106,col 5)-(line 1106,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJSWithModuleOutput()",
        "snippet": "  public void testProcessCJSWithModuleOutput() {\n    useStringComparison = true;\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    args.add(\"--module=auto\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"exports.test = 1\",\n        \"var module$foo$bar={test:1};\");\n    // With modules=auto no direct output is created.\n    assertEquals(\"\", outReader.toString());\n  }\n",
        "begin_line": 1109,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 31)",
            "(line 1111,col 5)-(line 1111,col 44)",
            "(line 1112,col 5)-(line 1112,col 49)",
            "(line 1113,col 5)-(line 1113,col 30)",
            "(line 1114,col 5)-(line 1114,col 33)",
            "(line 1115,col 5)-(line 1116,col 40)",
            "(line 1118,col 5)-(line 1118,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFormattingSingleQuote()",
        "snippet": "  public void testFormattingSingleQuote() {\n    testSame(\"var x = '';\");\n    assertEquals(\"var x=\\\"\\\";\", lastCompiler.toSource());\n\n    args.add(\"--formatting=SINGLE_QUOTES\");\n    testSame(\"var x = '';\");\n    assertEquals(\"var x='';\", lastCompiler.toSource());\n  }\n",
        "begin_line": 1121,
        "end_line": 1128,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1122,col 28)",
            "(line 1123,col 5)-(line 1123,col 57)",
            "(line 1125,col 5)-(line 1125,col 43)",
            "(line 1126,col 5)-(line 1126,col 28)",
            "(line 1127,col 5)-(line 1127,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS()",
        "snippet": "  public void testTransformAMDAndProcessCJS() {\n    useStringComparison = true;\n    args.add(\"--transform_amd_modules\");\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"define({foo: 1})\",\n        \"var module$foo$bar={},module$foo$bar={foo:1};\");\n  }\n",
        "begin_line": 1130,
        "end_line": 1138,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 5)-(line 1131,col 31)",
            "(line 1132,col 5)-(line 1132,col 40)",
            "(line 1133,col 5)-(line 1133,col 44)",
            "(line 1134,col 5)-(line 1134,col 49)",
            "(line 1135,col 5)-(line 1135,col 33)",
            "(line 1136,col 5)-(line 1137,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleJSON()",
        "snippet": "  public void testModuleJSON() {\n    useStringComparison = true;\n    args.add(\"--transform_amd_modules\");\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    args.add(\"--output_module_dependencies=test.json\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"define({foo: 1})\",\n        \"var module$foo$bar={},module$foo$bar={foo:1};\");\n  }\n",
        "begin_line": 1140,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1141,col 5)-(line 1141,col 31)",
            "(line 1142,col 5)-(line 1142,col 40)",
            "(line 1143,col 5)-(line 1143,col 44)",
            "(line 1144,col 5)-(line 1144,col 49)",
            "(line 1145,col 5)-(line 1145,col 55)",
            "(line 1146,col 5)-(line 1146,col 33)",
            "(line 1147,col 5)-(line 1148,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOutputSameAsInput()",
        "snippet": "  public void testOutputSameAsInput() {\n    args.add(\"--js_output_file=\" + getFilename(0));\n    test(\"\", AbstractCommandLineRunner.OUTPUT_SAME_AS_INPUT_ERROR);\n  }\n",
        "begin_line": 1151,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1152,col 5)-(line 1152,col 51)",
            "(line 1153,col 5)-(line 1153,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 1158,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1159,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 1162,
        "end_line": 1164,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 5)-(line 1163,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 1166,
        "end_line": 1168,
        "comment": "",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    test(original, compiled, null);\n  }\n",
        "begin_line": 1174,
        "end_line": 1176,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1175,col 5)-(line 1175,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, String[] compiled,\n                    DiagnosticType warning) {\n    Compiler compiler = compile(original);\n\n    if (warning == null) {\n      assertEquals(\"Expected no warnings or errors\\n\" +\n          \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n          \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          0, compiler.getErrors().length + compiler.getWarnings().length);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 1184,
        "end_line": 1208,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   * If {@code warning} is non-null, we will also check if the given\n   * warning type was emitted.\n   ",
        "child_ranges": [
            "(line 1186,col 5)-(line 1186,col 42)",
            "(line 1188,col 5)-(line 1196,col 5)",
            "(line 1198,col 5)-(line 1198,col 50)",
            "(line 1199,col 5)-(line 1207,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 1213,
        "end_line": 1215,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1214,col 5)-(line 1214,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, String expected, DiagnosticType warning) {\n    test(new String[] { original }, new String[] { expected }, warning);\n  }\n",
        "begin_line": 1217,
        "end_line": 1219,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1218,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n\n    assertTrue(exitCodes.size() > 0);\n    int lastExitCode = exitCodes.get(exitCodes.size() - 1);\n\n    if (compiler.getErrors().length > 0) {\n      assertEquals(1, compiler.getErrors().length);\n      assertEquals(warning, compiler.getErrors()[0].getType());\n      assertEquals(1, lastExitCode);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n      assertEquals(0, lastExitCode);\n    }\n  }\n",
        "begin_line": 1224,
        "end_line": 1243,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1225,col 5)-(line 1225,col 42)",
            "(line 1226,col 5)-(line 1229,col 72)",
            "(line 1231,col 5)-(line 1231,col 37)",
            "(line 1232,col 5)-(line 1232,col 59)",
            "(line 1234,col 5)-(line 1242,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.createCommandLineRunner(java.lang.String[])",
        "snippet": "  private CommandLineRunner createCommandLineRunner(String[] original) {\n    for (int i = 0; i < original.length; i++) {\n      args.add(\"--js\");\n      args.add(\"/path/to/input\" + i + \".js\");\n      if (useModules == ModulePattern.CHAIN) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? (\":m\" + (i - 1)) : \"\"));\n      } else if (useModules == ModulePattern.STAR) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? \":m0\" : \"\"));\n      }\n    }\n\n    if (lastArg != null) {\n      args.add(lastArg);\n    }\n\n    String[] argStrings = args.toArray(new String[] {});\n    return new CommandLineRunner(\n        argStrings,\n        new PrintStream(outReader),\n        new PrintStream(errReader));\n  }\n",
        "begin_line": 1245,
        "end_line": 1267,
        "comment": "",
        "child_ranges": [
            "(line 1246,col 5)-(line 1256,col 5)",
            "(line 1258,col 5)-(line 1260,col 5)",
            "(line 1262,col 5)-(line 1262,col 56)",
            "(line 1263,col 5)-(line 1266,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CommandLineRunner runner = createCommandLineRunner(original);\n    assertTrue(new String(errReader.toByteArray()), runner.shouldRunCompiler());\n    Supplier<List<SourceFile>> inputsSupplier = null;\n    Supplier<List<JSModule>> modulesSupplier = null;\n\n    if (useModules == ModulePattern.NONE) {\n      List<SourceFile> inputs = Lists.newArrayList();\n      for (int i = 0; i < original.length; i++) {\n        inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n      }\n      inputsSupplier = Suppliers.ofInstance(inputs);\n    } else if (useModules == ModulePattern.STAR) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleStar(original)));\n    } else if (useModules == ModulePattern.CHAIN) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleChain(original)));\n    } else {\n      throw new IllegalArgumentException(\"Unknown module type: \" + useModules);\n    }\n\n    runner.enableTestMode(\n        Suppliers.<List<SourceFile>>ofInstance(externs),\n        inputsSupplier,\n        modulesSupplier,\n        new Function<Integer, Boolean>() {\n          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n        });\n    runner.run();\n    lastCompiler = runner.getCompiler();\n    lastCommandLineRunner = runner;\n    return lastCompiler;\n  }\n",
        "begin_line": 1269,
        "end_line": 1307,
        "comment": "",
        "child_ranges": [
            "(line 1270,col 5)-(line 1270,col 65)",
            "(line 1271,col 5)-(line 1271,col 80)",
            "(line 1272,col 5)-(line 1272,col 53)",
            "(line 1273,col 5)-(line 1273,col 52)",
            "(line 1275,col 5)-(line 1291,col 5)",
            "(line 1293,col 5)-(line 1302,col 11)",
            "(line 1303,col 5)-(line 1303,col 17)",
            "(line 1304,col 5)-(line 1304,col 40)",
            "(line 1305,col 5)-(line 1305,col 35)",
            "(line 1306,col 5)-(line 1306,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.Anonymous-615cf194-8791-4041-9739-a9eaae313183.apply(java.lang.Integer)",
        "snippet": "          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n",
        "begin_line": 1298,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1300,col 13)-(line 1300,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = new CommandLineRunner(argStrings);\n    Compiler compiler = runner.createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n    }\n    CompilerOptions options = new CompilerOptions();\n    // ECMASCRIPT5 is the most forgiving.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.init(externs, inputs, options);\n    Node all = compiler.parseInputs();\n    Preconditions.checkState(compiler.getErrorCount() == 0);\n    Preconditions.checkNotNull(all);\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 1309,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1310,col 5)-(line 1310,col 56)",
            "(line 1311,col 5)-(line 1311,col 65)",
            "(line 1312,col 5)-(line 1312,col 48)",
            "(line 1313,col 5)-(line 1313,col 51)",
            "(line 1314,col 5)-(line 1316,col 5)",
            "(line 1317,col 5)-(line 1317,col 52)",
            "(line 1319,col 5)-(line 1319,col 52)",
            "(line 1320,col 5)-(line 1320,col 44)",
            "(line 1321,col 5)-(line 1321,col 38)",
            "(line 1322,col 5)-(line 1322,col 60)",
            "(line 1323,col 5)-(line 1323,col 36)",
            "(line 1324,col 5)-(line 1324,col 32)",
            "(line 1325,col 5)-(line 1325,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setFilename(int, java.lang.String)",
        "snippet": "  private void setFilename(int i, String filename) {\n    this.filenames.put(i, filename);\n  }\n",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1329,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.getFilename(int)",
        "snippet": "  private String getFilename(int i) {\n    if (filenames.isEmpty()) {\n      return \"input\" + i;\n    }\n    return filenames.get(i);\n  }\n",
        "begin_line": 1332,
        "end_line": 1337,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 5)-(line 1335,col 5)",
            "(line 1336,col 5)-(line 1336,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstructorCycle()",
        "snippet": "  public void testConstructorCycle() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options,\n        \"/** @return {function()} */ var AsyncTestCase = function() {};\\n\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" */ Foo = /** @type {function(new:Foo)} */ (AyncTestCase());\",\n        RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 41,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 54)",
            "(line 43,col 5)-(line 43,col 30)",
            "(line 44,col 5)-(line 49,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424()",
        "snippet": "  public void testBug1949424() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO'); FOO.bar = 3;\",\n         CLOSURE_COMPILED + \"var FOO$bar = 3;\");\n  }\n",
        "begin_line": 52,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 54)",
            "(line 54,col 5)-(line 54,col 38)",
            "(line 55,col 5)-(line 55,col 31)",
            "(line 56,col 5)-(line 57,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424_v2()",
        "snippet": "  public void testBug1949424_v2() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO.BAR'); FOO.BAR = 3;\",\n         CLOSURE_COMPILED + \"var FOO$BAR = 3;\");\n  }\n",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 54)",
            "(line 62,col 5)-(line 62,col 38)",
            "(line 63,col 5)-(line 63,col 31)",
            "(line 64,col 5)-(line 65,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1956277()",
        "snippet": "  public void testBug1956277() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    test(options, \"var CONST = {}; CONST.bar = null;\" +\n         \"function f(url) { CONST.bar = url; }\",\n         \"var CONST$bar = null; function f(url) { CONST$bar = url; }\");\n  }\n",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 54)",
            "(line 70,col 5)-(line 70,col 38)",
            "(line 71,col 5)-(line 71,col 35)",
            "(line 72,col 5)-(line 74,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1962380()",
        "snippet": "  public void testBug1962380() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    options.generateExports = true;\n    test(options,\n         CLOSURE_BOILERPLATE + \"/** @export */ goog.CONSTANT = 1;\" +\n         \"var x = goog.CONSTANT;\",\n         \"(function() {})('goog.CONSTANT', 1);\" +\n         \"var x = 1;\");\n  }\n",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 54)",
            "(line 79,col 5)-(line 79,col 38)",
            "(line 80,col 5)-(line 80,col 35)",
            "(line 81,col 5)-(line 81,col 35)",
            "(line 82,col 5)-(line 86,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2410122()",
        "snippet": "  public void testBug2410122() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    options.closurePass = true;\n    test(options,\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"/** @export */ function G() { goog.base(this); } \" +\n         \"goog.inherits(G, F);\",\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"function G() { F.call(this); } \" +\n         \"goog.inherits(G, F); goog.exportSymbol('G', G);\");\n  }\n",
        "begin_line": 89,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 54)",
            "(line 91,col 5)-(line 91,col 35)",
            "(line 92,col 5)-(line 92,col 31)",
            "(line 93,col 5)-(line 101,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.removeDeadCode = true;\n    test(options,\n         \"var x; x && alert(1);\",\n         \"\");\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 54)",
            "(line 106,col 5)-(line 106,col 33)",
            "(line 107,col 5)-(line 107,col 35)",
            "(line 108,col 5)-(line 108,col 34)",
            "(line 109,col 5)-(line 111,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOff()",
        "snippet": "  public void testClosurePassOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = false;\n    testSame(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\");\n    testSame(\n        options,\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\");\n  }\n",
        "begin_line": 114,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 54)",
            "(line 116,col 5)-(line 116,col 32)",
            "(line 117,col 5)-(line 119,col 78)",
            "(line 120,col 5)-(line 123,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOn()",
        "snippet": "  public void testClosurePassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\",\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n    test(\n        options,\n        \"/** @define {boolean} */ var COMPILED = false;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\",\n        \"var COMPILED = true;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"'foo';\");\n  }\n",
        "begin_line": 126,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 54)",
            "(line 128,col 5)-(line 128,col 31)",
            "(line 129,col 5)-(line 132,col 56)",
            "(line 133,col 5)-(line 140,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCssNameCheck()",
        "snippet": "  public void testCssNameCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options, \"var x = 'foo';\",\n         CheckMissingGetCssName.MISSING_GETCSSNAME);\n  }\n",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 144,col 54)",
            "(line 145,col 5)-(line 145,col 31)",
            "(line 146,col 5)-(line 146,col 59)",
            "(line 147,col 5)-(line 147,col 52)",
            "(line 148,col 5)-(line 149,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2592659()",
        "snippet": "  public void testBug2592659() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.WARNING;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options,\n        \"var goog = {};\\n\" +\n        \"/**\\n\" +\n        \" * @param {string} className\\n\" +\n        \" * @param {string=} opt_modifier\\n\" +\n        \" * @return {string}\\n\" +\n        \"*/\\n\" +\n        \"goog.getCssName = function(className, opt_modifier) {}\\n\" +\n        \"var x = goog.getCssName(123, 'a');\",\n        TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 152,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 54)",
            "(line 154,col 5)-(line 154,col 31)",
            "(line 155,col 5)-(line 155,col 30)",
            "(line 156,col 5)-(line 156,col 61)",
            "(line 157,col 5)-(line 157,col 52)",
            "(line 158,col 5)-(line 167,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner1()",
        "snippet": "  public void testTypedefBeforeOwner1() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo = {}; foo.Bar.Type; foo.Bar = function() {};\");\n  }\n",
        "begin_line": 170,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 54)",
            "(line 172,col 5)-(line 172,col 31)",
            "(line 173,col 5)-(line 178,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner2()",
        "snippet": "  public void testTypedefBeforeOwner2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo$Bar$Type; var foo$Bar = function() {};\");\n  }\n",
        "begin_line": 181,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 54)",
            "(line 183,col 5)-(line 183,col 31)",
            "(line 184,col 5)-(line 184,col 38)",
            "(line 185,col 5)-(line 190,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportedNames()",
        "snippet": "  public void testExportedNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('b', goog);\",\n         \"var a = true; var c = {}; c.exportSymbol('b', c);\");\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('a', goog);\",\n         \"var b = true; var c = {}; c.exportSymbol('a', c);\");\n  }\n",
        "begin_line": 193,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 54)",
            "(line 195,col 5)-(line 195,col 31)",
            "(line 196,col 5)-(line 196,col 58)",
            "(line 197,col 5)-(line 200,col 62)",
            "(line 201,col 5)-(line 204,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOn()",
        "snippet": "  public void testCheckGlobalThisOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 207,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 54)",
            "(line 209,col 5)-(line 209,col 39)",
            "(line 210,col 5)-(line 210,col 52)",
            "(line 211,col 5)-(line 211,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSusiciousCodeOff()",
        "snippet": "  public void testSusiciousCodeOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = false;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 54)",
            "(line 216,col 5)-(line 216,col 40)",
            "(line 217,col 5)-(line 217,col 52)",
            "(line 218,col 5)-(line 218,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    testSame(options, \"function f() { this.y = 3; }\");\n  }\n",
        "begin_line": 221,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 54)",
            "(line 223,col 5)-(line 223,col 39)",
            "(line 224,col 5)-(line 224,col 50)",
            "(line 225,col 5)-(line 225,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresAndCheckProvidesOff()",
        "snippet": "  public void testCheckRequiresAndCheckProvidesOff() {\n    testSame(createCompilerOptions(), new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    });\n  }\n",
        "begin_line": 228,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 232,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresOn()",
        "snippet": "  public void testCheckRequiresOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkRequires = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);\n  }\n",
        "begin_line": 235,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 54)",
            "(line 237,col 5)-(line 237,col 45)",
            "(line 238,col 5)-(line 241,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesOn()",
        "snippet": "  public void testCheckProvidesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkProvides = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckProvides.MISSING_PROVIDE_WARNING);\n  }\n",
        "begin_line": 244,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 54)",
            "(line 246,col 5)-(line 246,col 45)",
            "(line 247,col 5)-(line 250,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOff()",
        "snippet": "  public void testGenerateExportsOff() {\n    testSame(createCompilerOptions(), \"/** @export */ function f() {}\");\n  }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOn()",
        "snippet": "  public void testGenerateExportsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    test(options, \"/** @export */ function f() {}\",\n         \"/** @export */ function f() {} goog.exportSymbol('f', f);\");\n  }\n",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 54)",
            "(line 259,col 5)-(line 259,col 35)",
            "(line 260,col 5)-(line 261,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOff()",
        "snippet": "  public void testExportTestFunctionsOff() {\n    testSame(createCompilerOptions(), \"function testFoo() {}\");\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 5)-(line 265,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOn()",
        "snippet": "  public void testExportTestFunctionsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.exportTestFunctions = true;\n    test(options, \"function testFoo() {}\",\n         \"/** @export */ function testFoo() {}\" +\n         \"goog.exportSymbol('testFoo', testFoo);\");\n  }\n",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 54)",
            "(line 270,col 5)-(line 270,col 39)",
            "(line 271,col 5)-(line 273,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExpose()",
        "snippet": "  public void testExpose() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n         \"var x = {eeny: 1, /** @expose */ meeny: 2};\" +\n         \"/** @constructor */ var Foo = function() {};\" +\n         \"/** @expose */  Foo.prototype.miny = 3;\" +\n         \"Foo.prototype.moe = 4;\" +\n         \"function moe(a, b) { return a.meeny + b.miny; }\" +\n         \"window['x'] = x;\" +\n         \"window['Foo'] = Foo;\" +\n         \"window['moe'] = moe;\",\n         \"function a(){}\" +\n         \"a.prototype.miny=3;\" +\n         \"window.x={a:1,meeny:2};\" +\n         \"window.Foo=a;\" +\n         \"window.moe=function(b,c){\" +\n         \"  return b.meeny+c.miny\" +\n         \"}\");\n  }\n",
        "begin_line": 276,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 54)",
            "(line 278,col 5)-(line 279,col 48)",
            "(line 280,col 5)-(line 295,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOff()",
        "snippet": "  public void testCheckSymbolsOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3;\");\n  }\n",
        "begin_line": 298,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 299,col 54)",
            "(line 300,col 5)-(line 300,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOn()",
        "snippet": "  public void testCheckSymbolsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    test(options, \"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 303,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 54)",
            "(line 305,col 5)-(line 305,col 32)",
            "(line 306,col 5)-(line 306,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOff()",
        "snippet": "  public void testCheckReferencesOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3; var x = 5;\");\n  }\n",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 310,col 54)",
            "(line 311,col 5)-(line 311,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOn()",
        "snippet": "  public void testCheckReferencesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    test(options, \"x = 3; var x = 5;\",\n         VariableReferenceCheck.UNDECLARED_REFERENCE);\n  }\n",
        "begin_line": 314,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 54)",
            "(line 316,col 5)-(line 316,col 50)",
            "(line 317,col 5)-(line 318,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInferTypes()",
        "snippet": "  public void testInferTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.inferTypes = true;\n    options.checkTypes = false;\n    options.closurePass = true;\n\n    test(options,\n        CLOSURE_BOILERPLATE +\n        \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n        TypeCheck.ENUM_NOT_CONSTANT);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n\n    // This does not generate a warning.\n    test(options, \"/** @type {number} */ var n = window.name;\",\n        \"var n = window.name;\");\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n  }\n",
        "begin_line": 321,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 54)",
            "(line 323,col 5)-(line 323,col 30)",
            "(line 324,col 5)-(line 324,col 31)",
            "(line 325,col 5)-(line 325,col 31)",
            "(line 327,col 5)-(line 330,col 37)",
            "(line 331,col 5)-(line 331,col 70)",
            "(line 334,col 5)-(line 335,col 32)",
            "(line 336,col 5)-(line 336,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckAndInference()",
        "snippet": "  public void testTypeCheckAndInference() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {number} */ var n = window.name;\",\n         TypeValidator.TYPE_MISMATCH_WARNING);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0);\n  }\n",
        "begin_line": 339,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 54)",
            "(line 341,col 5)-(line 341,col 30)",
            "(line 342,col 5)-(line 343,col 46)",
            "(line 344,col 5)-(line 344,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeNameParser()",
        "snippet": "  public void testTypeNameParser() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {n} */ var n = window.name;\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 347,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 54)",
            "(line 349,col 5)-(line 349,col 30)",
            "(line 350,col 5)-(line 351,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMemoizedTypedScopeCreator()",
        "snippet": "  public void testMemoizedTypedScopeCreator() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, \"function someTest() {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function Foo() { this.instProp = 3; }\\n\"\n        + \"  Foo.prototype.protoProp = function(a, b) {};\\n\"\n        + \"  /** @constructor\\n @extends Foo */\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.inherits(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.protoProp(o.protoProp, o.instProp);\\n\"\n        + \"}\",\n        \"function someTest() {\\n\"\n        + \"  function Foo() { this.b = 3; }\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  Foo.prototype.a = function(a, b) {};\\n\"\n        + \"  goog.c(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.a(o.a, o.b);\\n\"\n        + \"}\");\n  }\n",
        "begin_line": 359,
        "end_line": 382,
        "comment": " o.a(o.a, o.a), which is bad.",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 54)",
            "(line 361,col 5)-(line 361,col 30)",
            "(line 362,col 5)-(line 362,col 39)",
            "(line 363,col 5)-(line 363,col 67)",
            "(line 364,col 5)-(line 381,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckTypes()",
        "snippet": "  public void testCheckTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 384,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 54)",
            "(line 386,col 5)-(line 386,col 30)",
            "(line 387,col 5)-(line 388,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceCssNames()",
        "snippet": "  public void testReplaceCssNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.gatherCssNames = true;\n    test(options, \"/** @define {boolean} */\\n\"\n         + \"var COMPILED = false;\\n\"\n         + \"goog.setCssNameMapping({'foo':'bar'});\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return goog.getCssName('foo');\\n\"\n         + \"}\",\n         \"var COMPILED = true;\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return \\\"bar\\\";\"\n         + \"}\");\n    assertEquals(\n        ImmutableMap.of(\"foo\", new Integer(1)),\n        lastCompiler.getPassConfig().getIntermediateState().cssNames);\n  }\n",
        "begin_line": 391,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 392,col 54)",
            "(line 393,col 5)-(line 393,col 31)",
            "(line 394,col 5)-(line 394,col 34)",
            "(line 395,col 5)-(line 404,col 16)",
            "(line 405,col 5)-(line 407,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveClosureAsserts()",
        "snippet": "  public void testRemoveClosureAsserts() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    testSame(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\");\n    options.removeClosureAsserts = true;\n    test(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\",\n        \"var goog = {};\");\n  }\n",
        "begin_line": 410,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 54)",
            "(line 412,col 5)-(line 412,col 31)",
            "(line 413,col 5)-(line 415,col 40)",
            "(line 416,col 5)-(line 416,col 40)",
            "(line 417,col 5)-(line 420,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeprecation()",
        "snippet": "  public void testDeprecation() {\n    String code = \"/** @deprecated */ function f() { } function g() { f(); }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 423,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 424,col 78)",
            "(line 426,col 5)-(line 426,col 54)",
            "(line 427,col 5)-(line 427,col 28)",
            "(line 429,col 5)-(line 429,col 75)",
            "(line 430,col 5)-(line 430,col 28)",
            "(line 432,col 5)-(line 432,col 30)",
            "(line 433,col 5)-(line 433,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVisibility()",
        "snippet": "  public void testVisibility() {\n    String[] code = {\n        \"/** @private */ function f() { }\",\n        \"function g() { f(); }\"\n    };\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 436,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 437,col 5)-(line 440,col 6)",
            "(line 442,col 5)-(line 442,col 54)",
            "(line 443,col 5)-(line 443,col 28)",
            "(line 445,col 5)-(line 445,col 75)",
            "(line 446,col 5)-(line 446,col 28)",
            "(line 448,col 5)-(line 448,col 30)",
            "(line 449,col 5)-(line 449,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnreachableCode()",
        "snippet": "  public void testUnreachableCode() {\n    String code = \"function f() { return \\n 3; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkUnreachableCode = CheckLevel.ERROR;\n    test(options, code, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 452,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 50)",
            "(line 455,col 5)-(line 455,col 54)",
            "(line 456,col 5)-(line 456,col 28)",
            "(line 458,col 5)-(line 458,col 52)",
            "(line 459,col 5)-(line 459,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    String code =\n        \"/** @return {number} */ function f() { if (f) { return 3; } }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkMissingReturn = CheckLevel.ERROR;\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 462,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 463,col 5)-(line 464,col 72)",
            "(line 466,col 5)-(line 466,col 54)",
            "(line 467,col 5)-(line 467,col 28)",
            "(line 469,col 5)-(line 469,col 50)",
            "(line 470,col 5)-(line 470,col 28)",
            "(line 472,col 5)-(line 472,col 30)",
            "(line 473,col 5)-(line 473,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIdGenerators()",
        "snippet": "  public void testIdGenerators() {\n    String code =  \"function f() {} f('id');\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.idGenerators = Sets.newHashSet(\"f\");\n    test(options, code, \"function f() {} 'a';\");\n  }\n",
        "begin_line": 476,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 477,col 46)",
            "(line 479,col 5)-(line 479,col 54)",
            "(line 480,col 5)-(line 480,col 28)",
            "(line 482,col 5)-(line 482,col 48)",
            "(line 483,col 5)-(line 483,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeArgumentsArray()",
        "snippet": "  public void testOptimizeArgumentsArray() {\n    String code =  \"function f() { return arguments[0]; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeArgumentsArray = true;\n    String argName = \"JSCompiler_OptimizeArgumentsArray_p0\";\n    test(options, code,\n         \"function f(\" + argName + \") { return \" + argName + \"; }\");\n  }\n",
        "begin_line": 486,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 487,col 5)-(line 487,col 59)",
            "(line 489,col 5)-(line 489,col 54)",
            "(line 490,col 5)-(line 490,col 28)",
            "(line 492,col 5)-(line 492,col 42)",
            "(line 493,col 5)-(line 493,col 60)",
            "(line 494,col 5)-(line 495,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeParameters()",
        "snippet": "  public void testOptimizeParameters() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeParameters = true;\n    test(options, code, \"function f() { var a = true; return a;} f();\");\n  }\n",
        "begin_line": 498,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 57)",
            "(line 501,col 5)-(line 501,col 54)",
            "(line 502,col 5)-(line 502,col 28)",
            "(line 504,col 5)-(line 504,col 38)",
            "(line 505,col 5)-(line 505,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeReturns()",
        "snippet": "  public void testOptimizeReturns() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeReturns = true;\n    test(options, code, \"function f(a) {return;} f(true);\");\n  }\n",
        "begin_line": 508,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 57)",
            "(line 511,col 5)-(line 511,col 54)",
            "(line 512,col 5)-(line 512,col 28)",
            "(line 514,col 5)-(line 514,col 35)",
            "(line 515,col 5)-(line 515,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveAbstractMethods()",
        "snippet": "  public void testRemoveAbstractMethods() {\n    String code = CLOSURE_BOILERPLATE +\n        \"var x = {}; x.foo = goog.abstractMethod; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options, code, CLOSURE_COMPILED + \" var x$bar = 3;\");\n  }\n",
        "begin_line": 518,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 519,col 5)-(line 520,col 62)",
            "(line 522,col 5)-(line 522,col 54)",
            "(line 523,col 5)-(line 523,col 28)",
            "(line 525,col 5)-(line 525,col 31)",
            "(line 526,col 5)-(line 526,col 38)",
            "(line 527,col 5)-(line 527,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties1()",
        "snippet": "  public void testCollapseProperties1() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 530,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 532,col 44)",
            "(line 534,col 5)-(line 534,col 54)",
            "(line 535,col 5)-(line 535,col 28)",
            "(line 537,col 5)-(line 537,col 38)",
            "(line 538,col 5)-(line 538,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties2()",
        "snippet": "  public void testCollapseProperties2() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.collapseObjectLiterals = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 541,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 543,col 44)",
            "(line 545,col 5)-(line 545,col 54)",
            "(line 546,col 5)-(line 546,col 28)",
            "(line 548,col 5)-(line 548,col 38)",
            "(line 549,col 5)-(line 549,col 42)",
            "(line 550,col 5)-(line 550,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral1()",
        "snippet": "  public void testCollapseObjectLiteral1() {\n    // Verify collapseObjectLiterals does nothing in global scope\n    String code = \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    testSame(options, code);\n  }\n",
        "begin_line": 553,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 555,col 54)",
            "(line 557,col 5)-(line 557,col 54)",
            "(line 558,col 5)-(line 558,col 28)",
            "(line 560,col 5)-(line 560,col 42)",
            "(line 561,col 5)-(line 561,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral2()",
        "snippet": "  public void testCollapseObjectLiteral2() {\n    String code =\n        \"function f() {var x = {}; x.FOO = 5; x.bar = 3;}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    test(options, code,\n        \"function f(){\" +\n        \"var JSCompiler_object_inline_FOO_0;\" +\n        \"var JSCompiler_object_inline_bar_1;\" +\n        \"JSCompiler_object_inline_FOO_0=5;\" +\n        \"JSCompiler_object_inline_bar_1=3}\");\n  }\n",
        "begin_line": 564,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 566,col 59)",
            "(line 568,col 5)-(line 568,col 54)",
            "(line 569,col 5)-(line 569,col 28)",
            "(line 571,col 5)-(line 571,col 42)",
            "(line 572,col 5)-(line 577,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTightenTypesWithoutTypeCheck()",
        "snippet": "  public void testTightenTypesWithoutTypeCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.tightenTypes = true;\n    test(options, \"\", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n  }\n",
        "begin_line": 580,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 581,col 54)",
            "(line 582,col 5)-(line 582,col 32)",
            "(line 583,col 5)-(line 583,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDisambiguateProperties()",
        "snippet": "  public void testDisambiguateProperties() {\n    String code =\n        \"/** @constructor */ function Foo(){} Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ function Baz(){} Baz.prototype.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.disambiguateProperties = true;\n    options.checkTypes = true;\n    test(options, code,\n         \"function Foo(){} Foo.prototype.Foo_prototype$bar = 3;\" +\n         \"function Baz(){} Baz.prototype.Baz_prototype$bar = 3;\");\n  }\n",
        "begin_line": 586,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 589,col 70)",
            "(line 591,col 5)-(line 591,col 54)",
            "(line 592,col 5)-(line 592,col 28)",
            "(line 594,col 5)-(line 594,col 42)",
            "(line 595,col 5)-(line 595,col 30)",
            "(line 596,col 5)-(line 598,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkPureCalls()",
        "snippet": "  public void testMarkPureCalls() {\n    String testCode = \"function foo() {} foo();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.computeFunctionSideEffects = true;\n    test(options, testCode, \"function foo() {}\");\n  }\n",
        "begin_line": 601,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 602,col 49)",
            "(line 603,col 5)-(line 603,col 54)",
            "(line 604,col 5)-(line 604,col 34)",
            "(line 606,col 5)-(line 606,col 32)",
            "(line 608,col 5)-(line 608,col 46)",
            "(line 609,col 5)-(line 609,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkNoSideEffects()",
        "snippet": "  public void testMarkNoSideEffects() {\n    String testCode = \"noSideEffects();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.markNoSideEffectCalls = true;\n    test(options, testCode, \"\");\n  }\n",
        "begin_line": 612,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 613,col 41)",
            "(line 614,col 5)-(line 614,col 54)",
            "(line 615,col 5)-(line 615,col 34)",
            "(line 617,col 5)-(line 617,col 32)",
            "(line 619,col 5)-(line 619,col 41)",
            "(line 620,col 5)-(line 620,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testChainedCalls()",
        "snippet": "  public void testChainedCalls() {\n    CompilerOptions options = createCompilerOptions();\n    options.chainCalls = true;\n    test(\n        options,\n        \"/** @constructor */ function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar(); \" +\n        \"f.bar(); \",\n        \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar().bar();\");\n  }\n",
        "begin_line": 623,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 624,col 54)",
            "(line 625,col 5)-(line 625,col 30)",
            "(line 626,col 5)-(line 636,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtraAnnotationNames()",
        "snippet": "  public void testExtraAnnotationNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.setExtraAnnotationNames(Sets.newHashSet(\"TagA\", \"TagB\"));\n    test(\n        options,\n        \"/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();\",\n        \"var f = new Foo(); f.bar();\");\n  }\n",
        "begin_line": 639,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 640,col 54)",
            "(line 641,col 5)-(line 641,col 69)",
            "(line 642,col 5)-(line 645,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizePrototypeMethods()",
        "snippet": "  public void testDevirtualizePrototypeMethods() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    test(\n        options,\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\",\n        \"var Foo = function() {};\" +\n        \"var JSCompiler_StaticMethods_bar = \" +\n        \"    function(JSCompiler_StaticMethods_bar$self) {};\" +\n        \"JSCompiler_StaticMethods_bar(new Foo());\");\n  }\n",
        "begin_line": 648,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 649,col 54)",
            "(line 650,col 5)-(line 650,col 48)",
            "(line 651,col 5)-(line 659,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConsts()",
        "snippet": "  public void testCheckConsts() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineConstantVars = true;\n    test(options, \"var FOO = true; FOO = false\",\n        ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 662,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 663,col 5)-(line 663,col 54)",
            "(line 664,col 5)-(line 664,col 38)",
            "(line 665,col 5)-(line 666,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAllChecksOn()",
        "snippet": "  public void testAllChecksOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkControlStructures = true;\n    options.checkRequires = CheckLevel.ERROR;\n    options.checkProvides = CheckLevel.ERROR;\n    options.generateExports = true;\n    options.exportTestFunctions = true;\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"goog\";\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkSymbols = true;\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    options.processObjectPropertyString = true;\n    options.collapseProperties = true;\n    test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED);\n  }\n",
        "begin_line": 669,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 670,col 5)-(line 670,col 54)",
            "(line 671,col 5)-(line 671,col 39)",
            "(line 672,col 5)-(line 672,col 42)",
            "(line 673,col 5)-(line 673,col 45)",
            "(line 674,col 5)-(line 674,col 45)",
            "(line 675,col 5)-(line 675,col 35)",
            "(line 676,col 5)-(line 676,col 39)",
            "(line 677,col 5)-(line 677,col 31)",
            "(line 678,col 5)-(line 678,col 59)",
            "(line 679,col 5)-(line 679,col 53)",
            "(line 680,col 5)-(line 680,col 51)",
            "(line 681,col 5)-(line 681,col 47)",
            "(line 682,col 5)-(line 682,col 32)",
            "(line 683,col 5)-(line 683,col 50)",
            "(line 684,col 5)-(line 684,col 47)",
            "(line 685,col 5)-(line 685,col 38)",
            "(line 686,col 5)-(line 686,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckingWithSyntheticBlocks()",
        "snippet": "  public void testTypeCheckingWithSyntheticBlocks() {\n    CompilerOptions options = createCompilerOptions();\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkTypes = true;\n\n    // We used to have a bug where the CFG drew an\n    // edge straight from synStart to f(progress).\n    // If that happens, then progress will get type {number|undefined}.\n    testSame(\n        options,\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \" synStart('foo');\" +\n        \" var progress = 1;\" +\n        \" f(progress);\" +\n        \" synEnd('foo');\" +\n        \"}\");\n  }\n",
        "begin_line": 689,
        "end_line": 707,
        "comment": "",
        "child_ranges": [
            "(line 690,col 5)-(line 690,col 54)",
            "(line 691,col 5)-(line 691,col 51)",
            "(line 692,col 5)-(line 692,col 47)",
            "(line 693,col 5)-(line 693,col 30)",
            "(line 698,col 5)-(line 706,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCompilerDoesNotBlowUpIfUndefinedSymbols()",
        "snippet": "  public void testCompilerDoesNotBlowUpIfUndefinedSymbols() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n\n    // Disable the undefined variable check.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n\n    // The compiler used to throw an IllegalStateException on this.\n    testSame(options, \"var x = {foo: y};\");\n  }\n",
        "begin_line": 709,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 710,col 5)-(line 710,col 54)",
            "(line 711,col 5)-(line 711,col 32)",
            "(line 714,col 5)-(line 716,col 24)",
            "(line 719,col 5)-(line 719,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstantTagsMustAlwaysBeRemoved()",
        "snippet": "  public void testConstantTagsMustAlwaysBeRemoved() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    String originalText = \"var G_GEO_UNKNOWN_ADDRESS=1;\\n\" +\n        \"function foo() {\" +\n        \"  var localVar = 2;\\n\" +\n        \"  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\\n\" +\n        \"    alert(\\\"A\\\"); }}\";\n    String expectedText = \"var G_GEO_UNKNOWN_ADDRESS=1;\" +\n        \"function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\\\"A\\\")}}\";\n\n    test(options, originalText, expectedText);\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": " we finish.",
        "child_ranges": [
            "(line 726,col 5)-(line 726,col 54)",
            "(line 728,col 5)-(line 728,col 60)",
            "(line 729,col 5)-(line 733,col 31)",
            "(line 734,col 5)-(line 735,col 77)",
            "(line 737,col 5)-(line 737,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassPreservesJsDoc()",
        "snippet": "  public void testClosurePassPreservesJsDoc() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.closurePass = true;\n\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @constructor */ Foo = function() {};\" +\n         \"var x = new Foo();\",\n         \"var COMPILED=true;var goog={};goog.exportSymbol=function(){};\" +\n         \"var Foo=function(){};var x=new Foo\");\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n         TypeCheck.ENUM_NOT_CONSTANT);\n  }\n",
        "begin_line": 740,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 741,col 54)",
            "(line 742,col 5)-(line 742,col 30)",
            "(line 743,col 5)-(line 743,col 31)",
            "(line 745,col 5)-(line 750,col 47)",
            "(line 751,col 5)-(line 754,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst()",
        "snippet": "  public void testProvidedNamespaceIsConst() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo'); \" +\n         \"function f() { foo = {};}\",\n         \"var foo = {}; function f() { foo = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 757,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 758,col 5)-(line 758,col 54)",
            "(line 759,col 5)-(line 759,col 31)",
            "(line 760,col 5)-(line 760,col 38)",
            "(line 761,col 5)-(line 761,col 38)",
            "(line 762,col 5)-(line 766,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst2()",
        "snippet": "  public void testProvidedNamespaceIsConst2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.bar'); \" +\n         \"function f() { foo.bar = {};}\",\n         \"var foo$bar = {};\" +\n         \"function f() { foo$bar = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 769,
        "end_line": 780,
        "comment": "",
        "child_ranges": [
            "(line 770,col 5)-(line 770,col 54)",
            "(line 771,col 5)-(line 771,col 31)",
            "(line 772,col 5)-(line 772,col 38)",
            "(line 773,col 5)-(line 773,col 38)",
            "(line 774,col 5)-(line 779,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst3()",
        "snippet": "  public void testProvidedNamespaceIsConst3() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; \" +\n         \"goog.provide('foo.bar'); goog.provide('foo.bar.baz'); \" +\n         \"/** @constructor */ foo.bar = function() {};\" +\n         \"/** @constructor */ foo.bar.baz = function() {};\",\n         \"var foo$bar = function(){};\" +\n         \"var foo$bar$baz = function(){};\");\n  }\n",
        "begin_line": 782,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 783,col 5)-(line 783,col 54)",
            "(line 784,col 5)-(line 784,col 31)",
            "(line 785,col 5)-(line 785,col 38)",
            "(line 786,col 5)-(line 786,col 38)",
            "(line 787,col 5)-(line 793,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst4()",
        "snippet": "  public void testProvidedNamespaceIsConst4() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"var foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 796,
        "end_line": 805,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 797,col 54)",
            "(line 798,col 5)-(line 798,col 31)",
            "(line 799,col 5)-(line 799,col 38)",
            "(line 800,col 5)-(line 800,col 38)",
            "(line 801,col 5)-(line 804,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst5()",
        "snippet": "  public void testProvidedNamespaceIsConst5() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 807,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 808,col 5)-(line 808,col 54)",
            "(line 809,col 5)-(line 809,col 31)",
            "(line 810,col 5)-(line 810,col 38)",
            "(line 811,col 5)-(line 811,col 38)",
            "(line 812,col 5)-(line 815,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAlwaysOn()",
        "snippet": "  public void testProcessDefinesAlwaysOn() {\n    test(createCompilerOptions(),\n         \"/** @define {boolean} */ var HI = true; HI = false;\",\n         \"var HI = false;false;\");\n  }\n",
        "begin_line": 818,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 821,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAdditionalReplacements()",
        "snippet": "  public void testProcessDefinesAdditionalReplacements() {\n    CompilerOptions options = createCompilerOptions();\n    options.setDefineToBooleanLiteral(\"HI\", false);\n    test(options,\n         \"/** @define {boolean} */ var HI = true;\",\n         \"var HI = false;\");\n  }\n",
        "begin_line": 824,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 825,col 5)-(line 825,col 54)",
            "(line 826,col 5)-(line 826,col 51)",
            "(line 827,col 5)-(line 829,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceMessages()",
        "snippet": "  public void testReplaceMessages() {\n    CompilerOptions options = createCompilerOptions();\n    String prefix = \"var goog = {}; goog.getMsg = function() {};\";\n    testSame(options, prefix + \"var MSG_HI = goog.getMsg('hi');\");\n\n    options.messageBundle = new EmptyMessageBundle();\n    test(options,\n        prefix + \"/** @desc xyz */ var MSG_HI = goog.getMsg('hi');\",\n        prefix + \"var MSG_HI = 'hi';\");\n  }\n",
        "begin_line": 832,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 833,col 5)-(line 833,col 54)",
            "(line 834,col 5)-(line 834,col 66)",
            "(line 835,col 5)-(line 835,col 66)",
            "(line 837,col 5)-(line 837,col 53)",
            "(line 838,col 5)-(line 840,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalNames()",
        "snippet": "  public void testCheckGlobalNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkGlobalNamesLevel = CheckLevel.ERROR;\n    test(options, \"var x = {}; var y = x.z;\",\n         CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 843,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 844,col 54)",
            "(line 845,col 5)-(line 845,col 53)",
            "(line 846,col 5)-(line 847,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGetters()",
        "snippet": "  public void testInlineGetters() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function Foo() {} Foo.prototype.bar = function() { return 3; };\" +\n        \"var x = new Foo(); x.bar();\";\n\n    testSame(options, code);\n    options.inlineGetters = true;\n\n    test(options, code,\n         \"function Foo() {} Foo.prototype.bar = function() { return 3 };\" +\n         \"var x = new Foo(); 3;\");\n  }\n",
        "begin_line": 850,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 851,col 5)-(line 851,col 54)",
            "(line 852,col 5)-(line 854,col 38)",
            "(line 856,col 5)-(line 856,col 28)",
            "(line 857,col 5)-(line 857,col 33)",
            "(line 859,col 5)-(line 861,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGettersWithAmbiguate()",
        "snippet": "  public void testInlineGettersWithAmbiguate() {\n    CompilerOptions options = createCompilerOptions();\n\n    String code =\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"/** @type {number} */ Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"/** @constructor */\" +\n        \"function Bar() {}\" +\n        \"/** @type {string} */ Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().getField();\" +\n        \"new Bar().getField();\";\n\n    testSame(options, code);\n\n    options.inlineGetters = true;\n\n    test(options, code,\n        \"function Foo() {}\" +\n        \"Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"function Bar() {}\" +\n        \"Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().field;\" +\n        \"new Bar().field;\");\n\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n\n    // Propagating the wrong type information may cause ambiguate properties\n    // to generate bad code.\n    testSame(options, code);\n  }\n",
        "begin_line": 864,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 865,col 5)-(line 865,col 54)",
            "(line 867,col 5)-(line 877,col 32)",
            "(line 879,col 5)-(line 879,col 28)",
            "(line 881,col 5)-(line 881,col 33)",
            "(line 883,col 5)-(line 891,col 28)",
            "(line 893,col 5)-(line 893,col 30)",
            "(line 894,col 5)-(line 894,col 39)",
            "(line 898,col 5)-(line 898,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x);\";\n    testSame(options, code);\n\n    options.inlineVariables = true;\n    test(options, code, \"(function foo() {})(3);\");\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);\n  }\n",
        "begin_line": 901,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 902,col 54)",
            "(line 903,col 5)-(line 903,col 57)",
            "(line 904,col 5)-(line 904,col 28)",
            "(line 906,col 5)-(line 906,col 35)",
            "(line 907,col 5)-(line 907,col 51)",
            "(line 909,col 5)-(line 909,col 64)",
            "(line 910,col 5)-(line 910,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);\";\n    testSame(options, code);\n\n    options.inlineConstantVars = true;\n    test(options, code, \"function foo() {} var x = 3; foo(x); foo(4);\");\n  }\n",
        "begin_line": 913,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 914,col 5)-(line 914,col 54)",
            "(line 915,col 5)-(line 915,col 80)",
            "(line 916,col 5)-(line 916,col 28)",
            "(line 918,col 5)-(line 918,col 38)",
            "(line 919,col 5)-(line 919,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMinimizeExits()",
        "snippet": "  public void testMinimizeExits() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() {\" +\n        \"  if (window.foo) return; window.h(); \" +\n        \"}\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(\n        options, code,\n        \"function f() {\" +\n        \"  window.foo || window.h(); \" +\n        \"}\");\n  }\n",
        "begin_line": 922,
        "end_line": 936,
        "comment": "",
        "child_ranges": [
            "(line 923,col 5)-(line 923,col 54)",
            "(line 924,col 5)-(line 927,col 12)",
            "(line 928,col 5)-(line 928,col 28)",
            "(line 930,col 5)-(line 930,col 33)",
            "(line 931,col 5)-(line 935,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldConstants()",
        "snippet": "  public void testFoldConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"if (true) { window.foo(); }\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(options, code, \"window.foo();\");\n  }\n",
        "begin_line": 938,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 939,col 5)-(line 939,col 54)",
            "(line 940,col 5)-(line 940,col 48)",
            "(line 941,col 5)-(line 941,col 28)",
            "(line 943,col 5)-(line 943,col 33)",
            "(line 944,col 5)-(line 944,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return; f(); }\";\n    testSame(options, code);\n\n    options.removeDeadCode = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 947,
        "end_line": 954,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 54)",
            "(line 949,col 5)-(line 949,col 50)",
            "(line 950,col 5)-(line 950,col 28)",
            "(line 952,col 5)-(line 952,col 34)",
            "(line 953,col 5)-(line 953,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties1()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    test(options, code, \"function Foo() {}\");\n  }\n",
        "begin_line": 956,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 957,col 5)-(line 957,col 54)",
            "(line 958,col 5)-(line 959,col 64)",
            "(line 960,col 5)-(line 960,col 28)",
            "(line 962,col 5)-(line 962,col 51)",
            "(line 963,col 5)-(line 963,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties2()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\" +\n        \"function f(x) { x.bar(); }\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 966,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 967,col 54)",
            "(line 968,col 5)-(line 970,col 37)",
            "(line 971,col 5)-(line 971,col 28)",
            "(line 973,col 5)-(line 973,col 51)",
            "(line 974,col 5)-(line 974,col 28)",
            "(line 976,col 5)-(line 976,col 36)",
            "(line 977,col 5)-(line 977,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSmartNamePass()",
        "snippet": "  public void testSmartNamePass() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() { this.bar(); } \" +\n        \"Foo.prototype.bar = function() { return Foo(); };\";\n    testSame(options, code);\n\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 980,
        "end_line": 988,
        "comment": "",
        "child_ranges": [
            "(line 981,col 5)-(line 981,col 54)",
            "(line 982,col 5)-(line 983,col 60)",
            "(line 984,col 5)-(line 984,col 28)",
            "(line 986,col 5)-(line 986,col 36)",
            "(line 987,col 5)-(line 987,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeadAssignmentsElimination()",
        "snippet": "  public void testDeadAssignmentsElimination() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; 4; x = 5; return x; } f(); \";\n    testSame(options, code);\n\n    options.deadAssignmentElimination = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() { var x = 3; 4; x = 5; return x; } f();\");\n  }\n",
        "begin_line": 990,
        "end_line": 1000,
        "comment": "",
        "child_ranges": [
            "(line 991,col 5)-(line 991,col 54)",
            "(line 992,col 5)-(line 992,col 74)",
            "(line 993,col 5)-(line 993,col 28)",
            "(line 995,col 5)-(line 995,col 45)",
            "(line 996,col 5)-(line 996,col 28)",
            "(line 998,col 5)-(line 998,col 36)",
            "(line 999,col 5)-(line 999,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineFunctions()",
        "snippet": "  public void testInlineFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 3; } f(); \";\n    testSame(options, code);\n\n    options.inlineFunctions = true;\n    test(options, code, \"3;\");\n  }\n",
        "begin_line": 1002,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 1003,col 5)-(line 1003,col 54)",
            "(line 1004,col 5)-(line 1004,col 53)",
            "(line 1005,col 5)-(line 1005,col 28)",
            "(line 1007,col 5)-(line 1007,col 35)",
            "(line 1008,col 5)-(line 1008,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars1()",
        "snippet": "  public void testRemoveUnusedVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f(x) {} f();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() {} f();\");\n  }\n",
        "begin_line": 1011,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1012,col 5)-(line 1012,col 54)",
            "(line 1013,col 5)-(line 1013,col 42)",
            "(line 1014,col 5)-(line 1014,col 28)",
            "(line 1016,col 5)-(line 1016,col 36)",
            "(line 1017,col 5)-(line 1017,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars2()",
        "snippet": "  public void testRemoveUnusedVars2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"(function f(x) {})();var g = function() {}; g();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"(function() {})();var g = function() {}; g();\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"(function f() {})();var g = function $g$() {}; g();\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1021,col 54)",
            "(line 1022,col 5)-(line 1022,col 69)",
            "(line 1023,col 5)-(line 1023,col 28)",
            "(line 1025,col 5)-(line 1025,col 36)",
            "(line 1026,col 5)-(line 1026,col 73)",
            "(line 1028,col 5)-(line 1028,col 77)",
            "(line 1029,col 5)-(line 1029,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleCodeMotion()",
        "snippet": "  public void testCrossModuleCodeMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var x = 1;\",\n      \"x;\",\n    };\n    testSame(options, code);\n\n    options.crossModuleCodeMotion = true;\n    test(options, code, new String[] {\n      \"\",\n      \"var x = 1; x;\",\n    });\n  }\n",
        "begin_line": 1032,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 54)",
            "(line 1034,col 5)-(line 1037,col 6)",
            "(line 1038,col 5)-(line 1038,col 28)",
            "(line 1040,col 5)-(line 1040,col 41)",
            "(line 1041,col 5)-(line 1044,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleMethodMotion()",
        "snippet": "  public void testCrossModuleMethodMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var Foo = function() {}; Foo.prototype.bar = function() {};\" +\n      \"var x = new Foo();\",\n      \"x.bar();\",\n    };\n    testSame(options, code);\n\n    options.crossModuleMethodMotion = true;\n    test(options, code, new String[] {\n      CrossModuleMethodMotion.STUB_DECLARATIONS +\n      \"var Foo = function() {};\" +\n      \"Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;\",\n      \"Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()\",\n    });\n  }\n",
        "begin_line": 1047,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 5)-(line 1048,col 54)",
            "(line 1049,col 5)-(line 1053,col 6)",
            "(line 1054,col 5)-(line 1054,col 28)",
            "(line 1056,col 5)-(line 1056,col 43)",
            "(line 1057,col 5)-(line 1062,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables1()",
        "snippet": "  public void testFlowSensitiveInlineVariables1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; x = 5; return x; }\";\n    testSame(options, code);\n\n    options.flowSensitiveInlineVariables = true;\n    test(options, code, \"function f() { var x = 3; return 5; }\");\n\n    String unusedVar = \"function f() { var x; x = 5; return x; } f()\";\n    test(options, unusedVar, \"function f() { var x; return 5; } f()\");\n\n    options.removeUnusedVars = true;\n    test(options, unusedVar, \"function f() { return 5; } f()\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1066,col 54)",
            "(line 1067,col 5)-(line 1067,col 65)",
            "(line 1068,col 5)-(line 1068,col 28)",
            "(line 1070,col 5)-(line 1070,col 48)",
            "(line 1071,col 5)-(line 1071,col 65)",
            "(line 1073,col 5)-(line 1073,col 70)",
            "(line 1074,col 5)-(line 1074,col 70)",
            "(line 1076,col 5)-(line 1076,col 36)",
            "(line 1077,col 5)-(line 1077,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables2()",
        "snippet": "  public void testFlowSensitiveInlineVariables2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function f () {\\n\" +\n        \"    var ab = 0;\\n\" +\n        \"    ab += '-';\\n\" +\n        \"    alert(ab);\\n\" +\n        \"}\",\n        \"function f () {\\n\" +\n        \"    alert('0-');\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 1080,
        "end_line": 1093,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 5)-(line 1081,col 54)",
            "(line 1082,col 5)-(line 1083,col 48)",
            "(line 1084,col 5)-(line 1092,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseAnonymousFunctions()",
        "snippet": "  public void testCollapseAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.collapseAnonymousFunctions = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1095,
        "end_line": 1102,
        "comment": "",
        "child_ranges": [
            "(line 1096,col 5)-(line 1096,col 54)",
            "(line 1097,col 5)-(line 1097,col 43)",
            "(line 1098,col 5)-(line 1098,col 28)",
            "(line 1100,col 5)-(line 1100,col 46)",
            "(line 1101,col 5)-(line 1101,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMoveFunctionDeclarations()",
        "snippet": "  public void testMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f(); function f() { return 3; }\";\n    testSame(options, code);\n\n    options.moveFunctionDeclarations = true;\n    test(options, code, \"function f() { return 3; } var x = f();\");\n  }\n",
        "begin_line": 1104,
        "end_line": 1111,
        "comment": "",
        "child_ranges": [
            "(line 1105,col 5)-(line 1105,col 54)",
            "(line 1106,col 5)-(line 1106,col 60)",
            "(line 1107,col 5)-(line 1107,col 28)",
            "(line 1109,col 5)-(line 1109,col 44)",
            "(line 1110,col 5)-(line 1110,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctions()",
        "snippet": "  public void testNameAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code, \"var f = function $() {}\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"var f = function $f$() {}\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1113,
        "end_line": 1125,
        "comment": "",
        "child_ranges": [
            "(line 1114,col 5)-(line 1114,col 54)",
            "(line 1115,col 5)-(line 1115,col 43)",
            "(line 1116,col 5)-(line 1116,col 28)",
            "(line 1118,col 5)-(line 1118,col 75)",
            "(line 1119,col 5)-(line 1119,col 51)",
            "(line 1120,col 5)-(line 1120,col 65)",
            "(line 1122,col 5)-(line 1122,col 77)",
            "(line 1123,col 5)-(line 1123,col 53)",
            "(line 1124,col 5)-(line 1124,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctionsWithVarRemoval()",
        "snippet": "  public void testNameAnonymousFunctionsWithVarRemoval() {\n    CompilerOptions options = createCompilerOptions();\n    options.setRemoveUnusedVariables(CompilerOptions.Reach.LOCAL_ONLY);\n    options.setInlineVariables(true);\n    String code = \"var f = function longName() {}; var g = function() {};\" +\n        \"function longerName() {} var i = longerName;\";\n    test(options, code,\n         \"var f = function() {}; var g = function() {}; \" +\n         \"var i = function() {};\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code,\n         \"var f = function longName() {}; var g = function $() {};\" +\n         \"var i = function longerName(){};\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code,\n         \"var f = function longName() {}; var g = function $g$() {};\" +\n         \"var i = function longerName(){};\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1127,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1128,col 5)-(line 1128,col 54)",
            "(line 1129,col 5)-(line 1129,col 71)",
            "(line 1130,col 5)-(line 1130,col 37)",
            "(line 1131,col 5)-(line 1132,col 55)",
            "(line 1133,col 5)-(line 1135,col 35)",
            "(line 1137,col 5)-(line 1137,col 75)",
            "(line 1138,col 5)-(line 1140,col 45)",
            "(line 1141,col 5)-(line 1141,col 65)",
            "(line 1143,col 5)-(line 1143,col 77)",
            "(line 1144,col 5)-(line 1146,col 45)",
            "(line 1147,col 5)-(line 1147,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    String expected = \"var a; var b = function() {}; a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.a = \" + i + \";\";\n      expected += \"a.a = \" + i + \";\";\n    }\n    testSame(options, code);\n\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, expected);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    options.variableRenaming = VariableRenamingPolicy.OFF;\n    testSame(options, code);\n  }\n",
        "begin_line": 1150,
        "end_line": 1167,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1151,col 54)",
            "(line 1152,col 5)-(line 1152,col 43)",
            "(line 1153,col 5)-(line 1153,col 71)",
            "(line 1154,col 5)-(line 1157,col 5)",
            "(line 1158,col 5)-(line 1158,col 28)",
            "(line 1160,col 5)-(line 1160,col 54)",
            "(line 1161,col 5)-(line 1161,col 58)",
            "(line 1162,col 5)-(line 1162,col 34)",
            "(line 1164,col 5)-(line 1164,col 64)",
            "(line 1165,col 5)-(line 1165,col 58)",
            "(line 1166,col 5)-(line 1166,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizationAndExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testDevirtualizationAndExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    options.collapseAnonymousFunctions = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    String code = \"var f = function() {};\";\n    String expected = \"var a; function b() {} a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.argz = function() {arguments};\";\n      code += \"f.prototype.devir\" + i + \" = function() {};\";\n\n      char letter = (char) ('d' + i);\n      expected += \"a.argz = function() {arguments};\";\n      expected += \"function \" + letter + \"(c){}\";\n    }\n\n    code += \"var F = new f(); F.argz();\";\n    expected += \"var n = new b(); n.argz();\";\n\n    for (int i = 0; i < 10; i++) {\n      code += \"F.devir\" + i + \"();\";\n\n      char letter = (char) ('d' + i);\n      expected += letter + \"(n);\";\n    }\n    test(options, code, expected);\n  }\n",
        "begin_line": 1169,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1170,col 5)-(line 1170,col 54)",
            "(line 1171,col 5)-(line 1171,col 48)",
            "(line 1172,col 5)-(line 1172,col 46)",
            "(line 1173,col 5)-(line 1173,col 54)",
            "(line 1174,col 5)-(line 1174,col 58)",
            "(line 1175,col 5)-(line 1175,col 43)",
            "(line 1176,col 5)-(line 1176,col 64)",
            "(line 1177,col 5)-(line 1184,col 5)",
            "(line 1186,col 5)-(line 1186,col 41)",
            "(line 1187,col 5)-(line 1187,col 45)",
            "(line 1189,col 5)-(line 1194,col 5)",
            "(line 1195,col 5)-(line 1195,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoalesceVariableNames()",
        "snippet": "  public void testCoalesceVariableNames() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() {var x = 3; var y = x; var z = y; return z;}\";\n    testSame(options, code);\n\n    options.coalesceVariableNames = true;\n    test(options, code,\n         \"function f() {var x = 3; x = x; x = x; return x;}\");\n  }\n",
        "begin_line": 1198,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1199,col 5)-(line 1199,col 54)",
            "(line 1200,col 5)-(line 1200,col 78)",
            "(line 1201,col 5)-(line 1201,col 28)",
            "(line 1203,col 5)-(line 1203,col 41)",
            "(line 1204,col 5)-(line 1205,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPropertyRenaming()",
        "snippet": "  public void testPropertyRenaming() {\n    CompilerOptions options = createCompilerOptions();\n    options.propertyAffinity = true;\n    String code =\n        \"function f() { return this.foo + this['bar'] + this.Baz; }\" +\n        \"f.prototype.bar = 3; f.prototype.Baz = 3;\";\n    String heuristic =\n        \"function f() { return this.foo + this['bar'] + this.a; }\" +\n        \"f.prototype.bar = 3; f.prototype.a = 3;\";\n    String aggHeuristic =\n        \"function f() { return this.foo + this['b'] + this.a; } \" +\n        \"f.prototype.b = 3; f.prototype.a = 3;\";\n    String all =\n        \"function f() { return this.b + this['bar'] + this.a; }\" +\n        \"f.prototype.c = 3; f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, heuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n    test(options, code, aggHeuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, all);\n  }\n",
        "begin_line": 1208,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1209,col 5)-(line 1209,col 54)",
            "(line 1210,col 5)-(line 1210,col 36)",
            "(line 1211,col 5)-(line 1213,col 52)",
            "(line 1214,col 5)-(line 1216,col 50)",
            "(line 1217,col 5)-(line 1219,col 48)",
            "(line 1220,col 5)-(line 1222,col 48)",
            "(line 1223,col 5)-(line 1223,col 28)",
            "(line 1225,col 5)-(line 1225,col 64)",
            "(line 1226,col 5)-(line 1226,col 35)",
            "(line 1228,col 5)-(line 1228,col 75)",
            "(line 1229,col 5)-(line 1229,col 38)",
            "(line 1231,col 5)-(line 1231,col 67)",
            "(line 1232,col 5)-(line 1232,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConvertToDottedProperties()",
        "snippet": "  public void testConvertToDottedProperties() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return this['bar']; } f.prototype.bar = 3;\";\n    String expected =\n        \"function f() { return this.bar; } f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.convertToDottedProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1235,
        "end_line": 1246,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1236,col 54)",
            "(line 1237,col 5)-(line 1238,col 68)",
            "(line 1239,col 5)-(line 1240,col 63)",
            "(line 1241,col 5)-(line 1241,col 28)",
            "(line 1243,col 5)-(line 1243,col 45)",
            "(line 1244,col 5)-(line 1244,col 67)",
            "(line 1245,col 5)-(line 1245,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRewriteFunctionExpressions()",
        "snippet": "  public void testRewriteFunctionExpressions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a = function() {};\";\n    String expected = \"function JSCompiler_emptyFn(){return function(){}} \" +\n        \"var a = JSCompiler_emptyFn();\";\n    for (int i = 0; i < 10; i++) {\n      code += \"a = function() {};\";\n      expected += \"a = JSCompiler_emptyFn();\";\n    }\n    testSame(options, code);\n\n    options.rewriteFunctionExpressions = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1248,
        "end_line": 1261,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 5)-(line 1249,col 54)",
            "(line 1250,col 5)-(line 1250,col 43)",
            "(line 1251,col 5)-(line 1252,col 40)",
            "(line 1253,col 5)-(line 1256,col 5)",
            "(line 1257,col 5)-(line 1257,col 28)",
            "(line 1259,col 5)-(line 1259,col 46)",
            "(line 1260,col 5)-(line 1260,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasAllStrings()",
        "snippet": "  public void testAliasAllStrings() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 'a'; }\";\n    String expected = \"var $$S_a = 'a'; function f() { return $$S_a; }\";\n    testSame(options, code);\n\n    options.aliasAllStrings = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1263,
        "end_line": 1271,
        "comment": "",
        "child_ranges": [
            "(line 1264,col 5)-(line 1264,col 54)",
            "(line 1265,col 5)-(line 1265,col 49)",
            "(line 1266,col 5)-(line 1266,col 72)",
            "(line 1267,col 5)-(line 1267,col 28)",
            "(line 1269,col 5)-(line 1269,col 35)",
            "(line 1270,col 5)-(line 1270,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasExterns()",
        "snippet": "  public void testAliasExterns() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return window + window + window + window; }\";\n    String expected = \"var GLOBAL_window = window;\" +\n        \"function f() { return GLOBAL_window + GLOBAL_window + \" +\n        \"               GLOBAL_window + GLOBAL_window; }\";\n    testSame(options, code);\n\n    options.aliasExternals = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1273,
        "end_line": 1283,
        "comment": "",
        "child_ranges": [
            "(line 1274,col 5)-(line 1274,col 54)",
            "(line 1275,col 5)-(line 1275,col 79)",
            "(line 1276,col 5)-(line 1278,col 58)",
            "(line 1279,col 5)-(line 1279,col 28)",
            "(line 1281,col 5)-(line 1281,col 34)",
            "(line 1282,col 5)-(line 1282,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasKeywords()",
        "snippet": "  public void testAliasKeywords() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return true + true + true + true + true + true; }\";\n    String expected = \"var JSCompiler_alias_TRUE = true;\" +\n        \"function f() { return JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE; }\";\n    testSame(options, code);\n\n    options.aliasKeywords = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1285,
        "end_line": 1298,
        "comment": "",
        "child_ranges": [
            "(line 1286,col 5)-(line 1286,col 54)",
            "(line 1287,col 5)-(line 1288,col 75)",
            "(line 1289,col 5)-(line 1293,col 39)",
            "(line 1294,col 5)-(line 1294,col 28)",
            "(line 1296,col 5)-(line 1296,col 33)",
            "(line 1297,col 5)-(line 1297,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars1()",
        "snippet": "  public void testRenameVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"var abc = 3; function f() { var xyz = 5; return abc + xyz; }\";\n    String local = \"var abc = 3; function f() { var a = 5; return abc + a; }\";\n    String all = \"var a = 3; function c() { var b = 5; return a + b; }\";\n    testSame(options, code);\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    test(options, code, local);\n\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, all);\n\n    options.reserveRawExports = true;\n  }\n",
        "begin_line": 1300,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 5)-(line 1301,col 54)",
            "(line 1302,col 5)-(line 1303,col 71)",
            "(line 1304,col 5)-(line 1304,col 78)",
            "(line 1305,col 5)-(line 1305,col 72)",
            "(line 1306,col 5)-(line 1306,col 28)",
            "(line 1308,col 5)-(line 1308,col 60)",
            "(line 1309,col 5)-(line 1309,col 31)",
            "(line 1311,col 5)-(line 1311,col 58)",
            "(line 1312,col 5)-(line 1312,col 29)",
            "(line 1314,col 5)-(line 1314,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars2()",
        "snippet": "  public void testRenameVars2() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n\n    String code =     \"var abc = 3; function f() { window['a'] = 5; }\";\n    String noexport = \"var a = 3;   function b() { window['a'] = 5; }\";\n    String export =   \"var b = 3;   function c() { window['a'] = 5; }\";\n\n    options.reserveRawExports = false;\n    test(options, code, noexport);\n\n    options.reserveRawExports = true;\n    test(options, code, export);\n  }\n",
        "begin_line": 1317,
        "end_line": 1330,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 5)-(line 1318,col 54)",
            "(line 1319,col 5)-(line 1319,col 58)",
            "(line 1321,col 5)-(line 1321,col 71)",
            "(line 1322,col 5)-(line 1322,col 71)",
            "(line 1323,col 5)-(line 1323,col 71)",
            "(line 1325,col 5)-(line 1325,col 38)",
            "(line 1326,col 5)-(line 1326,col 34)",
            "(line 1328,col 5)-(line 1328,col 37)",
            "(line 1329,col 5)-(line 1329,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testShadowVaribles()",
        "snippet": "  public void testShadowVaribles() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    options.shadowVariables = true;\n    String code =     \"var f = function(x) { return function(y) {}}\";\n    String expected = \"var f = function(a) { return function(a) {}}\";\n    test(options, code, expected);\n  }\n",
        "begin_line": 1332,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 5)-(line 1333,col 54)",
            "(line 1334,col 5)-(line 1334,col 60)",
            "(line 1335,col 5)-(line 1335,col 35)",
            "(line 1336,col 5)-(line 1336,col 69)",
            "(line 1337,col 5)-(line 1337,col 69)",
            "(line 1338,col 5)-(line 1338,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameLabels()",
        "snippet": "  public void testRenameLabels() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"longLabel: for(;true;) { break longLabel; }\";\n    String expected = \"a: for(;true;) { break a; }\";\n    testSame(options, code);\n\n    options.labelRenaming = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1341,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1342,col 54)",
            "(line 1343,col 5)-(line 1343,col 64)",
            "(line 1344,col 5)-(line 1344,col 52)",
            "(line 1345,col 5)-(line 1345,col 28)",
            "(line 1347,col 5)-(line 1347,col 33)",
            "(line 1348,col 5)-(line 1348,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBadBreakStatementInIdeMode()",
        "snippet": "  public void testBadBreakStatementInIdeMode() {\n    // Ensure that type-checking doesn't crash, even if the CFG is malformed.\n    // This can happen in IDE mode.\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    options.checkTypes = true;\n    test(options,\n         \"function f() { try { } catch(e) { break; } }\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1351,
        "end_line": 1360,
        "comment": "",
        "child_ranges": [
            "(line 1354,col 5)-(line 1354,col 54)",
            "(line 1355,col 5)-(line 1355,col 27)",
            "(line 1356,col 5)-(line 1356,col 30)",
            "(line 1357,col 5)-(line 1359,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue63SourceMap()",
        "snippet": "  public void testIssue63SourceMap() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a;\";\n\n    options.skipAllPasses = true;\n    options.sourceMapOutputPath = \"./src.map\";\n\n    Compiler compiler = compile(options, code);\n    compiler.toSource();\n  }\n",
        "begin_line": 1362,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1363,col 5)-(line 1363,col 54)",
            "(line 1364,col 5)-(line 1364,col 27)",
            "(line 1366,col 5)-(line 1366,col 33)",
            "(line 1367,col 5)-(line 1367,col 46)",
            "(line 1369,col 5)-(line 1369,col 47)",
            "(line 1370,col 5)-(line 1370,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp1()",
        "snippet": "  public void testRegExp1() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String expected = \"\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1373,
        "end_line": 1386,
        "comment": "",
        "child_ranges": [
            "(line 1374,col 5)-(line 1374,col 54)",
            "(line 1375,col 5)-(line 1375,col 33)",
            "(line 1377,col 5)-(line 1377,col 39)",
            "(line 1379,col 5)-(line 1379,col 28)",
            "(line 1381,col 5)-(line 1381,col 46)",
            "(line 1383,col 5)-(line 1383,col 25)",
            "(line 1385,col 5)-(line 1385,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp2()",
        "snippet": "  public void testRegExp2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");var a = RegExp.$1\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, CheckRegExp.REGEXP_REFERENCE);\n\n    options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1388,
        "end_line": 1404,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1389,col 54)",
            "(line 1391,col 5)-(line 1391,col 33)",
            "(line 1393,col 5)-(line 1393,col 56)",
            "(line 1395,col 5)-(line 1395,col 28)",
            "(line 1397,col 5)-(line 1397,col 46)",
            "(line 1399,col 5)-(line 1399,col 54)",
            "(line 1401,col 5)-(line 1401,col 75)",
            "(line 1403,col 5)-(line 1403,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals1()",
        "snippet": "  public void testFoldLocals1() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // An external object, whose constructor has no side-effects,\n    // and whose method \"go\" only modifies the object.\n    String code = \"new Widget().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1406,
        "end_line": 1420,
        "comment": "",
        "child_ranges": [
            "(line 1407,col 5)-(line 1407,col 54)",
            "(line 1409,col 5)-(line 1409,col 33)",
            "(line 1413,col 5)-(line 1413,col 39)",
            "(line 1415,col 5)-(line 1415,col 28)",
            "(line 1417,col 5)-(line 1417,col 46)",
            "(line 1419,col 5)-(line 1419,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals2()",
        "snippet": "  public void testFoldLocals2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n    options.checkTypes = true;\n\n    // An external function that returns a local object that the\n    // method \"go\" that only modifies the object.\n    String code = \"widgetToken().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"widgetToken()\");\n  }\n",
        "begin_line": 1422,
        "end_line": 1437,
        "comment": "",
        "child_ranges": [
            "(line 1423,col 5)-(line 1423,col 54)",
            "(line 1425,col 5)-(line 1425,col 33)",
            "(line 1426,col 5)-(line 1426,col 30)",
            "(line 1430,col 5)-(line 1430,col 40)",
            "(line 1432,col 5)-(line 1432,col 28)",
            "(line 1434,col 5)-(line 1434,col 46)",
            "(line 1436,col 5)-(line 1436,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals3()",
        "snippet": "  public void testFoldLocals3() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // A function \"f\" who returns a known local object, and a method that\n    // modifies only modifies that.\n    String definition = \"function f(){return new Widget()}\";\n    String call = \"f().go();\";\n    String code = definition + call;\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    // BROKEN\n    //test(options, code, definition);\n    testSame(options, code);\n  }\n",
        "begin_line": 1440,
        "end_line": 1458,
        "comment": "",
        "child_ranges": [
            "(line 1441,col 5)-(line 1441,col 54)",
            "(line 1443,col 5)-(line 1443,col 33)",
            "(line 1447,col 5)-(line 1447,col 60)",
            "(line 1448,col 5)-(line 1448,col 30)",
            "(line 1449,col 5)-(line 1449,col 36)",
            "(line 1451,col 5)-(line 1451,col 28)",
            "(line 1453,col 5)-(line 1453,col 46)",
            "(line 1457,col 5)-(line 1457,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals4()",
        "snippet": "  public void testFoldLocals4() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/** @constructor */\\n\"\n        + \"function InternalWidget(){this.x = 1;}\"\n        + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\"\n        + \"new InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){this.x = 1;}\"\n      + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1460,
        "end_line": 1479,
        "comment": "",
        "child_ranges": [
            "(line 1461,col 5)-(line 1461,col 54)",
            "(line 1463,col 5)-(line 1463,col 33)",
            "(line 1465,col 5)-(line 1468,col 47)",
            "(line 1470,col 5)-(line 1470,col 28)",
            "(line 1472,col 5)-(line 1472,col 46)",
            "(line 1474,col 5)-(line 1476,col 73)",
            "(line 1478,col 5)-(line 1478,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals5()",
        "snippet": "  public void testFoldLocals5() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){var a={};a.x={};return a}\"\n        + \"fn().x.y = 1;\";\n\n    // \"fn\" returns a unescaped local object, we should be able to fold it,\n    // but we don't currently.\n    String result = \"\"\n        + \"function fn(){var a={x:{}};return a}\"\n        + \"fn().x.y = 1;\";\n\n    test(options, code, result);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1481,
        "end_line": 1501,
        "comment": "",
        "child_ranges": [
            "(line 1482,col 5)-(line 1482,col 54)",
            "(line 1484,col 5)-(line 1484,col 33)",
            "(line 1486,col 5)-(line 1488,col 26)",
            "(line 1492,col 5)-(line 1494,col 26)",
            "(line 1496,col 5)-(line 1496,col 32)",
            "(line 1498,col 5)-(line 1498,col 46)",
            "(line 1500,col 5)-(line 1500,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals6()",
        "snippet": "  public void testFoldLocals6() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){return {}}\"\n        + \"fn().x.y = 1;\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1503,
        "end_line": 1517,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 5)-(line 1504,col 54)",
            "(line 1506,col 5)-(line 1506,col 33)",
            "(line 1508,col 5)-(line 1510,col 26)",
            "(line 1512,col 5)-(line 1512,col 28)",
            "(line 1514,col 5)-(line 1514,col 46)",
            "(line 1516,col 5)-(line 1516,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals7()",
        "snippet": "  public void testFoldLocals7() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function InternalWidget(){return [];}\"\n        + \"Array.prototype.internalGo = function (){this.x = 2};\"\n        + \"InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){return [];}\"\n      + \"Array.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1519,
        "end_line": 1538,
        "comment": "",
        "child_ranges": [
            "(line 1520,col 5)-(line 1520,col 54)",
            "(line 1522,col 5)-(line 1522,col 33)",
            "(line 1524,col 5)-(line 1527,col 43)",
            "(line 1529,col 5)-(line 1529,col 28)",
            "(line 1531,col 5)-(line 1531,col 46)",
            "(line 1533,col 5)-(line 1535,col 64)",
            "(line 1537,col 5)-(line 1537,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVarDeclarationsIntoFor()",
        "snippet": "  public void testVarDeclarationsIntoFor() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"var a = 1; for (var b = 2; ;) {}\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n  }\n",
        "begin_line": 1540,
        "end_line": 1552,
        "comment": "",
        "child_ranges": [
            "(line 1541,col 5)-(line 1541,col 54)",
            "(line 1543,col 5)-(line 1543,col 49)",
            "(line 1545,col 5)-(line 1545,col 53)",
            "(line 1547,col 5)-(line 1547,col 28)",
            "(line 1549,col 5)-(line 1549,col 48)",
            "(line 1551,col 5)-(line 1551,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExploitAssigns()",
        "snippet": "  public void testExploitAssigns() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"a = 1; b = a; c = b\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"c=b=a=1\");\n  }\n",
        "begin_line": 1554,
        "end_line": 1566,
        "comment": "",
        "child_ranges": [
            "(line 1555,col 5)-(line 1555,col 54)",
            "(line 1557,col 5)-(line 1557,col 49)",
            "(line 1559,col 5)-(line 1559,col 40)",
            "(line 1561,col 5)-(line 1561,col 28)",
            "(line 1563,col 5)-(line 1563,col 48)",
            "(line 1565,col 5)-(line 1565,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRecoverOnBadExterns()",
        "snippet": "  public void testRecoverOnBadExterns() throws Exception {\n    // This test is for a bug in a very narrow set of circumstances:\n    // 1) externs validation has to be off.\n    // 2) aliasExternals has to be on.\n    // 3) The user has to reference a \"normal\" variable in externs.\n    // This case is handled at checking time by injecting a\n    // synthetic extern variable, and adding a \"@suppress {duplicate}\" to\n    // the normal code at compile time. But optimizations may remove that\n    // annotation, so we need to make sure that the variable declarations\n    // are de-duped before that happens.\n    CompilerOptions options = createCompilerOptions();\n\n    options.aliasExternals = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"extern.foo\"));\n\n    test(options,\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 1568,
        "end_line": 1590,
        "comment": "",
        "child_ranges": [
            "(line 1578,col 5)-(line 1578,col 54)",
            "(line 1580,col 5)-(line 1580,col 34)",
            "(line 1581,col 5)-(line 1582,col 54)",
            "(line 1584,col 5)-(line 1589,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDuplicateVariablesInExterns()",
        "snippet": "  public void testDuplicateVariablesInExterns() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\",\n            \"var externs = {}; /** @suppress {duplicate} */ var externs = {};\"));\n    testSame(options, \"\");\n  }\n",
        "begin_line": 1592,
        "end_line": 1599,
        "comment": "",
        "child_ranges": [
            "(line 1593,col 5)-(line 1593,col 54)",
            "(line 1594,col 5)-(line 1594,col 32)",
            "(line 1595,col 5)-(line 1597,col 81)",
            "(line 1598,col 5)-(line 1598,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode()",
        "snippet": "  public void testLanguageMode() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n\n    String code = \"var a = {get f(){}}\";\n\n    Compiler compiler = compile(options, code);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\n        \"JSC_PARSE_ERROR. Parse error. \" +\n        \"getters are not supported in older versions of JS. \" +\n        \"If you are targeting newer versions of JS, \" +\n        \"set the appropriate language_in option. \" +\n        \"at i0 line 1 : 0\",\n        compiler.getErrors()[0].toString());\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1601,
        "end_line": 1624,
        "comment": "",
        "child_ranges": [
            "(line 1602,col 5)-(line 1602,col 54)",
            "(line 1603,col 5)-(line 1603,col 52)",
            "(line 1605,col 5)-(line 1605,col 40)",
            "(line 1607,col 5)-(line 1607,col 47)",
            "(line 1608,col 5)-(line 1608,col 49)",
            "(line 1609,col 5)-(line 1615,col 44)",
            "(line 1617,col 5)-(line 1617,col 52)",
            "(line 1619,col 5)-(line 1619,col 28)",
            "(line 1621,col 5)-(line 1621,col 59)",
            "(line 1623,col 5)-(line 1623,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode2()",
        "snippet": "  public void testLanguageMode2() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n\n    String code = \"var a  = 2; delete a;\";\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    test(options,\n        code,\n        code,\n        StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1626,
        "end_line": 1645,
        "comment": "",
        "child_ranges": [
            "(line 1627,col 5)-(line 1627,col 54)",
            "(line 1628,col 5)-(line 1628,col 52)",
            "(line 1629,col 5)-(line 1629,col 73)",
            "(line 1631,col 5)-(line 1631,col 42)",
            "(line 1633,col 5)-(line 1633,col 28)",
            "(line 1635,col 5)-(line 1635,col 52)",
            "(line 1637,col 5)-(line 1637,col 28)",
            "(line 1639,col 5)-(line 1639,col 59)",
            "(line 1641,col 5)-(line 1644,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue598()",
        "snippet": "  public void testIssue598() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    String code =\n        \"'use strict';\\n\" +\n        \"function App() {}\\n\" +\n        \"App.prototype = {\\n\" +\n        \"  get appData() { return this.appData_; },\\n\" +\n        \"  set appData(data) { this.appData_ = data; }\\n\" +\n        \"};\";\n\n    Compiler compiler = compile(options, code);\n    testSame(options, code);\n  }\n",
        "begin_line": 1647,
        "end_line": 1664,
        "comment": "",
        "child_ranges": [
            "(line 1648,col 5)-(line 1648,col 54)",
            "(line 1649,col 5)-(line 1649,col 59)",
            "(line 1650,col 5)-(line 1650,col 60)",
            "(line 1652,col 5)-(line 1652,col 52)",
            "(line 1654,col 5)-(line 1660,col 13)",
            "(line 1662,col 5)-(line 1662,col 47)",
            "(line 1663,col 5)-(line 1663,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue701()",
        "snippet": "  public void testIssue701() {\n    // Check ASCII art in license comments.\n    String ascii = \"/**\\n\" +\n        \" * @preserve\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\";\n    String result = \"/*\\n\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\\n\";\n    testSame(createCompilerOptions(), ascii);\n    assertEquals(result, lastCompiler.toSource());\n  }\n",
        "begin_line": 1666,
        "end_line": 1681,
        "comment": "",
        "child_ranges": [
            "(line 1668,col 5)-(line 1673,col 13)",
            "(line 1674,col 5)-(line 1678,col 15)",
            "(line 1679,col 5)-(line 1679,col 45)",
            "(line 1680,col 5)-(line 1680,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue724()",
        "snippet": "  public void testIssue724() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"isFunction = function(functionToCheck) {\" +\n        \"  var getType = {};\" +\n        \"  return functionToCheck && \" +\n        \"      getType.toString.apply(functionToCheck) === \" +\n        \"     '[object Function]';\" +\n        \"};\";\n    String result =\n        \"isFunction=function(a){var b={};\" +\n        \"return a&&\\\"[object Function]\\\"===b.b.a(a)}\";\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1683,
        "end_line": 1699,
        "comment": "",
        "child_ranges": [
            "(line 1684,col 5)-(line 1684,col 54)",
            "(line 1685,col 5)-(line 1686,col 48)",
            "(line 1687,col 5)-(line 1693,col 13)",
            "(line 1694,col 5)-(line 1696,col 54)",
            "(line 1698,col 5)-(line 1698,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue730()",
        "snippet": "  public void testIssue730() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n\n    String code =\n        \"/** @constructor */function A() {this.foo = 0; Object.seal(this);}\\n\" +\n        \"/** @constructor */function B() {this.a = new A();}\\n\" +\n        \"B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\\n\" +\n        \"new B().dostuff();\\n\";\n\n    test(options,\n        code,\n        \"function a(){this.b=0;Object.seal(this)}\" +\n        \"(new function(){this.a=new a}).a.b++;\" +\n        \"alert(\\\"hi\\\")\");\n\n    options.removeUnusedClassProperties = true;\n\n    // This is still a problem when removeUnusedClassProperties are enabled.\n    test(options,\n        code,\n        \"function a(){Object.seal(this)}\" +\n        \"(new function(){this.a=new a}).a.b++;\" +\n        \"alert(\\\"hi\\\")\");\n  }\n",
        "begin_line": 1701,
        "end_line": 1726,
        "comment": "",
        "child_ranges": [
            "(line 1702,col 5)-(line 1702,col 54)",
            "(line 1703,col 5)-(line 1704,col 48)",
            "(line 1706,col 5)-(line 1710,col 31)",
            "(line 1712,col 5)-(line 1716,col 25)",
            "(line 1718,col 5)-(line 1718,col 47)",
            "(line 1721,col 5)-(line 1725,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoaleseVariables()",
        "snippet": "  public void testCoaleseVariables() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = false;\n    options.coalesceVariableNames = true;\n\n    String code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    String expected =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    a = a;\" +\n        \"    return a;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = false;\n\n    code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    expected =\n        \"function f(a) {\" +\n        \"  if (!a) {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n\n    expected =\n      \"function f(a) {\" +\n      \"  return a;\" +\n      \"}\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1728,
        "end_line": 1790,
        "comment": "",
        "child_ranges": [
            "(line 1729,col 5)-(line 1729,col 54)",
            "(line 1731,col 5)-(line 1731,col 34)",
            "(line 1732,col 5)-(line 1732,col 41)",
            "(line 1734,col 5)-(line 1743,col 12)",
            "(line 1744,col 5)-(line 1753,col 12)",
            "(line 1755,col 5)-(line 1755,col 34)",
            "(line 1757,col 5)-(line 1757,col 33)",
            "(line 1758,col 5)-(line 1758,col 42)",
            "(line 1760,col 5)-(line 1769,col 12)",
            "(line 1770,col 5)-(line 1777,col 12)",
            "(line 1779,col 5)-(line 1779,col 34)",
            "(line 1781,col 5)-(line 1781,col 33)",
            "(line 1782,col 5)-(line 1782,col 41)",
            "(line 1784,col 5)-(line 1787,col 10)",
            "(line 1789,col 5)-(line 1789,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateStatementFusion()",
        "snippet": "  public void testLateStatementFusion() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"while(a){a();if(b){b();b()}}\",\n        \"for(;a;)a(),b&&(b(),b())\");\n  }\n",
        "begin_line": 1792,
        "end_line": 1798,
        "comment": "",
        "child_ranges": [
            "(line 1793,col 5)-(line 1793,col 54)",
            "(line 1794,col 5)-(line 1794,col 33)",
            "(line 1795,col 5)-(line 1797,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateConstantReordering()",
        "snippet": "  public void testLateConstantReordering() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }\",\n        \"   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) \");\n  }\n",
        "begin_line": 1800,
        "end_line": 1806,
        "comment": "",
        "child_ranges": [
            "(line 1801,col 5)-(line 1801,col 54)",
            "(line 1802,col 5)-(line 1802,col 33)",
            "(line 1803,col 5)-(line 1805,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testsyntheticBlockOnDeadAssignments()",
        "snippet": "  public void testsyntheticBlockOnDeadAssignments() {\n    CompilerOptions options = createCompilerOptions();\n    options.deadAssignmentElimination = true;\n    options.removeUnusedVars = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"var x; x = 1; START(); x = 1;END();x()\",\n                  \"var x; x = 1;{START();{x = 1}END()}x()\");\n  }\n",
        "begin_line": 1808,
        "end_line": 1816,
        "comment": "",
        "child_ranges": [
            "(line 1809,col 5)-(line 1809,col 54)",
            "(line 1810,col 5)-(line 1810,col 45)",
            "(line 1811,col 5)-(line 1811,col 36)",
            "(line 1812,col 5)-(line 1812,col 48)",
            "(line 1813,col 5)-(line 1813,col 44)",
            "(line 1814,col 5)-(line 1815,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug4152835()",
        "snippet": "  public void testBug4152835() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"START();END()\", \"{START();{}END()}\");\n  }\n",
        "begin_line": 1818,
        "end_line": 1824,
        "comment": "",
        "child_ranges": [
            "(line 1819,col 5)-(line 1819,col 54)",
            "(line 1820,col 5)-(line 1820,col 33)",
            "(line 1821,col 5)-(line 1821,col 48)",
            "(line 1822,col 5)-(line 1822,col 44)",
            "(line 1823,col 5)-(line 1823,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug5786871()",
        "snippet": "  public void testBug5786871() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options, \"function () {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1826,
        "end_line": 1830,
        "comment": "",
        "child_ranges": [
            "(line 1827,col 5)-(line 1827,col 54)",
            "(line 1828,col 5)-(line 1828,col 27)",
            "(line 1829,col 5)-(line 1829,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue378()",
        "snippet": "  public void testIssue378() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    testSame(options, \"function f(c) {var f = c; arguments[0] = this;\" +\n                      \"    f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 1832,
        "end_line": 1838,
        "comment": "",
        "child_ranges": [
            "(line 1833,col 5)-(line 1833,col 54)",
            "(line 1834,col 5)-(line 1834,col 35)",
            "(line 1835,col 5)-(line 1835,col 48)",
            "(line 1836,col 5)-(line 1837,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue550()",
        "snippet": "  public void testIssue550() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    test(options,\n        \"function f(h) {\\n\" +\n        \"  var a = h;\\n\" +\n        \"  a = a + 'x';\\n\" +\n        \"  a = a + 'y';\\n\" +\n        \"  return a;\\n\" +\n        \"}\",\n        // This should eventually get inlined completely.\n        \"function f(a) { a += 'x'; return a += 'y'; }\");\n  }\n",
        "begin_line": 1840,
        "end_line": 1856,
        "comment": "",
        "child_ranges": [
            "(line 1841,col 5)-(line 1841,col 54)",
            "(line 1842,col 5)-(line 1843,col 48)",
            "(line 1844,col 5)-(line 1844,col 33)",
            "(line 1845,col 5)-(line 1845,col 35)",
            "(line 1846,col 5)-(line 1846,col 48)",
            "(line 1847,col 5)-(line 1855,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    CompilerOptions options = createCompilerOptions();\n    options.smartNameRemoval = true;\n    test(options,\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1858,
        "end_line": 1874,
        "comment": "",
        "child_ranges": [
            "(line 1859,col 5)-(line 1859,col 54)",
            "(line 1860,col 5)-(line 1860,col 36)",
            "(line 1861,col 5)-(line 1873,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue772()",
        "snippet": "  public void testIssue772() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    test(\n        options,\n        \"/** @const */ var a = {};\" +\n        \"/** @const */ a.b = {};\" +\n        \"/** @const */ a.b.c = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var b = a.b;\" +\n        \"  var c = b.c;\" +\n        \"  /** @typedef {string} */\" +\n        \"  c.MyType;\" +\n        \"  /** @param {c.MyType} x The variable. */\" +\n        \"  c.myFunc = function(x) {};\" +\n        \"});\",\n        \"/** @const */ var a = {};\" +\n        \"/** @const */ a.b = {};\" +\n        \"/** @const */ a.b.c = {};\" +\n        \"a.b.c.MyType;\" +\n        \"a.b.c.myFunc = function(x) {};\");\n  }\n",
        "begin_line": 1876,
        "end_line": 1898,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 5)-(line 1877,col 54)",
            "(line 1878,col 5)-(line 1878,col 31)",
            "(line 1879,col 5)-(line 1879,col 30)",
            "(line 1880,col 5)-(line 1897,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCodingConvention()",
        "snippet": "  public void testCodingConvention() {\n    Compiler compiler = new Compiler();\n    compiler.initOptions(new CompilerOptions());\n    assertEquals(\n      compiler.getCodingConvention().getClass().toString(),\n      ClosureCodingConvention.class.toString());\n  }\n",
        "begin_line": 1900,
        "end_line": 1906,
        "comment": "",
        "child_ranges": [
            "(line 1901,col 5)-(line 1901,col 39)",
            "(line 1902,col 5)-(line 1902,col 48)",
            "(line 1903,col 5)-(line 1905,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testJQueryStringSplitLoops()",
        "snippet": "  public void testJQueryStringSplitLoops() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"var x='1234567'.split('')\");\n\n    options = createCompilerOptions();\n    options.foldConstants = true;\n    options.computeFunctionSideEffects = false;\n    options.removeUnusedVars = true;\n\n    // If we do splits too early, it would add a side-effect to x.\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"\");\n\n  }\n",
        "begin_line": 1908,
        "end_line": 1925,
        "comment": "",
        "child_ranges": [
            "(line 1909,col 5)-(line 1909,col 54)",
            "(line 1910,col 5)-(line 1910,col 33)",
            "(line 1911,col 5)-(line 1913,col 35)",
            "(line 1915,col 5)-(line 1915,col 38)",
            "(line 1916,col 5)-(line 1916,col 33)",
            "(line 1917,col 5)-(line 1917,col 47)",
            "(line 1918,col 5)-(line 1918,col 36)",
            "(line 1921,col 5)-(line 1923,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAlwaysRunSafetyCheck()",
        "snippet": "  public void testAlwaysRunSafetyCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = false;\n    options.customPasses = ArrayListMultimap.create();\n    options.customPasses.put(\n        CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,\n        new CompilerPass() {\n          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n        });\n    try {\n      test(options,\n           \"var x = 3; function f() { return x + z; }\",\n           \"function f() { return x + z; }\");\n      fail(\"Expected run-time exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 1927,
        "end_line": 1948,
        "comment": "",
        "child_ranges": [
            "(line 1928,col 5)-(line 1928,col 54)",
            "(line 1929,col 5)-(line 1929,col 33)",
            "(line 1930,col 5)-(line 1930,col 54)",
            "(line 1931,col 5)-(line 1939,col 11)",
            "(line 1940,col 5)-(line 1947,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.Anonymous-7c9d3b18-4be8-41b3-850b-1995d87a7e5b.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n",
        "begin_line": 1934,
        "end_line": 1938,
        "comment": "",
        "child_ranges": [
            "(line 1935,col 13)-(line 1935,col 59)",
            "(line 1936,col 13)-(line 1936,col 51)",
            "(line 1937,col 13)-(line 1937,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressEs5StrictWarning()",
        "snippet": "  public void testSuppressEs5StrictWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n    test(options,\n        \"/** @suppress{es5Strict} */\\n\" +\n        \"function f() { var arguments; }\",\n        \"function f() {}\");\n  }\n",
        "begin_line": 1950,
        "end_line": 1957,
        "comment": "",
        "child_ranges": [
            "(line 1951,col 5)-(line 1951,col 54)",
            "(line 1952,col 5)-(line 1952,col 77)",
            "(line 1953,col 5)-(line 1956,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesWarning()",
        "snippet": "  public void testCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    test(options,\n        \"/** @constructor */\\n\" +\n        \"function f() { var arguments; }\",\n        DiagnosticType.warning(\"JSC_MISSING_PROVIDE\", \"missing goog.provide(''{0}'')\"));\n  }\n",
        "begin_line": 1959,
        "end_line": 1967,
        "comment": "",
        "child_ranges": [
            "(line 1960,col 5)-(line 1960,col 54)",
            "(line 1961,col 5)-(line 1961,col 81)",
            "(line 1962,col 5)-(line 1962,col 49)",
            "(line 1963,col 5)-(line 1966,col 88)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCheckProvidesWarning()",
        "snippet": "  public void testSuppressCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    testSame(options,\n        \"/** @constructor\\n\" +\n        \" *  @suppress{checkProvides} */\\n\" +\n        \"function f() {}\");\n  }\n",
        "begin_line": 1969,
        "end_line": 1977,
        "comment": "",
        "child_ranges": [
            "(line 1970,col 5)-(line 1970,col 54)",
            "(line 1971,col 5)-(line 1971,col 81)",
            "(line 1972,col 5)-(line 1972,col 49)",
            "(line 1973,col 5)-(line 1976,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCastWarning()",
        "snippet": "  public void testSuppressCastWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n\n    normalizeResults = true;\n\n    test(options,\n        \"function f() { var xyz = /** @type {string} */ (0); }\",\n        DiagnosticType.warning(\n            \"JSC_INVALID_CAST\", \"invalid cast\"));\n\n    testSame(options,\n        \"/** @suppress{cast} */\\n\" +\n        \"function f() { var xyz = /** @type {string} */ (0); }\");\n  }\n",
        "begin_line": 1979,
        "end_line": 1993,
        "comment": "",
        "child_ranges": [
            "(line 1980,col 5)-(line 1980,col 54)",
            "(line 1981,col 5)-(line 1981,col 78)",
            "(line 1983,col 5)-(line 1983,col 28)",
            "(line 1985,col 5)-(line 1988,col 49)",
            "(line 1990,col 5)-(line 1992,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefix()",
        "snippet": "  public void testRenamePrefix() {\n    String code = \"var x = {}; function f(y) {}\";\n    CompilerOptions options = createCompilerOptions();\n    options.renamePrefix = \"G_\";\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, \"var G_={}; function G_a(a) {}\");\n  }\n",
        "begin_line": 1995,
        "end_line": 2001,
        "comment": "",
        "child_ranges": [
            "(line 1996,col 5)-(line 1996,col 49)",
            "(line 1997,col 5)-(line 1997,col 54)",
            "(line 1998,col 5)-(line 1998,col 32)",
            "(line 1999,col 5)-(line 1999,col 58)",
            "(line 2000,col 5)-(line 2000,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespace()",
        "snippet": "  public void testRenamePrefixNamespace() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x$FOO = 5; _.x$bar = 3;\");\n  }\n",
        "begin_line": 2003,
        "end_line": 2013,
        "comment": "",
        "child_ranges": [
            "(line 2004,col 5)-(line 2005,col 44)",
            "(line 2007,col 5)-(line 2007,col 54)",
            "(line 2008,col 5)-(line 2008,col 28)",
            "(line 2010,col 5)-(line 2010,col 38)",
            "(line 2011,col 5)-(line 2011,col 40)",
            "(line 2012,col 5)-(line 2012,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceProtectSideEffects()",
        "snippet": "  public void testRenamePrefixNamespaceProtectSideEffects() {\n    String code = \"var x = null; try { +x.FOO; } catch (e) {}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(\n        options);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x = null; try { +_.x.FOO; } catch (e) {}\");\n  }\n",
        "begin_line": 2015,
        "end_line": 2025,
        "comment": "",
        "child_ranges": [
            "(line 2016,col 5)-(line 2016,col 63)",
            "(line 2018,col 5)-(line 2018,col 54)",
            "(line 2019,col 5)-(line 2019,col 28)",
            "(line 2021,col 5)-(line 2022,col 17)",
            "(line 2023,col 5)-(line 2023,col 40)",
            "(line 2024,col 5)-(line 2024,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceActivatesMoveFunctionDeclarations()",
        "snippet": "  public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f; function f() { return 3; }\";\n    testSame(options, code);\n    assertFalse(options.moveFunctionDeclarations);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.f = function() { return 3; }; _.x = _.f;\");\n  }\n",
        "begin_line": 2027,
        "end_line": 2034,
        "comment": "",
        "child_ranges": [
            "(line 2028,col 5)-(line 2028,col 54)",
            "(line 2029,col 5)-(line 2029,col 58)",
            "(line 2030,col 5)-(line 2030,col 28)",
            "(line 2031,col 5)-(line 2031,col 50)",
            "(line 2032,col 5)-(line 2032,col 40)",
            "(line 2033,col 5)-(line 2033,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBrokenNameSpace()",
        "snippet": "  public void testBrokenNameSpace() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var goog; goog.provide('i.am.on.a.Horse');\" +\n                  \"i.am.on.a.Horse = function() {};\" +\n                  \"i.am.on.a.Horse.prototype.x = function() {};\" +\n                  \"i.am.on.a.Boat.prototype.y = function() {}\";\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 2036,
        "end_line": 2046,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2037,col 54)",
            "(line 2038,col 5)-(line 2041,col 63)",
            "(line 2042,col 5)-(line 2042,col 31)",
            "(line 2043,col 5)-(line 2043,col 38)",
            "(line 2044,col 5)-(line 2044,col 36)",
            "(line 2045,col 5)-(line 2045,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNamelessParameter()",
        "snippet": "  public void testNamelessParameter() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"var impl_0;\" +\n        \"$load($init());\" +\n        \"function $load(){\" +\n        \"  window['f'] = impl_0;\" +\n        \"}\" +\n        \"function $init() {\" +\n        \"  impl_0 = {};\" +\n        \"}\";\n    String result =\n        \"window.f = {};\";\n    test(options, code, result);\n  }\n",
        "begin_line": 2048,
        "end_line": 2064,
        "comment": "",
        "child_ranges": [
            "(line 2049,col 5)-(line 2049,col 54)",
            "(line 2050,col 5)-(line 2051,col 48)",
            "(line 2052,col 5)-(line 2060,col 12)",
            "(line 2061,col 5)-(line 2062,col 25)",
            "(line 2063,col 5)-(line 2063,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setAliasExternals(true);\n    String code =\n        \"window.offsetWidth;\";\n    String result =\n        \"window.offsetWidth;\";\n    test(options, code, result);\n  }\n",
        "begin_line": 2066,
        "end_line": 2076,
        "comment": "",
        "child_ranges": [
            "(line 2067,col 5)-(line 2067,col 54)",
            "(line 2068,col 5)-(line 2069,col 48)",
            "(line 2070,col 5)-(line 2070,col 36)",
            "(line 2071,col 5)-(line 2072,col 30)",
            "(line 2073,col 5)-(line 2074,col 30)",
            "(line 2075,col 5)-(line 2075,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNegativeZero()",
        "snippet": "  public void testNegativeZero() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function bar(x) { return x; }\\n\" +\n        \"function foo(x) { print(x / bar(0));\\n\" +\n        \"                 print(x / bar(-0)); }\\n\" +\n        \"foo(3);\",\n        \"print(3/0);print(3/-0);\");\n  }\n",
        "begin_line": 2078,
        "end_line": 2088,
        "comment": "",
        "child_ranges": [
            "(line 2079,col 5)-(line 2079,col 54)",
            "(line 2080,col 5)-(line 2081,col 48)",
            "(line 2082,col 5)-(line 2087,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSingletonGetter1()",
        "snippet": "  public void testSingletonGetter1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n        \"/** @const */\\n\" +\n        \"var goog = goog || {};\\n\" +\n        \"goog.addSingletonGetter = function(ctor) {\\n\" +\n        \"  ctor.getInstance = function() {\\n\" +\n        \"    return ctor.instance_ || (ctor.instance_ = new ctor());\\n\" +\n        \"  };\\n\" +\n        \"};\" +\n        \"function Foo() {}\\n\" +\n        \"goog.addSingletonGetter(Foo);\" +\n        \"Foo.prototype.bar = 1;\" +\n        \"function Bar() {}\\n\" +\n        \"goog.addSingletonGetter(Bar);\" +\n        \"Bar.prototype.bar = 1;\",\n        \"\");\n  }\n",
        "begin_line": 2090,
        "end_line": 2110,
        "comment": "",
        "child_ranges": [
            "(line 2091,col 5)-(line 2091,col 54)",
            "(line 2092,col 5)-(line 2093,col 48)",
            "(line 2094,col 5)-(line 2094,col 63)",
            "(line 2095,col 5)-(line 2109,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction1()",
        "snippet": "  public void testIncompleteFunction1() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"var foo = {bar: function(e) }\" },\n        new String[] { \"var foo = {bar: function(e){}};\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2112,
        "end_line": 2123,
        "comment": "",
        "child_ranges": [
            "(line 2113,col 5)-(line 2113,col 54)",
            "(line 2114,col 5)-(line 2114,col 27)",
            "(line 2115,col 5)-(line 2117,col 40)",
            "(line 2118,col 5)-(line 2122,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction2()",
        "snippet": "  public void testIncompleteFunction2() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"function hi\" },\n        new String[] { \"function hi() {}\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2125,
        "end_line": 2140,
        "comment": "",
        "child_ranges": [
            "(line 2126,col 5)-(line 2126,col 54)",
            "(line 2127,col 5)-(line 2127,col 27)",
            "(line 2128,col 5)-(line 2134,col 40)",
            "(line 2135,col 5)-(line 2139,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSortingOff()",
        "snippet": "  public void testSortingOff() {\n    CompilerOptions options = new CompilerOptions();\n    options.closurePass = true;\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n         new String[] {\n           \"goog.require('goog.beer');\",\n           \"goog.provide('goog.beer');\"\n         },\n         ProcessClosurePrimitives.LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 2142,
        "end_line": 2152,
        "comment": "",
        "child_ranges": [
            "(line 2143,col 5)-(line 2143,col 52)",
            "(line 2144,col 5)-(line 2144,col 31)",
            "(line 2145,col 5)-(line 2145,col 63)",
            "(line 2146,col 5)-(line 2151,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnboundedArrayLiteralInfiniteLoop()",
        "snippet": "  public void testUnboundedArrayLiteralInfiniteLoop() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options,\n         \"var x = [1, 2\",\n         \"var x = [1, 2]\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 2154,
        "end_line": 2161,
        "comment": "",
        "child_ranges": [
            "(line 2155,col 5)-(line 2155,col 54)",
            "(line 2156,col 5)-(line 2156,col 27)",
            "(line 2157,col 5)-(line 2160,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvideRequireSameFile()",
        "snippet": "  public void testProvideRequireSameFile() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    options.closurePass = true;\n    test(\n        options,\n        \"goog.provide('x');\\ngoog.require('x');\",\n        \"var x = {};\");\n  }\n",
        "begin_line": 2163,
        "end_line": 2173,
        "comment": "",
        "child_ranges": [
            "(line 2164,col 5)-(line 2164,col 54)",
            "(line 2165,col 5)-(line 2167,col 37)",
            "(line 2168,col 5)-(line 2168,col 31)",
            "(line 2169,col 5)-(line 2172,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDependencySorting()",
        "snippet": "  public void testDependencySorting() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    test(\n        options,\n        new String[] {\n          \"goog.require('x');\",\n          \"goog.provide('x');\",\n        },\n        new String[] {\n          \"goog.provide('x');\",\n          \"goog.require('x');\",\n\n          // For complicated reasons involving modules,\n          // the compiler creates a synthetic source file.\n          \"\",\n        });\n  }\n",
        "begin_line": 2175,
        "end_line": 2194,
        "comment": "",
        "child_ranges": [
            "(line 2176,col 5)-(line 2176,col 54)",
            "(line 2177,col 5)-(line 2179,col 37)",
            "(line 2180,col 5)-(line 2193,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuard()",
        "snippet": "  public void testStrictWarningsGuard() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(1, compiler.getErrors().length);\n    assertEquals(0, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2196,
        "end_line": 2205,
        "comment": "",
        "child_ranges": [
            "(line 2197,col 5)-(line 2197,col 54)",
            "(line 2198,col 5)-(line 2198,col 30)",
            "(line 2199,col 5)-(line 2199,col 56)",
            "(line 2201,col 5)-(line 2202,col 65)",
            "(line 2203,col 5)-(line 2203,col 49)",
            "(line 2204,col 5)-(line 2204,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuardEmergencyMode()",
        "snippet": "  public void testStrictWarningsGuardEmergencyMode() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n    options.useEmergencyFailSafe();\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(0, compiler.getErrors().length);\n    assertEquals(1, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2207,
        "end_line": 2217,
        "comment": "",
        "child_ranges": [
            "(line 2208,col 5)-(line 2208,col 54)",
            "(line 2209,col 5)-(line 2209,col 30)",
            "(line 2210,col 5)-(line 2210,col 56)",
            "(line 2211,col 5)-(line 2211,col 35)",
            "(line 2213,col 5)-(line 2214,col 65)",
            "(line 2215,col 5)-(line 2215,col 49)",
            "(line 2216,col 5)-(line 2216,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineProperties()",
        "snippet": "  public void testInlineProperties() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var ns = {};\\n\" +\n        \"/** @constructor */\\n\" +\n        \"ns.C = function () {this.someProperty = 1}\\n\" +\n        \"alert(new ns.C().someProperty + new ns.C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2219,
        "end_line": 2234,
        "comment": "",
        "child_ranges": [
            "(line 2220,col 5)-(line 2220,col 54)",
            "(line 2221,col 5)-(line 2221,col 69)",
            "(line 2222,col 5)-(line 2222,col 49)",
            "(line 2223,col 5)-(line 2223,col 51)",
            "(line 2225,col 5)-(line 2229,col 70)",
            "(line 2230,col 5)-(line 2230,col 41)",
            "(line 2231,col 5)-(line 2231,col 43)",
            "(line 2233,col 5)-(line 2233,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefineClass1()",
        "snippet": "  public void testGoogDefineClass1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var ns = {};\\n\" +\n        \"ns.C = goog.defineClass(null, {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  constructor: function () {this.someProperty = 1}\\n\" +\n        \"});\\n\" +\n        \"alert(new ns.C().someProperty + new ns.C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2236,
        "end_line": 2253,
        "comment": "",
        "child_ranges": [
            "(line 2237,col 5)-(line 2237,col 54)",
            "(line 2238,col 5)-(line 2238,col 69)",
            "(line 2239,col 5)-(line 2239,col 49)",
            "(line 2240,col 5)-(line 2240,col 51)",
            "(line 2242,col 5)-(line 2248,col 70)",
            "(line 2249,col 5)-(line 2249,col 41)",
            "(line 2250,col 5)-(line 2250,col 43)",
            "(line 2252,col 5)-(line 2252,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefineClass2()",
        "snippet": "  public void testGoogDefineClass2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n\n    String code = \"\" +\n        \"var C = goog.defineClass(null, {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  constructor: function () {this.someProperty = 1}\\n\" +\n        \"});\\n\" +\n        \"alert(new C().someProperty + new C().someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, \"alert(2);\");\n  }\n",
        "begin_line": 2255,
        "end_line": 2271,
        "comment": "",
        "child_ranges": [
            "(line 2256,col 5)-(line 2256,col 54)",
            "(line 2257,col 5)-(line 2257,col 69)",
            "(line 2258,col 5)-(line 2258,col 49)",
            "(line 2259,col 5)-(line 2259,col 51)",
            "(line 2261,col 5)-(line 2266,col 64)",
            "(line 2267,col 5)-(line 2267,col 41)",
            "(line 2268,col 5)-(line 2268,col 43)",
            "(line 2270,col 5)-(line 2270,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGoogDefineClass3()",
        "snippet": "  public void testGoogDefineClass3() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    level.setTypeBasedOptimizationOptions(options);\n    WarningLevel warnings = WarningLevel.VERBOSE;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var C = goog.defineClass(null, {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  constructor: function () {\\n\" +\n        \"    /** @type {number} */\\n\" +\n        \"    this.someProperty = 1},\\n\" +\n        \"  /** @param {string} a */\\n\" +\n        \"  someMethod: function (a) {}\\n\" +\n        \"});\" +\n        \"var x = new C();\\n\" +\n        \"x.someMethod(x.someProperty);\\n\";\n    assertTrue(options.inlineProperties);\n    assertTrue(options.collapseProperties);\n    // CollapseProperties used to prevent inlining this property.\n    test(options, code, TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 2273,
        "end_line": 2296,
        "comment": "",
        "child_ranges": [
            "(line 2274,col 5)-(line 2274,col 54)",
            "(line 2275,col 5)-(line 2275,col 69)",
            "(line 2276,col 5)-(line 2276,col 49)",
            "(line 2277,col 5)-(line 2277,col 51)",
            "(line 2278,col 5)-(line 2278,col 49)",
            "(line 2279,col 5)-(line 2279,col 48)",
            "(line 2281,col 5)-(line 2291,col 42)",
            "(line 2292,col 5)-(line 2292,col 41)",
            "(line 2293,col 5)-(line 2293,col 43)",
            "(line 2295,col 5)-(line 2295,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConstants1()",
        "snippet": "  public void testCheckConstants1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.QUIET;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var foo; foo();\\n\" +\n        \"/** @const */\\n\" +\n        \"var x = 1; foo(); x = 2;\\n\";\n    test(options, code, code);\n  }\n",
        "begin_line": 2298,
        "end_line": 2310,
        "comment": "",
        "child_ranges": [
            "(line 2299,col 5)-(line 2299,col 54)",
            "(line 2300,col 5)-(line 2300,col 67)",
            "(line 2301,col 5)-(line 2301,col 49)",
            "(line 2302,col 5)-(line 2302,col 47)",
            "(line 2303,col 5)-(line 2303,col 48)",
            "(line 2305,col 5)-(line 2308,col 37)",
            "(line 2309,col 5)-(line 2309,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConstants2()",
        "snippet": "  public void testCheckConstants2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.DEFAULT;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"var foo;\\n\" +\n        \"/** @const */\\n\" +\n        \"var x = 1; foo(); x = 2;\\n\";\n    test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 2312,
        "end_line": 2324,
        "comment": "",
        "child_ranges": [
            "(line 2313,col 5)-(line 2313,col 54)",
            "(line 2314,col 5)-(line 2314,col 67)",
            "(line 2315,col 5)-(line 2315,col 49)",
            "(line 2316,col 5)-(line 2316,col 49)",
            "(line 2317,col 5)-(line 2317,col 48)",
            "(line 2319,col 5)-(line 2322,col 37)",
            "(line 2323,col 5)-(line 2323,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue787()",
        "snippet": "  public void testIssue787() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel warnings = WarningLevel.DEFAULT;\n    warnings.setOptionsForWarningLevel(options);\n\n    String code = \"\" +\n        \"function some_function() {\\n\" +\n        \"  var fn1;\\n\" +\n        \"  var fn2;\\n\" +\n        \"\\n\" +\n        \"  if (any_expression) {\\n\" +\n        \"    fn2 = external_ref;\\n\" +\n        \"    fn1 = function (content) {\\n\" +\n        \"      return fn2();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return {\\n\" +\n        \"    method1: function () {\\n\" +\n        \"      if (fn1) fn1();\\n\" +\n        \"      return true;\\n\" +\n        \"    },\\n\" +\n        \"    method2: function () {\\n\" +\n        \"      return false;\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String result = \"\" +\n        \"function some_function() {\\n\" +\n        \"  var a, b;\\n\" +\n        \"  any_expression && (b = external_ref, a = function(a) {\\n\" +\n        \"    return b()\\n\" +\n        \"  });\\n\" +\n        \"  return{method1:function() {\\n\" +\n        \"    a && a();\\n\" +\n        \"    return !0\\n\" +\n        \"  }, method2:function() {\\n\" +\n        \"    return !1\\n\" +\n        \"  }}\\n\" +\n        \"}\\n\" +\n        \"\";\n\n    test(options, code, result);\n  }\n",
        "begin_line": 2326,
        "end_line": 2372,
        "comment": "",
        "child_ranges": [
            "(line 2327,col 5)-(line 2327,col 54)",
            "(line 2328,col 5)-(line 2328,col 67)",
            "(line 2329,col 5)-(line 2329,col 49)",
            "(line 2330,col 5)-(line 2330,col 49)",
            "(line 2331,col 5)-(line 2331,col 48)",
            "(line 2333,col 5)-(line 2354,col 12)",
            "(line 2356,col 5)-(line 2369,col 11)",
            "(line 2371,col 5)-(line 2371,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testManyAdds()",
        "snippet": "  public void testManyAdds() {}\n",
        "begin_line": 2374,
        "end_line": 2374,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.createCompilerOptions()",
        "snippet": "  @Override\n  protected CompilerOptions createCompilerOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    return options;\n  }\n",
        "begin_line": 2393,
        "end_line": 2398,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": [
            "(line 2395,col 5)-(line 2395,col 52)",
            "(line 2396,col 5)-(line 2396,col 62)",
            "(line 2397,col 5)-(line 2397,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.RemoveUnusedVarsTest()",
        "snippet": "  public RemoveUnusedVarsTest() {\n    super(\"function alert() {}\");\n    enableNormalize();\n  }\n",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 5)-(line 27,col 33)",
            "(line 28,col 5)-(line 28,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    removeGlobal = true;\n    preserveFunctionExpressionNames = false;\n    modifyCallSites = false;\n  }\n",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 24)",
            "(line 34,col 5)-(line 34,col 44)",
            "(line 35,col 5)-(line 35,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new RemoveUnusedVars(\n        compiler, removeGlobal, preserveFunctionExpressionNames,\n        modifyCallSites);\n  }\n",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 42,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveUnusedVars()",
        "snippet": "  public void testRemoveUnusedVars() {\n    // Test lots of stuff\n    test(\"var a;var b=3;var c=function(){};var x=A();var y; var z;\" +\n         \"function A(){B()} function B(){C(b)} function C(){} \" +\n         \"function X(){Y()} function Y(z){Z(x)} function Z(){y} \" +\n         \"P=function(){A()}; \" +\n         \"try{0}catch(e){a}\",\n\n         \"var a;var b=3;A();function A(){B()}\" +\n         \"function B(){C(b)}\" +\n         \"function C(){}\" +\n         \"P=function(){A()}\" +\n         \";try{0}catch(e){a}\");\n\n    // Test removal from if {} blocks\n    test(\"var i=0;var j=0;if(i>0){var k=1;}\",\n         \"var i=0;if(i>0);\");\n\n    // Test with for loop\n    test(\"for (var i in booyah) {\" +\n         \"  if (i > 0) x += ', ';\" +\n         \"  var arg = 'foo';\" +\n         \"  if (arg.length > 40) {\" +\n         \"    var unused = 'bar';\" +   // this variable is unused\n         \"    arg = arg.substr(0, 40) + '...';\" +\n         \"  }\" +\n         \"  x += arg;\" +\n         \"}\",\n\n         \"for(var i in booyah){if(i>0)x+=\\\", \\\";\" +\n         \"var arg=\\\"foo\\\";if(arg.length>40)arg=arg.substr(0,40)+\\\"...\\\";\" +\n         \"x+=arg}\");\n\n    // Test with function expressions in another function call\n    test(\"function A(){}\" +\n         \"if(0){function B(){}}win.setTimeout(function(){A()})\",\n         \"function A(){}\" +\n         \"if(0);win.setTimeout(function(){A()})\");\n\n    // Test with recursive functions\n    test(\"function A(){A()}function B(){B()}B()\",\n         \"function B(){B()}B()\");\n\n    // Test with multiple var declarations.\n    test(\"var x,y=2,z=3;A(x);B(z);var a,b,c=4;C()\",\n         \"var x,z=3;A(x);B(z);C()\");\n\n    // Test with for loop declarations\n    test(\"for(var i=0,j=0;i<10;){}\" +\n         \"for(var x=0,y=0;;y++){}\" +\n         \"for(var a,b;;){a}\" +\n         \"for(var c,d;;);\" +\n         \"for(var item in items){}\",\n\n         \"for(var i=0;i<10;);\" +\n         \"for(var y=0;;y++);\" +\n         \"for(var a;;)a;\" +\n         \"for(;;);\" +\n         \"for(var item in items);\");\n\n    // Test multiple passes required\n    test(\"var a,b,c,d;var e=[b,c];var x=e[3];var f=[d];print(f[0])\",\n         \"var d;var f=[d];print(f[0])\");\n\n    // Test proper scoping (static vs dynamic)\n    test(\"var x;function A(){var x;B()}function B(){print(x)}A()\",\n         \"var x;function A(){B()}function B(){print(x)}A()\");\n\n    // Test closures in a return statement\n    test(\"function A(){var x;return function(){print(x)}}A()\",\n         \"function A(){var x;return function(){print(x)}}A()\");\n\n    // Test other closures, multiple passes\n    test(\"function A(){}function B(){\" +\n         \"var c,d,e,f,g,h;\" +\n         \"function C(){print(c)}\" +\n         \"var handler=function(){print(d)};\" +\n         \"var handler2=function(){handler()};\" +\n         \"e=function(){print(e)};\" +\n         \"if(1){function G(){print(g)}}\" +\n         \"arr=[function(){print(h)}];\" +\n         \"return function(){print(f)}}B()\",\n\n         \"function B(){\" +\n         \"var f,h;\" +\n         \"if(1);\" +\n         \"arr=[function(){print(h)}];\" +\n         \"return function(){print(f)}}B()\");\n\n    // Test exported names\n    test(\"var a,b=1; function _A1() {this.foo(a)}\",\n         \"var a;function _A1(){this.foo(a)}\");\n\n    // Test undefined (i.e. externally defined) names\n    test(\"undefinedVar = 1\", \"undefinedVar=1\");\n\n    // Test unused vars with side effects\n    test(\"var a,b=foo(),c=i++,d;var e=boo();var f;print(d);\",\n         \"foo(); i++; var d; boo(); print(d)\");\n\n    test(\"var a,b=foo()\", \"foo()\");\n    test(\"var b=foo(),a\", \"foo()\");\n    test(\"var a,b=foo(a)\", \"var a; foo(a);\");\n  }\n",
        "begin_line": 45,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 57,col 31)",
            "(line 60,col 5)-(line 61,col 29)",
            "(line 64,col 5)-(line 76,col 20)",
            "(line 79,col 5)-(line 82,col 50)",
            "(line 85,col 5)-(line 86,col 33)",
            "(line 89,col 5)-(line 90,col 36)",
            "(line 93,col 5)-(line 103,col 36)",
            "(line 106,col 5)-(line 107,col 40)",
            "(line 110,col 5)-(line 111,col 61)",
            "(line 114,col 5)-(line 115,col 63)",
            "(line 118,col 5)-(line 132,col 44)",
            "(line 135,col 5)-(line 136,col 46)",
            "(line 139,col 5)-(line 139,col 47)",
            "(line 142,col 5)-(line 143,col 47)",
            "(line 145,col 5)-(line 145,col 35)",
            "(line 146,col 5)-(line 146,col 35)",
            "(line 147,col 5)-(line 147,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionArgRemoval()",
        "snippet": "  public void testFunctionArgRemoval() {\n    // remove all function arguments\n    test(\"var b=function(c,d){return};b(1,2)\",\n         \"var b=function(){return};b(1,2)\");\n\n    // remove no function arguments\n    testSame(\"var b=function(c,d){return c+d};b(1,2)\");\n    testSame(\"var b=function(e,f,c,d){return c+d};b(1,2)\");\n\n    // remove some function arguments\n    test(\"var b=function(c,d,e,f){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,c,f,d,g){return c+d};b(1,2)\",\n         \"var b=function(e,c,f,d){return c+d};b(1,2)\");\n  }\n",
        "begin_line": 150,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 153,col 44)",
            "(line 156,col 5)-(line 156,col 55)",
            "(line 157,col 5)-(line 157,col 59)",
            "(line 160,col 5)-(line 161,col 51)",
            "(line 162,col 5)-(line 163,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionArgRemovalFromCallSites()",
        "snippet": "  public void testFunctionArgRemovalFromCallSites() {\n    this.modifyCallSites = true;\n\n    // remove all function arguments\n    test(\"var b=function(c,d){return};b(1,2)\",\n         \"var b=function(){return};b()\");\n\n    // remove no function arguments\n    testSame(\"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,f,c,d){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b()\");\n\n    // remove some function arguments\n    test(\"var b=function(c,d,e,f){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,c,f,d,g){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(2)\");\n  }\n",
        "begin_line": 166,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 32)",
            "(line 170,col 5)-(line 171,col 41)",
            "(line 174,col 5)-(line 174,col 55)",
            "(line 175,col 5)-(line 176,col 48)",
            "(line 179,col 5)-(line 180,col 51)",
            "(line 181,col 5)-(line 182,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionsDeadButEscaped()",
        "snippet": "  public void testFunctionsDeadButEscaped() {\n    testSame(\"function b(a) { a = 1; print(arguments[0]) }; b(6)\");\n    testSame(\"function b(a) { a = 1; arguments=1; }; b(6)\");\n    testSame(\"function b(a) { var c = 2; a = c; print(arguments[0]) }; b(6)\");\n  }\n",
        "begin_line": 185,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 67)",
            "(line 187,col 5)-(line 187,col 60)",
            "(line 188,col 5)-(line 188,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testVarInControlStructure()",
        "snippet": "  public void testVarInControlStructure() {\n    test(\"if (true) var b = 3;\", \"if(true);\");\n    test(\"if (true) var b = 3; else var c = 5;\", \"if(true);else;\");\n    test(\"while (true) var b = 3;\", \"while(true);\");\n    test(\"for (;;) var b = 3;\", \"for(;;);\");\n    test(\"do var b = 3; while(true)\", \"do;while(true)\");\n    test(\"with (true) var b = 3;\", \"with(true);\");\n    test(\"f: var b = 3;\",\"f:{}\");\n  }\n",
        "begin_line": 191,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 46)",
            "(line 193,col 5)-(line 193,col 67)",
            "(line 194,col 5)-(line 194,col 52)",
            "(line 195,col 5)-(line 195,col 44)",
            "(line 196,col 5)-(line 196,col 56)",
            "(line 197,col 5)-(line 197,col 50)",
            "(line 198,col 5)-(line 198,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRValueHoisting()",
        "snippet": "  public void testRValueHoisting() {\n    test(\"var x = foo();\", \"foo()\");\n    test(\"var x = {a: foo()};\", \"({a:foo()})\");\n\n    test(\"var x=function y(){}\", \"\");\n  }\n",
        "begin_line": 201,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 36)",
            "(line 203,col 5)-(line 203,col 47)",
            "(line 205,col 5)-(line 205,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testModule()",
        "snippet": "  public void testModule() {\n    test(createModules(\n             \"var unreferenced=1; function x() { foo(); }\" +\n             \"function uncalled() { var x; return 2; }\",\n             \"var a,b; function foo() { this.foo(a); } x()\"),\n         new String[] {\n           \"function x(){foo()}\",\n           \"var a;function foo(){this.foo(a)}x()\"\n         });\n  }\n",
        "begin_line": 208,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 216,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRecursiveFunction1()",
        "snippet": "  public void testRecursiveFunction1() {\n    testSame(\"(function x(){return x()})()\");\n  }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRecursiveFunction2()",
        "snippet": "  public void testRecursiveFunction2() {\n    test(\"var x = 3; (function x() { return x(); })();\",\n         \"(function x$$1(){return x$$1()})()\");\n  }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 225,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionWithName1()",
        "snippet": "  public void testFunctionWithName1() {\n    test(\"var x=function f(){};x()\",\n         \"var x=function(){};x()\");\n\n    preserveFunctionExpressionNames = true;\n    testSame(\"var x=function f(){};x()\");\n  }\n",
        "begin_line": 228,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 230,col 35)",
            "(line 232,col 5)-(line 232,col 43)",
            "(line 233,col 5)-(line 233,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionWithName2()",
        "snippet": "  public void testFunctionWithName2() {\n    test(\"foo(function bar(){})\",\n         \"foo(function(){})\");\n\n    preserveFunctionExpressionNames = true;\n    testSame(\"foo(function bar(){})\");\n  }\n",
        "begin_line": 236,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 238,col 30)",
            "(line 240,col 5)-(line 240,col 43)",
            "(line 241,col 5)-(line 241,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal1()",
        "snippet": "  public void testRemoveGlobal1() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"var y=function(x){var z;}\", \"var y=function(x){}\");\n  }\n",
        "begin_line": 244,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 25)",
            "(line 246,col 5)-(line 246,col 24)",
            "(line 247,col 5)-(line 247,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal2()",
        "snippet": "  public void testRemoveGlobal2() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"function y(x){var z;}\", \"function y(x){}\");\n  }\n",
        "begin_line": 250,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 25)",
            "(line 252,col 5)-(line 252,col 24)",
            "(line 253,col 5)-(line 253,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal3()",
        "snippet": "  public void testRemoveGlobal3() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"function x(){function y(x){var z;}y()}\",\n         \"function x(){function y(x){}y()}\");\n  }\n",
        "begin_line": 256,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 25)",
            "(line 258,col 5)-(line 258,col 24)",
            "(line 259,col 5)-(line 260,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal4()",
        "snippet": "  public void testRemoveGlobal4() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"function x(){function y(x){var z;}}\",\n         \"function x(){}\");\n  }\n",
        "begin_line": 263,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 264,col 25)",
            "(line 265,col 5)-(line 265,col 24)",
            "(line 266,col 5)-(line 267,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue168a()",
        "snippet": "  public void testIssue168a() {\n    test(\"function _a(){\" +\n         \"  (function(x){ _b(); })(1);\" +\n         \"}\" +\n         \"function _b(){\" +\n         \"  _a();\" +\n         \"}\",\n         \"function _a(){(function(){_b()})(1)}\" +\n         \"function _b(){_a()}\");\n  }\n",
        "begin_line": 270,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 278,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue168b()",
        "snippet": "  public void testIssue168b() {\n    removeGlobal = false;\n    test(\"function a(){\" +\n         \"  (function(x){ b(); })(1);\" +\n         \"}\" +\n         \"function b(){\" +\n         \"  a();\" +\n         \"}\",\n         \"function a(){(function(x){b()})(1)}\" +\n         \"function b(){a()}\");\n  }\n",
        "begin_line": 281,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 25)",
            "(line 283,col 5)-(line 290,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign1()",
        "snippet": "  public void testUnusedAssign1() {\n    test(\"var x = 3; x = 5;\", \"\");\n  }\n",
        "begin_line": 293,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign2()",
        "snippet": "  public void testUnusedAssign2() {\n    test(\"function f(a) { a = 3; } this.x = f;\",\n         \"function f(){} this.x=f\");\n  }\n",
        "begin_line": 297,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 299,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign3()",
        "snippet": "  public void testUnusedAssign3() {\n    // e can't be removed, so we don't try to remove the dead assign.\n    // We might be able to improve on this case.\n    test(\"try { throw ''; } catch (e) { e = 3; }\",\n        \"try{throw\\\"\\\";}catch(e){e=3}\");\n  }\n",
        "begin_line": 302,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 305,col 5)-(line 306,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign4()",
        "snippet": "  public void testUnusedAssign4() {\n    test(\"function f(a, b) { this.foo(b); a = 3; } this.x = f;\",\n        \"function f(a,b){this.foo(b);}this.x=f\");\n  }\n",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 311,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign5()",
        "snippet": "  public void testUnusedAssign5() {\n    test(\"var z = function f() { f = 3; }; z();\",\n         \"var z=function(){};z()\");\n  }\n",
        "begin_line": 314,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 316,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign5b()",
        "snippet": "  public void testUnusedAssign5b() {\n    test(\"var z = function f() { f = alert(); }; z();\",\n         \"var z=function(){alert()};z()\");\n  }\n",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 321,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign6()",
        "snippet": "  public void testUnusedAssign6() {\n    test(\"var z; z = 3;\", \"\");\n  }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 325,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign6b()",
        "snippet": "  public void testUnusedAssign6b() {\n    test(\"var z; z = alert();\", \"alert()\");\n  }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign7()",
        "snippet": "  public void testUnusedAssign7() {\n    // This loop is normalized to \"var i;for(i in...\"\n    test(\"var a = 3; for (var i in {}) { i = a; }\",\n         // TODO(johnlenz): \"i = a\" should be removed here.\n         \"var a = 3; var i; for (i in {}) {i = a;}\");\n  }\n",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 336,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign8()",
        "snippet": "  public void testUnusedAssign8() {\n    // This loop is normalized to \"var i;for(i in...\"\n    test(\"var a = 3; for (var i in {}) { i = a; } alert(a);\",\n         // TODO(johnlenz): \"i = a\" should be removed here.\n         \"var a = 3; var i; for (i in {}) {i = a} alert(a);\");\n  }\n",
        "begin_line": 339,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 343,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign1()",
        "snippet": "  public void testUnusedPropAssign1() {\n    test(\"var x = {}; x.foo = 3;\", \"\");\n  }\n",
        "begin_line": 346,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 347,col 5)-(line 347,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign1b()",
        "snippet": "  public void testUnusedPropAssign1b() {\n    test(\"var x = {}; x.foo = alert();\", \"alert()\");\n  }\n",
        "begin_line": 350,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 351,col 5)-(line 351,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign2()",
        "snippet": "  public void testUnusedPropAssign2() {\n    test(\"var x = {}; x['foo'] = 3;\", \"\");\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 355,col 5)-(line 355,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign2b()",
        "snippet": "  public void testUnusedPropAssign2b() {\n    test(\"var x = {}; x[alert()] = alert();\", \"alert(),alert()\");\n  }\n",
        "begin_line": 358,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 359,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign3()",
        "snippet": "  public void testUnusedPropAssign3() {\n    test(\"var x = {}; x['foo'] = {}; x['bar'] = 3\", \"\");\n  }\n",
        "begin_line": 362,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 363,col 5)-(line 363,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign3b()",
        "snippet": "  public void testUnusedPropAssign3b() {\n    test(\"var x = {}; x[alert()] = alert(); x[alert() + alert()] = alert()\",\n         \"alert(),alert();(alert() + alert()),alert()\");\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 368,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign4()",
        "snippet": "  public void testUnusedPropAssign4() {\n    test(\"var x = {foo: 3}; x['foo'] = 5;\", \"\");\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign5()",
        "snippet": "  public void testUnusedPropAssign5() {\n    test(\"var x = {foo: bar()}; x['foo'] = 5;\",\n         \"var x={foo:bar()};x[\\\"foo\\\"]=5\");\n  }\n",
        "begin_line": 375,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 377,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign6()",
        "snippet": "  public void testUnusedPropAssign6() {\n    test(\"var x = function() {}; x.prototype.bar = function() {};\", \"\");\n  }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 381,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign7()",
        "snippet": "  public void testUnusedPropAssign7() {\n    test(\"var x = {}; x[x.foo] = x.bar;\", \"\");\n  }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign7b()",
        "snippet": "  public void testUnusedPropAssign7b() {\n    testSame(\"var x = {}; x[x.foo] = alert(x.bar);\");\n  }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign7c()",
        "snippet": "  public void testUnusedPropAssign7c() {\n    test(\"var x = {}; x[alert(x.foo)] = x.bar;\",\n         \"var x={};x[alert(x.foo)]=x.bar\");\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 394,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign1()",
        "snippet": "  public void testUsedPropAssign1() {\n    test(\"function f(x) { x.bar = 3; } f({});\",\n         \"function f(x){x.bar=3}f({})\");\n  }\n",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 399,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign2()",
        "snippet": "  public void testUsedPropAssign2() {\n    test(\"try { throw z; } catch (e) { e.bar = 3; }\",\n         \"try{throw z;}catch(e){e.bar=3}\");\n  }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 404,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign3()",
        "snippet": "  public void testUsedPropAssign3() {\n    // This pass does not do flow analysis.\n    test(\"var x = {}; x.foo = 3; x = bar();\",\n         \"var x={};x.foo=3;x=bar()\");\n  }\n",
        "begin_line": 407,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 409,col 5)-(line 410,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign4()",
        "snippet": "  public void testUsedPropAssign4() {\n    test(\"var y = foo(); var x = {}; x.foo = 3; y[x.foo] = 5;\",\n         \"var y=foo();var x={};x.foo=3;y[x.foo]=5\");\n  }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 415,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign5()",
        "snippet": "  public void testUsedPropAssign5() {\n    test(\"var y = foo(); var x = 3; y[x] = 5;\",\n         \"var y=foo();var x=3;y[x]=5\");\n  }\n",
        "begin_line": 418,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 420,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign6()",
        "snippet": "  public void testUsedPropAssign6() {\n    test(\"var x = newNodeInDom(doc); x.innerHTML = 'new text';\",\n         \"var x=newNodeInDom(doc);x.innerHTML=\\\"new text\\\"\");\n  }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 425,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign7()",
        "snippet": "  public void testUsedPropAssign7() {\n    testSame(\"var x = {}; for (x in alert()) { x.foo = 3; }\");\n  }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign8()",
        "snippet": "  public void testUsedPropAssign8() {\n    testSame(\"for (var x in alert()) { x.foo = 3; }\");\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign9()",
        "snippet": "  public void testUsedPropAssign9() {\n    testSame(\n        \"var x = {}; x.foo = newNodeInDom(doc); x.foo.innerHTML = 'new test';\");\n  }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 437,col 5)-(line 438,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies1()",
        "snippet": "  public void testDependencies1() {\n    test(\"var a = 3; var b = function() { alert(a); };\", \"\");\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies1b()",
        "snippet": "  public void testDependencies1b() {\n    test(\"var a = 3; var b = alert(function() { alert(a); });\",\n         \"var a=3;alert(function(){alert(a)})\");\n  }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 447,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies1c()",
        "snippet": "  public void testDependencies1c() {\n    test(\"var a = 3; var _b = function() { alert(a); };\",\n         \"var a=3;var _b=function(){alert(a)}\");\n  }\n",
        "begin_line": 450,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 452,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies2()",
        "snippet": "  public void testDependencies2() {\n    test(\"var a = 3; var b = 3; b = function() { alert(a); };\", \"\");\n  }\n",
        "begin_line": 455,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 456,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies2b()",
        "snippet": "  public void testDependencies2b() {\n    test(\"var a = 3; var b = 3; b = alert(function() { alert(a); });\",\n         \"var a=3;alert(function(){alert(a)})\");\n  }\n",
        "begin_line": 459,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 461,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies2c()",
        "snippet": "  public void testDependencies2c() {\n    testSame(\"var a=3;var _b=3;_b=function(){alert(a)}\");\n  }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testGlobalVarReferencesLocalVar()",
        "snippet": "  public void testGlobalVarReferencesLocalVar() {\n    testSame(\"var a=3;function f(){var b=4;a=b}alert(a + f())\");\n  }\n",
        "begin_line": 468,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 469,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testLocalVarReferencesGlobalVar1()",
        "snippet": "  public void testLocalVarReferencesGlobalVar1() {\n    testSame(\"var a=3;function f(b, c){b=a; alert(b + c);} f();\");\n  }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testLocalVarReferencesGlobalVar2()",
        "snippet": "  public void testLocalVarReferencesGlobalVar2() {\n    test(\"var a=3;function f(b, c){b=a; alert(c);} f();\",\n         \"function f(b, c) { alert(c); } f();\");\n    this.modifyCallSites = true;\n    test(\"var a=3;function f(b, c){b=a; alert(c);} f();\",\n         \"function f(c) { alert(c); } f();\");\n  }\n",
        "begin_line": 476,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 478,col 48)",
            "(line 479,col 5)-(line 479,col 32)",
            "(line 480,col 5)-(line 481,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testNestedAssign1()",
        "snippet": "  public void testNestedAssign1() {\n    test(\"var b = null; var a = (b = 3); alert(a);\",\n         \"var a = 3; alert(a);\");\n  }\n",
        "begin_line": 484,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 486,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testNestedAssign2()",
        "snippet": "  public void testNestedAssign2() {\n    test(\"var a = 1; var b = 2; var c = (b = a); alert(c);\",\n         \"var a = 1; var c = a; alert(c);\");\n  }\n",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 491,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testNestedAssign3()",
        "snippet": "  public void testNestedAssign3() {\n    test(\"var b = 0; var z; z = z = b = 1; alert(b);\",\n         \"var b = 0; b = 1; alert(b);\");\n  }\n",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 495,col 5)-(line 496,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testCallSiteInteraction()",
        "snippet": "  public void testCallSiteInteraction() {\n    this.modifyCallSites = true;\n\n    testSame(\"var b=function(){return};b()\");\n    testSame(\"var b=function(c){return c};b(1)\");\n    test(\"var b=function(c){};b.call(null, x)\",\n         \"var b=function(){};b.call(null)\");\n    test(\"var b=function(c){};b.apply(null, x)\",\n         \"var b=function(){};b.apply(null, x)\");\n\n    test(\"var b=function(c){return};b(1)\",\n         \"var b=function(){return};b()\");\n    test(\"var b=function(c){return};b(1,2)\",\n         \"var b=function(){return};b()\");\n    test(\"var b=function(c){return};b(1,2);b(3,4)\",\n         \"var b=function(){return};b();b()\");\n\n    // Here there is a unknown reference to the function so we can't\n    // change the signature.\n    test(\"var b=function(c,d){return d};b(1,2);b(3,4);b.length\",\n         \"var b=function(c,d){return d};b(0,2);b(0,4);b.length\");\n\n    test(\"var b=function(c){return};b(1,2);b(3,new x())\",\n         \"var b=function(){return};b();b(new x())\");\n\n    test(\"var b=function(c){return};b(1,2);b(new x(),4)\",\n         \"var b=function(){return};b();b(new x())\");\n\n    test(\"var b=function(c,d){return d};b(1,2);b(new x(),4)\",\n         \"var b=function(c,d){return d};b(0,2);b(new x(),4)\");\n    test(\"var b=function(c,d,e){return d};b(1,2,3);b(new x(),4,new x())\",\n         \"var b=function(c,d){return d};b(0,2);b(new x(),4,new x())\");\n\n    // Recursive calls are OK.\n    test(\"var b=function(c,d){b(1,2);return d};b(3,4);b(5,6)\",\n         \"var b=function(d){b(2);return d};b(4);b(6)\");\n\n    testSame(\"var b=function(c){return arguments};b(1,2);b(3,4)\");\n\n    // remove all function arguments\n    test(\"var b=function(c,d){return};b(1,2)\",\n         \"var b=function(){return};b()\");\n\n    // remove no function arguments\n    testSame(\"var b=function(c,d){return c+d};b(1,2)\");\n\n    // remove some function arguments\n    test(\"var b=function(e,f,c,d){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b()\");\n    test(\"var b=function(c,d,e,f){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,c,f,d,g){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(2)\");\n\n    // multiple definitions of \"b\", the parameters can be removed but\n    // the call sites are left unmodified for now.\n    test(\"var b=function(c,d){};var b=function(e,f){};b(1,2)\",\n         \"var b=function(){};var b=function(){};b(1,2)\");\n  }\n",
        "begin_line": 499,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 32)",
            "(line 502,col 5)-(line 502,col 45)",
            "(line 503,col 5)-(line 503,col 49)",
            "(line 504,col 5)-(line 505,col 44)",
            "(line 506,col 5)-(line 507,col 48)",
            "(line 509,col 5)-(line 510,col 41)",
            "(line 511,col 5)-(line 512,col 41)",
            "(line 513,col 5)-(line 514,col 45)",
            "(line 518,col 5)-(line 519,col 65)",
            "(line 521,col 5)-(line 522,col 52)",
            "(line 524,col 5)-(line 525,col 52)",
            "(line 527,col 5)-(line 528,col 62)",
            "(line 529,col 5)-(line 530,col 70)",
            "(line 533,col 5)-(line 534,col 55)",
            "(line 536,col 5)-(line 536,col 66)",
            "(line 539,col 5)-(line 540,col 41)",
            "(line 543,col 5)-(line 543,col 55)",
            "(line 546,col 5)-(line 547,col 48)",
            "(line 548,col 5)-(line 549,col 51)",
            "(line 550,col 5)-(line 551,col 49)",
            "(line 555,col 5)-(line 556,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testCallSiteInteraction_contructors()",
        "snippet": "  public void testCallSiteInteraction_contructors() {\n    this.modifyCallSites = true;\n    // The third level tests that the functions which have already been looked\n    // at get re-visited if they are changed by a call site removal.\n    test(\"var Ctor1=function(a,b){return a};\" +\n        \"var Ctor2=function(a,b){Ctor1.call(this,a,b)};\" +\n        \"goog$inherits(Ctor2, Ctor1);\" +\n        \"new Ctor2(1,2)\",\n        \"var Ctor1=function(a){return a};\" +\n        \"var Ctor2=function(a){Ctor1.call(this,a)};\" +\n        \"goog$inherits(Ctor2, Ctor1);\" +\n        \"new Ctor2(1)\");\n  }\n",
        "begin_line": 559,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 32)",
            "(line 563,col 5)-(line 570,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionArgRemovalCausingInconsistency()",
        "snippet": "  public void testFunctionArgRemovalCausingInconsistency() {\n    this.modifyCallSites = true;\n    // Test the case where an unused argument is removed and the argument\n    // contains a call site in its subtree (will cause the call site's parent\n    // pointer to be null).\n    test(\"var a=function(x,y){};\" +\n        \"var b=function(z){};\" +\n        \"a(new b, b)\",\n        \"var a=function(){};\" +\n        \"var b=function(){};\" +\n        \"a(new b)\");\n  }\n",
        "begin_line": 573,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 574,col 32)",
            "(line 578,col 5)-(line 583,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveUnusedVarsPossibleNpeCase()",
        "snippet": "  public void testRemoveUnusedVarsPossibleNpeCase() {\n    this.modifyCallSites = true;\n    test(\"var a = [];\" +\n        \"var register = function(callback) {a[0] = callback};\" +\n        \"register(function(transformer) {});\" +\n        \"register(function(transformer) {});\",\n        \"var register=function(){};register();register()\");\n  }\n",
        "begin_line": 586,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 32)",
            "(line 588,col 5)-(line 592,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDoNotOptimizeJSCompiler_renameProperty()",
        "snippet": "  public void testDoNotOptimizeJSCompiler_renameProperty() {\n    this.modifyCallSites = true;\n\n    // Only the function definition can be modified, none of the call sites.\n    test(\"function JSCompiler_renameProperty(a) {};\" +\n         \"JSCompiler_renameProperty('a');\",\n         \"function JSCompiler_renameProperty() {};\" +\n         \"JSCompiler_renameProperty('a');\");\n  }\n",
        "begin_line": 595,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 32)",
            "(line 599,col 5)-(line 602,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDoNotOptimizeJSCompiler_ObjectPropertyString()",
        "snippet": "  public void testDoNotOptimizeJSCompiler_ObjectPropertyString() {\n    this.modifyCallSites = true;\n    test(\"function JSCompiler_ObjectPropertyString(a, b) {};\" +\n         \"JSCompiler_ObjectPropertyString(window,'b');\",\n         \"function JSCompiler_ObjectPropertyString() {};\" +\n         \"JSCompiler_ObjectPropertyString(window,'b');\");\n  }\n",
        "begin_line": 605,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 606,col 5)-(line 606,col 32)",
            "(line 607,col 5)-(line 610,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDoNotOptimizeSetters()",
        "snippet": "  public void testDoNotOptimizeSetters() {\n    testSame(\"({set s(a) {}})\");\n  }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 614,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveSingletonClass1()",
        "snippet": "  public void testRemoveSingletonClass1() {\n    test(\"function goog$addSingletonGetter(a){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"goog$addSingletonGetter(a);\",\n        \"\");\n  }\n",
        "begin_line": 617,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 621,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass1()",
        "snippet": "  public void testRemoveInheritedClass1() {\n    test(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a); new a\",\n        \"function a(){} new a\");\n  }\n",
        "begin_line": 624,
        "end_line": 630,
        "comment": "",
        "child_ranges": [
            "(line 625,col 5)-(line 629,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass2()",
        "snippet": "  public void testRemoveInheritedClass2() {\n    test(\"function goog$inherits(){}\" +\n        \"function goog$mixin(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"goog$inherits(b,a);\" +\n        \"goog$mixin(c.prototype,b.prototype);\",\n        \"\");\n  }\n",
        "begin_line": 632,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 633,col 5)-(line 640,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass3()",
        "snippet": "  public void testRemoveInheritedClass3() {\n    testSame(\"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a); new b\");\n  }\n",
        "begin_line": 643,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 646,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass4()",
        "snippet": "  public void testRemoveInheritedClass4() {\n    testSame(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a);\" +\n        \"/**@constructor*/function c(){}\" +\n        \"goog$inherits(c,b); new c\");\n  }\n",
        "begin_line": 649,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 650,col 5)-(line 655,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass5()",
        "snippet": "  public void testRemoveInheritedClass5() {\n    test(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a);\" +\n        \"/**@constructor*/function c(){}\" +\n        \"goog$inherits(c,b); new b\",\n        \"function goog$inherits(){}\" +\n        \"function a(){}\" +\n        \"function b(){}\" +\n        \"goog$inherits(b,a); new b\");\n  }\n",
        "begin_line": 658,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 668,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass6()",
        "snippet": "  public void testRemoveInheritedClass6() {\n    test(\"function goog$mixin(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"/**@constructor*/function d(){}\" +\n        \"goog$mixin(b.prototype,a.prototype);\" +\n        \"goog$mixin(c.prototype,a.prototype); new c;\" +\n        \"goog$mixin(d.prototype,a.prototype)\",\n        \"function goog$mixin(){}\" +\n        \"function a(){}\" +\n        \"function c(){}\" +\n        \"goog$mixin(c.prototype,a.prototype); new c\");\n  }\n",
        "begin_line": 671,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 683,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass7()",
        "snippet": "  public void testRemoveInheritedClass7() {\n    test(\"function goog$mixin(){}\" +\n        \"/**@constructor*/function a(){alert(goog$mixin(a, a))}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$mixin(b.prototype,a.prototype); new a\",\n        \"function goog$mixin(){}\" +\n        \"function a(){alert(goog$mixin(a, a))} new a\");\n  }\n",
        "begin_line": 686,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 692,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass8()",
        "snippet": "  public void testRemoveInheritedClass8() {\n    test(\"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"b.inherits(a);c.mixin(b.prototype)\",\n        \"\");\n  }\n",
        "begin_line": 695,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 700,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass9()",
        "snippet": "  public void testRemoveInheritedClass9() {\n    testSame(\"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"b.inherits(a);c.mixin(b.prototype);new c\");\n  }\n",
        "begin_line": 703,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 707,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass10()",
        "snippet": "  public void testRemoveInheritedClass10() {\n    test(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a); new a;\" +\n        \"var c = a; var d = a.g; new b\",\n        \"function goog$inherits(){}\" +\n        \"function a(){} function b(){} goog$inherits(b,a); new a; new b\");\n  }\n",
        "begin_line": 710,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 717,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass11()",
        "snippet": "  public void testRemoveInheritedClass11() {\n    testSame(\"function goog$inherits(){}\" +\n        \"function goog$mixin(a,b){goog$inherits(a,b)}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$mixin(b.prototype,a.prototype);new b\");\n  }\n",
        "begin_line": 720,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 721,col 5)-(line 725,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass12()",
        "snippet": "  public void testRemoveInheritedClass12() {\n    testSame(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"var b = {};\" +\n        \"goog$inherits(b.foo, a)\");\n  }\n",
        "begin_line": 728,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 732,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    this.modifyCallSites = true;\n    testSame(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\");\n  }\n",
        "begin_line": 735,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 736,col 5)-(line 736,col 32)",
            "(line 737,col 5)-(line 743,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue618_1()",
        "snippet": "  public void testIssue618_1() {\n    this.removeGlobal = false;\n    testSame(\n        \"function f() {\\n\" +\n        \"  var a = [], b;\\n\" +\n        \"  a.push(b = []);\\n\" +\n        \"  b[0] = 1;\\n\" +\n        \"  return a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 746,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 747,col 30)",
            "(line 748,col 5)-(line 754,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue618_2()",
        "snippet": "  public void testIssue618_2() {\n    this.removeGlobal = false;\n    testSame(\n        \"var b;\\n\" +\n        \"a.push(b = []);\\n\" +\n        \"b[0] = 1;\\n\");\n  }\n",
        "begin_line": 757,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 758,col 5)-(line 758,col 30)",
            "(line 759,col 5)-(line 762,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n    normalizeResults = false;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 30)",
            "(line 61,col 5)-(line 61,col 24)",
            "(line 62,col 5)-(line 62,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  protected void testSame(CompilerOptions options, String original) {\n    testSame(options, new String[] { original });\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  protected void testSame(CompilerOptions options, String[] original) {\n    test(options, original, original);\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, String compiled) {\n    test(options, new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[])",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled) {\n    Compiler compiler = compile(options, original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    Node expectedRoot = parse(compiled, options, normalizeResults);\n    String explanation = expectedRoot.checkTreeEquals(root);\n    assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n        \"\\nResult: \" + compiler.toSource(root) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 86,
        "end_line": 100,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 51)",
            "(line 89,col 5)-(line 92,col 72)",
            "(line 94,col 5)-(line 94,col 50)",
            "(line 95,col 5)-(line 95,col 67)",
            "(line 96,col 5)-(line 96,col 60)",
            "(line 97,col 5)-(line 99,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, DiagnosticType warning) {\n    test(options, new String[] { original }, warning);\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String original, String compiled, DiagnosticType warning) {\n    test(options, new String[] { original }, new String[] { compiled },\n         warning);\n  }\n",
        "begin_line": 111,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 114,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, DiagnosticType warning) {\n    test(options, original, null, warning);\n  }\n",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType warning) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\"Expected exactly one warning or error\",\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options, normalizeResults);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 126,
        "end_line": 146,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 51)",
            "(line 129,col 5)-(line 129,col 49)",
            "(line 130,col 5)-(line 131,col 72)",
            "(line 132,col 5)-(line 136,col 5)",
            "(line 138,col 5)-(line 145,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType[])",
        "snippet": "  protected void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType[] warnings) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, warnings.length);\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options, normalizeResults);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 152,
        "end_line": 165,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 51)",
            "(line 155,col 5)-(line 155,col 63)",
            "(line 157,col 5)-(line 164,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  protected void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \" + msg,\n        expected, actual);\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 77)",
            "(line 170,col 5)-(line 180,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  protected Compiler compile(CompilerOptions options, String original) {\n    return compile(options, new String[] { original });\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  protected Compiler compile(CompilerOptions options, String[] original) {\n    Compiler compiler = lastCompiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.compileModules(\n        externs, Lists.newArrayList(CompilerTestCase.createModuleChain(original)),\n        options);\n    return compiler;\n  }\n",
        "begin_line": 187,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 54)",
            "(line 189,col 5)-(line 189,col 51)",
            "(line 190,col 5)-(line 192,col 5)",
            "(line 193,col 5)-(line 195,col 17)",
            "(line 196,col 5)-(line 196,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.parse(java.lang.String[], com.google.javascript.jscomp.CompilerOptions, boolean)",
        "snippet": "  protected Node parse(\n      String[] original, CompilerOptions options, boolean normalize) {\n    Compiler compiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.init(externs, inputs, options);\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node all = compiler.parseInputs();\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node n = all.getLastChild();\n    Node externs = all.getFirstChild();\n\n    (new CreateSyntheticBlocks(\n        compiler, \"synStart\", \"synEnd\")).process(externs, n);\n\n    if (normalize) {\n      compiler.normalize();\n    }\n\n    return n;\n  }\n",
        "begin_line": 199,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 39)",
            "(line 202,col 5)-(line 202,col 51)",
            "(line 203,col 5)-(line 205,col 5)",
            "(line 206,col 5)-(line 206,col 44)",
            "(line 207,col 5)-(line 207,col 49)",
            "(line 208,col 5)-(line 208,col 38)",
            "(line 209,col 5)-(line 209,col 49)",
            "(line 210,col 5)-(line 210,col 32)",
            "(line 211,col 5)-(line 211,col 39)",
            "(line 213,col 5)-(line 214,col 61)",
            "(line 216,col 5)-(line 218,col 5)",
            "(line 220,col 5)-(line 220,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.IntegrationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTestCase.java",
        "signature": "com.google.javascript.jscomp.IntegrationTestCase.createCompilerOptions()",
        "snippet": "  abstract CompilerOptions createCompilerOptions();\n",
        "begin_line": 224,
        "end_line": 224,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 49)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.CAST, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 169,
        "end_line": 184,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 172,col 5)",
            "(line 176,col 5)-(line 176,col 32)",
            "(line 178,col 5)-(line 179,col 65)",
            "(line 180,col 5)-(line 181,col 51)",
            "(line 182,col 5)-(line 182,col 55)",
            "(line 183,col 5)-(line 183,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 187,col 5)-(line 187,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 190,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 191,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 198,
        "end_line": 202,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 236,
        "end_line": 239,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 29)",
            "(line 238,col 5)-(line 238,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 261,
        "end_line": 263,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 283,
        "end_line": 286,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 28)",
            "(line 285,col 5)-(line 285,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 292,
        "end_line": 294,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 293,col 5)-(line 293,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 301,
        "end_line": 303,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 302,col 5)-(line 302,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 313,
        "end_line": 321,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 315,col 5)-(line 317,col 40)",
            "(line 319,col 5)-(line 320,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 329,
        "end_line": 331,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 330,col 5)-(line 330,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 371,
        "end_line": 374,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 373,col 5)-(line 373,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 406,
        "end_line": 412,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 409,col 5)-(line 410,col 49)",
            "(line 411,col 5)-(line 411,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 428,
        "end_line": 448,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 431,col 5)-(line 431,col 41)",
            "(line 432,col 5)-(line 432,col 28)",
            "(line 434,col 5)-(line 434,col 43)",
            "(line 436,col 5)-(line 438,col 5)",
            "(line 441,col 5)-(line 441,col 39)",
            "(line 442,col 5)-(line 443,col 53)",
            "(line 445,col 5)-(line 445,col 71)",
            "(line 447,col 5)-(line 447,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 450,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 453,col 5)",
            "(line 454,col 5)-(line 454,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 463,
        "end_line": 465,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 475,
        "end_line": 477,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 476,col 5)-(line 476,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 489,
        "end_line": 492,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 491,col 5)-(line 491,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 507,
        "end_line": 518,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 41)",
            "(line 510,col 5)-(line 510,col 28)",
            "(line 512,col 5)-(line 512,col 51)",
            "(line 513,col 5)-(line 515,col 5)",
            "(line 516,col 5)-(line 516,col 55)",
            "(line 517,col 5)-(line 517,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 526,
        "end_line": 528,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 527,col 5)-(line 527,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 538,
        "end_line": 541,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 553,
        "end_line": 561,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 555,col 5)-(line 555,col 41)",
            "(line 556,col 5)-(line 556,col 28)",
            "(line 558,col 5)-(line 559,col 66)",
            "(line 560,col 5)-(line 560,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 568,
        "end_line": 570,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 569,col 5)-(line 569,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 579,
        "end_line": 581,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 580,col 5)-(line 580,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 591,
        "end_line": 597,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 592,col 5)-(line 596,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 620,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 640,
        "end_line": 645,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 642,col 5)-(line 643,col 49)",
            "(line 644,col 5)-(line 644,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 652,
        "end_line": 654,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 653,col 5)-(line 653,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 663,
        "end_line": 665,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 664,col 5)-(line 664,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 675,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 685,
        "end_line": 687,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 686,col 5)-(line 686,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 695,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 696,col 5)-(line 707,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 721,
        "end_line": 724,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 723,col 5)-(line 723,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 741,
        "end_line": 960,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 744,col 5)-(line 744,col 51)",
            "(line 745,col 5)-(line 745,col 44)",
            "(line 747,col 5)-(line 747,col 39)",
            "(line 748,col 5)-(line 749,col 66)",
            "(line 751,col 5)-(line 753,col 5)",
            "(line 754,col 5)-(line 754,col 44)",
            "(line 755,col 5)-(line 755,col 40)",
            "(line 758,col 5)-(line 758,col 38)",
            "(line 759,col 5)-(line 759,col 54)",
            "(line 760,col 5)-(line 760,col 50)",
            "(line 762,col 5)-(line 762,col 45)",
            "(line 763,col 5)-(line 763,col 68)",
            "(line 764,col 5)-(line 764,col 34)",
            "(line 765,col 5)-(line 765,col 59)",
            "(line 766,col 5)-(line 766,col 35)",
            "(line 768,col 5)-(line 769,col 39)",
            "(line 771,col 5)-(line 822,col 5)",
            "(line 824,col 5)-(line 959,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 962,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 964,col 5)-(line 964,col 57)",
            "(line 965,col 5)-(line 965,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 971,
        "end_line": 989,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 972,col 5)-(line 972,col 41)",
            "(line 973,col 5)-(line 973,col 51)",
            "(line 974,col 5)-(line 976,col 5)",
            "(line 977,col 5)-(line 977,col 55)",
            "(line 978,col 5)-(line 978,col 39)",
            "(line 979,col 5)-(line 980,col 66)",
            "(line 981,col 5)-(line 981,col 44)",
            "(line 982,col 5)-(line 982,col 42)",
            "(line 984,col 5)-(line 987,col 5)",
            "(line 988,col 5)-(line 988,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 991,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 992,col 5)-(line 992,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 999,
        "end_line": 1005,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1000,col 5)-(line 1000,col 47)",
            "(line 1001,col 5)-(line 1003,col 5)",
            "(line 1004,col 5)-(line 1004,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1011,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1012,col 5)-(line 1012,col 47)",
            "(line 1013,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1024,
        "end_line": 1031,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 48)",
            "(line 1026,col 5)-(line 1026,col 47)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1038,
        "end_line": 1044,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1039,col 5)-(line 1039,col 47)",
            "(line 1040,col 5)-(line 1042,col 5)",
            "(line 1043,col 5)-(line 1043,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1050,
        "end_line": 1057,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1051,col 5)-(line 1051,col 53)",
            "(line 1052,col 5)-(line 1055,col 5)",
            "(line 1056,col 5)-(line 1056,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1060,
        "end_line": 1062,
        "comment": "",
        "child_ranges": [
            "(line 1061,col 7)-(line 1061,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1064,
        "end_line": 1065,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1067,
        "end_line": 1068,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1071,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 39)",
            "(line 1073,col 5)-(line 1073,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1081,
        "end_line": 1093,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1082,col 5)-(line 1082,col 52)",
            "(line 1083,col 5)-(line 1091,col 39)",
            "(line 1092,col 5)-(line 1092,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-26cd3ab5-662e-47b1-8029-5ebbf49208ff.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1085,
        "end_line": 1089,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 13)-(line 1088,col 13)"
        ]
    }
]