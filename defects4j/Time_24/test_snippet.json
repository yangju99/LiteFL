[
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDateTimeFormatter.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.TestDateTimeFormatter(java.lang.String)",
        "snippet": "    public TestDateTimeFormatter(String name) {\n        super(name);\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n        f = new DateTimeFormatterBuilder()\n                .appendDayOfWeekShortText()\n                .appendLiteral(' ')\n                .append(ISODateTimeFormat.dateTimeNoMillis())\n                .toFormatter();\n        g = ISODateTimeFormat.dateTimeNoMillis();\n    }\n",
        "begin_line": 81,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 59)",
            "(line 83,col 9)-(line 83,col 57)",
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 45)",
            "(line 86,col 9)-(line 86,col 40)",
            "(line 87,col 9)-(line 87,col 67)",
            "(line 88,col 9)-(line 88,col 37)",
            "(line 89,col 9)-(line 93,col 31)",
            "(line 94,col 9)-(line 94,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n        f = null;\n        g = null;\n    }\n",
        "begin_line": 97,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 54)",
            "(line 100,col 9)-(line 100,col 46)",
            "(line 101,col 9)-(line 101,col 42)",
            "(line 102,col 9)-(line 102,col 36)",
            "(line 103,col 9)-(line 103,col 32)",
            "(line 104,col 9)-(line 104,col 30)",
            "(line 105,col 9)-(line 105,col 17)",
            "(line 106,col 9)-(line 106,col 17)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_simple()",
        "snippet": "    public void testPrint_simple() {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.print(dt));\n        \n        dt = dt.withZone(PARIS);\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.print(dt));\n        \n        dt = dt.withZone(NEWYORK);\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.print(dt));\n        \n        dt = dt.withChronology(BUDDHIST_PARIS);\n        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.print(dt));\n    }\n",
        "begin_line": 110,
        "end_line": 122,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 68)",
            "(line 112,col 9)-(line 112,col 62)",
            "(line 114,col 9)-(line 114,col 32)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 118,col 9)-(line 118,col 67)",
            "(line 120,col 9)-(line 120,col 47)",
            "(line 121,col 9)-(line 121,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_locale()",
        "snippet": "    public void testPrint_locale() {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        assertEquals(\"mer. 2004-06-09T10:20:30Z\", f.withLocale(Locale.FRENCH).print(dt));\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withLocale(null).print(dt));\n    }\n",
        "begin_line": 125,
        "end_line": 129,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 68)",
            "(line 127,col 9)-(line 127,col 89)",
            "(line 128,col 9)-(line 128,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_zone()",
        "snippet": "    public void testPrint_zone() {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withZone(PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withZone(null).print(dt));\n        \n        dt = dt.withZone(NEWYORK);\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withZone(PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withZoneUTC().print(dt));\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(null).print(dt));\n    }\n",
        "begin_line": 132,
        "end_line": 143,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 68)",
            "(line 134,col 9)-(line 134,col 85)",
            "(line 135,col 9)-(line 135,col 83)",
            "(line 136,col 9)-(line 136,col 77)",
            "(line 138,col 9)-(line 138,col 34)",
            "(line 139,col 9)-(line 139,col 85)",
            "(line 140,col 9)-(line 140,col 83)",
            "(line 141,col 9)-(line 141,col 76)",
            "(line 142,col 9)-(line 142,col 82)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_chrono()",
        "snippet": "    public void testPrint_chrono() {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withChronology(ISO_PARIS).print(dt));\n        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.withChronology(BUDDHIST_PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withChronology(null).print(dt));\n        \n        dt = dt.withChronology(BUDDHIST_PARIS);\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withChronology(ISO_PARIS).print(dt));\n        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.withChronology(BUDDHIST_PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withChronology(ISO_UTC).print(dt));\n        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.withChronology(null).print(dt));\n    }\n",
        "begin_line": 146,
        "end_line": 157,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 68)",
            "(line 148,col 9)-(line 148,col 93)",
            "(line 149,col 9)-(line 149,col 98)",
            "(line 150,col 9)-(line 150,col 83)",
            "(line 152,col 9)-(line 152,col 47)",
            "(line 153,col 9)-(line 153,col 93)",
            "(line 154,col 9)-(line 154,col 98)",
            "(line 155,col 9)-(line 155,col 86)",
            "(line 156,col 9)-(line 156,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_bufferMethods()",
        "snippet": "    public void testPrint_bufferMethods() throws Exception {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        StringBuffer buf = new StringBuffer();\n        f.printTo(buf, dt);\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", buf.toString());\n        \n        buf = new StringBuffer();\n        f.printTo(buf, dt.getMillis());\n        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", buf.toString());\n        \n        buf = new StringBuffer();\n        ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toYearMonthDay());\n        assertEquals(\"2004-06-09\", buf.toString());\n        \n        buf = new StringBuffer();\n        try {\n            ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 160,
        "end_line": 179,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 68)",
            "(line 162,col 9)-(line 162,col 46)",
            "(line 163,col 9)-(line 163,col 27)",
            "(line 164,col 9)-(line 164,col 65)",
            "(line 166,col 9)-(line 166,col 33)",
            "(line 167,col 9)-(line 167,col 39)",
            "(line 168,col 9)-(line 168,col 70)",
            "(line 170,col 9)-(line 170,col 33)",
            "(line 171,col 9)-(line 171,col 75)",
            "(line 172,col 9)-(line 172,col 51)",
            "(line 174,col 9)-(line 174,col 33)",
            "(line 175,col 9)-(line 178,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_writerMethods()",
        "snippet": "    public void testPrint_writerMethods() throws Exception {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        CharArrayWriter out = new CharArrayWriter();\n        f.printTo(out, dt);\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", out.toString());\n        \n        out = new CharArrayWriter();\n        f.printTo(out, dt.getMillis());\n        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", out.toString());\n        \n        out = new CharArrayWriter();\n        ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay());\n        assertEquals(\"2004-06-09\", out.toString());\n        \n        out = new CharArrayWriter();\n        try {\n            ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 182,
        "end_line": 201,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 68)",
            "(line 184,col 9)-(line 184,col 52)",
            "(line 185,col 9)-(line 185,col 27)",
            "(line 186,col 9)-(line 186,col 65)",
            "(line 188,col 9)-(line 188,col 36)",
            "(line 189,col 9)-(line 189,col 39)",
            "(line 190,col 9)-(line 190,col 70)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 75)",
            "(line 194,col 9)-(line 194,col 51)",
            "(line 196,col 9)-(line 196,col 36)",
            "(line 197,col 9)-(line 200,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_appendableMethods()",
        "snippet": "    public void testPrint_appendableMethods() throws Exception {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        StringBuilder buf = new StringBuilder();\n        f.printTo(buf, dt);\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\", buf.toString());\n        \n        buf = new StringBuilder();\n        f.printTo(buf, dt.getMillis());\n        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", buf.toString());\n        \n        buf = new StringBuilder();\n        ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate());\n        assertEquals(\"2004-06-09\", buf.toString());\n        \n        buf = new StringBuilder();\n        try {\n            ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 204,
        "end_line": 223,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 68)",
            "(line 206,col 9)-(line 206,col 48)",
            "(line 207,col 9)-(line 207,col 27)",
            "(line 208,col 9)-(line 208,col 65)",
            "(line 210,col 9)-(line 210,col 34)",
            "(line 211,col 9)-(line 211,col 39)",
            "(line 212,col 9)-(line 212,col 70)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 215,col 9)-(line 215,col 72)",
            "(line 216,col 9)-(line 216,col 51)",
            "(line 218,col 9)-(line 218,col 34)",
            "(line 219,col 9)-(line 222,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrint_chrono_and_zone()",
        "snippet": "    public void testPrint_chrono_and_zone() {\n        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n        assertEquals(\"Wed 2004-06-09T10:20:30Z\",\n                f.withChronology(null).withZone(null).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(ISO_PARIS).withZone(null).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n                f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n                f.withChronology(null).withZone(NEWYORK).print(dt));\n        \n        dt = dt.withChronology(ISO_PARIS);\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(null).withZone(null).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(ISO_PARIS).withZone(null).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n                f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n                f.withChronology(null).withZone(NEWYORK).print(dt));\n        \n        dt = dt.withChronology(BUDDHIST_PARIS);\n        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\",\n                f.withChronology(null).withZone(null).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(ISO_PARIS).withZone(null).print(dt));\n        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n                f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));\n        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n                f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));\n        assertEquals(\"Wed 2547-06-09T06:20:30-04:00\",\n                f.withChronology(null).withZone(NEWYORK).print(dt));\n    }\n",
        "begin_line": 226,
        "end_line": 262,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 68)",
            "(line 228,col 9)-(line 229,col 65)",
            "(line 230,col 9)-(line 231,col 70)",
            "(line 232,col 9)-(line 233,col 71)",
            "(line 234,col 9)-(line 235,col 73)",
            "(line 236,col 9)-(line 237,col 68)",
            "(line 239,col 9)-(line 239,col 42)",
            "(line 240,col 9)-(line 241,col 65)",
            "(line 242,col 9)-(line 243,col 70)",
            "(line 244,col 9)-(line 245,col 71)",
            "(line 246,col 9)-(line 247,col 73)",
            "(line 248,col 9)-(line 249,col 68)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 252,col 9)-(line 253,col 65)",
            "(line 254,col 9)-(line 255,col 70)",
            "(line 256,col 9)-(line 257,col 71)",
            "(line 258,col 9)-(line 259,col 73)",
            "(line 260,col 9)-(line 261,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testWithGetLocale()",
        "snippet": "    public void testWithGetLocale() {\n        DateTimeFormatter f2 = f.withLocale(Locale.FRENCH);\n        assertEquals(Locale.FRENCH, f2.getLocale());\n        assertSame(f2, f2.withLocale(Locale.FRENCH));\n        \n        f2 = f.withLocale(null);\n        assertEquals(null, f2.getLocale());\n        assertSame(f2, f2.withLocale(null));\n    }\n",
        "begin_line": 264,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 59)",
            "(line 266,col 9)-(line 266,col 52)",
            "(line 267,col 9)-(line 267,col 53)",
            "(line 269,col 9)-(line 269,col 32)",
            "(line 270,col 9)-(line 270,col 43)",
            "(line 271,col 9)-(line 271,col 44)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testWithGetZone()",
        "snippet": "    public void testWithGetZone() {\n        DateTimeFormatter f2 = f.withZone(PARIS);\n        assertEquals(PARIS, f2.getZone());\n        assertSame(f2, f2.withZone(PARIS));\n        \n        f2 = f.withZone(null);\n        assertEquals(null, f2.getZone());\n        assertSame(f2, f2.withZone(null));\n    }\n",
        "begin_line": 274,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 49)",
            "(line 276,col 9)-(line 276,col 42)",
            "(line 277,col 9)-(line 277,col 43)",
            "(line 279,col 9)-(line 279,col 30)",
            "(line 280,col 9)-(line 280,col 41)",
            "(line 281,col 9)-(line 281,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testWithGetChronology()",
        "snippet": "    public void testWithGetChronology() {\n        DateTimeFormatter f2 = f.withChronology(BUDDHIST_PARIS);\n        assertEquals(BUDDHIST_PARIS, f2.getChronology());\n        assertSame(f2, f2.withChronology(BUDDHIST_PARIS));\n        \n        f2 = f.withChronology(null);\n        assertEquals(null, f2.getChronology());\n        assertSame(f2, f2.withChronology(null));\n    }\n",
        "begin_line": 284,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 64)",
            "(line 286,col 9)-(line 286,col 57)",
            "(line 287,col 9)-(line 287,col 58)",
            "(line 289,col 9)-(line 289,col 36)",
            "(line 290,col 9)-(line 290,col 47)",
            "(line 291,col 9)-(line 291,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testWithGetPivotYear()",
        "snippet": "    public void testWithGetPivotYear() {\n        DateTimeFormatter f2 = f.withPivotYear(13);\n        assertEquals(new Integer(13), f2.getPivotYear());\n        assertSame(f2, f2.withPivotYear(13));\n        \n        f2 = f.withPivotYear(new Integer(14));\n        assertEquals(new Integer(14), f2.getPivotYear());\n        assertSame(f2, f2.withPivotYear(new Integer(14)));\n        \n        f2 = f.withPivotYear(null);\n        assertEquals(null, f2.getPivotYear());\n        assertSame(f2, f2.withPivotYear(null));\n    }\n",
        "begin_line": 294,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 51)",
            "(line 296,col 9)-(line 296,col 57)",
            "(line 297,col 9)-(line 297,col 45)",
            "(line 299,col 9)-(line 299,col 46)",
            "(line 300,col 9)-(line 300,col 57)",
            "(line 301,col 9)-(line 301,col 58)",
            "(line 303,col 9)-(line 303,col 35)",
            "(line 304,col 9)-(line 304,col 46)",
            "(line 305,col 9)-(line 305,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testWithGetOffsetParsedMethods()",
        "snippet": "    public void testWithGetOffsetParsedMethods() {\n        DateTimeFormatter f2 = f;\n        assertEquals(false, f2.isOffsetParsed());\n        assertEquals(null, f2.getZone());\n        \n        f2 = f.withOffsetParsed();\n        assertEquals(true, f2.isOffsetParsed());\n        assertEquals(null, f2.getZone());\n        \n        f2 = f2.withZone(PARIS);\n        assertEquals(false, f2.isOffsetParsed());\n        assertEquals(PARIS, f2.getZone());\n        \n        f2 = f2.withOffsetParsed();\n        assertEquals(true, f2.isOffsetParsed());\n        assertEquals(null, f2.getZone());\n        \n        f2 = f.withOffsetParsed();\n        assertNotSame(f, f2);\n        DateTimeFormatter f3 = f2.withOffsetParsed();\n        assertSame(f2, f3);\n    }\n",
        "begin_line": 308,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 33)",
            "(line 310,col 9)-(line 310,col 49)",
            "(line 311,col 9)-(line 311,col 41)",
            "(line 313,col 9)-(line 313,col 34)",
            "(line 314,col 9)-(line 314,col 48)",
            "(line 315,col 9)-(line 315,col 41)",
            "(line 317,col 9)-(line 317,col 32)",
            "(line 318,col 9)-(line 318,col 49)",
            "(line 319,col 9)-(line 319,col 42)",
            "(line 321,col 9)-(line 321,col 35)",
            "(line 322,col 9)-(line 322,col 48)",
            "(line 323,col 9)-(line 323,col 41)",
            "(line 325,col 9)-(line 325,col 34)",
            "(line 326,col 9)-(line 326,col 29)",
            "(line 327,col 9)-(line 327,col 53)",
            "(line 328,col 9)-(line 328,col 27)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testPrinterParserMethods()",
        "snippet": "    public void testPrinterParserMethods() {\n        DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser());\n        assertEquals(f.getPrinter(), f2.getPrinter());\n        assertEquals(f.getParser(), f2.getParser());\n        assertEquals(true, f2.isPrinter());\n        assertEquals(true, f2.isParser());\n        assertNotNull(f2.print(0L));\n        assertNotNull(f2.parseDateTime(\"Thu 1970-01-01T00:00:00Z\"));\n        \n        f2 = new DateTimeFormatter(f.getPrinter(), null);\n        assertEquals(f.getPrinter(), f2.getPrinter());\n        assertEquals(null, f2.getParser());\n        assertEquals(true, f2.isPrinter());\n        assertEquals(false, f2.isParser());\n        assertNotNull(f2.print(0L));\n        try {\n            f2.parseDateTime(\"Thu 1970-01-01T00:00:00Z\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        f2 = new DateTimeFormatter(null, f.getParser());\n        assertEquals(null, f2.getPrinter());\n        assertEquals(f.getParser(), f2.getParser());\n        assertEquals(false, f2.isPrinter());\n        assertEquals(true, f2.isParser());\n        try {\n            f2.print(0L);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        assertNotNull(f2.parseDateTime(\"Thu 1970-01-01T00:00:00Z\"));\n    }\n",
        "begin_line": 331,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 84)",
            "(line 333,col 9)-(line 333,col 54)",
            "(line 334,col 9)-(line 334,col 52)",
            "(line 335,col 9)-(line 335,col 43)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 337,col 9)-(line 337,col 36)",
            "(line 338,col 9)-(line 338,col 68)",
            "(line 340,col 9)-(line 340,col 57)",
            "(line 341,col 9)-(line 341,col 54)",
            "(line 342,col 9)-(line 342,col 43)",
            "(line 343,col 9)-(line 343,col 43)",
            "(line 344,col 9)-(line 344,col 43)",
            "(line 345,col 9)-(line 345,col 36)",
            "(line 346,col 9)-(line 349,col 53)",
            "(line 351,col 9)-(line 351,col 56)",
            "(line 352,col 9)-(line 352,col 44)",
            "(line 353,col 9)-(line 353,col 52)",
            "(line 354,col 9)-(line 354,col 44)",
            "(line 355,col 9)-(line 355,col 42)",
            "(line 356,col 9)-(line 359,col 53)",
            "(line 360,col 9)-(line 360,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_simple()",
        "snippet": "    public void testParseLocalDate_simple() {\n        assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(\"2004-06-09T10:20:30Z\"));\n        assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(\"2004-06-09T10:20:30+18:00\"));\n        assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(\"2004-06-09T10:20:30-18:00\"));\n        assertEquals(new LocalDate(2004, 6, 9, BUDDHIST_PARIS),\n                g.withChronology(BUDDHIST_PARIS).parseLocalDate(\"2004-06-09T10:20:30Z\"));\n        try {\n            g.parseDateTime(\"ABC\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 364,
        "end_line": 374,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 90)",
            "(line 366,col 9)-(line 366,col 95)",
            "(line 367,col 9)-(line 367,col 95)",
            "(line 368,col 9)-(line 369,col 89)",
            "(line 370,col 9)-(line 373,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_yearOfEra()",
        "snippet": "    public void testParseLocalDate_yearOfEra() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat\n            .forPattern(\"YYYY-MM GG\")\n            .withChronology(chrono)\n            .withLocale(Locale.UK);\n        \n        LocalDate date = new LocalDate(2005, 10, 1, chrono);\n        assertEquals(date, f.parseLocalDate(\"2005-10 AD\"));\n        assertEquals(date, f.parseLocalDate(\"2005-10 CE\"));\n        \n        date = new LocalDate(-2005, 10, 1, chrono);\n        assertEquals(date, f.parseLocalDate(\"2005-10 BC\"));\n        assertEquals(date, f.parseLocalDate(\"2005-10 BCE\"));\n    }\n",
        "begin_line": 376,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 58)",
            "(line 378,col 9)-(line 381,col 35)",
            "(line 383,col 9)-(line 383,col 60)",
            "(line 384,col 9)-(line 384,col 59)",
            "(line 385,col 9)-(line 385,col 59)",
            "(line 387,col 9)-(line 387,col 51)",
            "(line 388,col 9)-(line 388,col 59)",
            "(line 389,col 9)-(line 389,col 60)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_yearOfCentury()",
        "snippet": "    public void testParseLocalDate_yearOfCentury() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat\n            .forPattern(\"yy M d\")\n            .withChronology(chrono)\n            .withLocale(Locale.UK)\n            .withPivotYear(2050);\n        \n        LocalDate date = new LocalDate(2050, 8, 4, chrono);\n        assertEquals(date, f.parseLocalDate(\"50 8 4\"));\n    }\n",
        "begin_line": 392,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 58)",
            "(line 394,col 9)-(line 398,col 33)",
            "(line 400,col 9)-(line 400,col 59)",
            "(line 401,col 9)-(line 401,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_monthDay_feb29()",
        "snippet": "    public void testParseLocalDate_monthDay_feb29() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat\n            .forPattern(\"M d\")\n            .withChronology(chrono)\n            .withLocale(Locale.UK);\n        \n        assertEquals(new LocalDate(2000, 2, 29, chrono), f.parseLocalDate(\"2 29\"));\n    }\n",
        "begin_line": 404,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 58)",
            "(line 406,col 9)-(line 409,col 35)",
            "(line 411,col 9)-(line 411,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_monthDay_withDefaultYear_feb29()",
        "snippet": "    public void testParseLocalDate_monthDay_withDefaultYear_feb29() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat\n            .forPattern(\"M d\")\n            .withChronology(chrono)\n            .withLocale(Locale.UK)\n            .withDefaultYear(2012);\n        \n        assertEquals(new LocalDate(2012, 2, 29, chrono), f.parseLocalDate(\"2 29\"));\n    }\n",
        "begin_line": 414,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 58)",
            "(line 416,col 9)-(line 420,col 35)",
            "(line 422,col 9)-(line 422,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010()",
        "snippet": "    public void testParseLocalDate_weekyear_month_week_2010() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n    }\n",
        "begin_line": 425,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 58)",
            "(line 427,col 9)-(line 427,col 93)",
            "(line 428,col 9)-(line 428,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011()",
        "snippet": "    public void testParseLocalDate_weekyear_month_week_2011() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n    }\n",
        "begin_line": 431,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 58)",
            "(line 433,col 9)-(line 433,col 93)",
            "(line 434,col 9)-(line 434,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2012()",
        "snippet": "    public void testParseLocalDate_weekyear_month_week_2012() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n    }\n",
        "begin_line": 437,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 58)",
            "(line 439,col 9)-(line 439,col 93)",
            "(line 440,col 9)-(line 440,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2010()",
        "snippet": "    public void testParseLocalDate_year_month_week_2010() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n    }\n",
        "begin_line": 451,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 58)",
            "(line 453,col 9)-(line 453,col 93)",
            "(line 454,col 9)-(line 454,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2011()",
        "snippet": "    public void testParseLocalDate_year_month_week_2011() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n    }\n",
        "begin_line": 457,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 58)",
            "(line 459,col 9)-(line 459,col 93)",
            "(line 460,col 9)-(line 460,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2012()",
        "snippet": "    public void testParseLocalDate_year_month_week_2012() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n    }\n",
        "begin_line": 463,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 58)",
            "(line 465,col 9)-(line 465,col 93)",
            "(line 466,col 9)-(line 466,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2013()",
        "snippet": "    public void testParseLocalDate_year_month_week_2013() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2012, 12, 31, chrono), f.parseLocalDate(\"2013-01-01\"));  // 2013-01-01 would be better, but this is OK\n    }\n",
        "begin_line": 469,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 58)",
            "(line 471,col 9)-(line 471,col 93)",
            "(line 472,col 9)-(line 472,col 90)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2014()",
        "snippet": "    public void testParseLocalDate_year_month_week_2014() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2013, 12, 30, chrono), f.parseLocalDate(\"2014-01-01\"));  // 2014-01-01 would be better, but this is OK\n    }\n",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 58)",
            "(line 477,col 9)-(line 477,col 93)",
            "(line 478,col 9)-(line 478,col 90)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2015()",
        "snippet": "    public void testParseLocalDate_year_month_week_2015() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2014, 12, 29, chrono), f.parseLocalDate(\"2015-01-01\"));  // 2015-01-01 would be better, but this is OK\n    }\n",
        "begin_line": 481,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 58)",
            "(line 483,col 9)-(line 483,col 93)",
            "(line 484,col 9)-(line 484,col 90)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016()",
        "snippet": "    public void testParseLocalDate_year_month_week_2016() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate(\"2016-01-01\"));\n    }\n",
        "begin_line": 487,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 488,col 9)-(line 488,col 58)",
            "(line 489,col 9)-(line 489,col 93)",
            "(line 490,col 9)-(line 490,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalTime_simple()",
        "snippet": "    public void testParseLocalTime_simple() {\n        assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(\"2004-06-09T10:20:30Z\"));\n        assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(\"2004-06-09T10:20:30+18:00\"));\n        assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(\"2004-06-09T10:20:30-18:00\"));\n        assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS),\n                g.withChronology(BUDDHIST_PARIS).parseLocalTime(\"2004-06-09T10:20:30Z\"));\n        try {\n            g.parseDateTime(\"ABC\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 494,
        "end_line": 504,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 495,col 9)-(line 495,col 90)",
            "(line 496,col 9)-(line 496,col 95)",
            "(line 497,col 9)-(line 497,col 95)",
            "(line 498,col 9)-(line 499,col 89)",
            "(line 500,col 9)-(line 503,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDateTime_simple()",
        "snippet": "    public void testParseLocalDateTime_simple() {\n        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(\"2004-06-09T10:20:30Z\"));\n        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(\"2004-06-09T10:20:30+18:00\"));\n        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(\"2004-06-09T10:20:30-18:00\"));\n        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS),\n                g.withChronology(BUDDHIST_PARIS).parseLocalDateTime(\"2004-06-09T10:20:30Z\"));\n        try {\n            g.parseDateTime(\"ABC\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 507,
        "end_line": 517,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 110)",
            "(line 509,col 9)-(line 509,col 115)",
            "(line 510,col 9)-(line 510,col 115)",
            "(line 511,col 9)-(line 512,col 93)",
            "(line 513,col 9)-(line 516,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDateTime_monthDay_feb29()",
        "snippet": "    public void testParseLocalDateTime_monthDay_feb29() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat\n            .forPattern(\"M d H m\")\n            .withChronology(chrono)\n            .withLocale(Locale.UK);\n        \n        assertEquals(new LocalDateTime(2000, 2, 29, 13, 40, 0, 0, chrono), f.parseLocalDateTime(\"2 29 13 40\"));\n    }\n",
        "begin_line": 519,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 520,col 9)-(line 520,col 58)",
            "(line 521,col 9)-(line 524,col 35)",
            "(line 526,col 9)-(line 526,col 111)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDateTime_monthDay_withDefaultYear_feb29()",
        "snippet": "    public void testParseLocalDateTime_monthDay_withDefaultYear_feb29() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat\n            .forPattern(\"M d H m\")\n            .withChronology(chrono)\n            .withLocale(Locale.UK)\n            .withDefaultYear(2012);\n        \n        assertEquals(new LocalDateTime(2012, 2, 29, 13, 40, 0, 0, chrono), f.parseLocalDateTime(\"2 29 13 40\"));\n    }\n",
        "begin_line": 529,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 58)",
            "(line 531,col 9)-(line 535,col 35)",
            "(line 537,col 9)-(line 537,col 111)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_simple()",
        "snippet": "    public void testParseDateTime_simple() {\n        DateTime expect = null;\n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.parseDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        try {\n            g.parseDateTime(\"ABC\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 541,
        "end_line": 550,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 542,col 9)-(line 542,col 31)",
            "(line 543,col 9)-(line 543,col 65)",
            "(line 544,col 9)-(line 544,col 70)",
            "(line 546,col 9)-(line 549,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_zone()",
        "snippet": "    public void testParseDateTime_zone() {\n        DateTime expect = null;\n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(LONDON).parseDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(null).parseDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 552,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 553,col 9)-(line 553,col 31)",
            "(line 554,col 9)-(line 554,col 65)",
            "(line 555,col 9)-(line 555,col 87)",
            "(line 557,col 9)-(line 557,col 65)",
            "(line 558,col 9)-(line 558,col 85)",
            "(line 560,col 9)-(line 560,col 64)",
            "(line 561,col 9)-(line 561,col 86)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_zone2()",
        "snippet": "    public void testParseDateTime_zone2() {\n        DateTime expect = null;\n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(LONDON).parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n        \n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(null).parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n        \n        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withZone(PARIS).parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n    }\n",
        "begin_line": 564,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 31)",
            "(line 566,col 9)-(line 566,col 65)",
            "(line 567,col 9)-(line 567,col 92)",
            "(line 569,col 9)-(line 569,col 65)",
            "(line 570,col 9)-(line 570,col 90)",
            "(line 572,col 9)-(line 572,col 64)",
            "(line 573,col 9)-(line 573,col 91)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_zone3()",
        "snippet": "    public void testParseDateTime_zone3() {\n        DateTimeFormatter h = new DateTimeFormatterBuilder()\n        .append(ISODateTimeFormat.date())\n        .appendLiteral('T')\n        .append(ISODateTimeFormat.timeElementParser())\n        .toFormatter();\n        \n        DateTime expect = null;\n        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n        assertEquals(expect, h.withZone(LONDON).parseDateTime(\"2004-06-09T10:20:30\"));\n        \n        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n        assertEquals(expect, h.withZone(null).parseDateTime(\"2004-06-09T10:20:30\"));\n        \n        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);\n        assertEquals(expect, h.withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30\"));\n    }\n",
        "begin_line": 576,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 577,col 9)-(line 581,col 23)",
            "(line 583,col 9)-(line 583,col 31)",
            "(line 584,col 9)-(line 584,col 65)",
            "(line 585,col 9)-(line 585,col 86)",
            "(line 587,col 9)-(line 587,col 65)",
            "(line 588,col 9)-(line 588,col 84)",
            "(line 590,col 9)-(line 590,col 64)",
            "(line 591,col 9)-(line 591,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_simple_precedence()",
        "snippet": "    public void testParseDateTime_simple_precedence() {\n        DateTime expect = null;\n        // use correct day of week\n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, f.parseDateTime(\"Wed 2004-06-09T10:20:30Z\"));\n        \n        // use wrong day of week\n        expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);\n        // DayOfWeek takes precedence, because week < month in length\n        assertEquals(expect, f.parseDateTime(\"Mon 2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 594,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 595,col 9)-(line 595,col 31)",
            "(line 597,col 9)-(line 597,col 65)",
            "(line 598,col 9)-(line 598,col 74)",
            "(line 601,col 9)-(line 601,col 65)",
            "(line 603,col 9)-(line 603,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_offsetParsed()",
        "snippet": "    public void testParseDateTime_offsetParsed() {\n        DateTime expect = null;\n        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n        assertEquals(expect, g.withOffsetParsed().parseDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new DateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));\n        assertEquals(expect, g.withOffsetParsed().parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n        \n        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n        assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseDateTime(\"2004-06-09T10:20:30Z\"));\n        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 606,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 31)",
            "(line 608,col 9)-(line 608,col 62)",
            "(line 609,col 9)-(line 609,col 89)",
            "(line 611,col 9)-(line 611,col 89)",
            "(line 612,col 9)-(line 612,col 94)",
            "(line 614,col 9)-(line 614,col 62)",
            "(line 615,col 9)-(line 615,col 105)",
            "(line 616,col 9)-(line 616,col 64)",
            "(line 617,col 9)-(line 617,col 105)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseDateTime_chrono()",
        "snippet": "    public void testParseDateTime_chrono() {\n        DateTime expect = null;\n        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withChronology(ISO_PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0,LONDON);\n        assertEquals(expect, g.withChronology(null).parseDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new DateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);\n        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime(\"2547-06-09T10:20:30Z\"));\n        \n        expect = new DateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); // zone is +00:09:21 in 1451\n        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 620,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 621,col 9)-(line 621,col 31)",
            "(line 622,col 9)-(line 622,col 64)",
            "(line 623,col 9)-(line 623,col 96)",
            "(line 625,col 9)-(line 625,col 64)",
            "(line 626,col 9)-(line 626,col 91)",
            "(line 628,col 9)-(line 628,col 73)",
            "(line 629,col 9)-(line 629,col 101)",
            "(line 631,col 9)-(line 631,col 73)",
            "(line 632,col 9)-(line 632,col 101)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_simple()",
        "snippet": "    public void testParseMutableDateTime_simple() {\n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        try {\n            g.parseMutableDateTime(\"ABC\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 636,
        "end_line": 645,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 38)",
            "(line 638,col 9)-(line 638,col 72)",
            "(line 639,col 9)-(line 639,col 77)",
            "(line 641,col 9)-(line 644,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_zone()",
        "snippet": "    public void testParseMutableDateTime_zone() {\n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(LONDON).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(null).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 647,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 648,col 9)-(line 648,col 38)",
            "(line 649,col 9)-(line 649,col 72)",
            "(line 650,col 9)-(line 650,col 94)",
            "(line 652,col 9)-(line 652,col 72)",
            "(line 653,col 9)-(line 653,col 92)",
            "(line 655,col 9)-(line 655,col 71)",
            "(line 656,col 9)-(line 656,col 93)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_zone2()",
        "snippet": "    public void testParseMutableDateTime_zone2() {\n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(LONDON).parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, g.withZone(null).parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withZone(PARIS).parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n    }\n",
        "begin_line": 659,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 660,col 9)-(line 660,col 38)",
            "(line 661,col 9)-(line 661,col 72)",
            "(line 662,col 9)-(line 662,col 99)",
            "(line 664,col 9)-(line 664,col 72)",
            "(line 665,col 9)-(line 665,col 97)",
            "(line 667,col 9)-(line 667,col 71)",
            "(line 668,col 9)-(line 668,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_zone3()",
        "snippet": "    public void testParseMutableDateTime_zone3() {\n        DateTimeFormatter h = new DateTimeFormatterBuilder()\n        .append(ISODateTimeFormat.date())\n        .appendLiteral('T')\n        .append(ISODateTimeFormat.timeElementParser())\n        .toFormatter();\n        \n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n        assertEquals(expect, h.withZone(LONDON).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n        assertEquals(expect, h.withZone(null).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);\n        assertEquals(expect, h.withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n    }\n",
        "begin_line": 671,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 672,col 9)-(line 676,col 23)",
            "(line 678,col 9)-(line 678,col 38)",
            "(line 679,col 9)-(line 679,col 72)",
            "(line 680,col 9)-(line 680,col 93)",
            "(line 682,col 9)-(line 682,col 72)",
            "(line 683,col 9)-(line 683,col 91)",
            "(line 685,col 9)-(line 685,col 71)",
            "(line 686,col 9)-(line 686,col 92)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_simple_precedence()",
        "snippet": "    public void testParseMutableDateTime_simple_precedence() {\n        MutableDateTime expect = null;\n        // use correct day of week\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(expect, f.parseDateTime(\"Wed 2004-06-09T10:20:30Z\"));\n        \n        // use wrong day of week\n        expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);\n        // DayOfWeek takes precedence, because week < month in length\n        assertEquals(expect, f.parseDateTime(\"Mon 2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 689,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 690,col 9)-(line 690,col 38)",
            "(line 692,col 9)-(line 692,col 72)",
            "(line 693,col 9)-(line 693,col 74)",
            "(line 696,col 9)-(line 696,col 72)",
            "(line 698,col 9)-(line 698,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_offsetParsed()",
        "snippet": "    public void testParseMutableDateTime_offsetParsed() {\n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n        assertEquals(expect, g.withOffsetParsed().parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));\n        assertEquals(expect, g.withOffsetParsed().parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n        assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 701,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 702,col 9)-(line 702,col 38)",
            "(line 703,col 9)-(line 703,col 69)",
            "(line 704,col 9)-(line 704,col 96)",
            "(line 706,col 9)-(line 706,col 96)",
            "(line 707,col 9)-(line 707,col 101)",
            "(line 709,col 9)-(line 709,col 69)",
            "(line 710,col 9)-(line 710,col 112)",
            "(line 711,col 9)-(line 711,col 71)",
            "(line 712,col 9)-(line 712,col 112)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMutableDateTime_chrono()",
        "snippet": "    public void testParseMutableDateTime_chrono() {\n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(expect, g.withChronology(ISO_PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0,LONDON);\n        assertEquals(expect, g.withChronology(null).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n        \n        expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);\n        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime(\"2547-06-09T10:20:30Z\"));\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); // zone is +00:09:21 in 1451\n        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n    }\n",
        "begin_line": 715,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 38)",
            "(line 717,col 9)-(line 717,col 71)",
            "(line 718,col 9)-(line 718,col 103)",
            "(line 720,col 9)-(line 720,col 71)",
            "(line 721,col 9)-(line 721,col 98)",
            "(line 723,col 9)-(line 723,col 80)",
            "(line 724,col 9)-(line 724,col 108)",
            "(line 726,col 9)-(line 726,col 80)",
            "(line 727,col 9)-(line 727,col 108)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_simple()",
        "snippet": "    public void testParseInto_simple() {\n        MutableDateTime expect = null;\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        MutableDateTime result = new MutableDateTime(0L);\n        assertEquals(20, g.parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        try {\n            g.parseInto(null, \"2004-06-09T10:20:30Z\", 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(~0, g.parseInto(result, \"ABC\", 0));\n        assertEquals(~10, g.parseInto(result, \"2004-06-09\", 0));\n        assertEquals(~13, g.parseInto(result, \"XX2004-06-09T\", 2));\n    }\n",
        "begin_line": 731,
        "end_line": 746,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 732,col 9)-(line 732,col 38)",
            "(line 733,col 9)-(line 733,col 72)",
            "(line 734,col 9)-(line 734,col 57)",
            "(line 735,col 9)-(line 735,col 73)",
            "(line 736,col 9)-(line 736,col 37)",
            "(line 738,col 9)-(line 741,col 48)",
            "(line 743,col 9)-(line 743,col 56)",
            "(line 744,col 9)-(line 744,col 64)",
            "(line 745,col 9)-(line 745,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_zone()",
        "snippet": "    public void testParseInto_zone() {\n        MutableDateTime expect = null;\n        MutableDateTime result = null;\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withZone(LONDON).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withZone(null).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withZone(PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n    }\n",
        "begin_line": 748,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 749,col 9)-(line 749,col 38)",
            "(line 750,col 9)-(line 750,col 38)",
            "(line 751,col 9)-(line 751,col 72)",
            "(line 752,col 9)-(line 752,col 41)",
            "(line 753,col 9)-(line 753,col 90)",
            "(line 754,col 9)-(line 754,col 37)",
            "(line 756,col 9)-(line 756,col 72)",
            "(line 757,col 9)-(line 757,col 41)",
            "(line 758,col 9)-(line 758,col 88)",
            "(line 759,col 9)-(line 759,col 37)",
            "(line 761,col 9)-(line 761,col 71)",
            "(line 762,col 9)-(line 762,col 41)",
            "(line 763,col 9)-(line 763,col 89)",
            "(line 764,col 9)-(line 764,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_zone2()",
        "snippet": "    public void testParseInto_zone2() {\n        MutableDateTime expect = null;\n        MutableDateTime result = null;\n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        assertEquals(25, g.withZone(LONDON).parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        assertEquals(25, g.withZone(null).parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        assertEquals(25, g.withZone(PARIS).parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n        assertEquals(expect, result);\n    }\n",
        "begin_line": 767,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 768,col 9)-(line 768,col 38)",
            "(line 769,col 9)-(line 769,col 38)",
            "(line 770,col 9)-(line 770,col 72)",
            "(line 771,col 9)-(line 771,col 41)",
            "(line 772,col 9)-(line 772,col 95)",
            "(line 773,col 9)-(line 773,col 37)",
            "(line 775,col 9)-(line 775,col 72)",
            "(line 776,col 9)-(line 776,col 93)",
            "(line 777,col 9)-(line 777,col 37)",
            "(line 779,col 9)-(line 779,col 71)",
            "(line 780,col 9)-(line 780,col 94)",
            "(line 781,col 9)-(line 781,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_zone3()",
        "snippet": "    public void testParseInto_zone3() {\n        DateTimeFormatter h = new DateTimeFormatterBuilder()\n        .append(ISODateTimeFormat.date())\n        .appendLiteral('T')\n        .append(ISODateTimeFormat.timeElementParser())\n        .toFormatter();\n        \n        MutableDateTime expect = null;\n        MutableDateTime result = null;\n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        assertEquals(19, h.withZone(LONDON).parseInto(result, \"2004-06-09T10:20:30\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        assertEquals(19, h.withZone(null).parseInto(result, \"2004-06-09T10:20:30\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);\n        result = new MutableDateTime(0L);\n        assertEquals(19, h.withZone(PARIS).parseInto(result, \"2004-06-09T10:20:30\", 0));\n        assertEquals(expect, result);\n    }\n",
        "begin_line": 784,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 785,col 9)-(line 789,col 23)",
            "(line 791,col 9)-(line 791,col 38)",
            "(line 792,col 9)-(line 792,col 38)",
            "(line 793,col 9)-(line 793,col 72)",
            "(line 794,col 9)-(line 794,col 41)",
            "(line 795,col 9)-(line 795,col 89)",
            "(line 796,col 9)-(line 796,col 37)",
            "(line 798,col 9)-(line 798,col 72)",
            "(line 799,col 9)-(line 799,col 41)",
            "(line 800,col 9)-(line 800,col 87)",
            "(line 801,col 9)-(line 801,col 37)",
            "(line 803,col 9)-(line 803,col 71)",
            "(line 804,col 9)-(line 804,col 41)",
            "(line 805,col 9)-(line 805,col 88)",
            "(line 806,col 9)-(line 806,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_simple_precedence()",
        "snippet": "    public void testParseInto_simple_precedence() {\n        MutableDateTime expect = null;\n        MutableDateTime result = null;\n        expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        // DayOfWeek takes precedence, because week < month in length\n        assertEquals(24, f.parseInto(result, \"Mon 2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n    }\n",
        "begin_line": 809,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 810,col 9)-(line 810,col 38)",
            "(line 811,col 9)-(line 811,col 38)",
            "(line 812,col 9)-(line 812,col 72)",
            "(line 813,col 9)-(line 813,col 41)",
            "(line 815,col 9)-(line 815,col 77)",
            "(line 816,col 9)-(line 816,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_offsetParsed()",
        "snippet": "    public void testParseInto_offsetParsed() {\n        MutableDateTime expect = null;\n        MutableDateTime result = null;\n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withOffsetParsed().parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));\n        result = new MutableDateTime(0L);\n        assertEquals(25, g.withOffsetParsed().parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n    }\n",
        "begin_line": 819,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 820,col 9)-(line 820,col 38)",
            "(line 821,col 9)-(line 821,col 38)",
            "(line 822,col 9)-(line 822,col 69)",
            "(line 823,col 9)-(line 823,col 41)",
            "(line 824,col 9)-(line 824,col 92)",
            "(line 825,col 9)-(line 825,col 37)",
            "(line 827,col 9)-(line 827,col 96)",
            "(line 828,col 9)-(line 828,col 41)",
            "(line 829,col 9)-(line 829,col 97)",
            "(line 830,col 9)-(line 830,col 37)",
            "(line 832,col 9)-(line 832,col 69)",
            "(line 833,col 9)-(line 833,col 41)",
            "(line 834,col 9)-(line 834,col 108)",
            "(line 835,col 9)-(line 835,col 37)",
            "(line 836,col 9)-(line 836,col 71)",
            "(line 837,col 9)-(line 837,col 41)",
            "(line 838,col 9)-(line 838,col 108)",
            "(line 839,col 9)-(line 839,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseInto_chrono()",
        "snippet": "    public void testParseInto_chrono() {\n        MutableDateTime expect = null;\n        MutableDateTime result = null;\n        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withChronology(ISO_PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withChronology(null).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, \"2547-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n        \n        expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS);\n        result = new MutableDateTime(0L);\n        assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n        assertEquals(expect, result);\n    }\n",
        "begin_line": 842,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 843,col 9)-(line 843,col 38)",
            "(line 844,col 9)-(line 844,col 38)",
            "(line 845,col 9)-(line 845,col 71)",
            "(line 846,col 9)-(line 846,col 41)",
            "(line 847,col 9)-(line 847,col 99)",
            "(line 848,col 9)-(line 848,col 37)",
            "(line 850,col 9)-(line 850,col 72)",
            "(line 851,col 9)-(line 851,col 41)",
            "(line 852,col 9)-(line 852,col 94)",
            "(line 853,col 9)-(line 853,col 37)",
            "(line 855,col 9)-(line 855,col 80)",
            "(line 856,col 9)-(line 856,col 41)",
            "(line 857,col 9)-(line 857,col 104)",
            "(line 858,col 9)-(line 858,col 37)",
            "(line 860,col 9)-(line 860,col 80)",
            "(line 861,col 9)-(line 861,col 41)",
            "(line 862,col 9)-(line 862,col 104)",
            "(line 863,col 9)-(line 863,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testParseMillis_fractionOfSecondLong()",
        "snippet": "    public void testParseMillis_fractionOfSecondLong() {\n        DateTimeFormatter f = new DateTimeFormatterBuilder()\n            .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)\n                .toFormatter().withZoneUTC();\n        assertEquals(10512, f.parseMillis(\"10.5123456\"));\n        assertEquals(10512, f.parseMillis(\"10.512999\"));\n    }\n",
        "begin_line": 866,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 867,col 9)-(line 869,col 45)",
            "(line 870,col 9)-(line 870,col 57)",
            "(line 871,col 9)-(line 871,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testZoneNameNearTransition()",
        "snippet": "    public void testZoneNameNearTransition() {}\n",
        "begin_line": 876,
        "end_line": 876,
        "comment": " Ensure time zone name switches properly at the zone DST transition.",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.format.TestDateTimeFormatter",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestDateTimeFormatter.java",
        "signature": "org.joda.time.format.TestDateTimeFormatter.testZoneShortNameNearTransition()",
        "snippet": "    public void testZoneShortNameNearTransition() {}\n",
        "begin_line": 894,
        "end_line": 894,
        "comment": " Ensure time zone name switches properly at the zone DST transition.",
        "child_ranges": []
    }
]