[
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        field = new DfpField(40);\n        generator = new MersenneTwister(6176597458463500194l);\n    }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 33)",
            "(line 46,col 9)-(line 46,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testMinMaxDouble()",
        "snippet": "    @Test\n    public void testMinMaxDouble() {\n        double[][] pairs = {\n            { -50.0, 50.0 },\n            {  Double.POSITIVE_INFINITY, 1.0 },\n            {  Double.NEGATIVE_INFINITY, 1.0 },\n            {  Double.NaN, 1.0 },\n            {  Double.POSITIVE_INFINITY, 0.0 },\n            {  Double.NEGATIVE_INFINITY, 0.0 },\n            {  Double.NaN, 0.0 },\n            {  Double.NaN, Double.NEGATIVE_INFINITY },\n            {  Double.NaN, Double.POSITIVE_INFINITY },\n            { Precision.SAFE_MIN, Precision.EPSILON }\n        };\n        for (double[] pair : pairs) {\n            Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.min(pair[0], pair[1]),\n                                FastMath.min(pair[0], pair[1]),\n                                Precision.EPSILON);\n            Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.min(pair[1], pair[0]),\n                                FastMath.min(pair[1], pair[0]),\n                                Precision.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.max(pair[0], pair[1]),\n                                FastMath.max(pair[0], pair[1]),\n                                Precision.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.max(pair[1], pair[0]),\n                                FastMath.max(pair[1], pair[0]),\n                                Precision.EPSILON);\n        }\n    }\n",
        "begin_line": 49,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 62,col 10)",
            "(line 63,col 9)-(line 80,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testMinMaxFloat()",
        "snippet": "    @Test\n    public void testMinMaxFloat() {\n        float[][] pairs = {\n            { -50.0f, 50.0f },\n            {  Float.POSITIVE_INFINITY, 1.0f },\n            {  Float.NEGATIVE_INFINITY, 1.0f },\n            {  Float.NaN, 1.0f },\n            {  Float.POSITIVE_INFINITY, 0.0f },\n            {  Float.NEGATIVE_INFINITY, 0.0f },\n            {  Float.NaN, 0.0f },\n            {  Float.NaN, Float.NEGATIVE_INFINITY },\n            {  Float.NaN, Float.POSITIVE_INFINITY }\n        };\n        for (float[] pair : pairs) {\n            Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.min(pair[0], pair[1]),\n                                FastMath.min(pair[0], pair[1]),\n                                Precision.EPSILON);\n            Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.min(pair[1], pair[0]),\n                                FastMath.min(pair[1], pair[0]),\n                                Precision.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.max(pair[0], pair[1]),\n                                FastMath.max(pair[0], pair[1]),\n                                Precision.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.max(pair[1], pair[0]),\n                                FastMath.max(pair[1], pair[0]),\n                                Precision.EPSILON);\n        }\n    }\n",
        "begin_line": 83,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 95,col 10)",
            "(line 96,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testConstants()",
        "snippet": "    @Test\n    public void testConstants() {\n        Assert.assertEquals(Math.PI, FastMath.PI, 1.0e-20);\n        Assert.assertEquals(Math.E, FastMath.E, 1.0e-20);\n    }\n",
        "begin_line": 116,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 59)",
            "(line 119,col 9)-(line 119,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAtan2()",
        "snippet": "    @Test\n    public void testAtan2() {\n        double y1 = 1.2713504628280707e10;\n        double x1 = -5.674940885228782e-10;\n        Assert.assertEquals(Math.atan2(y1, x1), FastMath.atan2(y1, x1), 2 * Precision.EPSILON);\n        double y2 = 0.0;\n        double x2 = Double.POSITIVE_INFINITY;\n        Assert.assertEquals(Math.atan2(y2, x2), FastMath.atan2(y2, x2), Precision.SAFE_MIN);\n    }\n",
        "begin_line": 122,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 42)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 126,col 95)",
            "(line 127,col 9)-(line 127,col 24)",
            "(line 128,col 9)-(line 128,col 45)",
            "(line 129,col 9)-(line 129,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testHyperbolic()",
        "snippet": "    @Test\n    public void testHyperbolic() {\n        double maxErr = 0;\n        for (double x = -30; x < 30; x += 0.001) {\n            double tst = FastMath.sinh(x);\n            double ref = Math.sinh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n        maxErr = 0;\n        for (double x = -30; x < 30; x += 0.001) {\n            double tst = FastMath.cosh(x);\n            double ref = Math.cosh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n        maxErr = 0;\n        for (double x = -0.5; x < 0.5; x += 0.001) {\n            double tst = FastMath.tanh(x);\n            double ref = Math.tanh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));\n        }\n        Assert.assertEquals(0, maxErr, 4);\n\n    }\n",
        "begin_line": 132,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 26)",
            "(line 135,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 42)",
            "(line 142,col 9)-(line 142,col 19)",
            "(line 143,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 42)",
            "(line 150,col 9)-(line 150,col 19)",
            "(line 151,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testMath905LargePositive()",
        "snippet": "    @Test\n    public void testMath905LargePositive() {\n        final double start = StrictMath.log(Double.MAX_VALUE);\n        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);\n        final double end = 2 * StrictMath.log(endT);\n\n        double maxErr = 0;\n        for (double x = start; x < end; x += 1e-3) {\n            final double tst = FastMath.cosh(x);\n            final double ref = Math.cosh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n        }\n        Assert.assertEquals(0, maxErr, 3);\n\n        for (double x = start; x < end; x += 1e-3) {\n            final double tst = FastMath.sinh(x);\n            final double ref = Math.sinh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n        }\n        Assert.assertEquals(0, maxErr, 3);\n    }\n",
        "begin_line": 160,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 62)",
            "(line 163,col 9)-(line 163,col 83)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 166,col 9)-(line 166,col 26)",
            "(line 167,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 174,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testMath905LargeNegative()",
        "snippet": "    @Test\n    public void testMath905LargeNegative() {\n        final double start = -StrictMath.log(Double.MAX_VALUE);\n        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);\n        final double end = -2 * StrictMath.log(endT);\n\n        double maxErr = 0;\n        for (double x = start; x > end; x -= 1e-3) {\n            final double tst = FastMath.cosh(x);\n            final double ref = Math.cosh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n        }\n        Assert.assertEquals(0, maxErr, 3);\n\n        for (double x = start; x > end; x -= 1e-3) {\n            final double tst = FastMath.sinh(x);\n            final double ref = Math.sinh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n        }\n        Assert.assertEquals(0, maxErr, 3);\n    }\n",
        "begin_line": 182,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 63)",
            "(line 185,col 9)-(line 185,col 83)",
            "(line 186,col 9)-(line 186,col 53)",
            "(line 188,col 9)-(line 188,col 26)",
            "(line 189,col 9)-(line 193,col 9)",
            "(line 194,col 9)-(line 194,col 42)",
            "(line 196,col 9)-(line 200,col 9)",
            "(line 201,col 9)-(line 201,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses()",
        "snippet": "    @Test\n    public void testHyperbolicInverses() {\n        double maxErr = 0;\n        for (double x = -30; x < 30; x += 0.01) {\n            maxErr = FastMath.max(maxErr, FastMath.abs(x - FastMath.sinh(FastMath.asinh(x))) / (2 * FastMath.ulp(x)));\n        }\n        Assert.assertEquals(0, maxErr, 3);\n\n        maxErr = 0;\n        for (double x = 1; x < 30; x += 0.01) {\n            maxErr = FastMath.max(maxErr, FastMath.abs(x - FastMath.cosh(FastMath.acosh(x))) / (2 * FastMath.ulp(x)));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n        maxErr = 0;\n        for (double x = -1 + Precision.EPSILON; x < 1 - Precision.EPSILON; x += 0.0001) {\n            maxErr = FastMath.max(maxErr, FastMath.abs(x - FastMath.tanh(FastMath.atanh(x))) / (2 * FastMath.ulp(x)));\n        }\n        Assert.assertEquals(0, maxErr, 2);\n\n    }\n",
        "begin_line": 204,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 26)",
            "(line 207,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 210,col 42)",
            "(line 212,col 9)-(line 212,col 19)",
            "(line 213,col 9)-(line 215,col 9)",
            "(line 216,col 9)-(line 216,col 42)",
            "(line 218,col 9)-(line 218,col 19)",
            "(line 219,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 222,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testLogAccuracy()",
        "snippet": "    @Test\n    public void testLogAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = Math.exp(generator.nextDouble() * 1416.0 - 708.0) * generator.nextDouble();\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.log(x);\n            double ref = DfpMath.log(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0.0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"log() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 226,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 31)",
            "(line 230,col 9)-(line 246,col 9)",
            "(line 248,col 9)-(line 248,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testLog10Accuracy()",
        "snippet": "    @Test\n    public void testLog10Accuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = Math.exp(generator.nextDouble() * 1416.0 - 708.0) * generator.nextDouble();\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.log10(x);\n            double ref = DfpMath.log(field.newDfp(x)).divide(DfpMath.log(field.newDfp(\"10\"))).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0.0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x)).divide(DfpMath.log(field.newDfp(\"10\")))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"log10() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 251,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 31)",
            "(line 255,col 9)-(line 270,col 9)",
            "(line 272,col 9)-(line 272,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testLog1pAccuracy()",
        "snippet": "    @Test\n    public void testLog1pAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = Math.exp(generator.nextDouble() * 10.0 - 5.0) * generator.nextDouble();\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.log1p(x);\n            double ref = DfpMath.log(field.newDfp(x).add(field.getOne())).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0.0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x).add(field.getOne()))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"log1p() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 275,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 31)",
            "(line 279,col 9)-(line 294,col 9)",
            "(line 296,col 9)-(line 296,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testLog1pSpecialCases()",
        "snippet": "    @Test\n    public void testLog1pSpecialCases() {\n\n        Assert.assertTrue(\"Logp of -1.0 should be -Inf\", Double.isInfinite(FastMath.log1p(-1.0)));\n\n    }\n",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testLogSpecialCases()",
        "snippet": "    @Test\n    public void testLogSpecialCases() {\n\n        Assert.assertTrue(\"Log of zero should be -Inf\", Double.isInfinite(FastMath.log(0.0)));\n\n        Assert.assertTrue(\"Log of -zero should be -Inf\", Double.isInfinite(FastMath.log(-0.0)));\n\n        Assert.assertTrue(\"Log of NaN should be NaN\", Double.isNaN(FastMath.log(Double.NaN)));\n\n        Assert.assertTrue(\"Log of negative number should be NaN\", Double.isNaN(FastMath.log(-1.0)));\n\n        Assert.assertEquals(\"Log of Double.MIN_VALUE should be -744.4400719213812\", -744.4400719213812, FastMath.log(Double.MIN_VALUE), Precision.EPSILON);\n\n        Assert.assertTrue(\"Log of infinity should be infinity\", Double.isInfinite(FastMath.log(Double.POSITIVE_INFINITY)));\n    }\n",
        "begin_line": 306,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 94)",
            "(line 311,col 9)-(line 311,col 96)",
            "(line 313,col 9)-(line 313,col 94)",
            "(line 315,col 9)-(line 315,col 100)",
            "(line 317,col 9)-(line 317,col 155)",
            "(line 319,col 9)-(line 319,col 123)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testExpSpecialCases()",
        "snippet": "    @Test\n    public void testExpSpecialCases() {\n\n        // Smallest value that will round up to Double.MIN_VALUE\n        Assert.assertEquals(Double.MIN_VALUE, FastMath.exp(-745.1332191019411), Precision.EPSILON);\n\n        Assert.assertEquals(\"exp(-745.1332191019412) should be 0.0\", 0.0, FastMath.exp(-745.1332191019412), Precision.EPSILON);\n\n        Assert.assertTrue(\"exp of NaN should be NaN\", Double.isNaN(FastMath.exp(Double.NaN)));\n\n        Assert.assertTrue(\"exp of infinity should be infinity\", Double.isInfinite(FastMath.exp(Double.POSITIVE_INFINITY)));\n\n        Assert.assertEquals(\"exp of -infinity should be 0.0\", 0.0, FastMath.exp(Double.NEGATIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"exp(1) should be Math.E\", Math.E, FastMath.exp(1.0), Precision.EPSILON);\n    }\n",
        "begin_line": 321,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 99)",
            "(line 327,col 9)-(line 327,col 127)",
            "(line 329,col 9)-(line 329,col 94)",
            "(line 331,col 9)-(line 331,col 123)",
            "(line 333,col 9)-(line 333,col 126)",
            "(line 335,col 9)-(line 335,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testPowSpecialCases()",
        "snippet": "    @Test\n    public void testPowSpecialCases() {\n\n        Assert.assertEquals(\"pow(-1, 0) should be 1.0\", 1.0, FastMath.pow(-1.0, 0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(-1, -0) should be 1.0\", 1.0, FastMath.pow(-1.0, -0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(PI, 1.0) should be PI\", FastMath.PI, FastMath.pow(FastMath.PI, 1.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(-PI, 1.0) should be -PI\", -FastMath.PI, FastMath.pow(-FastMath.PI, 1.0), Precision.EPSILON);\n\n        Assert.assertTrue(\"pow(PI, NaN) should be NaN\", Double.isNaN(FastMath.pow(Math.PI, Double.NaN)));\n\n        Assert.assertTrue(\"pow(NaN, PI) should be NaN\", Double.isNaN(FastMath.pow(Double.NaN, Math.PI)));\n\n        Assert.assertTrue(\"pow(2.0, Infinity) should be Infinity\", Double.isInfinite(FastMath.pow(2.0, Double.POSITIVE_INFINITY)));\n\n        Assert.assertTrue(\"pow(0.5, -Infinity) should be Infinity\", Double.isInfinite(FastMath.pow(0.5, Double.NEGATIVE_INFINITY)));\n\n        Assert.assertEquals(\"pow(0.5, Infinity) should be 0.0\", 0.0, FastMath.pow(0.5, Double.POSITIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(2.0, -Infinity) should be 0.0\", 0.0, FastMath.pow(2.0, Double.NEGATIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(0.0, 0.5) should be 0.0\", 0.0, FastMath.pow(0.0, 0.5), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(Infinity, -0.5) should be 0.0\", 0.0, FastMath.pow(Double.POSITIVE_INFINITY, -0.5), Precision.EPSILON);\n\n        Assert.assertTrue(\"pow(0.0, -0.5) should be Inf\", Double.isInfinite(FastMath.pow(0.0, -0.5)));\n\n        Assert.assertTrue(\"pow(Inf, 0.5) should be Inf\", Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY, 0.5)));\n\n        Assert.assertTrue(\"pow(-0.0, -3.0) should be -Inf\", Double.isInfinite(FastMath.pow(-0.0, -3.0)));\n\n        Assert.assertTrue(\"pow(-Inf, -3.0) should be -Inf\", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 3.0)));\n\n        Assert.assertTrue(\"pow(-0.0, -3.5) should be Inf\", Double.isInfinite(FastMath.pow(-0.0, -3.5)));\n\n        Assert.assertTrue(\"pow(Inf, 3.5) should be Inf\", Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY, 3.5)));\n\n        Assert.assertEquals(\"pow(-2.0, 3.0) should be -8.0\", -8.0, FastMath.pow(-2.0, 3.0), Precision.EPSILON);\n\n        Assert.assertTrue(\"pow(-2.0, 3.5) should be NaN\", Double.isNaN(FastMath.pow(-2.0, 3.5)));\n\n        // Added tests for a 100% coverage\n\n        Assert.assertTrue(\"pow(+Inf, NaN) should be NaN\", Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));\n\n        Assert.assertTrue(\"pow(1.0, +Inf) should be NaN\", Double.isNaN(FastMath.pow(1.0, Double.POSITIVE_INFINITY)));\n\n        Assert.assertTrue(\"pow(-Inf, NaN) should be NaN\", Double.isNaN(FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN)));\n\n        Assert.assertEquals(\"pow(-Inf, -1.0) should be 0.0\", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -1.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"pow(-Inf, -2.0) should be 0.0\", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -2.0), Precision.EPSILON);\n\n        Assert.assertTrue(\"pow(-Inf, 1.0) should be -Inf\", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 1.0)));\n\n        Assert.assertTrue(\"pow(-Inf, 2.0) should be +Inf\", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 2.0)));\n\n        Assert.assertTrue(\"pow(1.0, -Inf) should be NaN\", Double.isNaN(FastMath.pow(1.0, Double.NEGATIVE_INFINITY)));\n\n    }\n",
        "begin_line": 338,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 105)",
            "(line 343,col 9)-(line 343,col 107)",
            "(line 345,col 9)-(line 345,col 121)",
            "(line 347,col 9)-(line 347,col 125)",
            "(line 349,col 9)-(line 349,col 105)",
            "(line 351,col 9)-(line 351,col 105)",
            "(line 353,col 9)-(line 353,col 131)",
            "(line 355,col 9)-(line 355,col 132)",
            "(line 357,col 9)-(line 357,col 133)",
            "(line 359,col 9)-(line 359,col 134)",
            "(line 361,col 9)-(line 361,col 107)",
            "(line 363,col 9)-(line 363,col 135)",
            "(line 365,col 9)-(line 365,col 102)",
            "(line 367,col 9)-(line 367,col 121)",
            "(line 369,col 9)-(line 369,col 105)",
            "(line 371,col 9)-(line 371,col 124)",
            "(line 373,col 9)-(line 373,col 104)",
            "(line 375,col 9)-(line 375,col 121)",
            "(line 377,col 9)-(line 377,col 111)",
            "(line 379,col 9)-(line 379,col 97)",
            "(line 383,col 9)-(line 383,col 124)",
            "(line 385,col 9)-(line 385,col 117)",
            "(line 387,col 9)-(line 387,col 124)",
            "(line 389,col 9)-(line 389,col 131)",
            "(line 391,col 9)-(line 391,col 131)",
            "(line 393,col 9)-(line 393,col 123)",
            "(line 395,col 9)-(line 395,col 123)",
            "(line 397,col 9)-(line 397,col 117)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAtan2SpecialCases()",
        "snippet": "    @Test\n    public void testAtan2SpecialCases() {\n\n        Assert.assertTrue(\"atan2(NaN, 0.0) should be NaN\", Double.isNaN(FastMath.atan2(Double.NaN, 0.0)));\n\n        Assert.assertTrue(\"atan2(0.0, NaN) should be NaN\", Double.isNaN(FastMath.atan2(0.0, Double.NaN)));\n\n        Assert.assertEquals(\"atan2(0.0, 0.0) should be 0.0\", 0.0, FastMath.atan2(0.0, 0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.0, 0.001) should be 0.0\", 0.0, FastMath.atan2(0.0, 0.001), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.1, +Inf) should be 0.0\", 0.0, FastMath.atan2(0.1, Double.POSITIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-0.0, 0.0) should be -0.0\", -0.0, FastMath.atan2(-0.0, 0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-0.0, 0.001) should be -0.0\", -0.0, FastMath.atan2(-0.0, 0.001), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-0.0, +Inf) should be -0.0\", -0.0, FastMath.atan2(-0.1, Double.POSITIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.0, -0.0) should be PI\", FastMath.PI, FastMath.atan2(0.0, -0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.1, -Inf) should be PI\", FastMath.PI, FastMath.atan2(0.1, Double.NEGATIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-0.0, -0.0) should be -PI\", -FastMath.PI, FastMath.atan2(-0.0, -0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.1, -Inf) should be -PI\", -FastMath.PI, FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.1, 0.0) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(0.1, 0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(0.1, -0.0) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(0.1, -0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(Inf, 0.1) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, 0.1), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(Inf, -0.1) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, -0.1), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-0.1, 0.0) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(-0.1, 0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-0.1, -0.0) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(-0.1, -0.0), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-Inf, 0.1) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-Inf, -0.1) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(Inf, Inf) should be PI/4\", FastMath.PI / 4.0, FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY),\n                Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(Inf, -Inf) should be PI * 3/4\", FastMath.PI * 3.0 / 4.0,\n                FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-Inf, Inf) should be -PI/4\", -FastMath.PI / 4.0, FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY),\n                Precision.EPSILON);\n\n        Assert.assertEquals(\"atan2(-Inf, -Inf) should be -PI * 3/4\", - FastMath.PI * 3.0 / 4.0,\n                FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY), Precision.EPSILON);\n    }\n",
        "begin_line": 401,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 106)",
            "(line 406,col 9)-(line 406,col 106)",
            "(line 408,col 9)-(line 408,col 111)",
            "(line 410,col 9)-(line 410,col 115)",
            "(line 412,col 9)-(line 412,col 133)",
            "(line 414,col 9)-(line 414,col 115)",
            "(line 416,col 9)-(line 416,col 119)",
            "(line 418,col 9)-(line 418,col 137)",
            "(line 420,col 9)-(line 420,col 120)",
            "(line 422,col 9)-(line 422,col 140)",
            "(line 424,col 9)-(line 424,col 124)",
            "(line 426,col 9)-(line 426,col 143)",
            "(line 428,col 9)-(line 428,col 126)",
            "(line 430,col 9)-(line 430,col 128)",
            "(line 432,col 9)-(line 432,col 147)",
            "(line 434,col 9)-(line 434,col 149)",
            "(line 436,col 9)-(line 436,col 130)",
            "(line 438,col 9)-(line 438,col 132)",
            "(line 440,col 9)-(line 440,col 150)",
            "(line 442,col 9)-(line 442,col 152)",
            "(line 444,col 9)-(line 445,col 35)",
            "(line 447,col 9)-(line 448,col 103)",
            "(line 450,col 9)-(line 451,col 35)",
            "(line 453,col 9)-(line 454,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testPowAccuracy()",
        "snippet": "    @Test\n    public void testPowAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = (generator.nextDouble() * 2.0 + 0.25);\n            double y = (generator.nextDouble() * 1200.0 - 600.0) * generator.nextDouble();\n            /*\n             * double x = FastMath.floor(generator.nextDouble()*1024.0 - 512.0); double\n             * y; if (x != 0) y = FastMath.floor(512.0 / FastMath.abs(x)); else\n             * y = generator.nextDouble()*1200.0; y = y - y/2; x = FastMath.pow(2.0, x) *\n             * generator.nextDouble(); y = y * generator.nextDouble();\n             */\n\n            // double x = generator.nextDouble()*2.0;\n            double tst = FastMath.pow(x, y);\n            double ref = DfpMath.pow(field.newDfp(x), field.newDfp(y)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.pow(field.newDfp(x), field.newDfp(y))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + y + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"pow() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 457,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 31)",
            "(line 461,col 9)-(line 485,col 9)",
            "(line 487,col 9)-(line 487,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testExpAccuracy()",
        "snippet": "    @Test\n    public void testExpAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.exp(x);\n            double ref = DfpMath.exp(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"exp() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 490,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 31)",
            "(line 494,col 9)-(line 512,col 9)",
            "(line 514,col 9)-(line 514,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testSinAccuracy()",
        "snippet": "    @Test\n    public void testSinAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = ((generator.nextDouble() * Math.PI) - Math.PI / 2.0) *\n                       Math.pow(2, 21) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.sin(x);\n            double ref = DfpMath.sin(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.sin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"sin() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 517,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 519,col 9)-(line 519,col 31)",
            "(line 521,col 9)-(line 541,col 9)",
            "(line 543,col 9)-(line 543,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testCosAccuracy()",
        "snippet": "    @Test\n    public void testCosAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = ((generator.nextDouble() * Math.PI) - Math.PI / 2.0) *\n                       Math.pow(2, 21) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.cos(x);\n            double ref = DfpMath.cos(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.cos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"cos() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 546,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 31)",
            "(line 550,col 9)-(line 570,col 9)",
            "(line 572,col 9)-(line 572,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testTanAccuracy()",
        "snippet": "    @Test\n    public void testTanAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = ((generator.nextDouble() * Math.PI) - Math.PI / 2.0) *\n                       Math.pow(2, 12) * generator.nextDouble();\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.tan(x);\n            double ref = DfpMath.tan(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.tan(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"tan() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 575,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 577,col 9)-(line 577,col 31)",
            "(line 579,col 9)-(line 599,col 9)",
            "(line 601,col 9)-(line 601,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAtanAccuracy()",
        "snippet": "    @Test\n    public void testAtanAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            // double x = ((generator.nextDouble() * Math.PI) - Math.PI/2.0) *\n            // generator.nextDouble();\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.atan(x);\n            double ref = DfpMath.atan(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.atan(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"atan() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 604,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 606,col 9)-(line 606,col 31)",
            "(line 608,col 9)-(line 630,col 9)",
            "(line 632,col 9)-(line 632,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAtan2Accuracy()",
        "snippet": "    @Test\n    public void testAtan2Accuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();\n            double x = generator.nextDouble() - 0.5;\n            double y = generator.nextDouble() - 0.5;\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            // double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.atan2(y, x);\n            Dfp refdfp = DfpMath.atan(field.newDfp(y)\n                .divide(field.newDfp(x)));\n            /* Make adjustments for sign */\n            if (x < 0.0) {\n                if (y > 0.0)\n                    refdfp = field.getPi().add(refdfp);\n                else\n                    refdfp = refdfp.subtract(field.getPi());\n            }\n\n            double ref = refdfp.toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(refdfp).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + y + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"atan2() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 635,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 31)",
            "(line 639,col 9)-(line 670,col 9)",
            "(line 672,col 9)-(line 672,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testExpm1Accuracy()",
        "snippet": "    @Test\n    public void testExpm1Accuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            /* double x = 1.0 + i/1024.0/2.0; */\n            // double x = (generator.nextDouble() * 20.0) - 10.0;\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n            /* double x = 3.0 / 512.0 * i - 3.0; */\n            double tst = FastMath.expm1(x);\n            double ref = DfpMath.exp(field.newDfp(x)).subtract(field.getOne()).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"expm1() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 675,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 677,col 9)-(line 677,col 31)",
            "(line 679,col 9)-(line 697,col 9)",
            "(line 699,col 9)-(line 699,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAsinAccuracy()",
        "snippet": "    @Test\n    public void testAsinAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n\n            double tst = FastMath.asin(x);\n            double ref = DfpMath.asin(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.asin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"asin() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 702,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 704,col 9)-(line 704,col 31)",
            "(line 706,col 9)-(line 720,col 9)",
            "(line 722,col 9)-(line 722,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAcosAccuracy()",
        "snippet": "    @Test\n    public void testAcosAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();\n\n            double tst = FastMath.acos(x);\n            double ref = DfpMath.acos(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.acos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"acos() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 725,
        "end_line": 746,
        "comment": "",
        "child_ranges": [
            "(line 727,col 9)-(line 727,col 31)",
            "(line 729,col 9)-(line 743,col 9)",
            "(line 745,col 9)-(line 745,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAcosSpecialCases()",
        "snippet": "    @Test\n    public void testAcosSpecialCases() {\n        \n        Assert.assertTrue(\"acos(NaN) should be NaN\", Double.isNaN(FastMath.acos(Double.NaN)));\n        \n        Assert.assertTrue(\"acos(-1.1) should be NaN\", Double.isNaN(FastMath.acos(-1.1)));\n\n        Assert.assertTrue(\"acos(-1.1) should be NaN\", Double.isNaN(FastMath.acos(1.1)));\n        \n        Assert.assertEquals(\"acos(-1.0) should be PI\", FastMath.acos(-1.0), FastMath.PI, Precision.EPSILON);\n\n        Assert.assertEquals(\"acos(1.0) should be 0.0\", FastMath.acos(1.0), 0.0, Precision.EPSILON);\n\n        Assert.assertEquals(\"acos(0.0) should be PI/2\", FastMath.acos(0.0), FastMath.PI / 2.0, Precision.EPSILON);\n    }\n",
        "begin_line": 751,
        "end_line": 765,
        "comment": "\n     * Added tests for a 100% coverage of acos().\n     ",
        "child_ranges": [
            "(line 754,col 9)-(line 754,col 94)",
            "(line 756,col 9)-(line 756,col 89)",
            "(line 758,col 9)-(line 758,col 88)",
            "(line 760,col 9)-(line 760,col 108)",
            "(line 762,col 9)-(line 762,col 99)",
            "(line 764,col 9)-(line 764,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testAsinSpecialCases()",
        "snippet": "    @Test\n    public void testAsinSpecialCases() {\n   \n        Assert.assertTrue(\"asin(NaN) should be NaN\", Double.isNaN(FastMath.asin(Double.NaN)));\n        \n        Assert.assertTrue(\"asin(1.1) should be NaN\", Double.isNaN(FastMath.asin(1.1)));\n        \n        Assert.assertTrue(\"asin(-1.1) should be NaN\", Double.isNaN(FastMath.asin(-1.1)));\n        \n        Assert.assertEquals(\"asin(1.0) should be PI/2\", FastMath.asin(1.0), FastMath.PI / 2.0, Precision.EPSILON);\n\n        Assert.assertEquals(\"asin(-1.0) should be -PI/2\", FastMath.asin(-1.0), -FastMath.PI / 2.0, Precision.EPSILON);\n\n        Assert.assertEquals(\"asin(0.0) should be 0.0\", FastMath.asin(0.0), 0.0, Precision.EPSILON);\n    }\n",
        "begin_line": 770,
        "end_line": 784,
        "comment": "\n     * Added tests for a 100% coverage of asin().\n     ",
        "child_ranges": [
            "(line 773,col 9)-(line 773,col 94)",
            "(line 775,col 9)-(line 775,col 87)",
            "(line 777,col 9)-(line 777,col 89)",
            "(line 779,col 9)-(line 779,col 114)",
            "(line 781,col 9)-(line 781,col 118)",
            "(line 783,col 9)-(line 783,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.cosh(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    private Dfp cosh(Dfp x) {\n      return DfpMath.exp(x).add(DfpMath.exp(x.negate())).divide(2);\n    }\n",
        "begin_line": 786,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 787,col 7)-(line 787,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.sinh(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    private Dfp sinh(Dfp x) {\n      return DfpMath.exp(x).subtract(DfpMath.exp(x.negate())).divide(2);\n    }\n",
        "begin_line": 790,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 791,col 7)-(line 791,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.tanh(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    private Dfp tanh(Dfp x) {\n      return sinh(x).divide(cosh(x));\n    }\n",
        "begin_line": 794,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 795,col 7)-(line 795,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testSinhAccuracy()",
        "snippet": "    @Test\n    public void testSinhAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n\n            double tst = FastMath.sinh(x);\n            double ref = sinh(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(sinh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"sinh() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 798,
        "end_line": 818,
        "comment": "",
        "child_ranges": [
            "(line 800,col 9)-(line 800,col 31)",
            "(line 802,col 9)-(line 815,col 9)",
            "(line 817,col 9)-(line 817,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testCoshAccuracy()",
        "snippet": "    @Test\n    public void testCoshAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n\n            double tst = FastMath.cosh(x);\n            double ref = cosh(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(cosh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"cosh() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 820,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 822,col 9)-(line 822,col 31)",
            "(line 824,col 9)-(line 837,col 9)",
            "(line 839,col 9)-(line 839,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testTanhAccuracy()",
        "snippet": "    @Test\n    public void testTanhAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 16.0) - 8.0) * generator.nextDouble();\n\n            double tst = FastMath.tanh(x);\n            double ref = tanh(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(tanh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"tanh() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 842,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 844,col 9)-(line 844,col 31)",
            "(line 846,col 9)-(line 859,col 9)",
            "(line 861,col 9)-(line 861,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testCbrtAccuracy()",
        "snippet": "    @Test\n    public void testCbrtAccuracy() {\n        double maxerrulp = 0.0;\n\n        for (int i=0; i<10000; i++) {\n            double x = ((generator.nextDouble() * 200.0) - 100.0) * generator.nextDouble();\n\n            double tst = FastMath.cbrt(x);\n            double ref = cbrt(field.newDfp(x)).toDouble();\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(cbrt(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n\n        Assert.assertTrue(\"cbrt() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n    }\n",
        "begin_line": 864,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 866,col 9)-(line 866,col 31)",
            "(line 868,col 9)-(line 881,col 9)",
            "(line 883,col 9)-(line 883,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.cbrt(org.apache.commons.math3.dfp.Dfp)",
        "snippet": "    private Dfp cbrt(Dfp x) {\n      boolean negative=false;\n\n      if (x.lessThan(field.getZero())) {\n          negative = true;\n          x = x.negate();\n      }\n\n      Dfp y = DfpMath.pow(x, field.getOne().divide(3));\n\n      if (negative) {\n          y = y.negate();\n      }\n\n      return y;\n    }\n",
        "begin_line": 886,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 887,col 7)-(line 887,col 29)",
            "(line 889,col 7)-(line 892,col 7)",
            "(line 894,col 7)-(line 894,col 55)",
            "(line 896,col 7)-(line 898,col 7)",
            "(line 900,col 7)-(line 900,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testToDegrees()",
        "snippet": "    @Test\n    public void testToDegrees() {\n        double maxerrulp = 0.0;\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = generator.nextDouble();\n            double tst = field.newDfp(x).multiply(180).divide(field.getPi()).toDouble();\n            double ref = FastMath.toDegrees(x);\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n        Assert.assertTrue(\"toDegrees() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n\n    }\n",
        "begin_line": 903,
        "end_line": 923,
        "comment": "",
        "child_ranges": [
            "(line 905,col 9)-(line 905,col 31)",
            "(line 906,col 9)-(line 920,col 9)",
            "(line 921,col 9)-(line 921,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testToRadians()",
        "snippet": "    @Test\n    public void testToRadians() {\n        double maxerrulp = 0.0;\n        for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n            double x = generator.nextDouble();\n            double tst = field.newDfp(x).multiply(field.getPi()).divide(180).toDouble();\n            double ref = FastMath.toRadians(x);\n            double err = (tst - ref) / ref;\n\n            if (err != 0) {\n                double ulp = Math.abs(ref -\n                                      Double.longBitsToDouble((Double\n                                          .doubleToLongBits(ref) ^ 1)));\n                double errulp = field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();\n//                System.out.println(x + \"\\t\" + tst + \"\\t\" + ref + \"\\t\" + err + \"\\t\" + errulp);\n\n                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n            }\n        }\n        Assert.assertTrue(\"toRadians() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n\n    }\n",
        "begin_line": 925,
        "end_line": 946,
        "comment": "",
        "child_ranges": [
            "(line 927,col 9)-(line 927,col 31)",
            "(line 928,col 9)-(line 943,col 9)",
            "(line 944,col 9)-(line 944,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testNextAfter()",
        "snippet": "    @Test\n    public void testNextAfter() {\n        // 0x402fffffffffffff 0x404123456789abcd -> 4030000000000000\n        Assert.assertEquals(16.0, FastMath.nextAfter(15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0xc02fffffffffffff 0x404123456789abcd -> c02ffffffffffffe\n        Assert.assertEquals(-15.999999999999996, FastMath.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0x402fffffffffffff 0x400123456789abcd -> 402ffffffffffffe\n        Assert.assertEquals(15.999999999999996, FastMath.nextAfter(15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0xc02fffffffffffff 0x400123456789abcd -> c02ffffffffffffe\n        Assert.assertEquals(-15.999999999999996, FastMath.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0x4020000000000000 0x404123456789abcd -> 4020000000000001\n        Assert.assertEquals(8.000000000000002, FastMath.nextAfter(8.0, 34.27555555555555), 0.0);\n\n        // 0xc020000000000000 0x404123456789abcd -> c01fffffffffffff\n        Assert.assertEquals(-7.999999999999999, FastMath.nextAfter(-8.0, 34.27555555555555), 0.0);\n\n        // 0x4020000000000000 0x400123456789abcd -> 401fffffffffffff\n        Assert.assertEquals(7.999999999999999, FastMath.nextAfter(8.0, 2.142222222222222), 0.0);\n\n        // 0xc020000000000000 0x400123456789abcd -> c01fffffffffffff\n        Assert.assertEquals(-7.999999999999999, FastMath.nextAfter(-8.0, 2.142222222222222), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a224 -> 3f2e43753d36a224\n        Assert.assertEquals(2.308922399667661E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a223 -> 3f2e43753d36a223\n        Assert.assertEquals(2.3089223996676606E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a222 -> 3f2e43753d36a222\n        Assert.assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a224 -> 3f2e43753d36a222\n        Assert.assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a223 -> 3f2e43753d36a222\n        Assert.assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a222 -> 3f2e43753d36a222\n        Assert.assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a224 -> bf2e43753d36a222\n        Assert.assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a223 -> bf2e43753d36a222\n        Assert.assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a222 -> bf2e43753d36a222\n        Assert.assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a224 -> bf2e43753d36a224\n        Assert.assertEquals(-2.308922399667661E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a223 -> bf2e43753d36a223\n        Assert.assertEquals(-2.3089223996676606E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a222 -> bf2e43753d36a222\n        Assert.assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n    }\n",
        "begin_line": 948,
        "end_line": 1010,
        "comment": "",
        "child_ranges": [
            "(line 951,col 9)-(line 951,col 98)",
            "(line 954,col 9)-(line 954,col 114)",
            "(line 957,col 9)-(line 957,col 112)",
            "(line 960,col 9)-(line 960,col 114)",
            "(line 963,col 9)-(line 963,col 96)",
            "(line 966,col 9)-(line 966,col 98)",
            "(line 969,col 9)-(line 969,col 96)",
            "(line 972,col 9)-(line 972,col 98)",
            "(line 975,col 9)-(line 975,col 120)",
            "(line 978,col 9)-(line 978,col 122)",
            "(line 981,col 9)-(line 981,col 122)",
            "(line 984,col 9)-(line 984,col 122)",
            "(line 987,col 9)-(line 987,col 123)",
            "(line 990,col 9)-(line 990,col 123)",
            "(line 993,col 9)-(line 993,col 123)",
            "(line 996,col 9)-(line 996,col 124)",
            "(line 999,col 9)-(line 999,col 124)",
            "(line 1002,col 9)-(line 1002,col 123)",
            "(line 1005,col 9)-(line 1005,col 125)",
            "(line 1008,col 9)-(line 1008,col 125)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testDoubleNextAfterSpecialCases()",
        "snippet": "    @Test\n    public void testDoubleNextAfterSpecialCases() {\n        Assert.assertEquals(-Double.MAX_VALUE,FastMath.nextAfter(Double.NEGATIVE_INFINITY, 0D), 0D);\n        Assert.assertEquals(Double.MAX_VALUE,FastMath.nextAfter(Double.POSITIVE_INFINITY, 0D), 0D);\n        Assert.assertEquals(Double.NaN,FastMath.nextAfter(Double.NaN, 0D), 0D);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY), 0D);\n        Assert.assertEquals(Double.MIN_VALUE, FastMath.nextAfter(0D, 1D), 0D);\n        Assert.assertEquals(-Double.MIN_VALUE, FastMath.nextAfter(0D, -1D), 0D);\n        Assert.assertEquals(0D, FastMath.nextAfter(Double.MIN_VALUE, -1), 0D);\n        Assert.assertEquals(0D, FastMath.nextAfter(-Double.MIN_VALUE, 1), 0D);\n    }\n",
        "begin_line": 1012,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 9)-(line 1014,col 100)",
            "(line 1015,col 9)-(line 1015,col 99)",
            "(line 1016,col 9)-(line 1016,col 79)",
            "(line 1017,col 9)-(line 1017,col 121)",
            "(line 1018,col 9)-(line 1018,col 122)",
            "(line 1019,col 9)-(line 1019,col 78)",
            "(line 1020,col 9)-(line 1020,col 80)",
            "(line 1021,col 9)-(line 1021,col 78)",
            "(line 1022,col 9)-(line 1022,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testFloatNextAfterSpecialCases()",
        "snippet": "    @Test\n    public void testFloatNextAfterSpecialCases() {\n        Assert.assertEquals(-Float.MAX_VALUE,FastMath.nextAfter(Float.NEGATIVE_INFINITY, 0F), 0F);\n        Assert.assertEquals(Float.MAX_VALUE,FastMath.nextAfter(Float.POSITIVE_INFINITY, 0F), 0F);\n        Assert.assertEquals(Float.NaN,FastMath.nextAfter(Float.NaN, 0F), 0F);\n        Assert.assertEquals(Float.POSITIVE_INFINITY,FastMath.nextAfter(Float.MAX_VALUE, Float.POSITIVE_INFINITY), 0F);\n        Assert.assertEquals(Float.NEGATIVE_INFINITY,FastMath.nextAfter(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY), 0F);\n        Assert.assertEquals(Float.MIN_VALUE, FastMath.nextAfter(0F, 1F), 0F);\n        Assert.assertEquals(-Float.MIN_VALUE, FastMath.nextAfter(0F, -1F), 0F);\n        Assert.assertEquals(0F, FastMath.nextAfter(Float.MIN_VALUE, -1F), 0F);\n        Assert.assertEquals(0F, FastMath.nextAfter(-Float.MIN_VALUE, 1F), 0F);\n    }\n",
        "begin_line": 1025,
        "end_line": 1036,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 9)-(line 1027,col 98)",
            "(line 1028,col 9)-(line 1028,col 97)",
            "(line 1029,col 9)-(line 1029,col 77)",
            "(line 1030,col 9)-(line 1030,col 118)",
            "(line 1031,col 9)-(line 1031,col 119)",
            "(line 1032,col 9)-(line 1032,col 77)",
            "(line 1033,col 9)-(line 1033,col 79)",
            "(line 1034,col 9)-(line 1034,col 78)",
            "(line 1035,col 9)-(line 1035,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testDoubleScalbSpecialCases()",
        "snippet": "    @Test\n    public void testDoubleScalbSpecialCases() {\n        Assert.assertEquals(2.5269841324701218E-175,  FastMath.scalb(2.2250738585072014E-308, 442), 0D);\n        Assert.assertEquals(1.307993905256674E297,    FastMath.scalb(1.1102230246251565E-16, 1040), 0D);\n        Assert.assertEquals(7.2520887996488946E-217,  FastMath.scalb(Double.MIN_VALUE,        356), 0D);\n        Assert.assertEquals(8.98846567431158E307,     FastMath.scalb(Double.MIN_VALUE,       2097), 0D);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb(Double.MIN_VALUE,       2098), 0D);\n        Assert.assertEquals(1.1125369292536007E-308,  FastMath.scalb(2.225073858507201E-308,   -1), 0D);\n        Assert.assertEquals(1.0E-323,                 FastMath.scalb(Double.MAX_VALUE,      -2097), 0D);\n        Assert.assertEquals(Double.MIN_VALUE,         FastMath.scalb(Double.MAX_VALUE,      -2098), 0D);\n        Assert.assertEquals(0,                        FastMath.scalb(Double.MAX_VALUE,      -2099), 0D);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb(Double.POSITIVE_INFINITY, -1000000), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.1102230246251565E-16, 1078), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.1102230246251565E-16,  1079), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-2.2250738585072014E-308, 2047), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-2.2250738585072014E-308, 2048), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.7976931348623157E308,  2147483647), 0D);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb( 1.7976931348623157E308,  2147483647), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.1102230246251565E-16,  2147483647), 0D);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb( 1.1102230246251565E-16,  2147483647), 0D);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-2.2250738585072014E-308, 2147483647), 0D);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb( 2.2250738585072014E-308, 2147483647), 0D);\n    }\n",
        "begin_line": 1038,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1040,col 9)-(line 1040,col 104)",
            "(line 1041,col 9)-(line 1041,col 104)",
            "(line 1042,col 9)-(line 1042,col 104)",
            "(line 1043,col 9)-(line 1043,col 104)",
            "(line 1044,col 9)-(line 1044,col 104)",
            "(line 1045,col 9)-(line 1045,col 104)",
            "(line 1046,col 9)-(line 1046,col 104)",
            "(line 1047,col 9)-(line 1047,col 104)",
            "(line 1048,col 9)-(line 1048,col 104)",
            "(line 1049,col 9)-(line 1049,col 110)",
            "(line 1050,col 9)-(line 1050,col 105)",
            "(line 1051,col 9)-(line 1051,col 106)",
            "(line 1052,col 9)-(line 1052,col 106)",
            "(line 1053,col 9)-(line 1053,col 106)",
            "(line 1054,col 9)-(line 1054,col 112)",
            "(line 1055,col 9)-(line 1055,col 112)",
            "(line 1056,col 9)-(line 1056,col 112)",
            "(line 1057,col 9)-(line 1057,col 112)",
            "(line 1058,col 9)-(line 1058,col 112)",
            "(line 1059,col 9)-(line 1059,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testFloatScalbSpecialCases()",
        "snippet": "    @Test\n    public void testFloatScalbSpecialCases() {\n        Assert.assertEquals(0f,                       FastMath.scalb(Float.MIN_VALUE,  -30), 0F);\n        Assert.assertEquals(2 * Float.MIN_VALUE,      FastMath.scalb(Float.MIN_VALUE,    1), 0F);\n        Assert.assertEquals(7.555786e22f,             FastMath.scalb(Float.MAX_VALUE,  -52), 0F);\n        Assert.assertEquals(1.7014118e38f,            FastMath.scalb(Float.MIN_VALUE,  276), 0F);\n        Assert.assertEquals(Float.POSITIVE_INFINITY,  FastMath.scalb(Float.MIN_VALUE,  277), 0F);\n        Assert.assertEquals(5.8774718e-39f,           FastMath.scalb(1.1754944e-38f,    -1), 0F);\n        Assert.assertEquals(2 * Float.MIN_VALUE,      FastMath.scalb(Float.MAX_VALUE, -276), 0F);\n        Assert.assertEquals(Float.MIN_VALUE,          FastMath.scalb(Float.MAX_VALUE, -277), 0F);\n        Assert.assertEquals(0,                        FastMath.scalb(Float.MAX_VALUE, -278), 0F);\n        Assert.assertEquals(Float.POSITIVE_INFINITY,  FastMath.scalb(Float.POSITIVE_INFINITY, -1000000), 0F);\n        Assert.assertEquals(-3.13994498e38f,          FastMath.scalb(-1.1e-7f,         151), 0F);\n        Assert.assertEquals(Float.NEGATIVE_INFINITY,  FastMath.scalb(-1.1e-7f,         152), 0F);\n        Assert.assertEquals(Float.POSITIVE_INFINITY,  FastMath.scalb(3.4028235E38f,  2147483647), 0F);\n        Assert.assertEquals(Float.NEGATIVE_INFINITY,  FastMath.scalb(-3.4028235E38f, 2147483647), 0F);\n    }\n",
        "begin_line": 1062,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 9)-(line 1064,col 97)",
            "(line 1065,col 9)-(line 1065,col 97)",
            "(line 1066,col 9)-(line 1066,col 97)",
            "(line 1067,col 9)-(line 1067,col 97)",
            "(line 1068,col 9)-(line 1068,col 97)",
            "(line 1069,col 9)-(line 1069,col 97)",
            "(line 1070,col 9)-(line 1070,col 97)",
            "(line 1071,col 9)-(line 1071,col 97)",
            "(line 1072,col 9)-(line 1072,col 97)",
            "(line 1073,col 9)-(line 1073,col 109)",
            "(line 1074,col 9)-(line 1074,col 97)",
            "(line 1075,col 9)-(line 1075,col 97)",
            "(line 1076,col 9)-(line 1076,col 102)",
            "(line 1077,col 9)-(line 1077,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.compareClassMethods(java.lang.Class<?>, java.lang.Class<?>)",
        "snippet": "    private boolean compareClassMethods(Class<?> class1, Class<?> class2){\n        boolean allfound = true;\n        for(Method method1 : class1.getDeclaredMethods()){\n            if (Modifier.isPublic(method1.getModifiers())){\n                Type []params = method1.getGenericParameterTypes();\n                try {\n                    class2.getDeclaredMethod(method1.getName(), (Class[]) params);\n                } catch (NoSuchMethodException e) {\n                    allfound = false;\n                    System.out.println(class2.getSimpleName()+\" does not implement: \"+method1);\n                }\n            }\n        }\n        return allfound;\n    }\n",
        "begin_line": 1080,
        "end_line": 1094,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 9)-(line 1081,col 32)",
            "(line 1082,col 9)-(line 1092,col 9)",
            "(line 1093,col 9)-(line 1093,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses()",
        "snippet": "    @Test\n    public void checkMissingFastMathClasses() {}\n",
        "begin_line": 1096,
        "end_line": 1097,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.checkExtraFastMathClasses()",
        "snippet": "    @Ignore\n    @Test\n    public void checkExtraFastMathClasses() {\n        compareClassMethods( FastMath.class, StrictMath.class);\n    }\n",
        "begin_line": 1105,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 9)-(line 1108,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testSignumDouble()",
        "snippet": "    @Test\n    public void testSignumDouble() {\n        final double delta = 0.0;\n        Assert.assertEquals(1.0, FastMath.signum(2.0), delta);\n        Assert.assertEquals(0.0, FastMath.signum(0.0), delta);\n        Assert.assertEquals(-1.0, FastMath.signum(-2.0), delta);\n        TestUtils.assertSame(-0. / 0., FastMath.signum(Double.NaN));\n    }\n",
        "begin_line": 1111,
        "end_line": 1118,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 9)-(line 1113,col 33)",
            "(line 1114,col 9)-(line 1114,col 62)",
            "(line 1115,col 9)-(line 1115,col 62)",
            "(line 1116,col 9)-(line 1116,col 64)",
            "(line 1117,col 9)-(line 1117,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testSignumFloat()",
        "snippet": "    @Test\n    public void testSignumFloat() {\n        final float delta = 0.0F;\n        Assert.assertEquals(1.0F, FastMath.signum(2.0F), delta);\n        Assert.assertEquals(0.0F, FastMath.signum(0.0F), delta);\n        Assert.assertEquals(-1.0F, FastMath.signum(-2.0F), delta);\n        TestUtils.assertSame(Float.NaN, FastMath.signum(Float.NaN));\n    }\n",
        "begin_line": 1120,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 9)-(line 1122,col 33)",
            "(line 1123,col 9)-(line 1123,col 64)",
            "(line 1124,col 9)-(line 1124,col 64)",
            "(line 1125,col 9)-(line 1125,col 66)",
            "(line 1126,col 9)-(line 1126,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testLogWithBase()",
        "snippet": "    @Test\n    public void testLogWithBase() {\n        Assert.assertEquals(2.0, FastMath.log(2, 4), 0);\n        Assert.assertEquals(3.0, FastMath.log(2, 8), 0);\n        Assert.assertTrue(Double.isNaN(FastMath.log(-1, 1)));\n        Assert.assertTrue(Double.isNaN(FastMath.log(1, -1)));\n        Assert.assertTrue(Double.isNaN(FastMath.log(0, 0)));\n        Assert.assertEquals(0, FastMath.log(0, 10), 0);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.log(10, 0), 0);\n    }\n",
        "begin_line": 1129,
        "end_line": 1138,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 9)-(line 1131,col 56)",
            "(line 1132,col 9)-(line 1132,col 56)",
            "(line 1133,col 9)-(line 1133,col 61)",
            "(line 1134,col 9)-(line 1134,col 61)",
            "(line 1135,col 9)-(line 1135,col 60)",
            "(line 1136,col 9)-(line 1136,col 55)",
            "(line 1137,col 9)-(line 1137,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testIndicatorDouble()",
        "snippet": "    @Test\n    public void testIndicatorDouble() {\n        double delta = 0.0;\n        Assert.assertEquals(1.0, FastMath.copySign(1d, 2.0), delta);\n        Assert.assertEquals(1.0, FastMath.copySign(1d, 0.0), delta);\n        Assert.assertEquals(-1.0, FastMath.copySign(1d, -2.0), delta);\n    }\n",
        "begin_line": 1140,
        "end_line": 1146,
        "comment": "",
        "child_ranges": [
            "(line 1142,col 9)-(line 1142,col 27)",
            "(line 1143,col 9)-(line 1143,col 68)",
            "(line 1144,col 9)-(line 1144,col 68)",
            "(line 1145,col 9)-(line 1145,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testIndicatorFloat()",
        "snippet": "    @Test\n    public void testIndicatorFloat() {\n        float delta = 0.0F;\n        Assert.assertEquals(1.0F, FastMath.copySign(1d, 2.0F), delta);\n        Assert.assertEquals(1.0F, FastMath.copySign(1d, 0.0F), delta);\n        Assert.assertEquals(-1.0F, FastMath.copySign(1d, -2.0F), delta);\n    }\n",
        "begin_line": 1148,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1150,col 9)-(line 1150,col 27)",
            "(line 1151,col 9)-(line 1151,col 70)",
            "(line 1152,col 9)-(line 1152,col 70)",
            "(line 1153,col 9)-(line 1153,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.FastMathTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/FastMathTest.java",
        "signature": "org.apache.commons.math3.util.FastMathTest.testIntPow()",
        "snippet": "    @Test\n    public void testIntPow() {\n        final int maxExp = 300;\n        DfpField field = new DfpField(40);\n        final double base = 1.23456789;\n        Dfp baseDfp = field.newDfp(base);\n        Dfp dfpPower = field.getOne();\n        for (int i = 0; i < maxExp; i++) {\n            Assert.assertEquals(\"exp=\" + i, dfpPower.toDouble(), FastMath.pow(base, i),\n                                0.6 * FastMath.ulp(dfpPower.toDouble()));\n            dfpPower = dfpPower.multiply(baseDfp);\n        }\n    }\n",
        "begin_line": 1156,
        "end_line": 1168,
        "comment": "",
        "child_ranges": [
            "(line 1158,col 9)-(line 1158,col 31)",
            "(line 1159,col 9)-(line 1159,col 42)",
            "(line 1160,col 9)-(line 1160,col 39)",
            "(line 1161,col 9)-(line 1161,col 41)",
            "(line 1162,col 9)-(line 1162,col 38)",
            "(line 1163,col 9)-(line 1167,col 9)"
        ]
    }
]