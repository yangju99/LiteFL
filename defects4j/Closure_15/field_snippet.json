[
    {
        "class_name": "com.google.javascript.jscomp.Proxy",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.Proxy.nextConvention",
        "snippet": "    protected final CodingConvention nextConvention;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LENGTH",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INPUT_ID",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SLASH_V",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 112,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 112,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 194,
        "end_line": 194,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 258,
        "end_line": 258,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.next",
        "snippet": "    private final PropListItem next;",
        "begin_line": 274,
        "end_line": 274,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.propType",
        "snippet": "    private final int propType;",
        "begin_line": 275,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 299,
        "end_line": 299,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.objectValue",
        "snippet": "    private final Object objectValue;",
        "begin_line": 301,
        "end_line": 301,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 331,
        "end_line": 331,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 333,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1042,
        "end_line": 1042,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1043,
        "end_line": 1043,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1044,
        "end_line": 1044,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1045,
        "end_line": 1045,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1053,
        "end_line": 1053,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1063,
        "end_line": 1063,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1070,
        "end_line": 1070,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1077,
        "end_line": 1077,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1085,
        "end_line": 1085,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1087,
        "end_line": 1087,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1089,
        "end_line": 1089,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1267,
        "end_line": 1267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1268,
        "end_line": 1268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1269,
        "end_line": 1269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1352,
        "end_line": 1352,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 1986,
        "end_line": 1986,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  final public static int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 1987,
        "end_line": 1987,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 1988,
        "end_line": 1988,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  final public static int FLAG_NO_THROWS = 8;",
        "begin_line": 1989,
        "end_line": 1989,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  final public static int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 1990,
        "end_line": 1990,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 1992,
        "end_line": 1992,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  final public static int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 1994,
        "end_line": 1994,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  final public static int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 1995,
        "end_line": 1999,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2031,
        "end_line": 2031,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2144,
        "end_line": 2144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2145,
        "end_line": 2145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.inTemplatedCheckVisit",
        "snippet": "  private boolean inTemplatedCheckVisit = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 75,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 78,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 81,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 84,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 92,
        "end_line": 97,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1196,
        "end_line": 1196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1197,
        "end_line": 1197,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",
        "snippet": "  static final String SINGLETON_MODULE_NAME = \"[singleton]\";",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 81,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",
        "snippet": "  static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
        "begin_line": 86,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",
        "snippet": "  private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 90,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options",
        "snippet": "  CompilerOptions options = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs",
        "snippet": "  private List<CompilerInput> externs;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph",
        "snippet": "  private JSModuleGraph moduleGraph;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " 2 modules, because we use this as a signal for which passes to run."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs",
        "snippet": "  private List<CompilerInput> inputs;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.warningsGuard",
        "snippet": "  private WarningsGuard warningsGuard;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Warnings guard for filtering warnings."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.injectedLibraries",
        "snippet": "  private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();",
        "begin_line": 118,
        "end_line": 118,
        "comment": " the library, so code can be inserted after."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsById",
        "snippet": "  private Map<InputId, CompilerInput> inputsById;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap",
        "snippet": "  private SourceMap sourceMap;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports",
        "snippet": "  private String externExports = null;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 137,
        "end_line": 137,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences",
        "snippet": "  private boolean hasRegExpGlobalReferences = true;",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\n   * Whether to assume there are references to the RegExp Global object\n   * properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap",
        "snippet": "  private FunctionInformationMap functionInformationMap;",
        "begin_line": 149,
        "end_line": 149,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog",
        "snippet": "  private final StringBuilder debugLog = new StringBuilder();",
        "begin_line": 152,
        "end_line": 152,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
        "begin_line": 155,
        "end_line": 155,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 157,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.parserConfig",
        "snippet": "  private Config parserConfig = null;",
        "begin_line": 158,
        "end_line": 158,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private TypeValidator typeValidator;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 166,
        "end_line": 167,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 170,
        "end_line": 171,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 174,
        "end_line": 176,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 177,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = 1048576L;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 189,
        "end_line": 190,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.outStream",
        "snippet": "  private final PrintStream outStream;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.globalRefMap",
        "snippet": "  private GlobalVarReferenceMap globalRefMap = null;",
        "begin_line": 194,
        "end_line": 194,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.progress",
        "snippet": "  private volatile double progress = 0.0;",
        "begin_line": 196,
        "end_line": 196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 401,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 405,
        "end_line": 407,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 476,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 478,
        "end_line": 480,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 813,
        "end_line": 819,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 875,
        "end_line": 875,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 876,
        "end_line": 876,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.syntheticCodeId",
        "snippet": "  private int syntheticCodeId = 0;",
        "begin_line": 1506,
        "end_line": 1506,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1775,
        "end_line": 1775,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1776,
        "end_line": 1776,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.colCount",
        "snippet": "    private int colCount = 0;",
        "begin_line": 1777,
        "end_line": 1777,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 1919,
        "end_line": 1920,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 1921,
        "end_line": 1922,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",
        "snippet": "  static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";",
        "begin_line": 1925,
        "end_line": 1925,
        "comment": " Name of the synthetic input that holds synthesized externs. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.synthesizedExternsInput",
        "snippet": "  private CompilerInput synthesizedExternsInput = null;",
        "begin_line": 1927,
        "end_line": 1927,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 2243,
        "end_line": 2243,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 2245,
        "end_line": 2245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 2246,
        "end_line": 2246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private List<CompilerInput> externs;",
        "begin_line": 2247,
        "end_line": 2247,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private List<CompilerInput> inputs;",
        "begin_line": 2248,
        "end_line": 2248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private List<JSModule> modules;",
        "begin_line": 2249,
        "end_line": 2249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 2250,
        "end_line": 2250,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 2251,
        "end_line": 2251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.lifeCycleStage",
        "snippet": "    private AbstractCompiler.LifeCycleStage lifeCycleStage;",
        "begin_line": 2252,
        "end_line": 2252,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.injectedLibraries",
        "snippet": "    private Map<String, Node> injectedLibraries;",
        "begin_line": 2253,
        "end_line": 2253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "signature": "com.google.javascript.jscomp.AstValidator.violationHandler",
        "snippet": "  private final ViolationHandler violationHandler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.first",
        "snippet": "    private final Annotatable first;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.second",
        "snippet": "    private final Annotation second;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphAnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.GraphAnnotationState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.nodeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> nodeAnnotationStack;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * Used by {@link #pushNodeAnnotations()} and {@link #popNodeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.edgeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> edgeAnnotationStack;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Used by {@link #pushEdgeAnnotations()} and {@link #popEdgeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.graph",
        "snippet": "    private Graph<N, E> graph;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.nodes",
        "snippet": "    private List<GraphNode<N, E>> nodes = Lists.newArrayList();",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ERROR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITXOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITAND",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQ",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.URSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ADD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SUB",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MUL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DIV",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MOD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NOT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITNOT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.POS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEG",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEW",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DELPROP",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETPROP",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETELEM",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CALL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NAME",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NUMBER",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NULL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THIS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FALSE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRUE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHEQ",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHNE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REGEXP",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THROW",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IN",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INSTANCEOF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ARRAYLIT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OBJECTLIT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRY",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PARAM_LIST",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COMMA",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITXOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITAND",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_LSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_RSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_URSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_ADD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_SUB",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MUL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_DIV",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MOD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.HOOK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.AND",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FUNCTION",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SWITCH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CASE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT_CASE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WHILE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DO",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BREAK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONTINUE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VAR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WITH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VOID",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EMPTY",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BLOCK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_RESULT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SCRIPT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETTER_DEF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETTER_DEF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONST",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEBUGGER",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL_NAME",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING_KEY",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ANNOTATION",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PIPE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STAR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.QMARK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELLIPSIS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BANG",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQUALS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LB",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLON",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 170,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 174,
        "end_line": 178,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 174,
        "end_line": 178,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LP",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 174,
        "end_line": 178,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 174,
        "end_line": 178,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.nodePredicate",
        "snippet": "  private final Predicate<N> nodePredicate;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.edgePredicate",
        "snippet": "  private final Predicate<DiGraphEdge<N, E>> edgePredicate;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.inclusive",
        "snippet": "  private final boolean inclusive;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.BACK_EDGE",
        "snippet": "  private static final Annotation BACK_EDGE = new Annotation() {};",
        "begin_line": 55,
        "end_line": 55,
        "comment": " A non-tree edge in the DFS that connects a node to one of its ancestors."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.VISITED_EDGE",
        "snippet": "  private static final Annotation VISITED_EDGE = new Annotation() {};",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.WHITE",
        "snippet": "  private static final Annotation WHITE = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Not yet visited."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.GRAY",
        "snippet": "  private static final Annotation GRAY = new Annotation() {};",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Being visited."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.BLACK",
        "snippet": "  private static final Annotation BLACK = new Annotation() {};",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Finished visiting."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.start",
        "snippet": "  private final DiGraphNode<N, E> start;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.end",
        "snippet": "  private final DiGraphNode<N, E> end;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.ownerFunction",
        "snippet": "  private FunctionType ownerFunction = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " to do this for multiple functions, then we'll have to create a new one."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.cfg",
        "snippet": "  private final ControlFlowGraph<N> cfg;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinOp",
        "snippet": "  final JoinOp<L> joinOp;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.orderedWorkSet",
        "snippet": "  protected final Set<DiGraphNode<N, Branch>> orderedWorkSet;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",
        "snippet": "  public static final int MAX_STEPS = 200000;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n   * Feel free to increase this to a reasonable number if you are finding that\n   * more and more passes need more than 200000 steps before finding a\n   * fixed-point. If you just have a special case, consider calling\n   * {@link #analyse(int)} instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.FlowState.in",
        "snippet": "    private L in;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.FlowState.out",
        "snippet": "    private L out;",
        "begin_line": 333,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MaxIterationsExceededException",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.MaxIterationsExceededException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 383,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BranchedFlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.BranchedFlowState.in",
        "snippet": "    private L in;",
        "begin_line": 487,
        "end_line": 487,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BranchedFlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.BranchedFlowState.out",
        "snippet": "    private List<L> out;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.suppressors",
        "snippet": "  private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n      Maps.newHashMap();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Warnings guards for each suppressible warnings group, indexed by name. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.MISSING_LINE_INFO",
        "snippet": "  static final DiagnosticType MISSING_LINE_INFO = DiagnosticType.error(\n      \"JSC_MISSING_LINE_INFO\",\n      \"No source location information associated with {0}.\\n\" +\n      \"Most likely a Node has been created with settings the source file \" +\n      \"and line/column location.  Usually this is done using \" +\n      \"Node.copyInformationFrom and supplying a Node from the source AST.\");",
        "begin_line": 30,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.requiresLineNumbers",
        "snippet": "  private boolean requiresLineNumbers = false;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED",
        "snippet": "  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.indirectlyDeclaredProperties",
        "snippet": "  private final Set<String> indirectlyDeclaredProperties;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.propertyTestFunctions",
        "snippet": "  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
        "begin_line": 311,
        "end_line": 314,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.manageClosureDependencies",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private boolean manageClosureDependencies = false;",
        "begin_line": 40,
        "end_line": 41,
        "comment": " Unused. For people using reflection to circumvent access control."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageIn",
        "snippet": "  private LanguageMode languageIn;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * The JavaScript language version accepted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageOut",
        "snippet": "  private LanguageMode languageOut;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n   * The JavaScript language version that should be produced.\n   * Currently, this is always the same as {@link #languageIn}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.acceptConstKeyword",
        "snippet": "  boolean acceptConstKeyword;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n   * Whether the compiler accepts the `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis",
        "snippet": "  private boolean assumeStrictThis;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n   * Whether the compiler should assume that a function's \"this\" value\n   * never needs coercion (for example in non-strict \"null\" or \"undefined\" will\n   * be coerced to the global \"this\" and primitives to objects).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypes",
        "snippet": "  boolean inferTypes;",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\n   * Even if checkTypes is disabled, clients might want to still infer types.\n   * This is mostly used when ideMode is enabled.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.dependencyOptions",
        "snippet": "  DependencyOptions dependencyOptions = new DependencyOptions();",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.messageBundle",
        "snippet": "  public transient MessageBundle messageBundle = null;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Transient so that clients don't have to implement Serializable."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 131,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  boolean tightenTypes;",
        "begin_line": 147,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportUnknownTypes",
        "snippet": "  CheckLevel reportUnknownTypes;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 195,
        "end_line": 195,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 202,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 216,
        "end_line": 216,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 229,
        "end_line": 229,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  boolean checkCaja;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " Checks that the syntactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extraAnnotationNames",
        "snippet": "  Set<String> extraAnnotationNames;",
        "begin_line": 243,
        "end_line": 243,
        "comment": "\n   * A set of extra annotation names which are accepted and silently ignored\n   * when encountered in a source file. Defaults to null which has the same\n   * effect as specifying an empty set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " Remove assignments to values that can not be referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " Inlines global functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " Inlines functions defined in local scopes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeClosuresOnlyCaptureReferences",
        "snippet": "  boolean assumeClosuresOnlyCaptureReferences;",
        "begin_line": 265,
        "end_line": 265,
        "comment": " More aggressive function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineProperties",
        "snippet": "  boolean inlineProperties;",
        "begin_line": 268,
        "end_line": 268,
        "comment": " Inlines properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 271,
        "end_line": 271,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 274,
        "end_line": 274,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " Move methods to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 280,
        "end_line": 280,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 283,
        "end_line": 283,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  boolean inlineLocalVariables;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 290,
        "end_line": 290,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 293,
        "end_line": 293,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 296,
        "end_line": 296,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 298,
        "end_line": 298,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 305,
        "end_line": 305,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 319,
        "end_line": 319,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedClassProperties",
        "snippet": "  public boolean removeUnusedClassProperties;",
        "begin_line": 322,
        "end_line": 322,
        "comment": " Removes unused member properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 325,
        "end_line": 325,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedLocalVars",
        "snippet": "  public boolean removeUnusedLocalVars;",
        "begin_line": 328,
        "end_line": 328,
        "comment": " Removes unused variables in local scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 331,
        "end_line": 331,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  String aliasableGlobals;",
        "begin_line": 333,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  String unaliasableGlobals;",
        "begin_line": 344,
        "end_line": 344,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 355,
        "end_line": 355,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.groupVariableDeclarations",
        "snippet": "  boolean groupVariableDeclarations;",
        "begin_line": 358,
        "end_line": 358,
        "comment": " Group multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 364,
        "end_line": 364,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 371,
        "end_line": 371,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 378,
        "end_line": 378,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 385,
        "end_line": 385,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 394,
        "end_line": 394,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 399,
        "end_line": 399,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeReturns",
        "snippet": "  public boolean optimizeReturns;",
        "begin_line": 404,
        "end_line": 404,
        "comment": "\n   * Remove unused return values.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeCalls",
        "snippet": "  public boolean optimizeCalls;",
        "begin_line": 409,
        "end_line": 409,
        "comment": "\n   * Remove unused parameters from call sites.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 414,
        "end_line": 414,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 417,
        "end_line": 417,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 424,
        "end_line": 424,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 427,
        "end_line": 427,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyAffinity",
        "snippet": "  boolean propertyAffinity;",
        "begin_line": 430,
        "end_line": 430,
        "comment": " Should we use affinity information when generating property names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 433,
        "end_line": 433,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 436,
        "end_line": 436,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shadowVariables",
        "snippet": "  boolean shadowVariables;",
        "begin_line": 439,
        "end_line": 439,
        "comment": " Should shadow variable names in outer scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 444,
        "end_line": 444,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 447,
        "end_line": 447,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefixNamespace",
        "snippet": "  public String renamePrefixNamespace;",
        "begin_line": 453,
        "end_line": 453,
        "comment": "\n   * Specifies the name of an object that will be used to store all non-extern\n   * globals.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 456,
        "end_line": 456,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 459,
        "end_line": 459,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseObjectLiterals",
        "snippet": "  boolean collapseObjectLiterals;",
        "begin_line": 462,
        "end_line": 462,
        "comment": " Split object literals into individual variables when possible. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 469,
        "end_line": 469,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 475,
        "end_line": 475,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 481,
        "end_line": 481,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  String debugFunctionSideEffectsPath;",
        "begin_line": 486,
        "end_line": 486,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 492,
        "end_line": 492,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 495,
        "end_line": 495,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 498,
        "end_line": 498,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMapSerialized",
        "snippet": "  public byte[] inputVariableMapSerialized;",
        "begin_line": 501,
        "end_line": 501,
        "comment": " Serialized input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMapSerialized",
        "snippet": "  public byte[] inputPropertyMapSerialized;",
        "begin_line": 504,
        "end_line": 504,
        "comment": " Serialized input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 507,
        "end_line": 507,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.specializeInitialModule",
        "snippet": "  boolean specializeInitialModule;",
        "begin_line": 509,
        "end_line": 509,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheck",
        "snippet": "  boolean runtimeTypeCheck;",
        "begin_line": 521,
        "end_line": 521,
        "comment": " Inserts run-time type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheckLogFunction",
        "snippet": "  String runtimeTypeCheckLogFunction;",
        "begin_line": 528,
        "end_line": 528,
        "comment": "\n   * A JS function to be used for logging run-time type assertion\n   * failures. It will be passed the warning as a string and the\n   * faulty expression as arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 531,
        "end_line": 531,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  boolean ignoreCajaProperties;",
        "begin_line": 533,
        "end_line": 533,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 540,
        "end_line": 540,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 545,
        "end_line": 545,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 548,
        "end_line": 548,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 551,
        "end_line": 551,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 554,
        "end_line": 554,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jqueryPass",
        "snippet": "  public boolean jqueryPass;",
        "begin_line": 557,
        "end_line": 557,
        "comment": " Processes jQuery aliases "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 560,
        "end_line": 560,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeClosureAsserts",
        "snippet": "  boolean removeClosureAsserts;",
        "begin_line": 563,
        "end_line": 563,
        "comment": " Remove goog.asserts calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 566,
        "end_line": 566,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 569,
        "end_line": 569,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 572,
        "end_line": 572,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 575,
        "end_line": 575,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 578,
        "end_line": 578,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 581,
        "end_line": 582,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 585,
        "end_line": 585,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 588,
        "end_line": 588,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakProcessing",
        "snippet": "  private TweakProcessing tweakProcessing;",
        "begin_line": 591,
        "end_line": 591,
        "comment": " What kind of processing to do for goog.tweak functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakReplacements",
        "snippet": "  private Map<String, Object> tweakReplacements;",
        "begin_line": 594,
        "end_line": 594,
        "comment": " Replacements for tweaks. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 597,
        "end_line": 597,
        "comment": " Move top-level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 600,
        "end_line": 600,
        "comment": " Instrumentation template to use with #recordFunctionInformation "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  String appNameStr;",
        "begin_line": 602,
        "end_line": 602,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 613,
        "end_line": 613,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 615,
        "end_line": 615,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 618,
        "end_line": 618,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 621,
        "end_line": 621,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceIdGenerators",
        "snippet": "  boolean replaceIdGenerators = true;  // true by default for legacy reasons.",
        "begin_line": 624,
        "end_line": 624,
        "comment": " true by default for legacy reasons."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  Set<String> idGenerators;",
        "begin_line": 627,
        "end_line": 627,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsFunctionDescriptions",
        "snippet": "  List<String> replaceStringsFunctionDescriptions;",
        "begin_line": 630,
        "end_line": 630,
        "comment": " Configuration strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsPlaceholderToken",
        "snippet": "  String replaceStringsPlaceholderToken;",
        "begin_line": 631,
        "end_line": 631,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsReservedStrings",
        "snippet": "  Set<String> replaceStringsReservedStrings;",
        "begin_line": 633,
        "end_line": 633,
        "comment": " A list of strings that should not be used as replacements"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyInvalidationErrors",
        "snippet": "  Map<String, CheckLevel> propertyInvalidationErrors;",
        "begin_line": 636,
        "end_line": 636,
        "comment": " List of properties that we report invalidation errors for. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.transformAMDToCJSModules",
        "snippet": "  boolean transformAMDToCJSModules = false;",
        "begin_line": 639,
        "end_line": 639,
        "comment": " Transform AMD to CommonJS modules. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processCommonJSModules",
        "snippet": "  boolean processCommonJSModules = false;",
        "begin_line": 642,
        "end_line": 642,
        "comment": " Rewrite CommonJS modules so that they can be concatenated together. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.commonJSModulePathPrefix",
        "snippet": "  String commonJSModulePathPrefix =\n      ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 645,
        "end_line": 646,
        "comment": " CommonJS module prefix. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 654,
        "end_line": 654,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 657,
        "end_line": 657,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferLineBreakAtEndOfFile",
        "snippet": "  public boolean preferLineBreakAtEndOfFile;",
        "begin_line": 660,
        "end_line": 660,
        "comment": " Prefer line breaks at end of file "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 663,
        "end_line": 663,
        "comment": " Prints a separator comment before each JS script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 666,
        "end_line": 666,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  String reportPath;",
        "begin_line": 668,
        "end_line": 668,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  TracerMode tracer;",
        "begin_line": 675,
        "end_line": 675,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 685,
        "end_line": 685,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 687,
        "end_line": 687,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private ComposeWarningsGuard warningsGuard = new ComposeWarningsGuard();",
        "begin_line": 689,
        "end_line": 689,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.summaryDetailLevel",
        "snippet": "  int summaryDetailLevel = 1;",
        "begin_line": 691,
        "end_line": 691,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineLengthThreshold",
        "snippet": "  int lineLengthThreshold = CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 693,
        "end_line": 693,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExports",
        "snippet": "  private boolean externExports;",
        "begin_line": 703,
        "end_line": 703,
        "comment": "\n   * Whether the exports should be made available via {@link Result} after\n   * compilation. This is implicitly true if {@link #externExportsPath} is set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 706,
        "end_line": 706,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  String nameReferenceReportPath;",
        "begin_line": 708,
        "end_line": 708,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  String nameReferenceGraphPath;",
        "begin_line": 715,
        "end_line": 715,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 727,
        "end_line": 727,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapDetailLevel",
        "snippet": "  public SourceMap.DetailLevel sourceMapDetailLevel =\n      SourceMap.DetailLevel.SYMBOLS;",
        "begin_line": 730,
        "end_line": 731,
        "comment": " The detail level for the generated source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapFormat",
        "snippet": "  public SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 734,
        "end_line": 735,
        "comment": " The source map file format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapLocationMappings",
        "snippet": "  public List<SourceMap.LocationMapping> sourceMapLocationMappings =\n      Collections.emptyList();",
        "begin_line": 737,
        "end_line": 738,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  String outputCharset;",
        "begin_line": 744,
        "end_line": 744,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   * This needs to be a string because CompilerOptions is serializable.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.looseTypes",
        "snippet": "  boolean looseTypes;",
        "begin_line": 749,
        "end_line": 749,
        "comment": "\n   * Whether the named objects types included 'undefined' by default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.protectHiddenSideEffects",
        "snippet": "  boolean protectHiddenSideEffects;",
        "begin_line": 754,
        "end_line": 754,
        "comment": "\n   * When set, assume that apparently side-effect free code is meaningful.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasHandler",
        "snippet": "  private transient AliasTransformationHandler aliasHandler;",
        "begin_line": 766,
        "end_line": 766,
        "comment": "\n   * Data holder Alias Transformation information accumulated during a compile.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorHandler",
        "snippet": "  transient ErrorHandler errorHandler;",
        "begin_line": 771,
        "end_line": 771,
        "comment": "\n   * Handler for compiler warnings and errors.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER",
        "snippet": "  static final AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER =\n      new NullAliasTransformationHandler();",
        "begin_line": 2053,
        "end_line": 2054,
        "comment": "\n   * A Null implementation of the CodeChanges interface which performs all\n   * operations as a No-Op\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 2058,
        "end_line": 2058,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.NULL_ALIAS_TRANSFORMATION",
        "snippet": "    private static final AliasTransformation NULL_ALIAS_TRANSFORMATION =\n        new NullAliasTransformation();",
        "begin_line": 2060,
        "end_line": 2061,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformation",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformation.serialVersionUID",
        "snippet": "      private static final long serialVersionUID = 0L;",
        "begin_line": 2072,
        "end_line": 2072,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.isExternFile",
        "snippet": "  private boolean isExternFile = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.originalPath",
        "snippet": "  private String originalPath = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " from a Jar, it could be the path to the Jar."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lineOffsets",
        "snippet": "  private int[] lineOffsets = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Source Line Information"
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.charset",
        "snippet": "    private Charset charset = Charsets.UTF_8;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.originalPath",
        "snippet": "    private String originalPath = null;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Preloaded",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Preloaded.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    private String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 474,
        "end_line": 474,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.orderOfAddition",
        "snippet": "  private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();",
        "begin_line": 45,
        "end_line": 45,
        "comment": " The order that the guards were added in."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.numberOfAdds",
        "snippet": "  private int numberOfAdds = 0;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private final Comparator<WarningsGuard> guardComparator =\n      new GuardComparator(orderOfAddition);",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.demoteErrors",
        "snippet": "  private boolean demoteErrors = false;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.orderOfAddition",
        "snippet": "    private final Map<WarningsGuard, Integer> orderOfAddition;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final TreeSet<WarningsGuard> guards =\n      new TreeSet<WarningsGuard>(guardComparator);",
        "begin_line": 76,
        "end_line": 77,
        "comment": " The order that the guards are applied in."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.stream",
        "snippet": "  private final JsDocTokenStream stream;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.jsdocBuilder",
        "snippet": "  private final JSDocInfoBuilder jsdocBuilder;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.associatedNode",
        "snippet": "  private final Node associatedNode;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parser",
        "snippet": "  private final ErrorReporterParser parser = new ErrorReporterParser();",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " memory footprint associated with these (similar to IRFactory)."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileOverviewJSDocInfo",
        "snippet": "  private JSDocInfo fileOverviewJSDocInfo = null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The DocInfo with the fileoverview tag for the whole file."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.state",
        "snippet": "  private State state;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.annotationNames",
        "snippet": "  private final Map<String, Annotation> annotationNames;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.suppressionNames",
        "snippet": "  private final Set<String> suppressionNames;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",
        "snippet": "  static private final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
        "begin_line": 95,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileLevelJsDocBuilder",
        "snippet": "  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.string",
        "snippet": "    private final String string;",
        "begin_line": 1250,
        "end_line": 1250,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.token",
        "snippet": "    private final JsDocToken token;",
        "begin_line": 1251,
        "end_line": 1251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.type",
        "snippet": "    final JSTypeExpression type;",
        "begin_line": 1263,
        "end_line": 1263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.lineno",
        "snippet": "    final int lineno;",
        "begin_line": 1264,
        "end_line": 1264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.charno",
        "snippet": "    final int charno;",
        "begin_line": 1265,
        "end_line": 1265,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",
        "snippet": "  private static final JsDocToken NO_UNREAD_TOKEN = null;",
        "begin_line": 2252,
        "end_line": 2252,
        "comment": "\n   * Specific value indicating that the {@link #unreadToken} contains no token.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.unreadToken",
        "snippet": "  private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
        "begin_line": 2257,
        "end_line": 2257,
        "comment": "\n   * One token buffer.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.checkOnly",
        "snippet": "  private final boolean checkOnly;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAnnotations",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAnnotations.convention",
        "snippet": "    private final CodingConvention convention;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.vars",
        "snippet": "  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.parent",
        "snippet": "  private final Scope parent;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.depth",
        "snippet": "  private final int depth;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.rootNode",
        "snippet": "  private final Node rootNode;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.thisType",
        "snippet": "  private final ObjectType thisType;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The type of {@code this} in the current scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.isBottom",
        "snippet": "  private final boolean isBottom;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Whether this is a bottom scope for the purposes of type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.arguments",
        "snippet": "  private Var arguments;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",
        "snippet": "  private static final Predicate<Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES =\n      new Predicate<Var>() {\n    @Override public boolean apply(Var var) {\n      return var.getParentNode() != null &&\n          var.getType() == null && // no declared type\n          var.getParentNode().isVar() &&\n          !var.isExtern();\n    }\n  };",
        "begin_line": 72,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.name",
        "snippet": "    final String name;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " name "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Var node "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.type",
        "snippet": "    private JSType type;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * The variable's type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.info",
        "snippet": "    private final JSDocInfo info;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * The variable's doc info.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.typeInferred",
        "snippet": "    private final boolean typeInferred;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * Whether the variable's type has been inferred or is declared. An inferred\n     * type may change over time (as more code is discovered), whereas a\n     * declared type is a static contract that must be matched.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.input",
        "snippet": "    final CompilerInput input;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Input source "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.isDefine",
        "snippet": "    final boolean isDefine;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Whether the variable is a define "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.index",
        "snippet": "    final int index;",
        "begin_line": 118,
        "end_line": 118,
        "comment": "\n     * The index at which the var is declared. e..g if it's 0, it's the first\n     * declared variable in that scope\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The enclosing scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedEscaped",
        "snippet": "    private boolean markedEscaped = false;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.EOF_CHAR",
        "snippet": "  private final static int\n      EOF_CHAR = -1;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "\n   * For chars - because we need something out-of-range\n   * to check.  (And checking EOF by exception is annoying.)\n   * Note distinction from EOF token type!\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.string",
        "snippet": "  private String string = \"\";",
        "begin_line": 454,
        "end_line": 454,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBuffer",
        "snippet": "  private char[] stringBuffer = new char[128];",
        "begin_line": 456,
        "end_line": 456,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBufferTop",
        "snippet": "  private int stringBufferTop;",
        "begin_line": 457,
        "end_line": 457,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetBuffer",
        "snippet": "  private final int[] ungetBuffer = new int[3];",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCursor",
        "snippet": "  private int ungetCursor;",
        "begin_line": 461,
        "end_line": 461,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.hitEOF",
        "snippet": "  private boolean hitEOF = false;",
        "begin_line": 463,
        "end_line": 463,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineStart",
        "snippet": "  private int lineStart = 0;",
        "begin_line": 465,
        "end_line": 465,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineEndChar",
        "snippet": "  private int lineEndChar = -1;",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineno",
        "snippet": "  int lineno;",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.charno",
        "snippet": "  private int charno = -1;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initCharno",
        "snippet": "  private int initCharno;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initLineno",
        "snippet": "  private int initLineno;",
        "begin_line": 470,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceString",
        "snippet": "  private String sourceString;",
        "begin_line": 472,
        "end_line": 472,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceEnd",
        "snippet": "  private int sourceEnd;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceCursor",
        "snippet": "  int sourceCursor;",
        "begin_line": 477,
        "end_line": 477,
        "comment": " sliding window of the source stream."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.cursor",
        "snippet": "  int cursor;",
        "begin_line": 482,
        "end_line": 482,
        "comment": " Its value is the index of the next character to be scanned."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenBeg",
        "snippet": "  int tokenBeg;",
        "begin_line": 485,
        "end_line": 485,
        "comment": " Record start and end positions of last scanned token."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenEnd",
        "snippet": "  int tokenEnd;",
        "begin_line": 486,
        "end_line": 486,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentInfo",
        "snippet": "  private JSDocInfo currentInfo;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " the current JSDoc which is being populated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populated",
        "snippet": "  private boolean populated = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " whether the current JSDocInfo has valuable information"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.parseDocumentation",
        "snippet": "  private boolean parseDocumentation = false;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " whether to include the documentation itself when parsing the JsDoc"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentMarker",
        "snippet": "  private JSDocInfo.Marker currentMarker = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " the current marker, if any."
    },
    {
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.INVALID_NO_SIDE_EFFECT_ANNOTATION",
        "snippet": "  static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n      DiagnosticType.error(\n          \"JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION\",\n          \"@nosideeffects may only appear in externs files.\");",
        "begin_line": 41,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.noSideEffectFunctionNames",
        "snippet": "  private final Set<Node> noSideEffectFunctionNames;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " has a @nosideeffects annotation."
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherNoSideEffectFunctions",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.GatherNoSideEffectFunctions.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SetNoSideEffectCallProperty",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.SetNoSideEffectCallProperty.defFinder",
        "snippet": "    private final SimpleDefinitionFinder defFinder;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 39,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.suppressionNames",
        "snippet": "  private static Set<String> suppressionNames = null;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototypeSlot",
        "snippet": "  private Property prototypeSlot;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   *\n   * If non-null, the type must be a PrototypeObjectType.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n   * The interfaces directly implemented by this function (for constructors)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = ImmutableList.of();",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * The interfaces directly extended by this function (for interfaces)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeNames",
        "snippet": "  private final ImmutableList<String> templateTypeNames;",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "    private boolean hasChanged = false;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.jsScope",
        "snippet": "  private final Scope jsScope;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The scope of the function that we are analyzing."
    },
    {
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.escaped",
        "snippet": "  private final Set<Var> escaped;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.Definition.node",
        "snippet": "    final Node node;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.Definition.depends",
        "snippet": "    final Set<Var> depends = Sets.newHashSet();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.Definition.unknownDependencies",
        "snippet": "    private boolean unknownDependencies = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MustDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustDef.reachingDef",
        "snippet": "    final Map<Var, Definition> reachingDef;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " When a Var \"A\" = \"BOTTOM\", \"A\" maps to null."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 47,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",
        "snippet": "  static final String GETTER_ERROR_MESSAGE =\n      \"getters are not supported in older versions of JS. \" +\n      \"If you are targeting newer versions of JS, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 83,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",
        "snippet": "  static final String SETTER_ERROR_MESSAGE =\n      \"setters are not supported in older versions of JS. \" +\n      \"If you are targeting newer versions of JS, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 88,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",
        "snippet": "  static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
        "begin_line": 93,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");",
        "begin_line": 104,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
        "begin_line": 107,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
        "begin_line": 111,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.reservedKeywords",
        "snippet": "  private final Set<String> reservedKeywords;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parsedComments",
        "snippet": "  private final Set<Comment> parsedComments = Sets.newHashSet();",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.rootNodeJsDocHolder",
        "snippet": "  Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
        "begin_line": 123,
        "end_line": 123,
        "comment": " and stored in JSDocInfo for placeholder node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileLevelJsDocBuilder",
        "snippet": "  Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
        "begin_line": 124,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileOverviewInfo",
        "snippet": "  JSDocInfo fileOverviewInfo = null;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.templateNode",
        "snippet": "  private Node templateNode;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " memory footprint associated with these."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private ObjectType typeOfThis = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateTypeNames",
        "snippet": "  private ImmutableList<String> templateTypeNames = ImmutableList.of();",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n   * Implementation:\n   *\n   * This pass first perform a traversal to gather a list of Candidates that\n   * could be inlined using {@link GatherCandiates}.\n   *\n   * The second step involves verifying that each candidate is actually safe\n   * to inline with {@link Candidate#canInline()} and finally perform inlining\n   * using {@link Candidate#inlineVariable()}.\n   *\n   * The reason for the delayed evaluation of the candidates is because we\n   * need two separate dataflow result.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.candidates",
        "snippet": "  private List<Candidate> candidates;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.reachingDef",
        "snippet": "  private MustBeReachingVariableDef reachingDef;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.reachingUses",
        "snippet": "  private MaybeReachingVariableUse reachingUses;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.SIDE_EFFECT_PREDICATE",
        "snippet": "  private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n    new Predicate<Node>() {\n      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n  };",
        "begin_line": 81,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.varName",
        "snippet": "    private final String varName;",
        "begin_line": 234,
        "end_line": 234,
        "comment": " Name of the variable."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.def",
        "snippet": "    private Node def;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Nodes related to the definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.defCfgNode",
        "snippet": "    private final Node defCfgNode;",
        "begin_line": 238,
        "end_line": 238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.use",
        "snippet": "    private final Node use;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " Nodes related to the use."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.useCfgNode",
        "snippet": "    private final Node useCfgNode;",
        "begin_line": 242,
        "end_line": 242,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.numUseWithinUseCfgNode",
        "snippet": "    private int numUseWithinUseCfgNode;",
        "begin_line": 246,
        "end_line": 246,
        "comment": " use in the CFG."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.node",
        "snippet": "  final Node node;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.definition",
        "snippet": "  final Definition definition;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.module",
        "snippet": "  final JSModule module;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.inGlobalScope",
        "snippet": "  final boolean inGlobalScope;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.inExterns",
        "snippet": "  final boolean inExterns;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.OPTIONAL_ARG_PREFIX",
        "snippet": "  private static final String OPTIONAL_ARG_PREFIX = \"opt_\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.VAR_ARGS_NAME",
        "snippet": "  private static final String VAR_ARGS_NAME = \"var_args\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.ENUM_KEY_PATTERN",
        "snippet": "  private static final Pattern ENUM_KEY_PATTERN =\n    Pattern.compile(\"[A-Z0-9][A-Z0-9_]*\");",
        "begin_line": 39,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPosition",
        "snippet": "  private Map<Node, Integer> astPosition;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.nodePriorities",
        "snippet": "  private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " TODO(nicksantos): should these be node annotations?"
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityComparator",
        "snippet": "  private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
        "begin_line": 70,
        "end_line": 77,
        "comment": " they will often be executed first in the source program."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPositionCounter",
        "snippet": "  private int astPositionCounter;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityCounter",
        "snippet": "  private int priorityCounter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverseFunctions",
        "snippet": "  private final boolean shouldTraverseFunctions;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.edgeAnnotations",
        "snippet": "  private final boolean edgeAnnotations;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.root",
        "snippet": "  private Node root;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " on only the externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.exceptionHandler",
        "snippet": "  private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * This stack captures the structure of nested TRY blocks. The top of the\n   * stack is the inner most TRY block. A FUNCTION node in this stack implies\n   * that the handler is determined by the caller of the function at runtime.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.finallyMap",
        "snippet": "  private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * This map is used to handle the follow of FINALLY. For example:\n   *\n   * while(x) {\n   *  try {\n   *    try {\n   *      break;\n   *    } catch (a) {\n   *    } finally {\n   *      foo();\n   *    }\n   *    fooFollow();\n   *  } catch (b) {\n   *  } finally {\n   *    bar();\n   *  }\n   *  barFollow();\n   * }\n   * END();\n   *\n   * In this case finallyMap will contain a map from:\n   *    first FINALLY -> bar()\n   *    second FINALLY -> END()\n   *\n   * When we are connecting foo() and bar() to to their respective follow, we\n   * must also look up this map and connect:\n   *   foo() -> bar()\n   *   bar() -> END\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AstControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.AstControlFlowGraph.priorities",
        "snippet": "    private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
        "begin_line": 1005,
        "end_line": 1005,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.inputId",
        "snippet": "  private transient InputId inputId;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",
        "snippet": "  static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",
        "snippet": "  final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 58,
        "end_line": 65,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
        "begin_line": 968,
        "end_line": 970,
        "comment": " TODO(johnlenz): consider adding an extern annotation for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
        "begin_line": 971,
        "end_line": 972,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",
        "snippet": "  private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
        "begin_line": 973,
        "end_line": 974,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",
        "snippet": "  private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
        "begin_line": 975,
        "end_line": 976,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",
        "snippet": "  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
        "begin_line": 1271,
        "end_line": 1272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",
        "snippet": "  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
        "begin_line": 1324,
        "end_line": 1325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",
        "snippet": "  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
        "begin_line": 1382,
        "end_line": 1383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 2461,
        "end_line": 2461,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 2565,
        "end_line": 2565,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 2581,
        "end_line": 2581,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",
        "snippet": "  static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
        "begin_line": 2614,
        "end_line": 2614,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useNodeAnnotations",
        "snippet": "  private final boolean useNodeAnnotations;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useEdgeAnnotations",
        "snippet": "  private final boolean useEdgeAnnotations;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.inEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.outEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> outEdgeList =\n        Lists.newArrayList();",
        "begin_line": 336,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.value",
        "snippet": "    protected final N value;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.in",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator();",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.out",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator();",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.sourceNode",
        "snippet": "    private DiGraphNode<N, E> sourceNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.destNode",
        "snippet": "    private DiGraphNode<N, E> destNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 558,
        "end_line": 558,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  final DiagnosticGroup group;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  final CheckLevel level;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.stripTweaks",
        "snippet": "  private final boolean stripTweaks;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compilerDefaultValueOverrides",
        "snippet": "  private final SortedMap<String, Node> compilerDefaultValueOverrides;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.ID_MATCHER",
        "snippet": "  private static final CharMatcher ID_MATCHER = CharMatcher.inRange('a', 'z').\n      or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.anyOf(\"0123456789_.\"));",
        "begin_line": 56,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.UNKNOWN_TWEAK_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_TWEAK_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_TWEAK_WARNING\",\n          \"no tweak registered with ID {0}\");",
        "begin_line": 60,
        "end_line": 63,
        "comment": " Warnings and Errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_MULTIPLY_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_MULTIPLY_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_MULTIPLY_REGISTERED_ERROR\",\n          \"Tweak {0} has already been registered.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType NON_LITERAL_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_LITERAL_TWEAK_ID_ERROR\",\n          \"tweak ID must be a string literal\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING\",\n          \"tweak {0} registered with {1} must have a default value that is a \" +\n          \"literal of type {2}\");",
        "begin_line": 75,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_TWEAK_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_TWEAK_INIT_ERROR\",\n          \"tweak declaration {0} must occur in the global scope\");",
        "begin_line": 81,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR\",\n          \"Cannot override the default value of tweak {0} after it has been \" +\n          \"registered\");",
        "begin_line": 86,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING",
        "snippet": "  static final DiagnosticType TWEAK_WRONG_GETTER_TYPE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TWEAK_WRONG_GETTER_TYPE_WARNING\",\n          \"tweak getter function {0} used for tweak registered using {1}\");",
        "begin_line": 92,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_TWEAK_ID_ERROR\",\n          \"tweak ID contains illegal characters. Only letters, numbers, _ \" +\n          \"and . are allowed\");",
        "begin_line": 97,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.name",
        "snippet": "    final String name;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.expectedTypeName",
        "snippet": "    final String expectedTypeName;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeA",
        "snippet": "    final int validNodeTypeA;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeB",
        "snippet": "    final int validNodeTypeB;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.registerFunction",
        "snippet": "    final TweakFunction registerFunction;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_FUNCTIONS_MAP",
        "snippet": "  private static final Map<String, TweakFunction> TWEAK_FUNCTIONS_MAP;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A map of function name -> TweakFunction."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.tweakInfos",
        "snippet": "    final Map<String, TweakInfo> tweakInfos;",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.allTweaks",
        "snippet": "    final Map<String, TweakInfo> allTweaks = Maps.newHashMap();",
        "begin_line": 337,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls = Lists.newArrayList();",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.sourceName",
        "snippet": "    final String sourceName;",
        "begin_line": 430,
        "end_line": 430,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.tweakFunc",
        "snippet": "    final TweakFunction tweakFunc;",
        "begin_line": 431,
        "end_line": 431,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.valueNode",
        "snippet": "    final Node valueNode;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.tweakId",
        "snippet": "    final String tweakId;",
        "begin_line": 457,
        "end_line": 457,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.functionCalls",
        "snippet": "    final List<TweakFunctionCall> functionCalls;",
        "begin_line": 458,
        "end_line": 458,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.registerCall",
        "snippet": "    TweakFunctionCall registerCall;",
        "begin_line": 459,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.defaultValueNode",
        "snippet": "    Node defaultValueNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.Definition.isExtern",
        "snippet": "    private final boolean isExtern;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IncompleteDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.IncompleteDefinition.ALLOWED_TYPES",
        "snippet": "    private static final Set<Integer> ALLOWED_TYPES =\n        ImmutableSet.of(Token.NAME, Token.GETPROP, Token.GETELEM);",
        "begin_line": 154,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IncompleteDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.IncompleteDefinition.lValue",
        "snippet": "    private final Node lValue;",
        "begin_line": 156,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.FunctionDefinition.function",
        "snippet": "    protected final Node function;",
        "begin_line": 232,
        "end_line": 232,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.AssignmentDefinition.assignment",
        "snippet": "    private final Node assignment;",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.literal",
        "snippet": "    private final Node literal;",
        "begin_line": 322,
        "end_line": 322,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.name",
        "snippet": "    private final Node name;",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.value",
        "snippet": "    private final Node value;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.VarDefinition.name",
        "snippet": "    private final Node name;",
        "begin_line": 371,
        "end_line": 371,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Package protected for tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 46,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The current input "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 313,
        "end_line": 313,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UseSite",
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "signature": "com.google.javascript.jscomp.UseSite.node",
        "snippet": "  final Node node;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UseSite",
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "signature": "com.google.javascript.jscomp.UseSite.scope",
        "snippet": "  final Scope scope;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UseSite",
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "signature": "com.google.javascript.jscomp.UseSite.module",
        "snippet": "  final JSModule module;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isCreated",
        "snippet": "  private boolean isCreated = false;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.logger",
        "snippet": "  private final Logger logger;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.name",
        "snippet": "  private final String name;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " A human-readable name for the group."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 66,
        "end_line": 67,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.ESCAPED_JS_STRINGS",
        "snippet": "  private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
        "begin_line": 38,
        "end_line": 38,
        "comment": " A memoizer for formatting strings as JS strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 40,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.cc",
        "snippet": "  private final CodeConsumer cc;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.outputCharsetEncoder",
        "snippet": "  private final CharsetEncoder outputCharsetEncoder;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",
        "snippet": "  private static final int DEFAULT_MAX_UNION_SIZE = 20;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.maxUnionSize",
        "snippet": "  private final int maxUnionSize;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.functionTypePosition",
        "snippet": "  private int functionTypePosition = -1;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " one structural function, or just bails out and uses the top function type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.logger",
        "snippet": "  static final Logger logger =\n      Logger.getLogger(Tracer.class.getName());",
        "begin_line": 163,
        "end_line": 164,
        "comment": " package-private for access from unit tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.defaultPrettyPrint",
        "snippet": "  private static volatile boolean defaultPrettyPrint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Whether pretty printing is enabled. This is intended to be set once\n   * at application startup.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingStatistics",
        "snippet": "  private static List<TracingStatistic> extraTracingStatistics =\n      new CopyOnWriteArrayList<TracingStatistic>();",
        "begin_line": 176,
        "end_line": 177,
        "comment": " This list is guaranteed to only increase in length.  It contains\n   * a list of additional statistics that the user wants to keep track\n   * of.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingValues",
        "snippet": "  private long[] extraTracingValues;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Values returned by extraTracingStatistics "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.type",
        "snippet": "  private final @Nullable String type;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The type for grouping traces, may be null "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.comment",
        "snippet": "  private final String comment;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A comment string for the report "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startTimeMs",
        "snippet": "  private final long startTimeMs;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Start time of the trace "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.stopTimeMs",
        "snippet": "  private long stopTimeMs;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Stop time of the trace, non-final "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startThread",
        "snippet": "  final Thread startThread;",
        "begin_line": 198,
        "end_line": 198,
        "comment": "\n   * Record our starter thread in order to trap Traces that are started in one\n   * thread and stopped in another\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.MAX_TRACE_SIZE",
        "snippet": "  static final int MAX_TRACE_SIZE = 1000;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n   * We limit the number of events in a Trace in order to catch memory\n   * leaks (a thread that keeps logging events and never clears them).\n   * This number is arbitrary and can be increased if necessary (though\n   * if there are more than 1000 events then the Tracer is probably being\n   * misused).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.clock",
        "snippet": "  static InternalClock clock = new InternalClock() {\n    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n  };",
        "begin_line": 221,
        "end_line": 226,
        "comment": "\n   * Default clock that calls through to the system clock. Can be overridden\n   * in unit tests.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.count",
        "snippet": "    private int count;",
        "begin_line": 541,
        "end_line": 541,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.silent",
        "snippet": "    private int silent;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.clockTime",
        "snippet": "    private int clockTime;",
        "begin_line": 543,
        "end_line": 543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.extraInfo",
        "snippet": "    private int[] extraInfo;",
        "begin_line": 544,
        "end_line": 544,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToCountMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToCountMap;",
        "begin_line": 575,
        "end_line": 575,
        "comment": "\n   * This map tracks counts of tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToSilentMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToSilentMap;",
        "begin_line": 580,
        "end_line": 580,
        "comment": "\n   * This map tracks counts of silent tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToTimeMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToTimeMap;",
        "begin_line": 585,
        "end_line": 585,
        "comment": "\n   * This map tracks time (ms) for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.ZERO_STAT",
        "snippet": "  private static final Stat ZERO_STAT = new Stat();",
        "begin_line": 633,
        "end_line": 633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.isStart",
        "snippet": "    boolean isStart;   // else is_stop",
        "begin_line": 644,
        "end_line": 644,
        "comment": " else is_stop"
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.tracer",
        "snippet": "    Tracer tracer;",
        "begin_line": 645,
        "end_line": 645,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.defaultSilenceThreshold",
        "snippet": "    int defaultSilenceThreshold; // non-final",
        "begin_line": 705,
        "end_line": 705,
        "comment": " non-final"
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.events",
        "snippet": "    final ArrayList<Event> events = new ArrayList<Event>();",
        "begin_line": 708,
        "end_line": 708,
        "comment": " The Events corresponding to each startEvent/stopEvent "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.outstandingEvents",
        "snippet": "    final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();",
        "begin_line": 711,
        "end_line": 711,
        "comment": " Tracers that have not had their .stop() called "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.stats",
        "snippet": "    final Map<String, Stat> stats = new HashMap<String, Stat>();",
        "begin_line": 714,
        "end_line": 714,
        "comment": " Map from type to Stat object "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isOutstandingEventsTruncated",
        "snippet": "    boolean isOutstandingEventsTruncated = false;",
        "begin_line": 720,
        "end_line": 720,
        "comment": "\n     * True if {@code outstandingEvents} has been cleared because we exceeded\n     * the max trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isEventsTruncated",
        "snippet": "    boolean isEventsTruncated = false;",
        "begin_line": 726,
        "end_line": 726,
        "comment": "\n     * True if {@code events} has been cleared because we exceeded the max\n     * trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isInitialized",
        "snippet": "    boolean isInitialized = false;",
        "begin_line": 732,
        "end_line": 732,
        "comment": "\n     * Set to true if {@link Tracer#initCurrentThreadTrace()} was called by\n     * the current thread.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.prettyPrint",
        "snippet": "    boolean prettyPrint = false;",
        "begin_line": 737,
        "end_line": 737,
        "comment": "\n     * Whether pretty printing is enabled for the trace.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.traces",
        "snippet": "  private static ThreadLocal<ThreadTrace> traces =\n      new ThreadLocal<ThreadTrace>();",
        "begin_line": 952,
        "end_line": 953,
        "comment": " Holds the ThreadTrace for each thread.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.AtomicTracerStatMap",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.AtomicTracerStatMap.map",
        "snippet": "    private ConcurrentMap<String, Long> map =\n        new ConcurrentHashMap<String, Long>();",
        "begin_line": 1033,
        "end_line": 1034,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.serialVersionUID",
        "snippet": "  public static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.id",
        "snippet": "  private final String id;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 34,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR",
        "snippet": "  static final DiagnosticType TYPE_PARSE_ERROR =\n      DiagnosticType.warning(\"JSC_TYPE_PARSE_ERROR\", \"{0}\");",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\",\n          \"Parse error. IE8 (and below) will parse trailing commas in \" +\n          \"array and object literals incorrectly. \" +\n          \"If you are targeting newer versions of JS, \" +\n          \"set the appropriate language_in option.\");",
        "begin_line": 42,
        "end_line": 47,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n    DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<Pattern, DiagnosticType> typeMap;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private final int hashcode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.PARAM_LIST);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.sortDependencies",
        "snippet": "  private boolean sortDependencies = false;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.pruneDependencies",
        "snippet": "  private boolean pruneDependencies = false;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.dropMoochers",
        "snippet": "  private boolean dropMoochers = false;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.entryPoints",
        "snippet": "  private final Set<String> entryPoints = Sets.newHashSet();",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 591,
        "end_line": 591,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.name",
        "snippet": "    private final String name;",
        "begin_line": 596,
        "end_line": 596,
        "comment": "\n     * Property's name.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 601,
        "end_line": 601,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 606,
        "end_line": 606,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "    private Node propertyNode;",
        "begin_line": 612,
        "end_line": 612,
        "comment": "\n     * The node corresponding to this property, e.g., a GETPROP node that\n     * declares this property.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 615,
        "end_line": 615,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaN",
        "snippet": "    public static final double\n        NaN = Double.longBitsToDouble(0x7ff8000000000000L);",
        "begin_line": 80,
        "end_line": 81,
        "comment": " So we use ScriptRuntime.NaN instead of Double.NaN."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.negativeZero",
        "snippet": "    public static final double\n        negativeZero = Double.longBitsToDouble(0x8000000000000000L);",
        "begin_line": 84,
        "end_line": 85,
        "comment": " A similar problem exists for negative zero."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementNeedsEnded",
        "snippet": "  boolean statementNeedsEnded = false;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementStarted",
        "snippet": "  boolean statementStarted = false;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.sawFunction",
        "snippet": "  boolean sawFunction = false;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.definitionSiteMap",
        "snippet": "  private final Map<Node, DefinitionSite> definitionSiteMap;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.nameDefinitionMultimap",
        "snippet": "  private final Multimap<String, Definition> nameDefinitionMultimap;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.nameUseSiteMultimap",
        "snippet": "  private final Multimap<String, UseSite> nameUseSiteMultimap;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionGatheringCallback",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.DefinitionGatheringCallback.inExterns",
        "snippet": "    private boolean inExterns;",
        "begin_line": 150,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNUSED",
        "snippet": "  static final DiagnosticType UNUSED =\n      DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");",
        "begin_line": 30,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private final static Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES =\n      \"accessControls, ambiguousFunctionDecl, checkRegExp, \" +\n      \"checkTypes, checkVars, const, constantProperty, deprecated, \" +\n      \"duplicateMessage, \" +\n      \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n      \"internetExplorerChecks, invalidCasts, missingProperties, \" +\n      \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \" +\n      \"undefinedNames, undefinedVars, unknownDefines, uselessCode, \" +\n      \"visibility\";",
        "begin_line": 78,
        "end_line": 86,
        "comment": " to parser/ParserConfig.properties"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS",
        "snippet": "  public static DiagnosticGroup GLOBAL_THIS =\n      DiagnosticGroups.registerGroup(\"globalThis\",\n          CheckGlobalThis.GLOBAL_THIS);",
        "begin_line": 88,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static DiagnosticGroup DEPRECATED =\n      DiagnosticGroups.registerGroup(\"deprecated\",\n          CheckAccessControls.DEPRECATED_NAME,\n          CheckAccessControls.DEPRECATED_NAME_REASON,\n          CheckAccessControls.DEPRECATED_PROP,\n          CheckAccessControls.DEPRECATED_PROP_REASON,\n          CheckAccessControls.DEPRECATED_CLASS,\n          CheckAccessControls.DEPRECATED_CLASS_REASON);",
        "begin_line": 92,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static DiagnosticGroup VISIBILITY =\n      DiagnosticGroups.registerGroup(\"visibility\",\n          CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n          CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n          CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n          CheckAccessControls.PRIVATE_OVERRIDE,\n          CheckAccessControls.VISIBILITY_MISMATCH);",
        "begin_line": 101,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY",
        "snippet": "  public static DiagnosticGroup CONSTANT_PROPERTY =\n      DiagnosticGroups.registerGroup(\"constantProperty\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);",
        "begin_line": 109,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static DiagnosticGroup NON_STANDARD_JSDOC =\n      DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          RhinoErrorReporter.BAD_JSDOC_ANNOTATION);",
        "begin_line": 114,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          DEPRECATED, VISIBILITY);",
        "begin_line": 118,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static DiagnosticGroup INVALID_CASTS =\n      DiagnosticGroups.registerGroup(\"invalidCasts\",\n          TypeValidator.INVALID_CAST);",
        "begin_line": 122,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static DiagnosticGroup FILEOVERVIEW_JSDOC =\n      DiagnosticGroups.registerDeprecatedGroup(\"fileoverviewTags\");",
        "begin_line": 126,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n      DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          VarCheck.STRICT_MODULE_DEP_ERROR,\n          CheckGlobalNames.STRICT_MODULE_DEP_QNAME);",
        "begin_line": 129,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION",
        "snippet": "  public static DiagnosticGroup EXTERNS_VALIDATION =\n      DiagnosticGroups.registerGroup(\"externsValidation\",\n          VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
        "begin_line": 134,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL",
        "snippet": "  public static DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n      DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n          VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);",
        "begin_line": 139,
        "end_line": 141,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static DiagnosticGroup UNKNOWN_DEFINES =\n      DiagnosticGroups.registerGroup(\"unknownDefines\",\n          ProcessDefines.UNKNOWN_DEFINE_WARNING);",
        "begin_line": 143,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TWEAKS",
        "snippet": "  public static DiagnosticGroup TWEAKS =\n      DiagnosticGroups.registerGroup(\"tweakValidation\",\n          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n          ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n          ProcessTweaks.UNKNOWN_TWEAK_WARNING);",
        "begin_line": 147,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static DiagnosticGroup MISSING_PROPERTIES =\n      DiagnosticGroups.registerGroup(\"missingProperties\",\n          TypeCheck.INEXISTENT_PROPERTY);",
        "begin_line": 153,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS",
        "snippet": "  public static DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n      DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 158,
        "end_line": 160,
        "comment": " TODO: add more IE specific checks here."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          VarCheck.UNDEFINED_VAR_ERROR);",
        "begin_line": 162,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES",
        "snippet": "  public static DiagnosticGroup UNDEFINED_NAMES =\n      DiagnosticGroups.registerGroup(\"undefinedNames\",\n          CheckGlobalNames.UNDEFINED_NAME_WARNING);",
        "begin_line": 166,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT",
        "snippet": "  public static DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n      DiagnosticGroups.registerGroup(\"checkDebuggerStatement\",\n          CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);",
        "begin_line": 170,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP",
        "snippet": "  public static DiagnosticGroup CHECK_REGEXP =\n      DiagnosticGroups.registerGroup(\"checkRegExp\",\n          CheckRegExp.REGEXP_REFERENCE,\n          CheckRegExp.MALFORMED_REGEXP);",
        "begin_line": 174,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          TypeValidator.ALL_DIAGNOSTICS,\n          TypeCheck.ALL_DIAGNOSTICS);",
        "begin_line": 179,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          VarCheck.UNDEFINED_VAR_ERROR,\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);",
        "begin_line": 184,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE",
        "snippet": "  public static DiagnosticGroup CHECK_USELESS_CODE =\n      DiagnosticGroups.registerGroup(\"uselessCode\",\n          CheckSideEffects.USELESS_CODE_ERROR,\n          CheckUnreachableCode.UNREACHABLE_CODE);",
        "begin_line": 189,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONST",
        "snippet": "  public static DiagnosticGroup CONST =\n      DiagnosticGroups.registerGroup(\"const\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n          ConstCheck.CONST_REASSIGNED_VALUE_ERROR);",
        "begin_line": 194,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION",
        "snippet": "  public static DiagnosticGroup TYPE_INVALIDATION =\n      DiagnosticGroups.registerGroup(\"typeInvalidation\",\n          DisambiguateProperties.Warnings.INVALIDATION);",
        "begin_line": 200,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS",
        "snippet": "  public static DiagnosticGroup DUPLICATE_VARS =\n      DiagnosticGroups.registerGroup(\"duplicate\",\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR,\n          TypeValidator.DUP_VAR_DECLARATION);",
        "begin_line": 204,
        "end_line": 207,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT",
        "snippet": "  public static DiagnosticGroup ES5_STRICT =\n      DiagnosticGroups.registerGroup(\"es5Strict\",\n          ControlStructureCheck.USE_OF_WITH,\n          StrictModeCheck.UNKNOWN_VARIABLE,\n          StrictModeCheck.EVAL_DECLARATION,\n          StrictModeCheck.EVAL_ASSIGNMENT,\n          StrictModeCheck.ARGUMENTS_DECLARATION,\n          StrictModeCheck.ARGUMENTS_ASSIGNMENT,\n          StrictModeCheck.DELETE_VARIABLE,\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);",
        "begin_line": 209,
        "end_line": 218,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES",
        "snippet": "  public static DiagnosticGroup CHECK_PROVIDES =\n      DiagnosticGroups.registerGroup(\"checkProvides\",\n          CheckProvides.MISSING_PROVIDE_WARNING);",
        "begin_line": 220,
        "end_line": 222,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE",
        "snippet": "  public static DiagnosticGroup DUPLICATE_MESSAGE =\n      DiagnosticGroups.registerGroup(\"duplicateMessage\",\n          JsMessageVisitor.MESSAGE_DUPLICATE_KEY);",
        "begin_line": 224,
        "end_line": 226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WarningsGuard.value",
        "snippet": "    final int value;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n   * Whether to parse the descriptions of JsDoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n   * Whether we're in IDE mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.suppressionNames",
        "snippet": "  final Set<String> suppressionNames;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Recognized names in a {@code @suppress} tag.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.languageMode",
        "snippet": "  final LanguageMode languageMode;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n   * Accept ECMAScript5 syntax, such as getter/setter.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptConstKeyword",
        "snippet": "  final boolean acceptConstKeyword;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Accept `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType CIRCULAR_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_CIRCULAR_DEP\",\n          \"Circular dependency detected: {0}\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.name",
        "snippet": "  private final String name;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Module name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.inputs",
        "snippet": "  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Source code inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.deps",
        "snippet": "  private final List<JSModule> deps = new ArrayList<JSModule>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Modules that this module depends on "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.depth",
        "snippet": "  private int depth;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.baseType",
        "snippet": "    JSTypeExpression baseType = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Function information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.extendedInterfaces",
        "snippet": "    List<JSTypeExpression> extendedInterfaces = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.implementedInterfaces",
        "snippet": "    List<JSTypeExpression> implementedInterfaces = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.parameters",
        "snippet": "    Map<String, JSTypeExpression> parameters = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.thrownTypes",
        "snippet": "    List<JSTypeExpression> thrownTypes = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.templateTypeNames",
        "snippet": "    ImmutableList<String> templateTypeNames = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.description",
        "snippet": "    String description = null;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Other information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.meaning",
        "snippet": "    String meaning = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.deprecated",
        "snippet": "    String deprecated = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.license",
        "snippet": "    String license = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.suppressions",
        "snippet": "    Set<String> suppressions = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.modifies",
        "snippet": "    Set<String> modifies = null;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.lendsName",
        "snippet": "    String lendsName = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sourceComment",
        "snippet": "    String sourceComment = null;",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.markers",
        "snippet": "    List<Marker> markers = null;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.parameters",
        "snippet": "    Map<String, String> parameters = null;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.throwsDescriptions",
        "snippet": "    Map<JSTypeExpression, String> throwsDescriptions = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.blockDescription",
        "snippet": "    String blockDescription = null;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.fileOverview",
        "snippet": "    String fileOverview = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.returnDescription",
        "snippet": "    String returnDescription = null;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.version",
        "snippet": "    String version = null;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.authors",
        "snippet": "    List<String> authors = null;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sees",
        "snippet": "    List<String> sees = null;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TypePosition",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.TypePosition.brackets",
        "snippet": "    private boolean brackets = false;",
        "begin_line": 155,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.annotation",
        "snippet": "    private TrimmedStringPosition annotation = null;",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.name",
        "snippet": "    private TrimmedStringPosition name = null;",
        "begin_line": 179,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.nameNode",
        "snippet": "    private SourcePosition<Node> nameNode = null;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.description",
        "snippet": "    private StringPosition description = null;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.type",
        "snippet": "    private TypePosition type = null;",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.info",
        "snippet": "  private LazilyInitializedInfo info = null;",
        "begin_line": 246,
        "end_line": 246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentation",
        "snippet": "  private LazilyInitializedDocumentation documentation = null;",
        "begin_line": 248,
        "end_line": 248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.associatedNode",
        "snippet": "  private Node associatedNode = null;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " The Node this JSDoc is associated with."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.visibility",
        "snippet": "  private Visibility visibility = null;",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.bitset",
        "snippet": "  private int bitset = 0x00;",
        "begin_line": 266,
        "end_line": 266,
        "comment": "\n   * The {@link #isConstant()}, {@link #isConstructor()}, {@link #isInterface},\n   * {@link #isHidden()} and {@link #shouldPreserveTry()} flags as well as\n   * whether the {@link #type} field stores a value for {@link #getType()},\n   * {@link #getReturnType()} or {@link #getEnumParameterType()}.\n   *\n   * @see #setFlag(boolean, int)\n   * @see #getFlag(int)\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.type",
        "snippet": "  private JSTypeExpression type = null;",
        "begin_line": 276,
        "end_line": 276,
        "comment": "\n   * The type for {@link #getType()}, {@link #getReturnType()} or\n   * {@link #getEnumParameterType()}. The knowledge of which one is recorded is\n   * stored in the {@link #bitset} field.\n   *\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.thisType",
        "snippet": "  private JSTypeExpression thisType = null;",
        "begin_line": 281,
        "end_line": 281,
        "comment": "\n   * The type for {@link #getThisType()}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.includeDocumentation",
        "snippet": "  private boolean includeDocumentation = false;",
        "begin_line": 288,
        "end_line": 288,
        "comment": "\n   * Whether to include documentation.\n   *\n   * @see JSDocInfo.LazilyInitializedDocumentation\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FLAGS",
        "snippet": "  private static final int MASK_FLAGS       = 0x3FFFFFFF;",
        "begin_line": 295,
        "end_line": 295,
        "comment": " Mask all the boolean annotation types"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTANT",
        "snippet": "  private static final int MASK_CONSTANT      = 0x00000001; // @const",
        "begin_line": 297,
        "end_line": 297,
        "comment": " @const"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTRUCTOR",
        "snippet": "  private static final int MASK_CONSTRUCTOR   = 0x00000002; // @constructor",
        "begin_line": 298,
        "end_line": 298,
        "comment": " @constructor"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEFINE",
        "snippet": "  private static final int MASK_DEFINE        = 0x00000004; // @define",
        "begin_line": 299,
        "end_line": 299,
        "comment": " @define"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_HIDDEN",
        "snippet": "  private static final int MASK_HIDDEN        = 0x00000008; // @hidden",
        "begin_line": 300,
        "end_line": 300,
        "comment": " @hidden"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_PRESERVETRY",
        "snippet": "  private static final int MASK_PRESERVETRY   = 0x00000010; // @preserveTry",
        "begin_line": 301,
        "end_line": 301,
        "comment": " @preserveTry"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCHECK",
        "snippet": "  private static final int MASK_NOCHECK       = 0x00000020; // @notypecheck",
        "begin_line": 302,
        "end_line": 302,
        "comment": " @notypecheck"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_OVERRIDE",
        "snippet": "  private static final int MASK_OVERRIDE      = 0x00000040; // @override",
        "begin_line": 303,
        "end_line": 303,
        "comment": " @override"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOALIAS",
        "snippet": "  private static final int MASK_NOALIAS       = 0x00000080; // @noalias",
        "begin_line": 304,
        "end_line": 304,
        "comment": " @noalias"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEPRECATED",
        "snippet": "  private static final int MASK_DEPRECATED    = 0x00000100; // @deprecated",
        "begin_line": 305,
        "end_line": 305,
        "comment": " @deprecated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_INTERFACE",
        "snippet": "  private static final int MASK_INTERFACE     = 0x00000200; // @interface",
        "begin_line": 306,
        "end_line": 306,
        "comment": " @interface"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPORT",
        "snippet": "  private static final int MASK_EXPORT        = 0x00000400; // @export",
        "begin_line": 307,
        "end_line": 307,
        "comment": " @export"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSHADOW",
        "snippet": "  private static final int MASK_NOSHADOW      = 0x00000800; // @noshadow",
        "begin_line": 308,
        "end_line": 308,
        "comment": " @noshadow"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FILEOVERVIEW",
        "snippet": "  private static final int MASK_FILEOVERVIEW  = 0x00001000; // @fileoverview",
        "begin_line": 309,
        "end_line": 309,
        "comment": " @fileoverview"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IMPLICITCAST",
        "snippet": "  private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast",
        "begin_line": 310,
        "end_line": 310,
        "comment": " @implicitCast"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSIDEEFFECTS",
        "snippet": "  private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects",
        "begin_line": 311,
        "end_line": 311,
        "comment": " @nosideeffects"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXTERNS",
        "snippet": "  private static final int MASK_EXTERNS       = 0x00008000; // @externs",
        "begin_line": 312,
        "end_line": 312,
        "comment": " @externs"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_JAVADISPATCH",
        "snippet": "  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispatch",
        "begin_line": 313,
        "end_line": 313,
        "comment": " @javadispatch"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCOMPILE",
        "snippet": "  private static final int MASK_NOCOMPILE     = 0x00020000; // @nocompile",
        "begin_line": 314,
        "end_line": 314,
        "comment": " @nocompile"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSISTIDGEN",
        "snippet": "  private static final int MASK_CONSISTIDGEN  = 0x00040000;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " @consistentIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IDGEN",
        "snippet": "  private static final int MASK_IDGEN         = 0x00080000;",
        "begin_line": 318,
        "end_line": 318,
        "comment": " @idGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPOSE",
        "snippet": "  private static final int MASK_EXPOSE        = 0x00100000; // @expose",
        "begin_line": 319,
        "end_line": 319,
        "comment": " @expose"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_TYPEFIELD",
        "snippet": "  private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...",
        "begin_line": 323,
        "end_line": 323,
        "comment": " 1110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPE",
        "snippet": "  private static final int TYPEFIELD_TYPE    = 0x20000000; // 0010...",
        "begin_line": 324,
        "end_line": 324,
        "comment": " 0010..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_RETURN",
        "snippet": "  private static final int TYPEFIELD_RETURN  = 0x40000000; // 0100...",
        "begin_line": 325,
        "end_line": 325,
        "comment": " 0100..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_ENUM",
        "snippet": "  private static final int TYPEFIELD_ENUM    = 0x60000000; // 0110...",
        "begin_line": 326,
        "end_line": 326,
        "comment": " 0110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPEDEF",
        "snippet": "  private static final int TYPEFIELD_TYPEDEF = 0x80000000; // 1000...",
        "begin_line": 327,
        "end_line": 327,
        "comment": " 1000..."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.implicitReturn",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> implicitReturn;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n   * A special node marked by the node value key null to a singleton\n   * \"return\" when control is transferred outside of the current control flow\n   * graph.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.entry",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> entry;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 41,
        "end_line": 41,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 43,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_ARGUMENTS_SHADOWED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR =\n    DiagnosticType.error(\n        \"JSC_VAR_ARGUMENTS_SHADOWED_ERROR\",\n        \"Shadowing \\\"arguments\\\" is not allowed\");",
        "begin_line": 48,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Info about where the file lives."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.id",
        "snippet": "  final private InputId id;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Provided and required symbols."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.generatedDependencyInfoFromSource",
        "snippet": "  private boolean generatedDependencyInfoFromSource = false;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.compiler",
        "snippet": "  private transient AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " We do not want to persist this across serialized state."
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.provides",
        "snippet": "    private final List<String> provides = Lists.newArrayList();",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.requires",
        "snippet": "    private final List<String> requires = Lists.newArrayList();",
        "begin_line": 254,
        "end_line": 254,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private final CodingConvention codingConvention =\n        new ClosureCodingConvention();",
        "begin_line": 255,
        "end_line": 256,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 184,
        "end_line": 184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD",
        "snippet": "  static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.mappings",
        "snippet": "    final private Deque<Mapping> mappings;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.allMappings",
        "snippet": "    final private List<Mapping> allMappings;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.createSrcMap",
        "snippet": "    final private boolean createSrcMap;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.sourceMapDetailLevel",
        "snippet": "    final private SourceMap.DetailLevel sourceMapDetailLevel;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.code",
        "snippet": "    protected final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLengthThreshold",
        "snippet": "    protected final int lineLengthThreshold;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLength",
        "snippet": "    protected int lineLength = 0;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineIndex",
        "snippet": "    protected int lineIndex = 0;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.node",
        "snippet": "      Node node;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.start",
        "snippet": "      FilePosition start;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.end",
        "snippet": "      FilePosition end;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.INDENT",
        "snippet": "    static final String INDENT = \"  \";",
        "begin_line": 222,
        "end_line": 222,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.indent",
        "snippet": "    private int indent = 0;",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineBreak",
        "snippet": "    private final boolean lineBreak;",
        "begin_line": 415,
        "end_line": 415,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferLineBreakAtEndOfFile",
        "snippet": "    private final boolean preferLineBreakAtEndOfFile;",
        "begin_line": 416,
        "end_line": 416,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineStartPosition",
        "snippet": "    private int lineStartPosition = 0;",
        "begin_line": 417,
        "end_line": 417,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferredBreakPosition",
        "snippet": "    private int preferredBreakPosition = 0;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.prevCutPosition",
        "snippet": "    private int prevCutPosition = 0;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.prevLineStartPosition",
        "snippet": "    private int prevLineStartPosition = 0;",
        "begin_line": 420,
        "end_line": 420,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.root",
        "snippet": "    private final Node root;",
        "begin_line": 546,
        "end_line": 546,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.prettyPrint",
        "snippet": "    private boolean prettyPrint = false;",
        "begin_line": 547,
        "end_line": 547,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineBreak",
        "snippet": "    private boolean lineBreak = false;",
        "begin_line": 548,
        "end_line": 548,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.preferLineBreakAtEndOfFile",
        "snippet": "    private boolean preferLineBreakAtEndOfFile = false;",
        "begin_line": 549,
        "end_line": 549,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputTypes",
        "snippet": "    private boolean outputTypes = false;",
        "begin_line": 550,
        "end_line": 550,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineLengthThreshold",
        "snippet": "    private int lineLengthThreshold = DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 551,
        "end_line": 551,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMap",
        "snippet": "    private SourceMap sourceMap = null;",
        "begin_line": 552,
        "end_line": 552,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMapDetailLevel",
        "snippet": "    private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
        "begin_line": 553,
        "end_line": 554,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputCharset",
        "snippet": "    private Charset outputCharset = null;",
        "begin_line": 557,
        "end_line": 557,
        "comment": " then just output ASCII."
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.tagAsStrict",
        "snippet": "    private boolean tagAsStrict;",
        "begin_line": 558,
        "end_line": 558,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.jsScope",
        "snippet": "  private final Scope jsScope;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " The scope of the function that we are analyzing."
    },
    {
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.escaped",
        "snippet": "  private final Set<Var> escaped;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReachingUses",
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "signature": "com.google.javascript.jscomp.ReachingUses.mayUseMap",
        "snippet": "    final Multimap<Var, Node> mayUseMap;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",
        "snippet": "  private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n   * The UnionTypeBuilder caps the maximum number of alternate types it\n   * remembers and then defaults to \"?\" (unknown type). By default this max\n   * is 20, but it's very easy for the same property to appear on more than 20\n   * types. Use larger unions for property checking. 3000 was picked\n   * semi-randomly for use by the Google+ FE project.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 118,
        "end_line": 118,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 123,
        "end_line": 123,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 127,
        "end_line": 128,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 133,
        "end_line": 134,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 139,
        "end_line": 140,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 143,
        "end_line": 144,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 147,
        "end_line": 148,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 151,
        "end_line": 152,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypes",
        "snippet": "  private Map<String, TemplateType> templateTypes = Maps.newHashMap();",
        "begin_line": 158,
        "end_line": 158,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveMode",
        "snippet": "  private ResolveMode resolveMode = ResolveMode.LAZY_NAMES;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 522,
        "end_line": 522,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    }
]