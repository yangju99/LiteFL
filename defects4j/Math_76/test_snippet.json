[
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testSolveDimensionErrors()",
        "snippet": "    @Test\n    public void testSolveDimensionErrors() {\n        DecompositionSolver solver =\n            new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();\n        RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);\n        try {\n            solver.solve(b);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (IllegalArgumentException iae) {\n            // expected behavior\n        } catch (Exception e) {\n            Assert.fail(\"wrong exception caught\");\n        }\n        try {\n            solver.solve(b.getColumn(0));\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (IllegalArgumentException iae) {\n            // expected behavior\n        } catch (Exception e) {\n            Assert.fail(\"wrong exception caught\");\n        }\n        try {\n            solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (IllegalArgumentException iae) {\n            // expected behavior\n        } catch (Exception e) {\n            Assert.fail(\"wrong exception caught\");\n        }\n    }\n",
        "begin_line": 33,
        "end_line": 62,
        "comment": " test solve dimension errors ",
        "child_ranges": [
            "(line 35,col 9)-(line 36,col 101)",
            "(line 37,col 9)-(line 37,col 70)",
            "(line 38,col 9)-(line 45,col 9)",
            "(line 46,col 9)-(line 53,col 9)",
            "(line 54,col 9)-(line 61,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testLeastSquareSolve()",
        "snippet": "    @Test\n    public void testLeastSquareSolve() {\n        RealMatrix m =\n            MatrixUtils.createRealMatrix(new double[][] {\n                                   { 1.0, 0.0 },\n                                   { 0.0, 0.0 }\n                               });\n        DecompositionSolver solver = new SingularValueDecompositionImpl(m).getSolver();\n        RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n            { 11, 12 }, { 21, 22 } \n        });\n        RealMatrix xMatrix = solver.solve(b);\n        Assert.assertEquals(11, xMatrix.getEntry(0, 0), 1.0e-15);\n        Assert.assertEquals(12, xMatrix.getEntry(0, 1), 1.0e-15);\n        Assert.assertEquals(0, xMatrix.getEntry(1, 0), 1.0e-15);\n        Assert.assertEquals(0, xMatrix.getEntry(1, 1), 1.0e-15);\n        double[] xCol = solver.solve(b.getColumn(0));\n        Assert.assertEquals(11, xCol[0], 1.0e-15);\n        Assert.assertEquals(0, xCol[1], 1.0e-15);\n        RealVector xColVec = solver.solve(b.getColumnVector(0));\n        Assert.assertEquals(11, xColVec.getEntry(0), 1.0e-15);\n        Assert.assertEquals(0, xColVec.getEntry(1), 1.0e-15);\n        RealVector xColOtherVec = solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));\n        Assert.assertEquals(11, xColOtherVec.getEntry(0), 1.0e-15);\n        Assert.assertEquals(0, xColOtherVec.getEntry(1), 1.0e-15);\n    }\n",
        "begin_line": 65,
        "end_line": 90,
        "comment": " test least square solve ",
        "child_ranges": [
            "(line 67,col 9)-(line 71,col 34)",
            "(line 72,col 9)-(line 72,col 87)",
            "(line 73,col 9)-(line 75,col 11)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 65)",
            "(line 78,col 9)-(line 78,col 65)",
            "(line 79,col 9)-(line 79,col 64)",
            "(line 80,col 9)-(line 80,col 64)",
            "(line 81,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 82,col 50)",
            "(line 83,col 9)-(line 83,col 49)",
            "(line 84,col 9)-(line 84,col 64)",
            "(line 85,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 107)",
            "(line 88,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 89,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testSolve()",
        "snippet": "    @Test\n    public void testSolve() {\n        DecompositionSolver solver =\n            new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();\n        RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n                { 1, 2, 3 }, { 0, -5, 1 }\n        });\n        RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {\n                { -8.0 / 25.0, -263.0 / 75.0, -29.0 / 75.0 },\n                { 19.0 / 25.0,   78.0 / 25.0,  49.0 / 25.0 }\n        });\n\n        // using RealMatrix\n        Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), normTolerance);\n\n        // using double[]\n        for (int i = 0; i < b.getColumnDimension(); ++i) {\n            Assert.assertEquals(0,\n                         new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),\n                         1.0e-13);\n        }\n\n        // using Array2DRowRealMatrix\n        for (int i = 0; i < b.getColumnDimension(); ++i) {\n            Assert.assertEquals(0,\n                         solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),\n                         1.0e-13);\n        }\n\n        // using RealMatrix with an alternate implementation\n        for (int i = 0; i < b.getColumnDimension(); ++i) {\n            ArrayRealVectorTest.RealVectorTestImpl v =\n                new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));\n            Assert.assertEquals(0,\n                         solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),\n                         1.0e-13);\n        }\n\n    }\n",
        "begin_line": 93,
        "end_line": 131,
        "comment": " test solve ",
        "child_ranges": [
            "(line 95,col 9)-(line 96,col 101)",
            "(line 97,col 9)-(line 99,col 11)",
            "(line 100,col 9)-(line 103,col 11)",
            "(line 106,col 9)-(line 106,col 88)",
            "(line 109,col 9)-(line 113,col 9)",
            "(line 116,col 9)-(line 120,col 9)",
            "(line 123,col 9)-(line 129,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testConditionNumber()",
        "snippet": "    @Test\n    public void testConditionNumber() {\n        SingularValueDecompositionImpl svd =\n            new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));\n        Assert.assertEquals(3.0, svd.getConditionNumber(), 1.0e-15);\n    }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": " test condition number ",
        "child_ranges": [
            "(line 136,col 9)-(line 137,col 89)",
            "(line 138,col 9)-(line 138,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testTruncated()",
        "snippet": "    @Test\n    public void testTruncated() {\n\n        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n            { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }\n        });\n        double s439  = Math.sqrt(439.0);\n        double[] reference = new double[] {\n            Math.sqrt(3.0 * (21.0 + s439))\n        };\n        SingularValueDecomposition svd =\n            new SingularValueDecompositionImpl(rm, 1);\n\n        // check we get the expected theoretical singular values\n        double[] singularValues = svd.getSingularValues();\n        Assert.assertEquals(reference.length, singularValues.length);\n        for (int i = 0; i < reference.length; ++i) {\n            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);\n        }\n\n        // check the truncated decomposition DON'T allows to recover the original matrix\n        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\n        Assert.assertTrue(recomposed.subtract(rm).getNorm() > 1.4);\n\n    }\n",
        "begin_line": 141,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 146,col 11)",
            "(line 147,col 9)-(line 147,col 40)",
            "(line 148,col 9)-(line 150,col 10)",
            "(line 151,col 9)-(line 152,col 54)",
            "(line 155,col 9)-(line 155,col 58)",
            "(line 156,col 9)-(line 156,col 69)",
            "(line 157,col 9)-(line 159,col 9)",
            "(line 162,col 9)-(line 162,col 86)",
            "(line 163,col 9)-(line 163,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testMath320A()",
        "snippet": "    @Test\n    public void testMath320A() {\n        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n            { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }\n        });\n        double s439  = Math.sqrt(439.0);\n        double[] reference = new double[] {\n            Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))\n        };\n        SingularValueDecomposition svd =\n            new SingularValueDecompositionImpl(rm);\n\n        // check we get the expected theoretical singular values\n        double[] singularValues = svd.getSingularValues();\n        Assert.assertEquals(reference.length, singularValues.length);\n        for (int i = 0; i < reference.length; ++i) {\n            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);\n        }\n\n        // check the decomposition allows to recover the original matrix\n        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\n        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);\n\n        // check we can solve a singular system\n        double[] b = new double[] { 5.0, 6.0, 7.0 };\n        double[] resSVD = svd.getSolver().solve(b);\n        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);\n\n        // check the solution really minimizes the residuals\n        double svdMinResidual = residual(rm, resSVD, b);\n        double epsilon = 2 * Math.ulp(svdMinResidual);\n        double h = 0.1;\n        int    k = 3;\n        for (double d0 = -k * h; d0 <= k * h; d0 += h) {\n            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {\n                for (double d2 = -k * h; d2 <= k * h; d2 += h) {\n                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };\n                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);\n                }\n            }\n        }\n\n    }\n",
        "begin_line": 167,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 171,col 11)",
            "(line 172,col 9)-(line 172,col 40)",
            "(line 173,col 9)-(line 175,col 10)",
            "(line 176,col 9)-(line 177,col 51)",
            "(line 180,col 9)-(line 180,col 58)",
            "(line 181,col 9)-(line 181,col 69)",
            "(line 182,col 9)-(line 184,col 9)",
            "(line 187,col 9)-(line 187,col 86)",
            "(line 188,col 9)-(line 188,col 77)",
            "(line 191,col 9)-(line 191,col 52)",
            "(line 192,col 9)-(line 192,col 51)",
            "(line 193,col 9)-(line 193,col 68)",
            "(line 196,col 9)-(line 196,col 56)",
            "(line 197,col 9)-(line 197,col 54)",
            "(line 198,col 9)-(line 198,col 23)",
            "(line 199,col 9)-(line 199,col 21)",
            "(line 200,col 9)-(line 207,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.testMath320B()",
        "snippet": "    @Test\n    public void testMath320B() {\n        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n            { 1.0, 2.0 }, { 1.0, 2.0 }\n        });\n        SingularValueDecomposition svd =\n            new SingularValueDecompositionImpl(rm);\n        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\n        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);\n    }\n",
        "begin_line": 211,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 215,col 11)",
            "(line 216,col 9)-(line 217,col 51)",
            "(line 218,col 9)-(line 218,col 86)",
            "(line 219,col 9)-(line 219,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
        "signature": "org.apache.commons.math.linear.SingularValueSolverTest.residual(org.apache.commons.math.linear.RealMatrix, double[], double[])",
        "snippet": "    private double residual(RealMatrix a, double[] x, double[] b) {\n        double[] ax = a.operate(x);\n        double sum = 0;\n        for (int i = 0; i < ax.length; ++i) {\n            sum += (ax[i] - b[i]) * (ax[i] - b[i]);\n        }\n        return Math.sqrt(sum);\n    }\n",
        "begin_line": 222,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 35)",
            "(line 224,col 9)-(line 224,col 23)",
            "(line 225,col 9)-(line 227,col 9)",
            "(line 228,col 9)-(line 228,col 30)"
        ]
    }
]