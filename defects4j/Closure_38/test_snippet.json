[
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parse(java.lang.String)",
        "snippet": "  static Node parse(String js) {\n    return parse(js, false);\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parse(java.lang.String, boolean)",
        "snippet": "  static Node parse(String js, boolean checkTypes) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    // Allow getters and setters.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.initOptions(options);\n    Node n = compiler.parseTestCode(js);\n\n    if (checkTypes) {\n      DefaultPassConfig passConfig = new DefaultPassConfig(null);\n      CompilerPass typeResolver = passConfig.resolveTypes.create(compiler);\n      Node externs = new Node(Token.SCRIPT);\n      externs.setInputId(new InputId(\"externs\"));\n      externs.setIsSyntheticBlock(true);\n      Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n      externAndJsRoot.setIsSyntheticBlock(true);\n      typeResolver.process(externs, n);\n      CompilerPass inferTypes = passConfig.inferTypes.create(compiler);\n      inferTypes.process(externs, n);\n    }\n\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    return n;\n  }\n",
        "begin_line": 35,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 39)",
            "(line 37,col 5)-(line 37,col 52)",
            "(line 39,col 5)-(line 39,col 52)",
            "(line 40,col 5)-(line 40,col 34)",
            "(line 41,col 5)-(line 41,col 40)",
            "(line 43,col 5)-(line 54,col 5)",
            "(line 56,col 5)-(line 56,col 49)",
            "(line 57,col 5)-(line 57,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  private static void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \" + msg, expected, actual);\n    }\n  }\n",
        "begin_line": 60,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 77)",
            "(line 63,col 5)-(line 72,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, int)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, int lineThreshold) {\n    return new CodePrinter.Builder(parse(js)).setPrettyPrint(prettyprint)\n        .setLineLengthThreshold(lineThreshold).build();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 77,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, int)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n      int lineThreshold) {\n    return new CodePrinter.Builder(parse(js)).setPrettyPrint(prettyprint)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak).build();\n  }\n",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 83,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, boolean, int)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n      boolean preferLineBreakAtEof, int lineThreshold) {\n    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n        .setPreferLineBreakAtEndOfFile(preferLineBreakAtEof)\n        .build();\n  }\n",
        "begin_line": 86,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 91,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, int, boolean)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n      int lineThreshold, boolean outputTypes) {\n    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n        .setOutputTypes(outputTypes)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n        .build();\n  }\n",
        "begin_line": 94,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 99,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.parsePrint(java.lang.String, boolean, boolean, int, boolean, boolean)",
        "snippet": "  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n                    int lineThreshold, boolean outputTypes,\n                    boolean tagAsStrict) {\n    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n        .setOutputTypes(outputTypes)\n        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n        .setTagAsStrict(tagAsStrict)\n        .build();\n  }\n",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 109,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.printNode(com.google.javascript.rhino.Node)",
        "snippet": "  String printNode(Node n) {\n    return new CodePrinter.Builder(n).setLineLengthThreshold(\n        CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build();\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 115,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrintNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  void assertPrintNode(String expectedJs, Node ast) {\n    assertEquals(expectedJs, printNode(ast));\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrint()",
        "snippet": "  public void testPrint() {\n    assertPrint(\"10 + a + b\", \"10+a+b\");\n    assertPrint(\"10 + (30*50)\", \"10+30*50\");\n    assertPrint(\"with(x) { x + 3; }\", \"with(x)x+3\");\n    assertPrint(\"\\\"aa'a\\\"\", \"\\\"aa'a\\\"\");\n    assertPrint(\"\\\"aa\\\\\\\"a\\\"\", \"'aa\\\"a'\");\n    assertPrint(\"function foo()\\n{return 10;}\", \"function foo(){return 10}\");\n    assertPrint(\"a instanceof b\", \"a instanceof b\");\n    assertPrint(\"typeof(a)\", \"typeof a\");\n    assertPrint(\n        \"var foo = x ? { a : 1 } : {a: 3, b:4, \\\"default\\\": 5, \\\"foo-bar\\\": 6}\",\n        \"var foo=x?{a:1}:{a:3,b:4,\\\"default\\\":5,\\\"foo-bar\\\":6}\");\n\n    // Safari: needs ';' at the end of a throw statement\n    assertPrint(\"function foo(){throw 'error';}\",\n        \"function foo(){throw\\\"error\\\";}\");\n    // Safari 3 needs a \"{\" around a single function\n    assertPrint(\"if (true) function foo(){return}\",\n        \"if(true){function foo(){return}}\");\n\n    assertPrint(\"var x = 10; { var y = 20; }\", \"var x=10;var y=20\");\n\n    assertPrint(\"while (x-- > 0);\", \"while(x-- >0);\");\n    assertPrint(\"x-- >> 1\", \"x-- >>1\");\n\n    assertPrint(\"(function () {})(); \",\n        \"(function(){})()\");\n\n    // Associativity\n    assertPrint(\"var a,b,c,d;a || (b&& c) && (a || d)\",\n        \"var a,b,c,d;a||b&&c&&(a||d)\");\n    assertPrint(\"var a,b,c; a || (b || c); a * (b * c); a | (b | c)\",\n        \"var a,b,c;a||b||c;a*b*c;a|b|c\");\n    assertPrint(\"var a,b,c; a / b / c;a / (b / c); a - (b - c);\",\n        \"var a,b,c;a/b/c;a/(b/c);a-(b-c)\");\n    assertPrint(\"var a,b; a = b = 3;\",\n        \"var a,b;a=b=3\");\n    assertPrint(\"var a,b,c,d; a = (b = c = (d = 3));\",\n        \"var a,b,c,d;a=b=c=d=3\");\n    assertPrint(\"var a,b,c; a += (b = c += 3);\",\n        \"var a,b,c;a+=b=c+=3\");\n    assertPrint(\"var a,b,c; a *= (b -= c);\",\n        \"var a,b,c;a*=b-=c\");\n\n    // Break scripts\n    assertPrint(\"'<script>'\", \"\\\"<script>\\\"\");\n    assertPrint(\"'</script>'\", \"\\\"<\\\\/script>\\\"\");\n    assertPrint(\"\\\"</script> </SCRIPT>\\\"\", \"\\\"<\\\\/script> <\\\\/SCRIPT>\\\"\");\n\n    assertPrint(\"'-->'\", \"\\\"--\\\\>\\\"\");\n    assertPrint(\"']]>'\", \"\\\"]]\\\\>\\\"\");\n    assertPrint(\"' --></script>'\", \"\\\" --\\\\><\\\\/script>\\\"\");\n\n    assertPrint(\"/--> <\\\\/script>/g\", \"/--\\\\> <\\\\/script>/g\");\n\n    // Break HTML start comments. Certain versions of Webkit\n    // begin an HTML comment when they see this.\n    assertPrint(\"'<!-- I am a string -->'\", \"\\\"<\\\\!-- I am a string --\\\\>\\\"\");\n\n    // Precedence\n    assertPrint(\"a ? delete b[0] : 3\", \"a?delete b[0]:3\");\n    assertPrint(\"(delete a[0])/10\", \"delete a[0]/10\");\n\n    // optional '()' for new\n\n    // simple new\n    assertPrint(\"new A\", \"new A\");\n    assertPrint(\"new A()\", \"new A\");\n    assertPrint(\"new A('x')\", \"new A(\\\"x\\\")\");\n\n    // calling instance method directly after new\n    assertPrint(\"new A().a()\", \"(new A).a()\");\n    assertPrint(\"(new A).a()\", \"(new A).a()\");\n\n    // this case should be fixed\n    assertPrint(\"new A('y').a()\", \"(new A(\\\"y\\\")).a()\");\n\n    // internal class\n    assertPrint(\"new A.B\", \"new A.B\");\n    assertPrint(\"new A.B()\", \"new A.B\");\n    assertPrint(\"new A.B('z')\", \"new A.B(\\\"z\\\")\");\n\n    // calling instance method directly after new internal class\n    assertPrint(\"(new A.B).a()\", \"(new A.B).a()\");\n    assertPrint(\"new A.B().a()\", \"(new A.B).a()\");\n    // this case should be fixed\n    assertPrint(\"new A.B('w').a()\", \"(new A.B(\\\"w\\\")).a()\");\n\n    // Operators: make sure we don't convert binary + and unary + into ++\n    assertPrint(\"x + +y\", \"x+ +y\");\n    assertPrint(\"x - (-y)\", \"x- -y\");\n    assertPrint(\"x++ +y\", \"x++ +y\");\n    assertPrint(\"x-- -y\", \"x-- -y\");\n    assertPrint(\"x++ -y\", \"x++-y\");\n\n    // Label\n    assertPrint(\"foo:for(;;){break foo;}\", \"foo:for(;;)break foo\");\n    assertPrint(\"foo:while(1){continue foo;}\", \"foo:while(1)continue foo\");\n\n    // Object literals.\n    assertPrint(\"({})\", \"({})\");\n    assertPrint(\"var x = {};\", \"var x={}\");\n    assertPrint(\"({}).x\", \"({}).x\");\n    assertPrint(\"({})['x']\", \"({})[\\\"x\\\"]\");\n    assertPrint(\"({}) instanceof Object\", \"({})instanceof Object\");\n    assertPrint(\"({}) || 1\", \"({})||1\");\n    assertPrint(\"1 || ({})\", \"1||{}\");\n    assertPrint(\"({}) ? 1 : 2\", \"({})?1:2\");\n    assertPrint(\"0 ? ({}) : 2\", \"0?{}:2\");\n    assertPrint(\"0 ? 1 : ({})\", \"0?1:{}\");\n    assertPrint(\"typeof ({})\", \"typeof{}\");\n    assertPrint(\"f({})\", \"f({})\");\n\n    // Anonymous function expressions.\n    assertPrint(\"(function(){})\", \"(function(){})\");\n    assertPrint(\"(function(){})()\", \"(function(){})()\");\n    assertPrint(\"(function(){})instanceof Object\",\n        \"(function(){})instanceof Object\");\n    assertPrint(\"(function(){}).bind().call()\",\n        \"(function(){}).bind().call()\");\n    assertPrint(\"var x = function() { };\", \"var x=function(){}\");\n    assertPrint(\"var x = function() { }();\", \"var x=function(){}()\");\n    assertPrint(\"(function() {}), 2\", \"(function(){}),2\");\n\n    // Name functions expression.\n    assertPrint(\"(function f(){})\", \"(function f(){})\");\n\n    // Function declaration.\n    assertPrint(\"function f(){}\", \"function f(){}\");\n\n    // Make sure we don't treat non-latin character escapes as raw strings.\n    assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({\\\"a\\\":4,\\\"\\\\u0100\\\":4})\");\n    assertPrint(\"({ a: 4, '\\\\u0100': 4 })\", \"({a:4,\\\"\\\\u0100\\\":4})\");\n\n    // Test if statement and for statements with single statements in body.\n    assertPrint(\"if (true) { alert();}\", \"if(true)alert()\");\n    assertPrint(\"if (false) {} else {alert(\\\"a\\\");}\",\n        \"if(false);else alert(\\\"a\\\")\");\n    assertPrint(\"for(;;) { alert();};\", \"for(;;)alert()\");\n\n    assertPrint(\"do { alert(); } while(true);\",\n        \"do alert();while(true)\");\n    assertPrint(\"myLabel: { alert();}\",\n        \"myLabel:alert()\");\n    assertPrint(\"myLabel: for(;;) continue myLabel;\",\n        \"myLabel:for(;;)continue myLabel\");\n\n    // Test nested var statement\n    assertPrint(\"if (true) var x; x = 4;\", \"if(true)var x;x=4\");\n\n    // Non-latin identifier. Make sure we keep them escaped.\n    assertPrint(\"\\\\u00fb\", \"\\\\u00fb\");\n    assertPrint(\"\\\\u00fa=1\", \"\\\\u00fa=1\");\n    assertPrint(\"function \\\\u00f9(){}\", \"function \\\\u00f9(){}\");\n    assertPrint(\"x.\\\\u00f8\", \"x.\\\\u00f8\");\n    assertPrint(\"x.\\\\u00f8\", \"x.\\\\u00f8\");\n    assertPrint(\"abc\\\\u4e00\\\\u4e01jkl\", \"abc\\\\u4e00\\\\u4e01jkl\");\n\n    // Test the right-associative unary operators for spurious parens\n    assertPrint(\"! ! true\", \"!!true\");\n    assertPrint(\"!(!(true))\", \"!!true\");\n    assertPrint(\"typeof(void(0))\", \"typeof void 0\");\n    assertPrint(\"typeof(void(!0))\", \"typeof void!0\");\n    assertPrint(\"+ - + + - + 3\", \"+-+ +-+3\"); // chained unary plus/minus\n    assertPrint(\"+(--x)\", \"+--x\");\n    assertPrint(\"-(++x)\", \"-++x\");\n\n    // needs a space to prevent an ambiguous parse\n    assertPrint(\"-(--x)\", \"- --x\");\n    assertPrint(\"!(~~5)\", \"!~~5\");\n    assertPrint(\"~(a/b)\", \"~(a/b)\");\n\n    // Preserve parens to overcome greedy binding of NEW\n    assertPrint(\"new (foo.bar()).factory(baz)\", \"new (foo.bar().factory)(baz)\");\n    assertPrint(\"new (bar()).factory(baz)\", \"new (bar().factory)(baz)\");\n    assertPrint(\"new (new foobar(x)).factory(baz)\",\n        \"new (new foobar(x)).factory(baz)\");\n\n    // Make sure that HOOK is right associative\n    assertPrint(\"a ? b : (c ? d : e)\", \"a?b:c?d:e\");\n    assertPrint(\"a ? (b ? c : d) : e\", \"a?b?c:d:e\");\n    assertPrint(\"(a ? b : c) ? d : e\", \"(a?b:c)?d:e\");\n\n    // Test nested ifs\n    assertPrint(\"if (x) if (y); else;\", \"if(x)if(y);else;\");\n\n    // Test comma.\n    assertPrint(\"a,b,c\", \"a,b,c\");\n    assertPrint(\"(a,b),c\", \"a,b,c\");\n    assertPrint(\"a,(b,c)\", \"a,b,c\");\n    assertPrint(\"x=a,b,c\", \"x=a,b,c\");\n    assertPrint(\"x=(a,b),c\", \"x=(a,b),c\");\n    assertPrint(\"x=a,(b,c)\", \"x=a,b,c\");\n    assertPrint(\"x=a,y=b,z=c\", \"x=a,y=b,z=c\");\n    assertPrint(\"x=(a,y=b,z=c)\", \"x=(a,y=b,z=c)\");\n    assertPrint(\"x=[a,b,c,d]\", \"x=[a,b,c,d]\");\n    assertPrint(\"x=[(a,b,c),d]\", \"x=[(a,b,c),d]\");\n    assertPrint(\"x=[(a,(b,c)),d]\", \"x=[(a,b,c),d]\");\n    assertPrint(\"x=[a,(b,c,d)]\", \"x=[a,(b,c,d)]\");\n    assertPrint(\"var x=(a,b)\", \"var x=(a,b)\");\n    assertPrint(\"var x=a,b,c\", \"var x=a,b,c\");\n    assertPrint(\"var x=(a,b),c\", \"var x=(a,b),c\");\n    assertPrint(\"var x=a,b=(c,d)\", \"var x=a,b=(c,d)\");\n    assertPrint(\"foo(a,b,c,d)\", \"foo(a,b,c,d)\");\n    assertPrint(\"foo((a,b,c),d)\", \"foo((a,b,c),d)\");\n    assertPrint(\"foo((a,(b,c)),d)\", \"foo((a,b,c),d)\");\n    assertPrint(\"f(a+b,(c,d,(e,f,g)))\", \"f(a+b,(c,d,e,f,g))\");\n    assertPrint(\"({}) , 1 , 2\", \"({}),1,2\");\n    assertPrint(\"({}) , {} , {}\", \"({}),{},{}\");\n\n    // EMPTY nodes\n    assertPrint(\"if (x){}\", \"if(x);\");\n    assertPrint(\"if(x);\", \"if(x);\");\n    assertPrint(\"if(x)if(y);\", \"if(x)if(y);\");\n    assertPrint(\"if(x){if(y);}\", \"if(x)if(y);\");\n    assertPrint(\"if(x){if(y){};;;}\", \"if(x)if(y);\");\n    assertPrint(\"if(x){;;function y(){};;}\", \"if(x){function y(){}}\");\n  }\n",
        "begin_line": 122,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 123,col 40)",
            "(line 124,col 5)-(line 124,col 44)",
            "(line 125,col 5)-(line 125,col 52)",
            "(line 126,col 5)-(line 126,col 40)",
            "(line 127,col 5)-(line 127,col 42)",
            "(line 128,col 5)-(line 128,col 77)",
            "(line 129,col 5)-(line 129,col 52)",
            "(line 130,col 5)-(line 130,col 41)",
            "(line 131,col 5)-(line 133,col 65)",
            "(line 136,col 5)-(line 137,col 43)",
            "(line 139,col 5)-(line 140,col 44)",
            "(line 142,col 5)-(line 142,col 68)",
            "(line 144,col 5)-(line 144,col 54)",
            "(line 145,col 5)-(line 145,col 39)",
            "(line 147,col 5)-(line 148,col 28)",
            "(line 151,col 5)-(line 152,col 39)",
            "(line 153,col 5)-(line 154,col 41)",
            "(line 155,col 5)-(line 156,col 43)",
            "(line 157,col 5)-(line 158,col 25)",
            "(line 159,col 5)-(line 160,col 33)",
            "(line 161,col 5)-(line 162,col 31)",
            "(line 163,col 5)-(line 164,col 29)",
            "(line 167,col 5)-(line 167,col 46)",
            "(line 168,col 5)-(line 168,col 50)",
            "(line 169,col 5)-(line 169,col 74)",
            "(line 171,col 5)-(line 171,col 38)",
            "(line 172,col 5)-(line 172,col 38)",
            "(line 173,col 5)-(line 173,col 60)",
            "(line 175,col 5)-(line 175,col 62)",
            "(line 179,col 5)-(line 179,col 78)",
            "(line 182,col 5)-(line 182,col 58)",
            "(line 183,col 5)-(line 183,col 54)",
            "(line 188,col 5)-(line 188,col 34)",
            "(line 189,col 5)-(line 189,col 36)",
            "(line 190,col 5)-(line 190,col 46)",
            "(line 193,col 5)-(line 193,col 46)",
            "(line 194,col 5)-(line 194,col 46)",
            "(line 197,col 5)-(line 197,col 56)",
            "(line 200,col 5)-(line 200,col 38)",
            "(line 201,col 5)-(line 201,col 40)",
            "(line 202,col 5)-(line 202,col 50)",
            "(line 205,col 5)-(line 205,col 50)",
            "(line 206,col 5)-(line 206,col 50)",
            "(line 208,col 5)-(line 208,col 60)",
            "(line 211,col 5)-(line 211,col 35)",
            "(line 212,col 5)-(line 212,col 37)",
            "(line 213,col 5)-(line 213,col 36)",
            "(line 214,col 5)-(line 214,col 36)",
            "(line 215,col 5)-(line 215,col 35)",
            "(line 218,col 5)-(line 218,col 67)",
            "(line 219,col 5)-(line 219,col 75)",
            "(line 222,col 5)-(line 222,col 32)",
            "(line 223,col 5)-(line 223,col 43)",
            "(line 224,col 5)-(line 224,col 36)",
            "(line 225,col 5)-(line 225,col 44)",
            "(line 226,col 5)-(line 226,col 67)",
            "(line 227,col 5)-(line 227,col 40)",
            "(line 228,col 5)-(line 228,col 38)",
            "(line 229,col 5)-(line 229,col 44)",
            "(line 230,col 5)-(line 230,col 42)",
            "(line 231,col 5)-(line 231,col 42)",
            "(line 232,col 5)-(line 232,col 43)",
            "(line 233,col 5)-(line 233,col 34)",
            "(line 236,col 5)-(line 236,col 52)",
            "(line 237,col 5)-(line 237,col 56)",
            "(line 238,col 5)-(line 239,col 43)",
            "(line 240,col 5)-(line 241,col 40)",
            "(line 242,col 5)-(line 242,col 65)",
            "(line 243,col 5)-(line 243,col 69)",
            "(line 244,col 5)-(line 244,col 58)",
            "(line 247,col 5)-(line 247,col 56)",
            "(line 250,col 5)-(line 250,col 52)",
            "(line 253,col 5)-(line 253,col 75)",
            "(line 254,col 5)-(line 254,col 69)",
            "(line 257,col 5)-(line 257,col 60)",
            "(line 258,col 5)-(line 259,col 39)",
            "(line 260,col 5)-(line 260,col 58)",
            "(line 262,col 5)-(line 263,col 34)",
            "(line 264,col 5)-(line 265,col 27)",
            "(line 266,col 5)-(line 267,col 43)",
            "(line 270,col 5)-(line 270,col 64)",
            "(line 273,col 5)-(line 273,col 38)",
            "(line 274,col 5)-(line 274,col 42)",
            "(line 275,col 5)-(line 275,col 64)",
            "(line 276,col 5)-(line 276,col 42)",
            "(line 277,col 5)-(line 277,col 42)",
            "(line 278,col 5)-(line 278,col 64)",
            "(line 281,col 5)-(line 281,col 38)",
            "(line 282,col 5)-(line 282,col 40)",
            "(line 283,col 5)-(line 283,col 52)",
            "(line 284,col 5)-(line 284,col 53)",
            "(line 285,col 5)-(line 285,col 45)",
            "(line 286,col 5)-(line 286,col 34)",
            "(line 287,col 5)-(line 287,col 34)",
            "(line 290,col 5)-(line 290,col 35)",
            "(line 291,col 5)-(line 291,col 34)",
            "(line 292,col 5)-(line 292,col 36)",
            "(line 295,col 5)-(line 295,col 80)",
            "(line 296,col 5)-(line 296,col 72)",
            "(line 297,col 5)-(line 298,col 44)",
            "(line 301,col 5)-(line 301,col 52)",
            "(line 302,col 5)-(line 302,col 52)",
            "(line 303,col 5)-(line 303,col 54)",
            "(line 306,col 5)-(line 306,col 60)",
            "(line 309,col 5)-(line 309,col 34)",
            "(line 310,col 5)-(line 310,col 36)",
            "(line 311,col 5)-(line 311,col 36)",
            "(line 312,col 5)-(line 312,col 38)",
            "(line 313,col 5)-(line 313,col 42)",
            "(line 314,col 5)-(line 314,col 40)",
            "(line 315,col 5)-(line 315,col 46)",
            "(line 316,col 5)-(line 316,col 50)",
            "(line 317,col 5)-(line 317,col 46)",
            "(line 318,col 5)-(line 318,col 50)",
            "(line 319,col 5)-(line 319,col 52)",
            "(line 320,col 5)-(line 320,col 50)",
            "(line 321,col 5)-(line 321,col 46)",
            "(line 322,col 5)-(line 322,col 46)",
            "(line 323,col 5)-(line 323,col 50)",
            "(line 324,col 5)-(line 324,col 54)",
            "(line 325,col 5)-(line 325,col 48)",
            "(line 326,col 5)-(line 326,col 52)",
            "(line 327,col 5)-(line 327,col 54)",
            "(line 328,col 5)-(line 328,col 62)",
            "(line 329,col 5)-(line 329,col 44)",
            "(line 330,col 5)-(line 330,col 48)",
            "(line 333,col 5)-(line 333,col 38)",
            "(line 334,col 5)-(line 334,col 36)",
            "(line 335,col 5)-(line 335,col 46)",
            "(line 336,col 5)-(line 336,col 48)",
            "(line 337,col 5)-(line 337,col 52)",
            "(line 338,col 5)-(line 338,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrintArray()",
        "snippet": "  public void testPrintArray() {\n    assertPrint(\"[void 0, void 0]\", \"[void 0,void 0]\");\n    assertPrint(\"[undefined, undefined]\", \"[undefined,undefined]\");\n    assertPrint(\"[ , , , undefined]\", \"[,,,undefined]\");\n    assertPrint(\"[ , , , 0]\", \"[,,,0]\");\n  }\n",
        "begin_line": 341,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 55)",
            "(line 343,col 5)-(line 343,col 67)",
            "(line 344,col 5)-(line 344,col 56)",
            "(line 345,col 5)-(line 345,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testHook()",
        "snippet": "  public void testHook() {\n    assertPrint(\"a ? b = 1 : c = 2\", \"a?b=1:c=2\");\n    assertPrint(\"x = a ? b = 1 : c = 2\", \"x=a?b=1:c=2\");\n    assertPrint(\"(x = a) ? b = 1 : c = 2\", \"(x=a)?b=1:c=2\");\n\n    assertPrint(\"x, a ? b = 1 : c = 2\", \"x,a?b=1:c=2\");\n    assertPrint(\"x, (a ? b = 1 : c = 2)\", \"x,a?b=1:c=2\");\n    assertPrint(\"(x, a) ? b = 1 : c = 2\", \"(x,a)?b=1:c=2\");\n\n    assertPrint(\"a ? (x, b) : c = 2\", \"a?(x,b):c=2\");\n    assertPrint(\"a ? b = 1 : (x,c)\", \"a?b=1:(x,c)\");\n\n    assertPrint(\"a ? b = 1 : c = 2 + x\", \"a?b=1:c=2+x\");\n    assertPrint(\"(a ? b = 1 : c = 2) + x\", \"(a?b=1:c=2)+x\");\n    assertPrint(\"a ? b = 1 : (c = 2) + x\", \"a?b=1:(c=2)+x\");\n\n    assertPrint(\"a ? (b?1:2) : 3\", \"a?b?1:2:3\");\n  }\n",
        "begin_line": 348,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 349,col 5)-(line 349,col 50)",
            "(line 350,col 5)-(line 350,col 56)",
            "(line 351,col 5)-(line 351,col 60)",
            "(line 353,col 5)-(line 353,col 55)",
            "(line 354,col 5)-(line 354,col 57)",
            "(line 355,col 5)-(line 355,col 59)",
            "(line 357,col 5)-(line 357,col 53)",
            "(line 358,col 5)-(line 358,col 52)",
            "(line 360,col 5)-(line 360,col 56)",
            "(line 361,col 5)-(line 361,col 60)",
            "(line 362,col 5)-(line 362,col 60)",
            "(line 364,col 5)-(line 364,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrintInOperatorInForLoop()",
        "snippet": "  public void testPrintInOperatorInForLoop() {\n    // Check for in expression in for's init expression.\n    // Check alone, with + (higher precedence), with ?: (lower precedence),\n    // and with conditional.\n    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a); i;) {}\",\n        \"var a={};for(var i=(\\\"length\\\"in a);i;);\");\n    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a) ? 0 : 1; i;) {}\",\n        \"var a={};for(var i=(\\\"length\\\"in a)?0:1;i;);\");\n    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a) + 1; i;) {}\",\n        \"var a={};for(var i=(\\\"length\\\"in a)+1;i;);\");\n    assertPrint(\"var a={};for (var i = (\\\"length\\\" in a|| \\\"size\\\" in a);;);\",\n        \"var a={};for(var i=(\\\"length\\\"in a)||(\\\"size\\\"in a);;);\");\n    assertPrint(\"var a={};for (var i = a || a || (\\\"size\\\" in a);;);\",\n        \"var a={};for(var i=a||a||(\\\"size\\\"in a);;);\");\n\n    // Test works with unary operators and calls.\n    assertPrint(\"var a={}; for (var i = -(\\\"length\\\" in a); i;) {}\",\n        \"var a={};for(var i=-(\\\"length\\\"in a);i;);\");\n    assertPrint(\"var a={};function b_(p){ return p;};\" +\n        \"for(var i=1,j=b_(\\\"length\\\" in a);;) {}\",\n        \"var a={};function b_(p){return p}\" +\n            \"for(var i=1,j=b_(\\\"length\\\"in a);;);\");\n\n    // Test we correctly handle an in operator in the test clause.\n    assertPrint(\"var a={}; for (;(\\\"length\\\" in a);) {}\",\n        \"var a={};for(;\\\"length\\\"in a;);\");\n  }\n",
        "begin_line": 367,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 371,col 5)-(line 372,col 52)",
            "(line 373,col 5)-(line 374,col 56)",
            "(line 375,col 5)-(line 376,col 54)",
            "(line 377,col 5)-(line 378,col 67)",
            "(line 379,col 5)-(line 380,col 55)",
            "(line 383,col 5)-(line 384,col 53)",
            "(line 385,col 5)-(line 388,col 52)",
            "(line 391,col 5)-(line 392,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testLiteralProperty()",
        "snippet": "  public void testLiteralProperty() {\n    assertPrint(\"(64).toString()\", \"(64).toString()\");\n  }\n",
        "begin_line": 395,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 396,col 5)-(line 396,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrint(java.lang.String, java.lang.String)",
        "snippet": "  private void assertPrint(String js, String expected) {\n    parse(expected); // validate the expected string is valid js\n    assertEquals(expected,\n        parsePrint(js, false, CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD));\n  }\n",
        "begin_line": 399,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 20)",
            "(line 401,col 5)-(line 402,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testAmbiguousElseClauses()",
        "snippet": "  public void testAmbiguousElseClauses() {\n    assertPrintNode(\"if(x)if(y);else;\",\n        new Node(Token.IF,\n            Node.newString(Token.NAME, \"x\"),\n            new Node(Token.BLOCK,\n                new Node(Token.IF,\n                    Node.newString(Token.NAME, \"y\"),\n                    new Node(Token.BLOCK),\n\n                    // ELSE clause for the inner if\n                    new Node(Token.BLOCK)))));\n\n    assertPrintNode(\"if(x){if(y);}else;\",\n        new Node(Token.IF,\n            Node.newString(Token.NAME, \"x\"),\n            new Node(Token.BLOCK,\n                new Node(Token.IF,\n                    Node.newString(Token.NAME, \"y\"),\n                    new Node(Token.BLOCK))),\n\n            // ELSE clause for the outer if\n            new Node(Token.BLOCK)));\n\n    assertPrintNode(\"if(x)if(y);else{if(z);}else;\",\n        new Node(Token.IF,\n            Node.newString(Token.NAME, \"x\"),\n            new Node(Token.BLOCK,\n                new Node(Token.IF,\n                    Node.newString(Token.NAME, \"y\"),\n                    new Node(Token.BLOCK),\n                    new Node(Token.BLOCK,\n                        new Node(Token.IF,\n                            Node.newString(Token.NAME, \"z\"),\n                            new Node(Token.BLOCK))))),\n\n            // ELSE clause for the outermost if\n            new Node(Token.BLOCK)));\n  }\n",
        "begin_line": 407,
        "end_line": 444,
        "comment": " else clause with the wrong if clause.",
        "child_ranges": [
            "(line 408,col 5)-(line 417,col 46)",
            "(line 419,col 5)-(line 428,col 36)",
            "(line 430,col 5)-(line 443,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testLineBreak()",
        "snippet": "  public void testLineBreak() {\n    // line break after function if in a statement context\n    assertLineBreak(\"function a() {}\\n\" +\n        \"function b() {}\",\n        \"function a(){}\\n\" +\n        \"function b(){}\\n\");\n\n    // line break after ; after a function\n    assertLineBreak(\"var a = {};\\n\" +\n        \"a.foo = function () {}\\n\" +\n        \"function b() {}\",\n        \"var a={};a.foo=function(){};\\n\" +\n        \"function b(){}\\n\");\n\n    // break after comma after a function\n    assertLineBreak(\"var a = {\\n\" +\n        \"  b: function() {},\\n\" +\n        \"  c: function() {}\\n\" +\n        \"};\\n\" +\n        \"alert(a);\",\n\n        \"var a={b:function(){},\\n\" +\n        \"c:function(){}};\\n\" +\n        \"alert(a)\");\n  }\n",
        "begin_line": 446,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 451,col 28)",
            "(line 454,col 5)-(line 458,col 28)",
            "(line 461,col 5)-(line 469,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertLineBreak(java.lang.String, java.lang.String)",
        "snippet": "  private void assertLineBreak(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, false, true,\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD));\n  }\n",
        "begin_line": 472,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 475,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPreferLineBreakAtEndOfFile()",
        "snippet": "  public void testPreferLineBreakAtEndOfFile() {\n    // short final line, no previous break, do nothing\n    assertLineBreakAtEndOfFile(\n        \"\\\"1234567890\\\";\",\n        \"\\\"1234567890\\\"\",\n        \"\\\"1234567890\\\"\");\n\n    // short final line, shift previous break to end\n    assertLineBreakAtEndOfFile(\n        \"\\\"123456789012345678901234567890\\\";\\\"1234567890\\\"\",\n        \"\\\"123456789012345678901234567890\\\";\\n\\\"1234567890\\\"\",\n        \"\\\"123456789012345678901234567890\\\";\\\"1234567890\\\";\\n\");\n\n    // long final line, no previous break, add a break at end\n    assertLineBreakAtEndOfFile(\n        \"\\\"1234567890\\\";\\\"12345678901234567890\\\";\",\n        \"\\\"1234567890\\\";\\\"12345678901234567890\\\"\",\n        \"\\\"1234567890\\\";\\\"12345678901234567890\\\";\\n\");\n\n    // long final line, previous break, add a break at end\n    assertLineBreakAtEndOfFile(\n        \"\\\"123456789012345678901234567890\\\";\\\"12345678901234567890\\\";\",\n        \"\\\"123456789012345678901234567890\\\";\\n\\\"12345678901234567890\\\"\",\n        \"\\\"123456789012345678901234567890\\\";\\n\\\"12345678901234567890\\\";\\n\");\n  }\n",
        "begin_line": 478,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 480,col 5)-(line 483,col 26)",
            "(line 486,col 5)-(line 489,col 64)",
            "(line 492,col 5)-(line 495,col 54)",
            "(line 498,col 5)-(line 501,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertLineBreakAtEndOfFile(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void assertLineBreakAtEndOfFile(String js,\n      String expectedWithoutBreakAtEnd, String expectedWithBreakAtEnd) {\n    assertEquals(expectedWithoutBreakAtEnd,\n        parsePrint(js, false, false, false, 30));\n    assertEquals(expectedWithBreakAtEnd,\n        parsePrint(js, false, false, true, 30));\n  }\n",
        "begin_line": 504,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 506,col 5)-(line 507,col 49)",
            "(line 508,col 5)-(line 509,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter()",
        "snippet": "  public void testPrettyPrinter() {\n    // Ensure that the pretty printer inserts line breaks at appropriate\n    // places.\n    assertPrettyPrint(\"(function(){})();\",\"(function() {\\n})();\\n\");\n    assertPrettyPrint(\"var a = (function() {});alert(a);\",\n        \"var a = function() {\\n};\\nalert(a);\\n\");\n\n    // Check we correctly handle putting brackets around all if clauses so\n    // we can put breakpoints inside statements.\n    assertPrettyPrint(\"if (1) {}\",\n        \"if(1) {\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"if (1) {alert(\\\"\\\");}\",\n        \"if(1) {\\n\" +\n        \"  alert(\\\"\\\")\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"if (1)alert(\\\"\\\");\",\n        \"if(1) {\\n\" +\n        \"  alert(\\\"\\\")\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"if (1) {alert();alert();}\",\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // Don't add blocks if they weren't there already.\n    assertPrettyPrint(\"label: alert();\",\n        \"label:alert();\\n\");\n\n    // But if statements and loops get blocks automagically.\n    assertPrettyPrint(\"if (1) alert();\",\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"for (;;) alert();\",\n        \"for(;;) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\"while (1) alert();\",\n        \"while(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // Do we put else clauses in blocks?\n    assertPrettyPrint(\"if (1) {} else {alert(a);}\",\n        \"if(1) {\\n\" +\n        \"}else {\\n  alert(a)\\n}\\n\");\n\n    // Do we add blocks to else clauses?\n    assertPrettyPrint(\"if (1) alert(a); else alert(b);\",\n        \"if(1) {\\n\" +\n        \"  alert(a)\\n\" +\n        \"}else {\\n\" +\n        \"  alert(b)\\n\" +\n        \"}\\n\");\n\n    // Do we put for bodies in blocks?\n    assertPrettyPrint(\"for(;;) { alert();}\",\n        \"for(;;) {\\n\" +\n         \"  alert()\\n\" +\n         \"}\\n\");\n    assertPrettyPrint(\"for(;;) {}\",\n        \"for(;;) {\\n\" +\n        \"}\\n\");\n    assertPrettyPrint(\"for(;;) { alert(); alert(); }\",\n        \"for(;;) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // How about do loops?\n    assertPrettyPrint(\"do { alert(); } while(true);\",\n        \"do {\\n\" +\n        \"  alert()\\n\" +\n        \"}while(true);\\n\");\n\n    // label?\n    assertPrettyPrint(\"myLabel: { alert();}\",\n        \"myLabel: {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    // Don't move the label on a loop, because then break {label} and\n    // continue {label} won't work.\n    assertPrettyPrint(\"myLabel: for(;;) continue myLabel;\",\n        \"myLabel:for(;;) {\\n\" +\n        \"  continue myLabel\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\"var a;\", \"var a;\\n\");\n  }\n",
        "begin_line": 512,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 68)",
            "(line 516,col 5)-(line 517,col 49)",
            "(line 521,col 5)-(line 523,col 15)",
            "(line 524,col 5)-(line 527,col 15)",
            "(line 528,col 5)-(line 531,col 15)",
            "(line 532,col 5)-(line 536,col 15)",
            "(line 539,col 5)-(line 540,col 28)",
            "(line 543,col 5)-(line 546,col 15)",
            "(line 547,col 5)-(line 550,col 15)",
            "(line 552,col 5)-(line 555,col 15)",
            "(line 558,col 5)-(line 560,col 36)",
            "(line 563,col 5)-(line 568,col 15)",
            "(line 571,col 5)-(line 574,col 16)",
            "(line 575,col 5)-(line 577,col 15)",
            "(line 578,col 5)-(line 582,col 15)",
            "(line 585,col 5)-(line 588,col 27)",
            "(line 591,col 5)-(line 594,col 15)",
            "(line 598,col 5)-(line 601,col 15)",
            "(line 603,col 5)-(line 603,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter2()",
        "snippet": "  public void testPrettyPrinter2() {\n    assertPrettyPrint(\n        \"if(true) f();\",\n        \"if(true) {\\n\" +\n        \"  f()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"if (true) { f() } else { g() }\",\n        \"if(true) {\\n\" +\n        \"  f()\\n\" +\n        \"}else {\\n\" +\n        \"  g()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"if(true) f(); for(;;) g();\",\n        \"if(true) {\\n\" +\n        \"  f()\\n\" +\n        \"}\\n\" +\n        \"for(;;) {\\n\" +\n        \"  g()\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 606,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 611,col 15)",
            "(line 613,col 5)-(line 619,col 15)",
            "(line 621,col 5)-(line 628,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter3()",
        "snippet": "  public void testPrettyPrinter3() {\n    assertPrettyPrint(\n        \"try {} catch(e) {}if (1) {alert();alert();}\",\n        \"try {\\n\" +\n        \"}catch(e) {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"try {} finally {}if (1) {alert();alert();}\",\n        \"try {\\n\" +\n        \"}finally {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"try {} catch(e) {} finally {} if (1) {alert();alert();}\",\n        \"try {\\n\" +\n        \"}catch(e) {\\n\" +\n        \"}finally {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 631,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 632,col 5)-(line 640,col 15)",
            "(line 642,col 5)-(line 650,col 15)",
            "(line 652,col 5)-(line 661,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrettyPrinter4()",
        "snippet": "  public void testPrettyPrinter4() {\n    assertPrettyPrint(\n        \"function f() {}if (1) {alert();}\",\n        \"function f() {\\n\" +\n        \"}\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"var f = function() {};if (1) {alert();}\",\n        \"var f = function() {\\n\" +\n        \"};\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"(function() {})();if (1) {alert();}\",\n        \"(function() {\\n\" +\n        \"})();\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n\n    assertPrettyPrint(\n        \"(function() {alert();alert();})();if (1) {alert();}\",\n        \"(function() {\\n\" +\n        \"  alert();\\n\" +\n        \"  alert()\\n\" +\n        \"})();\\n\" +\n        \"if(1) {\\n\" +\n        \"  alert()\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 664,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 671,col 15)",
            "(line 673,col 5)-(line 679,col 15)",
            "(line 681,col 5)-(line 687,col 15)",
            "(line 689,col 5)-(line 697,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotations()",
        "snippet": "  public void testTypeAnnotations() {\n    assertTypeAnnotations(\n        \"/** @constructor */ function Foo(){}\",\n        \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"function Foo() {\\n}\\n\");\n  }\n",
        "begin_line": 700,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 701,col 5)-(line 704,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsTypeDef()",
        "snippet": "  public void testTypeAnnotationsTypeDef() {\n    // TODO(johnlenz): It would be nice if there were some way to preserve\n    // typedefs but currently they are resolved into the basic types in the\n    // type registry.\n    assertTypeAnnotations(\n        \"/** @typedef {Array.<number>} */ goog.java.Long;\\n\"\n        + \"/** @param {!goog.java.Long} a*/\\n\"\n        + \"function f(a){};\\n\",\n        \"goog.java.Long;\\n\"\n        + \"/**\\n\"\n        + \" * @param {(Array.<number>|null)} a\\n\"\n        + \" * @return {undefined}\\n\"\n        + \" */\\n\"\n        + \"function f(a) {\\n}\\n\");\n  }\n",
        "begin_line": 707,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 720,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsAssign()",
        "snippet": "  public void testTypeAnnotationsAssign() {\n    assertTypeAnnotations(\"/** @constructor */ var Foo = function(){}\",\n        \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"var Foo = function() {\\n};\\n\");\n  }\n",
        "begin_line": 723,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 724,col 5)-(line 726,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsNamespace()",
        "snippet": "  public void testTypeAnnotationsNamespace() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\");\n  }\n",
        "begin_line": 729,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 730,col 5)-(line 734,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsMemberSubclass()",
        "snippet": "  public void testTypeAnnotationsMemberSubclass() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){};\"\n        + \"/** @constructor \\n @extends {a.Foo} */ a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @extends {a.Foo}\\n\"\n        + \" * @constructor\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 737,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 738,col 5)-(line 746,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsInterface()",
        "snippet": "  public void testTypeAnnotationsInterface() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @interface */ a.Foo = function(){};\"\n        + \"/** @interface \\n @extends {a.Foo} */ a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n * @extends {a.Foo}\\n\"\n        + \" * @interface\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 749,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 758,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsMultipleInterface()",
        "snippet": "  public void testTypeAnnotationsMultipleInterface() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @interface */ a.Foo1 = function(){};\"\n        + \"/** @interface */ a.Foo2 = function(){};\"\n        + \"/** @interface \\n @extends {a.Foo1} \\n @extends {a.Foo2} */\"\n        + \"a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.Foo1 = function() {\\n};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.Foo2 = function() {\\n};\\n\"\n        + \"/**\\n * @extends {a.Foo1}\\n\"\n        + \" * @extends {a.Foo2}\\n\"\n        + \" * @interface\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 761,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 762,col 5)-(line 775,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsMember()",
        "snippet": "  public void testTypeAnnotationsMember() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){}\"\n        + \"/** @param {string} foo\\n\"\n        + \"  * @return {number} */\\n\"\n        + \"a.Foo.prototype.foo = function(foo) { return 3; };\"\n        + \"/** @type {string|undefined} */\"\n        + \"a.Foo.prototype.bar = '';\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n\"\n        + \" * @param {string} foo\\n\"\n        + \" * @return {number}\\n\"\n        + \" */\\n\"\n        + \"a.Foo.prototype.foo = function(foo) {\\n  return 3\\n};\\n\"\n        + \"/** @type {string} */\\n\"\n        + \"a.Foo.prototype.bar = \\\"\\\";\\n\");\n  }\n",
        "begin_line": 778,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 795,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsImplements()",
        "snippet": "  public void testTypeAnnotationsImplements() {\n    assertTypeAnnotations(\"var a = {};\"\n        + \"/** @constructor */ a.Foo = function(){};\\n\"\n        + \"/** @interface */ a.I = function(){};\\n\"\n        + \"/** @interface */ a.I2 = function(){};\\n\"\n        + \"/** @constructor \\n @extends {a.Foo}\\n\"\n        + \" * @implements {a.I} \\n @implements {a.I2}\\n\"\n        + \"*/ a.Bar = function(){}\",\n        \"var a = {};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n        + \"a.Foo = function() {\\n};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.I = function() {\\n};\\n\"\n        + \"/**\\n * @interface\\n */\\n\"\n        + \"a.I2 = function() {\\n};\\n\"\n        + \"/**\\n * @return {undefined}\\n * @extends {a.Foo}\\n\"\n        + \" * @implements {a.I}\\n\"\n        + \" * @implements {a.I2}\\n * @constructor\\n */\\n\"\n        + \"a.Bar = function() {\\n};\\n\");\n  }\n",
        "begin_line": 798,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 799,col 5)-(line 816,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsDispatcher1()",
        "snippet": "  public void testTypeAnnotationsDispatcher1() {\n    assertTypeAnnotations(\n        \"var a = {};\\n\" +\n        \"/** \\n\" +\n        \" * @constructor \\n\" +\n        \" * @javadispatch \\n\" +\n        \" */\\n\" +\n        \"a.Foo = function(){}\",\n        \"var a = {};\\n\" +\n        \"/**\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" * @constructor\\n\" +\n        \" * @javadispatch\\n\" +\n        \" */\\n\" +\n        \"a.Foo = function() {\\n\" +\n        \"};\\n\");\n  }\n",
        "begin_line": 819,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 834,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTypeAnnotationsDispatcher2()",
        "snippet": "  public void testTypeAnnotationsDispatcher2() {\n    assertTypeAnnotations(\n        \"var a = {};\\n\" +\n        \"/** \\n\" +\n        \" * @constructor \\n\" +\n        \" */\\n\" +\n        \"a.Foo = function(){}\\n\" +\n        \"/**\\n\" +\n        \" * @javadispatch\\n\" +\n        \" */\\n\" +\n        \"a.Foo.prototype.foo = function() {};\",\n\n        \"var a = {};\\n\" +\n        \"/**\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\\n\" +\n        \"a.Foo = function() {\\n\" +\n        \"};\\n\" +\n        \"/**\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" * @javadispatch\\n\" +\n        \" */\\n\" +\n        \"a.Foo.prototype.foo = function() {\\n\" +\n        \"};\\n\");\n  }\n",
        "begin_line": 837,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 861,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testU2UFunctionTypeAnnotation()",
        "snippet": "  public void testU2UFunctionTypeAnnotation() {\n    assertTypeAnnotations(\n        \"/** @type {!Function} */ var x = function() {}\",\n        \"/**\\n * @constructor\\n */\\nvar x = function() {\\n};\\n\");\n  }\n",
        "begin_line": 864,
        "end_line": 868,
        "comment": "",
        "child_ranges": [
            "(line 865,col 5)-(line 867,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testEmitUnknownParamTypesAsAllType()",
        "snippet": "  public void testEmitUnknownParamTypesAsAllType() {\n    assertTypeAnnotations(\n        \"var a = function(x) {}\",\n        \"/**\\n\" +\n        \" * @param {*} x\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {\\n};\\n\");\n  }\n",
        "begin_line": 870,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 871,col 5)-(line 877,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testOptionalTypesAnnotation()",
        "snippet": "  public void testOptionalTypesAnnotation() {\n    assertTypeAnnotations(\n        \"/**\\n\" +\n        \" * @param {string=} x \\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {}\",\n        \"/**\\n\" +\n        \" * @param {string=} x\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {\\n};\\n\");\n  }\n",
        "begin_line": 880,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 890,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testVariableArgumentsTypesAnnotation()",
        "snippet": "  public void testVariableArgumentsTypesAnnotation() {\n    assertTypeAnnotations(\n        \"/**\\n\" +\n        \" * @param {...string} x \\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {}\",\n        \"/**\\n\" +\n        \" * @param {...string} x\\n\" +\n        \" * @return {undefined}\\n\" +\n        \" */\\n\" +\n        \"var a = function(x) {\\n};\\n\");\n  }\n",
        "begin_line": 893,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 894,col 5)-(line 903,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testTempConstructor()",
        "snippet": "  public void testTempConstructor() {\n    assertTypeAnnotations(\n        \"var x = function() {\\n/**\\n * @constructor\\n */\\nfunction t1() {}\\n\" +\n        \" /**\\n * @constructor\\n */\\nfunction t2() {}\\n\" +\n        \" t1.prototype = t2.prototype}\",\n        \"/**\\n * @return {undefined}\\n */\\nvar x = function() {\\n\" +\n        \"  /**\\n * @return {undefined}\\n * @constructor\\n */\\n\" +\n        \"function t1() {\\n  }\\n\" +\n        \"  /**\\n * @return {undefined}\\n * @constructor\\n */\\n\" +\n        \"function t2() {\\n  }\\n\" +\n        \"  t1.prototype = t2.prototype\\n};\\n\"\n    );\n  }\n",
        "begin_line": 906,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 907,col 5)-(line 917,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testEnumAnnotation1()",
        "snippet": "  public void testEnumAnnotation1() {\n    assertTypeAnnotations(\n        \"/** @enum {string} */ var Enum = {FOO: 'x', BAR: 'y'};\",\n        \"/** @enum {string} */\\nvar Enum = {FOO:\\\"x\\\", BAR:\\\"y\\\"};\\n\");\n  }\n",
        "begin_line": 920,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 921,col 5)-(line 923,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testEnumAnnotation2()",
        "snippet": "  public void testEnumAnnotation2() {\n    assertTypeAnnotations(\n        \"var goog = goog || {};\" +\n        \"/** @enum {string} */ goog.Enum = {FOO: 'x', BAR: 'y'};\" +\n        \"/** @const */ goog.Enum2 = goog.x ? {} : goog.Enum;\",\n        \"var goog = goog || {};\\n\" +\n        \"/** @enum {string} */\\ngoog.Enum = {FOO:\\\"x\\\", BAR:\\\"y\\\"};\\n\" +\n        \"/** @type {(Object|{})} */\\ngoog.Enum2 = goog.x ? {} : goog.Enum;\\n\");\n  }\n",
        "begin_line": 926,
        "end_line": 934,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 933,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrettyPrint(java.lang.String, java.lang.String)",
        "snippet": "  private void assertPrettyPrint(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, true, false,\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD));\n  }\n",
        "begin_line": 936,
        "end_line": 940,
        "comment": "",
        "child_ranges": [
            "(line 937,col 5)-(line 939,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertTypeAnnotations(java.lang.String, java.lang.String)",
        "snippet": "  private void assertTypeAnnotations(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, true, false,\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD, true));\n  }\n",
        "begin_line": 942,
        "end_line": 946,
        "comment": "",
        "child_ranges": [
            "(line 943,col 5)-(line 945,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testSubtraction()",
        "snippet": "  public void testSubtraction() {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(\"x - -4\");\n    assertEquals(0, compiler.getErrorCount());\n\n    assertEquals(\n        \"x- -4\",\n        new CodePrinter.Builder(n).setLineLengthThreshold(\n            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build());\n  }\n",
        "begin_line": 948,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 949,col 5)-(line 949,col 39)",
            "(line 950,col 5)-(line 950,col 46)",
            "(line 951,col 5)-(line 951,col 46)",
            "(line 953,col 5)-(line 956,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFunctionWithCall()",
        "snippet": "  public void testFunctionWithCall() {\n    assertPrint(\n        \"var user = new function() {\"\n        + \"alert(\\\"foo\\\")}\",\n        \"var user=new function(){\"\n        + \"alert(\\\"foo\\\")}\");\n    assertPrint(\n        \"var user = new function() {\"\n        + \"this.name = \\\"foo\\\";\"\n        + \"this.local = function(){alert(this.name)};}\",\n        \"var user=new function(){\"\n        + \"this.name=\\\"foo\\\";\"\n        + \"this.local=function(){alert(this.name)}}\");\n  }\n",
        "begin_line": 959,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 960,col 5)-(line 964,col 29)",
            "(line 965,col 5)-(line 971,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testLineLength()",
        "snippet": "  public void testLineLength() {\n    // list\n    assertLineLength(\"var aba,bcb,cdc\",\n        \"var aba,bcb,\" +\n        \"\\ncdc\");\n\n    // operators, and two breaks\n    assertLineLength(\n        \"\\\"foo\\\"+\\\"bar,baz,bomb\\\"+\\\"whee\\\"+\\\";long-string\\\"\\n+\\\"aaa\\\"\",\n        \"\\\"foo\\\"+\\\"bar,baz,bomb\\\"+\" +\n        \"\\n\\\"whee\\\"+\\\";long-string\\\"+\" +\n        \"\\n\\\"aaa\\\"\");\n\n    // assignment\n    assertLineLength(\"var abazaba=1234\",\n        \"var abazaba=\" +\n        \"\\n1234\");\n\n    // statements\n    assertLineLength(\"var abab=1;var bab=2\",\n        \"var abab=1;\" +\n        \"\\nvar bab=2\");\n\n    // don't break regexes\n    assertLineLength(\"var a=/some[reg](ex),with.*we?rd|chars/i;var b=a\",\n        \"var a=/some[reg](ex),with.*we?rd|chars/i;\" +\n        \"\\nvar b=a\");\n\n    // don't break strings\n    assertLineLength(\"var a=\\\"foo,{bar};baz\\\";var b=a\",\n        \"var a=\\\"foo,{bar};baz\\\";\" +\n        \"\\nvar b=a\");\n\n    // don't break before post inc/dec\n    assertLineLength(\"var a=\\\"a\\\";a++;var b=\\\"bbb\\\";\",\n        \"var a=\\\"a\\\";a++;\\n\" +\n        \"var b=\\\"bbb\\\"\");\n  }\n",
        "begin_line": 974,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 978,col 17)",
            "(line 981,col 5)-(line 985,col 21)",
            "(line 988,col 5)-(line 990,col 18)",
            "(line 993,col 5)-(line 995,col 23)",
            "(line 998,col 5)-(line 1000,col 21)",
            "(line 1003,col 5)-(line 1005,col 21)",
            "(line 1008,col 5)-(line 1010,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertLineLength(java.lang.String, java.lang.String)",
        "snippet": "  private void assertLineLength(String js, String expected) {\n    assertEquals(expected,\n        parsePrint(js, false, true, 10));\n  }\n",
        "begin_line": 1013,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1015,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testParsePrintParse()",
        "snippet": "  public void testParsePrintParse() {\n    testReparse(\"3;\");\n    testReparse(\"var a = b;\");\n    testReparse(\"var x, y, z;\");\n    testReparse(\"try { foo() } catch(e) { bar() }\");\n    testReparse(\"try { foo() } catch(e) { bar() } finally { stuff() }\");\n    testReparse(\"try { foo() } finally { stuff() }\");\n    testReparse(\"throw 'me'\");\n    testReparse(\"function foo(a) { return a + 4; }\");\n    testReparse(\"function foo() { return; }\");\n    testReparse(\"var a = function(a, b) { foo(); return a + b; }\");\n    testReparse(\"b = [3, 4, 'paul', \\\"Buchhe it\\\",,5];\");\n    testReparse(\"v = (5, 6, 7, 8)\");\n    testReparse(\"d = 34.0; x = 0; y = .3; z = -22\");\n    testReparse(\"d = -x; t = !x + ~y;\");\n    testReparse(\"'hi'; /* just a test */ stuff(a,b) \\n\" +\n            \" foo(); // and another \\n\" +\n            \" bar();\");\n    testReparse(\"a = b++ + ++c; a = b++-++c; a = - --b; a = - ++b;\");\n    testReparse(\"a++; b= a++; b = ++a; b = a--; b = --a; a+=2; b-=5\");\n    testReparse(\"a = (2 + 3) * 4;\");\n    testReparse(\"a = 1 + (2 + 3) + 4;\");\n    testReparse(\"x = a ? b : c; x = a ? (b,3,5) : (foo(),bar());\");\n    testReparse(\"a = b | c || d ^ e \" +\n            \"&& f & !g != h << i <= j < k >>> l > m * n % !o\");\n    testReparse(\"a == b; a != b; a === b; a == b == a;\" +\n            \" (a == b) == a; a == (b == a);\");\n    testReparse(\"if (a > b) a = b; if (b < 3) a = 3; else c = 4;\");\n    testReparse(\"if (a == b) { a++; } if (a == 0) { a++; } else { a --; }\");\n    testReparse(\"for (var i in a) b += i;\");\n    testReparse(\"for (var i = 0; i < 10; i++){ b /= 2;\" +\n            \" if (b == 2)break;else continue;}\");\n    testReparse(\"for (x = 0; x < 10; x++) a /= 2;\");\n    testReparse(\"for (;;) a++;\");\n    testReparse(\"while(true) { blah(); }while(true) blah();\");\n    testReparse(\"do stuff(); while(a>b);\");\n    testReparse(\"[0, null, , true, false, this];\");\n    testReparse(\"s.replace(/absc/, 'X').replace(/ab/gi, 'Y');\");\n    testReparse(\"new Foo; new Bar(a, b,c);\");\n    testReparse(\"with(foo()) { x = z; y = t; } with(bar()) a = z;\");\n    testReparse(\"delete foo['bar']; delete foo;\");\n    testReparse(\"var x = { 'a':'paul', 1:'3', 2:(3,4) };\");\n    testReparse(\"switch(a) { case 2: case 3: stuff(); break;\" +\n        \"case 4: morestuff(); break; default: done();}\");\n    testReparse(\"x = foo['bar'] + foo['my stuff'] + foo[bar] + f.stuff;\");\n    testReparse(\"a.v = b.v; x['foo'] = y['zoo'];\");\n    testReparse(\"'test' in x; 3 in x; a in x;\");\n    testReparse(\"'foo\\\"bar' + \\\"foo'c\\\" + 'stuff\\\\n and \\\\\\\\more'\");\n    testReparse(\"x.__proto__;\");\n  }\n",
        "begin_line": 1018,
        "end_line": 1067,
        "comment": "",
        "child_ranges": [
            "(line 1019,col 5)-(line 1019,col 22)",
            "(line 1020,col 5)-(line 1020,col 30)",
            "(line 1021,col 5)-(line 1021,col 32)",
            "(line 1022,col 5)-(line 1022,col 52)",
            "(line 1023,col 5)-(line 1023,col 72)",
            "(line 1024,col 5)-(line 1024,col 53)",
            "(line 1025,col 5)-(line 1025,col 30)",
            "(line 1026,col 5)-(line 1026,col 53)",
            "(line 1027,col 5)-(line 1027,col 46)",
            "(line 1028,col 5)-(line 1028,col 67)",
            "(line 1029,col 5)-(line 1029,col 57)",
            "(line 1030,col 5)-(line 1030,col 36)",
            "(line 1031,col 5)-(line 1031,col 52)",
            "(line 1032,col 5)-(line 1032,col 40)",
            "(line 1033,col 5)-(line 1035,col 23)",
            "(line 1036,col 5)-(line 1036,col 69)",
            "(line 1037,col 5)-(line 1037,col 70)",
            "(line 1038,col 5)-(line 1038,col 36)",
            "(line 1039,col 5)-(line 1039,col 40)",
            "(line 1040,col 5)-(line 1040,col 67)",
            "(line 1041,col 5)-(line 1042,col 63)",
            "(line 1043,col 5)-(line 1044,col 46)",
            "(line 1045,col 5)-(line 1045,col 67)",
            "(line 1046,col 5)-(line 1046,col 76)",
            "(line 1047,col 5)-(line 1047,col 44)",
            "(line 1048,col 5)-(line 1049,col 49)",
            "(line 1050,col 5)-(line 1050,col 52)",
            "(line 1051,col 5)-(line 1051,col 33)",
            "(line 1052,col 5)-(line 1052,col 62)",
            "(line 1053,col 5)-(line 1053,col 43)",
            "(line 1054,col 5)-(line 1054,col 51)",
            "(line 1055,col 5)-(line 1055,col 64)",
            "(line 1056,col 5)-(line 1056,col 45)",
            "(line 1057,col 5)-(line 1057,col 68)",
            "(line 1058,col 5)-(line 1058,col 50)",
            "(line 1059,col 5)-(line 1059,col 59)",
            "(line 1060,col 5)-(line 1061,col 57)",
            "(line 1062,col 5)-(line 1062,col 74)",
            "(line 1063,col 5)-(line 1063,col 51)",
            "(line 1064,col 5)-(line 1064,col 48)",
            "(line 1065,col 5)-(line 1065,col 68)",
            "(line 1066,col 5)-(line 1066,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testReparse(java.lang.String)",
        "snippet": "  private void testReparse(String code) {\n    Compiler compiler = new Compiler();\n    Node parse1 = parse(code);\n    Node parse2 = parse(new CodePrinter.Builder(parse1).build());\n    String explanation = parse1.checkTreeEquals(parse2);\n    assertNull(\"\\nExpected: \" + compiler.toSource(parse1) +\n        \"\\nResult: \" + compiler.toSource(parse2) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 1069,
        "end_line": 1077,
        "comment": "",
        "child_ranges": [
            "(line 1070,col 5)-(line 1070,col 39)",
            "(line 1071,col 5)-(line 1071,col 30)",
            "(line 1072,col 5)-(line 1072,col 65)",
            "(line 1073,col 5)-(line 1073,col 56)",
            "(line 1074,col 5)-(line 1076,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testDoLoopIECompatiblity()",
        "snippet": "  public void testDoLoopIECompatiblity() {\n    // Do loops within IFs cause syntax errors in IE6 and IE7.\n    assertPrint(\"function f(){if(e1){do foo();while(e2)}else foo()}\",\n        \"function f(){if(e1){do foo();while(e2)}else foo()}\");\n\n    assertPrint(\"function f(){if(e1)do foo();while(e2)else foo()}\",\n        \"function f(){if(e1){do foo();while(e2)}else foo()}\");\n\n    assertPrint(\"if(x){do{foo()}while(y)}else bar()\",\n        \"if(x){do foo();while(y)}else bar()\");\n\n    assertPrint(\"if(x)do{foo()}while(y);else bar()\",\n        \"if(x){do foo();while(y)}else bar()\");\n\n    assertPrint(\"if(x){do{foo()}while(y)}\",\n        \"if(x){do foo();while(y)}\");\n\n    assertPrint(\"if(x)do{foo()}while(y);\",\n        \"if(x){do foo();while(y)}\");\n\n    assertPrint(\"if(x)A:do{foo()}while(y);\",\n        \"if(x){A:do foo();while(y)}\");\n\n    assertPrint(\"var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);\",\n        \"var i=0;a:do{b:do{i++;break b}while(0)}while(0)\");\n  }\n",
        "begin_line": 1079,
        "end_line": 1104,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 5)-(line 1082,col 62)",
            "(line 1084,col 5)-(line 1085,col 62)",
            "(line 1087,col 5)-(line 1088,col 46)",
            "(line 1090,col 5)-(line 1091,col 46)",
            "(line 1093,col 5)-(line 1094,col 36)",
            "(line 1096,col 5)-(line 1097,col 36)",
            "(line 1099,col 5)-(line 1100,col 38)",
            "(line 1102,col 5)-(line 1103,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFunctionSafariCompatiblity()",
        "snippet": "  public void testFunctionSafariCompatiblity() {\n    // Functions within IFs cause syntax errors on Safari.\n    assertPrint(\"function f(){if(e1){function goo(){return true}}else foo()}\",\n        \"function f(){if(e1){function goo(){return true}}else foo()}\");\n\n    assertPrint(\"function f(){if(e1)function goo(){return true}else foo()}\",\n        \"function f(){if(e1){function goo(){return true}}else foo()}\");\n\n    assertPrint(\"if(e1){function goo(){return true}}\",\n        \"if(e1){function goo(){return true}}\");\n\n    assertPrint(\"if(e1)function goo(){return true}\",\n        \"if(e1){function goo(){return true}}\");\n\n    assertPrint(\"if(e1)A:function goo(){return true}\",\n        \"if(e1){A:function goo(){return true}}\");\n  }\n",
        "begin_line": 1106,
        "end_line": 1122,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1109,col 71)",
            "(line 1111,col 5)-(line 1112,col 71)",
            "(line 1114,col 5)-(line 1115,col 47)",
            "(line 1117,col 5)-(line 1118,col 47)",
            "(line 1120,col 5)-(line 1121,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testExponents()",
        "snippet": "  public void testExponents() {\n    assertPrintNumber(\"1\", 1);\n    assertPrintNumber(\"10\", 10);\n    assertPrintNumber(\"100\", 100);\n    assertPrintNumber(\"1E3\", 1000);\n    assertPrintNumber(\"1E4\", 10000);\n    assertPrintNumber(\"1E5\", 100000);\n    assertPrintNumber(\"-1\", -1);\n    assertPrintNumber(\"-10\", -10);\n    assertPrintNumber(\"-100\", -100);\n    assertPrintNumber(\"-1E3\", -1000);\n    assertPrintNumber(\"-12341234E4\", -123412340000L);\n    assertPrintNumber(\"1E18\", 1000000000000000000L);\n    assertPrintNumber(\"1E5\", 100000.0);\n    assertPrintNumber(\"100000.1\", 100000.1);\n\n    assertPrintNumber(\"1.0E-6\", 0.000001);\n  }\n",
        "begin_line": 1124,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1125,col 5)-(line 1125,col 30)",
            "(line 1126,col 5)-(line 1126,col 32)",
            "(line 1127,col 5)-(line 1127,col 34)",
            "(line 1128,col 5)-(line 1128,col 35)",
            "(line 1129,col 5)-(line 1129,col 36)",
            "(line 1130,col 5)-(line 1130,col 37)",
            "(line 1131,col 5)-(line 1131,col 32)",
            "(line 1132,col 5)-(line 1132,col 34)",
            "(line 1133,col 5)-(line 1133,col 36)",
            "(line 1134,col 5)-(line 1134,col 37)",
            "(line 1135,col 5)-(line 1135,col 53)",
            "(line 1136,col 5)-(line 1136,col 52)",
            "(line 1137,col 5)-(line 1137,col 39)",
            "(line 1138,col 5)-(line 1138,col 44)",
            "(line 1140,col 5)-(line 1140,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrintNumber(java.lang.String, double)",
        "snippet": "  private void assertPrintNumber(String expected, double number) {\n    assertPrint(String.valueOf(number), expected);\n    assertPrintNode(expected, Node.newNumber(number));\n  }\n",
        "begin_line": 1145,
        "end_line": 1148,
        "comment": " negative numbers do not parse consistently from strings.",
        "child_ranges": [
            "(line 1146,col 5)-(line 1146,col 50)",
            "(line 1147,col 5)-(line 1147,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.assertPrintNumber(java.lang.String, int)",
        "snippet": "  private void assertPrintNumber(String expected, int number) {\n    assertPrint(String.valueOf(number), expected);\n    assertPrintNode(expected, Node.newNumber(number));\n  }\n",
        "begin_line": 1150,
        "end_line": 1153,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1151,col 50)",
            "(line 1152,col 5)-(line 1152,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testDirectEval()",
        "snippet": "  public void testDirectEval() {\n    assertPrint(\"eval('1');\", \"eval(\\\"1\\\")\");\n  }\n",
        "begin_line": 1155,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1156,col 5)-(line 1156,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIndirectEval()",
        "snippet": "  public void testIndirectEval() {\n    Node n = parse(\"eval('1');\");\n    assertPrintNode(\"eval(\\\"1\\\")\", n);\n    n.getFirstChild().getFirstChild().getFirstChild().putBooleanProp(\n        Node.DIRECT_EVAL, false);\n    assertPrintNode(\"(0,eval)(\\\"1\\\")\", n);\n  }\n",
        "begin_line": 1159,
        "end_line": 1165,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 5)-(line 1160,col 33)",
            "(line 1161,col 5)-(line 1161,col 38)",
            "(line 1162,col 5)-(line 1163,col 33)",
            "(line 1164,col 5)-(line 1164,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFreeCall1()",
        "snippet": "  public void testFreeCall1() {\n    assertPrint(\"foo(a);\", \"foo(a)\");\n    assertPrint(\"x.foo(a);\", \"x.foo(a)\");\n  }\n",
        "begin_line": 1167,
        "end_line": 1170,
        "comment": "",
        "child_ranges": [
            "(line 1168,col 5)-(line 1168,col 37)",
            "(line 1169,col 5)-(line 1169,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFreeCall2()",
        "snippet": "  public void testFreeCall2() {\n    Node n = parse(\"foo(a);\");\n    assertPrintNode(\"foo(a)\", n);\n    Node call =  n.getFirstChild().getFirstChild();\n    assertTrue(call.isCall());\n    call.putBooleanProp(Node.FREE_CALL, true);\n    assertPrintNode(\"foo(a)\", n);\n  }\n",
        "begin_line": 1172,
        "end_line": 1179,
        "comment": "",
        "child_ranges": [
            "(line 1173,col 5)-(line 1173,col 30)",
            "(line 1174,col 5)-(line 1174,col 33)",
            "(line 1175,col 5)-(line 1175,col 51)",
            "(line 1176,col 5)-(line 1176,col 30)",
            "(line 1177,col 5)-(line 1177,col 46)",
            "(line 1178,col 5)-(line 1178,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testFreeCall3()",
        "snippet": "  public void testFreeCall3() {\n    Node n = parse(\"x.foo(a);\");\n    assertPrintNode(\"x.foo(a)\", n);\n    Node call =  n.getFirstChild().getFirstChild();\n    assertTrue(call.isCall());\n    call.putBooleanProp(Node.FREE_CALL, true);\n    assertPrintNode(\"(0,x.foo)(a)\", n);\n  }\n",
        "begin_line": 1181,
        "end_line": 1188,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 5)-(line 1182,col 32)",
            "(line 1183,col 5)-(line 1183,col 35)",
            "(line 1184,col 5)-(line 1184,col 51)",
            "(line 1185,col 5)-(line 1185,col 30)",
            "(line 1186,col 5)-(line 1186,col 46)",
            "(line 1187,col 5)-(line 1187,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testPrintScript()",
        "snippet": "  public void testPrintScript() {\n    // Verify that SCRIPT nodes not marked as synthetic are printed as\n    // blocks.\n    Node ast = new Node(Token.SCRIPT,\n        new Node(Token.EXPR_RESULT, Node.newString(\"f\")),\n        new Node(Token.EXPR_RESULT, Node.newString(\"g\")));\n    String result = new CodePrinter.Builder(ast).setPrettyPrint(true).build();\n    assertEquals(\"\\\"f\\\";\\n\\\"g\\\";\\n\", result);\n  }\n",
        "begin_line": 1190,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1195,col 58)",
            "(line 1196,col 5)-(line 1196,col 78)",
            "(line 1197,col 5)-(line 1197,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit()",
        "snippet": "  public void testObjectLit() {\n    assertPrint(\"({x:1})\", \"({x:1})\");\n    assertPrint(\"var x=({x:1})\", \"var x={x:1}\");\n    assertPrint(\"var x={'x':1}\", \"var x={\\\"x\\\":1}\");\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n  }\n",
        "begin_line": 1200,
        "end_line": 1205,
        "comment": "",
        "child_ranges": [
            "(line 1201,col 5)-(line 1201,col 38)",
            "(line 1202,col 5)-(line 1202,col 48)",
            "(line 1203,col 5)-(line 1203,col 52)",
            "(line 1204,col 5)-(line 1204,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit2()",
        "snippet": "  public void testObjectLit2() {\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n    assertPrint(\"var x={'1':1}\", \"var x={1:1}\");\n    assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");\n    assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");\n\n  }\n",
        "begin_line": 1207,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1208,col 5)-(line 1208,col 46)",
            "(line 1209,col 5)-(line 1209,col 48)",
            "(line 1210,col 5)-(line 1210,col 56)",
            "(line 1211,col 5)-(line 1211,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit3()",
        "snippet": "  public void testObjectLit3() {\n    assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");\n    assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");\n    assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");\n    assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");\n    assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");\n  }\n",
        "begin_line": 1215,
        "end_line": 1226,
        "comment": "",
        "child_ranges": [
            "(line 1216,col 5)-(line 1217,col 33)",
            "(line 1218,col 5)-(line 1219,col 33)",
            "(line 1220,col 5)-(line 1221,col 40)",
            "(line 1222,col 5)-(line 1223,col 40)",
            "(line 1224,col 5)-(line 1225,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testObjectLit4()",
        "snippet": "  public void testObjectLit4() {\n    // More than 128 bits.\n    assertPrint(\n        \"var x={\\\"123456789012345671234567890123456712345678901234567\\\":1}\",\n        \"var x={\\\"123456789012345671234567890123456712345678901234567\\\":1}\");\n  }\n",
        "begin_line": 1228,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 5)-(line 1232,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testGetter()",
        "snippet": "  public void testGetter() {\n    assertPrint(\"var x = {}\", \"var x={}\");\n    assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");\n    assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");\n\n    assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");\n\n    assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");\n  }\n",
        "begin_line": 1235,
        "end_line": 1253,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1236,col 42)",
            "(line 1237,col 5)-(line 1237,col 77)",
            "(line 1238,col 5)-(line 1240,col 37)",
            "(line 1242,col 5)-(line 1244,col 39)",
            "(line 1246,col 5)-(line 1248,col 35)",
            "(line 1250,col 5)-(line 1252,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testSetter()",
        "snippet": "  public void testSetter() {\n    assertPrint(\"var x = {}\", \"var x={}\");\n    assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");\n\n    assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");\n\n    assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");\n  }\n",
        "begin_line": 1255,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1256,col 5)-(line 1256,col 42)",
            "(line 1257,col 5)-(line 1259,col 37)",
            "(line 1261,col 5)-(line 1263,col 39)",
            "(line 1265,col 5)-(line 1267,col 36)",
            "(line 1269,col 5)-(line 1271,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testNegCollapse()",
        "snippet": "  public void testNegCollapse() {\n    // Collapse the negative symbol on numbers at generation time,\n    // to match the Rhino behavior.\n    assertPrint(\"var x = - - 2;\", \"var x=2\");\n    assertPrint(\"var x = - (2);\", \"var x=-2\");\n  }\n",
        "begin_line": 1274,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 5)-(line 1277,col 45)",
            "(line 1278,col 5)-(line 1278,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testStrict()",
        "snippet": "  public void testStrict() {\n    String result = parsePrint(\"var x\", false, false, 0, false, true);\n    assertEquals(\"'use strict';var x\", result);\n  }\n",
        "begin_line": 1281,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1282,col 70)",
            "(line 1283,col 5)-(line 1283,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testArrayLiteral()",
        "snippet": "  public void testArrayLiteral() {\n    assertPrint(\"var x = [,];\",\"var x=[,]\");\n    assertPrint(\"var x = [,,];\",\"var x=[,,]\");\n    assertPrint(\"var x = [,s,,];\",\"var x=[,s,,]\");\n    assertPrint(\"var x = [,s];\",\"var x=[,s]\");\n    assertPrint(\"var x = [s,];\",\"var x=[s]\");\n  }\n",
        "begin_line": 1286,
        "end_line": 1292,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 5)-(line 1287,col 44)",
            "(line 1288,col 5)-(line 1288,col 46)",
            "(line 1289,col 5)-(line 1289,col 50)",
            "(line 1290,col 5)-(line 1290,col 46)",
            "(line 1291,col 5)-(line 1291,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testZero()",
        "snippet": "  public void testZero() {\n    assertPrint(\"var x ='\\\\0';\", \"var x=\\\"\\\\x00\\\"\");\n    assertPrint(\"var x ='\\\\x00';\", \"var x=\\\"\\\\x00\\\"\");\n    assertPrint(\"var x ='\\\\u0000';\", \"var x=\\\"\\\\x00\\\"\");\n    assertPrint(\"var x ='\\\\u00003';\", \"var x=\\\"\\\\x003\\\"\");\n  }\n",
        "begin_line": 1294,
        "end_line": 1299,
        "comment": "",
        "child_ranges": [
            "(line 1295,col 5)-(line 1295,col 52)",
            "(line 1296,col 5)-(line 1296,col 54)",
            "(line 1297,col 5)-(line 1297,col 56)",
            "(line 1298,col 5)-(line 1298,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testUnicode()",
        "snippet": "  public void testUnicode() {\n    assertPrint(\"var x ='\\\\x0f';\", \"var x=\\\"\\\\u000f\\\"\");\n    assertPrint(\"var x ='\\\\x68';\", \"var x=\\\"h\\\"\");\n    assertPrint(\"var x ='\\\\x7f';\", \"var x=\\\"\\\\u007f\\\"\");\n  }\n",
        "begin_line": 1301,
        "end_line": 1305,
        "comment": "",
        "child_ranges": [
            "(line 1302,col 5)-(line 1302,col 56)",
            "(line 1303,col 5)-(line 1303,col 50)",
            "(line 1304,col 5)-(line 1304,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testUnicodeKeyword()",
        "snippet": "  public void testUnicodeKeyword() {\n    // keyword \"if\"\n    assertPrint(\"var \\\\u0069\\\\u0066 = 1;\", \"var i\\\\u0066=1\");\n    // keyword \"var\"\n    assertPrint(\"var v\\\\u0061\\\\u0072 = 1;\", \"var va\\\\u0072=1\");\n    // all are keyword \"while\"\n    assertPrint(\"var w\\\\u0068\\\\u0069\\\\u006C\\\\u0065 = 1;\"\n        + \"\\\\u0077\\\\u0068il\\\\u0065 = 2;\"\n        + \"\\\\u0077h\\\\u0069le = 3;\",\n        \"var whil\\\\u0065=1;whil\\\\u0065=2;whil\\\\u0065=3\");\n  }\n",
        "begin_line": 1307,
        "end_line": 1317,
        "comment": "",
        "child_ranges": [
            "(line 1309,col 5)-(line 1309,col 61)",
            "(line 1311,col 5)-(line 1311,col 63)",
            "(line 1313,col 5)-(line 1316,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testNumericKeys()",
        "snippet": "  public void testNumericKeys() {\n    assertPrint(\"var x = {010: 1};\", \"var x={8:1}\");\n    assertPrint(\"var x = {'010': 1};\", \"var x={\\\"010\\\":1}\");\n\n    assertPrint(\"var x = {0x10: 1};\", \"var x={16:1}\");\n    assertPrint(\"var x = {'0x10': 1};\", \"var x={\\\"0x10\\\":1}\");\n\n    // I was surprised at this result too.\n    assertPrint(\"var x = {.2: 1};\", \"var x={\\\"0.2\\\":1}\");\n    assertPrint(\"var x = {'.2': 1};\", \"var x={\\\".2\\\":1}\");\n\n    assertPrint(\"var x = {0.2: 1};\", \"var x={\\\"0.2\\\":1}\");\n    assertPrint(\"var x = {'0.2': 1};\", \"var x={\\\"0.2\\\":1}\");\n  }\n",
        "begin_line": 1319,
        "end_line": 1332,
        "comment": "",
        "child_ranges": [
            "(line 1320,col 5)-(line 1320,col 52)",
            "(line 1321,col 5)-(line 1321,col 60)",
            "(line 1323,col 5)-(line 1323,col 54)",
            "(line 1324,col 5)-(line 1324,col 62)",
            "(line 1327,col 5)-(line 1327,col 57)",
            "(line 1328,col 5)-(line 1328,col 58)",
            "(line 1330,col 5)-(line 1330,col 58)",
            "(line 1331,col 5)-(line 1331,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue582()",
        "snippet": "  public void testIssue582() {\n    assertPrint(\"var x = -0.0;\", \"var x=-0.0\");\n  }\n",
        "begin_line": 1334,
        "end_line": 1336,
        "comment": "",
        "child_ranges": [
            "(line 1335,col 5)-(line 1335,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue601()",
        "snippet": "  public void testIssue601() {\n    assertPrint(\"'\\\\v' == 'v'\", \"\\\"\\\\v\\\"==\\\"v\\\"\");\n    assertPrint(\"'\\\\u000B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n    assertPrint(\"'\\\\x0B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n  }\n",
        "begin_line": 1338,
        "end_line": 1342,
        "comment": "",
        "child_ranges": [
            "(line 1339,col 5)-(line 1339,col 50)",
            "(line 1340,col 5)-(line 1340,col 60)",
            "(line 1341,col 5)-(line 1341,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue620()",
        "snippet": "  public void testIssue620() {\n    assertPrint(\"alert(/ / / / /);\", \"alert(/ // / /)\");\n    assertPrint(\"alert(/ // / /);\", \"alert(/ // / /)\");\n  }\n",
        "begin_line": 1344,
        "end_line": 1347,
        "comment": "",
        "child_ranges": [
            "(line 1345,col 5)-(line 1345,col 56)",
            "(line 1346,col 5)-(line 1346,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testIssue5746867()",
        "snippet": "  public void testIssue5746867() {\n    assertPrint(\"var a = { '$\\\\\\\\' : 5 };\", \"var a={\\\"$\\\\\\\\\\\":5}\");\n  }\n",
        "begin_line": 1349,
        "end_line": 1351,
        "comment": "",
        "child_ranges": [
            "(line 1350,col 5)-(line 1350,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testManyCommas()",
        "snippet": "  public void testManyCommas() {\n    int numCommas = 10000;\n    List<String> numbers = Lists.newArrayList(\"0\", \"1\");\n    Node current = new Node(Token.COMMA, Node.newNumber(0), Node.newNumber(1));\n    for (int i = 2; i < numCommas; i++) {\n      current = new Node(Token.COMMA, current);\n\n      // 1000 is printed as 1E3, and screws up our test.\n      int num = i % 1000;\n      numbers.add(String.valueOf(num));\n      current.addChildToBack(Node.newNumber(num));\n    }\n\n    String expected = Joiner.on(\",\").join(numbers);\n    String actual = printNode(current).replace(\"\\n\", \"\");\n    assertEquals(expected, actual);\n  }\n",
        "begin_line": 1353,
        "end_line": 1369,
        "comment": "",
        "child_ranges": [
            "(line 1354,col 5)-(line 1354,col 26)",
            "(line 1355,col 5)-(line 1355,col 56)",
            "(line 1356,col 5)-(line 1356,col 79)",
            "(line 1357,col 5)-(line 1364,col 5)",
            "(line 1366,col 5)-(line 1366,col 51)",
            "(line 1367,col 5)-(line 1367,col 57)",
            "(line 1368,col 5)-(line 1368,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "signature": "com.google.javascript.jscomp.CodePrinterTest.testMinusNegativeZero()",
        "snippet": "  public void testMinusNegativeZero() {\n    // Negative zero is weird, because we have to be able to distinguish\n    // it from positive zero (there are some subtle differences in behavior).\n    assertPrint(\"x- -0\", \"x- -0.0\");\n  }\n",
        "begin_line": 1371,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1374,col 5)-(line 1374,col 36)"
        ]
    }
]