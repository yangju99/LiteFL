[
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 42)",
            "(line 62,col 9)-(line 62,col 54)",
            "(line 63,col 9)-(line 63,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()",
        "snippet": "    @Test\n    public void testConstructorNaN() {\n        Complex z = new Complex(3.0, Double.NaN);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(nan, 4.0);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(3.0, 4.0);\n        Assert.assertFalse(z.isNaN());\n    }\n",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 71,col 9)-(line 71,col 34)",
            "(line 72,col 9)-(line 72,col 37)",
            "(line 74,col 9)-(line 74,col 34)",
            "(line 75,col 9)-(line 75,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(5.0, z.abs(), 1.0e-5);\n    }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 42)",
            "(line 81,col 9)-(line 81,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsNaN()",
        "snippet": "    @Test\n    public void testAbsNaN() {\n        Assert.assertTrue(Double.isNaN(Complex.NaN.abs()));\n        Complex z = new Complex(inf, nan);\n        Assert.assertTrue(Double.isNaN(z.abs()));\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 59)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()",
        "snippet": "    @Test\n    public void testAbsInfinite() {\n        Complex z = new Complex(inf, 0);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(inf, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n    }\n",
        "begin_line": 91,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 40)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 98,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.add(y);\n        Assert.assertEquals(8.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 42)",
            "(line 105,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 106,col 54)",
            "(line 107,col 9)-(line 107,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddNaN()",
        "snippet": "    @Test\n    public void testAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.add(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = new Complex(1, nan);\n        Complex w = x.add(z);\n        Assert.assertSame(Complex.NaN, w);\n    }\n",
        "begin_line": 110,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 115,col 9)-(line 115,col 32)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddInf()",
        "snippet": "    @Test\n    public void testAddInf() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(inf, 0);\n        Complex w = x.add(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.add(z).getReal()));\n    }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 38)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 52)",
            "(line 126,col 9)-(line 126,col 49)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAdd()",
        "snippet": "    @Test\n    public void testScalarAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 133,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 136,col 29)",
            "(line 137,col 9)-(line 137,col 48)",
            "(line 138,col 9)-(line 138,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAddNaN()",
        "snippet": "    @Test\n    public void testScalarAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 42)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 48)",
            "(line 146,col 9)-(line 146,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAddInf()",
        "snippet": "    @Test\n    public void testScalarAddInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        \n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n\n        x = new Complex(neginf, 0);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 149,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 38)",
            "(line 152,col 9)-(line 152,col 50)",
            "(line 154,col 9)-(line 154,col 48)",
            "(line 155,col 9)-(line 155,col 61)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 158,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugate()",
        "snippet": "    @Test\n    public void testConjugate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.conjugate();\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 161,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 54)",
            "(line 166,col 9)-(line 166,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()",
        "snippet": "    @Test\n    public void testConjugateNaN() {\n        Complex z = Complex.NaN.conjugate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 169,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 44)",
            "(line 172,col 9)-(line 172,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()",
        "snippet": "    @Test\n    public void testConjugateInfiinite() {\n        Complex z = new Complex(0, inf);\n        Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.conjugate().getImaginary(), 0);\n    }\n",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 40)",
            "(line 178,col 9)-(line 178,col 69)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.divide(y);\n        Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 183,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 42)",
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 32)",
            "(line 188,col 9)-(line 188,col 62)",
            "(line 189,col 9)-(line 189,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideReal()",
        "snippet": "    @Test\n    public void testDivideReal() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(2d, 0d);\n        Assert.assertEquals(new Complex(1d, 1.5), x.divide(y));\n\n    }\n",
        "begin_line": 192,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 40)",
            "(line 195,col 9)-(line 195,col 40)",
            "(line 196,col 9)-(line 196,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideImaginary()",
        "snippet": "    @Test\n    public void testDivideImaginary() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(0d, 2d);\n        Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y));\n    }\n",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 40)",
            "(line 203,col 9)-(line 203,col 40)",
            "(line 204,col 9)-(line 204,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideInf()",
        "snippet": "    @Test\n    public void testDivideInf() {\n        Complex x = new Complex(3, 4);\n        Complex w = new Complex(neginf, inf);\n        Assert.assertTrue(x.divide(w).equals(Complex.ZERO));\n\n        Complex z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertEquals(inf, z.getImaginary(), 0);\n\n        w = new Complex(inf, inf);\n        z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n        Assert.assertEquals(inf, z.getReal(), 0);\n\n        w = new Complex(1, inf);\n        z = w.divide(w);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 207,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 38)",
            "(line 210,col 9)-(line 210,col 45)",
            "(line 211,col 9)-(line 211,col 60)",
            "(line 213,col 9)-(line 213,col 32)",
            "(line 214,col 9)-(line 214,col 53)",
            "(line 215,col 9)-(line 215,col 54)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 218,col 9)-(line 218,col 24)",
            "(line 219,col 9)-(line 219,col 58)",
            "(line 220,col 9)-(line 220,col 49)",
            "(line 222,col 9)-(line 222,col 32)",
            "(line 223,col 9)-(line 223,col 24)",
            "(line 224,col 9)-(line 224,col 53)",
            "(line 225,col 9)-(line 225,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZero()",
        "snippet": "    @Test\n    public void testDivideZero() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.ZERO);\n        // Assert.assertEquals(z, Complex.INF); // See MATH-657\n        Assert.assertEquals(z, Complex.NaN);\n    }\n",
        "begin_line": 228,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 42)",
            "(line 231,col 9)-(line 231,col 43)",
            "(line 233,col 9)-(line 233,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZeroZero()",
        "snippet": "    @Test\n    public void testDivideZeroZero() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex z = x.divide(Complex.ZERO);\n        Assert.assertEquals(z, Complex.NaN);\n    }\n",
        "begin_line": 236,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 42)",
            "(line 239,col 9)-(line 239,col 43)",
            "(line 240,col 9)-(line 240,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaN()",
        "snippet": "    @Test\n    public void testDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 243,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 42)",
            "(line 246,col 9)-(line 246,col 42)",
            "(line 247,col 9)-(line 247,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()",
        "snippet": "    @Test\n    public void testDivideNaNInf() {\n       Complex z = oneInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertEquals(inf, z.getImaginary(), 0);\n\n       z = negInfNegInf.divide(oneNaN);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n\n       z = negInfInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 250,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 252,col 8)-(line 252,col 46)",
            "(line 253,col 8)-(line 253,col 52)",
            "(line 254,col 8)-(line 254,col 53)",
            "(line 256,col 8)-(line 256,col 39)",
            "(line 257,col 8)-(line 257,col 52)",
            "(line 258,col 8)-(line 258,col 57)",
            "(line 260,col 8)-(line 260,col 41)",
            "(line 261,col 8)-(line 261,col 52)",
            "(line 262,col 8)-(line 262,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivide()",
        "snippet": "    @Test\n    public void testScalarDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n    }\n",
        "begin_line": 265,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 42)",
            "(line 268,col 9)-(line 268,col 29)",
            "(line 269,col 9)-(line 269,col 48)",
            "(line 270,col 9)-(line 270,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN()",
        "snippet": "    @Test\n    public void testScalarDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n    }\n",
        "begin_line": 273,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 42)",
            "(line 276,col 9)-(line 276,col 36)",
            "(line 277,col 9)-(line 277,col 48)",
            "(line 278,col 9)-(line 278,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideInf()",
        "snippet": "    @Test\n    public void testScalarDivideInf() {\n        Complex x = new Complex(1,1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n\n        yDouble = Double.NEGATIVE_INFINITY;\n        yComplex = new Complex(yDouble);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n        \n        x = new Complex(1, Double.NEGATIVE_INFINITY);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n    }\n",
        "begin_line": 281,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 37)",
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 48)",
            "(line 286,col 9)-(line 286,col 73)",
            "(line 288,col 9)-(line 288,col 43)",
            "(line 289,col 9)-(line 289,col 40)",
            "(line 290,col 9)-(line 290,col 73)",
            "(line 292,col 9)-(line 292,col 53)",
            "(line 293,col 9)-(line 293,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideZero()",
        "snippet": "    @Test\n    public void testScalarDivideZero() {\n        Complex x = new Complex(1,1);\n        TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0);\n    }\n",
        "begin_line": 296,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 37)",
            "(line 299,col 9)-(line 299,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.multiply(y);\n        Assert.assertEquals(-9.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 302,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 42)",
            "(line 305,col 9)-(line 305,col 42)",
            "(line 306,col 9)-(line 306,col 34)",
            "(line 307,col 9)-(line 307,col 55)",
            "(line 308,col 9)-(line 308,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()",
        "snippet": "    @Test\n    public void testMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.multiply(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n    }\n",
        "begin_line": 311,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 42)",
            "(line 314,col 9)-(line 314,col 44)",
            "(line 315,col 9)-(line 315,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()",
        "snippet": "    @Test\n    public void testMultiplyNaNInf() {\n        Complex z = new Complex(1,1);\n        Complex w = z.multiply(infOne);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        // [MATH-164]\n        Assert.assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));\n\n        w = oneInf.multiply(oneNegInf);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        w = negInfNegInf.multiply(oneNaN);\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n        \n        z = new Complex(1, neginf);\n        Assert.assertSame(Complex.INF, z.multiply(z));\n    }\n",
        "begin_line": 318,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 37)",
            "(line 321,col 9)-(line 321,col 39)",
            "(line 322,col 9)-(line 322,col 49)",
            "(line 323,col 9)-(line 323,col 54)",
            "(line 326,col 9)-(line 326,col 82)",
            "(line 327,col 9)-(line 327,col 82)",
            "(line 328,col 9)-(line 328,col 86)",
            "(line 330,col 9)-(line 330,col 39)",
            "(line 331,col 9)-(line 331,col 49)",
            "(line 332,col 9)-(line 332,col 54)",
            "(line 334,col 9)-(line 334,col 42)",
            "(line 335,col 9)-(line 335,col 53)",
            "(line 336,col 9)-(line 336,col 58)",
            "(line 338,col 9)-(line 338,col 35)",
            "(line 339,col 9)-(line 339,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiply()",
        "snippet": "    @Test\n    public void testScalarMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 342,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 42)",
            "(line 345,col 9)-(line 345,col 29)",
            "(line 346,col 9)-(line 346,col 48)",
            "(line 347,col 9)-(line 347,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN()",
        "snippet": "    @Test\n    public void testScalarMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 350,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 42)",
            "(line 353,col 9)-(line 353,col 36)",
            "(line 354,col 9)-(line 354,col 48)",
            "(line 355,col 9)-(line 355,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyInf()",
        "snippet": "    @Test\n    public void testScalarMultiplyInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n        \n        yDouble = Double.NEGATIVE_INFINITY;\n        yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 358,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 38)",
            "(line 361,col 9)-(line 361,col 50)",
            "(line 362,col 9)-(line 362,col 48)",
            "(line 363,col 9)-(line 363,col 71)",
            "(line 365,col 9)-(line 365,col 43)",
            "(line 366,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 367,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.negate();\n        Assert.assertEquals(-3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 370,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 42)",
            "(line 373,col 9)-(line 373,col 31)",
            "(line 374,col 9)-(line 374,col 55)",
            "(line 375,col 9)-(line 375,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegateNaN()",
        "snippet": "    @Test\n    public void testNegateNaN() {\n        Complex z = Complex.NaN.negate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 378,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 41)",
            "(line 381,col 9)-(line 381,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.subtract(y);\n        Assert.assertEquals(-2.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 384,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 42)",
            "(line 387,col 9)-(line 387,col 42)",
            "(line 388,col 9)-(line 388,col 34)",
            "(line 389,col 9)-(line 389,col 55)",
            "(line 390,col 9)-(line 390,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()",
        "snippet": "    @Test\n    public void testSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.subtract(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = new Complex(1, nan);\n        Complex w = x.subtract(z);\n        Assert.assertSame(Complex.NaN, w);\n    }\n",
        "begin_line": 393,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 42)",
            "(line 396,col 9)-(line 396,col 44)",
            "(line 397,col 9)-(line 397,col 42)",
            "(line 398,col 9)-(line 398,col 32)",
            "(line 399,col 9)-(line 399,col 34)",
            "(line 400,col 9)-(line 400,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractInf()",
        "snippet": "    @Test\n    public void testSubtractInf() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(neginf, 0);\n        Complex w = x.subtract(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.subtract(z).getReal()));\n    }\n",
        "begin_line": 403,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 38)",
            "(line 406,col 9)-(line 406,col 43)",
            "(line 407,col 9)-(line 407,col 34)",
            "(line 408,col 9)-(line 408,col 52)",
            "(line 409,col 9)-(line 409,col 49)",
            "(line 411,col 9)-(line 411,col 35)",
            "(line 412,col 9)-(line 412,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtract()",
        "snippet": "    @Test\n    public void testScalarSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 415,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 42)",
            "(line 418,col 9)-(line 418,col 29)",
            "(line 419,col 9)-(line 419,col 48)",
            "(line 420,col 9)-(line 420,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtractNaN()",
        "snippet": "    @Test\n    public void testScalarSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 423,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 42)",
            "(line 426,col 9)-(line 426,col 36)",
            "(line 427,col 9)-(line 427,col 48)",
            "(line 428,col 9)-(line 428,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtractInf()",
        "snippet": "    @Test\n    public void testScalarSubtractInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n\n        x = new Complex(neginf, 0);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 431,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 38)",
            "(line 434,col 9)-(line 434,col 50)",
            "(line 435,col 9)-(line 435,col 48)",
            "(line 436,col 9)-(line 436,col 71)",
            "(line 438,col 9)-(line 438,col 35)",
            "(line 439,col 9)-(line 439,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNull()",
        "snippet": "    @Test\n    public void testEqualsNull() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(null));\n    }\n",
        "begin_line": 443,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 42)",
            "(line 446,col 9)-(line 446,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsClass()",
        "snippet": "    @Test\n    public void testEqualsClass() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(this));\n    }\n",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 42)",
            "(line 452,col 9)-(line 452,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsSame()",
        "snippet": "    @Test\n    public void testEqualsSame() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(x));\n    }\n",
        "begin_line": 455,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 42)",
            "(line 458,col 9)-(line 458,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()",
        "snippet": "    @Test\n    public void testEqualsTrue() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(y));\n    }\n",
        "begin_line": 461,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 42)",
            "(line 464,col 9)-(line 464,col 42)",
            "(line 465,col 9)-(line 465,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()",
        "snippet": "    @Test\n    public void testEqualsRealDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 468,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 42)",
            "(line 471,col 9)-(line 471,col 61)",
            "(line 472,col 9)-(line 472,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()",
        "snippet": "    @Test\n    public void testEqualsImaginaryDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 475,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 42)",
            "(line 478,col 9)-(line 478,col 61)",
            "(line 479,col 9)-(line 479,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()",
        "snippet": "    @Test\n    public void testEqualsNaN() {\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Complex complexNaN = Complex.NaN;\n        Assert.assertTrue(realNaN.equals(imaginaryNaN));\n        Assert.assertTrue(imaginaryNaN.equals(complexNaN));\n        Assert.assertTrue(realNaN.equals(complexNaN));\n    }\n",
        "begin_line": 482,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 55)",
            "(line 485,col 9)-(line 485,col 60)",
            "(line 486,col 9)-(line 486,col 41)",
            "(line 487,col 9)-(line 487,col 56)",
            "(line 488,col 9)-(line 488,col 59)",
            "(line 489,col 9)-(line 489,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testHashCode()",
        "snippet": "    @Test\n    public void testHashCode() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());\n        Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());\n    }\n",
        "begin_line": 492,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 42)",
            "(line 495,col 9)-(line 495,col 61)",
            "(line 496,col 9)-(line 496,col 55)",
            "(line 497,col 9)-(line 497,col 53)",
            "(line 498,col 9)-(line 498,col 55)",
            "(line 499,col 9)-(line 499,col 55)",
            "(line 500,col 9)-(line 500,col 60)",
            "(line 501,col 9)-(line 501,col 73)",
            "(line 502,col 9)-(line 502,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcos()",
        "snippet": "    @Test\n    public void testAcos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.936812, -2.30551);\n        TestUtils.assertEquals(expected, z.acos(), 1.0e-5);\n        TestUtils.assertEquals(new Complex(FastMath.acos(0), 0),\n                Complex.ZERO.acos(), 1.0e-12);\n    }\n",
        "begin_line": 505,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 507,col 9)-(line 507,col 38)",
            "(line 508,col 9)-(line 508,col 59)",
            "(line 509,col 9)-(line 509,col 59)",
            "(line 510,col 9)-(line 511,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosInf()",
        "snippet": "    @Test\n    public void testAcosInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.acos());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, infOne.acos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.acos());\n        TestUtils.assertSame(Complex.NaN, infInf.acos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.acos());\n    }\n",
        "begin_line": 514,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 516,col 9)-(line 516,col 57)",
            "(line 517,col 9)-(line 517,col 60)",
            "(line 518,col 9)-(line 518,col 57)",
            "(line 519,col 9)-(line 519,col 60)",
            "(line 520,col 9)-(line 520,col 57)",
            "(line 521,col 9)-(line 521,col 60)",
            "(line 522,col 9)-(line 522,col 60)",
            "(line 523,col 9)-(line 523,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosNaN()",
        "snippet": "    @Test\n    public void testAcosNaN() {\n        Assert.assertTrue(Complex.NaN.acos().isNaN());\n    }\n",
        "begin_line": 526,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 528,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsin()",
        "snippet": "    @Test\n    public void testAsin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.633984, 2.30551);\n        TestUtils.assertEquals(expected, z.asin(), 1.0e-5);\n    }\n",
        "begin_line": 531,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 38)",
            "(line 534,col 9)-(line 534,col 58)",
            "(line 535,col 9)-(line 535,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinNaN()",
        "snippet": "    @Test\n    public void testAsinNaN() {\n        Assert.assertTrue(Complex.NaN.asin().isNaN());\n    }\n",
        "begin_line": 538,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 540,col 9)-(line 540,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinInf()",
        "snippet": "    @Test\n    public void testAsinInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.asin());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, infOne.asin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.asin());\n        TestUtils.assertSame(Complex.NaN, infInf.asin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.asin());\n    }\n",
        "begin_line": 543,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 57)",
            "(line 546,col 9)-(line 546,col 60)",
            "(line 547,col 9)-(line 547,col 57)",
            "(line 548,col 9)-(line 548,col 60)",
            "(line 549,col 9)-(line 549,col 57)",
            "(line 550,col 9)-(line 550,col 60)",
            "(line 551,col 9)-(line 551,col 60)",
            "(line 552,col 9)-(line 552,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtan()",
        "snippet": "    @Test\n    public void testAtan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.44831, 0.158997);\n        TestUtils.assertEquals(expected, z.atan(), 1.0e-5);\n    }\n",
        "begin_line": 556,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 38)",
            "(line 559,col 9)-(line 559,col 58)",
            "(line 560,col 9)-(line 560,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanInf()",
        "snippet": "    @Test\n    public void testAtanInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.atan());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, infOne.atan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.atan());\n        TestUtils.assertSame(Complex.NaN, infInf.atan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.atan());\n    }\n",
        "begin_line": 563,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 57)",
            "(line 566,col 9)-(line 566,col 60)",
            "(line 567,col 9)-(line 567,col 57)",
            "(line 568,col 9)-(line 568,col 60)",
            "(line 569,col 9)-(line 569,col 57)",
            "(line 570,col 9)-(line 570,col 60)",
            "(line 571,col 9)-(line 571,col 60)",
            "(line 572,col 9)-(line 572,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanI()",
        "snippet": "    @Test\n    public void testAtanI() {\n        Assert.assertTrue(Complex.I.atan().isNaN());\n    }\n",
        "begin_line": 575,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 577,col 9)-(line 577,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanNaN()",
        "snippet": "    @Test\n    public void testAtanNaN() {\n        Assert.assertTrue(Complex.NaN.atan().isNaN());\n    }\n",
        "begin_line": 580,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCos()",
        "snippet": "    @Test\n    public void testCos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-27.03495, -3.851153);\n        TestUtils.assertEquals(expected, z.cos(), 1.0e-5);\n    }\n",
        "begin_line": 585,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 587,col 9)-(line 587,col 38)",
            "(line 588,col 9)-(line 588,col 61)",
            "(line 589,col 9)-(line 589,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosNaN()",
        "snippet": "    @Test\n    public void testCosNaN() {\n        Assert.assertTrue(Complex.NaN.cos().isNaN());\n    }\n",
        "begin_line": 592,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 594,col 9)-(line 594,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosInf()",
        "snippet": "    @Test\n    public void testCosInf() {\n        TestUtils.assertSame(infNegInf, oneInf.cos());\n        TestUtils.assertSame(infInf, oneNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, infOne.cos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.cos());\n        TestUtils.assertSame(Complex.NaN, infInf.cos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cos());\n    }\n",
        "begin_line": 597,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 599,col 9)-(line 599,col 54)",
            "(line 600,col 9)-(line 600,col 54)",
            "(line 601,col 9)-(line 601,col 56)",
            "(line 602,col 9)-(line 602,col 59)",
            "(line 603,col 9)-(line 603,col 56)",
            "(line 604,col 9)-(line 604,col 59)",
            "(line 605,col 9)-(line 605,col 59)",
            "(line 606,col 9)-(line 606,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosh()",
        "snippet": "    @Test\n    public void testCosh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.58066, -7.58155);\n        TestUtils.assertEquals(expected, z.cosh(), 1.0e-5);\n    }\n",
        "begin_line": 609,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 38)",
            "(line 612,col 9)-(line 612,col 59)",
            "(line 613,col 9)-(line 613,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshNaN()",
        "snippet": "    @Test\n    public void testCoshNaN() {\n        Assert.assertTrue(Complex.NaN.cosh().isNaN());\n    }\n",
        "begin_line": 616,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 618,col 9)-(line 618,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshInf()",
        "snippet": "    @Test\n    public void testCoshInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.cosh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.cosh());\n        TestUtils.assertSame(infInf, infOne.cosh());\n        TestUtils.assertSame(infNegInf, negInfOne.cosh());\n        TestUtils.assertSame(Complex.NaN, infInf.cosh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh());\n    }\n",
        "begin_line": 621,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 57)",
            "(line 624,col 9)-(line 624,col 60)",
            "(line 625,col 9)-(line 625,col 52)",
            "(line 626,col 9)-(line 626,col 58)",
            "(line 627,col 9)-(line 627,col 57)",
            "(line 628,col 9)-(line 628,col 60)",
            "(line 629,col 9)-(line 629,col 60)",
            "(line 630,col 9)-(line 630,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExp()",
        "snippet": "    @Test\n    public void testExp() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-13.12878, -15.20078);\n        TestUtils.assertEquals(expected, z.exp(), 1.0e-5);\n        TestUtils.assertEquals(Complex.ONE,\n                Complex.ZERO.exp(), 10e-12);\n        Complex iPi = Complex.I.multiply(new Complex(pi,0));\n        TestUtils.assertEquals(Complex.ONE.negate(),\n                iPi.exp(), 10e-12);\n    }\n",
        "begin_line": 633,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 635,col 9)-(line 635,col 38)",
            "(line 636,col 9)-(line 636,col 61)",
            "(line 637,col 9)-(line 637,col 58)",
            "(line 638,col 9)-(line 639,col 44)",
            "(line 640,col 9)-(line 640,col 60)",
            "(line 641,col 9)-(line 642,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpNaN()",
        "snippet": "    @Test\n    public void testExpNaN() {\n        Assert.assertTrue(Complex.NaN.exp().isNaN());\n    }\n",
        "begin_line": 645,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 647,col 9)-(line 647,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpInf()",
        "snippet": "    @Test\n    public void testExpInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.exp());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.exp());\n        TestUtils.assertSame(infInf, infOne.exp());\n        TestUtils.assertSame(Complex.ZERO, negInfOne.exp());\n        TestUtils.assertSame(Complex.NaN, infInf.exp());\n        TestUtils.assertSame(Complex.NaN, infNegInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.exp());\n    }\n",
        "begin_line": 650,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 652,col 9)-(line 652,col 56)",
            "(line 653,col 9)-(line 653,col 59)",
            "(line 654,col 9)-(line 654,col 51)",
            "(line 655,col 9)-(line 655,col 60)",
            "(line 656,col 9)-(line 656,col 56)",
            "(line 657,col 9)-(line 657,col 59)",
            "(line 658,col 9)-(line 658,col 59)",
            "(line 659,col 9)-(line 659,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLog()",
        "snippet": "    @Test\n    public void testLog() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.60944, 0.927295);\n        TestUtils.assertEquals(expected, z.log(), 1.0e-5);\n    }\n",
        "begin_line": 662,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 664,col 9)-(line 664,col 38)",
            "(line 665,col 9)-(line 665,col 58)",
            "(line 666,col 9)-(line 666,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogNaN()",
        "snippet": "    @Test\n    public void testLogNaN() {\n        Assert.assertTrue(Complex.NaN.log().isNaN());\n    }\n",
        "begin_line": 669,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 671,col 9)-(line 671,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogInf()",
        "snippet": "    @Test\n    public void testLogInf() {\n        TestUtils.assertEquals(new Complex(inf, pi / 2),\n                oneInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 2),\n                oneNegInf.log(), 10e-12);\n        TestUtils.assertEquals(infZero, infOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi),\n                negInfOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi / 4),\n                infInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 4),\n                infNegInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),\n                negInfInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n                negInfNegInf.log(), 10e-12);\n    }\n",
        "begin_line": 674,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 676,col 9)-(line 677,col 38)",
            "(line 678,col 9)-(line 679,col 41)",
            "(line 680,col 9)-(line 680,col 62)",
            "(line 681,col 9)-(line 682,col 41)",
            "(line 683,col 9)-(line 684,col 38)",
            "(line 685,col 9)-(line 686,col 41)",
            "(line 687,col 9)-(line 688,col 41)",
            "(line 689,col 9)-(line 690,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogZero()",
        "snippet": "    @Test\n    public void testLogZero() {\n        TestUtils.assertSame(negInfZero, Complex.ZERO.log());\n    }\n",
        "begin_line": 693,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 695,col 9)-(line 695,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        Complex x = new Complex(3, 4);\n        Complex y = new Complex(5, 6);\n        Complex expected = new Complex(-1.860893, 11.83677);\n        TestUtils.assertEquals(expected, x.pow(y), 1.0e-5);\n    }\n",
        "begin_line": 698,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 700,col 9)-(line 700,col 38)",
            "(line 701,col 9)-(line 701,col 38)",
            "(line 702,col 9)-(line 702,col 60)",
            "(line 703,col 9)-(line 703,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()",
        "snippet": "    @Test\n    public void testPowNaNBase() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(Complex.NaN.pow(x).isNaN());\n    }\n",
        "begin_line": 706,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 38)",
            "(line 709,col 9)-(line 709,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()",
        "snippet": "    @Test\n    public void testPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(x.pow(Complex.NaN).isNaN());\n    }\n",
        "begin_line": 712,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 714,col 9)-(line 714,col 38)",
            "(line 715,col 9)-(line 715,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowInf()",
        "snippet": "   @Test\n   public void testPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));\n   }\n",
        "begin_line": 718,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 720,col 8)-(line 720,col 65)",
            "(line 721,col 8)-(line 721,col 68)",
            "(line 722,col 8)-(line 722,col 65)",
            "(line 723,col 8)-(line 723,col 65)",
            "(line 724,col 8)-(line 724,col 68)",
            "(line 725,col 8)-(line 725,col 68)",
            "(line 726,col 8)-(line 726,col 71)",
            "(line 727,col 8)-(line 727,col 65)",
            "(line 728,col 8)-(line 728,col 68)",
            "(line 729,col 8)-(line 729,col 65)",
            "(line 730,col 8)-(line 730,col 68)",
            "(line 731,col 8)-(line 731,col 68)",
            "(line 732,col 8)-(line 732,col 71)",
            "(line 733,col 8)-(line 733,col 69)",
            "(line 734,col 8)-(line 734,col 72)",
            "(line 735,col 8)-(line 735,col 66)",
            "(line 736,col 8)-(line 736,col 63)",
            "(line 737,col 8)-(line 737,col 66)",
            "(line 738,col 8)-(line 738,col 60)",
            "(line 739,col 8)-(line 739,col 66)",
            "(line 740,col 8)-(line 740,col 69)",
            "(line 741,col 8)-(line 741,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowZero()",
        "snippet": "   @Test\n   public void testPowZero() {\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ZERO));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.I));\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.ONE.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.I.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n   }\n",
        "begin_line": 744,
        "end_line": 758,
        "comment": "",
        "child_ranges": [
            "(line 746,col 8)-(line 747,col 46)",
            "(line 748,col 8)-(line 749,col 47)",
            "(line 750,col 8)-(line 751,col 44)",
            "(line 752,col 8)-(line 753,col 54)",
            "(line 754,col 8)-(line 755,col 52)",
            "(line 756,col 8)-(line 757,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPow()",
        "snippet": "    @Test\n    public void testScalarPow() {\n        Complex x = new Complex(3, 4);\n        double yDouble = 5.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 760,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 762,col 9)-(line 762,col 38)",
            "(line 763,col 9)-(line 763,col 29)",
            "(line 764,col 9)-(line 764,col 48)",
            "(line 765,col 9)-(line 765,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowNaNBase()",
        "snippet": "    @Test\n    public void testScalarPowNaNBase() {\n        Complex x = Complex.NaN;\n        double yDouble = 5.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 768,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 770,col 9)-(line 770,col 32)",
            "(line 771,col 9)-(line 771,col 29)",
            "(line 772,col 9)-(line 772,col 48)",
            "(line 773,col 9)-(line 773,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowNaNExponent()",
        "snippet": "    @Test\n    public void testScalarPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 776,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 778,col 9)-(line 778,col 38)",
            "(line 779,col 9)-(line 779,col 36)",
            "(line 780,col 9)-(line 780,col 48)",
            "(line 781,col 9)-(line 781,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowInf()",
        "snippet": "   @Test\n   public void testScalarPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(10));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.POSITIVE_INFINITY));\n   }\n",
        "begin_line": 784,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 786,col 8)-(line 786,col 83)",
            "(line 787,col 8)-(line 787,col 83)",
            "(line 788,col 8)-(line 788,col 57)",
            "(line 789,col 8)-(line 789,col 60)",
            "(line 790,col 8)-(line 790,col 57)",
            "(line 791,col 8)-(line 791,col 60)",
            "(line 792,col 8)-(line 792,col 59)",
            "(line 793,col 8)-(line 793,col 63)",
            "(line 794,col 8)-(line 794,col 84)",
            "(line 795,col 8)-(line 795,col 84)",
            "(line 796,col 8)-(line 796,col 78)",
            "(line 797,col 8)-(line 797,col 78)",
            "(line 798,col 8)-(line 798,col 81)",
            "(line 799,col 8)-(line 799,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowZero()",
        "snippet": "   @Test\n   public void testScalarPowZero() {\n       TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(1.0));\n       TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(0.0));\n       TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(0.0), 10e-12);\n       TestUtils.assertEquals(Complex.ONE, Complex.I.pow(0.0), 10e-12);\n       TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(0.0), 10e-12);\n   }\n",
        "begin_line": 802,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 804,col 8)-(line 804,col 64)",
            "(line 805,col 8)-(line 805,col 64)",
            "(line 806,col 8)-(line 806,col 73)",
            "(line 807,col 8)-(line 807,col 71)",
            "(line 808,col 8)-(line 808,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testpowNull()",
        "snippet": "    @Test(expected=NullArgumentException.class)\n    public void testpowNull() {\n        Complex.ONE.pow(null);\n    }\n",
        "begin_line": 811,
        "end_line": 814,
        "comment": "",
        "child_ranges": [
            "(line 813,col 9)-(line 813,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSin()",
        "snippet": "    @Test\n    public void testSin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(3.853738, -27.01681);\n        TestUtils.assertEquals(expected, z.sin(), 1.0e-5);\n    }\n",
        "begin_line": 816,
        "end_line": 821,
        "comment": "",
        "child_ranges": [
            "(line 818,col 9)-(line 818,col 38)",
            "(line 819,col 9)-(line 819,col 60)",
            "(line 820,col 9)-(line 820,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinInf()",
        "snippet": "    @Test\n    public void testSinInf() {\n        TestUtils.assertSame(infInf, oneInf.sin());\n        TestUtils.assertSame(infNegInf, oneNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, infOne.sin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.sin());\n        TestUtils.assertSame(Complex.NaN, infInf.sin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sin());\n    }\n",
        "begin_line": 823,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 825,col 9)-(line 825,col 51)",
            "(line 826,col 9)-(line 826,col 57)",
            "(line 827,col 9)-(line 827,col 56)",
            "(line 828,col 9)-(line 828,col 59)",
            "(line 829,col 9)-(line 829,col 56)",
            "(line 830,col 9)-(line 830,col 59)",
            "(line 831,col 9)-(line 831,col 59)",
            "(line 832,col 9)-(line 832,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinNaN()",
        "snippet": "    @Test\n    public void testSinNaN() {\n        Assert.assertTrue(Complex.NaN.sin().isNaN());\n    }\n",
        "begin_line": 835,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 837,col 9)-(line 837,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinh()",
        "snippet": "    @Test\n    public void testSinh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.54812, -7.61923);\n        TestUtils.assertEquals(expected, z.sinh(), 1.0e-5);\n    }\n",
        "begin_line": 840,
        "end_line": 845,
        "comment": "",
        "child_ranges": [
            "(line 842,col 9)-(line 842,col 38)",
            "(line 843,col 9)-(line 843,col 59)",
            "(line 844,col 9)-(line 844,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhNaN()",
        "snippet": "    @Test\n    public void testSinhNaN() {\n        Assert.assertTrue(Complex.NaN.sinh().isNaN());\n    }\n",
        "begin_line": 847,
        "end_line": 850,
        "comment": "",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhInf()",
        "snippet": "    @Test\n    public void testSinhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.sinh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.sinh());\n        TestUtils.assertSame(infInf, infOne.sinh());\n        TestUtils.assertSame(negInfInf, negInfOne.sinh());\n        TestUtils.assertSame(Complex.NaN, infInf.sinh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh());\n    }\n",
        "begin_line": 852,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 854,col 9)-(line 854,col 57)",
            "(line 855,col 9)-(line 855,col 60)",
            "(line 856,col 9)-(line 856,col 52)",
            "(line 857,col 9)-(line 857,col 58)",
            "(line 858,col 9)-(line 858,col 57)",
            "(line 859,col 9)-(line 859,col 60)",
            "(line 860,col 9)-(line 860,col 60)",
            "(line 861,col 9)-(line 861,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()",
        "snippet": "    @Test\n    public void testSqrtRealPositive() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(2, 1);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 864,
        "end_line": 869,
        "comment": "",
        "child_ranges": [
            "(line 866,col 9)-(line 866,col 38)",
            "(line 867,col 9)-(line 867,col 45)",
            "(line 868,col 9)-(line 868,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()",
        "snippet": "    @Test\n    public void testSqrtRealZero() {\n        Complex z = new Complex(0.0, 4);\n        Complex expected = new Complex(1.41421, 1.41421);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 871,
        "end_line": 876,
        "comment": "",
        "child_ranges": [
            "(line 873,col 9)-(line 873,col 40)",
            "(line 874,col 9)-(line 874,col 57)",
            "(line 875,col 9)-(line 875,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()",
        "snippet": "    @Test\n    public void testSqrtRealNegative() {\n        Complex z = new Complex(-3.0, 4);\n        Complex expected = new Complex(1, 2);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 878,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 880,col 9)-(line 880,col 41)",
            "(line 881,col 9)-(line 881,col 45)",
            "(line 882,col 9)-(line 882,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()",
        "snippet": "    @Test\n    public void testSqrtImaginaryZero() {\n        Complex z = new Complex(-3.0, 0.0);\n        Complex expected = new Complex(0.0, 1.73205);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 885,
        "end_line": 890,
        "comment": "",
        "child_ranges": [
            "(line 887,col 9)-(line 887,col 43)",
            "(line 888,col 9)-(line 888,col 53)",
            "(line 889,col 9)-(line 889,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()",
        "snippet": "    @Test\n    public void testSqrtImaginaryNegative() {\n        Complex z = new Complex(-3.0, -4.0);\n        Complex expected = new Complex(1.0, -2.0);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 892,
        "end_line": 897,
        "comment": "",
        "child_ranges": [
            "(line 894,col 9)-(line 894,col 44)",
            "(line 895,col 9)-(line 895,col 50)",
            "(line 896,col 9)-(line 896,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()",
        "snippet": "    @Test\n    public void testSqrtPolar() {\n        double r = 1;\n        for (int i = 0; i < 5; i++) {\n            r += i;\n            double theta = 0;\n            for (int j =0; j < 11; j++) {\n                theta += pi /12;\n                Complex z = ComplexUtils.polar2Complex(r, theta);\n                Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2);\n                TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12);\n            }\n        }\n    }\n",
        "begin_line": 899,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 901,col 9)-(line 901,col 21)",
            "(line 902,col 9)-(line 911,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()",
        "snippet": "    @Test\n    public void testSqrtNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt().isNaN());\n    }\n",
        "begin_line": 914,
        "end_line": 917,
        "comment": "",
        "child_ranges": [
            "(line 916,col 9)-(line 916,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtInf()",
        "snippet": "    @Test\n    public void testSqrtInf() {\n        TestUtils.assertSame(infNaN, oneInf.sqrt());\n        TestUtils.assertSame(infNaN, oneNegInf.sqrt());\n        TestUtils.assertSame(infZero, infOne.sqrt());\n        TestUtils.assertSame(zeroInf, negInfOne.sqrt());\n        TestUtils.assertSame(infNaN, infInf.sqrt());\n        TestUtils.assertSame(infNaN, infNegInf.sqrt());\n        TestUtils.assertSame(nanInf, negInfInf.sqrt());\n        TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt());\n    }\n",
        "begin_line": 919,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 921,col 9)-(line 921,col 52)",
            "(line 922,col 9)-(line 922,col 55)",
            "(line 923,col 9)-(line 923,col 53)",
            "(line 924,col 9)-(line 924,col 56)",
            "(line 925,col 9)-(line 925,col 52)",
            "(line 926,col 9)-(line 926,col 55)",
            "(line 927,col 9)-(line 927,col 55)",
            "(line 928,col 9)-(line 928,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1z()",
        "snippet": "    @Test\n    public void testSqrt1z() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(4.08033, -2.94094);\n        TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5);\n    }\n",
        "begin_line": 931,
        "end_line": 936,
        "comment": "",
        "child_ranges": [
            "(line 933,col 9)-(line 933,col 38)",
            "(line 934,col 9)-(line 934,col 58)",
            "(line 935,col 9)-(line 935,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()",
        "snippet": "    @Test\n    public void testSqrt1zNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt1z().isNaN());\n    }\n",
        "begin_line": 938,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 940,col 9)-(line 940,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTan()",
        "snippet": "    @Test\n    public void testTan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n    }\n",
        "begin_line": 943,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 945,col 9)-(line 945,col 38)",
            "(line 946,col 9)-(line 946,col 63)",
            "(line 947,col 9)-(line 947,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanNaN()",
        "snippet": "    @Test\n    public void testTanNaN() {\n        Assert.assertTrue(Complex.NaN.tan().isNaN());\n    }\n",
        "begin_line": 950,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 952,col 9)-(line 952,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanInf()",
        "snippet": "    @Test\n    public void testTanInf() {\n        TestUtils.assertSame(zeroNaN, oneInf.tan());\n        TestUtils.assertSame(zeroNaN, oneNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, infOne.tan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());\n        TestUtils.assertSame(Complex.NaN, infInf.tan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());\n    }\n",
        "begin_line": 955,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 957,col 9)-(line 957,col 52)",
            "(line 958,col 9)-(line 958,col 55)",
            "(line 959,col 9)-(line 959,col 56)",
            "(line 960,col 9)-(line 960,col 59)",
            "(line 961,col 9)-(line 961,col 56)",
            "(line 962,col 9)-(line 962,col 59)",
            "(line 963,col 9)-(line 963,col 59)",
            "(line 964,col 9)-(line 964,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanCritical()",
        "snippet": "   @Test\n   public void testTanCritical() {\n        TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan());\n        TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan());\n    }\n",
        "begin_line": 967,
        "end_line": 971,
        "comment": "",
        "child_ranges": [
            "(line 969,col 9)-(line 969,col 65)",
            "(line 970,col 9)-(line 970,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanh()",
        "snippet": "    @Test\n    public void testTanh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);\n    }\n",
        "begin_line": 973,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 975,col 9)-(line 975,col 38)",
            "(line 976,col 9)-(line 976,col 60)",
            "(line 977,col 9)-(line 977,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhNaN()",
        "snippet": "    @Test\n    public void testTanhNaN() {\n        Assert.assertTrue(Complex.NaN.tanh().isNaN());\n    }\n",
        "begin_line": 980,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 982,col 9)-(line 982,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhInf()",
        "snippet": "    @Test\n    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(nanZero, infOne.tanh());\n        TestUtils.assertSame(nanZero, negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }\n",
        "begin_line": 985,
        "end_line": 995,
        "comment": "",
        "child_ranges": [
            "(line 987,col 9)-(line 987,col 57)",
            "(line 988,col 9)-(line 988,col 60)",
            "(line 989,col 9)-(line 989,col 53)",
            "(line 990,col 9)-(line 990,col 56)",
            "(line 991,col 9)-(line 991,col 57)",
            "(line 992,col 9)-(line 992,col 60)",
            "(line 993,col 9)-(line 993,col 60)",
            "(line 994,col 9)-(line 994,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhCritical()",
        "snippet": "    @Test\n    public void testTanhCritical() {\n        TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());\n    }\n",
        "begin_line": 997,
        "end_line": 1000,
        "comment": "",
        "child_ranges": [
            "(line 999,col 9)-(line 999,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMath221()",
        "snippet": "    @Test\n    public void testMath221() {\n        Assert.assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n    }\n",
        "begin_line": 1003,
        "end_line": 1006,
        "comment": " test issue MATH-221 ",
        "child_ranges": [
            "(line 1005,col 9)-(line 1005,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_thirdRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_thirdRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(-2,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.3660254037844386,  thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.36602540378443843,  thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(0.366025403784439,    thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.3660254037844384,  thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1019,
        "end_line": 1036,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = -2 + 2 * i</b>\n     *   => z_0 =  1      +          i\n     *   => z_1 = -1.3660 + 0.3660 * i\n     *   => z_2 =  0.3660 - 1.3660 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1022,col 9)-(line 1022,col 38)",
            "(line 1024,col 9)-(line 1024,col 71)",
            "(line 1026,col 9)-(line 1026,col 53)",
            "(line 1028,col 9)-(line 1028,col 91)",
            "(line 1029,col 9)-(line 1029,col 91)",
            "(line 1031,col 9)-(line 1031,col 91)",
            "(line 1032,col 9)-(line 1032,col 91)",
            "(line 1034,col 9)-(line 1034,col 91)",
            "(line 1035,col 9)-(line 1035,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_fourthRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_fourthRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(5,-2);\n        // The List holding all fourth roots\n        Complex[] fourthRootsOfZ = z.nthRoot(4).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(4, fourthRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(-0.14469266210702247,   fourthRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(0.14469266210702256,    fourthRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(0.14469266210702267,    fourthRootsOfZ[2].getImaginary(), 1.0e-5);\n        // test z_3\n        Assert.assertEquals(-0.14469266210702275,   fourthRootsOfZ[3].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[3].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1051,
        "end_line": 1071,
        "comment": "\n     * Test: computing <b>fourth roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 5 - 2 * i</b>\n     *   => z_0 =  1.5164 - 0.1446 * i\n     *   => z_1 =  0.1446 + 1.5164 * i\n     *   => z_2 = -1.5164 + 0.1446 * i\n     *   => z_3 = -1.5164 - 0.1446 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1054,col 9)-(line 1054,col 38)",
            "(line 1056,col 9)-(line 1056,col 72)",
            "(line 1058,col 9)-(line 1058,col 54)",
            "(line 1060,col 9)-(line 1060,col 94)",
            "(line 1061,col 9)-(line 1061,col 94)",
            "(line 1063,col 9)-(line 1063,col 94)",
            "(line 1064,col 9)-(line 1064,col 94)",
            "(line 1066,col 9)-(line 1066,col 94)",
            "(line 1067,col 9)-(line 1067,col 94)",
            "(line 1069,col 9)-(line 1069,col 94)",
            "(line 1070,col 9)-(line 1070,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty() {\n        // The number 8 has three third roots. One we all already know is the number 2.\n        // But there are two more complex roots.\n        Complex z = new Complex(8,0);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.0,                thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1084,
        "end_line": 1102,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 8</b>\n     *   => z_0 =  2\n     *   => z_1 = -1 + 1.73205 * i\n     *   => z_2 = -1 - 1.73205 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1088,col 9)-(line 1088,col 37)",
            "(line 1090,col 9)-(line 1090,col 71)",
            "(line 1092,col 9)-(line 1092,col 53)",
            "(line 1094,col 9)-(line 1094,col 89)",
            "(line 1095,col 9)-(line 1095,col 89)",
            "(line 1097,col 9)-(line 1097,col 89)",
            "(line 1098,col 9)-(line 1098,col 89)",
            "(line 1100,col 9)-(line 1100,col 89)",
            "(line 1101,col 9)-(line 1101,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_realPartZero()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_realPartZero() {\n        // complex number with only imaginary part\n        Complex z = new Complex(0,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0911236359717216,     thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.2599210498948732,     thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1116,
        "end_line": 1133,
        "comment": "\n     * Test: computing <b>third roots</b> of z with real part 0.\n     * <pre>\n     * <code>\n     * <b>z = 2 * i</b>\n     *   => z_0 =  1.0911 + 0.6299 * i\n     *   => z_1 = -1.0911 + 0.6299 * i\n     *   => z_2 = -2.3144 - 1.2599 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1119,col 9)-(line 1119,col 37)",
            "(line 1121,col 9)-(line 1121,col 71)",
            "(line 1123,col 9)-(line 1123,col 53)",
            "(line 1125,col 9)-(line 1125,col 94)",
            "(line 1126,col 9)-(line 1126,col 94)",
            "(line 1128,col 9)-(line 1128,col 94)",
            "(line 1129,col 9)-(line 1129,col 94)",
            "(line 1131,col 9)-(line 1131,col 94)",
            "(line 1132,col 9)-(line 1132,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_NAN_Inf() {\n        // NaN + finite -> NaN\n        List<Complex> roots = oneNaN.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        roots = nanZero.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // NaN + infinite -> NaN\n        roots = nanInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // finite + infinite -> Inf\n        roots = oneInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n\n        // infinite + infinite -> Inf\n        roots = negInfInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n    }\n",
        "begin_line": 1138,
        "end_line": 1163,
        "comment": "\n     * Test cornercases with NaN and Infinity.\n     ",
        "child_ranges": [
            "(line 1141,col 9)-(line 1141,col 48)",
            "(line 1142,col 9)-(line 1142,col 44)",
            "(line 1143,col 9)-(line 1143,col 55)",
            "(line 1145,col 9)-(line 1145,col 35)",
            "(line 1146,col 9)-(line 1146,col 44)",
            "(line 1147,col 9)-(line 1147,col 55)",
            "(line 1150,col 9)-(line 1150,col 34)",
            "(line 1151,col 9)-(line 1151,col 44)",
            "(line 1152,col 9)-(line 1152,col 55)",
            "(line 1155,col 9)-(line 1155,col 34)",
            "(line 1156,col 9)-(line 1156,col 44)",
            "(line 1157,col 9)-(line 1157,col 55)",
            "(line 1160,col 9)-(line 1160,col 37)",
            "(line 1161,col 9)-(line 1161,col 44)",
            "(line 1162,col 9)-(line 1162,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgument()",
        "snippet": "    @Test\n    public void testGetArgument() {\n        Complex z = new Complex(1, 0);\n        Assert.assertEquals(0.0, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, 1);\n        Assert.assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, 1);\n        Assert.assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 1);\n        Assert.assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 0);\n        Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, -1);\n        Assert.assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, -1);\n        Assert.assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, -1);\n        Assert.assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n    }\n",
        "begin_line": 1168,
        "end_line": 1194,
        "comment": "\n     * Test standard values\n     ",
        "child_ranges": [
            "(line 1170,col 9)-(line 1170,col 38)",
            "(line 1171,col 9)-(line 1171,col 59)",
            "(line 1173,col 9)-(line 1173,col 30)",
            "(line 1174,col 9)-(line 1174,col 69)",
            "(line 1176,col 9)-(line 1176,col 30)",
            "(line 1177,col 9)-(line 1177,col 69)",
            "(line 1179,col 9)-(line 1179,col 31)",
            "(line 1180,col 9)-(line 1180,col 73)",
            "(line 1182,col 9)-(line 1182,col 31)",
            "(line 1183,col 9)-(line 1183,col 67)",
            "(line 1185,col 9)-(line 1185,col 32)",
            "(line 1186,col 9)-(line 1186,col 74)",
            "(line 1188,col 9)-(line 1188,col 31)",
            "(line 1189,col 9)-(line 1189,col 70)",
            "(line 1191,col 9)-(line 1191,col 31)",
            "(line 1192,col 9)-(line 1192,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentInf()",
        "snippet": "    @Test\n    public void testGetArgumentInf() {\n        Assert.assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);\n    }\n",
        "begin_line": 1199,
        "end_line": 1209,
        "comment": "\n     * Verify atan2-style handling of infinite parts\n     ",
        "child_ranges": [
            "(line 1201,col 9)-(line 1201,col 74)",
            "(line 1202,col 9)-(line 1202,col 74)",
            "(line 1203,col 9)-(line 1203,col 64)",
            "(line 1204,col 9)-(line 1204,col 75)",
            "(line 1205,col 9)-(line 1205,col 65)",
            "(line 1206,col 9)-(line 1206,col 75)",
            "(line 1207,col 9)-(line 1207,col 85)",
            "(line 1208,col 9)-(line 1208,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN()",
        "snippet": "    @Test\n    public void testGetArgumentNaN() {\n        Assert.assertTrue(Double.isNaN(nanZero.getArgument()));\n        Assert.assertTrue(Double.isNaN(zeroNaN.getArgument()));\n        Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument()));\n    }\n",
        "begin_line": 1214,
        "end_line": 1219,
        "comment": "\n     * Verify that either part NaN results in NaN\n     ",
        "child_ranges": [
            "(line 1216,col 9)-(line 1216,col 63)",
            "(line 1217,col 9)-(line 1217,col 63)",
            "(line 1218,col 9)-(line 1218,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(z, TestUtils.serializeAndRecover(z));\n        Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN);\n        Assert.assertEquals(nanZero, ncmplx);\n        Assert.assertTrue(ncmplx.isNaN());\n        Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf);\n        Assert.assertEquals(infInf, infcmplx);\n        Assert.assertTrue(infcmplx.isInfinite());\n        TestComplex tz = new TestComplex(3.0, 4.0);\n        Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz));\n        TestComplex ntcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(oneNaN));\n        Assert.assertEquals(nanZero, ntcmplx);\n        Assert.assertTrue(ntcmplx.isNaN());\n        TestComplex inftcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(infInf));\n        Assert.assertEquals(infInf, inftcmplx);\n        Assert.assertTrue(inftcmplx.isInfinite());\n    }\n",
        "begin_line": 1221,
        "end_line": 1239,
        "comment": "",
        "child_ranges": [
            "(line 1223,col 9)-(line 1223,col 42)",
            "(line 1224,col 9)-(line 1224,col 65)",
            "(line 1225,col 9)-(line 1225,col 72)",
            "(line 1226,col 9)-(line 1226,col 45)",
            "(line 1227,col 9)-(line 1227,col 42)",
            "(line 1228,col 9)-(line 1228,col 74)",
            "(line 1229,col 9)-(line 1229,col 46)",
            "(line 1230,col 9)-(line 1230,col 49)",
            "(line 1231,col 9)-(line 1231,col 51)",
            "(line 1232,col 9)-(line 1232,col 67)",
            "(line 1233,col 9)-(line 1233,col 98)",
            "(line 1234,col 9)-(line 1234,col 46)",
            "(line 1235,col 9)-(line 1235,col 43)",
            "(line 1236,col 9)-(line 1236,col 100)",
            "(line 1237,col 9)-(line 1237,col 47)",
            "(line 1238,col 9)-(line 1238,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(double, double)",
        "snippet": "        public TestComplex(double real, double imaginary) {\n            super(real, imaginary);\n        }\n",
        "begin_line": 1251,
        "end_line": 1253,
        "comment": "",
        "child_ranges": [
            "(line 1252,col 13)-(line 1252,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(org.apache.commons.math.complex.Complex)",
        "snippet": "        public TestComplex(Complex other){\n            this(other.getReal(), other.getImaginary());\n        }\n",
        "begin_line": 1255,
        "end_line": 1257,
        "comment": "",
        "child_ranges": [
            "(line 1256,col 13)-(line 1256,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.createComplex(double, double)",
        "snippet": "        @Override\n        protected TestComplex createComplex(double real, double imaginary){\n            return new TestComplex(real, imaginary);\n        }\n",
        "begin_line": 1259,
        "end_line": 1262,
        "comment": "",
        "child_ranges": [
            "(line 1261,col 13)-(line 1261,col 52)"
        ]
    }
]