[
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OBJECT_IDS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_ID_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGET_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BREAK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CONTINUE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ENUM_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FUNCTION_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TEMP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CODEOFFSET_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FIXUPS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARS_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.USES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REGEXP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEFAULT_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASEARRAY_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TYPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FINALLY_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCALCOUNT_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGETBLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARIABLE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LASTUSE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ISNUMBER_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTCALL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCEFILE_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS_CALL",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "    public static final int\n        // Rhino's AST captures data flow. These are the annotations\n        // it used. We've mostly torn them out.\n        LOCAL_BLOCK_PROP  = -3,\n        OBJECT_IDS_PROP   = -2,\n        CATCH_SCOPE_PROP  = -1,\n        LABEL_ID_PROP     =  0,\n\n        TARGET_PROP       =  1,\n        BREAK_PROP        =  2,\n        CONTINUE_PROP     =  3,\n        ENUM_PROP         =  4,\n        FUNCTION_PROP     =  5,\n        TEMP_PROP         =  6,\n        LOCAL_PROP        =  7,\n        CODEOFFSET_PROP   =  8,\n        FIXUPS_PROP       =  9,\n        VARS_PROP         = 10,\n        USES_PROP         = 11,\n        REGEXP_PROP       = 12,\n        CASES_PROP        = 13,\n        DEFAULT_PROP      = 14,\n        CASEARRAY_PROP    = 15,\n        SOURCENAME_PROP   = 16,\n        TYPE_PROP         = 17,\n        SPECIAL_PROP_PROP = 18,\n        LABEL_PROP        = 19,\n        FINALLY_PROP      = 20,\n        LOCALCOUNT_PROP   = 21,\n    /*\n        the following properties are defined and manipulated by the\n        optimizer -\n        TARGETBLOCK_PROP - the block referenced by a branch node\n        VARIABLE_PROP - the variable referenced by a BIND or NAME node\n        LASTUSE_PROP - that variable node is the last reference before\n                        a new def or the end of the block\n        ISNUMBER_PROP - this node generates code on Number children and\n                        delivers a Number result (as opposed to Objects)\n        DIRECTCALL_PROP - this call node should emit code to test the function\n                          object against the known class and call diret if it\n                          matches.\n    */\n\n        TARGETBLOCK_PROP  = 22,\n        VARIABLE_PROP     = 23,\n        LASTUSE_PROP      = 24,\n        ISNUMBER_PROP     = 25,\n        DIRECTCALL_PROP   = 26,\n\n        SPECIALCALL_PROP  = 27,\n        DEBUGSOURCE_PROP  = 28,\n        JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n        VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                    // argument placeholder. It can never be\n                                    // used in conjunction with JSDOC_INFO_PROP.\n        SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n        INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n        MEMBER_TYPE_PROP   = 32,    // type of element access operation\n        NAME_PROP          = 33,    // property name\n        PARENTHESIZED_PROP = 34,    // expression is parenthesized\n        QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n        OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n        SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                    // processing simpler, and does not\n                                    // represent a real block in the source.\n        SOURCEFILE_PROP    = 38,    // Contains the path of the source file\n                                    // from which the current node was parsed.\n        EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                    // EMPTY nodes.\n        ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                    // renaming.\n        BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n        NO_SIDE_EFFECTS_CALL = 42,  // Function or constructor call has no\n                                    // side effects.\n        // Coding convention props\n        IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n        IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n        IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n        IS_NAMESPACE       = 46,    // The variable creates a namespace.\n        IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                    // probably generated from Java code, and\n                                    // should be resolved to the proper\n                                    // overload if possible.\n        DIRECTIVES         = 48,    // The ES5 directives on this node.\n        DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                    // indirect calls to eval.\n        LAST_PROP          = 49;",
        "begin_line": 67,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BOTH",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LEFT",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.RIGHT",
        "snippet": "    public static final int\n        BOTH = 0,\n        LEFT = 1,\n        RIGHT = 2;",
        "begin_line": 157,
        "end_line": 160,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NON_SPECIALCALL",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_EVAL",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_WITH",
        "snippet": "    public static final int    // values for SPECIALCALL_PROP\n        NON_SPECIALCALL  = 0,\n        SPECIALCALL_EVAL = 1,\n        SPECIALCALL_WITH = 2;",
        "begin_line": 162,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "    public static final int   // flags for INCRDECR_PROP\n        DECR_FLAG = 0x1,\n        POST_FLAG = 0x2;",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "    public static final int   // flags for INCRDECR_PROP\n        DECR_FLAG = 0x1,\n        POST_FLAG = 0x2;",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PROPERTY_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DESCENDANTS_FLAG",
        "snippet": "    public static final int   // flags for MEMBER_TYPE_PROP\n        PROPERTY_FLAG    = 0x1, // property access: element is valid name\n        ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n        DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 171,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 245,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "        private double number;",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 275,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "        private String str;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 337,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.next",
        "snippet": "        PropListItem next;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.type",
        "snippet": "        int type;",
        "begin_line": 340,
        "end_line": 340,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.intValue",
        "snippet": "        int intValue;",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.objectValue",
        "snippet": "        Object objectValue;",
        "begin_line": 342,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "    int type;              // type of the node; Token.NAME for example",
        "begin_line": 1039,
        "end_line": 1039,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "    Node next;             // next sibling",
        "begin_line": 1040,
        "end_line": 1040,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "    private Node first;    // first element of a linked list of children",
        "begin_line": 1041,
        "end_line": 1041,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "    private Node last;     // last element of a linked list of children",
        "begin_line": 1042,
        "end_line": 1042,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "    private PropListItem propListHead;",
        "begin_line": 1050,
        "end_line": 1050,
        "comment": "\n     * Linked list of properties. Since vast majority of nodes would have\n     * no more then 2 properties, linked list saves memory and provides\n     * fast lookup. If this does not holds, propListHead can be replaced\n     * by UintMap.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "    public static final int COLUMN_BITS = 12;",
        "begin_line": 1060,
        "end_line": 1060,
        "comment": "\n     * COLUMN_BITS represents how many of the lower-order bits of\n     * sourcePosition are reserved for storing the column number.\n     * Bits above these store the line number.\n     * This gives us decent position information for everything except\n     * files already passed through a minimizer, where lines might\n     * be longer than 4096 characters.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "    public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1067,
        "end_line": 1067,
        "comment": "\n     * MAX_COLUMN_NUMBER represents the maximum column number that can\n     * be represented.  JSCompiler's modifications to Rhino cause all\n     * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "    public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1074,
        "end_line": 1074,
        "comment": "\n     * COLUMN_MASK stores a value where bits storing the column number\n     * are set, and bits storing the line are not set.  It's handy for\n     * separating column number from line number.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "    private int sourcePosition;",
        "begin_line": 1082,
        "end_line": 1082,
        "comment": "\n     * Source position of this node. The position is encoded with the\n     * column number in the low 12 bits of the integer, and the line\n     * number in the rest.  Create some handy constants so we can change this\n     * size if we want.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "    private JSType jsType;",
        "begin_line": 1084,
        "end_line": 1084,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "    private Node parent;",
        "begin_line": 1086,
        "end_line": 1086,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "        private final Node start;",
        "begin_line": 1182,
        "end_line": 1182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "        private Node current;",
        "begin_line": 1183,
        "end_line": 1183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "        private boolean used;",
        "begin_line": 1184,
        "end_line": 1184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "      private Node cur;",
        "begin_line": 1258,
        "end_line": 1258,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "      final Node nodeA;",
        "begin_line": 2040,
        "end_line": 2040,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "      final Node nodeB;",
        "begin_line": 2041,
        "end_line": 2041,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 86,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 94,
        "end_line": 98,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 900,
        "end_line": 900,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 901,
        "end_line": 901,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.leastSupertypeVisitor",
        "snippet": "  private final Visitor<JSType> leastSupertypeVisitor =\n      new LeastSupertypeVisitor();",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\n   * Visitor for {@link NoObjectType#getLeastSupertype(JSType)}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.LeastSupertypeVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.LeastSupertypeVisitor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.greatestSubtypeVisitor",
        "snippet": "  private final Visitor<JSType> greatestSubtypeVisitor =\n      new GreatestSupertypeVisitor();",
        "begin_line": 143,
        "end_line": 144,
        "comment": "\n   * Visitor for {@link NoObjectType#getGreatestSubtype(JSType)}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.GreatestSupertypeVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.GreatestSupertypeVisitor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedType",
        "snippet": "  ObjectType referencedType;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototype",
        "snippet": "  private FunctionPrototypeType prototype;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n   * The interfaces directly implemented by this function.\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 122,
        "end_line": 122,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototype",
        "snippet": "  private ObjectType implicitPrototype;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 423,
        "end_line": 423,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 428,
        "end_line": 428,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 433,
        "end_line": 433,
        "comment": "\n     * Whether the property is defined in the externs.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 436,
        "end_line": 436,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.ownerFunction",
        "snippet": "  private final FunctionType ownerFunction;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.reference",
        "snippet": "  private final String reference;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.lineno",
        "snippet": "  private final int lineno;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.charno",
        "snippet": "  private final int charno;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.forgiving",
        "snippet": "  private boolean forgiving = false;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n   * If true, don't warn about unresolveable type names.\n   *\n   * NOTE(nicksantos): A lot of third-party code doesn't use our type syntax.\n   * They have code like\n   * {@code @return} the bus.\n   * and they clearly don't mean that \"the\" is a type. In these cases, we're\n   * forgiving and try to guess whether or not \"the\" is a type when it's not\n   * clear.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.MAX_UNION_SIZE",
        "snippet": "  private static final int MAX_UNION_SIZE = 20;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Set<JSType> alternates;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.LP);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.enumTypeNames",
        "snippet": "  private final Set<String> enumTypeNames = new HashSet<String>();",
        "begin_line": 105,
        "end_line": 105,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 110,
        "end_line": 110,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, Set<ObjectType>> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 114,
        "end_line": 115,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 120,
        "end_line": 121,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      HashMultimap.create();",
        "begin_line": 124,
        "end_line": 125,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 128,
        "end_line": 129,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 132,
        "end_line": 133,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateType",
        "snippet": "  private TemplateType templateType;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The template type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 235,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    }
]