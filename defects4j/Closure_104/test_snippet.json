[
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    unresolvedNamedType =\n        new NamedType(registry, \"not.resolved.named.type\", null, -1, -1);\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 18)",
            "(line 50,col 5)-(line 51,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.assertTypeCanAssignToItself(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assertTypeCanAssignToItself(JSType type) {\n    assertTrue(type.canAssignTo(type));\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n   * Assert that a type can assign to itself.\n   ",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testUnionType()",
        "snippet": "  @SuppressWarnings(\"checked\")\n      public void testUnionType() throws Exception {\n    UnionType nullOrString =\n        (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE);\n    UnionType stringOrNull =\n        (UnionType) createUnionType(STRING_OBJECT_TYPE, NULL_TYPE);\n\n    assertEquals(nullOrString, stringOrNull);\n    assertEquals(stringOrNull, nullOrString);\n\n    assertTypeCanAssignToItself(createUnionType(VOID_TYPE, NUMBER_TYPE));\n    assertTypeCanAssignToItself(\n        createUnionType(NUMBER_TYPE, STRING_TYPE, OBJECT_TYPE));\n    assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE));\n    assertTypeCanAssignToItself(createUnionType(VOID_TYPE));\n\n    UnionType nullOrUnknown =\n        (UnionType) createUnionType(NULL_TYPE, unresolvedNamedType);\n    assertTrue(nullOrUnknown.isUnknownType());\n    assertEquals(nullOrUnknown, NULL_TYPE.getLeastSupertype(nullOrUnknown));\n    assertEquals(nullOrUnknown, nullOrUnknown.getLeastSupertype(NULL_TYPE));\n    assertEquals(UNKNOWN_TYPE,\n        NULL_TYPE.getGreatestSubtype(nullOrUnknown));\n    assertEquals(UNKNOWN_TYPE,\n        nullOrUnknown.getGreatestSubtype(NULL_TYPE));\n\n    assertTrue(NULL_TYPE.differsFrom(nullOrUnknown));\n    assertTrue(nullOrUnknown.differsFrom(NULL_TYPE));\n    assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType));\n\n    assertTrue(NULL_TYPE.isSubtype(nullOrUnknown));\n    assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown));\n    assertTrue(nullOrUnknown.isSubtype(NULL_TYPE));\n\n    assertEquals(unresolvedNamedType,\n        nullOrUnknown.restrictByNotNullOrUndefined());\n\n    // findPropertyType\n    assertEquals(NUMBER_TYPE, nullOrString.findPropertyType(\"length\"));\n    assertEquals(null, nullOrString.findPropertyType(\"lengthx\"));\n\n    Asserts.assertResolvesToSame(nullOrString);\n  }\n",
        "begin_line": 64,
        "end_line": 106,
        "comment": "\n   * Tests the behavior of variants type.\n   ",
        "child_ranges": [
            "(line 66,col 5)-(line 67,col 67)",
            "(line 68,col 5)-(line 69,col 67)",
            "(line 71,col 5)-(line 71,col 45)",
            "(line 72,col 5)-(line 72,col 45)",
            "(line 74,col 5)-(line 74,col 73)",
            "(line 75,col 5)-(line 76,col 64)",
            "(line 77,col 5)-(line 77,col 76)",
            "(line 78,col 5)-(line 78,col 60)",
            "(line 80,col 5)-(line 81,col 68)",
            "(line 82,col 5)-(line 82,col 46)",
            "(line 83,col 5)-(line 83,col 76)",
            "(line 84,col 5)-(line 84,col 76)",
            "(line 85,col 5)-(line 86,col 53)",
            "(line 87,col 5)-(line 88,col 53)",
            "(line 90,col 5)-(line 90,col 53)",
            "(line 91,col 5)-(line 91,col 53)",
            "(line 92,col 5)-(line 92,col 64)",
            "(line 94,col 5)-(line 94,col 51)",
            "(line 95,col 5)-(line 95,col 61)",
            "(line 96,col 5)-(line 96,col 51)",
            "(line 98,col 5)-(line 99,col 54)",
            "(line 102,col 5)-(line 102,col 71)",
            "(line 103,col 5)-(line 103,col 65)",
            "(line 105,col 5)-(line 105,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGreatestSubtypeUnionTypes1()",
        "snippet": "  public void testGreatestSubtypeUnionTypes1() {\n    assertEquals(NULL_TYPE, createNullableType(STRING_TYPE).getGreatestSubtype(\n            createNullableType(NUMBER_TYPE)));\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "\n   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n   ",
        "child_ranges": [
            "(line 112,col 5)-(line 113,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGreatestSubtypeUnionTypes2()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGreatestSubtypeUnionTypes2() {\n    UnionType evalUriError =\n        (UnionType) createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n    assertEquals(evalUriError,\n        evalUriError.getGreatestSubtype(ERROR_TYPE));\n  }\n",
        "begin_line": 119,
        "end_line": 125,
        "comment": "\n   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 122,col 69)",
            "(line 123,col 5)-(line 124,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGreatestSubtypeUnionTypes3()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGreatestSubtypeUnionTypes3() {\n    // (number,undefined,null)\n    UnionType nullableOptionalNumber =\n        (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);\n    // (null,undefined)\n    UnionType nullUndefined =\n        (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);\n    assertEquals(nullUndefined,\n        nullUndefined.getGreatestSubtype(nullableOptionalNumber));\n    assertEquals(nullUndefined,\n        nullableOptionalNumber.getGreatestSubtype(nullUndefined));\n  }\n",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n   ",
        "child_ranges": [
            "(line 133,col 5)-(line 134,col 71)",
            "(line 136,col 5)-(line 137,col 58)",
            "(line 138,col 5)-(line 139,col 66)",
            "(line 140,col 5)-(line 141,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGreatestSubtypeUnionTypes4()",
        "snippet": "  public void testGreatestSubtypeUnionTypes4() throws Exception {\n    UnionType errUnion = (UnionType) createUnionType(\n        NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n    assertEquals(createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE),\n        errUnion.getGreatestSubtype(ERROR_TYPE));\n  }\n",
        "begin_line": 147,
        "end_line": 152,
        "comment": "\n   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n   ",
        "child_ranges": [
            "(line 148,col 5)-(line 149,col 52)",
            "(line 150,col 5)-(line 151,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGreatestSubtypeUnionTypes5()",
        "snippet": "  public void testGreatestSubtypeUnionTypes5() throws Exception {\n    JSType errUnion = createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n    assertEquals(NO_OBJECT_TYPE,\n        errUnion.getGreatestSubtype(STRING_OBJECT_TYPE));\n  }\n",
        "begin_line": 157,
        "end_line": 161,
        "comment": "\n   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n   ",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 71)",
            "(line 159,col 5)-(line 160,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testSubtypingUnionTypes()",
        "snippet": "  public void testSubtypingUnionTypes() throws Exception {\n    // subtypes\n    assertTrue(BOOLEAN_TYPE.\n        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));\n    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));\n    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n    assertTrue(createUnionType(BOOLEAN_TYPE).\n        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n    assertTrue(createUnionType(STRING_TYPE).\n        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n    assertTrue(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(ALL_TYPE));\n    assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE));\n    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).\n        isSubtype(ERROR_TYPE));\n    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).\n        isSubtype(OBJECT_TYPE));\n\n    // not subtypes\n    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_TYPE));\n    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).\n        isSubtype(NO_OBJECT_TYPE));\n    assertFalse(createUnionType(NO_OBJECT_TYPE, NULL_TYPE).\n        isSubtype(OBJECT_TYPE));\n\n    // defined unions\n    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n\n    assertTrue(NUMBER_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n    assertTrue(BOOLEAN_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n    assertTrue(STRING_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n\n    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n    assertTrue(BOOLEAN_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n  }\n",
        "begin_line": 166,
        "end_line": 209,
        "comment": "\n   * Tests subtyping of union types.\n   ",
        "child_ranges": [
            "(line 168,col 5)-(line 169,col 63)",
            "(line 170,col 5)-(line 171,col 63)",
            "(line 172,col 5)-(line 173,col 74)",
            "(line 174,col 5)-(line 175,col 74)",
            "(line 176,col 5)-(line 177,col 74)",
            "(line 178,col 5)-(line 179,col 74)",
            "(line 180,col 5)-(line 180,col 76)",
            "(line 181,col 5)-(line 181,col 79)",
            "(line 182,col 5)-(line 183,col 31)",
            "(line 184,col 5)-(line 185,col 32)",
            "(line 188,col 5)-(line 188,col 76)",
            "(line 189,col 5)-(line 190,col 35)",
            "(line 191,col 5)-(line 192,col 32)",
            "(line 195,col 5)-(line 195,col 60)",
            "(line 196,col 5)-(line 196,col 60)",
            "(line 197,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 63)",
            "(line 200,col 5)-(line 200,col 61)",
            "(line 201,col 5)-(line 201,col 62)",
            "(line 202,col 5)-(line 202,col 61)",
            "(line 204,col 5)-(line 204,col 68)",
            "(line 205,col 5)-(line 205,col 68)",
            "(line 206,col 5)-(line 206,col 68)",
            "(line 207,col 5)-(line 207,col 69)",
            "(line 208,col 5)-(line 208,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testSpecialUnionCanAssignTo()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testSpecialUnionCanAssignTo() throws Exception {\n    // autoboxing quirks\n    UnionType numbers =\n        (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE);\n    assertFalse(numbers.canAssignTo(NUMBER_TYPE));\n    assertFalse(numbers.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertFalse(numbers.canAssignTo(EVAL_ERROR_TYPE));\n\n    UnionType strings =\n        (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    assertFalse(strings.canAssignTo(STRING_TYPE));\n    assertFalse(strings.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(strings.canAssignTo(DATE_TYPE));\n\n    UnionType booleans =\n        (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE);\n    assertFalse(booleans.canAssignTo(BOOLEAN_TYPE));\n    assertFalse(booleans.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertFalse(booleans.canAssignTo(REGEXP_TYPE));\n\n    // unknown quirks\n    JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE);\n    assertTrue(unknown.canAssignTo(STRING_TYPE));\n\n    // all members need to be assignable to\n    UnionType stringDate =\n        (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE);\n    assertTrue(stringDate.canAssignTo(OBJECT_TYPE));\n    assertFalse(stringDate.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(stringDate.canAssignTo(DATE_TYPE));\n  }\n",
        "begin_line": 216,
        "end_line": 247,
        "comment": "\n   * Tests that special union types can assign to other types.  Unions\n   * containing the unknown type should be able to assign to any other\n   * type.\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 220,col 69)",
            "(line 221,col 5)-(line 221,col 50)",
            "(line 222,col 5)-(line 222,col 57)",
            "(line 223,col 5)-(line 223,col 54)",
            "(line 225,col 5)-(line 226,col 69)",
            "(line 227,col 5)-(line 227,col 50)",
            "(line 228,col 5)-(line 228,col 57)",
            "(line 229,col 5)-(line 229,col 48)",
            "(line 231,col 5)-(line 232,col 71)",
            "(line 233,col 5)-(line 233,col 52)",
            "(line 234,col 5)-(line 234,col 59)",
            "(line 235,col 5)-(line 235,col 51)",
            "(line 238,col 5)-(line 238,col 62)",
            "(line 239,col 5)-(line 239,col 49)",
            "(line 242,col 5)-(line 243,col 67)",
            "(line 244,col 5)-(line 244,col 52)",
            "(line 245,col 5)-(line 245,col 60)",
            "(line 246,col 5)-(line 246,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testCreateUnionType()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testCreateUnionType() throws Exception {\n    // number\n    UnionType optNumber =\n        (UnionType) registry.createUnionType(NUMBER_TYPE, DATE_TYPE);\n    assertTrue(optNumber.contains(NUMBER_TYPE));\n    assertTrue(optNumber.contains(DATE_TYPE));\n\n    // union\n    UnionType optUnion =\n        (UnionType) registry.createUnionType(REGEXP_TYPE,\n            registry.createUnionType(STRING_OBJECT_TYPE, DATE_TYPE));\n    assertTrue(optUnion.contains(DATE_TYPE));\n    assertTrue(optUnion.contains(STRING_OBJECT_TYPE));\n    assertTrue(optUnion.contains(REGEXP_TYPE));\n  }\n",
        "begin_line": 253,
        "end_line": 268,
        "comment": "\n   * Tests the factory method\n   * {@link JSTypeRegistry#createUnionType(JSType...)}.\n   ",
        "child_ranges": [
            "(line 256,col 5)-(line 257,col 69)",
            "(line 258,col 5)-(line 258,col 48)",
            "(line 259,col 5)-(line 259,col 46)",
            "(line 262,col 5)-(line 264,col 69)",
            "(line 265,col 5)-(line 265,col 45)",
            "(line 266,col 5)-(line 266,col 54)",
            "(line 267,col 5)-(line 267,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testUnionWithUnknown()",
        "snippet": "  public void testUnionWithUnknown() throws Exception {\n    assertTrue(createUnionType(UNKNOWN_TYPE, NULL_TYPE).isUnknownType());\n  }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGetRestrictedUnion1()",
        "snippet": "  public void testGetRestrictedUnion1() throws Exception {\n    UnionType numStr = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n    assertEquals(STRING_TYPE, numStr.getRestrictedUnion(NUMBER_TYPE));\n  }\n",
        "begin_line": 275,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 276,col 77)",
            "(line 277,col 5)-(line 277,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/UnionTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeTest.testGetRestrictedUnion2()",
        "snippet": "  public void testGetRestrictedUnion2() throws Exception {\n    UnionType numStr = (UnionType) createUnionType(\n        NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n    assertEquals(NULL_TYPE, numStr.getRestrictedUnion(ERROR_TYPE));\n  }\n",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 282,col 52)",
            "(line 283,col 5)-(line 283,col 67)"
        ]
    }
]