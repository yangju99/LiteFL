[
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.setClosurePass(true);\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.initOptions(options);\n    registry = compiler.getTypeRegistry();\n    assumptions = Maps.newHashMap();\n    returnScope = null;\n  }\n",
        "begin_line": 74,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 30)",
            "(line 77,col 5)-(line 77,col 52)",
            "(line 78,col 5)-(line 78,col 33)",
            "(line 79,col 5)-(line 79,col 52)",
            "(line 80,col 5)-(line 80,col 34)",
            "(line 81,col 5)-(line 81,col 42)",
            "(line 82,col 5)-(line 82,col 36)",
            "(line 83,col 5)-(line 83,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.assumingThisType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assumingThisType(JSType type) {\n    assumedThisType = type;\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 87,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.assuming(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assuming(String name, JSType type) {\n    assumptions.put(name, type);\n  }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.assuming(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void assuming(String name, JSTypeNative type) {\n    assuming(name, registry.getNativeType(type));\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.inFunction(java.lang.String)",
        "snippet": "  private void inFunction(String js) {\n    // Parse the body of the function.\n    String thisBlock = assumedThisType == null\n        ? \"\"\n        : \"/** @this {\" + assumedThisType + \"} */\";\n    Node root = compiler.parseTestCode(\n        \"(\" + thisBlock + \" function() {\" + js + \"});\");\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Node n = root.getFirstChild().getFirstChild();\n    // Create the scope with the assumptions.\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope assumedScope = scopeCreator.createScope(\n        n, scopeCreator.createScope(root, null));\n    for (Map.Entry<String,JSType> entry : assumptions.entrySet()) {\n      assumedScope.declare(entry.getKey(), null, entry.getValue(), null, false);\n    }\n    // Create the control graph.\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false);\n    cfa.process(null, n);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n    // Create a simple reverse abstract interpreter.\n    ReverseAbstractInterpreter rai = compiler.getReverseAbstractInterpreter();\n    // Do the type inference by data-flow analysis.\n    TypeInference dfa = new TypeInference(compiler, cfg, rai, assumedScope,\n        ASSERTION_FUNCTION_MAP);\n    dfa.analyze();\n    // Get the scope of the implicit return.\n    BranchedFlowState<FlowScope> rtnState =\n        cfg.getImplicitReturn().getAnnotation();\n    returnScope = rtnState.getIn();\n  }\n",
        "begin_line": 98,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 102,col 51)",
            "(line 103,col 5)-(line 104,col 56)",
            "(line 105,col 5)-(line 107,col 37)",
            "(line 109,col 5)-(line 109,col 50)",
            "(line 111,col 5)-(line 111,col 69)",
            "(line 112,col 5)-(line 113,col 49)",
            "(line 114,col 5)-(line 116,col 5)",
            "(line 118,col 5)-(line 118,col 78)",
            "(line 119,col 5)-(line 119,col 25)",
            "(line 120,col 5)-(line 120,col 46)",
            "(line 122,col 5)-(line 122,col 78)",
            "(line 124,col 5)-(line 125,col 32)",
            "(line 126,col 5)-(line 126,col 18)",
            "(line 128,col 5)-(line 129,col 48)",
            "(line 130,col 5)-(line 130,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.getType(java.lang.String)",
        "snippet": "  private JSType getType(String name) {\n    assertTrue(\"The return scope should not be null.\", returnScope != null);\n    StaticSlot<JSType> var = returnScope.getSlot(name);\n    assertTrue(\"The variable \" + name + \" is missing from the scope.\",\n        var != null);\n    return var.getType();\n  }\n",
        "begin_line": 133,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 76)",
            "(line 135,col 5)-(line 135,col 55)",
            "(line 136,col 5)-(line 137,col 21)",
            "(line 138,col 5)-(line 138,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verify(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void verify(String name, JSType type) {\n    Asserts.assertTypeEquals(type, getType(name));\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verify(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void verify(String name, JSTypeNative type) {\n    verify(name, registry.getNativeType(type));\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verifySubtypeOf(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void verifySubtypeOf(String name, JSType type) {\n    JSType varType = getType(name);\n    assertTrue(\"The variable \" + name + \" is missing a type.\", varType != null);\n    assertTrue(\"The type \" + varType + \" of variable \" + name +\n        \" is not a subtype of \" + type +\".\",  varType.isSubtype(type));\n  }\n",
        "begin_line": 149,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 150,col 35)",
            "(line 151,col 5)-(line 151,col 80)",
            "(line 152,col 5)-(line 153,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.verifySubtypeOf(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void verifySubtypeOf(String name, JSTypeNative type) {\n    verifySubtypeOf(name, registry.getNativeType(type));\n  }\n",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createEnumType(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private EnumType createEnumType(String name, JSTypeNative elemType) {\n    return createEnumType(name, registry.getNativeType(elemType));\n  }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 161,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createEnumType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private EnumType createEnumType(String name, JSType elemType) {\n    return registry.createEnumType(name, null, elemType);\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createUndefinableType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType createUndefinableType(JSTypeNative type) {\n    return registry.createUnionType(\n        registry.getNativeType(type), registry.getNativeType(VOID_TYPE));\n  }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 170,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createNullableType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType createNullableType(JSTypeNative type) {\n    return createNullableType(registry.getNativeType(type));\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private JSType createNullableType(JSType type) {\n    return registry.createNullableType(type);\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType createUnionType(JSTypeNative type1, JSTypeNative type2) {\n    return registry.createUnionType(\n        registry.getNativeType(type1), registry.getNativeType(type2));\n  }\n",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 183,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssumption()",
        "snippet": "  public void testAssumption() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 186,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 187,col 5)-(line 187,col 31)",
            "(line 188,col 5)-(line 188,col 19)",
            "(line 189,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testVar()",
        "snippet": "  public void testVar() {\n    inFunction(\"var x = 1;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 29)",
            "(line 194,col 5)-(line 194,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEmptyVar()",
        "snippet": "  public void testEmptyVar() {\n    inFunction(\"var x;\");\n    verify(\"x\", VOID_TYPE);\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 25)",
            "(line 199,col 5)-(line 199,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssignment()",
        "snippet": "  public void testAssignment() {\n    assuming(\"x\", OBJECT_TYPE);\n    inFunction(\"x = 1;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 202,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 31)",
            "(line 204,col 5)-(line 204,col 25)",
            "(line 205,col 5)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testGetProp()",
        "snippet": "  public void testGetProp() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"x.y();\");\n    verify(\"x\", OBJECT_TYPE);\n  }\n",
        "begin_line": 208,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 51)",
            "(line 210,col 5)-(line 210,col 25)",
            "(line 211,col 5)-(line 211,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testGetElemDereference()",
        "snippet": "  public void testGetElemDereference() {\n    assuming(\"x\", createUndefinableType(OBJECT_TYPE));\n    inFunction(\"x['z'] = 3;\");\n    verify(\"x\", OBJECT_TYPE);\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 54)",
            "(line 216,col 5)-(line 216,col 30)",
            "(line 217,col 5)-(line 217,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf1()",
        "snippet": "  public void testIf1() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = {}; if (x) { y = x; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 220,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 221,col 5)-(line 221,col 51)",
            "(line 222,col 5)-(line 222,col 48)",
            "(line 223,col 5)-(line 223,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf1a()",
        "snippet": "  public void testIf1a() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = {}; if (x != null) { y = x; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 226,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 51)",
            "(line 228,col 5)-(line 228,col 56)",
            "(line 229,col 5)-(line 229,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf2()",
        "snippet": "  public void testIf2() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = x; if (x) { y = x; } else { y = {}; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 232,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 51)",
            "(line 234,col 5)-(line 234,col 64)",
            "(line 235,col 5)-(line 235,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testIf3()",
        "snippet": "  public void testIf3() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 1; if (x) { y = x; }\");\n    verify(\"y\", createUnionType(OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 238,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 51)",
            "(line 240,col 5)-(line 240,col 47)",
            "(line 241,col 5)-(line 241,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() {\n    ObjectType thisType = registry.createAnonymousObjectType();\n    thisType.defineDeclaredProperty(\"foo\",\n        createUndefinableType(STRING_TYPE), null);\n    assumingThisType(thisType);\n    inFunction(\"var y = 1; if (this.foo) { y = this.foo; }\");\n    verify(\"y\", createUnionType(NUMBER_TYPE, STRING_TYPE));\n  }\n",
        "begin_line": 244,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 63)",
            "(line 246,col 5)-(line 247,col 50)",
            "(line 248,col 5)-(line 248,col 31)",
            "(line 249,col 5)-(line 249,col 61)",
            "(line 250,col 5)-(line 250,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() {\n    ObjectType thisType = registry.createAnonymousObjectType();\n    thisType.defineDeclaredProperty(\"foo\",\n        createUndefinableType(STRING_TYPE), null);\n    assumingThisType(thisType);\n    inFunction(\"var y = 1; this.foo = 'x'; y = this.foo;\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 253,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 63)",
            "(line 255,col 5)-(line 256,col 50)",
            "(line 257,col 5)-(line 257,col 31)",
            "(line 258,col 5)-(line 258,col 59)",
            "(line 259,col 5)-(line 259,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() {\n    ObjectType thisType = registry.createAnonymousObjectType();\n    thisType.defineDeclaredProperty(\"foo\",\n        createUndefinableType(STRING_TYPE), null);\n    assumingThisType(thisType);\n    inFunction(\"var y = 1; this.foo = x; y = this.foo;\");\n    verify(\"y\", CHECKED_UNKNOWN_TYPE);\n  }\n",
        "begin_line": 262,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 63)",
            "(line 264,col 5)-(line 265,col 50)",
            "(line 266,col 5)-(line 266,col 31)",
            "(line 267,col 5)-(line 267,col 57)",
            "(line 268,col 5)-(line 268,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert1()",
        "snippet": "  public void testAssert1() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 55)",
            "(line 273,col 5)-(line 273,col 29)",
            "(line 274,col 5)-(line 274,col 62)",
            "(line 275,col 5)-(line 275,col 30)",
            "(line 276,col 5)-(line 276,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert1a()",
        "snippet": "  public void testAssert1a() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x !== null); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 279,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 55)",
            "(line 281,col 5)-(line 281,col 29)",
            "(line 282,col 5)-(line 282,col 71)",
            "(line 283,col 5)-(line 283,col 30)",
            "(line 284,col 5)-(line 284,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert2()",
        "snippet": "  public void testAssert2() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"goog.asserts.assert(1, x); out1 = x;\");\n    verify(\"out1\", startType);\n  }\n",
        "begin_line": 287,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 55)",
            "(line 289,col 5)-(line 289,col 29)",
            "(line 290,col 5)-(line 290,col 55)",
            "(line 291,col 5)-(line 291,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert3()",
        "snippet": "  public void testAssert3() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x && y); out2 = x; out3 = y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n    verify(\"out3\", OBJECT_TYPE);\n  }\n",
        "begin_line": 294,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 295,col 55)",
            "(line 296,col 5)-(line 296,col 29)",
            "(line 297,col 5)-(line 297,col 29)",
            "(line 298,col 5)-(line 298,col 77)",
            "(line 299,col 5)-(line 299,col 30)",
            "(line 300,col 5)-(line 300,col 32)",
            "(line 301,col 5)-(line 301,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert4()",
        "snippet": "  public void testAssert4() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"out1 = x; goog.asserts.assert(x && !y); out2 = x; out3 = y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n    verify(\"out3\", NULL_TYPE);\n  }\n",
        "begin_line": 304,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 55)",
            "(line 306,col 5)-(line 306,col 29)",
            "(line 307,col 5)-(line 307,col 29)",
            "(line 308,col 5)-(line 308,col 78)",
            "(line 309,col 5)-(line 309,col 30)",
            "(line 310,col 5)-(line 310,col 32)",
            "(line 311,col 5)-(line 311,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert5()",
        "snippet": "  public void testAssert5() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"goog.asserts.assert(x || y); out1 = x; out2 = y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", startType);\n  }\n",
        "begin_line": 314,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 55)",
            "(line 316,col 5)-(line 316,col 29)",
            "(line 317,col 5)-(line 317,col 29)",
            "(line 318,col 5)-(line 318,col 67)",
            "(line 319,col 5)-(line 319,col 30)",
            "(line 320,col 5)-(line 320,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert6()",
        "snippet": "  public void testAssert6() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x.y\", startType);\n    inFunction(\"out1 = x.y; goog.asserts.assert(x.y); out2 = x.y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 323,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 324,col 5)-(line 324,col 55)",
            "(line 325,col 5)-(line 325,col 31)",
            "(line 326,col 5)-(line 326,col 68)",
            "(line 327,col 5)-(line 327,col 30)",
            "(line 328,col 5)-(line 328,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert7()",
        "snippet": "  public void testAssert7() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 331,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 332,col 55)",
            "(line 333,col 5)-(line 333,col 29)",
            "(line 334,col 5)-(line 334,col 59)",
            "(line 335,col 5)-(line 335,col 30)",
            "(line 336,col 5)-(line 336,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert8()",
        "snippet": "  public void testAssert8() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(x != null);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 339,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 55)",
            "(line 341,col 5)-(line 341,col 29)",
            "(line 342,col 5)-(line 342,col 67)",
            "(line 343,col 5)-(line 343,col 30)",
            "(line 344,col 5)-(line 344,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert9()",
        "snippet": "  public void testAssert9() {\n    JSType startType = createNullableType(NUMBER_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(y = x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 347,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 55)",
            "(line 349,col 5)-(line 349,col 29)",
            "(line 350,col 5)-(line 350,col 63)",
            "(line 351,col 5)-(line 351,col 30)",
            "(line 352,col 5)-(line 352,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssert10()",
        "snippet": "  public void testAssert10() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x\", startType);\n    assuming(\"y\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assert(x && y); out3 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n    verify(\"out3\", OBJECT_TYPE);\n  }\n",
        "begin_line": 355,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 55)",
            "(line 357,col 5)-(line 357,col 29)",
            "(line 358,col 5)-(line 358,col 29)",
            "(line 359,col 5)-(line 359,col 74)",
            "(line 360,col 5)-(line 360,col 30)",
            "(line 361,col 5)-(line 361,col 32)",
            "(line 362,col 5)-(line 362,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertNumber()",
        "snippet": "  public void testAssertNumber() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertNumber(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 365,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 366,col 52)",
            "(line 367,col 5)-(line 367,col 29)",
            "(line 368,col 5)-(line 368,col 68)",
            "(line 369,col 5)-(line 369,col 30)",
            "(line 370,col 5)-(line 370,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertNumber2()",
        "snippet": "  public void testAssertNumber2() {\n    // Make sure it ignores expressions.\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"goog.asserts.assertNumber(x + x); out1 = x;\");\n    verify(\"out1\", startType);\n  }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 375,col 52)",
            "(line 376,col 5)-(line 376,col 29)",
            "(line 377,col 5)-(line 377,col 62)",
            "(line 378,col 5)-(line 378,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertNumber3()",
        "snippet": "  public void testAssertNumber3() {\n    // Make sure it ignores expressions.\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assertNumber(x + x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 381,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 383,col 52)",
            "(line 384,col 5)-(line 384,col 29)",
            "(line 385,col 5)-(line 385,col 69)",
            "(line 386,col 5)-(line 386,col 30)",
            "(line 387,col 5)-(line 387,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertString()",
        "snippet": "  public void testAssertString() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertString(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", STRING_TYPE);\n  }\n",
        "begin_line": 390,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 391,col 5)-(line 391,col 52)",
            "(line 392,col 5)-(line 392,col 29)",
            "(line 393,col 5)-(line 393,col 68)",
            "(line 394,col 5)-(line 394,col 30)",
            "(line 395,col 5)-(line 395,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertFunction()",
        "snippet": "  public void testAssertFunction() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertFunction(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", FUNCTION_INSTANCE_TYPE);\n  }\n",
        "begin_line": 398,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 52)",
            "(line 400,col 5)-(line 400,col 29)",
            "(line 401,col 5)-(line 401,col 70)",
            "(line 402,col 5)-(line 402,col 30)",
            "(line 403,col 5)-(line 403,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject()",
        "snippet": "  public void testAssertObject() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertObject(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 406,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 52)",
            "(line 408,col 5)-(line 408,col 29)",
            "(line 409,col 5)-(line 409,col 68)",
            "(line 410,col 5)-(line 410,col 30)",
            "(line 411,col 5)-(line 411,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject2()",
        "snippet": "  public void testAssertObject2() {\n    JSType startType = createNullableType(ARRAY_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertObject(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 414,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 54)",
            "(line 416,col 5)-(line 416,col 29)",
            "(line 417,col 5)-(line 417,col 68)",
            "(line 418,col 5)-(line 418,col 30)",
            "(line 419,col 5)-(line 419,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject3()",
        "snippet": "  public void testAssertObject3() {\n    JSType startType = createNullableType(OBJECT_TYPE);\n    assuming(\"x.y\", startType);\n    inFunction(\"out1 = x.y; goog.asserts.assertObject(x.y); out2 = x.y;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 422,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 55)",
            "(line 424,col 5)-(line 424,col 31)",
            "(line 425,col 5)-(line 425,col 74)",
            "(line 426,col 5)-(line 426,col 30)",
            "(line 427,col 5)-(line 427,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject4()",
        "snippet": "  public void testAssertObject4() {\n    JSType startType = createNullableType(ARRAY_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; out2 = goog.asserts.assertObject(x);\");\n    verify(\"out1\", startType);\n    verify(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 430,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 431,col 54)",
            "(line 432,col 5)-(line 432,col 29)",
            "(line 433,col 5)-(line 433,col 65)",
            "(line 434,col 5)-(line 434,col 30)",
            "(line 435,col 5)-(line 435,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertObject5()",
        "snippet": "  public void testAssertObject5() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\n        \"out1 = x;\" +\n        \"out2 = /** @type {!Array} */ (goog.asserts.assertObject(x));\");\n    verify(\"out1\", startType);\n    verify(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 438,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 439,col 52)",
            "(line 440,col 5)-(line 440,col 29)",
            "(line 441,col 5)-(line 443,col 72)",
            "(line 444,col 5)-(line 444,col 30)",
            "(line 445,col 5)-(line 445,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertArray()",
        "snippet": "  public void testAssertArray() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertArray(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verifySubtypeOf(\"out2\", ARRAY_TYPE);\n  }\n",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 52)",
            "(line 450,col 5)-(line 450,col 29)",
            "(line 451,col 5)-(line 451,col 67)",
            "(line 452,col 5)-(line 452,col 30)",
            "(line 453,col 5)-(line 453,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertInstanceof1()",
        "snippet": "  public void testAssertInstanceof1() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", OBJECT_TYPE);\n  }\n",
        "begin_line": 456,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 457,col 52)",
            "(line 458,col 5)-(line 458,col 29)",
            "(line 459,col 5)-(line 459,col 72)",
            "(line 460,col 5)-(line 460,col 30)",
            "(line 461,col 5)-(line 461,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertInstanceof2()",
        "snippet": "  public void testAssertInstanceof2() {\n    JSType startType = createNullableType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", STRING_OBJECT_TYPE);\n  }\n",
        "begin_line": 464,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 52)",
            "(line 466,col 5)-(line 466,col 29)",
            "(line 467,col 5)-(line 467,col 80)",
            "(line 468,col 5)-(line 468,col 30)",
            "(line 469,col 5)-(line 469,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertInstanceof3()",
        "snippet": "  public void testAssertInstanceof3() {\n    JSType startType = registry.getNativeType(UNKNOWN_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 472,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 60)",
            "(line 474,col 5)-(line 474,col 29)",
            "(line 475,col 5)-(line 475,col 80)",
            "(line 476,col 5)-(line 476,col 30)",
            "(line 477,col 5)-(line 477,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertInstanceof4()",
        "snippet": "  public void testAssertInstanceof4() {\n    JSType startType = registry.getNativeType(STRING_OBJECT_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, Object); out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", STRING_OBJECT_TYPE);\n  }\n",
        "begin_line": 480,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 66)",
            "(line 482,col 5)-(line 482,col 29)",
            "(line 483,col 5)-(line 483,col 80)",
            "(line 484,col 5)-(line 484,col 30)",
            "(line 485,col 5)-(line 485,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertInstanceof5()",
        "snippet": "  public void testAssertInstanceof5() {\n    JSType startType = registry.getNativeType(ALL_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\n        \"out1 = x; goog.asserts.assertInstanceof(x, String); var r = x;\");\n    verify(\"out1\", startType);\n    verify(\"x\", STRING_OBJECT_TYPE);\n  }\n",
        "begin_line": 488,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 489,col 5)-(line 489,col 56)",
            "(line 490,col 5)-(line 490,col 29)",
            "(line 491,col 5)-(line 492,col 74)",
            "(line 493,col 5)-(line 493,col 30)",
            "(line 494,col 5)-(line 494,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertWithIsDef()",
        "snippet": "  public void testAssertWithIsDef() {\n    JSType startType = createNullableType(NUMBER_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\n        \"out1 = x;\" +\n        \"goog.asserts.assert(goog.isDefAndNotNull(x));\" +\n        \"out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 497,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 498,col 55)",
            "(line 499,col 5)-(line 499,col 29)",
            "(line 500,col 5)-(line 503,col 21)",
            "(line 504,col 5)-(line 504,col 30)",
            "(line 505,col 5)-(line 505,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssertWithNotIsNull()",
        "snippet": "  public void testAssertWithNotIsNull() {\n    JSType startType = createNullableType(NUMBER_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\n        \"out1 = x;\" +\n        \"goog.asserts.assert(!goog.isNull(x));\" +\n        \"out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", NUMBER_TYPE);\n  }\n",
        "begin_line": 508,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 55)",
            "(line 510,col 5)-(line 510,col 29)",
            "(line 511,col 5)-(line 514,col 21)",
            "(line 515,col 5)-(line 515,col 30)",
            "(line 516,col 5)-(line 516,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testReturn1()",
        "snippet": "  public void testReturn1() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"if (x) { return x; }\\nx = {};\\nreturn x;\");\n    verify(\"x\", OBJECT_TYPE);\n  }\n",
        "begin_line": 519,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 520,col 51)",
            "(line 521,col 5)-(line 521,col 59)",
            "(line 522,col 5)-(line 522,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testReturn2()",
        "snippet": "  public void testReturn2() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"if (!x) { x = 0; }\\nreturn x;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 525,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 526,col 51)",
            "(line 527,col 5)-(line 527,col 48)",
            "(line 528,col 5)-(line 528,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testWhile1()",
        "snippet": "  public void testWhile1() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"while (!x) { if (x == null) { x = 0; } else { x = 1; } }\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 531,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 532,col 51)",
            "(line 533,col 5)-(line 533,col 75)",
            "(line 534,col 5)-(line 534,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testWhile2()",
        "snippet": "  public void testWhile2() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"while (!x) { x = {}; }\");\n    verifySubtypeOf(\"x\", createUnionType(OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 537,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 538,col 5)-(line 538,col 51)",
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testDo()",
        "snippet": "  public void testDo() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"do { x = 1; } while (!x);\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 543,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 544,col 51)",
            "(line 545,col 5)-(line 545,col 44)",
            "(line 546,col 5)-(line 546,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor1()",
        "snippet": "  public void testFor1() {\n    assuming(\"y\", NUMBER_TYPE);\n    inFunction(\"var x = null; var i = null; for (i=y; !i; i=1) { x = 1; }\");\n    verify(\"x\", createNullableType(NUMBER_TYPE));\n    verify(\"i\", NUMBER_TYPE);\n  }\n",
        "begin_line": 549,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 550,col 5)-(line 550,col 31)",
            "(line 551,col 5)-(line 551,col 76)",
            "(line 552,col 5)-(line 552,col 49)",
            "(line 553,col 5)-(line 553,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor2()",
        "snippet": "  public void testFor2() {\n    assuming(\"y\", OBJECT_TYPE);\n    inFunction(\"var x = null; var i = null; for (i in y) { x = 1; }\");\n    verify(\"x\", createNullableType(NUMBER_TYPE));\n    verify(\"i\", createNullableType(STRING_TYPE));\n  }\n",
        "begin_line": 556,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 31)",
            "(line 558,col 5)-(line 558,col 70)",
            "(line 559,col 5)-(line 559,col 49)",
            "(line 560,col 5)-(line 560,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor3()",
        "snippet": "  public void testFor3() {\n    assuming(\"y\", OBJECT_TYPE);\n    inFunction(\"var x = null; var i = null; for (var i in y) { x = 1; }\");\n    verify(\"x\", createNullableType(NUMBER_TYPE));\n    verify(\"i\", createNullableType(STRING_TYPE));\n  }\n",
        "begin_line": 563,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 564,col 31)",
            "(line 565,col 5)-(line 565,col 74)",
            "(line 566,col 5)-(line 566,col 49)",
            "(line 567,col 5)-(line 567,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFor4()",
        "snippet": "  public void testFor4() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = {};\\n\"  +\n        \"if (x) { for (var i = 0; i < 10; i++) { break; } y = x; }\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 570,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 51)",
            "(line 572,col 5)-(line 573,col 69)",
            "(line 574,col 5)-(line 574,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch1()",
        "snippet": "  public void testSwitch1() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; switch(x) {\\n\" +\n        \"case 1: y = 1; break;\\n\" +\n        \"case 2: y = {};\\n\" +\n        \"case 3: y = {};\\n\" +\n        \"default: y = 0;}\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 577,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 578,col 31)",
            "(line 579,col 5)-(line 583,col 28)",
            "(line 584,col 5)-(line 584,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch2()",
        "snippet": "  public void testSwitch2() {\n    assuming(\"x\", ALL_TYPE);\n    inFunction(\"var y = null; switch (typeof x) {\\n\" +\n        \"case 'string':\\n\" +\n        \"  y = x;\\n\" +\n        \"  return;\" +\n        \"default:\\n\" +\n        \"  y = 'a';\\n\" +\n        \"}\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 587,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 588,col 5)-(line 588,col 28)",
            "(line 589,col 5)-(line 595,col 13)",
            "(line 596,col 5)-(line 596,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch3()",
        "snippet": "  public void testSwitch3() {\n    assuming(\"x\",\n        createNullableType(createUnionType(NUMBER_TYPE, STRING_TYPE)));\n    inFunction(\"var y; var z; switch (typeof x) {\\n\" +\n        \"case 'string':\\n\" +\n        \"  y = 1; z = null;\\n\" +\n        \"  return;\\n\" +\n        \"case 'number':\\n\" +\n        \"  y = x; z = null;\\n\" +\n        \"  return;\" +\n        \"default:\\n\" +\n        \"  y = 1; z = x;\\n\" +\n        \"}\");\n    verify(\"y\", NUMBER_TYPE);\n    verify(\"z\", NULL_TYPE);\n  }\n",
        "begin_line": 599,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 600,col 5)-(line 601,col 71)",
            "(line 602,col 5)-(line 611,col 13)",
            "(line 612,col 5)-(line 612,col 29)",
            "(line 613,col 5)-(line 613,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testSwitch4()",
        "snippet": "  public void testSwitch4() {\n    assuming(\"x\", ALL_TYPE);\n    inFunction(\"var y = null; switch (typeof x) {\\n\" +\n        \"case 'string':\\n\" +\n        \"case 'number':\\n\" +\n        \"  y = x;\\n\" +\n        \"  return;\\n\" +\n        \"default:\\n\" +\n        \"  y = 1;\\n\" +\n        \"}\\n\");\n    verify(\"y\", createUnionType(NUMBER_TYPE, STRING_TYPE));\n  }\n",
        "begin_line": 616,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 617,col 28)",
            "(line 618,col 5)-(line 625,col 15)",
            "(line 626,col 5)-(line 626,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCall1()",
        "snippet": "  public void testCall1() {\n    assuming(\"x\",\n        createNullableType(\n            registry.createFunctionType(registry.getNativeType(NUMBER_TYPE))));\n    inFunction(\"var y = x();\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 629,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 630,col 5)-(line 632,col 79)",
            "(line 633,col 5)-(line 633,col 31)",
            "(line 634,col 5)-(line 634,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testNew1()",
        "snippet": "  public void testNew1() {\n    assuming(\"x\",\n        createNullableType(\n            registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE)));\n    inFunction(\"var y = new x();\");\n    verify(\"y\", JSTypeNative.NO_OBJECT_TYPE);\n  }\n",
        "begin_line": 637,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 640,col 72)",
            "(line 641,col 5)-(line 641,col 35)",
            "(line 642,col 5)-(line 642,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() {\n    inFunction(\"var x = 1; function f() { x = null; };\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 645,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 57)",
            "(line 647,col 5)-(line 647,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() {\n    inFunction(\"var x = 1; var f = function() { x = null; };\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 650,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 651,col 5)-(line 651,col 63)",
            "(line 652,col 5)-(line 652,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testHook()",
        "snippet": "  public void testHook() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = x ? x : {};\");\n    verifySubtypeOf(\"y\", OBJECT_TYPE);\n  }\n",
        "begin_line": 655,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 656,col 51)",
            "(line 657,col 5)-(line 657,col 38)",
            "(line 658,col 5)-(line 658,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testThrow()",
        "snippet": "  public void testThrow() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"var y = 1;\\n\" +\n        \"if (x == null) { throw new Error('x is null') }\\n\" +\n        \"y = x;\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 661,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 662,col 5)-(line 662,col 51)",
            "(line 663,col 5)-(line 665,col 18)",
            "(line 666,col 5)-(line 666,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testTry1()",
        "snippet": "  public void testTry1() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; try { y = null; } finally { y = x; }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 669,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 670,col 5)-(line 670,col 31)",
            "(line 671,col 5)-(line 671,col 69)",
            "(line 672,col 5)-(line 672,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testTry2()",
        "snippet": "  public void testTry2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null;\\n\" +\n        \"try {  } catch (e) { y = null; } finally { y = x; }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 675,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 676,col 5)-(line 676,col 31)",
            "(line 677,col 5)-(line 678,col 63)",
            "(line 679,col 5)-(line 679,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testTry3()",
        "snippet": "  public void testTry3() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; try { y = x; } catch (e) { }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 682,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 31)",
            "(line 684,col 5)-(line 684,col 61)",
            "(line 685,col 5)-(line 685,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCatch1()",
        "snippet": "  public void testCatch1() {\n    inFunction(\"var y = null; try { foo(); } catch (e) { y = e; }\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 688,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 689,col 68)",
            "(line 690,col 5)-(line 690,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCatch2()",
        "snippet": "  public void testCatch2() {\n    inFunction(\"var y = null; var e = 3; try { foo(); } catch (e) { y = e; }\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 693,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 79)",
            "(line 695,col 5)-(line 695,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testUnknownType1()",
        "snippet": "  public void testUnknownType1() {\n    inFunction(\"var y = 3; y = x;\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 698,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 36)",
            "(line 700,col 5)-(line 700,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testUnknownType2()",
        "snippet": "  public void testUnknownType2() {\n    assuming(\"x\", ARRAY_TYPE);\n    inFunction(\"var y = 5; y = x[0];\");\n    verify(\"y\", UNKNOWN_TYPE);\n  }\n",
        "begin_line": 703,
        "end_line": 707,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 704,col 30)",
            "(line 705,col 5)-(line 705,col 39)",
            "(line 706,col 5)-(line 706,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInfiniteLoop1()",
        "snippet": "  public void testInfiniteLoop1() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"x = {}; while(x != null) { x = {}; }\");\n  }\n",
        "begin_line": 709,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 710,col 5)-(line 710,col 51)",
            "(line 711,col 5)-(line 711,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInfiniteLoop2()",
        "snippet": "  public void testInfiniteLoop2() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"x = {}; do { x = null; } while (x == null);\");\n  }\n",
        "begin_line": 714,
        "end_line": 717,
        "comment": "",
        "child_ranges": [
            "(line 715,col 5)-(line 715,col 51)",
            "(line 716,col 5)-(line 716,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testJoin1()",
        "snippet": "  public void testJoin1() {\n    JSType unknownOrNull = createUnionType(NULL_TYPE, UNKNOWN_TYPE);\n    assuming(\"x\", BOOLEAN_TYPE);\n    assuming(\"unknownOrNull\", unknownOrNull);\n    inFunction(\"var y; if (x) y = unknownOrNull; else y = null;\");\n    verify(\"y\", unknownOrNull);\n  }\n",
        "begin_line": 719,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 720,col 5)-(line 720,col 68)",
            "(line 721,col 5)-(line 721,col 32)",
            "(line 722,col 5)-(line 722,col 45)",
            "(line 723,col 5)-(line 723,col 66)",
            "(line 724,col 5)-(line 724,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testJoin2()",
        "snippet": "  public void testJoin2() {\n    JSType unknownOrNull = createUnionType(NULL_TYPE, UNKNOWN_TYPE);\n    assuming(\"x\", BOOLEAN_TYPE);\n    assuming(\"unknownOrNull\", unknownOrNull);\n    inFunction(\"var y; if (x) y = null; else y = unknownOrNull;\");\n    verify(\"y\", unknownOrNull);\n  }\n",
        "begin_line": 727,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 728,col 5)-(line 728,col 68)",
            "(line 729,col 5)-(line 729,col 32)",
            "(line 730,col 5)-(line 730,col 45)",
            "(line 731,col 5)-(line 731,col 66)",
            "(line 732,col 5)-(line 732,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testArrayLit()",
        "snippet": "  public void testArrayLit() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 3; if (x) { x = [y = x]; }\");\n    verify(\"x\", createUnionType(NULL_TYPE, ARRAY_TYPE));\n    verify(\"y\", createUnionType(NUMBER_TYPE, OBJECT_TYPE));\n  }\n",
        "begin_line": 735,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 736,col 5)-(line 736,col 51)",
            "(line 737,col 5)-(line 737,col 53)",
            "(line 738,col 5)-(line 738,col 56)",
            "(line 739,col 5)-(line 739,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testGetElem()",
        "snippet": "  public void testGetElem() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 3; if (x) { x = x[y = x]; }\");\n    verify(\"x\", UNKNOWN_TYPE);\n    verify(\"y\", createUnionType(NUMBER_TYPE, OBJECT_TYPE));\n  }\n",
        "begin_line": 742,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 743,col 5)-(line 743,col 51)",
            "(line 744,col 5)-(line 744,col 54)",
            "(line 745,col 5)-(line 745,col 30)",
            "(line 746,col 5)-(line 746,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI1()",
        "snippet": "  public void testEnumRAI1() {\n    JSType enumType = createEnumType(\"MyEnum\", ARRAY_TYPE).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (x) y = x;\");\n    verify(\"y\", createNullableType(enumType));\n  }\n",
        "begin_line": 749,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 750,col 77)",
            "(line 751,col 5)-(line 751,col 28)",
            "(line 752,col 5)-(line 752,col 46)",
            "(line 753,col 5)-(line 753,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI2()",
        "snippet": "  public void testEnumRAI2() {\n    JSType enumType = createEnumType(\"MyEnum\", NUMBER_TYPE).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (typeof x == 'number') y = x;\");\n    verify(\"y\", createNullableType(enumType));\n  }\n",
        "begin_line": 756,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 757,col 5)-(line 757,col 78)",
            "(line 758,col 5)-(line 758,col 28)",
            "(line 759,col 5)-(line 759,col 65)",
            "(line 760,col 5)-(line 760,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI3()",
        "snippet": "  public void testEnumRAI3() {\n    JSType enumType = createEnumType(\"MyEnum\", NUMBER_TYPE).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (x && typeof x == 'number') y = x;\");\n    verify(\"y\", createNullableType(enumType));\n  }\n",
        "begin_line": 763,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 764,col 78)",
            "(line 765,col 5)-(line 765,col 28)",
            "(line 766,col 5)-(line 766,col 70)",
            "(line 767,col 5)-(line 767,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testEnumRAI4()",
        "snippet": "  public void testEnumRAI4() {\n    JSType enumType = createEnumType(\"MyEnum\",\n        createUnionType(STRING_TYPE, NUMBER_TYPE)).getElementsType();\n    assuming(\"x\", enumType);\n    inFunction(\"var y = null; if (typeof x == 'number') y = x;\");\n    verify(\"y\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 770,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 771,col 5)-(line 772,col 69)",
            "(line 773,col 5)-(line 773,col 28)",
            "(line 774,col 5)-(line 774,col 65)",
            "(line 775,col 5)-(line 775,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingAnd()",
        "snippet": "  public void testShortCircuitingAnd() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; if (x && (y = 3)) { }\");\n    verify(\"y\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 778,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 779,col 31)",
            "(line 780,col 5)-(line 780,col 54)",
            "(line 781,col 5)-(line 781,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingAnd2()",
        "snippet": "  public void testShortCircuitingAnd2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; var z = 4; if (x && (y = 3)) { z = y; }\");\n    verify(\"z\", NUMBER_TYPE);\n  }\n",
        "begin_line": 784,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 785,col 5)-(line 785,col 31)",
            "(line 786,col 5)-(line 786,col 72)",
            "(line 787,col 5)-(line 787,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingOr()",
        "snippet": "  public void testShortCircuitingOr() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; if (x || (y = 3)) { }\");\n    verify(\"y\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 790,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 31)",
            "(line 792,col 5)-(line 792,col 54)",
            "(line 793,col 5)-(line 793,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testShortCircuitingOr2()",
        "snippet": "  public void testShortCircuitingOr2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = null; var z = 4; if (x || (y = 3)) { z = y; }\");\n    verify(\"z\", createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 796,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 797,col 31)",
            "(line 798,col 5)-(line 798,col 72)",
            "(line 799,col 5)-(line 799,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssignInCondition()",
        "snippet": "  public void testAssignInCondition() {\n    assuming(\"x\", createNullableType(NUMBER_TYPE));\n    inFunction(\"var y; if (!(y = x)) { y = 3; }\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 802,
        "end_line": 806,
        "comment": "",
        "child_ranges": [
            "(line 803,col 5)-(line 803,col 51)",
            "(line 804,col 5)-(line 804,col 50)",
            "(line 805,col 5)-(line 805,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf1()",
        "snippet": "  public void testInstanceOf1() {\n    assuming(\"x\", OBJECT_TYPE);\n    inFunction(\"var y = null; if (x instanceof String) y = x;\");\n    verify(\"y\", createNullableType(STRING_OBJECT_TYPE));\n  }\n",
        "begin_line": 808,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 809,col 5)-(line 809,col 31)",
            "(line 810,col 5)-(line 810,col 64)",
            "(line 811,col 5)-(line 811,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf2()",
        "snippet": "  public void testInstanceOf2() {\n    assuming(\"x\", createNullableType(OBJECT_TYPE));\n    inFunction(\"var y = 1; if (x instanceof String) y = x;\");\n    verify(\"y\", createUnionType(STRING_OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 814,
        "end_line": 818,
        "comment": "",
        "child_ranges": [
            "(line 815,col 5)-(line 815,col 51)",
            "(line 816,col 5)-(line 816,col 61)",
            "(line 817,col 5)-(line 817,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf3()",
        "snippet": "  public void testInstanceOf3() {\n    assuming(\"x\", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE));\n    inFunction(\"var y = null; if (x instanceof String) y = x;\");\n    verify(\"y\", createNullableType(STRING_OBJECT_TYPE));\n  }\n",
        "begin_line": 820,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 821,col 5)-(line 821,col 75)",
            "(line 822,col 5)-(line 822,col 64)",
            "(line 823,col 5)-(line 823,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf4()",
        "snippet": "  public void testInstanceOf4() {\n    assuming(\"x\", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE));\n    inFunction(\"var y = null; if (x instanceof String); else y = x;\");\n    verify(\"y\", createNullableType(NUMBER_OBJECT_TYPE));\n  }\n",
        "begin_line": 826,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 75)",
            "(line 828,col 5)-(line 828,col 70)",
            "(line 829,col 5)-(line 829,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf5()",
        "snippet": "  public void testInstanceOf5() {\n    assuming(\"x\", OBJECT_TYPE);\n    inFunction(\"var y = null; if (x instanceof String); else y = x;\");\n    verify(\"y\", createNullableType(OBJECT_TYPE));\n  }\n",
        "begin_line": 832,
        "end_line": 836,
        "comment": "",
        "child_ranges": [
            "(line 833,col 5)-(line 833,col 31)",
            "(line 834,col 5)-(line 834,col 70)",
            "(line 835,col 5)-(line 835,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testInstanceOf6()",
        "snippet": "  public void testInstanceOf6() {\n    // Here we are using \"instanceof\" to restrict the unknown type to\n    // the type of the instance.  This has the following problems:\n    //   1) The type may actually be any sub-type\n    //   2) The type may implement any interface\n    // After the instanceof we will require casts for methods that require\n    // sub-type or unrelated interfaces which would not have been required\n    // before.\n    JSType startType = registry.getNativeType(UNKNOWN_TYPE);\n    assuming(\"x\", startType);\n    inFunction(\"out1 = x; if (x instanceof String) out2 = x;\");\n    verify(\"out1\", startType);\n    verify(\"out2\", STRING_OBJECT_TYPE);\n  }\n",
        "begin_line": 838,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 846,col 5)-(line 846,col 60)",
            "(line 847,col 5)-(line 847,col 29)",
            "(line 848,col 5)-(line 848,col 63)",
            "(line 849,col 5)-(line 849,col 30)",
            "(line 850,col 5)-(line 850,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testFlattening()",
        "snippet": "  public void testFlattening() {\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      assuming(\"s\" + i, ALL_TYPE);\n    }\n    assuming(\"b\", JSTypeNative.BOOLEAN_TYPE);\n    StringBuilder body = new StringBuilder();\n    body.append(\"if (b) {\");\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      body.append(\"s\");\n      body.append(i);\n      body.append(\" = 1;\\n\");\n    }\n    body.append(\" } else { \");\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      body.append(\"s\");\n      body.append(i);\n      body.append(\" = 'ONE';\\n\");\n    }\n    body.append(\"}\");\n    JSType numberORString = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    inFunction(body.toString());\n\n    for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) {\n      verify(\"s\" + i, numberORString);\n    }\n  }\n",
        "begin_line": 853,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 854,col 5)-(line 856,col 5)",
            "(line 857,col 5)-(line 857,col 45)",
            "(line 858,col 5)-(line 858,col 45)",
            "(line 859,col 5)-(line 859,col 28)",
            "(line 860,col 5)-(line 864,col 5)",
            "(line 865,col 5)-(line 865,col 30)",
            "(line 866,col 5)-(line 870,col 5)",
            "(line 871,col 5)-(line 871,col 21)",
            "(line 872,col 5)-(line 872,col 70)",
            "(line 873,col 5)-(line 873,col 32)",
            "(line 875,col 5)-(line 877,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testUnary()",
        "snippet": "  public void testUnary() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = +x;\");\n    verify(\"y\", NUMBER_TYPE);\n    inFunction(\"var z = -x;\");\n    verify(\"z\", NUMBER_TYPE);\n  }\n",
        "begin_line": 880,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 31)",
            "(line 882,col 5)-(line 882,col 30)",
            "(line 883,col 5)-(line 883,col 29)",
            "(line 884,col 5)-(line 884,col 30)",
            "(line 885,col 5)-(line 885,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAdd1()",
        "snippet": "  public void testAdd1() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = x + 5;\");\n    verify(\"y\", NUMBER_TYPE);\n  }\n",
        "begin_line": 888,
        "end_line": 892,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 889,col 31)",
            "(line 890,col 5)-(line 890,col 33)",
            "(line 891,col 5)-(line 891,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAdd2()",
        "snippet": "  public void testAdd2() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = x + '5';\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 894,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 895,col 5)-(line 895,col 31)",
            "(line 896,col 5)-(line 896,col 35)",
            "(line 897,col 5)-(line 897,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAdd3()",
        "snippet": "  public void testAdd3() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"var y = '5' + x;\");\n    verify(\"y\", STRING_TYPE);\n  }\n",
        "begin_line": 900,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 901,col 5)-(line 901,col 31)",
            "(line 902,col 5)-(line 902,col 35)",
            "(line 903,col 5)-(line 903,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testAssignAdd()",
        "snippet": "  public void testAssignAdd() {\n    assuming(\"x\", NUMBER_TYPE);\n    inFunction(\"x += '5';\");\n    verify(\"x\", STRING_TYPE);\n  }\n",
        "begin_line": 906,
        "end_line": 910,
        "comment": "",
        "child_ranges": [
            "(line 907,col 5)-(line 907,col 31)",
            "(line 908,col 5)-(line 908,col 28)",
            "(line 909,col 5)-(line 909,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testComparison()",
        "snippet": "  public void testComparison() {\n    inFunction(\"var x = 'foo'; var y = (x = 3) < 4;\");\n    verify(\"x\", NUMBER_TYPE);\n    inFunction(\"var x = 'foo'; var y = (x = 3) > 4;\");\n    verify(\"x\", NUMBER_TYPE);\n    inFunction(\"var x = 'foo'; var y = (x = 3) <= 4;\");\n    verify(\"x\", NUMBER_TYPE);\n    inFunction(\"var x = 'foo'; var y = (x = 3) >= 4;\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 912,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 913,col 5)-(line 913,col 54)",
            "(line 914,col 5)-(line 914,col 29)",
            "(line 915,col 5)-(line 915,col 54)",
            "(line 916,col 5)-(line 916,col 29)",
            "(line 917,col 5)-(line 917,col 55)",
            "(line 918,col 5)-(line 918,col 29)",
            "(line 919,col 5)-(line 919,col 55)",
            "(line 920,col 5)-(line 920,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testThrownExpression()",
        "snippet": "  public void testThrownExpression() {\n    inFunction(\"var x = 'foo'; \"\n               + \"try { throw new Error(x = 3); } catch (ex) {}\");\n    verify(\"x\", NUMBER_TYPE);\n  }\n",
        "begin_line": 923,
        "end_line": 927,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 925,col 66)",
            "(line 926,col 5)-(line 926,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testObjectLit()",
        "snippet": "  public void testObjectLit() {\n    inFunction(\"var x = {}; var out = x.a;\");\n    verify(\"out\", UNKNOWN_TYPE);  // Shouldn't this be 'undefined'?\n\n    inFunction(\"var x = {a:1}; var out = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n\n    inFunction(\"var x = {a:1}; var out = x.a; x.a = 'string'; var out2 = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n    verify(\"out2\", STRING_TYPE);\n\n    inFunction(\"var x = { get a() {return 1} }; var out = x.a;\");\n    verify(\"out\", UNKNOWN_TYPE);\n\n    inFunction(\n        \"var x = {\" +\n        \"  /** @return {number} */ get a() {return 1}\" +\n        \"};\" +\n        \"var out = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n\n    inFunction(\"var x = { set a(b) {} }; var out = x.a;\");\n    verify(\"out\", UNKNOWN_TYPE);\n\n    inFunction(\"var x = { \" +\n            \"/** @param {number} b */ set a(b) {} };\" +\n            \"var out = x.a;\");\n    verify(\"out\", NUMBER_TYPE);\n  }\n",
        "begin_line": 929,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 930,col 5)-(line 930,col 45)",
            "(line 931,col 5)-(line 931,col 32)",
            "(line 933,col 5)-(line 933,col 48)",
            "(line 934,col 5)-(line 934,col 31)",
            "(line 936,col 5)-(line 936,col 80)",
            "(line 937,col 5)-(line 937,col 31)",
            "(line 938,col 5)-(line 938,col 32)",
            "(line 940,col 5)-(line 940,col 65)",
            "(line 941,col 5)-(line 941,col 32)",
            "(line 943,col 5)-(line 947,col 26)",
            "(line 948,col 5)-(line 948,col 31)",
            "(line 950,col 5)-(line 950,col 58)",
            "(line 951,col 5)-(line 951,col 32)",
            "(line 953,col 5)-(line 955,col 30)",
            "(line 956,col 5)-(line 956,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCast1()",
        "snippet": "  public void testCast1() {\n    inFunction(\"var x = /** @type {Object} */ (this);\");\n    verify(\"x\", createNullableType(OBJECT_TYPE));\n  }\n",
        "begin_line": 959,
        "end_line": 962,
        "comment": "",
        "child_ranges": [
            "(line 960,col 5)-(line 960,col 56)",
            "(line 961,col 5)-(line 961,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testCast2()",
        "snippet": "  public void testCast2() {\n    inFunction(\n        \"/** @return {boolean} */\" +\n        \"Object.prototype.method = function() { return true; };\" +\n        \"var x = /** @type {Object} */ (this).method;\");\n    verify(\n        \"x\",\n        registry.createFunctionType(\n            registry.getNativeObjectType(OBJECT_TYPE),\n            registry.getNativeType(BOOLEAN_TYPE),\n            ImmutableList.<JSType>of() /* params */));\n  }\n",
        "begin_line": 964,
        "end_line": 975,
        "comment": "",
        "child_ranges": [
            "(line 965,col 5)-(line 968,col 56)",
            "(line 969,col 5)-(line 974,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testBackwardsInferenceCall()",
        "snippet": "  public void testBackwardsInferenceCall() {\n    inFunction(\n        \"/** @param {{foo: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"var y = {};\" +\n        \"f(y);\");\n\n    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());\n  }\n",
        "begin_line": 977,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 978,col 5)-(line 982,col 17)",
            "(line 984,col 5)-(line 984,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testBackwardsInferenceNew()",
        "snippet": "  public void testBackwardsInferenceNew() {\n    inFunction(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @param {{foo: (number|undefined)}} x\\n\" +\n        \" */\" +\n        \"function F(x) {}\" +\n        \"var y = {};\" +\n        \"new F(y);\");\n\n    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());\n  }\n",
        "begin_line": 987,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 995,col 21)",
            "(line 997,col 5)-(line 997,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferenceTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
        "signature": "com.google.javascript.jscomp.TypeInferenceTest.testNoThisInference()",
        "snippet": "  public void testNoThisInference() {\n    JSType thisType = createNullableType(OBJECT_TYPE);\n    assumingThisType(thisType);\n    inFunction(\"var out = 3; if (goog.isNull(this)) out = this;\");\n    verify(\"out\", createUnionType(OBJECT_TYPE, NUMBER_TYPE));\n  }\n",
        "begin_line": 1000,
        "end_line": 1005,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1001,col 54)",
            "(line 1002,col 5)-(line 1002,col 31)",
            "(line 1003,col 5)-(line 1003,col 66)",
            "(line 1004,col 5)-(line 1004,col 61)"
        ]
    }
]