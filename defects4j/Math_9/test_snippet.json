[
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testContains()",
        "snippet": "    @Test\n    public void testContains() throws MathIllegalArgumentException, MathArithmeticException {\n        Vector3D p1 = new Vector3D(0, 0, 1);\n        Line l = new Line(p1, new Vector3D(0, 0, 2));\n        Assert.assertTrue(l.contains(p1));\n        Assert.assertTrue(l.contains(new Vector3D(1.0, p1, 0.3, l.getDirection())));\n        Vector3D u = l.getDirection().orthogonal();\n        Vector3D v = Vector3D.crossProduct(l.getDirection(), u);\n        for (double alpha = 0; alpha < 2 * FastMath.PI; alpha += 0.3) {\n            Assert.assertTrue(! l.contains(p1.add(new Vector3D(FastMath.cos(alpha), u,\n                                                               FastMath.sin(alpha), v))));\n        }\n    }\n",
        "begin_line": 29,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 44)",
            "(line 32,col 9)-(line 32,col 53)",
            "(line 33,col 9)-(line 33,col 42)",
            "(line 34,col 9)-(line 34,col 84)",
            "(line 35,col 9)-(line 35,col 51)",
            "(line 36,col 9)-(line 36,col 64)",
            "(line 37,col 9)-(line 40,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testSimilar()",
        "snippet": "    @Test\n    public void testSimilar() throws MathIllegalArgumentException, MathArithmeticException {\n        Vector3D p1  = new Vector3D (1.2, 3.4, -5.8);\n        Vector3D p2  = new Vector3D (3.4, -5.8, 1.2);\n        Line     lA  = new Line(p1, p2);\n        Line     lB  = new Line(p2, p1);\n        Assert.assertTrue(lA.isSimilarTo(lB));\n        Assert.assertTrue(! lA.isSimilarTo(new Line(p1, p1.add(lA.getDirection().orthogonal()))));\n    }\n",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 53)",
            "(line 46,col 9)-(line 46,col 53)",
            "(line 47,col 9)-(line 47,col 40)",
            "(line 48,col 9)-(line 48,col 40)",
            "(line 49,col 9)-(line 49,col 46)",
            "(line 50,col 9)-(line 50,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testPointDistance()",
        "snippet": "    @Test\n    public void testPointDistance() throws MathIllegalArgumentException {\n        Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));\n        Assert.assertEquals(FastMath.sqrt(3.0 / 2.0), l.distance(new Vector3D(1, 0, 1)), 1.0e-10);\n        Assert.assertEquals(0, l.distance(new Vector3D(0, -4, -4)), 1.0e-10);\n    }\n",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 72)",
            "(line 56,col 9)-(line 56,col 98)",
            "(line 57,col 9)-(line 57,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testLineDistance()",
        "snippet": "    @Test\n    public void testLineDistance() throws MathIllegalArgumentException {\n        Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));\n        Assert.assertEquals(1.0,\n                            l.distance(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))),\n                            1.0e-10);\n        Assert.assertEquals(0.5,\n                            l.distance(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.distance(l),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))),\n                            1.0e-10);\n        Assert.assertEquals(FastMath.sqrt(8),\n                            l.distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))),\n                            1.0e-10);\n    }\n",
        "begin_line": 60,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 72)",
            "(line 63,col 9)-(line 65,col 37)",
            "(line 66,col 9)-(line 68,col 37)",
            "(line 69,col 9)-(line 71,col 37)",
            "(line 72,col 9)-(line 74,col 37)",
            "(line 75,col 9)-(line 77,col 37)",
            "(line 78,col 9)-(line 80,col 37)",
            "(line 81,col 9)-(line 83,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testClosest()",
        "snippet": "    @Test\n    public void testClosest() throws MathIllegalArgumentException {\n        Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));\n        Assert.assertEquals(0.0,\n                            l.closestPoint(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))).distance(new Vector3D(0, 0, 0)),\n                            1.0e-10);\n        Assert.assertEquals(0.5,\n                            l.closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))).distance(new Vector3D(-0.5, 0, 0)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.closestPoint(l).distance(new Vector3D(0, 0, 0)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))).distance(new Vector3D(0, -2, -2)),\n                            1.0e-10);\n    }\n",
        "begin_line": 86,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 72)",
            "(line 89,col 9)-(line 91,col 37)",
            "(line 92,col 9)-(line 94,col 37)",
            "(line 95,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 100,col 37)",
            "(line 101,col 9)-(line 103,col 37)",
            "(line 104,col 9)-(line 106,col 37)",
            "(line 107,col 9)-(line 109,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testIntersection()",
        "snippet": "    @Test\n    public void testIntersection() throws MathIllegalArgumentException {\n        Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));\n        Assert.assertNull(l.intersection(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))));\n        Assert.assertNull(l.intersection(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))));\n        Assert.assertEquals(0.0,\n                            l.intersection(l).distance(new Vector3D(0, 0, 0)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)),\n                            1.0e-10);\n        Assert.assertEquals(0.0,\n                            l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)),\n                            1.0e-10);\n        Assert.assertNull(l.intersection(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))));\n    }\n",
        "begin_line": 112,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 72)",
            "(line 115,col 9)-(line 115,col 98)",
            "(line 116,col 9)-(line 116,col 106)",
            "(line 117,col 9)-(line 119,col 37)",
            "(line 120,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 125,col 37)",
            "(line 126,col 9)-(line 128,col 37)",
            "(line 129,col 9)-(line 129,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testRevert()",
        "snippet": "    @Test\n    public void testRevert() {\n        \n        // setup\n        Line line = new Line(new Vector3D(1653345.6696423641, 6170370.041579291, 90000),\n                             new Vector3D(1650757.5050732433, 6160710.879908984, 0.9));\n        Vector3D expected = line.getDirection().negate();\n\n        // action\n        Line reverted = line.revert();\n\n        // verify\n        Assert.assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0);\n\n    }\n",
        "begin_line": 132,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 137,col 87)",
            "(line 138,col 9)-(line 138,col 57)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 144,col 9)-(line 144,col 91)"
        ]
    }
]