[
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    mode = LanguageMode.ECMASCRIPT3;\n    isIdeMode = false;\n  }\n",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 18)",
            "(line 58,col 5)-(line 58,col 36)",
            "(line 59,col 5)-(line 59,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAssign1()",
        "snippet": "  public void testLinenoCharnoAssign1() throws Exception {\n    Node assign = parse(\"a = b\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ASSIGN, assign.getType());\n    assertEquals(1, assign.getLineno());\n    assertEquals(0, assign.getCharno());\n  }\n",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 63,col 65)",
            "(line 65,col 5)-(line 65,col 49)",
            "(line 66,col 5)-(line 66,col 40)",
            "(line 67,col 5)-(line 67,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAssign2()",
        "snippet": "  public void testLinenoCharnoAssign2() throws Exception {\n    Node assign = parse(\"\\n a.g.h.k    =  45\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ASSIGN, assign.getType());\n    assertEquals(2, assign.getLineno());\n    assertEquals(1, assign.getCharno());\n  }\n",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 79)",
            "(line 73,col 5)-(line 73,col 49)",
            "(line 74,col 5)-(line 74,col 40)",
            "(line 75,col 5)-(line 75,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoCall()",
        "snippet": "  public void testLinenoCharnoCall() throws Exception {\n    Node call = parse(\"\\n foo(123);\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.CALL, call.getType());\n    assertEquals(2, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 70)",
            "(line 81,col 5)-(line 81,col 45)",
            "(line 82,col 5)-(line 82,col 38)",
            "(line 83,col 5)-(line 83,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetProp1()",
        "snippet": "  public void testLinenoCharnoGetProp1() throws Exception {\n    Node getprop = parse(\"\\n foo.bar\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETPROP, getprop.getType());\n    assertEquals(2, getprop.getLineno());\n    assertEquals(1, getprop.getCharno());\n\n    Node name = getprop.getFirstChild().getNext();\n    assertEquals(Token.STRING, name.getType());\n    assertEquals(2, name.getLineno());\n    assertEquals(5, name.getCharno());\n  }\n",
        "begin_line": 86,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 87,col 71)",
            "(line 89,col 5)-(line 89,col 51)",
            "(line 90,col 5)-(line 90,col 41)",
            "(line 91,col 5)-(line 91,col 41)",
            "(line 93,col 5)-(line 93,col 50)",
            "(line 94,col 5)-(line 94,col 47)",
            "(line 95,col 5)-(line 95,col 38)",
            "(line 96,col 5)-(line 96,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetProp2()",
        "snippet": "  public void testLinenoCharnoGetProp2() throws Exception {\n    Node getprop = parse(\"\\n foo.\\nbar\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETPROP, getprop.getType());\n    assertEquals(2, getprop.getLineno());\n    assertEquals(1, getprop.getCharno());\n\n    Node name = getprop.getFirstChild().getNext();\n    assertEquals(Token.STRING, name.getType());\n    assertEquals(3, name.getLineno());\n    assertEquals(0, name.getCharno());\n  }\n",
        "begin_line": 99,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 73)",
            "(line 102,col 5)-(line 102,col 51)",
            "(line 103,col 5)-(line 103,col 41)",
            "(line 104,col 5)-(line 104,col 41)",
            "(line 106,col 5)-(line 106,col 50)",
            "(line 107,col 5)-(line 107,col 47)",
            "(line 108,col 5)-(line 108,col 38)",
            "(line 109,col 5)-(line 109,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem1()",
        "snippet": "  public void testLinenoCharnoGetelem1() throws Exception {\n    Node call = parse(\"\\n foo[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(2, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 112,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 69)",
            "(line 115,col 5)-(line 115,col 48)",
            "(line 116,col 5)-(line 116,col 38)",
            "(line 117,col 5)-(line 117,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem2()",
        "snippet": "  public void testLinenoCharnoGetelem2() throws Exception {\n    Node call = parse(\"\\n   \\n foo()[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(3, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 120,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 76)",
            "(line 123,col 5)-(line 123,col 48)",
            "(line 124,col 5)-(line 124,col 38)",
            "(line 125,col 5)-(line 125,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem3()",
        "snippet": "  public void testLinenoCharnoGetelem3() throws Exception {\n    Node call = parse(\"\\n   \\n (8 + kl)[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(3, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 128,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 5)-(line 129,col 79)",
            "(line 131,col 5)-(line 131,col 48)",
            "(line 132,col 5)-(line 132,col 38)",
            "(line 133,col 5)-(line 133,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoForComparison()",
        "snippet": "  public void testLinenoCharnoForComparison() throws Exception {\n    Node lt =\n      parse(\"for (; i < j;){}\").getFirstChild().getFirstChild().getNext();\n\n    assertEquals(Token.LT, lt.getType());\n    assertEquals(1, lt.getLineno());\n    assertEquals(7, lt.getCharno());\n  }\n",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 138,col 74)",
            "(line 140,col 5)-(line 140,col 41)",
            "(line 141,col 5)-(line 141,col 36)",
            "(line 142,col 5)-(line 142,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoHook()",
        "snippet": "  public void testLinenoCharnoHook() throws Exception {\n    Node n = parse(\"\\n a ? 9 : 0\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.HOOK, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(1, n.getCharno());\n  }\n",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 67)",
            "(line 148,col 5)-(line 148,col 42)",
            "(line 149,col 5)-(line 149,col 35)",
            "(line 150,col 5)-(line 150,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoArrayLiteral()",
        "snippet": "  public void testLinenoCharnoArrayLiteral() throws Exception {\n    Node n = parse(\"\\n  [8, 9]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ARRAYLIT, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(2, n.getCharno());\n\n    n = n.getFirstChild();\n\n    assertEquals(Token.NUMBER, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(3, n.getCharno());\n\n    n = n.getNext();\n\n    assertEquals(Token.NUMBER, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(6, n.getCharno());\n  }\n",
        "begin_line": 153,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 65)",
            "(line 156,col 5)-(line 156,col 46)",
            "(line 157,col 5)-(line 157,col 35)",
            "(line 158,col 5)-(line 158,col 35)",
            "(line 160,col 5)-(line 160,col 26)",
            "(line 162,col 5)-(line 162,col 44)",
            "(line 163,col 5)-(line 163,col 35)",
            "(line 164,col 5)-(line 164,col 35)",
            "(line 166,col 5)-(line 166,col 20)",
            "(line 168,col 5)-(line 168,col 44)",
            "(line 169,col 5)-(line 169,col 35)",
            "(line 170,col 5)-(line 170,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoObjectLiteral()",
        "snippet": "  public void testLinenoCharnoObjectLiteral() throws Exception {\n    Node n = parse(\"\\n\\n var a = {a:0\\n,b :1};\")\n        .getFirstChild().getFirstChild().getFirstChild();\n\n    assertEquals(Token.OBJECTLIT, n.getType());\n    assertEquals(3, n.getLineno());\n    assertEquals(9, n.getCharno());\n\n    Node key = n.getFirstChild();\n\n    assertEquals(Token.STRING_KEY, key.getType());\n    assertEquals(3, key.getLineno());\n    assertEquals(10, key.getCharno());\n\n    Node value = key.getFirstChild();\n\n    assertEquals(Token.NUMBER, value.getType());\n    assertEquals(3, value.getLineno());\n    assertEquals(12, value.getCharno());\n\n    key = key.getNext();\n\n    assertEquals(Token.STRING_KEY, key.getType());\n    assertEquals(4, key.getLineno());\n    assertEquals(1, key.getCharno());\n\n    value = key.getFirstChild();\n\n    assertEquals(Token.NUMBER, value.getType());\n    assertEquals(4, value.getLineno());\n    assertEquals(4, value.getCharno());\n  }\n",
        "begin_line": 173,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 175,col 57)",
            "(line 177,col 5)-(line 177,col 47)",
            "(line 178,col 5)-(line 178,col 35)",
            "(line 179,col 5)-(line 179,col 35)",
            "(line 181,col 5)-(line 181,col 33)",
            "(line 183,col 5)-(line 183,col 50)",
            "(line 184,col 5)-(line 184,col 37)",
            "(line 185,col 5)-(line 185,col 38)",
            "(line 187,col 5)-(line 187,col 37)",
            "(line 189,col 5)-(line 189,col 48)",
            "(line 190,col 5)-(line 190,col 39)",
            "(line 191,col 5)-(line 191,col 40)",
            "(line 193,col 5)-(line 193,col 24)",
            "(line 195,col 5)-(line 195,col 50)",
            "(line 196,col 5)-(line 196,col 37)",
            "(line 197,col 5)-(line 197,col 37)",
            "(line 199,col 5)-(line 199,col 32)",
            "(line 201,col 5)-(line 201,col 48)",
            "(line 202,col 5)-(line 202,col 39)",
            "(line 203,col 5)-(line 203,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAdd()",
        "snippet": "  public void testLinenoCharnoAdd() throws Exception {\n    testLinenoCharnoBinop(\"+\");\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoSub()",
        "snippet": "  public void testLinenoCharnoSub() throws Exception {\n    testLinenoCharnoBinop(\"-\");\n  }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoMul()",
        "snippet": "  public void testLinenoCharnoMul() throws Exception {\n    testLinenoCharnoBinop(\"*\");\n  }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoDiv()",
        "snippet": "  public void testLinenoCharnoDiv() throws Exception {\n    testLinenoCharnoBinop(\"/\");\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoMod()",
        "snippet": "  public void testLinenoCharnoMod() throws Exception {\n    testLinenoCharnoBinop(\"%\");\n  }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoShift()",
        "snippet": "  public void testLinenoCharnoShift() throws Exception {\n    testLinenoCharnoBinop(\"<<\");\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinaryAnd()",
        "snippet": "  public void testLinenoCharnoBinaryAnd() throws Exception {\n    testLinenoCharnoBinop(\"&\");\n  }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAnd()",
        "snippet": "  public void testLinenoCharnoAnd() throws Exception {\n    testLinenoCharnoBinop(\"&&\");\n  }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinaryOr()",
        "snippet": "  public void testLinenoCharnoBinaryOr() throws Exception {\n    testLinenoCharnoBinop(\"|\");\n  }\n",
        "begin_line": 238,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoOr()",
        "snippet": "  public void testLinenoCharnoOr() throws Exception {\n    testLinenoCharnoBinop(\"||\");\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoLt()",
        "snippet": "  public void testLinenoCharnoLt() throws Exception {\n    testLinenoCharnoBinop(\"<\");\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoLe()",
        "snippet": "  public void testLinenoCharnoLe() throws Exception {\n    testLinenoCharnoBinop(\"<=\");\n  }\n",
        "begin_line": 250,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGt()",
        "snippet": "  public void testLinenoCharnoGt() throws Exception {\n    testLinenoCharnoBinop(\">\");\n  }\n",
        "begin_line": 254,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGe()",
        "snippet": "  public void testLinenoCharnoGe() throws Exception {\n    testLinenoCharnoBinop(\">=\");\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinop(java.lang.String)",
        "snippet": "  private void testLinenoCharnoBinop(String binop) {\n    Node op = parse(\"var a = 89 \" + binop + \" 76\").getFirstChild().\n        getFirstChild().getFirstChild();\n\n    assertEquals(1, op.getLineno());\n    assertEquals(8, op.getCharno());\n  }\n",
        "begin_line": 262,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 264,col 40)",
            "(line 266,col 5)-(line 266,col 36)",
            "(line 267,col 5)-(line 267,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment1()",
        "snippet": "  public void testJSDocAttachment1() {\n    Node varNode = parse(\"/** @type number */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 270,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 70)",
            "(line 274,col 5)-(line 274,col 47)",
            "(line 275,col 5)-(line 275,col 44)",
            "(line 276,col 5)-(line 276,col 24)",
            "(line 277,col 5)-(line 277,col 50)",
            "(line 280,col 5)-(line 280,col 44)",
            "(line 281,col 5)-(line 281,col 49)",
            "(line 282,col 5)-(line 282,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment2()",
        "snippet": "  public void testJSDocAttachment2() {\n    Node varNode = parse(\"/** @type number */var a,b;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // First NAME\n    Node nameNode1 = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode1.getType());\n    assertNull(nameNode1.getJSDocInfo());\n\n    // Second NAME\n    Node nameNode2 = nameNode1.getNext();\n    assertEquals(Token.NAME, nameNode2.getType());\n    assertNull(nameNode2.getJSDocInfo());\n  }\n",
        "begin_line": 285,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 72)",
            "(line 289,col 5)-(line 289,col 47)",
            "(line 290,col 5)-(line 290,col 44)",
            "(line 291,col 5)-(line 291,col 24)",
            "(line 292,col 5)-(line 292,col 50)",
            "(line 295,col 5)-(line 295,col 45)",
            "(line 296,col 5)-(line 296,col 50)",
            "(line 297,col 5)-(line 297,col 41)",
            "(line 300,col 5)-(line 300,col 41)",
            "(line 301,col 5)-(line 301,col 50)",
            "(line 302,col 5)-(line 302,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment3()",
        "snippet": "  public void testJSDocAttachment3() {\n    Node assignNode = parse(\n        \"/** @type number */goog.FOO = 5;\").getFirstChild().getFirstChild();\n    assertEquals(Token.ASSIGN, assignNode.getType());\n    JSDocInfo info = assignNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 305,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 307,col 76)",
            "(line 308,col 5)-(line 308,col 53)",
            "(line 309,col 5)-(line 309,col 47)",
            "(line 310,col 5)-(line 310,col 24)",
            "(line 311,col 5)-(line 311,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment4()",
        "snippet": "  public void testJSDocAttachment4() {\n    Node varNode = parse(\n        \"var a, /** @define {number} */ b = 5;\").getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.VAR, varNode.getType());\n    assertNull(varNode.getJSDocInfo());\n\n    // a\n    Node a = varNode.getFirstChild();\n    assertNull(a.getJSDocInfo());\n\n    // b\n    Node b = a.getNext();\n    JSDocInfo info = b.getJSDocInfo();\n    assertNotNull(info);\n    assertTrue(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 314,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 316,col 65)",
            "(line 319,col 5)-(line 319,col 47)",
            "(line 320,col 5)-(line 320,col 39)",
            "(line 323,col 5)-(line 323,col 37)",
            "(line 324,col 5)-(line 324,col 33)",
            "(line 327,col 5)-(line 327,col 25)",
            "(line 328,col 5)-(line 328,col 38)",
            "(line 329,col 5)-(line 329,col 24)",
            "(line 330,col 5)-(line 330,col 32)",
            "(line 331,col 5)-(line 331,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment5()",
        "snippet": "  public void testJSDocAttachment5() {\n    Node varNode = parse(\n        \"var /** @type number */a, /** @define {number} */b = 5;\")\n        .getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.VAR, varNode.getType());\n    assertNull(varNode.getJSDocInfo());\n\n    // a\n    Node a = varNode.getFirstChild();\n    assertNotNull(a.getJSDocInfo());\n    JSDocInfo info = a.getJSDocInfo();\n    assertNotNull(info);\n    assertFalse(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // b\n    Node b = a.getNext();\n    info = b.getJSDocInfo();\n    assertNotNull(info);\n    assertTrue(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 334,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 337,col 25)",
            "(line 340,col 5)-(line 340,col 47)",
            "(line 341,col 5)-(line 341,col 39)",
            "(line 344,col 5)-(line 344,col 37)",
            "(line 345,col 5)-(line 345,col 36)",
            "(line 346,col 5)-(line 346,col 38)",
            "(line 347,col 5)-(line 347,col 24)",
            "(line 348,col 5)-(line 348,col 33)",
            "(line 349,col 5)-(line 349,col 50)",
            "(line 352,col 5)-(line 352,col 25)",
            "(line 353,col 5)-(line 353,col 28)",
            "(line 354,col 5)-(line 354,col 24)",
            "(line 355,col 5)-(line 355,col 32)",
            "(line 356,col 5)-(line 356,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment6()",
        "snippet": "  public void testJSDocAttachment6() throws Exception {\n    Node functionNode = parse(\n        \"var a = /** @param {number} index */5;\" +\n        \"/** @return boolean */function f(index){}\")\n        .getFirstChild().getNext();\n\n    assertEquals(Token.FUNCTION, functionNode.getType());\n    JSDocInfo info = functionNode.getJSDocInfo();\n    assertNotNull(info);\n    assertFalse(info.hasParameter(\"index\"));\n    assertTrue(info.hasReturnType());\n    assertTypeEquals(UNKNOWN_TYPE, info.getReturnType());\n  }\n",
        "begin_line": 363,
        "end_line": 375,
        "comment": "\n   * Tests that a JSDoc comment in an unexpected place of the code does not\n   * propagate to following code due to {@link JSDocInfo} aggregation.\n   ",
        "child_ranges": [
            "(line 364,col 5)-(line 367,col 35)",
            "(line 369,col 5)-(line 369,col 57)",
            "(line 370,col 5)-(line 370,col 49)",
            "(line 371,col 5)-(line 371,col 24)",
            "(line 372,col 5)-(line 372,col 44)",
            "(line 373,col 5)-(line 373,col 37)",
            "(line 374,col 5)-(line 374,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment7()",
        "snippet": "  public void testJSDocAttachment7() {\n    Node varNode = parse(\"/** */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 377,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 378,col 57)",
            "(line 381,col 5)-(line 381,col 47)",
            "(line 384,col 5)-(line 384,col 44)",
            "(line 385,col 5)-(line 385,col 49)",
            "(line 386,col 5)-(line 386,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment8()",
        "snippet": "  public void testJSDocAttachment8() {\n    Node varNode = parse(\"/** x */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 389,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 390,col 59)",
            "(line 393,col 5)-(line 393,col 47)",
            "(line 396,col 5)-(line 396,col 44)",
            "(line 397,col 5)-(line 397,col 49)",
            "(line 398,col 5)-(line 398,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment9()",
        "snippet": "  public void testJSDocAttachment9() {\n    Node varNode = parse(\"/** \\n x */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 401,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 62)",
            "(line 405,col 5)-(line 405,col 47)",
            "(line 408,col 5)-(line 408,col 44)",
            "(line 409,col 5)-(line 409,col 49)",
            "(line 410,col 5)-(line 410,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment10()",
        "snippet": "  public void testJSDocAttachment10() {\n    Node varNode = parse(\"/** x\\n */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 413,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 414,col 61)",
            "(line 417,col 5)-(line 417,col 47)",
            "(line 420,col 5)-(line 420,col 44)",
            "(line 421,col 5)-(line 421,col 49)",
            "(line 422,col 5)-(line 422,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment11()",
        "snippet": "  public void testJSDocAttachment11() {\n    Node varNode =\n       parse(\"/** @type {{x : number, 'y' : string, z}} */var a;\")\n        .getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n\n    assertTypeEquals(createRecordTypeBuilder().\n                     addProperty(\"x\", NUMBER_TYPE, null).\n                     addProperty(\"y\", STRING_TYPE, null).\n                     addProperty(\"z\", UNKNOWN_TYPE, null).\n                     build(),\n                     info.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 425,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 428,col 25)",
            "(line 431,col 5)-(line 431,col 47)",
            "(line 432,col 5)-(line 432,col 44)",
            "(line 433,col 5)-(line 433,col 24)",
            "(line 435,col 5)-(line 440,col 37)",
            "(line 443,col 5)-(line 443,col 44)",
            "(line 444,col 5)-(line 444,col 49)",
            "(line 445,col 5)-(line 445,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment12()",
        "snippet": "  public void testJSDocAttachment12() {\n    Node varNode =\n       parse(\"var a = {/** @type {Object} */ b: c};\")\n        .getFirstChild();\n    Node objectLitNode = varNode.getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLitNode.getType());\n    assertNotNull(objectLitNode.getFirstChild().getJSDocInfo());\n  }\n",
        "begin_line": 448,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 449,col 5)-(line 451,col 25)",
            "(line 452,col 5)-(line 452,col 65)",
            "(line 453,col 5)-(line 453,col 59)",
            "(line 454,col 5)-(line 454,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment13()",
        "snippet": "  public void testJSDocAttachment13() {\n    Node varNode = parse(\"/** foo */ var a;\").getFirstChild();\n    assertNotNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 62)",
            "(line 459,col 5)-(line 459,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment14()",
        "snippet": "  public void testJSDocAttachment14() {\n    Node varNode = parse(\"/** */ var a;\").getFirstChild();\n    assertNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 462,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 463,col 5)-(line 463,col 58)",
            "(line 464,col 5)-(line 464,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment15()",
        "snippet": "  public void testJSDocAttachment15() {\n    Node varNode = parse(\"/** \\n * \\n */ var a;\").getFirstChild();\n    assertNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 467,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 468,col 66)",
            "(line 469,col 5)-(line 469,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment16()",
        "snippet": "  public void testJSDocAttachment16() {\n    Node exprCall =\n        parse(\"/** @private */ x(); function f() {};\").getFirstChild();\n    assertEquals(Token.EXPR_RESULT, exprCall.getType());\n    assertNull(exprCall.getNext().getJSDocInfo());\n    assertNotNull(exprCall.getFirstChild().getJSDocInfo());\n  }\n",
        "begin_line": 472,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 474,col 71)",
            "(line 475,col 5)-(line 475,col 56)",
            "(line 476,col 5)-(line 476,col 50)",
            "(line 477,col 5)-(line 477,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment17()",
        "snippet": "  public void testJSDocAttachment17() {\n    Node fn =\n        parse(\n            \"function f() { \" +\n            \"  return /** @type {string} */ (g(1 /** @desc x */));\" +\n            \"};\").getFirstChild();\n    assertEquals(Token.FUNCTION, fn.getType());\n    Node cast = fn.getLastChild().getFirstChild().getFirstChild();\n    assertEquals(Token.CAST, cast.getType());\n  }\n",
        "begin_line": 480,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 485,col 34)",
            "(line 486,col 5)-(line 486,col 47)",
            "(line 487,col 5)-(line 487,col 66)",
            "(line 488,col 5)-(line 488,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment18()",
        "snippet": "  public void testJSDocAttachment18() {\n    Node fn =\n        parse(\n            \"function f() { \" +\n            \"  var x = /** @type {string} */ (y);\" +\n            \"};\").getFirstChild();\n    assertEquals(Token.FUNCTION, fn.getType());\n    Node cast =\n        fn.getLastChild().getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.CAST, cast.getType());\n  }\n",
        "begin_line": 491,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 496,col 34)",
            "(line 497,col 5)-(line 497,col 47)",
            "(line 498,col 5)-(line 499,col 74)",
            "(line 500,col 5)-(line 500,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testInlineJSDocAttachment1()",
        "snippet": "  public void testInlineJSDocAttachment1() {\n    Node fn = parse(\"function f(/** string */ x) {}\").getFirstChild();\n    assertTrue(fn.isFunction());\n\n    JSDocInfo info =\n        fn.getFirstChild().getNext().getFirstChild().getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 503,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 504,col 70)",
            "(line 505,col 5)-(line 505,col 32)",
            "(line 507,col 5)-(line 508,col 68)",
            "(line 509,col 5)-(line 509,col 24)",
            "(line 510,col 5)-(line 510,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testInlineJSDocAttachment2()",
        "snippet": "  public void testInlineJSDocAttachment2() {\n    Node fn = parse(\n        \"function f(/**\\n\" +\n        \" * {string}\\n\" +\n        \" */ x) {}\").getFirstChild();\n    assertTrue(fn.isFunction());\n\n    JSDocInfo info =\n        fn.getFirstChild().getNext().getFirstChild().getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 513,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 514,col 5)-(line 517,col 37)",
            "(line 518,col 5)-(line 518,col 32)",
            "(line 520,col 5)-(line 521,col 68)",
            "(line 522,col 5)-(line 522,col 24)",
            "(line 523,col 5)-(line 523,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testInlineJSDocAttachment3()",
        "snippet": "  public void testInlineJSDocAttachment3() {\n    parse(\n        \"function f(/** @type {string} */ x) {}\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 526,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 529,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testInlineJSDocAttachment4()",
        "snippet": "  public void testInlineJSDocAttachment4() {\n    parse(\n        \"function f(/**\\n\" +\n        \" * @type {string}\\n\" +\n        \" */ x) {}\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 532,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 533,col 5)-(line 537,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing1()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing1() throws Exception {\n    assertNodeEquality(\n        parse(\"var a = [1,2]\"),\n        parse(\"/** @type Array.<number*/var a = [1,2]\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 540,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 544,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing2()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing2() throws Exception {\n    assertNodeEquality(\n        parse(\"var a = [1,2]\"),\n        parse(\"/** @type {Array.<number}*/var a = [1,2]\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 547,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 551,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing3()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing3() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param {Array.<number} nums */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 554,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 559,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing4()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing4() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @return boolean */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\"));\n  }\n",
        "begin_line": 562,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 563,col 5)-(line 566,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing5()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing5() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param boolean this is some string*/\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\"));\n  }\n",
        "begin_line": 569,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 570,col 5)-(line 573,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing6()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing6() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param {bool!*%E$} */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n            \"Bad type annotation. expected closing }\",\n            \"Bad type annotation. expecting a variable name in a @param tag\"));\n  }\n",
        "begin_line": 576,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 582,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing7()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing7() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @see */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"@see tag missing description\"));\n  }\n",
        "begin_line": 585,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 590,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing8()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing8() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @author */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"@author tag missing author\"));\n  }\n",
        "begin_line": 593,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 594,col 5)-(line 598,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing9()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing9() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @someillegaltag */\" +\n              \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"illegal use of unknown JSDoc tag \\\"someillegaltag\\\";\"\n              + \" ignoring it\"));\n  }\n",
        "begin_line": 601,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 607,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnescapedSlashInRegexpCharClass()",
        "snippet": "  public void testUnescapedSlashInRegexpCharClass() throws Exception {\n    // The tokenizer without the fix for this bug throws an error.\n    parse(\"var foo = /[/]/;\");\n    parse(\"var foo = /[hi there/]/;\");\n    parse(\"var foo = /[/yo dude]/;\");\n    parse(\"var foo = /\\\\/[@#$/watashi/wa/suteevu/desu]/;\");\n  }\n",
        "begin_line": 610,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 612,col 30)",
            "(line 613,col 5)-(line 613,col 38)",
            "(line 614,col 5)-(line 614,col 37)",
            "(line 615,col 5)-(line 615,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.assertNodeEquality(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void assertNodeEquality(Node expected, Node found) {\n    String message = expected.checkTreeEquals(found);\n    if (message != null) {\n      fail(message);\n    }\n  }\n",
        "begin_line": 618,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 619,col 53)",
            "(line 620,col 5)-(line 622,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testParse()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testParse() {\n    Node a = Node.newString(Token.NAME, \"a\");\n    a.addChildToFront(Node.newString(Token.NAME, \"b\"));\n    List<ParserResult> testCases = ImmutableList.of(\n        new ParserResult(\n            \"3;\",\n            createScript(new Node(Token.EXPR_RESULT, Node.newNumber(3.0)))),\n        new ParserResult(\n            \"var a = b;\",\n             createScript(new Node(Token.VAR, a))),\n        new ParserResult(\n            \"\\\"hell\\\\\\no\\\\ world\\\\\\n\\\\\\n!\\\"\",\n             createScript(new Node(Token.EXPR_RESULT,\n             Node.newString(Token.STRING, \"hello world!\")))));\n\n    for (ParserResult testCase : testCases) {\n      assertNodeEquality(testCase.node, parse(testCase.code));\n    }\n  }\n",
        "begin_line": 625,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 627,col 5)-(line 627,col 45)",
            "(line 628,col 5)-(line 628,col 55)",
            "(line 629,col 5)-(line 639,col 62)",
            "(line 641,col 5)-(line 643,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.createScript(com.google.javascript.rhino.Node)",
        "snippet": "  private Node createScript(Node n) {\n    Node script = new Node(Token.SCRIPT);\n    script.addChildToBack(n);\n    return script;\n  }\n",
        "begin_line": 646,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 647,col 5)-(line 647,col 41)",
            "(line 648,col 5)-(line 648,col 29)",
            "(line 649,col 5)-(line 649,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning1()",
        "snippet": "  public void testTrailingCommaWarning1() {\n    parse(\"var a = ['foo', 'bar'];\");\n  }\n",
        "begin_line": 652,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 653,col 5)-(line 653,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning2()",
        "snippet": "  public void testTrailingCommaWarning2() {\n    parse(\"var a = ['foo',,'bar'];\");\n  }\n",
        "begin_line": 656,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 657,col 5)-(line 657,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning3()",
        "snippet": "  public void testTrailingCommaWarning3() {\n    parse(\"var a = ['foo', 'bar',];\", TRAILING_COMMA_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var a = ['foo', 'bar',];\");\n  }\n",
        "begin_line": 660,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 661,col 62)",
            "(line 662,col 5)-(line 662,col 36)",
            "(line 663,col 5)-(line 663,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning4()",
        "snippet": "  public void testTrailingCommaWarning4() {\n    parse(\"var a = [,];\", TRAILING_COMMA_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var a = [,];\");\n  }\n",
        "begin_line": 666,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 667,col 50)",
            "(line 668,col 5)-(line 668,col 36)",
            "(line 669,col 5)-(line 669,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning5()",
        "snippet": "  public void testTrailingCommaWarning5() {\n    parse(\"var a = {'foo': 'bar'};\");\n  }\n",
        "begin_line": 672,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 673,col 5)-(line 673,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning6()",
        "snippet": "  public void testTrailingCommaWarning6() {\n    parse(\"var a = {'foo': 'bar',};\", TRAILING_COMMA_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var a = {'foo': 'bar',};\");\n  }\n",
        "begin_line": 676,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 62)",
            "(line 678,col 5)-(line 678,col 36)",
            "(line 679,col 5)-(line 679,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning7()",
        "snippet": "  public void testTrailingCommaWarning7() {\n    parseError(\"var a = {,};\", BAD_PROPERTY_MESSAGE);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning1()",
        "snippet": "  public void testSuspiciousBlockCommentWarning1() {\n    parse(\"/* @type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 686,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning2()",
        "snippet": "  public void testSuspiciousBlockCommentWarning2() {\n    parse(\"/* \\n * @type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 690,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 691,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning3()",
        "snippet": "  public void testSuspiciousBlockCommentWarning3() {\n    parse(\"/* \\n *@type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 694,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 695,col 5)-(line 695,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning4()",
        "snippet": "  public void testSuspiciousBlockCommentWarning4() {\n    parse(\n        \"  /*\\n\" +\n        \"   * @type {number}\\n\" +\n        \"   */\\n\" +\n        \"  var x = 3;\",\n        SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 698,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 704,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning5()",
        "snippet": "  public void testSuspiciousBlockCommentWarning5() {\n    parse(\n        \"  /*\\n\" +\n        \"   * some random text here\\n\" +\n        \"   * @type {number}\\n\" +\n        \"   */\\n\" +\n        \"  var x = 3;\",\n        SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 707,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 708,col 5)-(line 714,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning6()",
        "snippet": "  public void testSuspiciousBlockCommentWarning6() {\n    parse(\"/* @type{number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 717,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 718,col 5)-(line 718,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testCatchClauseForbidden()",
        "snippet": "  public void testCatchClauseForbidden() {\n    parseError(\"try { } catch (e if true) {}\",\n        \"Catch clauses are not supported\");\n  }\n",
        "begin_line": 721,
        "end_line": 724,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 723,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testConstForbidden()",
        "snippet": "  public void testConstForbidden() {\n    parseError(\"const x = 3;\", \"Unsupported syntax: CONST\");\n  }\n",
        "begin_line": 726,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 727,col 5)-(line 727,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden()",
        "snippet": "  public void testDestructuringAssignForbidden() {\n    parseError(\"var [x, y] = foo();\", \"destructuring assignment forbidden\");\n  }\n",
        "begin_line": 730,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 731,col 5)-(line 731,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden2()",
        "snippet": "  public void testDestructuringAssignForbidden2() {\n    parseError(\"var {x, y} = foo();\", \"missing : after property id\");\n  }\n",
        "begin_line": 734,
        "end_line": 736,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden3()",
        "snippet": "  public void testDestructuringAssignForbidden3() {\n    parseError(\"var {x: x, y: y} = foo();\",\n        \"destructuring assignment forbidden\");\n  }\n",
        "begin_line": 738,
        "end_line": 741,
        "comment": "",
        "child_ranges": [
            "(line 739,col 5)-(line 740,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden4()",
        "snippet": "  public void testDestructuringAssignForbidden4() {\n    parseError(\"[x, y] = foo();\",\n        \"destructuring assignment forbidden\",\n        \"invalid assignment target\");\n  }\n",
        "begin_line": 743,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 744,col 5)-(line 746,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLetForbidden()",
        "snippet": "  public void testLetForbidden() {\n    parseError(\"function f() { let (x = 3) { alert(x); }; }\",\n        \"missing ; before statement\", \"syntax error\");\n  }\n",
        "begin_line": 749,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 751,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testYieldForbidden()",
        "snippet": "  public void testYieldForbidden() {\n    parseError(\"function f() { yield 3; }\", \"missing ; before statement\");\n  }\n",
        "begin_line": 754,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 755,col 5)-(line 755,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testBracelessFunctionForbidden()",
        "snippet": "  public void testBracelessFunctionForbidden() {\n    parseError(\"var sq = function(x) x * x;\",\n        \"missing { before function body\");\n  }\n",
        "begin_line": 758,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 759,col 5)-(line 760,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGeneratorsForbidden()",
        "snippet": "  public void testGeneratorsForbidden() {\n    parseError(\"var i = (x for (x in obj));\",\n        \"Unsupported syntax: GENEXPR\");\n  }\n",
        "begin_line": 763,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 765,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden1()",
        "snippet": "  public void testGettersForbidden1() {\n    parseError(\"var x = {get foo() { return 3; }};\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n  }\n",
        "begin_line": 768,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 769,col 5)-(line 770,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden2()",
        "snippet": "  public void testGettersForbidden2() {\n    parseError(\"var x = {get foo bar() { return 3; }};\",\n        \"invalid property id\");\n  }\n",
        "begin_line": 773,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 775,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden3()",
        "snippet": "  public void testGettersForbidden3() {\n    parseError(\"var x = {a getter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 778,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 780,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden4()",
        "snippet": "  public void testGettersForbidden4() {\n    parseError(\"var x = {\\\"a\\\" getter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 783,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 784,col 5)-(line 785,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden5()",
        "snippet": "  public void testGettersForbidden5() {\n    parseError(\"var x = {a: 2, get foo() { return 3; }};\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n  }\n",
        "begin_line": 788,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 789,col 5)-(line 790,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSettersForbidden()",
        "snippet": "  public void testSettersForbidden() {\n    parseError(\"var x = {set foo() { return 3; }};\",\n        IRFactory.SETTER_ERROR_MESSAGE);\n  }\n",
        "begin_line": 793,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 794,col 5)-(line 795,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSettersForbidden2()",
        "snippet": "  public void testSettersForbidden2() {\n    parseError(\"var x = {a setter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 798,
        "end_line": 801,
        "comment": "",
        "child_ranges": [
            "(line 799,col 5)-(line 800,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDoc1()",
        "snippet": "  public void testFileOverviewJSDoc1() {\n    Node n = parse(\"/** @fileoverview Hi mom! */ function Foo() {}\");\n    assertEquals(Token.FUNCTION, n.getFirstChild().getType());\n    assertTrue(n.getJSDocInfo() != null);\n    assertNull(n.getFirstChild().getJSDocInfo());\n    assertEquals(\"Hi mom!\",\n        n.getJSDocInfo().getFileOverview());\n  }\n",
        "begin_line": 803,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 804,col 5)-(line 804,col 69)",
            "(line 805,col 5)-(line 805,col 62)",
            "(line 806,col 5)-(line 806,col 41)",
            "(line 807,col 5)-(line 807,col 49)",
            "(line 808,col 5)-(line 809,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDocDoesNotHoseParsing()",
        "snippet": "  public void testFileOverviewJSDocDoesNotHoseParsing() {\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview Hi mom! \\n */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview Hi mom! \\n * * * */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview \\n * x */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview \\n * x \\n */ function Foo() {}\")\n            .getFirstChild().getType());\n  }\n",
        "begin_line": 812,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 813,col 5)-(line 816,col 40)",
            "(line 817,col 5)-(line 820,col 40)",
            "(line 821,col 5)-(line 824,col 40)",
            "(line 825,col 5)-(line 828,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDoc2()",
        "snippet": "  public void testFileOverviewJSDoc2() {\n    Node n = parse(\"/** @fileoverview Hi mom! */ \" +\n        \"/** @constructor */ function Foo() {}\");\n    assertTrue(n.getJSDocInfo() != null);\n    assertEquals(\"Hi mom!\", n.getJSDocInfo().getFileOverview());\n    assertTrue(n.getFirstChild().getJSDocInfo() != null);\n    assertFalse(n.getFirstChild().getJSDocInfo().hasFileOverview());\n    assertTrue(n.getFirstChild().getJSDocInfo().isConstructor());\n  }\n",
        "begin_line": 831,
        "end_line": 839,
        "comment": "",
        "child_ranges": [
            "(line 832,col 5)-(line 833,col 49)",
            "(line 834,col 5)-(line 834,col 41)",
            "(line 835,col 5)-(line 835,col 64)",
            "(line 836,col 5)-(line 836,col 57)",
            "(line 837,col 5)-(line 837,col 68)",
            "(line 838,col 5)-(line 838,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testObjectLiteralDoc1()",
        "snippet": "  public void testObjectLiteralDoc1() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLit.getType());\n\n    Node number = objectLit.getFirstChild();\n    assertEquals(Token.STRING_KEY, number.getType());\n    assertNotNull(number.getJSDocInfo());\n  }\n",
        "begin_line": 841,
        "end_line": 850,
        "comment": "",
        "child_ranges": [
            "(line 842,col 5)-(line 842,col 60)",
            "(line 844,col 5)-(line 844,col 71)",
            "(line 845,col 5)-(line 845,col 55)",
            "(line 847,col 5)-(line 847,col 44)",
            "(line 848,col 5)-(line 848,col 53)",
            "(line 849,col 5)-(line 849,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDuplicatedParam()",
        "snippet": "  public void testDuplicatedParam() {\n    parse(\"function foo(x, x) {}\", \"Duplicate parameter name \\\"x\\\".\");\n  }\n",
        "begin_line": 852,
        "end_line": 854,
        "comment": "",
        "child_ranges": [
            "(line 853,col 5)-(line 853,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetter()",
        "snippet": "  public void testGetter() {\n    mode = LanguageMode.ECMASCRIPT3;\n    parseError(\"var x = {get 1(){}};\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n    parseError(\"var x = {get 'a'(){}};\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n    parseError(\"var x = {get a(){}};\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var x = {get 1(){}};\");\n    parse(\"var x = {get 'a'(){}};\");\n    parse(\"var x = {get a(){}};\");\n    parseError(\"var x = {get a(b){}};\", \"getters may not have parameters\");\n  }\n",
        "begin_line": 856,
        "end_line": 869,
        "comment": "",
        "child_ranges": [
            "(line 857,col 5)-(line 857,col 36)",
            "(line 858,col 5)-(line 859,col 40)",
            "(line 860,col 5)-(line 861,col 40)",
            "(line 862,col 5)-(line 863,col 40)",
            "(line 864,col 5)-(line 864,col 36)",
            "(line 865,col 5)-(line 865,col 34)",
            "(line 866,col 5)-(line 866,col 36)",
            "(line 867,col 5)-(line 867,col 34)",
            "(line 868,col 5)-(line 868,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSetter()",
        "snippet": "  public void testSetter() {\n    mode = LanguageMode.ECMASCRIPT3;\n    parseError(\"var x = {set 1(x){}};\",\n        IRFactory.SETTER_ERROR_MESSAGE);\n    parseError(\"var x = {set 'a'(x){}};\",\n        IRFactory.SETTER_ERROR_MESSAGE);\n    parseError(\"var x = {set a(x){}};\",\n        IRFactory.SETTER_ERROR_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var x = {set 1(x){}};\");\n    parse(\"var x = {set 'a'(x){}};\");\n    parse(\"var x = {set a(x){}};\");\n    parseError(\"var x = {set a(){}};\",\n        \"setters must have exactly one parameter\");\n  }\n",
        "begin_line": 871,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 872,col 5)-(line 872,col 36)",
            "(line 873,col 5)-(line 874,col 40)",
            "(line 875,col 5)-(line 876,col 40)",
            "(line 877,col 5)-(line 878,col 40)",
            "(line 879,col 5)-(line 879,col 36)",
            "(line 880,col 5)-(line 880,col 35)",
            "(line 881,col 5)-(line 881,col 37)",
            "(line 882,col 5)-(line 882,col 35)",
            "(line 883,col 5)-(line 884,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLamestWarningEver()",
        "snippet": "  public void testLamestWarningEver() {\n    // This used to be a warning.\n    parse(\"var x = /** @type {undefined} */ (y);\");\n    parse(\"var x = /** @type {void} */ (y);\");\n  }\n",
        "begin_line": 887,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 889,col 51)",
            "(line 890,col 5)-(line 890,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnfinishedComment()",
        "snippet": "  public void testUnfinishedComment() {\n    parseError(\"/** this is a comment \", \"unterminated comment\");\n  }\n",
        "begin_line": 893,
        "end_line": 895,
        "comment": "",
        "child_ranges": [
            "(line 894,col 5)-(line 894,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testParseBlockDescription()",
        "snippet": "  public void testParseBlockDescription() {\n    Node n = parse(\"/** This is a variable. */ var x;\");\n    Node var = n.getFirstChild();\n    assertNotNull(var.getJSDocInfo());\n    assertEquals(\"This is a variable.\",\n        var.getJSDocInfo().getBlockDescription());\n  }\n",
        "begin_line": 897,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 898,col 56)",
            "(line 899,col 5)-(line 899,col 33)",
            "(line 900,col 5)-(line 900,col 38)",
            "(line 901,col 5)-(line 902,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnnamedFunctionStatement()",
        "snippet": "  public void testUnnamedFunctionStatement() {\n    // Statements\n    parseError(\"function() {};\", \"unnamed function statement\");\n    parseError(\"if (true) { function() {}; }\", \"unnamed function statement\");\n    parse(\"function f() {};\");\n    // Expressions\n    parse(\"(function f() {});\");\n    parse(\"(function () {});\");\n  }\n",
        "begin_line": 905,
        "end_line": 913,
        "comment": "",
        "child_ranges": [
            "(line 907,col 5)-(line 907,col 63)",
            "(line 908,col 5)-(line 908,col 77)",
            "(line 909,col 5)-(line 909,col 30)",
            "(line 911,col 5)-(line 911,col 32)",
            "(line 912,col 5)-(line 912,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testReservedKeywords()",
        "snippet": "  public void testReservedKeywords() {\n    mode = LanguageMode.ECMASCRIPT3;\n\n    parseError(\"var boolean;\", \"identifier is a reserved word\");\n    parseError(\"function boolean() {};\",\n        \"identifier is a reserved word\");\n    parseError(\"boolean = 1;\", \"identifier is a reserved word\");\n    parseError(\"class = 1;\", \"identifier is a reserved word\");\n    parseError(\"public = 2;\", \"identifier is a reserved word\");\n\n    mode = LanguageMode.ECMASCRIPT5;\n\n    parse(\"var boolean;\");\n    parse(\"function boolean() {};\");\n    parse(\"boolean = 1;\");\n    parseError(\"class = 1;\", \"identifier is a reserved word\");\n    parse(\"public = 2;\");\n\n    mode = LanguageMode.ECMASCRIPT5_STRICT;\n\n    parse(\"var boolean;\");\n    parse(\"function boolean() {};\");\n    parse(\"boolean = 1;\");\n    parseError(\"class = 1;\", \"identifier is a reserved word\");\n    parseError(\"public = 2;\", \"identifier is a reserved word\");\n  }\n",
        "begin_line": 915,
        "end_line": 940,
        "comment": "",
        "child_ranges": [
            "(line 916,col 5)-(line 916,col 36)",
            "(line 918,col 5)-(line 918,col 64)",
            "(line 919,col 5)-(line 920,col 41)",
            "(line 921,col 5)-(line 921,col 64)",
            "(line 922,col 5)-(line 922,col 62)",
            "(line 923,col 5)-(line 923,col 63)",
            "(line 925,col 5)-(line 925,col 36)",
            "(line 927,col 5)-(line 927,col 26)",
            "(line 928,col 5)-(line 928,col 36)",
            "(line 929,col 5)-(line 929,col 26)",
            "(line 930,col 5)-(line 930,col 62)",
            "(line 931,col 5)-(line 931,col 25)",
            "(line 933,col 5)-(line 933,col 43)",
            "(line 935,col 5)-(line 935,col 26)",
            "(line 936,col 5)-(line 936,col 36)",
            "(line 937,col 5)-(line 937,col 26)",
            "(line 938,col 5)-(line 938,col 62)",
            "(line 939,col 5)-(line 939,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testKeywordsAsProperties()",
        "snippet": "  public void testKeywordsAsProperties() {\n    mode = LanguageMode.ECMASCRIPT3;\n\n    parse(\"var x = {function: 1};\", IRFactory.INVALID_ES3_PROP_NAME);\n    parse(\"x.function;\", IRFactory.INVALID_ES3_PROP_NAME);\n    parseError(\"var x = {get x(){} };\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n    parseError(\"var x = {get function(){} };\", IRFactory.GETTER_ERROR_MESSAGE);\n    parseError(\"var x = {get 'function'(){} };\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n    parseError(\"var x = {get 1(){} };\",\n        IRFactory.GETTER_ERROR_MESSAGE);\n    parseError(\"var x = {set function(a){} };\", IRFactory.SETTER_ERROR_MESSAGE);\n    parseError(\"var x = {set 'function'(a){} };\",\n        IRFactory.SETTER_ERROR_MESSAGE);\n    parseError(\"var x = {set 1(a){} };\",\n        IRFactory.SETTER_ERROR_MESSAGE);\n    parse(\"var x = {class: 1};\", IRFactory.INVALID_ES3_PROP_NAME);\n    parse(\"var x = {'class': 1};\");\n    parse(\"x.class;\", IRFactory.INVALID_ES3_PROP_NAME);\n    parse(\"x['class'];\");\n    parse(\"var x = {let: 1};\");  // 'let' is not reserved in ES3\n    parse(\"x.let;\");\n    parse(\"var x = {yield: 1};\"); // 'yield' is not reserved in ES3\n    parse(\"x.yield;\");\n\n    mode = LanguageMode.ECMASCRIPT5;\n\n    parse(\"var x = {function: 1};\");\n    parse(\"x.function;\");\n    parse(\"var x = {get function(){} };\");\n    parse(\"var x = {get 'function'(){} };\");\n    parse(\"var x = {get 1(){} };\");\n    parse(\"var x = {set function(a){} };\");\n    parse(\"var x = {set 'function'(a){} };\");\n    parse(\"var x = {set 1(a){} };\");\n    parse(\"var x = {class: 1};\");\n    parse(\"x.class;\");\n    parse(\"var x = {let: 1};\");\n    parse(\"x.let;\");\n    parse(\"var x = {yield: 1};\");\n    parse(\"x.yield;\");\n\n    mode = LanguageMode.ECMASCRIPT5_STRICT;\n\n    parse(\"var x = {function: 1};\");\n    parse(\"x.function;\");\n    parse(\"var x = {get function(){} };\");\n    parse(\"var x = {get 'function'(){} };\");\n    parse(\"var x = {get 1(){} };\");\n    parse(\"var x = {set function(a){} };\");\n    parse(\"var x = {set 'function'(a){} };\");\n    parse(\"var x = {set 1(a){} };\");\n    parse(\"var x = {class: 1};\");\n    parse(\"x.class;\");\n    parse(\"var x = {let: 1};\");\n    parse(\"x.let;\");\n    parse(\"var x = {yield: 1};\");\n    parse(\"x.yield;\");\n  }\n",
        "begin_line": 942,
        "end_line": 1001,
        "comment": "",
        "child_ranges": [
            "(line 943,col 5)-(line 943,col 36)",
            "(line 945,col 5)-(line 945,col 69)",
            "(line 946,col 5)-(line 946,col 58)",
            "(line 947,col 5)-(line 948,col 40)",
            "(line 949,col 5)-(line 949,col 79)",
            "(line 950,col 5)-(line 951,col 40)",
            "(line 952,col 5)-(line 953,col 40)",
            "(line 954,col 5)-(line 954,col 80)",
            "(line 955,col 5)-(line 956,col 40)",
            "(line 957,col 5)-(line 958,col 40)",
            "(line 959,col 5)-(line 959,col 66)",
            "(line 960,col 5)-(line 960,col 35)",
            "(line 961,col 5)-(line 961,col 55)",
            "(line 962,col 5)-(line 962,col 25)",
            "(line 963,col 5)-(line 963,col 31)",
            "(line 964,col 5)-(line 964,col 20)",
            "(line 965,col 5)-(line 965,col 33)",
            "(line 966,col 5)-(line 966,col 22)",
            "(line 968,col 5)-(line 968,col 36)",
            "(line 970,col 5)-(line 970,col 36)",
            "(line 971,col 5)-(line 971,col 25)",
            "(line 972,col 5)-(line 972,col 42)",
            "(line 973,col 5)-(line 973,col 44)",
            "(line 974,col 5)-(line 974,col 35)",
            "(line 975,col 5)-(line 975,col 43)",
            "(line 976,col 5)-(line 976,col 45)",
            "(line 977,col 5)-(line 977,col 36)",
            "(line 978,col 5)-(line 978,col 33)",
            "(line 979,col 5)-(line 979,col 22)",
            "(line 980,col 5)-(line 980,col 31)",
            "(line 981,col 5)-(line 981,col 20)",
            "(line 982,col 5)-(line 982,col 33)",
            "(line 983,col 5)-(line 983,col 22)",
            "(line 985,col 5)-(line 985,col 43)",
            "(line 987,col 5)-(line 987,col 36)",
            "(line 988,col 5)-(line 988,col 25)",
            "(line 989,col 5)-(line 989,col 42)",
            "(line 990,col 5)-(line 990,col 44)",
            "(line 991,col 5)-(line 991,col 35)",
            "(line 992,col 5)-(line 992,col 43)",
            "(line 993,col 5)-(line 993,col 45)",
            "(line 994,col 5)-(line 994,col 36)",
            "(line 995,col 5)-(line 995,col 33)",
            "(line 996,col 5)-(line 996,col 22)",
            "(line 997,col 5)-(line 997,col 31)",
            "(line 998,col 5)-(line 998,col 20)",
            "(line 999,col 5)-(line 999,col 33)",
            "(line 1000,col 5)-(line 1000,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetPropFunctionName()",
        "snippet": "  public void testGetPropFunctionName() {\n    parseError(\"function a.b() {}\",\n        \"missing ( before function parameters.\");\n    parseError(\"var x = function a.b() {}\",\n        \"missing ( before function parameters.\");\n  }\n",
        "begin_line": 1003,
        "end_line": 1008,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 5)-(line 1005,col 49)",
            "(line 1006,col 5)-(line 1007,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetPropFunctionNameIdeMode()",
        "snippet": "  public void testGetPropFunctionNameIdeMode() {\n    // In IDE mode, we try to fix up the tree, but sometimes\n    // this leads to even more errors.\n    isIdeMode = true;\n    parseError(\"function a.b() {}\",\n        \"missing ( before function parameters.\",\n        \"missing formal parameter\",\n        \"missing ) after formal parameters\",\n        \"missing { before function body\",\n        \"syntax error\",\n        \"missing ; before statement\",\n        \"missing ; before statement\",\n        \"missing } after function body\",\n        \"Unsupported syntax: ERROR\",\n        \"Unsupported syntax: ERROR\");\n    parseError(\"var x = function a.b() {}\",\n        \"missing ( before function parameters.\",\n        \"missing formal parameter\",\n        \"missing ) after formal parameters\",\n        \"missing { before function body\",\n        \"syntax error\",\n        \"missing ; before statement\",\n        \"missing ; before statement\",\n        \"missing } after function body\",\n        \"Unsupported syntax: ERROR\",\n        \"Unsupported syntax: ERROR\");\n  }\n",
        "begin_line": 1010,
        "end_line": 1036,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1013,col 21)",
            "(line 1014,col 5)-(line 1024,col 37)",
            "(line 1025,col 5)-(line 1035,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIdeModePartialTree()",
        "snippet": "  public void testIdeModePartialTree() {\n    Node partialTree = parseError(\"function Foo() {} f.\",\n        \"missing name after . operator\");\n    assertNull(partialTree);\n\n    isIdeMode = true;\n    partialTree = parseError(\"function Foo() {} f.\",\n        \"missing name after . operator\");\n    assertNotNull(partialTree);\n  }\n",
        "begin_line": 1038,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1039,col 5)-(line 1040,col 41)",
            "(line 1041,col 5)-(line 1041,col 28)",
            "(line 1043,col 5)-(line 1043,col 21)",
            "(line 1044,col 5)-(line 1045,col 41)",
            "(line 1046,col 5)-(line 1046,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testForEach()",
        "snippet": "  public void testForEach() {\n    parseError(\n        \"function f(stamp, status) {\\n\" +\n        \"  for each ( var curTiming in this.timeLog.timings ) {\\n\" +\n        \"    if ( curTiming.callId == stamp ) {\\n\" +\n        \"      curTiming.flag = status;\\n\" +\n        \"      break;\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"};\",\n        \"unsupported language extension: for each\");\n  }\n",
        "begin_line": 1049,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1050,col 5)-(line 1059,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testMisplacedTypeAnnotation1()",
        "snippet": "  public void testMisplacedTypeAnnotation1() {\n    // misuse with COMMA\n    parse(\n        \"var o = {};\" +\n        \"/** @type {string} */ o.prop1 = 1, o.prop2 = 2;\",\n        MISPLACED_TYPE_ANNOTATION);\n  }\n",
        "begin_line": 1062,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 5)-(line 1067,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testMisplacedTypeAnnotation2()",
        "snippet": "  public void testMisplacedTypeAnnotation2() {\n    // missing parentheses for the cast.\n    parse(\n        \"var o = /** @type {string} */ getValue();\",\n        MISPLACED_TYPE_ANNOTATION);\n  }\n",
        "begin_line": 1070,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1074,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testMisplacedTypeAnnotation3()",
        "snippet": "  public void testMisplacedTypeAnnotation3() {\n    // missing parentheses for the cast.\n    parse(\n        \"var o = 1 + /** @type {string} */ value;\",\n        MISPLACED_TYPE_ANNOTATION);\n  }\n",
        "begin_line": 1077,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1079,col 5)-(line 1081,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testMisplacedTypeAnnotation4()",
        "snippet": "  public void testMisplacedTypeAnnotation4() {\n    // missing parentheses for the cast.\n    parse(\n        \"var o = /** @type {!Array.<string>} */ ['hello', 'you'];\",\n        MISPLACED_TYPE_ANNOTATION);\n  }\n",
        "begin_line": 1084,
        "end_line": 1089,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 5)-(line 1088,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testMisplacedTypeAnnotation5()",
        "snippet": "  public void testMisplacedTypeAnnotation5() {\n    // missing parentheses for the cast.\n    parse(\n        \"var o = (/** @type {!Foo} */ {});\",\n        MISPLACED_TYPE_ANNOTATION);\n  }\n",
        "begin_line": 1091,
        "end_line": 1096,
        "comment": "",
        "child_ranges": [
            "(line 1093,col 5)-(line 1095,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testMisplacedTypeAnnotation6()",
        "snippet": "  public void testMisplacedTypeAnnotation6() {\n    parse(\"var o = /** @type {function():string} */ function() {return 'str';}\",\n        MISPLACED_TYPE_ANNOTATION);\n  }\n",
        "begin_line": 1098,
        "end_line": 1101,
        "comment": "",
        "child_ranges": [
            "(line 1099,col 5)-(line 1100,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testValidTypeAnnotation1()",
        "snippet": "  public void testValidTypeAnnotation1() {\n    parse(\"/** @type {string} */ var o = 'str';\");\n    parse(\"var /** @type {string} */ o = 'str', /** @type {number} */ p = 0;\");\n    parse(\"/** @type {function():string} */ function o() { return 'str'; }\");\n    parse(\"var o = {}; /** @type {string} */ o.prop = 'str';\");\n    parse(\"var o = {}; /** @type {string} */ o['prop'] = 'str';\");\n    parse(\"var o = { /** @type {string} */ prop : 'str' };\");\n    parse(\"var o = { /** @type {string} */ 'prop' : 'str' };\");\n    parse(\"var o = { /** @type {string} */ 1 : 'str' };\");\n  }\n",
        "begin_line": 1103,
        "end_line": 1112,
        "comment": "",
        "child_ranges": [
            "(line 1104,col 5)-(line 1104,col 50)",
            "(line 1105,col 5)-(line 1105,col 79)",
            "(line 1106,col 5)-(line 1106,col 77)",
            "(line 1107,col 5)-(line 1107,col 63)",
            "(line 1108,col 5)-(line 1108,col 66)",
            "(line 1109,col 5)-(line 1109,col 61)",
            "(line 1110,col 5)-(line 1110,col 63)",
            "(line 1111,col 5)-(line 1111,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testValidTypeAnnotation2()",
        "snippet": "  public void testValidTypeAnnotation2() {\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var o = { /** @type {string} */ get prop() { return 'str' }};\");\n    parse(\"var o = { /** @type {string} */ set prop(s) {}};\");\n  }\n",
        "begin_line": 1114,
        "end_line": 1118,
        "comment": "",
        "child_ranges": [
            "(line 1115,col 5)-(line 1115,col 36)",
            "(line 1116,col 5)-(line 1116,col 75)",
            "(line 1117,col 5)-(line 1117,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testValidTypeAnnotation3()",
        "snippet": "  public void testValidTypeAnnotation3() {\n    // This one we don't currently support in the type checker but\n    // we would like to.\n    parse(\"try {} catch (/** @type {Error} */ e) {}\");\n  }\n",
        "begin_line": 1120,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.parseError(java.lang.String, java.lang.String...)",
        "snippet": "  private Node parseError(String string, String... errors) {\n    TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);\n    Node script = null;\n    try {\n      StaticSourceFile file = new SimpleSourceFile(\"input\", false);\n      script = ParserRunner.parse(\n          file, string, ParserRunner.createConfig(isIdeMode, mode, false),\n          testErrorReporter, Logger.getAnonymousLogger()).ast;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // verifying that all warnings were seen\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n    assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n\n    return script;\n  }\n",
        "begin_line": 1130,
        "end_line": 1147,
        "comment": "\n   * Verify that the given code has the given parse errors.\n   * @return If in IDE mode, returns a partial tree.\n   ",
        "child_ranges": [
            "(line 1131,col 5)-(line 1131,col 78)",
            "(line 1132,col 5)-(line 1132,col 23)",
            "(line 1133,col 5)-(line 1140,col 5)",
            "(line 1143,col 5)-(line 1143,col 60)",
            "(line 1144,col 5)-(line 1144,col 62)",
            "(line 1146,col 5)-(line 1146,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private Node parse(String string, String... warnings) {\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    Node script = null;\n    try {\n      StaticSourceFile file = new SimpleSourceFile(\"input\", false);\n      script = ParserRunner.parse(\n          file, string, ParserRunner.createConfig(true, mode, false),\n          testErrorReporter, Logger.getAnonymousLogger()).ast;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // verifying that all warnings were seen\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n    assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n\n    return script;\n  }\n",
        "begin_line": 1149,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1150,col 5)-(line 1150,col 80)",
            "(line 1151,col 5)-(line 1151,col 23)",
            "(line 1152,col 5)-(line 1159,col 5)",
            "(line 1162,col 5)-(line 1162,col 60)",
            "(line 1163,col 5)-(line 1163,col 62)",
            "(line 1165,col 5)-(line 1165,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.ParserResult.ParserResult(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    private ParserResult(String code, Node node) {\n      this.code = code;\n      this.node = node;\n    }\n",
        "begin_line": 1172,
        "end_line": 1175,
        "comment": "",
        "child_ranges": [
            "(line 1173,col 7)-(line 1173,col 23)",
            "(line 1174,col 7)-(line 1174,col 23)"
        ]
    }
]