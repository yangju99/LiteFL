[
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testStraightLine()",
        "snippet": "  public void testStraightLine() {\n    // A sample of simple straight line of code with different liveness changes.\n    assertNotLiveBeforeX(\"X:var a;\", \"a\");\n    assertNotLiveAfterX(\"X:var a;\", \"a\");\n    assertNotLiveAfterX(\"X:var a=1;\", \"a\");\n    assertLiveAfterX(\"X:var a=1; a()\", \"a\");\n    assertNotLiveBeforeX(\"X:var a=1; a()\", \"a\");\n    assertLiveBeforeX(\"var a;X:a;\", \"a\");\n    assertLiveBeforeX(\"var a;X:a=a+1;\", \"a\");\n    assertLiveBeforeX(\"var a;X:a+=1;\", \"a\");\n    assertLiveBeforeX(\"var a;X:a++;\", \"a\");\n    assertNotLiveAfterX(\"var a,b;X:b();\", \"a\");\n    assertNotLiveBeforeX(\"var a,b;X:b();\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b(a);\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b(1,2,3,b(a + 1));\", \"a\");\n    assertNotLiveBeforeX(\"var a,b;X:a=1;b(a)\", \"a\");\n    assertNotLiveAfterX(\"var a,b;X:b(a);b()\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b();b=1;a()\", \"b\");\n    assertLiveAfterX(\"X:a();var a;a()\", \"a\");\n    assertNotLiveAfterX(\"X:a();var a=1;a()\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:a,b=1\", \"a\");\n  }\n",
        "begin_line": 36,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 42)",
            "(line 39,col 5)-(line 39,col 41)",
            "(line 40,col 5)-(line 40,col 43)",
            "(line 41,col 5)-(line 41,col 44)",
            "(line 42,col 5)-(line 42,col 48)",
            "(line 43,col 5)-(line 43,col 41)",
            "(line 44,col 5)-(line 44,col 45)",
            "(line 45,col 5)-(line 45,col 44)",
            "(line 46,col 5)-(line 46,col 43)",
            "(line 47,col 5)-(line 47,col 47)",
            "(line 48,col 5)-(line 48,col 48)",
            "(line 49,col 5)-(line 49,col 46)",
            "(line 50,col 5)-(line 50,col 59)",
            "(line 51,col 5)-(line 51,col 52)",
            "(line 52,col 5)-(line 52,col 51)",
            "(line 53,col 5)-(line 53,col 52)",
            "(line 54,col 5)-(line 54,col 45)",
            "(line 55,col 5)-(line 55,col 50)",
            "(line 56,col 5)-(line 56,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testProperties()",
        "snippet": "  public void testProperties() {\n    // Reading property of a local variable makes that variable live.\n    assertLiveBeforeX(\"var a,b;X:a.P;\", \"a\");\n\n    // Assigning to a property doesn't kill \"a\". It makes it live instead.\n    assertLiveBeforeX(\"var a,b;X:a.P=1;b()\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:a.P.Q=1;b()\", \"a\");\n\n    // An \"a\" in a different context.\n    assertNotLiveAfterX(\"var a,b;X:b.P.Q.a=1;\", \"a\");\n\n    assertLiveBeforeX(\"var a,b;X:b.P.Q=a;\", \"a\");\n  }\n",
        "begin_line": 59,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 45)",
            "(line 64,col 5)-(line 64,col 50)",
            "(line 65,col 5)-(line 65,col 52)",
            "(line 68,col 5)-(line 68,col 53)",
            "(line 70,col 5)-(line 70,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testConditions()",
        "snippet": "  public void testConditions() {\n    // Reading the condition makes the variable live.\n    assertLiveBeforeX(\"var a,b;X:if(a){}\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:if(a||b) {}\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:if(b||a) {}\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:if(b||b(a)) {}\", \"a\");\n    assertNotLiveAfterX(\"var a,b;X:b();if(a) {}\", \"b\");\n\n    // We can kill within a condition as well.\n    assertNotLiveAfterX(\"var a,b;X:a();if(a=b){}a()\", \"a\");\n    assertNotLiveAfterX(\"var a,b;X:a();while(a=b){}a()\", \"a\");\n\n    // The kill can be \"conditional\" due to short circuit.\n    assertNotLiveAfterX(\"var a,b;X:a();if((a=b)&&b){}a()\", \"a\");\n    assertNotLiveAfterX(\"var a,b;X:a();while((a=b)&&b){}a()\", \"a\");\n    assertLiveBeforeX(\"var a,b;a();X:if(b&&(a=b)){}a()\", \"a\"); // Assumed live.\n    assertLiveBeforeX(\"var a,b;a();X:if(a&&(a=b)){}a()\", \"a\");\n    assertLiveBeforeX(\"var a,b;a();X:while(b&&(a=b)){}a()\", \"a\");\n    assertLiveBeforeX(\"var a,b;a();X:while(a&&(a=b)){}a()\", \"a\");\n  }\n",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 48)",
            "(line 76,col 5)-(line 76,col 52)",
            "(line 77,col 5)-(line 77,col 52)",
            "(line 78,col 5)-(line 78,col 55)",
            "(line 79,col 5)-(line 79,col 55)",
            "(line 82,col 5)-(line 82,col 59)",
            "(line 83,col 5)-(line 83,col 62)",
            "(line 86,col 5)-(line 86,col 64)",
            "(line 87,col 5)-(line 87,col 67)",
            "(line 88,col 5)-(line 88,col 62)",
            "(line 89,col 5)-(line 89,col 62)",
            "(line 90,col 5)-(line 90,col 65)",
            "(line 91,col 5)-(line 91,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testArrays()",
        "snippet": "  public void testArrays() {\n    assertLiveBeforeX(\"var a;X:a[1]\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b[a]\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b[1,2,3,4,b(a)]\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b=[a,'a']\", \"a\");\n    assertNotLiveBeforeX(\"var a,b;X:a=[];b(a)\", \"a\");\n\n    // Element assignment doesn't kill the array.\n    assertLiveBeforeX(\"var a;X:a[1]=1\", \"a\");\n  }\n",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 43)",
            "(line 96,col 5)-(line 96,col 45)",
            "(line 97,col 5)-(line 97,col 56)",
            "(line 98,col 5)-(line 98,col 50)",
            "(line 99,col 5)-(line 99,col 53)",
            "(line 102,col 5)-(line 102,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testTwoPaths()",
        "snippet": "  public void testTwoPaths() {\n    // Both Paths.\n    assertLiveBeforeX(\"var a,b;X:if(b){b(a)}else{b(a)};\", \"a\");\n\n    // Only one path.\n    assertLiveBeforeX(\"var a,b;X:if(b){b(b)}else{b(a)};\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:if(b){b(a)}else{b(b)};\", \"a\");\n\n    // None of the paths.\n    assertNotLiveAfterX(\"var a,b;X:if(b){b(b)}else{b(b)};\", \"a\");\n\n    // At the very end.\n    assertLiveBeforeX(\"var a,b;X:if(b){b(b)}else{b(b)}a();\", \"a\");\n\n    // The loop might or might not be executed.\n    assertLiveBeforeX(\"var a;X:while(param1){a()};\", \"a\");\n    assertLiveBeforeX(\"var a;X:while(param1){a=1};a()\", \"a\");\n\n    // Same idea with if.\n    assertLiveBeforeX(\"var a;X:if(param1){a()};\", \"a\");\n    assertLiveBeforeX(\"var a;X:if(param1){a=1};a()\", \"a\");\n\n    // This is different in DO. We know for sure at least one iteration is\n    // executed.\n    assertNotLiveAfterX(\"X:var a;do{a=1}while(param1);a()\", \"a\");\n  }\n",
        "begin_line": 105,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 63)",
            "(line 110,col 5)-(line 110,col 63)",
            "(line 111,col 5)-(line 111,col 63)",
            "(line 114,col 5)-(line 114,col 65)",
            "(line 117,col 5)-(line 117,col 66)",
            "(line 120,col 5)-(line 120,col 58)",
            "(line 121,col 5)-(line 121,col 61)",
            "(line 124,col 5)-(line 124,col 55)",
            "(line 125,col 5)-(line 125,col 58)",
            "(line 129,col 5)-(line 129,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testThreePaths()",
        "snippet": "  public void testThreePaths() {\n    assertLiveBeforeX(\"var a;X:if(1){}else if(2){}else{a()};\", \"a\");\n    assertLiveBeforeX(\"var a;X:if(1){}else if(2){a()}else{};\", \"a\");\n    assertLiveBeforeX(\"var a;X:if(1){a()}else if(2){}else{};\", \"a\");\n    assertLiveBeforeX(\"var a;X:if(1){}else if(2){}else{};a()\", \"a\");\n  }\n",
        "begin_line": 132,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 68)",
            "(line 134,col 5)-(line 134,col 68)",
            "(line 135,col 5)-(line 135,col 68)",
            "(line 136,col 5)-(line 136,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testHooks()",
        "snippet": "  public void testHooks() {\n    assertLiveBeforeX(\"var a;X:1?a=1:1;a()\", \"a\");\n\n    // Unfortunately, we cannot prove the following because we assume there is\n    // no control flow within a hook (ie: no joins / set unions).\n    // assertNotLiveAfterX(\"var a;X:1?a=1:a=2;a\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:b=1?a:2\", \"a\");\n  }\n",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 50)",
            "(line 145,col 5)-(line 145,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testForLoops()",
        "snippet": "  public void testForLoops() {\n    // Induction variable should not be live after the loop.\n    assertNotLiveBeforeX(\"var a,b;for(a=0;a<9;a++){b(a)};X:b\", \"a\");\n    assertNotLiveBeforeX(\"var a,b;for(a in b){a()};X:b\", \"a\");\n    assertNotLiveBeforeX(\"var a,b;for(a in b){a()};X:a\", \"b\");\n    assertLiveBeforeX(\"var b;for(var a in b){X:a()};\", \"a\");\n\n    // It should be live within the loop even if it is not used.\n    assertLiveBeforeX(\"var a,b;for(a=0;a<9;a++){X:1}\", \"a\");\n    assertLiveAfterX(\"var a,b;for(a in b){X:b};\", \"a\");\n    // For-In should serve as a gen as well.\n    assertLiveBeforeX(\"var a,b; X:for(a in b){ }\", \"a\");\n\n    // \"a in b\" should kill \"a\" before it.\n    // Can't prove this unless we have branched backward DFA.\n    //assertNotLiveAfterX(\"var a,b;X:b;for(a in b){a()};\", \"a\");\n\n    // Unless it is used before.\n    assertLiveBeforeX(\"var a,b;X:a();b();for(a in b){a()};\", \"a\");\n\n    // Initializer\n    assertLiveBeforeX(\"var a,b;X:b;for(b=a;;){};\", \"a\");\n    assertNotLiveBeforeX(\"var a,b;X:a;for(b=a;;){b()};b();\", \"b\");\n  }\n",
        "begin_line": 148,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 150,col 68)",
            "(line 151,col 5)-(line 151,col 62)",
            "(line 152,col 5)-(line 152,col 62)",
            "(line 153,col 5)-(line 153,col 60)",
            "(line 156,col 5)-(line 156,col 60)",
            "(line 157,col 5)-(line 157,col 55)",
            "(line 159,col 5)-(line 159,col 56)",
            "(line 166,col 5)-(line 166,col 66)",
            "(line 169,col 5)-(line 169,col 56)",
            "(line 170,col 5)-(line 170,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testNestedLoops()",
        "snippet": "  public void testNestedLoops() {\n    assertLiveBeforeX(\"var a;X:while(1){while(1){a()}}\", \"a\");\n    assertLiveBeforeX(\"var a;X:while(1){while(1){while(1){a()}}}\", \"a\");\n    assertLiveBeforeX(\"var a;X:while(1){while(1){a()};a=1}\", \"a\");\n    assertLiveAfterX(\"var a;while(1){while(1){a()};X:a=1;}\", \"a\");\n    assertLiveAfterX(\"var a;while(1){X:a=1;while(1){a()}}\", \"a\");\n    assertNotLiveBeforeX(\n        \"var a;X:1;do{do{do{a=1;}while(1)}while(1)}while(1);a()\", \"a\");\n  }\n",
        "begin_line": 173,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 62)",
            "(line 175,col 5)-(line 175,col 72)",
            "(line 176,col 5)-(line 176,col 66)",
            "(line 177,col 5)-(line 177,col 66)",
            "(line 178,col 5)-(line 178,col 65)",
            "(line 179,col 5)-(line 180,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testSwitches()",
        "snippet": "  public void testSwitches() {\n    assertLiveBeforeX(\"var a,b;X:switch(a){}\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:switch(b){case(a):break;}\", \"a\");\n    assertLiveBeforeX(\"var a,b;X:switch(b){case(b):case(a):break;}\", \"a\");\n    assertNotLiveBeforeX(\n        \"var a,b;X:switch(b){case 1:a=1;break;default:a=2;break};a()\", \"a\");\n\n    assertLiveBeforeX(\"var a,b;X:switch(b){default:a();break;}\", \"a\");\n  }\n",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 52)",
            "(line 185,col 5)-(line 185,col 66)",
            "(line 186,col 5)-(line 186,col 74)",
            "(line 187,col 5)-(line 188,col 76)",
            "(line 190,col 5)-(line 190,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testAssignAndReadInCondition()",
        "snippet": "  public void testAssignAndReadInCondition() {\n    // BUG #1358904\n    // Technically, this isn't exactly true....but we haven't model control flow\n    // within an instruction.\n    assertLiveBeforeX(\"var a, b; X: if ((a = this) && (b = a)) {}\", \"a\");\n    assertNotLiveBeforeX(\"var a, b; X: a = 1, b = 1;\", \"a\");\n    assertNotLiveBeforeX(\"var a; X: a = 1, a = 1;\", \"a\");\n  }\n",
        "begin_line": 193,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 73)",
            "(line 198,col 5)-(line 198,col 60)",
            "(line 199,col 5)-(line 199,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testParam()",
        "snippet": "  public void testParam() {\n    // Unused parameter should not be live.\n    assertNotLiveAfterX(\"var a;X:a()\", \"param1\");\n    assertLiveBeforeX(\"var a;X:a(param1)\", \"param1\");\n    assertNotLiveAfterX(\"var a;X:a();a(param2)\", \"param1\");\n  }\n",
        "begin_line": 202,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 49)",
            "(line 205,col 5)-(line 205,col 53)",
            "(line 206,col 5)-(line 206,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testExpressionInForIn()",
        "snippet": "  public void testExpressionInForIn() {\n    assertLiveBeforeX(\"var a = [0]; X:for (a[1] in foo) { }\", \"a\");\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testArgumentsArray()",
        "snippet": "  public void testArgumentsArray() {\n    // Check that use of arguments forces the parameters into the\n    // escaped set.\n    assertEscaped(\"arguments[0]\", \"param1\");\n    assertEscaped(\"arguments[0]\", \"param2\");\n    assertEscaped(\"var args = arguments\", \"param1\");\n    assertEscaped(\"var args = arguments\", \"param2\");\n    assertNotEscaped(\"arguments = []\", \"param1\");\n    assertNotEscaped(\"arguments = []\", \"param2\");\n    assertEscaped(\"arguments[0] = 1\", \"param1\");\n    assertEscaped(\"arguments[0] = 1\", \"param2\");\n    assertEscaped(\"arguments[arguments[0]] = 1\", \"param1\");\n    assertEscaped(\"arguments[arguments[0]] = 1\", \"param2\");\n  }\n",
        "begin_line": 213,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 44)",
            "(line 217,col 5)-(line 217,col 44)",
            "(line 218,col 5)-(line 218,col 52)",
            "(line 219,col 5)-(line 219,col 52)",
            "(line 220,col 5)-(line 220,col 49)",
            "(line 221,col 5)-(line 221,col 49)",
            "(line 222,col 5)-(line 222,col 48)",
            "(line 223,col 5)-(line 223,col 48)",
            "(line 224,col 5)-(line 224,col 59)",
            "(line 225,col 5)-(line 225,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testTryCatchFinally()",
        "snippet": "  public void testTryCatchFinally() {\n    assertLiveAfterX(\"var a; try {X:a=1} finally {a}\", \"a\");\n    assertLiveAfterX(\"var a; try {a()} catch(e) {X:a=1} finally {a}\", \"a\");\n    // Because the outer catch doesn't catch any exceptions at all, the read of\n    // \"a\" within the catch block should not make \"a\" live.\n    assertNotLiveAfterX(\"var a = 1; try {\" +\n        \"try {a()} catch(e) {X:1} } catch(E) {a}\", \"a\");\n    assertLiveAfterX(\"var a; while(1) { try {X:a=1;break} finally {a}}\", \"a\");\n  }\n",
        "begin_line": 228,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 60)",
            "(line 230,col 5)-(line 230,col 75)",
            "(line 233,col 5)-(line 234,col 56)",
            "(line 235,col 5)-(line 235,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testExceptionThrowingAssignments()",
        "snippet": "  public void testExceptionThrowingAssignments() {\n    assertLiveBeforeX(\"try{var a; X:a=foo();a} catch(e) {e()}\", \"a\");\n    assertLiveBeforeX(\"try{X:var a=foo();a} catch(e) {e()}\", \"a\");\n    assertLiveBeforeX(\"try{X:var a=foo()} catch(e) {e(a)}\", \"a\");\n  }\n",
        "begin_line": 238,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 69)",
            "(line 240,col 5)-(line 240,col 66)",
            "(line 241,col 5)-(line 241,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testInnerFunctions()",
        "snippet": "  public void testInnerFunctions() {\n    assertLiveBeforeX(\"function a() {}; X: a()\", \"a\");\n    assertNotLiveBeforeX(\"X: function a() {}\", \"a\");\n    assertLiveBeforeX(\"a = function(){}; function a() {}; X: a()\", \"a\");\n    // NOTE: function a() {} has no CFG node representation since it is not\n    // part of the control execution.\n    assertLiveAfterX(\"X: a = function(){}; function a() {}; a()\", \"a\");\n    assertNotLiveBeforeX(\"X: a = function(){}; function a() {}; a()\", \"a\");\n  }\n",
        "begin_line": 244,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 54)",
            "(line 246,col 5)-(line 246,col 52)",
            "(line 247,col 5)-(line 247,col 72)",
            "(line 250,col 5)-(line 250,col 71)",
            "(line 251,col 5)-(line 251,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testEscaped()",
        "snippet": "  public void testEscaped() {\n    assertEscaped(\"var a;function b(){a()}\", \"a\");\n    assertEscaped(\"var a;function b(){param1()}\", \"param1\");\n    assertEscaped(\"var a;function b(){function c(){a()}}\", \"a\");\n    assertEscaped(\"var a;function b(){param1.x = function() {a()}}\", \"a\");\n    assertEscaped(\"try{} catch(e){}\", \"e\");\n    assertNotEscaped(\"var a;function b(){var c; c()}\", \"c\");\n    assertNotEscaped(\"var a;function f(){function b(){var c;c()}}\", \"c\");\n    assertNotEscaped(\"var a;function b(){};a()\", \"a\");\n    assertNotEscaped(\"var a;function f(){function b(){}}a()\", \"a\");\n    assertNotEscaped(\"var a;function b(){var a;a()};a()\", \"a\");\n\n    // Escaped by exporting.\n    assertEscaped(\"var _x\", \"_x\");\n  }\n",
        "begin_line": 254,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 50)",
            "(line 256,col 5)-(line 256,col 60)",
            "(line 257,col 5)-(line 257,col 64)",
            "(line 258,col 5)-(line 258,col 74)",
            "(line 259,col 5)-(line 259,col 43)",
            "(line 260,col 5)-(line 260,col 60)",
            "(line 261,col 5)-(line 261,col 73)",
            "(line 262,col 5)-(line 262,col 54)",
            "(line 263,col 5)-(line 263,col 67)",
            "(line 264,col 5)-(line 264,col 63)",
            "(line 267,col 5)-(line 267,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testEscapedLiveness()",
        "snippet": "  public void testEscapedLiveness() {\n    assertNotLiveBeforeX(\"var a;X:a();function b(){a()}\", \"a\");\n  }\n",
        "begin_line": 270,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.testBug1449316()",
        "snippet": "  public void testBug1449316() {\n    assertLiveBeforeX(\"try {var x=[]; X:var y=x[0]} finally {foo()}\", \"x\");\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.assertLiveBeforeX(java.lang.String, java.lang.String)",
        "snippet": "  private void assertLiveBeforeX(String src, String var) {\n    FlowState<LiveVariablesAnalysis.LiveVariableLattice> state =\n        getFlowStateAtX(src);\n    assertNotNull(src + \" should contain a label 'X:'\", state);\n    assertTrue(\"Variable\" + var + \" should be live before X\", state.getIn()\n        .isLive(liveness.getVarIndex(var)));\n  }\n",
        "begin_line": 278,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 280,col 29)",
            "(line 281,col 5)-(line 281,col 63)",
            "(line 282,col 5)-(line 283,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.assertLiveAfterX(java.lang.String, java.lang.String)",
        "snippet": "  private void assertLiveAfterX(String src, String var) {\n    FlowState<LiveVariablesAnalysis.LiveVariableLattice> state =\n        getFlowStateAtX(src);\n    assertTrue(\"Label X should be in the input program.\", state != null);\n    assertTrue(\"Variable\" + var + \" should be live after X\", state.getOut()\n        .isLive(liveness.getVarIndex(var)));\n  }\n",
        "begin_line": 286,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 288,col 29)",
            "(line 289,col 5)-(line 289,col 73)",
            "(line 290,col 5)-(line 291,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.assertNotLiveAfterX(java.lang.String, java.lang.String)",
        "snippet": "  private void assertNotLiveAfterX(String src, String var) {\n    FlowState<LiveVariablesAnalysis.LiveVariableLattice> state =\n        getFlowStateAtX(src);\n    assertTrue(\"Label X should be in the input program.\", state != null);\n    assertTrue(\"Variable\" + var + \" should not be live after X\", !state\n        .getOut().isLive(liveness.getVarIndex(var)));\n  }\n",
        "begin_line": 294,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 296,col 29)",
            "(line 297,col 5)-(line 297,col 73)",
            "(line 298,col 5)-(line 299,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.assertNotLiveBeforeX(java.lang.String, java.lang.String)",
        "snippet": "  private void assertNotLiveBeforeX(String src, String var) {\n    FlowState<LiveVariablesAnalysis.LiveVariableLattice> state =\n        getFlowStateAtX(src);\n    assertTrue(\"Label X should be in the input program.\", state != null);\n    assertTrue(\"Variable\" + var + \" should not be live before X\", !state\n        .getIn().isLive(liveness.getVarIndex(var)));\n  }\n",
        "begin_line": 302,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 304,col 29)",
            "(line 305,col 5)-(line 305,col 73)",
            "(line 306,col 5)-(line 307,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.getFlowStateAtX(java.lang.String)",
        "snippet": "  private FlowState<LiveVariablesAnalysis.LiveVariableLattice> getFlowStateAtX(\n      String src) {\n    liveness = computeLiveness(src);\n    return getFlowStateAtX(liveness.getCfg().getEntry().getValue(), liveness\n        .getCfg());\n  }\n",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 312,col 36)",
            "(line 313,col 5)-(line 314,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.getFlowStateAtX(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>)",
        "snippet": "  private FlowState<LiveVariablesAnalysis.LiveVariableLattice> getFlowStateAtX(\n      Node node, ControlFlowGraph<Node> cfg) {\n    if (node.getType() == Token.LABEL) {\n      if (node.getFirstChild().getString().equals(\"X\")) {\n        return cfg.getNode(node.getLastChild()).getAnnotation();\n      }\n    }\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      FlowState<LiveVariablesAnalysis.LiveVariableLattice> state =\n          getFlowStateAtX(c, cfg);\n      if (state != null) {\n        return state;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 317,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 323,col 5)",
            "(line 324,col 5)-(line 330,col 5)",
            "(line 331,col 5)-(line 331,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.assertEscaped(java.lang.String, java.lang.String)",
        "snippet": "  private static void assertEscaped(String src, String name) {\n    for (Var var : computeLiveness(src).getEscapedLocals()) {\n      if (var.name.equals(name)) {\n        return;\n      }\n    }\n    fail(\"Variable \" + name + \" should be in the escaped local list.\");\n  }\n",
        "begin_line": 334,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 339,col 5)",
            "(line 340,col 5)-(line 340,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.assertNotEscaped(java.lang.String, java.lang.String)",
        "snippet": "  private static void assertNotEscaped(String src, String name) {\n    for (Var var : computeLiveness(src).getEscapedLocals()) {\n      assertFalse(var.name.equals(name));\n    }\n  }\n",
        "begin_line": 343,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 344,col 5)-(line 346,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.LiveVariableAnalysisTest.computeLiveness(java.lang.String)",
        "snippet": "  private static LiveVariablesAnalysis computeLiveness(String src) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    compiler.initOptions(options);\n    src = \"function _FUNCTION(param1, param2){\" + src + \"}\";\n    Node n = compiler.parseTestCode(src).removeFirstChild();\n    Node script = new Node(Token.SCRIPT, n);\n    script.setInputId(new InputId(\"test\"));\n    assertEquals(0, compiler.getErrorCount());\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(\n        n, new Scope(script, compiler));\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n    cfa.process(null, n);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n    LiveVariablesAnalysis analysis =\n        new LiveVariablesAnalysis(cfg, scope, compiler);\n    analysis.analyze();\n    return analysis;\n  }\n",
        "begin_line": 349,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 39)",
            "(line 351,col 5)-(line 351,col 52)",
            "(line 352,col 5)-(line 352,col 62)",
            "(line 353,col 5)-(line 353,col 34)",
            "(line 354,col 5)-(line 354,col 60)",
            "(line 355,col 5)-(line 355,col 60)",
            "(line 356,col 5)-(line 356,col 44)",
            "(line 357,col 5)-(line 357,col 43)",
            "(line 358,col 5)-(line 358,col 46)",
            "(line 359,col 5)-(line 360,col 40)",
            "(line 361,col 5)-(line 361,col 77)",
            "(line 362,col 5)-(line 362,col 25)",
            "(line 363,col 5)-(line 363,col 46)",
            "(line 364,col 5)-(line 365,col 56)",
            "(line 366,col 5)-(line 366,col 23)",
            "(line 367,col 5)-(line 367,col 20)"
        ]
    }
]