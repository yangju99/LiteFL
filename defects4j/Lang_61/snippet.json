[
    {
        "name": "StrBuilder.deleteAll#1183",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteAll(java.lang.String)",
        "snippet": "    public StrBuilder deleteAll(String str) {\n        int len = (str == null ? 0 : str.length());\n        if (len > 0) {\n            int index = indexOf(str, 0);\n            while (index >= 0) {\n                deleteImpl(index, index + len, len);\n                index = indexOf(str, index);\n            }\n        }\n        return this;\n    }\n",
        "begin_line": 1183,
        "end_line": 1193,
        "comment": "\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrBuilder.deleteFirst#1201",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteFirst(java.lang.String)",
        "snippet": "    public StrBuilder deleteFirst(String str) {\n        int len = (str == null ? 0 : str.length());\n        if (len > 0) {\n            int index = indexOf(str, 0);\n            if (index >= 0) {\n                deleteImpl(index, index + len, len);\n            }\n        }\n        return this;\n    }\n",
        "begin_line": 1201,
        "end_line": 1210,
        "comment": "\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrBuilder.indexOf#1746",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(java.lang.String)",
        "snippet": "    public int indexOf(String str) {\n        return indexOf(str, 0);\n    }\n",
        "begin_line": 1746,
        "end_line": 1748,
        "comment": "\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrBuilder.indexOf#1760",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(java.lang.String, int)",
        "snippet": "    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        int len = thisBuf.length - strLen;\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }\n",
        "begin_line": 1760,
        "end_line": 1787,
        "comment": "\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrBuilder.deleteImpl#1113",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteImpl(int, int, int)",
        "snippet": "    private void deleteImpl(int startIndex, int endIndex, int len) {\n        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n        size -= len;\n    }\n",
        "begin_line": 1113,
        "end_line": 1116,
        "comment": "\n     * Internal method to delete a range without validation.\n     *\n     * @param startIndex  the start index, must be valid\n     * @param endIndex  the end index (exclusive), must be valid\n     * @param len  the length, must be valid\n     * @throws IndexOutOfBoundsException if any index is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3651
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrBuilder.StrBuilder#120",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilder(java.lang.String)",
        "snippet": "    public StrBuilder(String str) {\n        super();\n        if (str == null) {\n            buffer = new char[CAPACITY];\n        } else {\n            buffer = new char[str.length() + CAPACITY];\n            append(str);\n        }\n    }\n",
        "begin_line": 120,
        "end_line": 128,
        "comment": "\n     * Constructor that creates a builder from the string, allocating\n     * 32 extra characters for growth.\n     *\n     * @param str  the string to copy, null treated as blank string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrBuilder.append#468",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(java.lang.String)",
        "snippet": "    public StrBuilder append(String str) {\n        if (str == null) {\n            return appendNull();\n        }\n        int strLen = str.length();\n        if (strLen > 0) {\n            int len = length();\n            ensureCapacity(len + strLen);\n            str.getChars(0, strLen, buffer, len);\n            size += strLen;\n        }\n        return this;\n    }\n",
        "begin_line": 468,
        "end_line": 480,
        "comment": "\n     * Appends a string to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrMatcher.TrimMatcher#388",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.TrimMatcher.TrimMatcher()",
        "snippet": "        TrimMatcher() {\n            super();\n        }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "\n         * Constructs a new instance of <code>TrimMatcher</code>.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrMatcher.NoMatcher#361",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.NoMatcher.NoMatcher()",
        "snippet": "        NoMatcher() {\n            super();\n        }\n",
        "begin_line": 361,
        "end_line": 363,
        "comment": "\n         * Constructs a new instance of <code>NoMatcher</code>.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrMatcher.CharSetMatcher#259",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])",
        "snippet": "        CharSetMatcher(char chars[]) {\n            super();\n            this.chars = (char[]) chars.clone();\n            Arrays.sort(this.chars);\n        }\n",
        "begin_line": 259,
        "end_line": 263,
        "comment": "\n         * Constructor that creates a matcher from a character array.\n         *\n         * @param chars  the characters to match, must not be null\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrMatcher.CharMatcher#292",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.CharMatcher.CharMatcher(char)",
        "snippet": "        CharMatcher(char ch) {\n            super();\n            this.ch = ch;\n        }\n",
        "begin_line": 292,
        "end_line": 295,
        "comment": "\n         * Constructor that creates a matcher that matches a single character.\n         *\n         * @param ch  the character to match\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrMatcher.StrMatcher#215",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.StrMatcher()",
        "snippet": "    protected StrMatcher() {\n        super();\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrBuilder.length#181",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.length()",
        "snippet": "    public int length() {\n        return size;\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Gets the length of the string builder.\n     *\n     * @return the length\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1081
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrBuilder.ensureCapacity#227",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.ensureCapacity(int)",
        "snippet": "    public StrBuilder ensureCapacity(int capacity) {\n        if (capacity > buffer.length) {\n            char[] old = buffer;\n            buffer = new char[capacity];\n            System.arraycopy(old, 0, buffer, 0, size);\n        }\n        return this;\n    }\n",
        "begin_line": 227,
        "end_line": 234,
        "comment": "\n     * Checks the capacity and ensures that it is at least the size specified.\n     *\n     * @param capacity  the capacity to ensure\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1081
        },
        "num_failing_tests": 2
    }
]