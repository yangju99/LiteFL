[
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testLongly()",
        "snippet": "    public void testLongly() throws Exception {\n        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n        double[] rData = new double[] {\n                1.000000000000000, 0.9708985250610560, 0.9835516111796693, 0.5024980838759942,\n                0.4573073999764817, 0.960390571594376, 0.9713294591921188,\n                0.970898525061056, 1.0000000000000000, 0.9915891780247822, 0.6206333925590966,\n                0.4647441876006747, 0.979163432977498, 0.9911491900672053,\n                0.983551611179669, 0.9915891780247822, 1.0000000000000000, 0.6042609398895580,\n                0.4464367918926265, 0.991090069458478, 0.9952734837647849,\n                0.502498083875994, 0.6206333925590966, 0.6042609398895580, 1.0000000000000000,\n                -0.1774206295018783, 0.686551516365312, 0.6682566045621746,\n                0.457307399976482, 0.4647441876006747, 0.4464367918926265, -0.1774206295018783,\n                1.0000000000000000, 0.364416267189032, 0.4172451498349454,\n                0.960390571594376, 0.9791634329774981, 0.9910900694584777, 0.6865515163653120,\n                0.3644162671890320, 1.000000000000000, 0.9939528462329257,\n                0.971329459192119, 0.9911491900672053, 0.9952734837647849, 0.6682566045621746,\n                0.4172451498349454, 0.993952846232926, 1.0000000000000000\n        };\n        TestUtils.assertEquals(\"correlation matrix\", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15);\n\n        double[] rPvalues = new double[] {\n                4.38904690369668e-10,\n                8.36353208910623e-12, 7.8159700933611e-14,\n                0.0472894097790304, 0.01030636128354301, 0.01316878049026582,\n                0.0749178049642416, 0.06971758330341182, 0.0830166169296545, 0.510948586323452,\n                3.693245043123738e-09, 4.327782576751815e-11, 1.167954621905665e-13, 0.00331028281967516, 0.1652293725106684,\n                3.95834476307755e-10, 1.114663916723657e-13, 1.332267629550188e-15, 0.00466039138541463, 0.1078477071581498, 7.771561172376096e-15\n        };\n        RealMatrix rPMatrix = createLowerTriangularRealMatrix(rPvalues, 7);\n        fillUpper(rPMatrix, 0d);\n        TestUtils.assertEquals(\"correlation p values\", rPMatrix, corrInstance.getCorrelationPValues(), 10E-15);\n    }\n",
        "begin_line": 102,
        "end_line": 135,
        "comment": "\n     * Test Longley dataset against R.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 65)",
            "(line 104,col 9)-(line 104,col 75)",
            "(line 105,col 9)-(line 105,col 75)",
            "(line 106,col 9)-(line 121,col 10)",
            "(line 122,col 9)-(line 122,col 111)",
            "(line 124,col 9)-(line 131,col 10)",
            "(line 132,col 9)-(line 132,col 75)",
            "(line 133,col 9)-(line 133,col 32)",
            "(line 134,col 9)-(line 134,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testSwissFertility()",
        "snippet": "    public void testSwissFertility() throws Exception {\n         RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n         PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n         RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n         double[] rData = new double[] {\n               1.0000000000000000, 0.3530791836199747, -0.6458827064572875, -0.6637888570350691,  0.4636847006517939,\n                 0.3530791836199747, 1.0000000000000000,-0.6865422086171366, -0.6395225189483201, 0.4010950530487398,\n                -0.6458827064572875, -0.6865422086171366, 1.0000000000000000, 0.6984152962884830, -0.5727418060641666,\n                -0.6637888570350691, -0.6395225189483201, 0.6984152962884830, 1.0000000000000000, -0.1538589170909148,\n                 0.4636847006517939, 0.4010950530487398, -0.5727418060641666, -0.1538589170909148, 1.0000000000000000\n         };\n         TestUtils.assertEquals(\"correlation matrix\", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15);\n\n         double[] rPvalues = new double[] {\n                 0.01491720061472623,\n                 9.45043734069043e-07, 9.95151527133974e-08,\n                 3.658616965962355e-07, 1.304590105694471e-06, 4.811397236181847e-08,\n                 0.001028523190118147, 0.005204433539191644, 2.588307925380906e-05, 0.301807756132683\n         };\n         RealMatrix rPMatrix = createLowerTriangularRealMatrix(rPvalues, 5);\n         fillUpper(rPMatrix, 0d);\n         TestUtils.assertEquals(\"correlation p values\", rPMatrix, corrInstance.getCorrelationPValues(), 10E-15);\n    }\n",
        "begin_line": 140,
        "end_line": 162,
        "comment": "\n     * Test R Swiss fertility dataset against R.\n     ",
        "child_ranges": [
            "(line 141,col 10)-(line 141,col 64)",
            "(line 142,col 10)-(line 142,col 76)",
            "(line 143,col 10)-(line 143,col 76)",
            "(line 144,col 10)-(line 150,col 11)",
            "(line 151,col 10)-(line 151,col 112)",
            "(line 153,col 10)-(line 158,col 11)",
            "(line 159,col 10)-(line 159,col 76)",
            "(line 160,col 10)-(line 160,col 33)",
            "(line 161,col 10)-(line 161,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero()",
        "snippet": "    public void testPValueNearZero() throws Exception {\n        /*\n         * Create a dataset that has r -> 1, p -> 0 as dimension increases.\n         * Prior to the fix for MATH-371, p vanished for dimension >= 14.\n         * Post fix, p-values diminish smoothly, vanishing at dimension = 127.\n         * Tested value is ~1E-303.\n         */\n        int dimension = 120; \n        double[][] data = new double[dimension][2];\n        for (int i = 0; i < dimension; i++) {\n            data[i][0] = i;\n            data[i][1] = i + 1/((double)i + 1);\n        }\n        PearsonsCorrelation corrInstance = new PearsonsCorrelation(data);\n        assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);\n    }\n",
        "begin_line": 167,
        "end_line": 182,
        "comment": "\n     * Test p-value near 0. JIRA: MATH-371\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 28)",
            "(line 175,col 9)-(line 175,col 51)",
            "(line 176,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 73)",
            "(line 181,col 9)-(line 181,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testConstant()",
        "snippet": "    public void testConstant() {\n        double[] noVariance = new double[] {1, 1, 1, 1};\n        double[] values = new double[] {1, 2, 3, 4};\n        assertTrue(Double.isNaN(new PearsonsCorrelation().correlation(noVariance, values)));\n    }\n",
        "begin_line": 188,
        "end_line": 192,
        "comment": "\n     * Constant column\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 56)",
            "(line 190,col 9)-(line 190,col 52)",
            "(line 191,col 9)-(line 191,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testInsufficientData()",
        "snippet": "    public void testInsufficientData() {\n        double[] one = new double[] {1};\n        double[] two = new double[] {2};\n        try {\n            new PearsonsCorrelation().correlation(one, two);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // Expected\n        }\n        RealMatrix matrix = new BlockRealMatrix(new double[][] {{0},{1}});\n        try {\n            new PearsonsCorrelation(matrix);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // Expected\n        }\n    }\n",
        "begin_line": 199,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 40)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 202,col 9)-(line 207,col 9)",
            "(line 208,col 9)-(line 208,col 74)",
            "(line 209,col 9)-(line 214,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testStdErrorConsistency()",
        "snippet": "    public void testStdErrorConsistency() throws Exception {\n        TDistribution tDistribution = new TDistributionImpl(45);\n        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n        RealMatrix rValues = corrInstance.getCorrelationMatrix();\n        RealMatrix pValues = corrInstance.getCorrelationPValues();\n        RealMatrix stdErrors = corrInstance.getCorrelationStandardErrors();\n        for (int i = 0; i < 5; i++) {\n            for (int j = 0; j < i; j++) {\n                double t = Math.abs(rValues.getEntry(i, j)) / stdErrors.getEntry(i, j);\n                double p = 2 * (1 - tDistribution.cumulativeProbability(t));\n                assertEquals(p, pValues.getEntry(i, j), 10E-15);\n            }\n        }\n    }\n",
        "begin_line": 221,
        "end_line": 235,
        "comment": "\n     * Verify that direct t-tests using standard error estimates are consistent\n     * with reported p-values\n     ",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 64)",
            "(line 223,col 9)-(line 223,col 63)",
            "(line 224,col 9)-(line 224,col 75)",
            "(line 225,col 9)-(line 225,col 65)",
            "(line 226,col 9)-(line 226,col 66)",
            "(line 227,col 9)-(line 227,col 75)",
            "(line 228,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testCovarianceConsistency()",
        "snippet": "    public void testCovarianceConsistency() throws Exception {\n        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n        Covariance covInstance = new Covariance(matrix);\n        PearsonsCorrelation corrFromCovInstance = new PearsonsCorrelation(covInstance);\n        TestUtils.assertEquals(\"correlation values\", corrInstance.getCorrelationMatrix(),\n                corrFromCovInstance.getCorrelationMatrix(), 10E-15);\n        TestUtils.assertEquals(\"p values\", corrInstance.getCorrelationPValues(),\n                corrFromCovInstance.getCorrelationPValues(), 10E-15);\n        TestUtils.assertEquals(\"standard errors\", corrInstance.getCorrelationStandardErrors(),\n                corrFromCovInstance.getCorrelationStandardErrors(), 10E-15);\n\n        PearsonsCorrelation corrFromCovInstance2 =\n            new PearsonsCorrelation(covInstance.getCovarianceMatrix(), 16);\n        TestUtils.assertEquals(\"correlation values\", corrInstance.getCorrelationMatrix(),\n                corrFromCovInstance2.getCorrelationMatrix(), 10E-15);\n        TestUtils.assertEquals(\"p values\", corrInstance.getCorrelationPValues(),\n                corrFromCovInstance2.getCorrelationPValues(), 10E-15);\n        TestUtils.assertEquals(\"standard errors\", corrInstance.getCorrelationStandardErrors(),\n                corrFromCovInstance2.getCorrelationStandardErrors(), 10E-15);\n    }\n",
        "begin_line": 241,
        "end_line": 261,
        "comment": "\n     * Verify that creating correlation from covariance gives same results as\n     * direct computation from the original matrix\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 65)",
            "(line 243,col 9)-(line 243,col 75)",
            "(line 244,col 9)-(line 244,col 56)",
            "(line 245,col 9)-(line 245,col 87)",
            "(line 246,col 9)-(line 247,col 68)",
            "(line 248,col 9)-(line 249,col 69)",
            "(line 250,col 9)-(line 251,col 76)",
            "(line 253,col 9)-(line 254,col 75)",
            "(line 255,col 9)-(line 256,col 69)",
            "(line 257,col 9)-(line 258,col 70)",
            "(line 259,col 9)-(line 260,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testConsistency()",
        "snippet": "    public void testConsistency() {\n        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n        double[][] data = matrix.getData();\n        double[] x = matrix.getColumn(0);\n        double[] y = matrix.getColumn(1);\n        assertEquals(new PearsonsCorrelation().correlation(x, y),\n                corrInstance.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE);\n        TestUtils.assertEquals(\"Correlation matrix\", corrInstance.getCorrelationMatrix(),\n                new PearsonsCorrelation().computeCorrelationMatrix(data), Double.MIN_VALUE);\n    }\n",
        "begin_line": 264,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 65)",
            "(line 266,col 9)-(line 266,col 75)",
            "(line 267,col 9)-(line 267,col 43)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 269,col 41)",
            "(line 270,col 9)-(line 271,col 86)",
            "(line 272,col 9)-(line 273,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.createRealMatrix(double[], int, int)",
        "snippet": "    protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {\n        double[][] matrixData = new double[nRows][nCols];\n        int ptr = 0;\n        for (int i = 0; i < nRows; i++) {\n            System.arraycopy(data, ptr, matrixData[i], 0, nCols);\n            ptr += nCols;\n        }\n        return new BlockRealMatrix(matrixData);\n    }\n",
        "begin_line": 276,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 57)",
            "(line 278,col 9)-(line 278,col 20)",
            "(line 279,col 9)-(line 282,col 9)",
            "(line 283,col 9)-(line 283,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.createLowerTriangularRealMatrix(double[], int)",
        "snippet": "    protected RealMatrix createLowerTriangularRealMatrix(double[] data, int dimension) {\n        int ptr = 0;\n        RealMatrix result = new BlockRealMatrix(dimension, dimension);\n        for (int i = 1; i < dimension; i++) {\n            for (int j = 0; j < i; j++) {\n                result.setEntry(i, j, data[ptr]);\n                ptr++;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 286,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 20)",
            "(line 288,col 9)-(line 288,col 70)",
            "(line 289,col 9)-(line 294,col 9)",
            "(line 295,col 9)-(line 295,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
        "child_classes": [
            "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.fillUpper(org.apache.commons.math.linear.RealMatrix, double)",
        "snippet": "    protected void fillUpper(RealMatrix matrix, double diagonalValue) {\n        int dimension = matrix.getColumnDimension();\n        for (int i = 0; i < dimension; i++) {\n            matrix.setEntry(i, i, diagonalValue);\n            for (int j = i+1; j < dimension; j++) {\n                matrix.setEntry(i, j, matrix.getEntry(j, i));\n            }\n        }\n    }\n",
        "begin_line": 298,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 52)",
            "(line 300,col 9)-(line 305,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testLongly()",
        "snippet": "    @Override\n    public void testLongly() throws Exception {\n        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n        SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);\n        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n        double[] rData = new double[] {\n                1, 0.982352941176471, 0.985294117647059, 0.564705882352941, 0.2264705882352941, 0.976470588235294,\n                0.976470588235294, 0.982352941176471, 1, 0.997058823529412, 0.664705882352941, 0.2205882352941176,\n                0.997058823529412, 0.997058823529412, 0.985294117647059, 0.997058823529412, 1, 0.638235294117647,\n                0.2235294117647059, 0.9941176470588236, 0.9941176470588236, 0.564705882352941, 0.664705882352941,\n                0.638235294117647, 1, -0.3411764705882353, 0.685294117647059, 0.685294117647059, 0.2264705882352941,\n                0.2205882352941176, 0.2235294117647059, -0.3411764705882353, 1, 0.2264705882352941, 0.2264705882352941,\n                0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1,\n                0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1\n        };\n        TestUtils.assertEquals(\"Spearman's correlation matrix\", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15);\n    }\n",
        "begin_line": 44,
        "end_line": 60,
        "comment": "\n     * Test Longley dataset against R.\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 65)",
            "(line 47,col 9)-(line 47,col 77)",
            "(line 48,col 9)-(line 48,col 75)",
            "(line 49,col 9)-(line 58,col 10)",
            "(line 59,col 9)-(line 59,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testSwiss()",
        "snippet": "    public void testSwiss() throws Exception {\n        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n        SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);\n        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n        double[] rData = new double[] {\n                1, 0.2426642769364176, -0.660902996352354, -0.443257690360988, 0.4136455623012432,\n                0.2426642769364176, 1, -0.598859938748963, -0.650463814145816, 0.2886878090882852,\n               -0.660902996352354, -0.598859938748963, 1, 0.674603831406147, -0.4750575257171745,\n               -0.443257690360988, -0.650463814145816, 0.674603831406147, 1, -0.1444163088302244,\n                0.4136455623012432, 0.2886878090882852, -0.4750575257171745, -0.1444163088302244, 1\n        };\n        TestUtils.assertEquals(\"Spearman's correlation matrix\", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15);\n    }\n",
        "begin_line": 65,
        "end_line": 77,
        "comment": "\n     * Test R swiss fertility dataset.\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 63)",
            "(line 67,col 9)-(line 67,col 77)",
            "(line 68,col 9)-(line 68,col 75)",
            "(line 69,col 9)-(line 75,col 10)",
            "(line 76,col 9)-(line 76,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testConstant()",
        "snippet": "    @Override\n    public void testConstant() {\n        double[] noVariance = new double[] {1, 1, 1, 1};\n        double[] values = new double[] {1, 2, 3, 4};\n        assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance, values)));\n    }\n",
        "begin_line": 82,
        "end_line": 87,
        "comment": "\n     * Constant column\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 56)",
            "(line 85,col 9)-(line 85,col 52)",
            "(line 86,col 9)-(line 86,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testInsufficientData()",
        "snippet": "    @Override\n    public void testInsufficientData() {\n        double[] one = new double[] {1};\n        double[] two = new double[] {2};\n        try {\n            new SpearmansCorrelation().correlation(one, two);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // Expected\n        }\n        RealMatrix matrix = new BlockRealMatrix(new double[][] {{0},{1}});\n        try {\n            new SpearmansCorrelation(matrix);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // Expected\n        }\n    }\n",
        "begin_line": 92,
        "end_line": 109,
        "comment": "\n     * Insufficient data\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 40)",
            "(line 96,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 74)",
            "(line 103,col 9)-(line 108,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testConsistency()",
        "snippet": "    @Override\n    public void testConsistency() {\n        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n        SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);\n        double[][] data = matrix.getData();\n        double[] x = matrix.getColumn(0);\n        double[] y = matrix.getColumn(1);\n        assertEquals(new SpearmansCorrelation().correlation(x, y),\n                corrInstance.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE);\n        TestUtils.assertEquals(\"Correlation matrix\", corrInstance.getCorrelationMatrix(),\n                new SpearmansCorrelation().computeCorrelationMatrix(data), Double.MIN_VALUE);\n    }\n",
        "begin_line": 111,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 65)",
            "(line 114,col 9)-(line 114,col 77)",
            "(line 115,col 9)-(line 115,col 43)",
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 41)",
            "(line 118,col 9)-(line 119,col 86)",
            "(line 120,col 9)-(line 121,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testStdErrorConsistency()",
        "snippet": "    @Override\n    public void testStdErrorConsistency() throws Exception {}\n",
        "begin_line": 125,
        "end_line": 126,
        "comment": " Not relevant here",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testCovarianceConsistency()",
        "snippet": "    @Override\n    public void testCovarianceConsistency() throws Exception {}\n",
        "begin_line": 127,
        "end_line": 128,
        "comment": "",
        "child_ranges": []
    }
]