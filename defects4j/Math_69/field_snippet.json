[
    {
        "class_name": "org.apache.commons.math.linear.FractionMatrixConverter",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.FractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 673,
        "end_line": 673,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigFractionMatrixConverter",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.BigFractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 717,
        "end_line": 717,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.util.ContinuedFraction",
        "src_path": "src/main/java/org/apache/commons/math/util/ContinuedFraction.java",
        "signature": "org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 10e-9;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Maximum allowed numerical error. "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.GAMMA",
        "snippet": "    public static final double GAMMA = 0.577215664901532860606512090082;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * <a href=\"http://en.wikipedia.org/wiki/Euler-Mascheroni_constant\">Euler-Mascheroni constant</a>\n     * @since 2.0\n     "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 10e-15;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Maximum allowed numerical error. "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.LANCZOS",
        "snippet": "    private static final double[] LANCZOS =\n    {\n        0.99999999999999709182,\n        57.156235665862923517,\n        -59.597960355475491248,\n        14.136097974741747174,\n        -0.49191381609762019978,\n        .33994649984811888699e-4,\n        .46523628927048575665e-4,\n        -.98374475304879564677e-4,\n        .15808870322491248884e-3,\n        -.21026444172410488319e-3,\n        .21743961811521264320e-3,\n        -.16431810653676389022e-3,\n        .84418223983852743293e-4,\n        -.26190838401581408670e-4,\n        .36899182659531622704e-5,\n    };",
        "begin_line": 41,
        "end_line": 58,
        "comment": " Lanczos coefficients "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",
        "snippet": "    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Avoid repeated computation of log of 2 PI in logGamma "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.C_LIMIT",
        "snippet": "    private static final double C_LIMIT = 49;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " C limit. "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.S_LIMIT",
        "snippet": "    private static final double S_LIMIT = 1e-5;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " S limit. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.special.Beta",
        "src_path": "src/main/java/org/apache/commons/math/special/Beta.java",
        "signature": "org.apache.commons.math.special.Beta.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 10e-15;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Maximum allowed numerical error. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3004689053607543335L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.distribution",
        "snippet": "    private TDistribution distribution;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " the distribution used to compute inference statistics. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumX",
        "snippet": "    private double sumX = 0d;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " sum of x values "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumXX",
        "snippet": "    private double sumXX = 0d;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " total variation in x (sum of squared deviations from xbar) "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumY",
        "snippet": "    private double sumY = 0d;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " sum of y values "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumYY",
        "snippet": "    private double sumYY = 0d;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " total variation in y (sum of squared deviations from ybar) "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumXY",
        "snippet": "    private double sumXY = 0d;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " sum of products "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.n",
        "snippet": "    private long n = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " number of observations "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.xbar",
        "snippet": "    private double xbar = 0;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " mean of accumulated x values, used in updating formulas "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.ybar",
        "snippet": "    private double ybar = 0;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " mean of accumulated y values, used in updating formulas "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.lu",
        "snippet": "    @Deprecated\n    private DecompositionSolver lu;",
        "begin_line": 37,
        "end_line": 38,
        "comment": " Cached LU solver.\n     * @deprecated as of release 2.0, since all methods using this are deprecated\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.endRow",
        "snippet": "            private double endRow;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " Last row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.columnSum",
        "snippet": "            private double columnSum;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Sum of absolute values on one column. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.maxColSum",
        "snippet": "            private double maxColSum;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Maximal sum across all columns. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.sum",
        "snippet": "            private double sum;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Sum of squared entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startRow",
        "snippet": "            private int startRow;",
        "begin_line": 323,
        "end_line": 323,
        "comment": " Initial row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startColumn",
        "snippet": "            private int startColumn;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Initial column index. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n    "
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5852615386664158222L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.degreesOfFreedom",
        "snippet": "    private double degreesOfFreedom;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The degrees of freedom"
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.solverAbsoluteAccuracy",
        "snippet": "    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Solver absolute accuracy for inverse cum computation\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlationMatrix",
        "snippet": "    private final RealMatrix correlationMatrix;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " correlation matrix "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation.nObs",
        "snippet": "    private final int nObs;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " number of observations "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE",
        "snippet": "    public static final int BLOCK_SIZE = 52;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Block size. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4991895511313664478L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.blocks",
        "snippet": "    private final double blocks[][];",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Blocks of matrix entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.rows",
        "snippet": "    private final int rows;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Number of rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.columns",
        "snippet": "    private final int columns;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Number of columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.blockRows",
        "snippet": "    private final int blockRows;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Number of block rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.blockColumns",
        "snippet": "    private final int blockColumns;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Number of block columns of the matrix. "
    }
]