[
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.getSolver()",
        "snippet": "    @Override\n    protected UnivariateRealSolver getSolver() {\n        return new BracketingNthOrderBrentSolver();\n    }\n",
        "begin_line": 36,
        "end_line": 39,
        "comment": " {@inheritDoc} ",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.getQuinticEvalCounts()",
        "snippet": "    @Override\n    protected int[] getQuinticEvalCounts() {\n        return new int[] {1, 3, 8, 1, 9, 4, 8, 1, 12, 1, 16};\n    }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": " {@inheritDoc} ",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testInsufficientOrder1()",
        "snippet": "    @Test(expected=NumberIsTooSmallException.class)\n    public void testInsufficientOrder1() {\n        new BracketingNthOrderBrentSolver(1.0e-10, 1);\n    }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testInsufficientOrder2()",
        "snippet": "    @Test(expected=NumberIsTooSmallException.class)\n    public void testInsufficientOrder2() {\n        new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 1);\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testInsufficientOrder3()",
        "snippet": "    @Test(expected=NumberIsTooSmallException.class)\n    public void testInsufficientOrder3() {\n        new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 1.0e-10, 1);\n    }\n",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testConstructorsOK()",
        "snippet": "    @Test\n    public void testConstructorsOK() {\n        Assert.assertEquals(2, new BracketingNthOrderBrentSolver(1.0e-10, 2).getMaximalOrder());\n        Assert.assertEquals(2, new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 2).getMaximalOrder());\n        Assert.assertEquals(2, new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 1.0e-10, 2).getMaximalOrder());\n    }\n",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 96)",
            "(line 65,col 9)-(line 65,col 105)",
            "(line 66,col 9)-(line 66,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testConvergenceOnFunctionAccuracy()",
        "snippet": "    @Test\n    public void testConvergenceOnFunctionAccuracy() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 0.001, 3);\n        QuinticFunction f = new QuinticFunction();\n        double result = solver.solve(20, f, 0.2, 0.9, 0.4, AllowedSolution.BELOW_SIDE);\n        Assert.assertEquals(0, f.value(result), solver.getFunctionValueAccuracy());\n        Assert.assertTrue(f.value(result) <= 0);\n        Assert.assertTrue(result - 0.5 > solver.getAbsoluteAccuracy());\n        result = solver.solve(20, f, -0.9, -0.2,  -0.4, AllowedSolution.ABOVE_SIDE);\n        Assert.assertEquals(0, f.value(result), solver.getFunctionValueAccuracy());\n        Assert.assertTrue(f.value(result) >= 0);\n        Assert.assertTrue(result + 0.5 < -solver.getAbsoluteAccuracy());\n    }\n",
        "begin_line": 69,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 72,col 78)",
            "(line 73,col 9)-(line 73,col 50)",
            "(line 74,col 9)-(line 74,col 87)",
            "(line 75,col 9)-(line 75,col 83)",
            "(line 76,col 9)-(line 76,col 48)",
            "(line 77,col 9)-(line 77,col 71)",
            "(line 78,col 9)-(line 78,col 84)",
            "(line 79,col 9)-(line 79,col 83)",
            "(line 80,col 9)-(line 80,col 48)",
            "(line 81,col 9)-(line 81,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testIssue716()",
        "snippet": "    @Test\n    public void testIssue716() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());\n        Assert.assertTrue(sharpTurn.value(result) >= 0);\n        Assert.assertEquals(-0.5, result, 1.0e-10);\n    }\n",
        "begin_line": 84,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 87,col 80)",
            "(line 88,col 9)-(line 92,col 10)",
            "(line 93,col 9)-(line 93,col 101)",
            "(line 94,col 9)-(line 94,col 91)",
            "(line 95,col 9)-(line 95,col 56)",
            "(line 96,col 9)-(line 96,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-ec0909c7-e172-4631-9caf-252a7c7f11e9.value(double)",
        "snippet": "            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 17)-(line 90,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testFasterThanNewton()",
        "snippet": "    @Test\n    public void testFasterThanNewton() {\n        // the following test functions come from Beny Neta's paper:\n        // \"Several New Methods for solving Equations\"\n        // intern J. Computer Math Vol 23 pp 265-282\n        // available here: http://www.math.nps.navy.mil/~bneta/SeveralNewMethods.PDF\n        // the reference roots have been computed by the Dfp solver to more than\n        // 80 digits and checked with emacs (only the first 20 digits are reproduced here)\n        compare(new TestFunction(0.0, -2, 2) {\n            @Override\n            public double value(double x)      { return FastMath.sin(x) - 0.5 * x; }\n            @Override\n            public double derivative(double x) { return FastMath.cos(x) - 0.5; }\n        });\n        compare(new TestFunction(6.3087771299726890947, -5, 10) {\n            @Override\n            public double value(double x)      { return FastMath.pow(x, 5) + x - 10000; }\n            @Override\n            public double derivative(double x) { return 5 * FastMath.pow(x, 4) + 1; }\n        });\n        compare(new TestFunction(9.6335955628326951924, 0.001, 10) {\n            @Override\n            public double value(double x)      { return FastMath.sqrt(x) - 1 / x - 3; }\n            @Override\n            public double derivative(double x) { return 0.5 / FastMath.sqrt(x) + 1 / (x * x); }\n        });\n        compare(new TestFunction(2.8424389537844470678, -5, 5) {\n            @Override\n            public double value(double x)      { return FastMath.exp(x) + x - 20; }\n            @Override\n            public double derivative(double x) { return FastMath.exp(x) + 1; }\n        });\n        compare(new TestFunction(8.3094326942315717953, 0.001, 10) {\n            @Override\n            public double value(double x)      { return FastMath.log(x) + FastMath.sqrt(x) - 5; }\n            @Override\n            public double derivative(double x) { return 1 / x + 0.5 / FastMath.sqrt(x); }\n        });\n        compare(new TestFunction(1.4655712318767680266, -0.5, 1.5) {\n            @Override\n            public double value(double x)      { return (x - 1) * x * x - 1; }\n            @Override\n            public double derivative(double x) { return (3 * x - 2) * x; }\n        });\n\n    }\n",
        "begin_line": 99,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 112,col 11)",
            "(line 113,col 9)-(line 118,col 11)",
            "(line 119,col 9)-(line 124,col 11)",
            "(line 125,col 9)-(line 130,col 11)",
            "(line 131,col 9)-(line 136,col 11)",
            "(line 137,col 9)-(line 142,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-14f91636-de92-4bf7-b705-4fc4a51cfbf0.value(double)",
        "snippet": "            @Override\n            public double value(double x)      { return FastMath.sin(x) - 0.5 * x; }\n",
        "begin_line": 108,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 109,col 50)-(line 109,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-ab22fa9a-5086-4df7-95a0-9020c49aa116.derivative(double)",
        "snippet": "            @Override\n            public double derivative(double x) { return FastMath.cos(x) - 0.5; }\n",
        "begin_line": 110,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 111,col 50)-(line 111,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-442597dd-442e-48ce-9f50-cc4dfc9f1433.value(double)",
        "snippet": "            @Override\n            public double value(double x)      { return FastMath.pow(x, 5) + x - 10000; }\n",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 115,col 50)-(line 115,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-b8dff303-f9e1-49c2-8e85-b19f5abb2675.derivative(double)",
        "snippet": "            @Override\n            public double derivative(double x) { return 5 * FastMath.pow(x, 4) + 1; }\n",
        "begin_line": 116,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 117,col 50)-(line 117,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-d5da580d-ee99-49cb-bffa-bbfa1f9a8273.value(double)",
        "snippet": "            @Override\n            public double value(double x)      { return FastMath.sqrt(x) - 1 / x - 3; }\n",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 121,col 50)-(line 121,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-ce47e920-a6d9-4d0a-b90e-b362a1ee5c38.derivative(double)",
        "snippet": "            @Override\n            public double derivative(double x) { return 0.5 / FastMath.sqrt(x) + 1 / (x * x); }\n",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 123,col 50)-(line 123,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-0c206bdd-f5af-488a-a20f-ed3f75465d74.value(double)",
        "snippet": "            @Override\n            public double value(double x)      { return FastMath.exp(x) + x - 20; }\n",
        "begin_line": 126,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 127,col 50)-(line 127,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-a63131c0-aed0-4cac-84ef-b6fb577c7e24.derivative(double)",
        "snippet": "            @Override\n            public double derivative(double x) { return FastMath.exp(x) + 1; }\n",
        "begin_line": 128,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 129,col 50)-(line 129,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-a6b432be-861b-419e-97f2-95b60409974f.value(double)",
        "snippet": "            @Override\n            public double value(double x)      { return FastMath.log(x) + FastMath.sqrt(x) - 5; }\n",
        "begin_line": 132,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 133,col 50)-(line 133,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-5192369d-d339-42d0-883b-d6f5aee4bcbb.derivative(double)",
        "snippet": "            @Override\n            public double derivative(double x) { return 1 / x + 0.5 / FastMath.sqrt(x); }\n",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 135,col 50)-(line 135,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-d16d3331-da25-4d4b-9d1f-934fa3d32573.value(double)",
        "snippet": "            @Override\n            public double value(double x)      { return (x - 1) * x * x - 1; }\n",
        "begin_line": 138,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 139,col 50)-(line 139,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.Anonymous-23bd6dd7-ce52-4cad-b965-7adf61240c87.derivative(double)",
        "snippet": "            @Override\n            public double derivative(double x) { return (3 * x - 2) * x; }\n",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 141,col 50)-(line 141,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.compare(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction)",
        "snippet": "    private void compare(TestFunction f) {\n        compare(f, f.getRoot(), f.getMin(), f.getMax());\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.compare(org.apache.commons.math.analysis.DifferentiableUnivariateFunction, double, double, double)",
        "snippet": "    private void compare(DifferentiableUnivariateFunction f,\n                         double root, double min, double max) {\n        NewtonSolver newton = new NewtonSolver(1.0e-12);\n        BracketingNthOrderBrentSolver bracketing =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-12, 1.0e-18, 5);\n        double resultN;\n        try {\n            resultN = newton.solve(100, f, min, max);\n        } catch (TooManyEvaluationsException tmee) {\n            resultN = Double.NaN;\n        }\n        double resultB;\n        try {\n            resultB = bracketing.solve(100, f, min, max);\n        } catch (TooManyEvaluationsException tmee) {\n            resultB = Double.NaN;\n        }\n        Assert.assertEquals(root, resultN, newton.getAbsoluteAccuracy());\n        Assert.assertEquals(root, resultB, bracketing.getAbsoluteAccuracy());\n        Assert.assertTrue(bracketing.getEvaluations() < newton.getEvaluations());\n    }\n",
        "begin_line": 150,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 56)",
            "(line 153,col 9)-(line 154,col 80)",
            "(line 155,col 9)-(line 155,col 23)",
            "(line 156,col 9)-(line 160,col 9)",
            "(line 161,col 9)-(line 161,col 23)",
            "(line 162,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 73)",
            "(line 168,col 9)-(line 168,col 77)",
            "(line 169,col 9)-(line 169,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.TestFunction(double, double, double)",
        "snippet": "        protected TestFunction(final double root, final double min, final double max) {\n            this.root = root;\n            this.min  = min;\n            this.max  = max;\n        }\n",
        "begin_line": 178,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 179,col 13)-(line 179,col 29)",
            "(line 180,col 13)-(line 180,col 28)",
            "(line 181,col 13)-(line 181,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.getRoot()",
        "snippet": "        public double getRoot() {\n            return root;\n        }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 13)-(line 185,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.getMin()",
        "snippet": "        public double getMin() {\n            return min;\n        }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 13)-(line 189,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.getMax()",
        "snippet": "        public double getMax() {\n            return max;\n        }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 193,col 13)-(line 193,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.value(double)",
        "snippet": "        public abstract double value(double x);\n",
        "begin_line": 196,
        "end_line": 196,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.derivative(double)",
        "snippet": "        public abstract double derivative(double x);\n",
        "begin_line": 198,
        "end_line": 198,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.derivative()",
        "snippet": "        public UnivariateFunction derivative() {\n            return new UnivariateFunction() {\n                public double value(double x) {\n                     return derivative(x);\n                }\n            };\n        }\n",
        "begin_line": 200,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 201,col 13)-(line 205,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.TestFunction.Anonymous-ac27f6e6-ad54-48bc-9f7c-610c386a6227.value(double)",
        "snippet": "                public double value(double x) {\n                     return derivative(x);\n                }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 22)-(line 203,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolver()",
        "snippet": "    protected abstract UnivariateRealSolver getSolver();\n",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Returns the solver to use to perform the tests.\n     * @return the solver to use to perform the tests\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getQuinticEvalCounts()",
        "snippet": "    protected abstract int[] getQuinticEvalCounts();\n",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Returns the expected number of evaluations for the\n     * {@link #testQuinticZero} unit test. A value of {@code -1} indicates that\n     * the test should be skipped for that solver.\n     * @return the expected number of evaluations for the\n     * {@link #testQuinticZero} unit test\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSinZero()",
        "snippet": "    @Test\n    public void testSinZero() {\n        // The sinus function is behaved well around the root at pi. The second\n        // order derivative is zero, which means linear approximating methods\n        // still converge quadratically.\n        UnivariateFunction f = new SinFunction();\n        double result;\n        UnivariateRealSolver solver = getSolver();\n\n        result = solver.solve(100, f, 3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Evaluations: \" + solver.getEvaluations());\n        Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());\n        Assert.assertTrue(solver.getEvaluations() <= 6);\n        result = solver.solve(100, f, 1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Evaluations: \" + solver.getEvaluations());\n        Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());\n        Assert.assertTrue(solver.getEvaluations() <= 7);\n    }\n",
        "begin_line": 49,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 22)",
            "(line 56,col 9)-(line 56,col 50)",
            "(line 58,col 9)-(line 58,col 44)",
            "(line 61,col 9)-(line 61,col 79)",
            "(line 62,col 9)-(line 62,col 56)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 66,col 9)-(line 66,col 79)",
            "(line 67,col 9)-(line 67,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testQuinticZero()",
        "snippet": "    @Test\n    public void testQuinticZero() {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // Around the root of 0 the function is well behaved, with a second\n        // derivative of zero a 0.\n        // The other roots are less well to find, in particular the root at 1,\n        // because the function grows fast for x>1.\n        // The function has extrema (first derivative is zero) at 0.27195613\n        // and 0.82221643, intervals containing these values are harder for\n        // the solvers.\n        UnivariateFunction f = new QuinticFunction();\n        double result;\n        UnivariateRealSolver solver = getSolver();\n        double atol = solver.getAbsoluteAccuracy();\n        int[] counts = getQuinticEvalCounts();\n\n        // Tests data: initial bounds, and expected solution, per test case.\n        double[][] testsData = {{-0.2,  0.2,  0.0},\n                                {-0.1,  0.3,  0.0},\n                                {-0.3,  0.45, 0.0},\n                                { 0.3,  0.7,  0.5},\n                                { 0.2,  0.6,  0.5},\n                                { 0.05, 0.95, 0.5},\n                                { 0.85, 1.25, 1.0},\n                                { 0.8,  1.2,  1.0},\n                                { 0.85, 1.75, 1.0},\n                                { 0.55, 1.45, 1.0},\n                                { 0.85, 5.0,  1.0},\n                               };\n        int maxIter = 500;\n\n        for(int i = 0; i < testsData.length; i++) {\n            // Skip test, if needed.\n            if (counts[i] == -1) continue;\n\n            // Compute solution.\n            double[] testData = testsData[i];\n            result = solver.solve(maxIter, f, testData[0], testData[1]);\n            //System.out.println(\n            //    \"Root: \" + result + \" Evaluations: \" + solver.getEvaluations());\n\n            // Check solution.\n            Assert.assertEquals(result, testData[2], atol);\n            Assert.assertTrue(solver.getEvaluations() <= counts[i] + 1);\n        }\n    }\n",
        "begin_line": 70,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 53)",
            "(line 81,col 9)-(line 81,col 22)",
            "(line 82,col 9)-(line 82,col 50)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 46)",
            "(line 87,col 9)-(line 98,col 33)",
            "(line 99,col 9)-(line 99,col 26)",
            "(line 101,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testRootEndpoints()",
        "snippet": "    @Test\n    public void testRootEndpoints() {\n        UnivariateFunction f = new XMinus5Function();\n        UnivariateRealSolver solver = getSolver();\n\n        // End-point is root. This should be a special case in the solver, and\n        // the initial end-point should be returned exactly.\n        double result = solver.solve(100, f, 5.0, 6.0);\n        Assert.assertEquals(5.0, result, 0.0);\n\n        result = solver.solve(100, f, 4.0, 5.0);\n        Assert.assertEquals(5.0, result, 0.0);\n\n        result = solver.solve(100, f, 5.0, 6.0, 5.5);\n        Assert.assertEquals(5.0, result, 0.0);\n\n        result = solver.solve(100, f, 4.0, 5.0, 4.5);\n        Assert.assertEquals(5.0, result, 0.0);\n    }\n",
        "begin_line": 117,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 53)",
            "(line 120,col 9)-(line 120,col 50)",
            "(line 124,col 9)-(line 124,col 55)",
            "(line 125,col 9)-(line 125,col 46)",
            "(line 127,col 9)-(line 127,col 48)",
            "(line 128,col 9)-(line 128,col 46)",
            "(line 130,col 9)-(line 130,col 53)",
            "(line 131,col 9)-(line 131,col 46)",
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testBadEndpoints()",
        "snippet": "    @Test\n    public void testBadEndpoints() {\n        UnivariateFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        try {  // bad interval\n            solver.solve(100, f, 1, -1);\n            Assert.fail(\"Expecting NumberIsTooLargeException - bad interval\");\n        } catch (NumberIsTooLargeException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(100, f, 1, 1.5);\n            Assert.fail(\"Expecting NoBracketingException - non-bracketing\");\n        } catch (NoBracketingException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(100, f, 1, 1.5, 1.2);\n            Assert.fail(\"Expecting NoBracketingException - non-bracketing\");\n        } catch (NoBracketingException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 137,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 49)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 141,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 158,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionLeftSide()",
        "snippet": "    @Test\n    public void testSolutionLeftSide() {\n        UnivariateFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.LEFT_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(solution <= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 161,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 49)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 27)",
            "(line 166,col 9)-(line 166,col 28)",
            "(line 167,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionRightSide()",
        "snippet": "    @Test\n    public void testSolutionRightSide() {\n        UnivariateFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.RIGHT_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(solution >= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 180,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 49)",
            "(line 183,col 9)-(line 183,col 50)",
            "(line 184,col 9)-(line 184,col 27)",
            "(line 185,col 9)-(line 185,col 28)",
            "(line 186,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionBelowSide()",
        "snippet": "    @Test\n    public void testSolutionBelowSide() {\n        UnivariateFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.BELOW_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(f.value(solution) <= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 198,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 49)",
            "(line 201,col 9)-(line 201,col 50)",
            "(line 202,col 9)-(line 202,col 27)",
            "(line 203,col 9)-(line 203,col 28)",
            "(line 204,col 9)-(line 214,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionAboveSide()",
        "snippet": "    @Test\n    public void testSolutionAboveSide() {\n        UnivariateFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.ABOVE_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(f.value(solution) >= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 49)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 221,col 9)-(line 221,col 27)",
            "(line 222,col 9)-(line 222,col 28)",
            "(line 223,col 9)-(line 233,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution)",
        "snippet": "    private double getSolution(UnivariateRealSolver solver, int maxEval, UnivariateFunction f,\n                               double left, double right, AllowedSolution allowedSolution) {\n        try {\n            @SuppressWarnings(\"unchecked\")\n            BracketedUnivariateRealSolver<UnivariateFunction> bracketing =\n            (BracketedUnivariateRealSolver<UnivariateFunction>) solver;\n            return bracketing.solve(100, f, left, right, allowedSolution);\n        } catch (ClassCastException cce) {\n            double baseRoot = solver.solve(maxEval, f, left, right);\n            if ((baseRoot <= left) || (baseRoot >= right)) {\n                // the solution slipped out of interval\n                return Double.NaN;\n            }\n            PegasusSolver bracketing =\n                    new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy(),\n                                      solver.getFunctionValueAccuracy());\n            return UnivariateRealSolverUtils.forceSide(maxEval - solver.getEvaluations(),\n                                                       f, bracketing, baseRoot, left, right,\n                                                       allowedSolution);\n        }\n    }\n",
        "begin_line": 236,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 255,col 9)"
        ]
    }
]