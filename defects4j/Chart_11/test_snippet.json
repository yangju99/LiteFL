[
    {
        "class_name": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.ShapeUtilitiesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ShapeUtilitiesTests.class);\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\r\n     * Returns the tests as a test suite.\r\n     *\r\n     * @return The test suite.\r\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.ShapeUtilitiesTests.ShapeUtilitiesTests(java.lang.String)",
        "snippet": "    public ShapeUtilitiesTests(final String name) {\n        super(name);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Constructs a new set of tests.\r\n     *\r\n     * @param name  the name of the tests.\r\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.ShapeUtilitiesTests.testEqualLine2Ds()",
        "snippet": "    public void testEqualLine2Ds() {\n\n        assertTrue(ShapeUtilities.equal((Line2D) null, (Line2D) null));\n        Line2D l1 = new Line2D.Float(1.0f, 2.0f, 3.0f, 4.0f);\n        Line2D l2 = new Line2D.Float(1.0f, 2.0f, 3.0f, 4.0f);\n        assertTrue(ShapeUtilities.equal(l1, l2));\n\n        l1 = new Line2D.Float(4.0f, 3.0f, 2.0f, 1.0f);\n        assertFalse(ShapeUtilities.equal(l1, l2));\n        l2 = new Line2D.Float(4.0f, 3.0f, 2.0f, 1.0f);\n        assertTrue(ShapeUtilities.equal(l1, l2));\n\n        l1 = new Line2D.Double(4.0f, 3.0f, 2.0f, 1.0f);\n        assertTrue(ShapeUtilities.equal(l1, l2));\n\n    }\n",
        "begin_line": 83,
        "end_line": 98,
        "comment": "\r\n     * Tests the equal() method.\r\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 71)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 61)",
            "(line 88,col 9)-(line 88,col 49)",
            "(line 90,col 9)-(line 90,col 54)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 54)",
            "(line 93,col 9)-(line 93,col 49)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 96,col 9)-(line 96,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.ShapeUtilitiesTests.testEqualShapes()",
        "snippet": "    public void testEqualShapes() {\n\n        // NULL\n        Shape s1 = null;\n        Shape s2 = null;\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // LINE2D\n        s1 = new Line2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Line2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n        assertFalse(s1.equals(s2));\n\n        // RECTANGLE2D\n        s1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n        assertTrue(s1.equals(s2));  // Rectangle2D overrides equals()\n\n        // ELLIPSE2D\n        s1 = new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // ARC2D\n        s1 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // POLYGON\n        Polygon p1 = new Polygon(new int[] {0, 1, 0}, new int[] {1, 0, 1}, 3);\n        Polygon p2 = new Polygon(new int[] {1, 1, 0}, new int[] {1, 0, 1}, 3);\n        s1 = p1;\n        s2 = p2;\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        p2 = new Polygon(new int[] {0, 1, 0}, new int[] {1, 0, 1}, 3);\n        s2 = p2;\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // GENERALPATH\n        GeneralPath g1 = new GeneralPath();\n        g1.moveTo(1.0f, 2.0f);\n        g1.lineTo(3.0f, 4.0f);\n        g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g1.closePath();\n        s1 = g1;\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        GeneralPath g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        s2 = g2;\n        assertTrue(ShapeUtilities.equal(s1, s2));\n        assertFalse(s1.equals(s2));\n\n    }\n",
        "begin_line": 103,
        "end_line": 165,
        "comment": "\r\n     * Some checks for the equal(Shape, Shape) method.\r\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 24)",
            "(line 107,col 9)-(line 107,col 24)",
            "(line 108,col 9)-(line 108,col 49)",
            "(line 111,col 9)-(line 111,col 51)",
            "(line 112,col 9)-(line 112,col 50)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 49)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 118,col 9)-(line 118,col 56)",
            "(line 119,col 9)-(line 119,col 50)",
            "(line 120,col 9)-(line 120,col 56)",
            "(line 121,col 9)-(line 121,col 49)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 54)",
            "(line 126,col 9)-(line 126,col 50)",
            "(line 127,col 9)-(line 127,col 54)",
            "(line 128,col 9)-(line 128,col 49)",
            "(line 131,col 9)-(line 131,col 71)",
            "(line 132,col 9)-(line 132,col 50)",
            "(line 133,col 9)-(line 133,col 71)",
            "(line 134,col 9)-(line 134,col 49)",
            "(line 137,col 9)-(line 137,col 78)",
            "(line 138,col 9)-(line 138,col 78)",
            "(line 139,col 9)-(line 139,col 16)",
            "(line 140,col 9)-(line 140,col 16)",
            "(line 141,col 9)-(line 141,col 50)",
            "(line 142,col 9)-(line 142,col 70)",
            "(line 143,col 9)-(line 143,col 16)",
            "(line 144,col 9)-(line 144,col 49)",
            "(line 147,col 9)-(line 147,col 43)",
            "(line 148,col 9)-(line 148,col 30)",
            "(line 149,col 9)-(line 149,col 30)",
            "(line 150,col 9)-(line 150,col 56)",
            "(line 151,col 9)-(line 151,col 42)",
            "(line 152,col 9)-(line 152,col 23)",
            "(line 153,col 9)-(line 153,col 16)",
            "(line 154,col 9)-(line 154,col 50)",
            "(line 155,col 9)-(line 155,col 43)",
            "(line 156,col 9)-(line 156,col 30)",
            "(line 157,col 9)-(line 157,col 30)",
            "(line 158,col 9)-(line 158,col 56)",
            "(line 159,col 9)-(line 159,col 42)",
            "(line 160,col 9)-(line 160,col 23)",
            "(line 161,col 9)-(line 161,col 16)",
            "(line 162,col 9)-(line 162,col 49)",
            "(line 163,col 9)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.ShapeUtilitiesTests.testIntersects()",
        "snippet": "    public void testIntersects() {\n        final Rectangle2D r1 = new Rectangle2D.Float(0, 0, 100, 100);\n        final Rectangle2D r2 = new Rectangle2D.Float(0, 0, 100, 100);\n        assertTrue(ShapeUtilities.intersects(r1, r2));\n\n        r1.setRect(100, 0, 100, 0);\n        assertTrue(ShapeUtilities.intersects(r1, r2));\n        assertTrue(ShapeUtilities.intersects(r2, r1));\n\n        r1.setRect(0, 0, 0, 0);\n        assertTrue(ShapeUtilities.intersects(r1, r2));\n        assertTrue(ShapeUtilities.intersects(r2, r1));\n\n        r1.setRect(50, 50, 10, 0);\n        assertTrue(ShapeUtilities.intersects(r1, r2));\n        assertTrue(ShapeUtilities.intersects(r2, r1));\n    }\n",
        "begin_line": 170,
        "end_line": 186,
        "comment": "\r\n     * Some checks for the intersects() method,\r\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 69)",
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 173,col 54)",
            "(line 175,col 9)-(line 175,col 35)",
            "(line 176,col 9)-(line 176,col 54)",
            "(line 177,col 9)-(line 177,col 54)",
            "(line 179,col 9)-(line 179,col 31)",
            "(line 180,col 9)-(line 180,col 54)",
            "(line 181,col 9)-(line 181,col 54)",
            "(line 183,col 9)-(line 183,col 34)",
            "(line 184,col 9)-(line 184,col 54)",
            "(line 185,col 9)-(line 185,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "signature": "org.jfree.chart.util.junit.ShapeUtilitiesTests.testEqualGeneralPaths()",
        "snippet": "    public void testEqualGeneralPaths() {\n        GeneralPath g1 = new GeneralPath();\n        g1.moveTo(1.0f, 2.0f);\n        g1.lineTo(3.0f, 4.0f);\n        g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g1.closePath();\n        GeneralPath g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertTrue(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(11.0f, 22.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(33.0f, 44.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(55.0f, 66.0f, 77.0f, 88.0f, 99.0f, 100.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(11.0f, 22.0f, 33.0f, 44.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n    }\n",
        "begin_line": 191,
        "end_line": 246,
        "comment": "\r\n     * Some checks for the equal(GeneralPath, GeneralPath) method.\r\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 193,col 30)",
            "(line 194,col 9)-(line 194,col 30)",
            "(line 195,col 9)-(line 195,col 56)",
            "(line 196,col 9)-(line 196,col 42)",
            "(line 197,col 9)-(line 197,col 23)",
            "(line 198,col 9)-(line 198,col 43)",
            "(line 199,col 9)-(line 199,col 30)",
            "(line 200,col 9)-(line 200,col 30)",
            "(line 201,col 9)-(line 201,col 56)",
            "(line 202,col 9)-(line 202,col 42)",
            "(line 203,col 9)-(line 203,col 23)",
            "(line 204,col 9)-(line 204,col 49)",
            "(line 206,col 9)-(line 206,col 31)",
            "(line 207,col 9)-(line 207,col 32)",
            "(line 208,col 9)-(line 208,col 30)",
            "(line 209,col 9)-(line 209,col 56)",
            "(line 210,col 9)-(line 210,col 42)",
            "(line 211,col 9)-(line 211,col 23)",
            "(line 212,col 9)-(line 212,col 50)",
            "(line 214,col 9)-(line 214,col 31)",
            "(line 215,col 9)-(line 215,col 30)",
            "(line 216,col 9)-(line 216,col 32)",
            "(line 217,col 9)-(line 217,col 56)",
            "(line 218,col 9)-(line 218,col 42)",
            "(line 219,col 9)-(line 219,col 23)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 222,col 9)-(line 222,col 31)",
            "(line 223,col 9)-(line 223,col 30)",
            "(line 224,col 9)-(line 224,col 30)",
            "(line 225,col 9)-(line 225,col 62)",
            "(line 226,col 9)-(line 226,col 42)",
            "(line 227,col 9)-(line 227,col 23)",
            "(line 228,col 9)-(line 228,col 50)",
            "(line 230,col 9)-(line 230,col 31)",
            "(line 231,col 9)-(line 231,col 30)",
            "(line 232,col 9)-(line 232,col 30)",
            "(line 233,col 9)-(line 233,col 56)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 23)",
            "(line 236,col 9)-(line 236,col 50)",
            "(line 238,col 9)-(line 238,col 31)",
            "(line 239,col 9)-(line 239,col 30)",
            "(line 240,col 9)-(line 240,col 30)",
            "(line 241,col 9)-(line 241,col 56)",
            "(line 242,col 9)-(line 242,col 42)",
            "(line 243,col 9)-(line 243,col 30)",
            "(line 244,col 9)-(line 244,col 23)",
            "(line 245,col 9)-(line 245,col 50)"
        ]
    }
]