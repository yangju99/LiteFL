[
    {
        "class_name": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetMean()",
        "snippet": "    @Test\n    public void testGetMean() {\n        final double[] mu = { -1.5, 2 };\n        final double[][] sigma = { { 2, -1.1 },\n                                   { -1.1, 2 } };\n        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n\n        final double[] m = d.getMeans();\n        for (int i = 0; i < m.length; i++) {\n            Assert.assertEquals(mu[i], m[i], 0);\n        }\n    }\n",
        "begin_line": 36,
        "end_line": 47,
        "comment": "\n     * Test the ability of the distribution to report its mean value parameter.\n     ",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 40)",
            "(line 39,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 95)",
            "(line 43,col 9)-(line 43,col 40)",
            "(line 44,col 9)-(line 46,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetCovarianceMatrix()",
        "snippet": "    @Test\n    public void testGetCovarianceMatrix() {\n        final double[] mu = { -1.5, 2 };\n        final double[][] sigma = { { 2, -1.1 },\n                                   { -1.1, 2 } };\n        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n\n        final RealMatrix s = d.getCovariances();\n        final int dim = d.getDimension();\n        for (int i = 0; i < dim; i++) {\n            for (int j = 0; j < dim; j++) {\n                Assert.assertEquals(sigma[i][j], s.getEntry(i, j), 0);\n            }\n        }\n    }\n",
        "begin_line": 52,
        "end_line": 66,
        "comment": "\n     * Test the ability of the distribution to report its covariance matrix parameter.\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 40)",
            "(line 55,col 9)-(line 56,col 49)",
            "(line 57,col 9)-(line 57,col 95)",
            "(line 59,col 9)-(line 59,col 48)",
            "(line 60,col 9)-(line 60,col 41)",
            "(line 61,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testSampling()",
        "snippet": "    @Test\n    public void testSampling() {\n        final double[] mu = { -1.5, 2 };\n        final double[][] sigma = { { 2, -1.1 },\n                                   { -1.1, 2 } };\n        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n        d.reseedRandomGenerator(50);\n\n        final int n = 500000;\n\n        final double[][] samples = d.sample(n);\n        final int dim = d.getDimension();\n        final double[] sampleMeans = new double[dim];\n\n        for (int i = 0; i < samples.length; i++) {\n            for (int j = 0; j < dim; j++) {\n                sampleMeans[j] += samples[i][j];\n            }\n        }\n\n        final double sampledValueTolerance = 1e-2;\n        for (int j = 0; j < dim; j++) {\n            sampleMeans[j] /= samples.length;\n            Assert.assertEquals(mu[j], sampleMeans[j], sampledValueTolerance);\n        }\n\n        final double[][] sampleSigma = new Covariance(samples).getCovarianceMatrix().getData();\n        for (int i = 0; i < dim; i++) {\n            for (int j = 0; j < dim; j++) {\n                Assert.assertEquals(sigma[i][j], sampleSigma[i][j], sampledValueTolerance);\n            }\n        }\n    }\n",
        "begin_line": 71,
        "end_line": 103,
        "comment": "\n     * Test the accuracy of sampling from the distribution.\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 40)",
            "(line 74,col 9)-(line 75,col 49)",
            "(line 76,col 9)-(line 76,col 95)",
            "(line 77,col 9)-(line 77,col 36)",
            "(line 79,col 9)-(line 79,col 29)",
            "(line 81,col 9)-(line 81,col 47)",
            "(line 82,col 9)-(line 82,col 41)",
            "(line 83,col 9)-(line 83,col 53)",
            "(line 85,col 9)-(line 89,col 9)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 95,col 9)",
            "(line 97,col 9)-(line 97,col 95)",
            "(line 98,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testDensities()",
        "snippet": "    @Test\n    public void testDensities() {\n        final double[] mu = { -1.5, 2 };\n        final double[][] sigma = { { 2, -1.1 },\n                                   { -1.1, 2 } };\n        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n\n        final double[][] testValues = { { -1.5, 2 },\n                                        { 4, 4 },\n                                        { 1.5, -2 },\n                                        { 0, 0 } };\n        final double[] densities = new double[testValues.length];\n        for (int i = 0; i < densities.length; i++) {\n            densities[i] = d.density(testValues[i]);\n        }\n\n        // From dmvnorm function in R 2.15 CRAN package Mixtools v0.4.5\n        final double[] correctDensities = { 0.09528357207691344,\n                                            5.80932710124009e-09,\n                                            0.001387448895173267,\n                                            0.03309922090210541 };\n\n        for (int i = 0; i < testValues.length; i++) {\n            Assert.assertEquals(correctDensities[i], densities[i], 1e-16);\n        }\n    }\n",
        "begin_line": 108,
        "end_line": 133,
        "comment": "\n     * Test the accuracy of the distribution when calculating densities.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 40)",
            "(line 111,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 113,col 95)",
            "(line 115,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 65)",
            "(line 120,col 9)-(line 122,col 9)",
            "(line 125,col 9)-(line 128,col 66)",
            "(line 130,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution()",
        "snippet": "    @Test\n    public void testUnivariateDistribution() {\n        final double[] mu = { -1.5 };\n        final double[][] sigma = { { 1 } };\n \n        final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);\n\n        final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);\n        final Random rng = new Random();\n        final int numCases = 100;\n        final double tol = Math.ulp(1d);\n        for (int i = 0; i < numCases; i++) {\n            final double v = rng.nextDouble() * 10 - 5;\n            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);\n        }\n    }\n",
        "begin_line": 138,
        "end_line": 153,
        "comment": "\n     * Test the accuracy of the distribution when calculating densities.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 37)",
            "(line 141,col 9)-(line 141,col 43)",
            "(line 143,col 9)-(line 143,col 99)",
            "(line 145,col 9)-(line 145,col 82)",
            "(line 146,col 9)-(line 146,col 40)",
            "(line 147,col 9)-(line 147,col 33)",
            "(line 148,col 9)-(line 148,col 40)",
            "(line 149,col 9)-(line 152,col 9)"
        ]
    }
]