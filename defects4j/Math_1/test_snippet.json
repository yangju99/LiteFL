[
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.assertFraction(int, int, org.apache.commons.math3.fraction.BigFraction)",
        "snippet": "    private void assertFraction(int expectedNumerator, int expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsInt());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsInt());\n    }\n",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 75)",
            "(line 36,col 9)-(line 36,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.assertFraction(long, long, org.apache.commons.math3.fraction.BigFraction)",
        "snippet": "    private void assertFraction(long expectedNumerator, long expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsLong());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsLong());\n    }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 76)",
            "(line 41,col 9)-(line 41,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertFraction(0, 1, new BigFraction(0, 1));\n        assertFraction(0, 1, new BigFraction(0l, 2l));\n        assertFraction(0, 1, new BigFraction(0, -1));\n        assertFraction(1, 2, new BigFraction(1, 2));\n        assertFraction(1, 2, new BigFraction(2, 4));\n        assertFraction(-1, 2, new BigFraction(-1, 2));\n        assertFraction(-1, 2, new BigFraction(1, -2));\n        assertFraction(-1, 2, new BigFraction(-2, 4));\n        assertFraction(-1, 2, new BigFraction(2, -4));\n        assertFraction(11, 1, new BigFraction(11));\n        assertFraction(11, 1, new BigFraction(11l));\n        assertFraction(11, 1, new BigFraction(new BigInteger(\"11\")));\n\n        assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));\n        assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));\n        assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));\n\n        Assert.assertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0);\n        Assert.assertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0);\n        Assert.assertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0);\n        assertFraction(3602879701896487l, 9007199254740992l, new BigFraction(0.40000000000001));\n        assertFraction(1055531162664967l, 70368744177664l, new BigFraction(15.0000000000001));\n        try {\n            new BigFraction(null, BigInteger.ONE);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException npe) {\n            // expected\n        }\n        try {\n            new BigFraction(BigInteger.ONE, null);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException npe) {\n            // expected\n        }\n        try {\n            new BigFraction(BigInteger.ONE, BigInteger.ZERO);\n            Assert.fail(\"Expecting ZeroException\");\n        } catch (ZeroException npe) {\n            // expected\n        }\n        try {\n            new BigFraction(2.0 * Integer.MAX_VALUE, 1.0e-5, 100000);\n            Assert.fail(\"Expecting FractionConversionException\");\n        } catch (FractionConversionException fce) {\n            // expected\n        }\n    }\n",
        "begin_line": 44,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 52)",
            "(line 47,col 9)-(line 47,col 54)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 49,col 52)",
            "(line 50,col 9)-(line 50,col 52)",
            "(line 51,col 9)-(line 51,col 54)",
            "(line 52,col 9)-(line 52,col 54)",
            "(line 53,col 9)-(line 53,col 54)",
            "(line 54,col 9)-(line 54,col 54)",
            "(line 55,col 9)-(line 55,col 51)",
            "(line 56,col 9)-(line 56,col 52)",
            "(line 57,col 9)-(line 57,col 69)",
            "(line 59,col 9)-(line 59,col 77)",
            "(line 60,col 9)-(line 60,col 77)",
            "(line 61,col 9)-(line 61,col 78)",
            "(line 63,col 9)-(line 63,col 100)",
            "(line 64,col 9)-(line 64,col 100)",
            "(line 65,col 9)-(line 65,col 100)",
            "(line 66,col 9)-(line 66,col 96)",
            "(line 67,col 9)-(line 67,col 94)",
            "(line 68,col 9)-(line 73,col 9)",
            "(line 74,col 9)-(line 79,col 9)",
            "(line 80,col 9)-(line 85,col 9)",
            "(line 86,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testGoldenRatio()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testGoldenRatio() {\n        // the golden ratio is notoriously a difficult number for continuous fraction\n        new BigFraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);\n    }\n",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testDoubleConstructor()",
        "snippet": "    @Test\n    public void testDoubleConstructor() throws ConvergenceException {\n        assertFraction(1, 2, new BigFraction((double) 1 / (double) 2, 1.0e-5, 100));\n        assertFraction(1, 3, new BigFraction((double) 1 / (double) 3, 1.0e-5, 100));\n        assertFraction(2, 3, new BigFraction((double) 2 / (double) 3, 1.0e-5, 100));\n        assertFraction(1, 4, new BigFraction((double) 1 / (double) 4, 1.0e-5, 100));\n        assertFraction(3, 4, new BigFraction((double) 3 / (double) 4, 1.0e-5, 100));\n        assertFraction(1, 5, new BigFraction((double) 1 / (double) 5, 1.0e-5, 100));\n        assertFraction(2, 5, new BigFraction((double) 2 / (double) 5, 1.0e-5, 100));\n        assertFraction(3, 5, new BigFraction((double) 3 / (double) 5, 1.0e-5, 100));\n        assertFraction(4, 5, new BigFraction((double) 4 / (double) 5, 1.0e-5, 100));\n        assertFraction(1, 6, new BigFraction((double) 1 / (double) 6, 1.0e-5, 100));\n        assertFraction(5, 6, new BigFraction((double) 5 / (double) 6, 1.0e-5, 100));\n        assertFraction(1, 7, new BigFraction((double) 1 / (double) 7, 1.0e-5, 100));\n        assertFraction(2, 7, new BigFraction((double) 2 / (double) 7, 1.0e-5, 100));\n        assertFraction(3, 7, new BigFraction((double) 3 / (double) 7, 1.0e-5, 100));\n        assertFraction(4, 7, new BigFraction((double) 4 / (double) 7, 1.0e-5, 100));\n        assertFraction(5, 7, new BigFraction((double) 5 / (double) 7, 1.0e-5, 100));\n        assertFraction(6, 7, new BigFraction((double) 6 / (double) 7, 1.0e-5, 100));\n        assertFraction(1, 8, new BigFraction((double) 1 / (double) 8, 1.0e-5, 100));\n        assertFraction(3, 8, new BigFraction((double) 3 / (double) 8, 1.0e-5, 100));\n        assertFraction(5, 8, new BigFraction((double) 5 / (double) 8, 1.0e-5, 100));\n        assertFraction(7, 8, new BigFraction((double) 7 / (double) 8, 1.0e-5, 100));\n        assertFraction(1, 9, new BigFraction((double) 1 / (double) 9, 1.0e-5, 100));\n        assertFraction(2, 9, new BigFraction((double) 2 / (double) 9, 1.0e-5, 100));\n        assertFraction(4, 9, new BigFraction((double) 4 / (double) 9, 1.0e-5, 100));\n        assertFraction(5, 9, new BigFraction((double) 5 / (double) 9, 1.0e-5, 100));\n        assertFraction(7, 9, new BigFraction((double) 7 / (double) 9, 1.0e-5, 100));\n        assertFraction(8, 9, new BigFraction((double) 8 / (double) 9, 1.0e-5, 100));\n        assertFraction(1, 10, new BigFraction((double) 1 / (double) 10, 1.0e-5, 100));\n        assertFraction(3, 10, new BigFraction((double) 3 / (double) 10, 1.0e-5, 100));\n        assertFraction(7, 10, new BigFraction((double) 7 / (double) 10, 1.0e-5, 100));\n        assertFraction(9, 10, new BigFraction((double) 9 / (double) 10, 1.0e-5, 100));\n        assertFraction(1, 11, new BigFraction((double) 1 / (double) 11, 1.0e-5, 100));\n        assertFraction(2, 11, new BigFraction((double) 2 / (double) 11, 1.0e-5, 100));\n        assertFraction(3, 11, new BigFraction((double) 3 / (double) 11, 1.0e-5, 100));\n        assertFraction(4, 11, new BigFraction((double) 4 / (double) 11, 1.0e-5, 100));\n        assertFraction(5, 11, new BigFraction((double) 5 / (double) 11, 1.0e-5, 100));\n        assertFraction(6, 11, new BigFraction((double) 6 / (double) 11, 1.0e-5, 100));\n        assertFraction(7, 11, new BigFraction((double) 7 / (double) 11, 1.0e-5, 100));\n        assertFraction(8, 11, new BigFraction((double) 8 / (double) 11, 1.0e-5, 100));\n        assertFraction(9, 11, new BigFraction((double) 9 / (double) 11, 1.0e-5, 100));\n        assertFraction(10, 11, new BigFraction((double) 10 / (double) 11, 1.0e-5, 100));\n    }\n",
        "begin_line": 101,
        "end_line": 144,
        "comment": " MATH-179",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 84)",
            "(line 104,col 9)-(line 104,col 84)",
            "(line 105,col 9)-(line 105,col 84)",
            "(line 106,col 9)-(line 106,col 84)",
            "(line 107,col 9)-(line 107,col 84)",
            "(line 108,col 9)-(line 108,col 84)",
            "(line 109,col 9)-(line 109,col 84)",
            "(line 110,col 9)-(line 110,col 84)",
            "(line 111,col 9)-(line 111,col 84)",
            "(line 112,col 9)-(line 112,col 84)",
            "(line 113,col 9)-(line 113,col 84)",
            "(line 114,col 9)-(line 114,col 84)",
            "(line 115,col 9)-(line 115,col 84)",
            "(line 116,col 9)-(line 116,col 84)",
            "(line 117,col 9)-(line 117,col 84)",
            "(line 118,col 9)-(line 118,col 84)",
            "(line 119,col 9)-(line 119,col 84)",
            "(line 120,col 9)-(line 120,col 84)",
            "(line 121,col 9)-(line 121,col 84)",
            "(line 122,col 9)-(line 122,col 84)",
            "(line 123,col 9)-(line 123,col 84)",
            "(line 124,col 9)-(line 124,col 84)",
            "(line 125,col 9)-(line 125,col 84)",
            "(line 126,col 9)-(line 126,col 84)",
            "(line 127,col 9)-(line 127,col 84)",
            "(line 128,col 9)-(line 128,col 84)",
            "(line 129,col 9)-(line 129,col 84)",
            "(line 130,col 9)-(line 130,col 86)",
            "(line 131,col 9)-(line 131,col 86)",
            "(line 132,col 9)-(line 132,col 86)",
            "(line 133,col 9)-(line 133,col 86)",
            "(line 134,col 9)-(line 134,col 86)",
            "(line 135,col 9)-(line 135,col 86)",
            "(line 136,col 9)-(line 136,col 86)",
            "(line 137,col 9)-(line 137,col 86)",
            "(line 138,col 9)-(line 138,col 86)",
            "(line 139,col 9)-(line 139,col 86)",
            "(line 140,col 9)-(line 140,col 86)",
            "(line 141,col 9)-(line 141,col 86)",
            "(line 142,col 9)-(line 142,col 86)",
            "(line 143,col 9)-(line 143,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testDigitLimitConstructor()",
        "snippet": "    @Test\n    public void testDigitLimitConstructor() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 9));\n        assertFraction(2, 5, new BigFraction(0.4, 99));\n        assertFraction(2, 5, new BigFraction(0.4, 999));\n\n        assertFraction(3, 5, new BigFraction(0.6152, 9));\n        assertFraction(8, 13, new BigFraction(0.6152, 99));\n        assertFraction(510, 829, new BigFraction(0.6152, 999));\n        assertFraction(769, 1250, new BigFraction(0.6152, 9999));\n        \n        // MATH-996\n        assertFraction(1, 2, new BigFraction(0.5000000001, 10));\n    }\n",
        "begin_line": 147,
        "end_line": 160,
        "comment": " MATH-181",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 54)",
            "(line 150,col 9)-(line 150,col 55)",
            "(line 151,col 9)-(line 151,col 56)",
            "(line 153,col 9)-(line 153,col 57)",
            "(line 154,col 9)-(line 154,col 59)",
            "(line 155,col 9)-(line 155,col 63)",
            "(line 156,col 9)-(line 156,col 65)",
            "(line 159,col 9)-(line 159,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testEpsilonLimitConstructor()",
        "snippet": "    @Test\n    public void testEpsilonLimitConstructor() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 1.0e-5, 100));\n\n        assertFraction(3, 5, new BigFraction(0.6152, 0.02, 100));\n        assertFraction(8, 13, new BigFraction(0.6152, 1.0e-3, 100));\n        assertFraction(251, 408, new BigFraction(0.6152, 1.0e-4, 100));\n        assertFraction(251, 408, new BigFraction(0.6152, 1.0e-5, 100));\n        assertFraction(510, 829, new BigFraction(0.6152, 1.0e-6, 100));\n        assertFraction(769, 1250, new BigFraction(0.6152, 1.0e-7, 100));\n    }\n",
        "begin_line": 162,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 64)",
            "(line 166,col 9)-(line 166,col 65)",
            "(line 167,col 9)-(line 167,col 68)",
            "(line 168,col 9)-(line 168,col 71)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 71)",
            "(line 171,col 9)-(line 171,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testCompareTo()",
        "snippet": "    @Test\n    public void testCompareTo() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(1, 3);\n        BigFraction third = new BigFraction(1, 2);\n\n        Assert.assertEquals(0, first.compareTo(first));\n        Assert.assertEquals(0, first.compareTo(third));\n        Assert.assertEquals(1, first.compareTo(second));\n        Assert.assertEquals(-1, second.compareTo(first));\n\n        // these two values are different approximations of PI\n        // the first  one is approximately PI - 3.07e-18\n        // the second one is approximately PI + 1.936e-17\n        BigFraction pi1 = new BigFraction(1068966896, 340262731);\n        BigFraction pi2 = new BigFraction( 411557987, 131002976);\n        Assert.assertEquals(-1, pi1.compareTo(pi2));\n        Assert.assertEquals( 1, pi2.compareTo(pi1));\n        Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n\n    }\n",
        "begin_line": 174,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 50)",
            "(line 177,col 9)-(line 177,col 51)",
            "(line 178,col 9)-(line 178,col 50)",
            "(line 180,col 9)-(line 180,col 55)",
            "(line 181,col 9)-(line 181,col 55)",
            "(line 182,col 9)-(line 182,col 56)",
            "(line 183,col 9)-(line 183,col 57)",
            "(line 188,col 9)-(line 188,col 65)",
            "(line 189,col 9)-(line 189,col 65)",
            "(line 190,col 9)-(line 190,col 52)",
            "(line 191,col 9)-(line 191,col 52)",
            "(line 192,col 9)-(line 192,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testDoubleValue()",
        "snippet": "    @Test\n    public void testDoubleValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(1, 3);\n\n        Assert.assertEquals(0.5, first.doubleValue(), 0.0);\n        Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n    }\n",
        "begin_line": 196,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 50)",
            "(line 199,col 9)-(line 199,col 51)",
            "(line 201,col 9)-(line 201,col 59)",
            "(line 202,col 9)-(line 202,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testDoubleValueForLargeNumeratorAndDenominator()",
        "snippet": "    @Test\n    public void testDoubleValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.doubleValue(), 1e-15);\n    }\n",
        "begin_line": 206,
        "end_line": 215,
        "comment": " MATH-744",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 58)",
            "(line 209,col 9)-(line 209,col 58)",
            "(line 210,col 9)-(line 210,col 51)",
            "(line 211,col 9)-(line 212,col 72)",
            "(line 214,col 9)-(line 214,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testFloatValueForLargeNumeratorAndDenominator()",
        "snippet": "    @Test\n    public void testFloatValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.floatValue(), 1e-15);\n    }\n",
        "begin_line": 218,
        "end_line": 227,
        "comment": " MATH-744",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 58)",
            "(line 221,col 9)-(line 221,col 58)",
            "(line 222,col 9)-(line 222,col 51)",
            "(line 223,col 9)-(line 224,col 72)",
            "(line 226,col 9)-(line 226,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testFloatValue()",
        "snippet": "    @Test\n    public void testFloatValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(1, 3);\n\n        Assert.assertEquals(0.5f, first.floatValue(), 0.0f);\n        Assert.assertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f);\n    }\n",
        "begin_line": 229,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 50)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 234,col 9)-(line 234,col 60)",
            "(line 235,col 9)-(line 235,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testIntValue()",
        "snippet": "    @Test\n    public void testIntValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(3, 2);\n\n        Assert.assertEquals(0, first.intValue());\n        Assert.assertEquals(1, second.intValue());\n    }\n",
        "begin_line": 238,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 50)",
            "(line 241,col 9)-(line 241,col 51)",
            "(line 243,col 9)-(line 243,col 49)",
            "(line 244,col 9)-(line 244,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testLongValue()",
        "snippet": "    @Test\n    public void testLongValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(3, 2);\n\n        Assert.assertEquals(0L, first.longValue());\n        Assert.assertEquals(1L, second.longValue());\n    }\n",
        "begin_line": 247,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 50)",
            "(line 250,col 9)-(line 250,col 51)",
            "(line 252,col 9)-(line 252,col 51)",
            "(line 253,col 9)-(line 253,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testConstructorDouble()",
        "snippet": "    @Test\n    public void testConstructorDouble() {\n        assertFraction(1, 2, new BigFraction(0.5));\n        assertFraction(6004799503160661l, 18014398509481984l, new BigFraction(1.0 / 3.0));\n        assertFraction(6124895493223875l, 36028797018963968l, new BigFraction(17.0 / 100.0));\n        assertFraction(1784551352345559l, 562949953421312l, new BigFraction(317.0 / 100.0));\n        assertFraction(-1, 2, new BigFraction(-0.5));\n        assertFraction(-6004799503160661l, 18014398509481984l, new BigFraction(-1.0 / 3.0));\n        assertFraction(-6124895493223875l, 36028797018963968l, new BigFraction(17.0 / -100.0));\n        assertFraction(-1784551352345559l, 562949953421312l, new BigFraction(-317.0 / 100.0));\n        for (double v : new double[] { Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}) {\n            try {\n                new BigFraction(v);\n                Assert.fail(\"Expecting IllegalArgumentException\");\n            } catch (IllegalArgumentException iae) {\n                // expected\n            }\n        }\n        Assert.assertEquals(1l, new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());\n        Assert.assertEquals(1l, new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong());\n        Assert.assertEquals(1l, new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());\n    }\n",
        "begin_line": 256,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 51)",
            "(line 259,col 9)-(line 259,col 90)",
            "(line 260,col 9)-(line 260,col 93)",
            "(line 261,col 9)-(line 261,col 92)",
            "(line 262,col 9)-(line 262,col 53)",
            "(line 263,col 9)-(line 263,col 92)",
            "(line 264,col 9)-(line 264,col 95)",
            "(line 265,col 9)-(line 265,col 94)",
            "(line 266,col 9)-(line 273,col 9)",
            "(line 274,col 9)-(line 274,col 90)",
            "(line 275,col 9)-(line 275,col 116)",
            "(line 276,col 9)-(line 276,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        BigFraction a = new BigFraction(10, 21);\n        BigFraction b = new BigFraction(-10, 21);\n        BigFraction c = new BigFraction(10, -21);\n\n        assertFraction(10, 21, a.abs());\n        assertFraction(10, 21, b.abs());\n        assertFraction(10, 21, c.abs());\n    }\n",
        "begin_line": 279,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 48)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 49)",
            "(line 285,col 9)-(line 285,col 40)",
            "(line 286,col 9)-(line 286,col 40)",
            "(line 287,col 9)-(line 287,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal() {\n        BigFraction f = null;\n\n        f = new BigFraction(50, 75);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumeratorAsInt());\n        Assert.assertEquals(2, f.getDenominatorAsInt());\n\n        f = new BigFraction(4, 3);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumeratorAsInt());\n        Assert.assertEquals(4, f.getDenominatorAsInt());\n\n        f = new BigFraction(-15, 47);\n        f = f.reciprocal();\n        Assert.assertEquals(-47, f.getNumeratorAsInt());\n        Assert.assertEquals(15, f.getDenominatorAsInt());\n\n        f = new BigFraction(0, 3);\n        try {\n            f = f.reciprocal();\n            Assert.fail(\"expecting ZeroException\");\n        } catch (ZeroException ex) {\n        }\n\n        // large values\n        f = new BigFraction(Integer.MAX_VALUE, 1);\n        f = f.reciprocal();\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n    }\n",
        "begin_line": 290,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 29)",
            "(line 294,col 9)-(line 294,col 36)",
            "(line 295,col 9)-(line 295,col 27)",
            "(line 296,col 9)-(line 296,col 54)",
            "(line 297,col 9)-(line 297,col 56)",
            "(line 299,col 9)-(line 299,col 34)",
            "(line 300,col 9)-(line 300,col 27)",
            "(line 301,col 9)-(line 301,col 54)",
            "(line 302,col 9)-(line 302,col 56)",
            "(line 304,col 9)-(line 304,col 37)",
            "(line 305,col 9)-(line 305,col 27)",
            "(line 306,col 9)-(line 306,col 56)",
            "(line 307,col 9)-(line 307,col 57)",
            "(line 309,col 9)-(line 309,col 34)",
            "(line 310,col 9)-(line 314,col 9)",
            "(line 317,col 9)-(line 317,col 50)",
            "(line 318,col 9)-(line 318,col 27)",
            "(line 319,col 9)-(line 319,col 54)",
            "(line 320,col 9)-(line 320,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        BigFraction f = null;\n\n        f = new BigFraction(50, 75);\n        f = f.negate();\n        Assert.assertEquals(-2, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        f = new BigFraction(-50, 75);\n        f = f.negate();\n        Assert.assertEquals(2, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        // large values\n        f = new BigFraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE);\n        f = f.negate();\n        Assert.assertEquals(Integer.MIN_VALUE + 2, f.getNumeratorAsInt());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n\n    }\n",
        "begin_line": 323,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 29)",
            "(line 327,col 9)-(line 327,col 36)",
            "(line 328,col 9)-(line 328,col 23)",
            "(line 329,col 9)-(line 329,col 55)",
            "(line 330,col 9)-(line 330,col 56)",
            "(line 332,col 9)-(line 332,col 37)",
            "(line 333,col 9)-(line 333,col 23)",
            "(line 334,col 9)-(line 334,col 54)",
            "(line 335,col 9)-(line 335,col 56)",
            "(line 338,col 9)-(line 338,col 70)",
            "(line 339,col 9)-(line 339,col 23)",
            "(line 340,col 9)-(line 340,col 74)",
            "(line 341,col 9)-(line 341,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(1, 1, a.add(a));\n        assertFraction(7, 6, a.add(b));\n        assertFraction(7, 6, b.add(a));\n        assertFraction(4, 3, b.add(b));\n\n        BigFraction f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        BigFraction f2 = BigFraction.ONE;\n        BigFraction f = f1.add(f2);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(-1, 13 * 13 * 2 * 2);\n        f2 = new BigFraction(-2, 13 * 17 * 2);\n        f = f1.add(f2);\n        Assert.assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominatorAsInt());\n        Assert.assertEquals(-17 - 2 * 13 * 2, f.getNumeratorAsInt());\n\n        try {\n            f.add((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = new BigFraction(1, 32768 * 3);\n        f2 = new BigFraction(1, 59049);\n        f = f1.add(f2);\n        Assert.assertEquals(52451, f.getNumeratorAsInt());\n        Assert.assertEquals(1934917632, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, 3);\n        f2 = new BigFraction(1, 3);\n        f = f1.add(f2);\n        Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        f = f1.add(BigInteger.ONE);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f.add(BigInteger.ZERO);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        f = f1.add(1);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f.add(0);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        f = f1.add(1l);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f.add(0l);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n    }\n",
        "begin_line": 345,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 46)",
            "(line 348,col 9)-(line 348,col 46)",
            "(line 350,col 9)-(line 350,col 39)",
            "(line 351,col 9)-(line 351,col 39)",
            "(line 352,col 9)-(line 352,col 39)",
            "(line 353,col 9)-(line 353,col 39)",
            "(line 355,col 9)-(line 355,col 67)",
            "(line 356,col 9)-(line 356,col 41)",
            "(line 357,col 9)-(line 357,col 35)",
            "(line 358,col 9)-(line 358,col 70)",
            "(line 359,col 9)-(line 359,col 56)",
            "(line 361,col 9)-(line 361,col 50)",
            "(line 362,col 9)-(line 362,col 46)",
            "(line 363,col 9)-(line 363,col 23)",
            "(line 364,col 9)-(line 364,col 75)",
            "(line 365,col 9)-(line 365,col 69)",
            "(line 367,col 9)-(line 371,col 9)",
            "(line 375,col 9)-(line 375,col 43)",
            "(line 376,col 9)-(line 376,col 39)",
            "(line 377,col 9)-(line 377,col 23)",
            "(line 378,col 9)-(line 378,col 58)",
            "(line 379,col 9)-(line 379,col 65)",
            "(line 381,col 9)-(line 381,col 51)",
            "(line 382,col 9)-(line 382,col 35)",
            "(line 383,col 9)-(line 383,col 23)",
            "(line 384,col 9)-(line 384,col 74)",
            "(line 385,col 9)-(line 385,col 56)",
            "(line 387,col 9)-(line 387,col 55)",
            "(line 388,col 9)-(line 388,col 35)",
            "(line 389,col 9)-(line 389,col 70)",
            "(line 390,col 9)-(line 390,col 56)",
            "(line 392,col 9)-(line 392,col 35)",
            "(line 393,col 9)-(line 393,col 70)",
            "(line 394,col 9)-(line 394,col 56)",
            "(line 396,col 9)-(line 396,col 55)",
            "(line 397,col 9)-(line 397,col 22)",
            "(line 398,col 9)-(line 398,col 70)",
            "(line 399,col 9)-(line 399,col 56)",
            "(line 401,col 9)-(line 401,col 21)",
            "(line 402,col 9)-(line 402,col 70)",
            "(line 403,col 9)-(line 403,col 56)",
            "(line 405,col 9)-(line 405,col 55)",
            "(line 406,col 9)-(line 406,col 23)",
            "(line 407,col 9)-(line 407,col 70)",
            "(line 408,col 9)-(line 408,col 56)",
            "(line 410,col 9)-(line 410,col 22)",
            "(line 411,col 9)-(line 411,col 70)",
            "(line 412,col 9)-(line 412,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(1, 1, a.divide(a));\n        assertFraction(3, 4, a.divide(b));\n        assertFraction(4, 3, b.divide(a));\n        assertFraction(1, 1, b.divide(b));\n\n        BigFraction f1 = new BigFraction(3, 5);\n        BigFraction f2 = BigFraction.ZERO;\n        try {\n            f1.divide(f2);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n        }\n\n        f1 = new BigFraction(0, 5);\n        f2 = new BigFraction(2, 7);\n        BigFraction f = f1.divide(f2);\n        Assert.assertSame(BigFraction.ZERO, f);\n\n        f1 = new BigFraction(2, 7);\n        f2 = BigFraction.ONE;\n        f = f1.divide(f2);\n        Assert.assertEquals(2, f.getNumeratorAsInt());\n        Assert.assertEquals(7, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f1);\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = new BigFraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        try {\n            f.divide((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.divide(BigInteger.valueOf(Integer.MIN_VALUE));\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.divide(Integer.MIN_VALUE);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.divide((long) Integer.MIN_VALUE);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n\n    }\n",
        "begin_line": 416,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 46)",
            "(line 419,col 9)-(line 419,col 46)",
            "(line 421,col 9)-(line 421,col 42)",
            "(line 422,col 9)-(line 422,col 42)",
            "(line 423,col 9)-(line 423,col 42)",
            "(line 424,col 9)-(line 424,col 42)",
            "(line 426,col 9)-(line 426,col 47)",
            "(line 427,col 9)-(line 427,col 42)",
            "(line 428,col 9)-(line 432,col 9)",
            "(line 434,col 9)-(line 434,col 35)",
            "(line 435,col 9)-(line 435,col 35)",
            "(line 436,col 9)-(line 436,col 38)",
            "(line 437,col 9)-(line 437,col 47)",
            "(line 439,col 9)-(line 439,col 35)",
            "(line 440,col 9)-(line 440,col 29)",
            "(line 441,col 9)-(line 441,col 26)",
            "(line 442,col 9)-(line 442,col 54)",
            "(line 443,col 9)-(line 443,col 56)",
            "(line 445,col 9)-(line 445,col 51)",
            "(line 446,col 9)-(line 446,col 26)",
            "(line 447,col 9)-(line 447,col 54)",
            "(line 448,col 9)-(line 448,col 56)",
            "(line 450,col 9)-(line 450,col 67)",
            "(line 451,col 9)-(line 451,col 51)",
            "(line 452,col 9)-(line 452,col 26)",
            "(line 453,col 9)-(line 453,col 70)",
            "(line 454,col 9)-(line 454,col 56)",
            "(line 456,col 9)-(line 460,col 9)",
            "(line 462,col 9)-(line 462,col 67)",
            "(line 463,col 9)-(line 463,col 61)",
            "(line 464,col 9)-(line 464,col 72)",
            "(line 465,col 9)-(line 465,col 54)",
            "(line 467,col 9)-(line 467,col 67)",
            "(line 468,col 9)-(line 468,col 41)",
            "(line 469,col 9)-(line 469,col 72)",
            "(line 470,col 9)-(line 470,col 54)",
            "(line 472,col 9)-(line 472,col 67)",
            "(line 473,col 9)-(line 473,col 48)",
            "(line 474,col 9)-(line 474,col 72)",
            "(line 475,col 9)-(line 475,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(1, 4, a.multiply(a));\n        assertFraction(1, 3, a.multiply(b));\n        assertFraction(1, 3, b.multiply(a));\n        assertFraction(4, 9, b.multiply(b));\n\n        BigFraction f1 = new BigFraction(Integer.MAX_VALUE, 1);\n        BigFraction f2 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        BigFraction f = f1.multiply(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f2.multiply(Integer.MAX_VALUE);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f2.multiply((long) Integer.MAX_VALUE);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        try {\n            f.multiply((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n    }\n",
        "begin_line": 479,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 481,col 9)-(line 481,col 46)",
            "(line 482,col 9)-(line 482,col 46)",
            "(line 484,col 9)-(line 484,col 44)",
            "(line 485,col 9)-(line 485,col 44)",
            "(line 486,col 9)-(line 486,col 44)",
            "(line 487,col 9)-(line 487,col 44)",
            "(line 489,col 9)-(line 489,col 63)",
            "(line 490,col 9)-(line 490,col 79)",
            "(line 491,col 9)-(line 491,col 40)",
            "(line 492,col 9)-(line 492,col 70)",
            "(line 493,col 9)-(line 493,col 56)",
            "(line 495,col 9)-(line 495,col 43)",
            "(line 496,col 9)-(line 496,col 70)",
            "(line 497,col 9)-(line 497,col 56)",
            "(line 499,col 9)-(line 499,col 50)",
            "(line 500,col 9)-(line 500,col 70)",
            "(line 501,col 9)-(line 501,col 56)",
            "(line 503,col 9)-(line 507,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(0, 1, a.subtract(a));\n        assertFraction(-1, 6, a.subtract(b));\n        assertFraction(1, 6, b.subtract(a));\n        assertFraction(0, 1, b.subtract(b));\n\n        BigFraction f = new BigFraction(1, 1);\n        try {\n            f.subtract((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        BigFraction f1 = new BigFraction(1, 32768 * 3);\n        BigFraction f2 = new BigFraction(1, 59049);\n        f = f1.subtract(f2);\n        Assert.assertEquals(-13085, f.getNumeratorAsInt());\n        Assert.assertEquals(1934917632, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, 3);\n        f2 = new BigFraction(1, 3).negate();\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE, 1);\n        f2 = BigFraction.ONE;\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MAX_VALUE - 1, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n    }\n",
        "begin_line": 511,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 513,col 9)-(line 513,col 46)",
            "(line 514,col 9)-(line 514,col 46)",
            "(line 516,col 9)-(line 516,col 44)",
            "(line 517,col 9)-(line 517,col 45)",
            "(line 518,col 9)-(line 518,col 44)",
            "(line 519,col 9)-(line 519,col 44)",
            "(line 521,col 9)-(line 521,col 46)",
            "(line 522,col 9)-(line 526,col 9)",
            "(line 530,col 9)-(line 530,col 55)",
            "(line 531,col 9)-(line 531,col 51)",
            "(line 532,col 9)-(line 532,col 28)",
            "(line 533,col 9)-(line 533,col 59)",
            "(line 534,col 9)-(line 534,col 65)",
            "(line 536,col 9)-(line 536,col 51)",
            "(line 537,col 9)-(line 537,col 44)",
            "(line 538,col 9)-(line 538,col 28)",
            "(line 539,col 9)-(line 539,col 74)",
            "(line 540,col 9)-(line 540,col 56)",
            "(line 542,col 9)-(line 542,col 51)",
            "(line 543,col 9)-(line 543,col 29)",
            "(line 544,col 9)-(line 544,col 28)",
            "(line 545,col 9)-(line 545,col 74)",
            "(line 546,col 9)-(line 546,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testBigDecimalValue()",
        "snippet": "    @Test\n    public void testBigDecimalValue() {\n        Assert.assertEquals(new BigDecimal(0.5), new BigFraction(1, 2).bigDecimalValue());\n        Assert.assertEquals(new BigDecimal(\"0.0003\"), new BigFraction(3, 10000).bigDecimalValue());\n        Assert.assertEquals(new BigDecimal(\"0\"), new BigFraction(1, 3).bigDecimalValue(BigDecimal.ROUND_DOWN));\n        Assert.assertEquals(new BigDecimal(\"0.333\"), new BigFraction(1, 3).bigDecimalValue(3, BigDecimal.ROUND_DOWN));\n    }\n",
        "begin_line": 550,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 90)",
            "(line 553,col 9)-(line 553,col 99)",
            "(line 554,col 9)-(line 554,col 111)",
            "(line 555,col 9)-(line 555,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testEqualsAndHashCode()",
        "snippet": "    @Test\n    public void testEqualsAndHashCode() {\n        BigFraction zero = new BigFraction(0, 1);\n        BigFraction nullFraction = null;\n        Assert.assertTrue(zero.equals(zero));\n        Assert.assertFalse(zero.equals(nullFraction));\n        Assert.assertFalse(zero.equals(Double.valueOf(0)));\n        BigFraction zero2 = new BigFraction(0, 2);\n        Assert.assertTrue(zero.equals(zero2));\n        Assert.assertEquals(zero.hashCode(), zero2.hashCode());\n        BigFraction one = new BigFraction(1, 1);\n        Assert.assertFalse((one.equals(zero) || zero.equals(one)));\n        Assert.assertTrue(one.equals(BigFraction.ONE));\n    }\n",
        "begin_line": 558,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 49)",
            "(line 561,col 9)-(line 561,col 40)",
            "(line 562,col 9)-(line 562,col 45)",
            "(line 563,col 9)-(line 563,col 54)",
            "(line 564,col 9)-(line 564,col 59)",
            "(line 565,col 9)-(line 565,col 50)",
            "(line 566,col 9)-(line 566,col 46)",
            "(line 567,col 9)-(line 567,col 63)",
            "(line 568,col 9)-(line 568,col 48)",
            "(line 569,col 9)-(line 569,col 67)",
            "(line 570,col 9)-(line 570,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testGetReducedFraction()",
        "snippet": "    @Test\n    public void testGetReducedFraction() {\n        BigFraction threeFourths = new BigFraction(3, 4);\n        Assert.assertTrue(threeFourths.equals(BigFraction.getReducedFraction(6, 8)));\n        Assert.assertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0, -1)));\n        try {\n            BigFraction.getReducedFraction(1, 0);\n            Assert.fail(\"expecting ZeroException\");\n        } catch (ZeroException ex) {\n            // expected\n        }\n        Assert.assertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1);\n        Assert.assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);\n    }\n",
        "begin_line": 573,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 575,col 9)-(line 575,col 57)",
            "(line 576,col 9)-(line 576,col 85)",
            "(line 577,col 9)-(line 577,col 90)",
            "(line 578,col 9)-(line 583,col 9)",
            "(line 584,col 9)-(line 584,col 106)",
            "(line 585,col 9)-(line 585,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testPercentage()",
        "snippet": "    @Test\n    public void testPercentage() {\n        Assert.assertEquals(50.0, new BigFraction(1, 2).percentageValue(), 1.0e-15);\n    }\n",
        "begin_line": 588,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));\n        Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l));\n        Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(BigInteger.valueOf(13l)));\n        Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0));\n        Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0l));\n        Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(BigInteger.valueOf(0l)));\n        Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13));\n        Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13l));\n        Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l)));\n    }\n",
        "begin_line": 593,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 595,col 9)-(line 595,col 91)",
            "(line 596,col 9)-(line 596,col 92)",
            "(line 597,col 9)-(line 597,col 112)",
            "(line 598,col 9)-(line 598,col 75)",
            "(line 599,col 9)-(line 599,col 76)",
            "(line 600,col 9)-(line 600,col 96)",
            "(line 601,col 9)-(line 601,col 92)",
            "(line 602,col 9)-(line 602,col 93)",
            "(line 603,col 9)-(line 603,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testMath340()",
        "snippet": "    @Test\n    public void testMath340() {\n        BigFraction fractionA = new BigFraction(0.00131);\n        BigFraction fractionB = new BigFraction(.37).reciprocal();\n        BigFraction errorResult = fractionA.multiply(fractionB);\n        BigFraction correctResult = new BigFraction(fractionA.getNumerator().multiply(fractionB.getNumerator()),\n                                                    fractionA.getDenominator().multiply(fractionB.getDenominator()));\n        Assert.assertEquals(correctResult, errorResult);\n    }\n",
        "begin_line": 606,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 608,col 9)-(line 608,col 57)",
            "(line 609,col 9)-(line 609,col 66)",
            "(line 610,col 9)-(line 610,col 64)",
            "(line 611,col 9)-(line 612,col 117)",
            "(line 613,col 9)-(line 613,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math3.fraction.BigFractionTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() throws FractionConversionException {\n        BigFraction[] fractions = {\n            new BigFraction(3, 4), BigFraction.ONE, BigFraction.ZERO,\n            new BigFraction(17), new BigFraction(FastMath.PI, 1000),\n            new BigFraction(-5, 2)\n        };\n        for (BigFraction fraction : fractions) {\n            Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));\n        }\n    }\n",
        "begin_line": 616,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 618,col 9)-(line 622,col 10)",
            "(line 623,col 9)-(line 625,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.assertFraction(int, int, org.apache.commons.math3.fraction.Fraction)",
        "snippet": "    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumerator());\n        Assert.assertEquals(expectedDenominator, actual.getDenominator());\n    }\n",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 70)",
            "(line 35,col 9)-(line 35,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertFraction(0, 1, new Fraction(0, 1));\n        assertFraction(0, 1, new Fraction(0, 2));\n        assertFraction(0, 1, new Fraction(0, -1));\n        assertFraction(1, 2, new Fraction(1, 2));\n        assertFraction(1, 2, new Fraction(2, 4));\n        assertFraction(-1, 2, new Fraction(-1, 2));\n        assertFraction(-1, 2, new Fraction(1, -2));\n        assertFraction(-1, 2, new Fraction(-2, 4));\n        assertFraction(-1, 2, new Fraction(2, -4));\n\n        // overflow\n        try {\n            new Fraction(Integer.MIN_VALUE, -1);\n            Assert.fail();\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n        try {\n            new Fraction(1, Integer.MIN_VALUE);\n            Assert.fail();\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n\n        assertFraction(0, 1, new Fraction(0.00000000000001));\n        assertFraction(2, 5, new Fraction(0.40000000000001));\n        assertFraction(15, 1, new Fraction(15.0000000000001));\n    }\n",
        "begin_line": 38,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 49)",
            "(line 42,col 9)-(line 42,col 50)",
            "(line 43,col 9)-(line 43,col 49)",
            "(line 44,col 9)-(line 44,col 49)",
            "(line 45,col 9)-(line 45,col 51)",
            "(line 46,col 9)-(line 46,col 51)",
            "(line 47,col 9)-(line 47,col 51)",
            "(line 48,col 9)-(line 48,col 51)",
            "(line 51,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 62,col 9)",
            "(line 64,col 9)-(line 64,col 61)",
            "(line 65,col 9)-(line 65,col 61)",
            "(line 66,col 9)-(line 66,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testGoldenRatio()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testGoldenRatio() {\n        // the golden ratio is notoriously a difficult number for continuous fraction\n        new Fraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);\n    }\n",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDoubleConstructor()",
        "snippet": "    @Test\n    public void testDoubleConstructor() throws ConvergenceException  {\n        assertFraction(1, 2, new Fraction((double)1 / (double)2));\n        assertFraction(1, 3, new Fraction((double)1 / (double)3));\n        assertFraction(2, 3, new Fraction((double)2 / (double)3));\n        assertFraction(1, 4, new Fraction((double)1 / (double)4));\n        assertFraction(3, 4, new Fraction((double)3 / (double)4));\n        assertFraction(1, 5, new Fraction((double)1 / (double)5));\n        assertFraction(2, 5, new Fraction((double)2 / (double)5));\n        assertFraction(3, 5, new Fraction((double)3 / (double)5));\n        assertFraction(4, 5, new Fraction((double)4 / (double)5));\n        assertFraction(1, 6, new Fraction((double)1 / (double)6));\n        assertFraction(5, 6, new Fraction((double)5 / (double)6));\n        assertFraction(1, 7, new Fraction((double)1 / (double)7));\n        assertFraction(2, 7, new Fraction((double)2 / (double)7));\n        assertFraction(3, 7, new Fraction((double)3 / (double)7));\n        assertFraction(4, 7, new Fraction((double)4 / (double)7));\n        assertFraction(5, 7, new Fraction((double)5 / (double)7));\n        assertFraction(6, 7, new Fraction((double)6 / (double)7));\n        assertFraction(1, 8, new Fraction((double)1 / (double)8));\n        assertFraction(3, 8, new Fraction((double)3 / (double)8));\n        assertFraction(5, 8, new Fraction((double)5 / (double)8));\n        assertFraction(7, 8, new Fraction((double)7 / (double)8));\n        assertFraction(1, 9, new Fraction((double)1 / (double)9));\n        assertFraction(2, 9, new Fraction((double)2 / (double)9));\n        assertFraction(4, 9, new Fraction((double)4 / (double)9));\n        assertFraction(5, 9, new Fraction((double)5 / (double)9));\n        assertFraction(7, 9, new Fraction((double)7 / (double)9));\n        assertFraction(8, 9, new Fraction((double)8 / (double)9));\n        assertFraction(1, 10, new Fraction((double)1 / (double)10));\n        assertFraction(3, 10, new Fraction((double)3 / (double)10));\n        assertFraction(7, 10, new Fraction((double)7 / (double)10));\n        assertFraction(9, 10, new Fraction((double)9 / (double)10));\n        assertFraction(1, 11, new Fraction((double)1 / (double)11));\n        assertFraction(2, 11, new Fraction((double)2 / (double)11));\n        assertFraction(3, 11, new Fraction((double)3 / (double)11));\n        assertFraction(4, 11, new Fraction((double)4 / (double)11));\n        assertFraction(5, 11, new Fraction((double)5 / (double)11));\n        assertFraction(6, 11, new Fraction((double)6 / (double)11));\n        assertFraction(7, 11, new Fraction((double)7 / (double)11));\n        assertFraction(8, 11, new Fraction((double)8 / (double)11));\n        assertFraction(9, 11, new Fraction((double)9 / (double)11));\n        assertFraction(10, 11, new Fraction((double)10 / (double)11));\n    }\n",
        "begin_line": 76,
        "end_line": 119,
        "comment": " MATH-179",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 66)",
            "(line 79,col 9)-(line 79,col 66)",
            "(line 80,col 9)-(line 80,col 66)",
            "(line 81,col 9)-(line 81,col 66)",
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 66)",
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 66)",
            "(line 88,col 9)-(line 88,col 66)",
            "(line 89,col 9)-(line 89,col 66)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 94,col 9)-(line 94,col 66)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 99,col 66)",
            "(line 100,col 9)-(line 100,col 66)",
            "(line 101,col 9)-(line 101,col 66)",
            "(line 102,col 9)-(line 102,col 66)",
            "(line 103,col 9)-(line 103,col 66)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 105,col 68)",
            "(line 106,col 9)-(line 106,col 68)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 110,col 9)-(line 110,col 68)",
            "(line 111,col 9)-(line 111,col 68)",
            "(line 112,col 9)-(line 112,col 68)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 68)",
            "(line 116,col 9)-(line 116,col 68)",
            "(line 117,col 9)-(line 117,col 68)",
            "(line 118,col 9)-(line 118,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor()",
        "snippet": "    @Test\n    public void testDigitLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4,   9));\n        assertFraction(2, 5, new Fraction(0.4,  99));\n        assertFraction(2, 5, new Fraction(0.4, 999));\n\n        assertFraction(3, 5,      new Fraction(0.6152,    9));\n        assertFraction(8, 13,     new Fraction(0.6152,   99));\n        assertFraction(510, 829,  new Fraction(0.6152,  999));\n        assertFraction(769, 1250, new Fraction(0.6152, 9999));\n\n        // MATH-996\n        assertFraction(1, 2, new Fraction(0.5000000001, 10));\n    }\n",
        "begin_line": 122,
        "end_line": 135,
        "comment": " MATH-181",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 53)",
            "(line 125,col 9)-(line 125,col 53)",
            "(line 126,col 9)-(line 126,col 53)",
            "(line 128,col 9)-(line 128,col 62)",
            "(line 129,col 9)-(line 129,col 62)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 62)",
            "(line 134,col 9)-(line 134,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testIntegerOverflow()",
        "snippet": "    @Test\n    public void testIntegerOverflow() {\n        checkIntegerOverflow(0.75000000001455192);\n        checkIntegerOverflow(1.0e10);\n        checkIntegerOverflow(-1.0e10);\n        checkIntegerOverflow(-43979.60679604749);\n    }\n",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 50)",
            "(line 140,col 9)-(line 140,col 37)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 142,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.checkIntegerOverflow(double)",
        "snippet": "    private void checkIntegerOverflow(double a) {\n        try {\n            @SuppressWarnings(\"unused\")\n            Fraction f = new Fraction(a, 1.0e-12, 1000);\n            //System.out.println(f.getNumerator() + \"/\" + f.getDenominator());\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 145,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 153,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testEpsilonLimitConstructor()",
        "snippet": "    @Test\n    public void testEpsilonLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4, 1.0e-5, 100));\n\n        assertFraction(3, 5,      new Fraction(0.6152, 0.02, 100));\n        assertFraction(8, 13,     new Fraction(0.6152, 1.0e-3, 100));\n        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-4, 100));\n        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-5, 100));\n        assertFraction(510, 829,  new Fraction(0.6152, 1.0e-6, 100));\n        assertFraction(769, 1250, new Fraction(0.6152, 1.0e-7, 100));\n    }\n",
        "begin_line": 156,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 61)",
            "(line 160,col 9)-(line 160,col 67)",
            "(line 161,col 9)-(line 161,col 69)",
            "(line 162,col 9)-(line 162,col 69)",
            "(line 163,col 9)-(line 163,col 69)",
            "(line 164,col 9)-(line 164,col 69)",
            "(line 165,col 9)-(line 165,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testCompareTo()",
        "snippet": "    @Test\n    public void testCompareTo() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n        Fraction third = new Fraction(1, 2);\n\n        Assert.assertEquals(0, first.compareTo(first));\n        Assert.assertEquals(0, first.compareTo(third));\n        Assert.assertEquals(1, first.compareTo(second));\n        Assert.assertEquals(-1, second.compareTo(first));\n\n        // these two values are different approximations of PI\n        // the first  one is approximately PI - 3.07e-18\n        // the second one is approximately PI + 1.936e-17\n        Fraction pi1 = new Fraction(1068966896, 340262731);\n        Fraction pi2 = new Fraction( 411557987, 131002976);\n        Assert.assertEquals(-1, pi1.compareTo(pi2));\n        Assert.assertEquals( 1, pi2.compareTo(pi1));\n        Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n    }\n",
        "begin_line": 168,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 44)",
            "(line 171,col 9)-(line 171,col 45)",
            "(line 172,col 9)-(line 172,col 44)",
            "(line 174,col 9)-(line 174,col 55)",
            "(line 175,col 9)-(line 175,col 55)",
            "(line 176,col 9)-(line 176,col 56)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 182,col 9)-(line 182,col 59)",
            "(line 183,col 9)-(line 183,col 59)",
            "(line 184,col 9)-(line 184,col 52)",
            "(line 185,col 9)-(line 185,col 52)",
            "(line 186,col 9)-(line 186,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDoubleValue()",
        "snippet": "    @Test\n    public void testDoubleValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n\n        Assert.assertEquals(0.5, first.doubleValue(), 0.0);\n        Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n    }\n",
        "begin_line": 189,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 44)",
            "(line 192,col 9)-(line 192,col 45)",
            "(line 194,col 9)-(line 194,col 59)",
            "(line 195,col 9)-(line 195,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testFloatValue()",
        "snippet": "    @Test\n    public void testFloatValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n\n        Assert.assertEquals(0.5f, first.floatValue(), 0.0f);\n        Assert.assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);\n    }\n",
        "begin_line": 198,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 44)",
            "(line 201,col 9)-(line 201,col 45)",
            "(line 203,col 9)-(line 203,col 60)",
            "(line 204,col 9)-(line 204,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testIntValue()",
        "snippet": "    @Test\n    public void testIntValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(3, 2);\n\n        Assert.assertEquals(0, first.intValue());\n        Assert.assertEquals(1, second.intValue());\n    }\n",
        "begin_line": 207,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 44)",
            "(line 210,col 9)-(line 210,col 45)",
            "(line 212,col 9)-(line 212,col 49)",
            "(line 213,col 9)-(line 213,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testLongValue()",
        "snippet": "    @Test\n    public void testLongValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(3, 2);\n\n        Assert.assertEquals(0L, first.longValue());\n        Assert.assertEquals(1L, second.longValue());\n    }\n",
        "begin_line": 216,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 44)",
            "(line 219,col 9)-(line 219,col 45)",
            "(line 221,col 9)-(line 221,col 51)",
            "(line 222,col 9)-(line 222,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testConstructorDouble()",
        "snippet": "    @Test\n    public void testConstructorDouble() {\n        assertFraction(1, 2, new Fraction(0.5));\n        assertFraction(1, 3, new Fraction(1.0 / 3.0));\n        assertFraction(17, 100, new Fraction(17.0 / 100.0));\n        assertFraction(317, 100, new Fraction(317.0 / 100.0));\n        assertFraction(-1, 2, new Fraction(-0.5));\n        assertFraction(-1, 3, new Fraction(-1.0 / 3.0));\n        assertFraction(-17, 100, new Fraction(17.0 / -100.0));\n        assertFraction(-317, 100, new Fraction(-317.0 / 100.0));\n    }\n",
        "begin_line": 225,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 48)",
            "(line 228,col 9)-(line 228,col 54)",
            "(line 229,col 9)-(line 229,col 60)",
            "(line 230,col 9)-(line 230,col 62)",
            "(line 231,col 9)-(line 231,col 50)",
            "(line 232,col 9)-(line 232,col 56)",
            "(line 233,col 9)-(line 233,col 62)",
            "(line 234,col 9)-(line 234,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        Fraction a = new Fraction(10, 21);\n        Fraction b = new Fraction(-10, 21);\n        Fraction c = new Fraction(10, -21);\n\n        assertFraction(10, 21, a.abs());\n        assertFraction(10, 21, b.abs());\n        assertFraction(10, 21, c.abs());\n    }\n",
        "begin_line": 237,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 42)",
            "(line 240,col 9)-(line 240,col 43)",
            "(line 241,col 9)-(line 241,col 43)",
            "(line 243,col 9)-(line 243,col 40)",
            "(line 244,col 9)-(line 244,col 40)",
            "(line 245,col 9)-(line 245,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testPercentage()",
        "snippet": "    @Test\n    public void testPercentage() {\n        Assert.assertEquals(50.0, new Fraction(1, 2).percentageValue(), 1.0e-15);\n    }\n",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testMath835()",
        "snippet": "    @Test\n    public void testMath835() {\n        final int numer = Integer.MAX_VALUE / 99;\n        final int denom = 1;\n        final double percentage = 100 * ((double) numer) / denom;\n        final Fraction frac = new Fraction(numer, denom);\n        // With the implementation that preceded the fix suggested in MATH-835,\n        // this test was failing, due to overflow.\n        Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));\n    }\n",
        "begin_line": 253,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 49)",
            "(line 256,col 9)-(line 256,col 28)",
            "(line 257,col 9)-(line 257,col 65)",
            "(line 258,col 9)-(line 258,col 57)",
            "(line 261,col 9)-(line 261,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal() {\n        Fraction f = null;\n\n        f = new Fraction(50, 75);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumerator());\n        Assert.assertEquals(2, f.getDenominator());\n\n        f = new Fraction(4, 3);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumerator());\n        Assert.assertEquals(4, f.getDenominator());\n\n        f = new Fraction(-15, 47);\n        f = f.reciprocal();\n        Assert.assertEquals(-47, f.getNumerator());\n        Assert.assertEquals(15, f.getDenominator());\n\n        f = new Fraction(0, 3);\n        try {\n            f = f.reciprocal();\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        // large values\n        f = new Fraction(Integer.MAX_VALUE, 1);\n        f = f.reciprocal();\n        Assert.assertEquals(1, f.getNumerator());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }\n",
        "begin_line": 264,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 26)",
            "(line 268,col 9)-(line 268,col 33)",
            "(line 269,col 9)-(line 269,col 27)",
            "(line 270,col 9)-(line 270,col 49)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 273,col 9)-(line 273,col 31)",
            "(line 274,col 9)-(line 274,col 27)",
            "(line 275,col 9)-(line 275,col 49)",
            "(line 276,col 9)-(line 276,col 51)",
            "(line 278,col 9)-(line 278,col 34)",
            "(line 279,col 9)-(line 279,col 27)",
            "(line 280,col 9)-(line 280,col 51)",
            "(line 281,col 9)-(line 281,col 52)",
            "(line 283,col 9)-(line 283,col 31)",
            "(line 284,col 9)-(line 287,col 47)",
            "(line 290,col 9)-(line 290,col 47)",
            "(line 291,col 9)-(line 291,col 27)",
            "(line 292,col 9)-(line 292,col 49)",
            "(line 293,col 9)-(line 293,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        Fraction f = null;\n\n        f = new Fraction(50, 75);\n        f = f.negate();\n        Assert.assertEquals(-2, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        f = new Fraction(-50, 75);\n        f = f.negate();\n        Assert.assertEquals(2, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        // large values\n        f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        Assert.assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = new Fraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n    }\n",
        "begin_line": 296,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 26)",
            "(line 300,col 9)-(line 300,col 33)",
            "(line 301,col 9)-(line 301,col 23)",
            "(line 302,col 9)-(line 302,col 50)",
            "(line 303,col 9)-(line 303,col 51)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 306,col 23)",
            "(line 307,col 9)-(line 307,col 49)",
            "(line 308,col 9)-(line 308,col 51)",
            "(line 311,col 9)-(line 311,col 65)",
            "(line 312,col 9)-(line 312,col 23)",
            "(line 313,col 9)-(line 313,col 67)",
            "(line 314,col 9)-(line 314,col 67)",
            "(line 316,col 9)-(line 316,col 47)",
            "(line 317,col 9)-(line 320,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(1, 1, a.add(a));\n        assertFraction(7, 6, a.add(b));\n        assertFraction(7, 6, b.add(a));\n        assertFraction(4, 3, b.add(b));\n\n        Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);\n        Fraction f2 = Fraction.ONE;\n        Fraction f = f1.add(f2);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n        f = f1.add(1);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        f1 = new Fraction(-1, 13*13*2*2);\n        f2 = new Fraction(-2, 13*17*2);\n        f = f1.add(f2);\n        Assert.assertEquals(13*13*17*2*2, f.getDenominator());\n        Assert.assertEquals(-17 - 2*13*2, f.getNumerator());\n\n        try {\n            f.add(null);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = new Fraction(1,32768*3);\n        f2 = new Fraction(1,59049);\n        f = f1.add(f2);\n        Assert.assertEquals(52451, f.getNumerator());\n        Assert.assertEquals(1934917632, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, 3);\n        f2 = new Fraction(1,3);\n        f = f1.add(f2);\n        Assert.assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        f1 = new Fraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n\n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = new Fraction(Integer.MIN_VALUE, 5);\n        f2 = new Fraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(3,327680);\n        f2 = new Fraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n    }\n",
        "begin_line": 323,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 40)",
            "(line 326,col 9)-(line 326,col 40)",
            "(line 328,col 9)-(line 328,col 39)",
            "(line 329,col 9)-(line 329,col 39)",
            "(line 330,col 9)-(line 330,col 39)",
            "(line 331,col 9)-(line 331,col 39)",
            "(line 333,col 9)-(line 333,col 61)",
            "(line 334,col 9)-(line 334,col 35)",
            "(line 335,col 9)-(line 335,col 32)",
            "(line 336,col 9)-(line 336,col 65)",
            "(line 337,col 9)-(line 337,col 51)",
            "(line 338,col 9)-(line 338,col 22)",
            "(line 339,col 9)-(line 339,col 65)",
            "(line 340,col 9)-(line 340,col 51)",
            "(line 342,col 9)-(line 342,col 41)",
            "(line 343,col 9)-(line 343,col 39)",
            "(line 344,col 9)-(line 344,col 23)",
            "(line 345,col 9)-(line 345,col 62)",
            "(line 346,col 9)-(line 346,col 60)",
            "(line 348,col 9)-(line 351,col 52)",
            "(line 355,col 9)-(line 355,col 37)",
            "(line 356,col 9)-(line 356,col 35)",
            "(line 357,col 9)-(line 357,col 23)",
            "(line 358,col 9)-(line 358,col 53)",
            "(line 359,col 9)-(line 359,col 60)",
            "(line 361,col 9)-(line 361,col 48)",
            "(line 362,col 9)-(line 362,col 31)",
            "(line 363,col 9)-(line 363,col 23)",
            "(line 364,col 9)-(line 364,col 67)",
            "(line 365,col 9)-(line 365,col 51)",
            "(line 367,col 9)-(line 367,col 52)",
            "(line 368,col 9)-(line 368,col 26)",
            "(line 369,col 9)-(line 369,col 23)",
            "(line 370,col 9)-(line 370,col 65)",
            "(line 371,col 9)-(line 371,col 51)",
            "(line 373,col 9)-(line 376,col 47)",
            "(line 379,col 9)-(line 379,col 48)",
            "(line 380,col 9)-(line 380,col 32)",
            "(line 381,col 9)-(line 384,col 47)",
            "(line 386,col 9)-(line 390,col 47)",
            "(line 392,col 9)-(line 396,col 47)",
            "(line 398,col 9)-(line 398,col 36)",
            "(line 399,col 9)-(line 399,col 35)",
            "(line 400,col 9)-(line 403,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(1, 1, a.divide(a));\n        assertFraction(3, 4, a.divide(b));\n        assertFraction(4, 3, b.divide(a));\n        assertFraction(1, 1, b.divide(b));\n\n        Fraction f1 = new Fraction(3, 5);\n        Fraction f2 = Fraction.ZERO;\n        try {\n            f1.divide(f2);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(0, 5);\n        f2 = new Fraction(2, 7);\n        Fraction f = f1.divide(f2);\n        Assert.assertSame(Fraction.ZERO, f);\n\n        f1 = new Fraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divide(f2);\n        Assert.assertEquals(2, f.getNumerator());\n        Assert.assertEquals(7, f.getDenominator());\n\n        f1 = new Fraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f1);\n        Assert.assertEquals(1, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = new Fraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f.divide(null);\n            Assert.fail(\"MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        try {\n            f1 = new Fraction(1, Integer.MAX_VALUE);\n            f = f1.divide(f1.reciprocal());  // should overflow\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n        try {\n            f1 = new Fraction(1, -Integer.MAX_VALUE);\n            f = f1.divide(f1.reciprocal());  // should overflow\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(6, 35);\n        f  = f1.divide(15);\n        Assert.assertEquals(2, f.getNumerator());\n        Assert.assertEquals(175, f.getDenominator());\n\n    }\n",
        "begin_line": 406,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 40)",
            "(line 409,col 9)-(line 409,col 40)",
            "(line 411,col 9)-(line 411,col 42)",
            "(line 412,col 9)-(line 412,col 42)",
            "(line 413,col 9)-(line 413,col 42)",
            "(line 414,col 9)-(line 414,col 42)",
            "(line 416,col 9)-(line 416,col 41)",
            "(line 417,col 9)-(line 417,col 36)",
            "(line 418,col 9)-(line 421,col 47)",
            "(line 423,col 9)-(line 423,col 32)",
            "(line 424,col 9)-(line 424,col 32)",
            "(line 425,col 9)-(line 425,col 35)",
            "(line 426,col 9)-(line 426,col 44)",
            "(line 428,col 9)-(line 428,col 32)",
            "(line 429,col 9)-(line 429,col 26)",
            "(line 430,col 9)-(line 430,col 26)",
            "(line 431,col 9)-(line 431,col 49)",
            "(line 432,col 9)-(line 432,col 51)",
            "(line 434,col 9)-(line 434,col 48)",
            "(line 435,col 9)-(line 435,col 26)",
            "(line 436,col 9)-(line 436,col 49)",
            "(line 437,col 9)-(line 437,col 51)",
            "(line 439,col 9)-(line 439,col 64)",
            "(line 440,col 9)-(line 440,col 48)",
            "(line 441,col 9)-(line 441,col 26)",
            "(line 442,col 9)-(line 442,col 65)",
            "(line 443,col 9)-(line 443,col 51)",
            "(line 445,col 9)-(line 448,col 52)",
            "(line 450,col 9)-(line 454,col 47)",
            "(line 455,col 9)-(line 459,col 47)",
            "(line 461,col 9)-(line 461,col 33)",
            "(line 462,col 9)-(line 462,col 27)",
            "(line 463,col 9)-(line 463,col 49)",
            "(line 464,col 9)-(line 464,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(1, 4, a.multiply(a));\n        assertFraction(1, 3, a.multiply(b));\n        assertFraction(1, 3, b.multiply(a));\n        assertFraction(4, 9, b.multiply(b));\n\n        Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);\n        Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        Fraction f = f1.multiply(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiply(null);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        f1 = new Fraction(6, 35);\n        f  = f1.multiply(15);\n        Assert.assertEquals(18, f.getNumerator());\n        Assert.assertEquals(7, f.getDenominator());\n    }\n",
        "begin_line": 468,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 40)",
            "(line 471,col 9)-(line 471,col 40)",
            "(line 473,col 9)-(line 473,col 44)",
            "(line 474,col 9)-(line 474,col 44)",
            "(line 475,col 9)-(line 475,col 44)",
            "(line 476,col 9)-(line 476,col 44)",
            "(line 478,col 9)-(line 478,col 57)",
            "(line 479,col 9)-(line 479,col 73)",
            "(line 480,col 9)-(line 480,col 37)",
            "(line 481,col 9)-(line 481,col 65)",
            "(line 482,col 9)-(line 482,col 51)",
            "(line 484,col 9)-(line 487,col 52)",
            "(line 489,col 9)-(line 489,col 33)",
            "(line 490,col 9)-(line 490,col 29)",
            "(line 491,col 9)-(line 491,col 50)",
            "(line 492,col 9)-(line 492,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(0, 1, a.subtract(a));\n        assertFraction(-1, 6, a.subtract(b));\n        assertFraction(1, 6, b.subtract(a));\n        assertFraction(0, 1, b.subtract(b));\n\n        Fraction f = new Fraction(1,1);\n        try {\n            f.subtract(null);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        Fraction f1 = new Fraction(1,32768*3);\n        Fraction f2 = new Fraction(1,59049);\n        f = f1.subtract(f2);\n        Assert.assertEquals(-13085, f.getNumerator());\n        Assert.assertEquals(1934917632, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, 3);\n        f2 = new Fraction(1,3).negate();\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        f1 = new Fraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n        f = f1.subtract(1);\n        Assert.assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = new Fraction(1, Integer.MAX_VALUE);\n            f2 = new Fraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            Assert.fail(\"expecting MathArithmeticException\");  //should overflow\n        } catch (MathArithmeticException ex) {}\n\n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = new Fraction(Integer.MIN_VALUE, 5);\n        f2 = new Fraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(3,327680);\n        f2 = new Fraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n    }\n",
        "begin_line": 495,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 40)",
            "(line 498,col 9)-(line 498,col 40)",
            "(line 500,col 9)-(line 500,col 44)",
            "(line 501,col 9)-(line 501,col 45)",
            "(line 502,col 9)-(line 502,col 44)",
            "(line 503,col 9)-(line 503,col 44)",
            "(line 505,col 9)-(line 505,col 39)",
            "(line 506,col 9)-(line 509,col 52)",
            "(line 513,col 9)-(line 513,col 46)",
            "(line 514,col 9)-(line 514,col 44)",
            "(line 515,col 9)-(line 515,col 28)",
            "(line 516,col 9)-(line 516,col 54)",
            "(line 517,col 9)-(line 517,col 60)",
            "(line 519,col 9)-(line 519,col 48)",
            "(line 520,col 9)-(line 520,col 40)",
            "(line 521,col 9)-(line 521,col 28)",
            "(line 522,col 9)-(line 522,col 67)",
            "(line 523,col 9)-(line 523,col 51)",
            "(line 525,col 9)-(line 525,col 48)",
            "(line 526,col 9)-(line 526,col 26)",
            "(line 527,col 9)-(line 527,col 28)",
            "(line 528,col 9)-(line 528,col 67)",
            "(line 529,col 9)-(line 529,col 51)",
            "(line 530,col 9)-(line 530,col 27)",
            "(line 531,col 9)-(line 531,col 67)",
            "(line 532,col 9)-(line 532,col 51)",
            "(line 534,col 9)-(line 539,col 47)",
            "(line 542,col 9)-(line 542,col 48)",
            "(line 543,col 9)-(line 543,col 31)",
            "(line 544,col 9)-(line 547,col 47)",
            "(line 549,col 9)-(line 553,col 47)",
            "(line 555,col 9)-(line 559,col 47)",
            "(line 561,col 9)-(line 561,col 36)",
            "(line 562,col 9)-(line 562,col 35)",
            "(line 563,col 9)-(line 566,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testEqualsAndHashCode()",
        "snippet": "    @Test\n    public void testEqualsAndHashCode() {\n        Fraction zero  = new Fraction(0,1);\n        Fraction nullFraction = null;\n        Assert.assertTrue( zero.equals(zero));\n        Assert.assertFalse(zero.equals(nullFraction));\n        Assert.assertFalse(zero.equals(Double.valueOf(0)));\n        Fraction zero2 = new Fraction(0,2);\n        Assert.assertTrue(zero.equals(zero2));\n        Assert.assertEquals(zero.hashCode(), zero2.hashCode());\n        Fraction one = new Fraction(1,1);\n        Assert.assertFalse((one.equals(zero) ||zero.equals(one)));\n    }\n",
        "begin_line": 569,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 571,col 9)-(line 571,col 43)",
            "(line 572,col 9)-(line 572,col 37)",
            "(line 573,col 9)-(line 573,col 46)",
            "(line 574,col 9)-(line 574,col 54)",
            "(line 575,col 9)-(line 575,col 59)",
            "(line 576,col 9)-(line 576,col 43)",
            "(line 577,col 9)-(line 577,col 46)",
            "(line 578,col 9)-(line 578,col 63)",
            "(line 579,col 9)-(line 579,col 41)",
            "(line 580,col 9)-(line 580,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testGetReducedFraction()",
        "snippet": "    @Test\n    public void testGetReducedFraction() {\n        Fraction threeFourths = new Fraction(3, 4);\n        Assert.assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));\n        Assert.assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));\n        try {\n            Fraction.getReducedFraction(1, 0);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // expected\n        }\n        Assert.assertEquals(Fraction.getReducedFraction\n                (2, Integer.MIN_VALUE).getNumerator(),-1);\n        Assert.assertEquals(Fraction.getReducedFraction\n                (1, -1).getNumerator(), -1);\n    }\n",
        "begin_line": 583,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 51)",
            "(line 586,col 9)-(line 586,col 82)",
            "(line 587,col 9)-(line 587,col 84)",
            "(line 588,col 9)-(line 593,col 9)",
            "(line 594,col 9)-(line 595,col 58)",
            "(line 596,col 9)-(line 597,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testToString()",
        "snippet": "    @Test\n    public void testToString() {\n        Assert.assertEquals(\"0\", new Fraction(0, 3).toString());\n        Assert.assertEquals(\"3\", new Fraction(6, 2).toString());\n        Assert.assertEquals(\"2 / 3\", new Fraction(18, 27).toString());\n    }\n",
        "begin_line": 600,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 602,col 9)-(line 602,col 64)",
            "(line 603,col 9)-(line 603,col 64)",
            "(line 604,col 9)-(line 604,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() throws FractionConversionException {\n        Fraction[] fractions = {\n            new Fraction(3, 4), Fraction.ONE, Fraction.ZERO,\n            new Fraction(17), new Fraction(FastMath.PI, 1000),\n            new Fraction(-5, 2)\n        };\n        for (Fraction fraction : fractions) {\n            Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));\n        }\n    }\n",
        "begin_line": 607,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 609,col 9)-(line 613,col 10)",
            "(line 614,col 9)-(line 616,col 9)"
        ]
    }
]