[
    {
        "name": "LocalizedFormats.getLocalizedString#380",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java",
        "class_name": "org.apache.commons.math3.exception.util.LocalizedFormats",
        "signature": "org.apache.commons.math3.exception.util.LocalizedFormats.getLocalizedString(java.util.Locale)",
        "snippet": "    public String getLocalizedString(final Locale locale) {\n        try {\n            final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n            ResourceBundle bundle =\n                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                // the value of the resource is the translated format\n                return bundle.getString(toString());\n            }\n\n        } catch (MissingResourceException mre) { // NOPMD\n            // do nothing here\n        }\n\n        // either the locale is not supported or the resource is unknown\n        // don't translate and fall back to using the source format\n        return sourceFormat;\n\n    }\n",
        "begin_line": 380,
        "end_line": 398,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "MathIllegalStateException.getMessage#78",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.getMessage()",
        "snippet": "    @Override\n    public String getMessage() {\n        return context.getMessage();\n    }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.exception.util.ExceptionContextProvider": null,
            "java.lang.IllegalStateException": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "MathIllegalStateException.getLocalizedMessage#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.getLocalizedMessage()",
        "snippet": "    @Override\n    public String getLocalizedMessage() {\n        return context.getLocalizedMessage();\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.exception.util.ExceptionContextProvider": null,
            "java.lang.IllegalStateException": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "FractionConversionException.FractionConversionException#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/FractionConversionException.java",
        "class_name": "org.apache.commons.math3.fraction.FractionConversionException",
        "signature": "org.apache.commons.math3.fraction.FractionConversionException.FractionConversionException(double, long, long)",
        "snippet": "    public FractionConversionException(double value, long p, long q) {\n        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Constructs an exception with specified formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param value double value to convert\n     * @param p current numerator\n     * @param q current denominator\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ConvergenceException.ConvergenceException#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/ConvergenceException.java",
        "class_name": "org.apache.commons.math3.exception.ConvergenceException",
        "signature": "org.apache.commons.math3.exception.ConvergenceException.ConvergenceException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public ConvergenceException(Localizable pattern,\n                                Object ... args) {\n        getContext().addMessage(pattern, args);\n    }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "\n     * Construct the exception with a specific context and arguments.\n     *\n     * @param pattern Message pattern providing the specific context of\n     * the error.\n     * @param args Arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "Fraction.Fraction#141",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(double, int)",
        "snippet": "    public Fraction(double value, int maxDenominator)\n        throws FractionConversionException\n    {\n       this(value, 0, maxDenominator, 100);\n    }\n",
        "begin_line": 141,
        "end_line": 145,
        "comment": "\n     * Create a fraction given the double value and maximum denominator.\n     * <p>\n     * References:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     * Continued Fraction</a> equations (11) and (22)-(26)</li>\n     * </ul>\n     * </p>\n     * @param value the double value to convert to a fraction.\n     * @param maxDenominator The maximum allowed value for denominator\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#178",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(double, double, int, int)",
        "snippet": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (FastMath.abs(a0) > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                // in maxDenominator mode, if the last fraction was very close to the actual value\n                // q2 may overflow in the next iteration; in this case return the last one.\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n\n    }\n",
        "begin_line": 178,
        "end_line": 243,
        "comment": "\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigFraction.BigFraction#269",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.BigFraction(double, double, int, int)",
        "snippet": "    private BigFraction(final double value, final double epsilon,\n                        final int maxDenominator, int maxIterations)\n        throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            numerator = BigInteger.valueOf(a0);\n            denominator = BigInteger.ONE;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            final double r1 = 1.0 / (r0 - a0);\n            final long a1 = (long) FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                // in maxDenominator mode, if the last fraction was very close to the actual value\n                // q2 may overflow in the next iteration; in this case return the last one.\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            final double convergent = (double) p2 / (double) q2;\n            if ((n < maxIterations) &&\n                (FastMath.abs(convergent - value) > epsilon) &&\n                (q2 < maxDenominator)) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            numerator   = BigInteger.valueOf(p2);\n            denominator = BigInteger.valueOf(q2);\n        } else {\n            numerator   = BigInteger.valueOf(p1);\n            denominator = BigInteger.valueOf(q1);\n        }\n    }\n",
        "begin_line": 269,
        "end_line": 335,
        "comment": "\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER - a valid epsilon value and\n     * the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator\n     * has no effect). OR - a valid maxDenominator value and the epsilon value\n     * set to zero (that way epsilon only has effect if there is an exact match\n     * before the maxDenominator value is reached).\n     * </p>\n     * <p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     * https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value\n     *            the double value to convert to a fraction.\n     * @param epsilon\n     *            maximum error allowed. The resulting fraction is within\n     *            <code>epsilon</code> of <code>value</code>, in absolute terms.\n     * @param maxDenominator\n     *            maximum denominator value allowed.\n     * @param maxIterations\n     *            maximum number of convergents.\n     * @throws FractionConversionException\n     *             if the continued fraction failed to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigFraction.BigFraction#354",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.BigFraction(double, int)",
        "snippet": "    public BigFraction(final double value, final int maxDenominator)\n        throws FractionConversionException {\n        this(value, 0, maxDenominator, 100);\n    }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "\n     * Create a fraction given the double value and maximum denominator.\n     * <p>\n     * References:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     * Continued Fraction</a> equations (11) and (22)-(26)</li>\n     * </ul>\n     * </p>\n     *\n     * @param value\n     *            the double value to convert to a fraction.\n     * @param maxDenominator\n     *            The maximum allowed value for denominator.\n     * @throws FractionConversionException\n     *             if the continued fraction failed to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathIllegalStateException.MathIllegalStateException#68",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException()",
        "snippet": "    public MathIllegalStateException() {\n        this(LocalizedFormats.ILLEGAL_STATE);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 2
    },
    {
        "name": "MathIllegalStateException.getContext#73",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.getContext()",
        "snippet": "    public ExceptionContext getContext() {\n        return context;\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.exception.util.ExceptionContextProvider": "\n     * Gets a reference to the \"rich context\" data structure that allows to\n     * customize error messages and store key, value pairs in exceptions.\n     *\n     * @return a reference to the exception context.\n     ",
            "java.lang.IllegalStateException": null
        },
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 2
    },
    {
        "name": "MathIllegalStateException.MathIllegalStateException#44",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public MathIllegalStateException(Localizable pattern,\n                                     Object ... args) {\n        context = new ExceptionContext(this);\n        context.addMessage(pattern, args);\n    }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "\n     * Simple constructor.\n     *\n     * @param pattern Message pattern explaining the cause of the error.\n     * @param args Arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.floor#3335",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.floor(double)",
        "snippet": "    public static double floor(double x) {\n        long y;\n\n        if (x != x) { // NaN\n            return x;\n        }\n\n        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\n            return x;\n        }\n\n        y = (long) x;\n        if (x < 0 && y != x) {\n            y--;\n        }\n\n        if (y == 0) {\n            return x*y;\n        }\n\n        return y;\n    }\n",
        "begin_line": 3335,
        "end_line": 3356,
        "comment": " Get the largest whole number smaller than x.\n     * @param x number from which floor is requested\n     * @return a double number f such that f is an integer f <= x < f + 1.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1873
        },
        "num_failing_tests": 2
    },
    {
        "name": "BigFraction.getDenominatorAsInt#767",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.getDenominatorAsInt()",
        "snippet": "    public int getDenominatorAsInt() {\n        return denominator.intValue();\n    }\n",
        "begin_line": 767,
        "end_line": 769,
        "comment": "\n     * <p>\n     * Access the denominator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>int</tt>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigFraction.getNumeratorAsInt#800",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.getNumeratorAsInt()",
        "snippet": "    public int getNumeratorAsInt() {\n        return numerator.intValue();\n    }\n",
        "begin_line": 800,
        "end_line": 802,
        "comment": "\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#3023",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(double)",
        "snippet": "    public static double abs(double x) {\n        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));\n    }\n",
        "begin_line": 3023,
        "end_line": 3025,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1407
        },
        "num_failing_tests": 2
    },
    {
        "name": "Fraction.getDenominator#365",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.getDenominator()",
        "snippet": "    public int getDenominator() {\n        return denominator;\n    }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "\n     * Access the denominator.\n     * @return the denominator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1336
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.getNumerator#373",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.getNumerator()",
        "snippet": "    public int getNumerator() {\n        return numerator;\n    }\n",
        "begin_line": 373,
        "end_line": 375,
        "comment": "\n     * Access the numerator.\n     * @return the numerator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "LocalizedFormats.LocalizedFormats#370",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java",
        "class_name": "org.apache.commons.math3.exception.util.LocalizedFormats",
        "signature": "org.apache.commons.math3.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String)",
        "snippet": "    private LocalizedFormats(final String sourceFormat) {\n        this.sourceFormat = sourceFormat;\n    }\n",
        "begin_line": 370,
        "end_line": 372,
        "comment": " Simple constructor.\n     * @param sourceFormat source English format to use when no\n     * localized version is available\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.104
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastMath.abs#3000",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(long)",
        "snippet": "    public static long abs(final long x) {\n        final long l = x >>> 63;\n        // l is one if x negative zero else\n        // ~l+1 is zero if x is positive, -1 if x is negative\n        // x^(~l+1) is x is x is positive, ~x if x is negative\n        // add around\n        return (x ^ (~l + 1)) + l;\n    }\n",
        "begin_line": 3000,
        "end_line": 3007,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0851
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.checkNotNull#247",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/MathUtils.java",
        "class_name": "org.apache.commons.math3.util.MathUtils",
        "signature": "org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object, org.apache.commons.math3.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public static void checkNotNull(Object o,\n                                    Localizable pattern,\n                                    Object ... args)\n        throws NullArgumentException {\n        if (o == null) {\n            throw new NullArgumentException(pattern, args);\n        }\n    }\n",
        "begin_line": 247,
        "end_line": 254,
        "comment": "\n     * Checks that an object is not null.\n     *\n     * @param o Object to be checked.\n     * @param pattern Message pattern.\n     * @param args Arguments to replace the placeholders in {@code pattern}.\n     * @throws NullArgumentException if {@code o} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigFraction.BigFraction#120",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.BigFraction(java.math.BigInteger, java.math.BigInteger)",
        "snippet": "    public BigFraction(BigInteger num, BigInteger den) {\n        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);\n        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);\n        if (BigInteger.ZERO.equals(den)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        if (BigInteger.ZERO.equals(num)) {\n            numerator   = BigInteger.ZERO;\n            denominator = BigInteger.ONE;\n        } else {\n\n            // reduce numerator and denominator by greatest common denominator\n            final BigInteger gcd = num.gcd(den);\n            if (BigInteger.ONE.compareTo(gcd) < 0) {\n                num = num.divide(gcd);\n                den = den.divide(gcd);\n            }\n\n            // move sign to numerator\n            if (BigInteger.ZERO.compareTo(den) > 0) {\n                num = num.negate();\n                den = den.negate();\n            }\n\n            // store the values in the final fields\n            numerator   = num;\n            denominator = den;\n\n        }\n    }\n",
        "begin_line": 120,
        "end_line": 149,
        "comment": "\n     * Create a {@link BigFraction} given the numerator and denominator as\n     * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.\n     *\n     * @param num the numerator, must not be {@code null}.\n     * @param den the denominator, must not be {@code null}.\n     * @throws ZeroException if the denominator is zero.\n     * @throws NullArgumentException if either of the arguments is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigFraction.BigFraction#368",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.BigFraction(int)",
        "snippet": "    public BigFraction(final int num) {\n        this(BigInteger.valueOf(num), BigInteger.ONE);\n    }\n",
        "begin_line": 368,
        "end_line": 370,
        "comment": "\n     * <p>\n     * Create a {@link BigFraction} equivalent to the passed <tt>int</tt>, ie\n     * \"num / 1\".\n     * </p>\n     *\n     * @param num\n     *            the numerator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigFraction.BigFraction#383",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math3.fraction.BigFraction",
        "signature": "org.apache.commons.math3.fraction.BigFraction.BigFraction(int, int)",
        "snippet": "    public BigFraction(final int num, final int den) {\n        this(BigInteger.valueOf(num), BigInteger.valueOf(den));\n    }\n",
        "begin_line": 383,
        "end_line": 385,
        "comment": "\n     * <p>\n     * Create a {@link BigFraction} given the numerator and denominator as simple\n     * <tt>int</tt>. The {@link BigFraction} is reduced to lowest terms.\n     * </p>\n     *\n     * @param num\n     *            the numerator.\n     * @param den\n     *            the denominator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#2990",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(int)",
        "snippet": "    public static int abs(final int x) {\n        final int i = x >>> 31;\n        return (x ^ (~i + 1)) + i;\n    }\n",
        "begin_line": 2990,
        "end_line": 2993,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArithmeticUtils.gcd#250",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java",
        "class_name": "org.apache.commons.math3.util.ArithmeticUtils",
        "signature": "org.apache.commons.math3.util.ArithmeticUtils.gcd(int, int)",
        "snippet": "    public static int gcd(int p,\n                          int q)\n        throws MathArithmeticException {\n        int a = p;\n        int b = q;\n        if (a == 0 ||\n            b == 0) {\n            if (a == Integer.MIN_VALUE ||\n                b == Integer.MIN_VALUE) {\n                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                                  p, q);\n            }\n            return FastMath.abs(a + b);\n        }\n\n        long al = a;\n        long bl = b;\n        boolean useLong = false;\n        if (a < 0) {\n            if(Integer.MIN_VALUE == a) {\n                useLong = true;\n            } else {\n                a = -a;\n            }\n            al = -al;\n        }\n        if (b < 0) {\n            if (Integer.MIN_VALUE == b) {\n                useLong = true;\n            } else {\n                b = -b;\n            }\n            bl = -bl;\n        }\n        if (useLong) {\n            if(al == bl) {\n                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                                  p, q);\n            }\n            long blbu = bl;\n            bl = al;\n            al = blbu % al;\n            if (al == 0) {\n                if (bl > Integer.MAX_VALUE) {\n                    throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                                      p, q);\n                }\n                return (int) bl;\n            }\n            blbu = bl;\n\n            // Now \"al\" and \"bl\" fit in an \"int\".\n            b = (int) al;\n            a = (int) (blbu % al);\n        }\n\n        return gcdPositive(a, b);\n    }\n",
        "begin_line": 250,
        "end_line": 307,
        "comment": "\n     * Computes the greatest common divisor of the absolute value of two\n     * numbers, using a modified version of the \"binary gcd\" method.\n     * See Knuth 4.5.2 algorithm B.\n     * The algorithm is due to Josef Stein (1961).\n     * <br/>\n     * Special cases:\n     * <ul>\n     *  <li>The invocations\n     *   {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},\n     *   {@code gcd(Integer.MIN_VALUE, 0)} and\n     *   {@code gcd(0, Integer.MIN_VALUE)} throw an\n     *   {@code ArithmeticException}, because the result would be 2^31, which\n     *   is too large for an int value.</li>\n     *  <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and\n     *   {@code gcd(x, 0)} is the absolute value of {@code x}, except\n     *   for the special cases above.</li>\n     *  <li>The invocation {@code gcd(0, 0)} is the only one which returns\n     *   {@code 0}.</li>\n     * </ul>\n     *\n     * @param p Number.\n     * @param q Number.\n     * @return the greatest common divisor (never negative).\n     * @throws MathArithmeticException if the result cannot be represented as\n     * a non-negative {@code int} value.\n     * @since 1.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArithmeticUtils.gcdPositive#329",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java",
        "class_name": "org.apache.commons.math3.util.ArithmeticUtils",
        "signature": "org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(int, int)",
        "snippet": "    private static int gcdPositive(int a,\n                                   int b) {\n        if (a == 0) {\n            return b;\n        }\n        else if (b == 0) {\n            return a;\n        }\n\n        // Make \"a\" and \"b\" odd, keeping track of common power of 2.\n        final int aTwos = Integer.numberOfTrailingZeros(a);\n        a >>= aTwos;\n        final int bTwos = Integer.numberOfTrailingZeros(b);\n        b >>= bTwos;\n        final int shift = Math.min(aTwos, bTwos);\n\n        // \"a\" and \"b\" are positive.\n        // If a > b then \"gdc(a, b)\" is equal to \"gcd(a - b, b)\".\n        // If a < b then \"gcd(a, b)\" is equal to \"gcd(b - a, a)\".\n        // Hence, in the successive iterations:\n        //  \"a\" becomes the absolute difference of the current values,\n        //  \"b\" becomes the minimum of the current values.\n        while (a != b) {\n            final int delta = a - b;\n            b = Math.min(a, b);\n            a = Math.abs(delta);\n\n            // Remove any power of 2 in \"a\" (\"b\" is guaranteed to be odd).\n            a >>= Integer.numberOfTrailingZeros(a);\n        }\n\n        // Recover the common power of 2.\n        return a << shift;\n    }\n",
        "begin_line": 329,
        "end_line": 362,
        "comment": "\n     * Computes the greatest common divisor of two <em>positive</em> numbers\n     * (this precondition is <em>not</em> checked and the result is undefined\n     * if not fulfilled) using the \"binary gcd\" method which avoids division\n     * and modulo operations.\n     * See Knuth 4.5.2 algorithm B.\n     * The algorithm is due to Josef Stein (1961).\n     * <br/>\n     * Special cases:\n     * <ul>\n     *  <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and\n     *   {@code gcd(x, 0)} is the value of {@code x}.</li>\n     *  <li>The invocation {@code gcd(0, 0)} is the only one which returns\n     *   {@code 0}.</li>\n     * </ul>\n     *\n     * @param a Positive number.\n     * @param b Positive number.\n     * @return the greatest common divisor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#261",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(int, int)",
        "snippet": "    public Fraction(int num, int den) {\n        if (den == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);\n        }\n        if (den < 0) {\n            if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE) {\n                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);\n            }\n            num = -num;\n            den = -den;\n        }\n        // reduce numerator and denominator by greatest common denominator.\n        final int d = ArithmeticUtils.gcd(num, den);\n        if (d > 1) {\n            num /= d;\n            den /= d;\n        }\n\n        // move sign to numerator.\n        if (den < 0) {\n            num = -num;\n            den = -den;\n        }\n        this.numerator   = num;\n        this.denominator = den;\n    }\n",
        "begin_line": 261,
        "end_line": 289,
        "comment": "\n     * Create a fraction given the numerator and denominator.  The fraction is\n     * reduced to lowest terms.\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws MathArithmeticException if the denominator is {@code zero}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    }
]