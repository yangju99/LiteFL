[
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesTests.class);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.TimeSeriesTests(java.lang.String)",
        "snippet": "    public TimeSeriesTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        this.seriesA = new TimeSeries(\"Series A\", Year.class);\n        try {\n            this.seriesA.add(new Year(2000), new Integer(102000));\n            this.seriesA.add(new Year(2001), new Integer(102001));\n            this.seriesA.add(new Year(2002), new Integer(102002));\n            this.seriesA.add(new Year(2003), new Integer(102003));\n            this.seriesA.add(new Year(2004), new Integer(102004));\n            this.seriesA.add(new Year(2005), new Integer(102005));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesB = new TimeSeries(\"Series B\", Year.class);\n        try {\n            this.seriesB.add(new Year(2006), new Integer(202006));\n            this.seriesB.add(new Year(2007), new Integer(202007));\n            this.seriesB.add(new Year(2008), new Integer(202008));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesC = new TimeSeries(\"Series C\", Year.class);\n        try {\n            this.seriesC.add(new Year(1999), new Integer(301999));\n            this.seriesC.add(new Year(2000), new Integer(302000));\n            this.seriesC.add(new Year(2002), new Integer(302002));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n    }\n",
        "begin_line": 115,
        "end_line": 150,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 62)",
            "(line 118,col 9)-(line 128,col 9)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 138,col 9)",
            "(line 140,col 9)-(line 140,col 62)",
            "(line 141,col 9)-(line 148,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.gotSeriesChangeEvent = true;\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\n     * Sets the flag to indicate that a {@link SeriesChangeEvent} has been\n     * received.\n     *\n     * @param event  the event.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClone()",
        "snippet": "    public void testClone() {\n\n        TimeSeries series = new TimeSeries(\"Test Series\");\n\n        RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002);\n        try {\n            series.add(jan1st2002, new Integer(42));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        TimeSeries clone = null;\n        try {\n            clone = (TimeSeries) series.clone();\n            clone.setKey(\"Clone Series\");\n            try {\n                clone.update(jan1st2002, new Integer(10));\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        int seriesValue = series.getValue(jan1st2002).intValue();\n        int cloneValue = Integer.MAX_VALUE;\n        if (clone != null) {\n            cloneValue = clone.getValue(jan1st2002).intValue();\n        }\n\n        assertEquals(42, seriesValue);\n        assertEquals(10, cloneValue);\n        assertEquals(\"Test Series\", series.getKey());\n        if (clone != null) {\n            assertEquals(\"Clone Series\", clone.getKey());\n        }\n        else {\n            assertTrue(false);\n        }\n\n    }\n",
        "begin_line": 165,
        "end_line": 208,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 58)",
            "(line 169,col 9)-(line 169,col 80)",
            "(line 170,col 9)-(line 175,col 9)",
            "(line 177,col 9)-(line 177,col 32)",
            "(line 178,col 9)-(line 190,col 9)",
            "(line 192,col 9)-(line 192,col 65)",
            "(line 193,col 9)-(line 193,col 43)",
            "(line 194,col 9)-(line 196,col 9)",
            "(line 198,col 9)-(line 198,col 38)",
            "(line 199,col 9)-(line 199,col 37)",
            "(line 200,col 9)-(line 200,col 53)",
            "(line 201,col 9)-(line 206,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClone2()",
        "snippet": "    public void testClone2() {\n        TimeSeries s1 = new TimeSeries(\"S1\", Year.class);\n        s1.add(new Year(2007), 100.0);\n        s1.add(new Year(2008), null);\n        s1.add(new Year(2009), 200.0);\n        TimeSeries s2 = null;\n        try {\n            s2 = (TimeSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n\n        // check independence\n        s2.addOrUpdate(new Year(2009), 300.0);\n        assertFalse(s1.equals(s2));\n        s1.addOrUpdate(new Year(2009), 300.0);\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 213,
        "end_line": 232,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 57)",
            "(line 215,col 9)-(line 215,col 38)",
            "(line 216,col 9)-(line 216,col 37)",
            "(line 217,col 9)-(line 217,col 38)",
            "(line 218,col 9)-(line 218,col 29)",
            "(line 219,col 9)-(line 224,col 9)",
            "(line 225,col 9)-(line 225,col 34)",
            "(line 228,col 9)-(line 228,col 46)",
            "(line 229,col 9)-(line 229,col 35)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n\n        try {\n            this.seriesA.add(new Year(1999), new Integer(1));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        int value = this.seriesA.getValue(0).intValue();\n        assertEquals(1, value);\n\n    }\n",
        "begin_line": 237,
        "end_line": 249,
        "comment": "\n     * Add a value to series A for 1999.  It should be added at index 0.\n     ",
        "child_ranges": [
            "(line 239,col 9)-(line 244,col 9)",
            "(line 246,col 9)-(line 246,col 56)",
            "(line 247,col 9)-(line 247,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n\n        Number value1 = this.seriesA.getValue(new Year(1999));\n        assertNull(value1);\n        int value2 = this.seriesA.getValue(new Year(2000)).intValue();\n        assertEquals(102000, value2);\n\n    }\n",
        "begin_line": 254,
        "end_line": 261,
        "comment": "\n     * Tests the retrieval of values.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 62)",
            "(line 257,col 9)-(line 257,col 27)",
            "(line 258,col 9)-(line 258,col 70)",
            "(line 259,col 9)-(line 259,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete()",
        "snippet": "    public void testDelete() {\n        this.seriesA.delete(0, 0);\n        assertEquals(5, this.seriesA.getItemCount());\n        Number value = this.seriesA.getValue(new Year(2000));\n        assertNull(value);\n    }\n",
        "begin_line": 266,
        "end_line": 271,
        "comment": "\n     * Tests the deletion of values.\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 34)",
            "(line 268,col 9)-(line 268,col 53)",
            "(line 269,col 9)-(line 269,col 61)",
            "(line 270,col 9)-(line 270,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete2()",
        "snippet": "    public void testDelete2() {\n        TimeSeries s1 = new TimeSeries(\"Series\", Year.class);\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.addChangeListener(this);\n        this.gotSeriesChangeEvent = false;\n        s1.delete(new Year(2001));\n        assertTrue(this.gotSeriesChangeEvent);\n        assertEquals(2, s1.getItemCount());\n        assertEquals(null, s1.getValue(new Year(2001)));\n\n        // try deleting a time period that doesn't exist...\n        this.gotSeriesChangeEvent = false;\n        s1.delete(new Year(2006));\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // try deleting null\n        try {\n            s1.delete(null);\n            fail(\"Expected IllegalArgumentException.\");\n        }\n        catch (IllegalArgumentException e) {\n            // expected\n        }\n    }\n",
        "begin_line": 276,
        "end_line": 301,
        "comment": "\n     * Basic tests for the delete() method.\n     ",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 61)",
            "(line 278,col 9)-(line 278,col 38)",
            "(line 279,col 9)-(line 279,col 38)",
            "(line 280,col 9)-(line 280,col 37)",
            "(line 281,col 9)-(line 281,col 35)",
            "(line 282,col 9)-(line 282,col 42)",
            "(line 283,col 9)-(line 283,col 34)",
            "(line 284,col 9)-(line 284,col 46)",
            "(line 285,col 9)-(line 285,col 43)",
            "(line 286,col 9)-(line 286,col 56)",
            "(line 289,col 9)-(line 289,col 42)",
            "(line 290,col 9)-(line 290,col 34)",
            "(line 291,col 9)-(line 291,col 47)",
            "(line 294,col 9)-(line 300,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimeSeries s1 = new TimeSeries(\"A test\", Year.class);\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n        TimeSeries s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            s2 = (TimeSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertTrue(s1.equals(s2));\n\n    }\n",
        "begin_line": 306,
        "end_line": 333,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 61)",
            "(line 309,col 9)-(line 309,col 38)",
            "(line 310,col 9)-(line 310,col 38)",
            "(line 311,col 9)-(line 311,col 37)",
            "(line 312,col 9)-(line 312,col 38)",
            "(line 313,col 9)-(line 313,col 38)",
            "(line 314,col 9)-(line 314,col 29)",
            "(line 316,col 9)-(line 330,col 9)",
            "(line 331,col 9)-(line 331,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimeSeries s1 = new TimeSeries(\"Time Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n",
        "begin_line": 338,
        "end_line": 375,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 56)",
            "(line 340,col 9)-(line 340,col 56)",
            "(line 341,col 9)-(line 341,col 35)",
            "(line 342,col 9)-(line 342,col 30)",
            "(line 344,col 9)-(line 344,col 35)",
            "(line 345,col 9)-(line 345,col 35)",
            "(line 346,col 9)-(line 346,col 29)",
            "(line 348,col 9)-(line 348,col 41)",
            "(line 349,col 9)-(line 349,col 41)",
            "(line 350,col 9)-(line 350,col 26)",
            "(line 351,col 9)-(line 351,col 26)",
            "(line 352,col 9)-(line 352,col 35)",
            "(line 353,col 9)-(line 353,col 30)",
            "(line 355,col 9)-(line 355,col 26)",
            "(line 356,col 9)-(line 356,col 26)",
            "(line 357,col 9)-(line 357,col 35)",
            "(line 358,col 9)-(line 358,col 29)",
            "(line 360,col 9)-(line 360,col 36)",
            "(line 361,col 9)-(line 361,col 35)",
            "(line 362,col 9)-(line 362,col 30)",
            "(line 364,col 9)-(line 364,col 36)",
            "(line 365,col 9)-(line 365,col 35)",
            "(line 366,col 9)-(line 366,col 29)",
            "(line 368,col 9)-(line 368,col 34)",
            "(line 369,col 9)-(line 369,col 35)",
            "(line 370,col 9)-(line 370,col 30)",
            "(line 372,col 9)-(line 372,col 34)",
            "(line 373,col 9)-(line 373,col 35)",
            "(line 374,col 9)-(line 374,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        TimeSeries s1 = new TimeSeries(\"Series\", null, null, Day.class);\n        TimeSeries s2 = new TimeSeries(\"Series\", null, null, Day.class);\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 381,
        "end_line": 385,
        "comment": "\n     * Tests a specific bug report where null arguments in the constructor\n     * cause the equals() method to fail.  Fixed for 0.9.21.\n     ",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 72)",
            "(line 383,col 9)-(line 383,col 72)",
            "(line 384,col 9)-(line 384,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy1()",
        "snippet": "    public void testCreateCopy1() {\n\n        TimeSeries series = new TimeSeries(\"Series\", Month.class);\n        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);\n        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);\n        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);\n        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);\n        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);\n\n        try {\n            // copy a range before the start of the series data...\n            TimeSeries result1 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.DECEMBER, 2002));\n            assertEquals(0, result1.getItemCount());\n\n            // copy a range that includes only the first item in the series...\n            TimeSeries result2 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.JANUARY, 2003));\n            assertEquals(1, result2.getItemCount());\n\n            // copy a range that begins before and ends in the middle of the\n            // series...\n            TimeSeries result3 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.APRIL, 2003));\n            assertEquals(2, result3.getItemCount());\n\n            TimeSeries result4 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(5, result4.getItemCount());\n\n            TimeSeries result5 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(5, result5.getItemCount());\n\n            TimeSeries result6 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.JANUARY, 2003));\n            assertEquals(1, result6.getItemCount());\n\n            TimeSeries result7 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.APRIL, 2003));\n            assertEquals(2, result7.getItemCount());\n\n            TimeSeries result8 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(5, result8.getItemCount());\n\n            TimeSeries result9 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(5, result9.getItemCount());\n\n            TimeSeries result10 = series.createCopy(\n                    new Month(MonthConstants.MAY, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(3, result10.getItemCount());\n\n            TimeSeries result11 = series.createCopy(\n                    new Month(MonthConstants.MAY, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(3, result11.getItemCount());\n\n            TimeSeries result12 = series.createCopy(\n                    new Month(MonthConstants.DECEMBER, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(1, result12.getItemCount());\n\n            TimeSeries result13 = series.createCopy(\n                    new Month(MonthConstants.DECEMBER, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(1, result13.getItemCount());\n\n            TimeSeries result14 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2004),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(0, result14.getItemCount());\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n    }\n",
        "begin_line": 391,
        "end_line": 479,
        "comment": "\n     * Some tests to ensure that the createCopy(RegularTimePeriod,\n     * RegularTimePeriod) method is functioning correctly.\n     ",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 66)",
            "(line 394,col 9)-(line 394,col 66)",
            "(line 395,col 9)-(line 395,col 67)",
            "(line 396,col 9)-(line 396,col 63)",
            "(line 397,col 9)-(line 397,col 67)",
            "(line 398,col 9)-(line 398,col 67)",
            "(line 400,col 9)-(line 477,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy2()",
        "snippet": "    public void testCreateCopy2() {\n\n        TimeSeries series = new TimeSeries(\"Series\", Month.class);\n        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);\n        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);\n        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);\n        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);\n        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);\n\n        try {\n            // copy just the first item...\n            TimeSeries result1 = series.createCopy(0, 0);\n            assertEquals(new Month(1, 2003), result1.getTimePeriod(0));\n\n            // copy the first two items...\n            result1 = series.createCopy(0, 1);\n            assertEquals(new Month(2, 2003), result1.getTimePeriod(1));\n\n            // copy the middle three items...\n            result1 = series.createCopy(1, 3);\n            assertEquals(new Month(2, 2003), result1.getTimePeriod(0));\n            assertEquals(new Month(11, 2003), result1.getTimePeriod(2));\n\n            // copy the last two items...\n            result1 = series.createCopy(3, 4);\n            assertEquals(new Month(11, 2003), result1.getTimePeriod(0));\n            assertEquals(new Month(12, 2003), result1.getTimePeriod(1));\n\n            // copy the last item...\n            result1 = series.createCopy(4, 4);\n            assertEquals(new Month(12, 2003), result1.getTimePeriod(0));\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        // check negative first argument\n        boolean pass = false;\n        try {\n            /* TimeSeries result = */ series.createCopy(-1, 1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n\n        // check second argument less than first argument\n        pass = false;\n        try {\n            /* TimeSeries result = */ series.createCopy(1, 0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n\n        TimeSeries series2 = new TimeSeries(\"Series 2\");\n        try {\n            TimeSeries series3 = series2.createCopy(99, 999);\n            assertEquals(0, series3.getItemCount());\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n    }\n",
        "begin_line": 485,
        "end_line": 555,
        "comment": "\n     * Some tests to ensure that the createCopy(int, int) method is\n     * functioning correctly.\n     ",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 66)",
            "(line 488,col 9)-(line 488,col 66)",
            "(line 489,col 9)-(line 489,col 67)",
            "(line 490,col 9)-(line 490,col 63)",
            "(line 491,col 9)-(line 491,col 67)",
            "(line 492,col 9)-(line 492,col 67)",
            "(line 494,col 9)-(line 519,col 9)",
            "(line 522,col 9)-(line 522,col 29)",
            "(line 523,col 9)-(line 531,col 9)",
            "(line 532,col 9)-(line 532,col 25)",
            "(line 535,col 9)-(line 535,col 21)",
            "(line 536,col 9)-(line 544,col 9)",
            "(line 545,col 9)-(line 545,col 25)",
            "(line 547,col 9)-(line 547,col 56)",
            "(line 548,col 9)-(line 554,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n\n        TimeSeries s1 = new TimeSeries(\"S1\", Year.class);\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n\n        assertTrue(s1.getItemCount() == 5);\n        s1.setMaximumItemCount(3);\n        assertTrue(s1.getItemCount() == 3);\n        TimeSeriesDataItem item = s1.getDataItem(0);\n        assertTrue(item.getPeriod().equals(new Year(2002)));\n\n    }\n",
        "begin_line": 562,
        "end_line": 577,
        "comment": "\n     * Test the setMaximumItemCount() method to ensure that it removes items\n     * from the series if necessary.\n     ",
        "child_ranges": [
            "(line 564,col 9)-(line 564,col 57)",
            "(line 565,col 9)-(line 565,col 38)",
            "(line 566,col 9)-(line 566,col 38)",
            "(line 567,col 9)-(line 567,col 37)",
            "(line 568,col 9)-(line 568,col 38)",
            "(line 569,col 9)-(line 569,col 38)",
            "(line 571,col 9)-(line 571,col 43)",
            "(line 572,col 9)-(line 572,col 34)",
            "(line 573,col 9)-(line 573,col 43)",
            "(line 574,col 9)-(line 574,col 52)",
            "(line 575,col 9)-(line 575,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate()",
        "snippet": "    public void testAddOrUpdate() {\n        TimeSeries s1 = new TimeSeries(\"S1\", Year.class);\n        s1.setMaximumItemCount(2);\n        s1.addOrUpdate(new Year(2000), 100.0);\n        assertEquals(1, s1.getItemCount());\n        s1.addOrUpdate(new Year(2001), 101.0);\n        assertEquals(2, s1.getItemCount());\n        s1.addOrUpdate(new Year(2001), 102.0);\n        assertEquals(2, s1.getItemCount());\n        s1.addOrUpdate(new Year(2002), 103.0);\n        assertEquals(2, s1.getItemCount());\n    }\n",
        "begin_line": 582,
        "end_line": 593,
        "comment": "\n     * Some checks for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 583,col 9)-(line 583,col 57)",
            "(line 584,col 9)-(line 584,col 34)",
            "(line 585,col 9)-(line 585,col 46)",
            "(line 586,col 9)-(line 586,col 43)",
            "(line 587,col 9)-(line 587,col 46)",
            "(line 588,col 9)-(line 588,col 43)",
            "(line 589,col 9)-(line 589,col 46)",
            "(line 590,col 9)-(line 590,col 43)",
            "(line 591,col 9)-(line 591,col 46)",
            "(line 592,col 9)-(line 592,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1075255()",
        "snippet": "    public void testBug1075255() {\n        TimeSeries ts = new TimeSeries(\"dummy\", FixedMillisecond.class);\n        ts.add(new FixedMillisecond(0L), 0.0);\n        TimeSeries ts2 = new TimeSeries(\"dummy2\", FixedMillisecond.class);\n        ts2.add(new FixedMillisecond(0L), 1.0);\n        try {\n            ts.addAndOrUpdate(ts2);\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            assertTrue(false);\n        }\n        assertEquals(1, ts.getItemCount());\n    }\n",
        "begin_line": 598,
        "end_line": 611,
        "comment": "\n     * A test for the bug report 1075255.\n     ",
        "child_ranges": [
            "(line 599,col 9)-(line 599,col 72)",
            "(line 600,col 9)-(line 600,col 46)",
            "(line 601,col 9)-(line 601,col 74)",
            "(line 602,col 9)-(line 602,col 47)",
            "(line 603,col 9)-(line 609,col 9)",
            "(line 610,col 9)-(line 610,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1832432()",
        "snippet": "    public void testBug1832432() {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        TimeSeries s2 = null;\n        try {\n            s2 = (TimeSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n\n        // test independence\n        s1.add(new Day(1, 1, 2007), 100.0);\n        assertFalse(s1.equals(s2));\n    }\n",
        "begin_line": 616,
        "end_line": 632,
        "comment": "\n     * A test for bug 1832432.\n     ",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 49)",
            "(line 618,col 9)-(line 618,col 29)",
            "(line 619,col 9)-(line 624,col 9)",
            "(line 625,col 9)-(line 625,col 29)",
            "(line 626,col 9)-(line 626,col 51)",
            "(line 627,col 9)-(line 627,col 34)",
            "(line 630,col 9)-(line 630,col 43)",
            "(line 631,col 9)-(line 631,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        TimeSeries series = new TimeSeries(\"Series\", Month.class);\n        assertEquals(-1, series.getIndex(new Month(1, 2003)));\n\n        series.add(new Month(1, 2003), 45.0);\n        assertEquals(0, series.getIndex(new Month(1, 2003)));\n        assertEquals(-1, series.getIndex(new Month(12, 2002)));\n        assertEquals(-2, series.getIndex(new Month(2, 2003)));\n\n        series.add(new Month(3, 2003), 55.0);\n        assertEquals(-1, series.getIndex(new Month(12, 2002)));\n        assertEquals(0, series.getIndex(new Month(1, 2003)));\n        assertEquals(-2, series.getIndex(new Month(2, 2003)));\n        assertEquals(1, series.getIndex(new Month(3, 2003)));\n        assertEquals(-3, series.getIndex(new Month(4, 2003)));\n    }\n",
        "begin_line": 637,
        "end_line": 652,
        "comment": "\n     * Some checks for the getIndex() method.\n     ",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 66)",
            "(line 639,col 9)-(line 639,col 62)",
            "(line 641,col 9)-(line 641,col 45)",
            "(line 642,col 9)-(line 642,col 61)",
            "(line 643,col 9)-(line 643,col 63)",
            "(line 644,col 9)-(line 644,col 62)",
            "(line 646,col 9)-(line 646,col 45)",
            "(line 647,col 9)-(line 647,col 63)",
            "(line 648,col 9)-(line 648,col 61)",
            "(line 649,col 9)-(line 649,col 62)",
            "(line 650,col 9)-(line 650,col 61)",
            "(line 651,col 9)-(line 651,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem1()",
        "snippet": "    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n\n        // can't get anything yet...just an exception\n        boolean pass = false;\n        try {\n            /*TimeSeriesDataItem item =*/ series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            /*item = */series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            /*item = */series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 657,
        "end_line": 690,
        "comment": "\n     * Some checks for the getDataItem(int) method.\n     ",
        "child_ranges": [
            "(line 658,col 9)-(line 658,col 60)",
            "(line 661,col 9)-(line 661,col 29)",
            "(line 662,col 9)-(line 667,col 9)",
            "(line 668,col 9)-(line 668,col 25)",
            "(line 670,col 9)-(line 670,col 42)",
            "(line 671,col 9)-(line 671,col 56)",
            "(line 672,col 9)-(line 672,col 55)",
            "(line 673,col 9)-(line 673,col 21)",
            "(line 674,col 9)-(line 679,col 9)",
            "(line 680,col 9)-(line 680,col 25)",
            "(line 682,col 9)-(line 682,col 21)",
            "(line 683,col 9)-(line 688,col 9)",
            "(line 689,col 9)-(line 689,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem2()",
        "snippet": "    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n        assertNull(series.getDataItem(new Year(2006)));\n\n        // try a null argument\n        boolean pass = false;\n        try {\n            /* TimeSeriesDataItem item = */ series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 695,
        "end_line": 708,
        "comment": "\n     * Some checks for the getDataItem(RegularTimePeriod) method.\n     ",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 60)",
            "(line 697,col 9)-(line 697,col 55)",
            "(line 700,col 9)-(line 700,col 29)",
            "(line 701,col 9)-(line 706,col 9)",
            "(line 707,col 9)-(line 707,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems()",
        "snippet": "    public void testRemoveAgedItems() {\n        TimeSeries series = new TimeSeries(\"Test Series\", Year.class);\n        series.addChangeListener(this);\n        assertEquals(Long.MAX_VALUE, series.getMaximumItemAge());\n        assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount());\n        this.gotSeriesChangeEvent = false;\n\n        // test empty series\n        series.removeAgedItems(true);\n        assertEquals(0, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // test series with one item\n        series.add(new Year(1999), 1.0);\n        series.setMaximumItemAge(0);\n        this.gotSeriesChangeEvent = false;\n        series.removeAgedItems(true);\n        assertEquals(1, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // test series with two items\n        series.setMaximumItemAge(10);\n        series.add(new Year(2001), 2.0);\n        this.gotSeriesChangeEvent = false;\n        series.setMaximumItemAge(2);\n        assertEquals(2, series.getItemCount());\n        assertEquals(0, series.getIndex(new Year(1999)));\n        assertFalse(this.gotSeriesChangeEvent);\n        series.setMaximumItemAge(1);\n        assertEquals(1, series.getItemCount());\n        assertEquals(0, series.getIndex(new Year(2001)));\n        assertTrue(this.gotSeriesChangeEvent);\n    }\n",
        "begin_line": 713,
        "end_line": 745,
        "comment": "\n     * Some checks for the removeAgedItems() method.\n     ",
        "child_ranges": [
            "(line 714,col 9)-(line 714,col 70)",
            "(line 715,col 9)-(line 715,col 39)",
            "(line 716,col 9)-(line 716,col 65)",
            "(line 717,col 9)-(line 717,col 70)",
            "(line 718,col 9)-(line 718,col 42)",
            "(line 721,col 9)-(line 721,col 37)",
            "(line 722,col 9)-(line 722,col 47)",
            "(line 723,col 9)-(line 723,col 47)",
            "(line 726,col 9)-(line 726,col 40)",
            "(line 727,col 9)-(line 727,col 36)",
            "(line 728,col 9)-(line 728,col 42)",
            "(line 729,col 9)-(line 729,col 37)",
            "(line 730,col 9)-(line 730,col 47)",
            "(line 731,col 9)-(line 731,col 47)",
            "(line 734,col 9)-(line 734,col 37)",
            "(line 735,col 9)-(line 735,col 40)",
            "(line 736,col 9)-(line 736,col 42)",
            "(line 737,col 9)-(line 737,col 36)",
            "(line 738,col 9)-(line 738,col 47)",
            "(line 739,col 9)-(line 739,col 57)",
            "(line 740,col 9)-(line 740,col 47)",
            "(line 741,col 9)-(line 741,col 36)",
            "(line 742,col 9)-(line 742,col 47)",
            "(line 743,col 9)-(line 743,col 57)",
            "(line 744,col 9)-(line 744,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems2()",
        "snippet": "    public void testRemoveAgedItems2() {\n        long y2006 = 1157087372534L;  // milliseconds somewhere in 2006\n        TimeSeries series = new TimeSeries(\"Test Series\", Year.class);\n        series.addChangeListener(this);\n        assertEquals(Long.MAX_VALUE, series.getMaximumItemAge());\n        assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount());\n        this.gotSeriesChangeEvent = false;\n\n        // test empty series\n        series.removeAgedItems(y2006, true);\n        assertEquals(0, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // test a series with 1 item\n        series.add(new Year(2004), 1.0);\n        series.setMaximumItemAge(1);\n        this.gotSeriesChangeEvent = false;\n        series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true);\n        assertEquals(1, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n        series.removeAgedItems(y2006, true);\n        assertEquals(0, series.getItemCount());\n        assertTrue(this.gotSeriesChangeEvent);\n\n        // test a series with two items\n        series.setMaximumItemAge(2);\n        series.add(new Year(2003), 1.0);\n        series.add(new Year(2005), 2.0);\n        assertEquals(2, series.getItemCount());\n        this.gotSeriesChangeEvent = false;\n        assertEquals(2, series.getItemCount());\n\n        series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true);\n        assertEquals(2, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n        series.removeAgedItems(y2006, true);\n        assertEquals(1, series.getItemCount());\n        assertTrue(this.gotSeriesChangeEvent);\n    }\n",
        "begin_line": 750,
        "end_line": 788,
        "comment": "\n     * Some checks for the removeAgedItems(long, boolean) method.\n     ",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 36)",
            "(line 752,col 9)-(line 752,col 70)",
            "(line 753,col 9)-(line 753,col 39)",
            "(line 754,col 9)-(line 754,col 65)",
            "(line 755,col 9)-(line 755,col 70)",
            "(line 756,col 9)-(line 756,col 42)",
            "(line 759,col 9)-(line 759,col 44)",
            "(line 760,col 9)-(line 760,col 47)",
            "(line 761,col 9)-(line 761,col 47)",
            "(line 764,col 9)-(line 764,col 40)",
            "(line 765,col 9)-(line 765,col 36)",
            "(line 766,col 9)-(line 766,col 42)",
            "(line 767,col 9)-(line 767,col 76)",
            "(line 768,col 9)-(line 768,col 47)",
            "(line 769,col 9)-(line 769,col 47)",
            "(line 770,col 9)-(line 770,col 44)",
            "(line 771,col 9)-(line 771,col 47)",
            "(line 772,col 9)-(line 772,col 46)",
            "(line 775,col 9)-(line 775,col 36)",
            "(line 776,col 9)-(line 776,col 40)",
            "(line 777,col 9)-(line 777,col 40)",
            "(line 778,col 9)-(line 778,col 47)",
            "(line 779,col 9)-(line 779,col 42)",
            "(line 780,col 9)-(line 780,col 47)",
            "(line 782,col 9)-(line 782,col 76)",
            "(line 783,col 9)-(line 783,col 47)",
            "(line 784,col 9)-(line 784,col 47)",
            "(line 785,col 9)-(line 785,col 44)",
            "(line 786,col 9)-(line 786,col 47)",
            "(line 787,col 9)-(line 787,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        TimeSeries s1 = new TimeSeries(\"Test\");\n        TimeSeries s2 = new TimeSeries(\"Test\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(1, 1, 2007), 500.0);\n        s2.add(new Day(1, 1, 2007), 500.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(2, 1, 2007), null);\n        s2.add(new Day(2, 1, 2007), null);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(5, 1, 2007), 111.0);\n        s2.add(new Day(5, 1, 2007), 111.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(9, 1, 2007), 1.0);\n        s2.add(new Day(9, 1, 2007), 1.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }\n",
        "begin_line": 793,
        "end_line": 818,
        "comment": "\n     * Some simple checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 794,col 9)-(line 794,col 47)",
            "(line 795,col 9)-(line 795,col 47)",
            "(line 796,col 9)-(line 796,col 29)",
            "(line 797,col 9)-(line 797,col 51)",
            "(line 799,col 9)-(line 799,col 43)",
            "(line 800,col 9)-(line 800,col 43)",
            "(line 801,col 9)-(line 801,col 29)",
            "(line 802,col 9)-(line 802,col 51)",
            "(line 804,col 9)-(line 804,col 42)",
            "(line 805,col 9)-(line 805,col 42)",
            "(line 806,col 9)-(line 806,col 29)",
            "(line 807,col 9)-(line 807,col 51)",
            "(line 809,col 9)-(line 809,col 43)",
            "(line 810,col 9)-(line 810,col 43)",
            "(line 811,col 9)-(line 811,col 29)",
            "(line 812,col 9)-(line 812,col 51)",
            "(line 814,col 9)-(line 814,col 41)",
            "(line 815,col 9)-(line 815,col 41)",
            "(line 816,col 9)-(line 816,col 29)",
            "(line 817,col 9)-(line 817,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1864222()",
        "snippet": "    public void testBug1864222() {\n        TimeSeries s = new TimeSeries(\"S\");\n        s.add(new Day(19, 8, 2005), 1);\n        s.add(new Day(31, 1, 2006), 1);\n        boolean pass = true;\n        try {\n            s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 823,
        "end_line": 835,
        "comment": "\n     * Test for bug report 1864222.\n     ",
        "child_ranges": [
            "(line 824,col 9)-(line 824,col 43)",
            "(line 825,col 9)-(line 825,col 39)",
            "(line 826,col 9)-(line 826,col 39)",
            "(line 827,col 9)-(line 827,col 28)",
            "(line 828,col 9)-(line 833,col 9)",
            "(line 834,col 9)-(line 834,col 25)"
        ]
    }
]