[
    {
        "name": "TimeSeries.createCopy#876",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.createCopy(int, int)",
        "snippet": "    public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return copy;\n    }\n",
        "begin_line": 876,
        "end_line": 902,
        "comment": "\r\n     * Creates a new timeseries by copying a subset of the data in this time\r\n     * series.\r\n     *\r\n     * @param start  the index of the first time period to copy.\r\n     * @param end  the index of the last time period to copy.\r\n     *\r\n     * @return A series containing a copy of this times series from start until\r\n     *         end.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a cloning problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.createCopy#918",
        "is_bug": true,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.createCopy(org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod)",
        "snippet": "    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1);\n            if (startIndex == this.data.size()) {\n                emptyRange = true;  // start is after last data item\n            }\n        }\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {             // end period is not in original series\n            endIndex = -(endIndex + 1); // this is first item AFTER end period\n            endIndex = endIndex - 1;    // so this is last item BEFORE end\n        }\n        if (endIndex < 0) {\n            emptyRange = true;\n        }\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            return createCopy(startIndex, endIndex);\n        }\n\n    }\n",
        "begin_line": 918,
        "end_line": 956,
        "comment": "\r\n     * Creates a new timeseries by copying a subset of the data in this time\r\n     * series.\r\n     *\r\n     * @param start  the first time period to copy (<code>null</code> not\r\n     *         permitted).\r\n     * @param end  the last time period to copy (<code>null</code> not\r\n     *         permitted).\r\n     *\r\n     * @return A time series containing a copy of this time series from start\r\n     *         until end.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a cloning problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.isLeapYear#497",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.isLeapYear(int)",
        "snippet": "    public static boolean isLeapYear(final int yyyy) {\n\n        if ((yyyy % 4) != 0) {\n            return false;\n        }\n        else if ((yyyy % 400) == 0) {\n            return true;\n        }\n        else if ((yyyy % 100) == 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n\n    }\n",
        "begin_line": 497,
        "end_line": 512,
        "comment": "\n     * Determines whether or not the specified year is a leap year.\n     *\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return <code>true</code> if the specified year is a leap year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.Day#122",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.Day(int, int, int)",
        "snippet": "    public Day(int day, int month, int year) {\n        this.serialDate = SerialDate.createInstance(day, month, year);\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 122,
        "end_line": 125,
        "comment": "\r\n     * Constructs a new one day time period.\r\n     *\r\n     * @param day  the day-of-the-month.\r\n     * @param month  the month (1 to 12).\r\n     * @param year  the year (1900 <= year <= 9999).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.calcSerial#448",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.calcSerial(int, int, int)",
        "snippet": "    private int calcSerial(final int d, final int m, final int y) {\n        final int yy = ((y - 1900) * 365) + SerialDate.leapYearCount(y - 1);\n        int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];\n        if (m > MonthConstants.FEBRUARY) {\n            if (SerialDate.isLeapYear(y)) {\n                mm = mm + 1;\n            }\n        }\n        final int dd = d;\n        return yy + mm + dd + 1;\n    }\n",
        "begin_line": 448,
        "end_line": 458,
        "comment": "\n     * Calculate the serial number from the day, month and year.\n     * <P>\n     * 1-Jan-1900 = 2.\n     *\n     * @param d  the day.\n     * @param m  the month.\n     * @param y  the year.\n     *\n     * @return the serial number from the day, month and year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getIndex#429",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getIndex(org.jfree.data.time.RegularTimePeriod)",
        "snippet": "    public int getIndex(RegularTimePeriod period) {\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");\n        }\n        TimeSeriesDataItem dummy = new TimeSeriesDataItem(\n              period, Integer.MIN_VALUE);\n        return Collections.binarySearch(this.data, dummy);\n    }\n",
        "begin_line": 429,
        "end_line": 436,
        "comment": "\r\n     * Returns the index for the item (if any) that corresponds to a time\r\n     * period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     *\r\n     * @return The index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getSerialIndex#301",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getSerialIndex()",
        "snippet": "    public long getSerialIndex() {\n        return this.serialDate.toSerial();\n    }\n",
        "begin_line": 301,
        "end_line": 303,
        "comment": "\r\n     * Returns a serial index number for the day.\r\n     *\r\n     * @return The serial index number.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.toSerial#210",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.toSerial()",
        "snippet": "    public int toSerial() {\n        return this.serial;\n    }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\n     * Returns the serial number for the date, where 1 January 1900 = 2\n     * (this corresponds, almost, to the numbering system used in Microsoft\n     * Excel for Windows and Lotus 1-2-3).\n     *\n     * @return The serial number of this date.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.compare#307",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.compare(org.jfree.data.time.SerialDate)",
        "snippet": "    public int compare(final SerialDate other) {\n        return this.serial - other.toSerial();\n    }\n",
        "begin_line": 307,
        "end_line": 309,
        "comment": "\n     * Returns the difference (in days) between this date and the specified\n     * 'other' date.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return The difference (in days) between this date and the specified\n     *         'other' date.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getSerialDate#182",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getSerialDate()",
        "snippet": "    public SerialDate getSerialDate() {\n        return this.serialDate;\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\r\n     * Returns the day as a {@link SerialDate}.  Note: the reference that is\r\n     * returned should be an instance of an immutable {@link SerialDate}\r\n     * (otherwise the caller could use the reference to alter the state of\r\n     * this <code>Day</code> instance, and <code>Day</code> is supposed\r\n     * to be immutable).\r\n     *\r\n     * @return The day as a {@link SerialDate}.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.compareTo#398",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another Day object\n        // ----------------------------------------\n        if (o1 instanceof Day) {\n            Day d = (Day) o1;\n            result = -d.getSerialDate().compare(this.serialDate);\n        }\n\n        // CASE 2 : Comparing to another TimePeriod object\n        // -----------------------------------------------\n        else if (o1 instanceof RegularTimePeriod) {\n            // more difficult case - evaluate later...\n            result = 0;\n        }\n\n        // CASE 3 : Comparing to a non-TimePeriod object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 398,
        "end_line": 425,
        "comment": "\r\n     * Returns an integer indicating the order of this Day object relative to\r\n     * the specified object:\r\n     *\r\n     * negative == before, zero == same, positive == after.\r\n     *\r\n     * @param o1  the object to compare.\r\n     *\r\n     * @return negative == before, zero == same, positive == after.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.SpreadsheetDate#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.SpreadsheetDate(int, int, int)",
        "snippet": "    public SpreadsheetDate(final int day, final int month, final int year) {\n\n        if ((year >= 1900) && (year <= 9999)) {\n            this.year = year;\n        }\n        else {\n            throw new IllegalArgumentException(\n                \"The 'year' argument must be in range 1900 to 9999.\"\n            );\n        }\n\n        if ((month >= MonthConstants.JANUARY)\n                && (month <= MonthConstants.DECEMBER)) {\n            this.month = month;\n        }\n        else {\n            throw new IllegalArgumentException(\n                \"The 'month' argument must be in the range 1 to 12.\"\n            );\n        }\n\n        if ((day >= 1) && (day <= SerialDate.lastDayOfMonth(month, year))) {\n            this.day = day;\n        }\n        else {\n            throw new IllegalArgumentException(\"Invalid 'day' argument.\");\n        }\n\n        // the serial number needs to be synchronised with the day-month-year...\n        this.serial = calcSerial(day, month, year);\n\n    }\n",
        "begin_line": 107,
        "end_line": 138,
        "comment": "\n     * Creates a new date instance.\n     *\n     * @param day  the day (in the range 1 to 28/29/30/31).\n     * @param month  the month (in the range 1 to 12).\n     * @param year  the year (in the range 1900 to 9999).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.getYYYY#230",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.getYYYY()",
        "snippet": "    public int getYYYY() {\n        return this.year;\n    }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\n     * Returns the year (assume a valid range of 1900 to 9999).\n     *\n     * @return The year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.getMonth#239",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.getMonth()",
        "snippet": "    public int getMonth() {\n        return this.month;\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n     * Returns the month (January = 1, February = 2, March = 3).\n     *\n     * @return The month of the year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.getDayOfMonth#248",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.getDayOfMonth()",
        "snippet": "    public int getDayOfMonth() {\n        return this.day;\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * Returns the day of the month.\n     *\n     * @return The day of the month.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.SerialDate#210",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.SerialDate()",
        "snippet": "    protected SerialDate() {\n    }\n",
        "begin_line": 210,
        "end_line": 211,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.leapYearCount#524",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.leapYearCount(int)",
        "snippet": "    public static int leapYearCount(final int yyyy) {\n\n        final int leap4 = (yyyy - 1896) / 4;\n        final int leap100 = (yyyy - 1800) / 100;\n        final int leap400 = (yyyy - 1600) / 400;\n        return leap4 - leap100 + leap400;\n\n    }\n",
        "begin_line": 524,
        "end_line": 531,
        "comment": "\n     * Returns the number of leap years from 1900 to the specified year\n     * INCLUSIVE.\n     * <P>\n     * Note that 1900 is not a leap year.\n     *\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of leap years from 1900 to the specified year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.createInstance#790",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.createInstance(int, int, int)",
        "snippet": "    public static SerialDate createInstance(final int day, final int month,\n                                            final int yyyy) {\n        return new SpreadsheetDate(day, month, yyyy);\n    }\n",
        "begin_line": 790,
        "end_line": 793,
        "comment": "\n     * Factory method that returns an instance of some concrete subclass of\n     * {@link SerialDate}.\n     *\n     * @param day  the day (1-31).\n     * @param month  the month (1-12).\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return An instance of {@link SerialDate}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.peg#249",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 249,
        "end_line": 252,
        "comment": "\r\n     * Recalculates the start date/time and end date/time for this time period\r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getFirstMillisecond#316",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        int year = this.serialDate.getYYYY();\n        int month = this.serialDate.getMonth();\n        int day = this.serialDate.getDayOfMonth();\n        calendar.clear();\n        calendar.set(year, month - 1, day, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        //return calendar.getTimeInMillis();  // this won't work for JDK 1.3\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 316,
        "end_line": 325,
        "comment": "\r\n     * Returns the first millisecond of the day, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  calendar to use (<code>null</code> not permitted).\r\n     *\r\n     * @return The start of the day as milliseconds since 01-01-1970.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getLastMillisecond#338",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        int year = this.serialDate.getYYYY();\n        int month = this.serialDate.getMonth();\n        int day = this.serialDate.getDayOfMonth();\n        calendar.clear();\n        calendar.set(year, month - 1, day, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        //return calendar.getTimeInMillis();  // this won't work for JDK 1.3\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 338,
        "end_line": 347,
        "comment": "\r\n     * Returns the last millisecond of the day, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  calendar to use (<code>null</code> not permitted).\r\n     *\r\n     * @return The end of the day as milliseconds since 01-01-1970.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#141",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable)",
        "snippet": "    public TimeSeries(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,\n                Day.class);\n    }\n",
        "begin_line": 141,
        "end_line": 144,
        "comment": "\r\n     * Creates a new (empty) time series.  By default, a daily time series is\r\n     * created.  Use one of the other constructors if you require a different\r\n     * time period.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.compareTo#197",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another TimeSeriesDataItem object\n        // -------------------------------------------------------\n        if (o1 instanceof TimeSeriesDataItem) {\n            TimeSeriesDataItem datapair = (TimeSeriesDataItem) o1;\n            result = getPeriod().compareTo(datapair.getPeriod());\n        }\n\n        // CASE 2 : Comparing to a general object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 197,
        "end_line": 217,
        "comment": "\r\n     * Returns an integer indicating the order of this data pair object\r\n     * relative to another object.\r\n     * <P>\r\n     * For the order we consider only the timing:\r\n     * negative == before, zero == same, positive == after.\r\n     *\r\n     * @param o1  The object being compared to.\r\n     *\r\n     * @return An integer indicating the order of the data item object\r\n     *         relative to another object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.lastDayOfMonth#542",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.lastDayOfMonth(int, int)",
        "snippet": "    public static int lastDayOfMonth(final int month, final int yyyy) {\n\n        final int result = LAST_DAY_OF_MONTH[month];\n        if (month != FEBRUARY) {\n            return result;\n        }\n        else if (isLeapYear(yyyy)) {\n            return result + 1;\n        }\n        else {\n            return result;\n        }\n\n    }\n",
        "begin_line": 542,
        "end_line": 555,
        "comment": "\n     * Returns the number of the last day of the month, taking into account\n     * leap years.\n     *\n     * @param month  the month.\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of the last day of the month.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#559",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double)",
        "snippet": "    public void add(RegularTimePeriod period, double value) {\n        // defer argument checking...\n        add(period, value, true);\n    }\n",
        "begin_line": 559,
        "end_line": 562,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#572",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double, boolean)",
        "snippet": "    public void add(RegularTimePeriod period, double value, boolean notify) {\n        // defer argument checking...\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        add(item, notify);\n    }\n",
        "begin_line": 572,
        "end_line": 576,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.Year#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.Year(int)",
        "snippet": "    public Year(int year) {\n        if ((year < SerialDate.MINIMUM_YEAR_SUPPORTED)\n            || (year > SerialDate.MAXIMUM_YEAR_SUPPORTED)) {\n\n            throw new IllegalArgumentException(\n                \"Year constructor: year (\" + year + \") outside valid range.\");\n        }\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 96,
        "end_line": 105,
        "comment": "\r\n     * Creates a time period representing a single year.\r\n     *\r\n     * @param year  the year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getYear#135",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getYear()",
        "snippet": "    public int getYear() {\n        return this.year;\n    }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "\r\n     * Returns the year.\r\n     *\r\n     * @return The year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.peg#175",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "\r\n     * Recalculates the start date/time and end date/time for this time period\r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getSerialIndex#217",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getSerialIndex()",
        "snippet": "    public long getSerialIndex() {\n        return this.year;\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\r\n     * Returns a serial index number for the year.\r\n     * <P>\r\n     * The implementation simply returns the year number (e.g. 2002).\r\n     *\r\n     * @return The serial index number.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getFirstMillisecond#232",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.JANUARY, 1, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 232,
        "end_line": 238,
        "comment": "\r\n     * Returns the first millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The first millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getLastMillisecond#251",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.DECEMBER, 31, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 251,
        "end_line": 257,
        "comment": "\r\n     * Returns the last millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The last millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.compareTo#311",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another Year object\n        // -----------------------------------------\n        if (o1 instanceof Year) {\n            Year y = (Year) o1;\n            result = this.year - y.getYear();\n        }\n\n        // CASE 2 : Comparing to another TimePeriod object\n        // -----------------------------------------------\n        else if (o1 instanceof RegularTimePeriod) {\n            // more difficult case - evaluate later...\n            result = 0;\n        }\n\n        // CASE 3 : Comparing to a non-TimePeriod object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 311,
        "end_line": 338,
        "comment": "\r\n     * Returns an integer indicating the order of this <code>Year</code> object\r\n     * relative to the specified object:\r\n     *\r\n     * negative == before, zero == same, positive == after.\r\n     *\r\n     * @param o1  the object to compare.\r\n     *\r\n     * @return negative == before, zero == same, positive == after.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#586",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public void add(RegularTimePeriod period, Number value) {\n        // defer argument checking...\n        add(period, value, true);\n    }\n",
        "begin_line": 586,
        "end_line": 589,
        "comment": "\r\n     * Adds a new data item to the series and sends\r\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#600",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number, boolean)",
        "snippet": "    public void add(RegularTimePeriod period, Number value, boolean notify) {\n        // defer argument checking...\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        add(item, notify);\n    }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "\r\n     * Adds a new data item to the series and sends\r\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, double)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, double value) {\n        this(period, new Double(value));\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value associated with the time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#154",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.Class)",
        "snippet": "    public TimeSeries(Comparable name, Class timePeriodClass) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,\n                timePeriodClass);\n    }\n",
        "begin_line": 154,
        "end_line": 157,
        "comment": "\r\n     * Creates a new (empty) time series with the specified name and class\r\n     * of {@link RegularTimePeriod}.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     * @param timePeriodClass  the type of time period (<code>null</code> not\r\n     *                         permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#92",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, Number value) {\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");\n        }\n        this.period = period;\n        this.value = value;\n    }\n",
        "begin_line": 92,
        "end_line": 98,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.getPeriod#115",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.getPeriod()",
        "snippet": "    public RegularTimePeriod getPeriod() {\n        return this.period;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\r\n     * Returns the time period.\r\n     *\r\n     * @return The time period (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getDataItem#340",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getDataItem(int)",
        "snippet": "    public TimeSeriesDataItem getDataItem(int index) {\n        return (TimeSeriesDataItem) this.data.get(index);\n    }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "\r\n     * Returns a data item for the series.\r\n     *\r\n     * @param index  the item index (zero-based).\r\n     *\r\n     * @return The data item.\r\n     *\r\n     * @see #getDataItem(RegularTimePeriod)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getTimePeriod#371",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getTimePeriod(int)",
        "snippet": "    public RegularTimePeriod getTimePeriod(int index) {\n        return getDataItem(index).getPeriod();\n    }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\r\n     * Returns the time period at the specified index.\r\n     *\r\n     * @param index  the index of the data item.\r\n     *\r\n     * @return The time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#490",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem, boolean)",
        "snippet": "    public void add(TimeSeriesDataItem item, boolean notify) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n        if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {\n            StringBuffer b = new StringBuffer();\n            b.append(\"You are trying to add data where the time period class \");\n            b.append(\"is \");\n            b.append(item.getPeriod().getClass().getName());\n            b.append(\", but the TimeSeries is expecting an instance of \");\n            b.append(this.timePeriodClass.getName());\n            b.append(\".\");\n            throw new SeriesException(b.toString());\n        }\n\n        // make the change (if it's not a duplicate time period)...\n        boolean added = false;\n        int count = getItemCount();\n        if (count == 0) {\n            this.data.add(item);\n            added = true;\n        }\n        else {\n            RegularTimePeriod last = getTimePeriod(getItemCount() - 1);\n            if (item.getPeriod().compareTo(last) > 0) {\n                this.data.add(item);\n                added = true;\n            }\n            else {\n                int index = Collections.binarySearch(this.data, item);\n                if (index < 0) {\n                    this.data.add(-index - 1, item);\n                    added = true;\n                }\n                else {\n                    StringBuffer b = new StringBuffer();\n                    b.append(\"You are attempting to add an observation for \");\n                    b.append(\"the time period \");\n                    b.append(item.getPeriod().toString());\n                    b.append(\" but the series already contains an observation\");\n                    b.append(\" for that time period. Duplicates are not \");\n                    b.append(\"permitted.  Try using the addOrUpdate() method.\");\n                    throw new SeriesException(b.toString());\n                }\n            }\n        }\n        if (added) {\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            if (notify) {\n                fireSeriesChanged();\n            }\n        }\n\n    }\n",
        "begin_line": 490,
        "end_line": 550,
        "comment": "\r\n     * Adds a data item to the series and sends a\r\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\r\n     *              permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.removeAgedItems#737",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.removeAgedItems(boolean)",
        "snippet": "    public void removeAgedItems(boolean notify) {\n        // check if there are any values earlier than specified by the history\n        // count...\n        if (getItemCount() > 1) {\n            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();\n            boolean removed = false;\n            while ((latest - getTimePeriod(0).getSerialIndex())\n                    > this.maximumItemAge) {\n                this.data.remove(0);\n                removed = true;\n            }\n            if (removed && notify) {\n                fireSeriesChanged();\n            }\n        }\n    }\n",
        "begin_line": 737,
        "end_line": 752,
        "comment": "\r\n     * Age items in the series.  Ensure that the timespan from the youngest to\r\n     * the oldest record in the series does not exceed maximumItemAge time\r\n     * periods.  Oldest items will be removed if required.\r\n     *\r\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is\r\n     *                sent to registered listeners IF any items are removed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#60",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        super(source);\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#312",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 312,
        "end_line": 316,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.notifyListeners#324",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 324,
        "end_line": 334,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getItemCount#239",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#172",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.String, java.lang.String, java.lang.Class)",
        "snippet": "    public TimeSeries(Comparable name, String domain, String range,\n                      Class timePeriodClass) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.timePeriodClass = timePeriodClass;\n        this.data = new java.util.ArrayList();\n        this.maximumItemCount = Integer.MAX_VALUE;\n        this.maximumItemAge = Long.MAX_VALUE;\n    }\n",
        "begin_line": 172,
        "end_line": 181,
        "comment": "\r\n     * Creates a new time series that contains no data.\r\n     * <P>\r\n     * Descriptions can be specified for the domain and range.  One situation\r\n     * where this is helpful is when generating a chart for the time series -\r\n     * axis labels can be taken from the domain and range description.\r\n     *\r\n     * @param name  the name of the series (<code>null</code> not permitted).\r\n     * @param domain  the domain description (<code>null</code> permitted).\r\n     * @param range  the range description (<code>null</code> permitted).\r\n     * @param timePeriodClass  the type of time period (<code>null</code> not\r\n     *                         permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#101",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\r\n     * Creates a new series with the specified key.  \r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;   \n    }\n",
        "begin_line": 111,
        "end_line": 120,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    }
]