[
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 42)",
            "(line 61,col 9)-(line 61,col 54)",
            "(line 62,col 9)-(line 62,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()",
        "snippet": "    @Test\n    public void testConstructorNaN() {\n        Complex z = new Complex(3.0, Double.NaN);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(nan, 4.0);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(3.0, 4.0);\n        Assert.assertFalse(z.isNaN());\n    }\n",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 37)",
            "(line 70,col 9)-(line 70,col 34)",
            "(line 71,col 9)-(line 71,col 37)",
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 74,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(5.0, z.abs(), 1.0e-5);\n    }\n",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 42)",
            "(line 80,col 9)-(line 80,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsNaN()",
        "snippet": "    @Test\n    public void testAbsNaN() {\n        Assert.assertTrue(Double.isNaN(Complex.NaN.abs()));\n        Complex z = new Complex(inf, nan);\n        Assert.assertTrue(Double.isNaN(z.abs()));\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 59)",
            "(line 86,col 9)-(line 86,col 42)",
            "(line 87,col 9)-(line 87,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()",
        "snippet": "    @Test\n    public void testAbsInfinite() {\n        Complex z = new Complex(inf, 0);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(inf, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n    }\n",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 37)",
            "(line 97,col 9)-(line 97,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.add(y);\n        Assert.assertEquals(8.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 29)",
            "(line 105,col 9)-(line 105,col 54)",
            "(line 106,col 9)-(line 106,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddNaN()",
        "snippet": "    @Test\n    public void testAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.add(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = new Complex(1, nan);\n        Complex w = x.add(z);\n        Assert.assertSame(Complex.NaN, w);\n    }\n",
        "begin_line": 109,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 42)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 32)",
            "(line 115,col 9)-(line 115,col 29)",
            "(line 116,col 9)-(line 116,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddInf()",
        "snippet": "    @Test\n    public void testAddInf() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(inf, 0);\n        Complex w = x.add(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.add(z).getReal()));\n    }\n",
        "begin_line": 119,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 38)",
            "(line 122,col 9)-(line 122,col 40)",
            "(line 123,col 9)-(line 123,col 29)",
            "(line 124,col 9)-(line 124,col 52)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAdd()",
        "snippet": "    @Test\n    public void testScalarAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 132,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 42)",
            "(line 135,col 9)-(line 135,col 29)",
            "(line 136,col 9)-(line 136,col 48)",
            "(line 137,col 9)-(line 137,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAddNaN()",
        "snippet": "    @Test\n    public void testScalarAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 42)",
            "(line 143,col 9)-(line 143,col 36)",
            "(line 144,col 9)-(line 144,col 48)",
            "(line 145,col 9)-(line 145,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAddInf()",
        "snippet": "    @Test\n    public void testScalarAddInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n\n        x = new Complex(neginf, 0);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 148,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 38)",
            "(line 151,col 9)-(line 151,col 50)",
            "(line 153,col 9)-(line 153,col 48)",
            "(line 154,col 9)-(line 154,col 61)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 157,col 9)-(line 157,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugate()",
        "snippet": "    @Test\n    public void testConjugate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.conjugate();\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 164,col 9)-(line 164,col 54)",
            "(line 165,col 9)-(line 165,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()",
        "snippet": "    @Test\n    public void testConjugateNaN() {\n        Complex z = Complex.NaN.conjugate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 44)",
            "(line 171,col 9)-(line 171,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()",
        "snippet": "    @Test\n    public void testConjugateInfiinite() {\n        Complex z = new Complex(0, inf);\n        Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.conjugate().getImaginary(), 0);\n    }\n",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 40)",
            "(line 177,col 9)-(line 177,col 69)",
            "(line 178,col 9)-(line 178,col 35)",
            "(line 179,col 9)-(line 179,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.divide(y);\n        Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 182,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 42)",
            "(line 185,col 9)-(line 185,col 42)",
            "(line 186,col 9)-(line 186,col 32)",
            "(line 187,col 9)-(line 187,col 62)",
            "(line 188,col 9)-(line 188,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideReal()",
        "snippet": "    @Test\n    public void testDivideReal() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(2d, 0d);\n        Assert.assertEquals(new Complex(1d, 1.5), x.divide(y));\n\n    }\n",
        "begin_line": 191,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 40)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 195,col 9)-(line 195,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideImaginary()",
        "snippet": "    @Test\n    public void testDivideImaginary() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(0d, 2d);\n        Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y));\n    }\n",
        "begin_line": 199,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 40)",
            "(line 202,col 9)-(line 202,col 40)",
            "(line 203,col 9)-(line 203,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideInf()",
        "snippet": "    @Test\n    public void testDivideInf() {\n        Complex x = new Complex(3, 4);\n        Complex w = new Complex(neginf, inf);\n        Assert.assertTrue(x.divide(w).equals(Complex.ZERO));\n\n        Complex z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertEquals(inf, z.getImaginary(), 0);\n\n        w = new Complex(inf, inf);\n        z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n        Assert.assertEquals(inf, z.getReal(), 0);\n\n        w = new Complex(1, inf);\n        z = w.divide(w);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 206,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 38)",
            "(line 209,col 9)-(line 209,col 45)",
            "(line 210,col 9)-(line 210,col 60)",
            "(line 212,col 9)-(line 212,col 32)",
            "(line 213,col 9)-(line 213,col 53)",
            "(line 214,col 9)-(line 214,col 54)",
            "(line 216,col 9)-(line 216,col 34)",
            "(line 217,col 9)-(line 217,col 24)",
            "(line 218,col 9)-(line 218,col 58)",
            "(line 219,col 9)-(line 219,col 49)",
            "(line 221,col 9)-(line 221,col 32)",
            "(line 222,col 9)-(line 222,col 24)",
            "(line 223,col 9)-(line 223,col 53)",
            "(line 224,col 9)-(line 224,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZero()",
        "snippet": "    @Test\n    public void testDivideZero() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.ZERO);\n        // Assert.assertEquals(z, Complex.INF); // See MATH-657\n        Assert.assertEquals(z, Complex.NaN);\n    }\n",
        "begin_line": 227,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 42)",
            "(line 230,col 9)-(line 230,col 43)",
            "(line 232,col 9)-(line 232,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZeroZero()",
        "snippet": "    @Test\n    public void testDivideZeroZero() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex z = x.divide(Complex.ZERO);\n        Assert.assertEquals(z, Complex.NaN);\n    }\n",
        "begin_line": 235,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 42)",
            "(line 238,col 9)-(line 238,col 43)",
            "(line 239,col 9)-(line 239,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaN()",
        "snippet": "    @Test\n    public void testDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 242,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 42)",
            "(line 245,col 9)-(line 245,col 42)",
            "(line 246,col 9)-(line 246,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()",
        "snippet": "    @Test\n    public void testDivideNaNInf() {\n       Complex z = oneInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertEquals(inf, z.getImaginary(), 0);\n\n       z = negInfNegInf.divide(oneNaN);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n\n       z = negInfInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 249,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 251,col 8)-(line 251,col 46)",
            "(line 252,col 8)-(line 252,col 52)",
            "(line 253,col 8)-(line 253,col 53)",
            "(line 255,col 8)-(line 255,col 39)",
            "(line 256,col 8)-(line 256,col 52)",
            "(line 257,col 8)-(line 257,col 57)",
            "(line 259,col 8)-(line 259,col 41)",
            "(line 260,col 8)-(line 260,col 52)",
            "(line 261,col 8)-(line 261,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivide()",
        "snippet": "    @Test\n    public void testScalarDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n    }\n",
        "begin_line": 264,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 29)",
            "(line 268,col 9)-(line 268,col 48)",
            "(line 269,col 9)-(line 269,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN()",
        "snippet": "    @Test\n    public void testScalarDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n    }\n",
        "begin_line": 272,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 42)",
            "(line 275,col 9)-(line 275,col 36)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideInf()",
        "snippet": "    @Test\n    public void testScalarDivideInf() {\n        Complex x = new Complex(1,1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n\n        yDouble = Double.NEGATIVE_INFINITY;\n        yComplex = new Complex(yDouble);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n\n        x = new Complex(1, Double.NEGATIVE_INFINITY);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n    }\n",
        "begin_line": 280,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 37)",
            "(line 283,col 9)-(line 283,col 50)",
            "(line 284,col 9)-(line 284,col 48)",
            "(line 285,col 9)-(line 285,col 73)",
            "(line 287,col 9)-(line 287,col 43)",
            "(line 288,col 9)-(line 288,col 40)",
            "(line 289,col 9)-(line 289,col 73)",
            "(line 291,col 9)-(line 291,col 53)",
            "(line 292,col 9)-(line 292,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideZero()",
        "snippet": "    @Test\n    public void testScalarDivideZero() {\n        Complex x = new Complex(1,1);\n        TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0);\n    }\n",
        "begin_line": 295,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 37)",
            "(line 298,col 9)-(line 298,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal() {\n        Complex z = new Complex(5.0, 6.0);\n        Complex act = z.reciprocal();\n        double expRe = 5.0 / 61.0;\n        double expIm = -6.0 / 61.0;\n        Assert.assertEquals(expRe, act.getReal(), FastMath.ulp(expRe));\n        Assert.assertEquals(expIm, act.getImaginary(), FastMath.ulp(expIm));\n    }\n",
        "begin_line": 301,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 42)",
            "(line 304,col 9)-(line 304,col 37)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 306,col 35)",
            "(line 307,col 9)-(line 307,col 71)",
            "(line 308,col 9)-(line 308,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testReciprocalReal()",
        "snippet": "    @Test\n    public void testReciprocalReal() {\n        Complex z = new Complex(-2.0, 0.0);\n        Assert.assertEquals(new Complex(-0.5, 0.0), z.reciprocal());\n    }\n",
        "begin_line": 311,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 43)",
            "(line 314,col 9)-(line 314,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testReciprocalImaginary()",
        "snippet": "    @Test\n    public void testReciprocalImaginary() {\n        Complex z = new Complex(0.0, -2.0);\n        Assert.assertEquals(new Complex(0.0, 0.5), z.reciprocal());\n    }\n",
        "begin_line": 317,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 43)",
            "(line 320,col 9)-(line 320,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testReciprocalInf()",
        "snippet": "    @Test\n    public void testReciprocalInf() {\n        Complex z = new Complex(neginf, inf);\n        Assert.assertTrue(z.reciprocal().equals(Complex.ZERO));\n\n        z = new Complex(1, inf).reciprocal();\n        Assert.assertEquals(z, Complex.ZERO);\n    }\n",
        "begin_line": 323,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 45)",
            "(line 326,col 9)-(line 326,col 63)",
            "(line 328,col 9)-(line 328,col 45)",
            "(line 329,col 9)-(line 329,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testReciprocalZero()",
        "snippet": "    @Test\n    public void testReciprocalZero() {\n        Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.NaN);\n    }\n",
        "begin_line": 332,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testReciprocalNaN()",
        "snippet": "    @Test\n    public void testReciprocalNaN() {\n        Assert.assertTrue(Complex.NaN.reciprocal().isNaN());\n    }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.multiply(y);\n        Assert.assertEquals(-9.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 342,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 42)",
            "(line 345,col 9)-(line 345,col 42)",
            "(line 346,col 9)-(line 346,col 34)",
            "(line 347,col 9)-(line 347,col 55)",
            "(line 348,col 9)-(line 348,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()",
        "snippet": "    @Test\n    public void testMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.multiply(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = Complex.NaN.multiply(5);\n        Assert.assertSame(Complex.NaN, z);\n    }\n",
        "begin_line": 351,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 42)",
            "(line 354,col 9)-(line 354,col 44)",
            "(line 355,col 9)-(line 355,col 42)",
            "(line 356,col 9)-(line 356,col 36)",
            "(line 357,col 9)-(line 357,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyInfInf()",
        "snippet": "    @Test\n    public void testMultiplyInfInf() {\n        // Assert.assertTrue(infInf.multiply(infInf).isNaN()); // MATH-620\n        Assert.assertTrue(infInf.multiply(infInf).isInfinite());\n    }\n",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()",
        "snippet": "    @Test\n    public void testMultiplyNaNInf() {\n        Complex z = new Complex(1,1);\n        Complex w = z.multiply(infOne);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        // [MATH-164]\n        Assert.assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));\n\n        w = oneInf.multiply(oneNegInf);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        w = negInfNegInf.multiply(oneNaN);\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n\n        z = new Complex(1, neginf);\n        Assert.assertSame(Complex.INF, z.multiply(z));\n    }\n",
        "begin_line": 366,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 37)",
            "(line 369,col 9)-(line 369,col 39)",
            "(line 370,col 9)-(line 370,col 49)",
            "(line 371,col 9)-(line 371,col 54)",
            "(line 374,col 9)-(line 374,col 82)",
            "(line 375,col 9)-(line 375,col 82)",
            "(line 376,col 9)-(line 376,col 86)",
            "(line 378,col 9)-(line 378,col 39)",
            "(line 379,col 9)-(line 379,col 49)",
            "(line 380,col 9)-(line 380,col 54)",
            "(line 382,col 9)-(line 382,col 42)",
            "(line 383,col 9)-(line 383,col 53)",
            "(line 384,col 9)-(line 384,col 58)",
            "(line 386,col 9)-(line 386,col 35)",
            "(line 387,col 9)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiply()",
        "snippet": "    @Test\n    public void testScalarMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n        int zInt = -5;\n        Complex zComplex = new Complex(zInt);\n        Assert.assertEquals(x.multiply(zComplex), x.multiply(zInt));\n    }\n",
        "begin_line": 390,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 42)",
            "(line 393,col 9)-(line 393,col 29)",
            "(line 394,col 9)-(line 394,col 48)",
            "(line 395,col 9)-(line 395,col 71)",
            "(line 396,col 9)-(line 396,col 22)",
            "(line 397,col 9)-(line 397,col 45)",
            "(line 398,col 9)-(line 398,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN()",
        "snippet": "    @Test\n    public void testScalarMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 401,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 42)",
            "(line 404,col 9)-(line 404,col 36)",
            "(line 405,col 9)-(line 405,col 48)",
            "(line 406,col 9)-(line 406,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyInf()",
        "snippet": "    @Test\n    public void testScalarMultiplyInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n\n        yDouble = Double.NEGATIVE_INFINITY;\n        yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 409,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 38)",
            "(line 412,col 9)-(line 412,col 50)",
            "(line 413,col 9)-(line 413,col 48)",
            "(line 414,col 9)-(line 414,col 71)",
            "(line 416,col 9)-(line 416,col 43)",
            "(line 417,col 9)-(line 417,col 40)",
            "(line 418,col 9)-(line 418,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.negate();\n        Assert.assertEquals(-3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 421,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 42)",
            "(line 424,col 9)-(line 424,col 31)",
            "(line 425,col 9)-(line 425,col 55)",
            "(line 426,col 9)-(line 426,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegateNaN()",
        "snippet": "    @Test\n    public void testNegateNaN() {\n        Complex z = Complex.NaN.negate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 429,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 41)",
            "(line 432,col 9)-(line 432,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.subtract(y);\n        Assert.assertEquals(-2.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 435,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 42)",
            "(line 438,col 9)-(line 438,col 42)",
            "(line 439,col 9)-(line 439,col 34)",
            "(line 440,col 9)-(line 440,col 55)",
            "(line 441,col 9)-(line 441,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()",
        "snippet": "    @Test\n    public void testSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.subtract(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = new Complex(1, nan);\n        Complex w = x.subtract(z);\n        Assert.assertSame(Complex.NaN, w);\n    }\n",
        "begin_line": 444,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 42)",
            "(line 447,col 9)-(line 447,col 44)",
            "(line 448,col 9)-(line 448,col 42)",
            "(line 449,col 9)-(line 449,col 32)",
            "(line 450,col 9)-(line 450,col 34)",
            "(line 451,col 9)-(line 451,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractInf()",
        "snippet": "    @Test\n    public void testSubtractInf() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(neginf, 0);\n        Complex w = x.subtract(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.subtract(z).getReal()));\n    }\n",
        "begin_line": 454,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 38)",
            "(line 457,col 9)-(line 457,col 43)",
            "(line 458,col 9)-(line 458,col 34)",
            "(line 459,col 9)-(line 459,col 52)",
            "(line 460,col 9)-(line 460,col 49)",
            "(line 462,col 9)-(line 462,col 35)",
            "(line 463,col 9)-(line 463,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtract()",
        "snippet": "    @Test\n    public void testScalarSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 466,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 468,col 9)-(line 468,col 42)",
            "(line 469,col 9)-(line 469,col 29)",
            "(line 470,col 9)-(line 470,col 48)",
            "(line 471,col 9)-(line 471,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtractNaN()",
        "snippet": "    @Test\n    public void testScalarSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 474,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 42)",
            "(line 477,col 9)-(line 477,col 36)",
            "(line 478,col 9)-(line 478,col 48)",
            "(line 479,col 9)-(line 479,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtractInf()",
        "snippet": "    @Test\n    public void testScalarSubtractInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n\n        x = new Complex(neginf, 0);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 482,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 38)",
            "(line 485,col 9)-(line 485,col 50)",
            "(line 486,col 9)-(line 486,col 48)",
            "(line 487,col 9)-(line 487,col 71)",
            "(line 489,col 9)-(line 489,col 35)",
            "(line 490,col 9)-(line 490,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNull()",
        "snippet": "    @Test\n    public void testEqualsNull() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(null));\n    }\n",
        "begin_line": 494,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 42)",
            "(line 497,col 9)-(line 497,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsClass()",
        "snippet": "    @Test\n    public void testEqualsClass() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(this));\n    }\n",
        "begin_line": 500,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 502,col 9)-(line 502,col 42)",
            "(line 503,col 9)-(line 503,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsSame()",
        "snippet": "    @Test\n    public void testEqualsSame() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(x));\n    }\n",
        "begin_line": 506,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 42)",
            "(line 509,col 9)-(line 509,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()",
        "snippet": "    @Test\n    public void testEqualsTrue() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(y));\n    }\n",
        "begin_line": 512,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 42)",
            "(line 515,col 9)-(line 515,col 42)",
            "(line 516,col 9)-(line 516,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()",
        "snippet": "    @Test\n    public void testEqualsRealDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 519,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 42)",
            "(line 522,col 9)-(line 522,col 61)",
            "(line 523,col 9)-(line 523,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()",
        "snippet": "    @Test\n    public void testEqualsImaginaryDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 526,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 528,col 42)",
            "(line 529,col 9)-(line 529,col 61)",
            "(line 530,col 9)-(line 530,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()",
        "snippet": "    @Test\n    public void testEqualsNaN() {\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Complex complexNaN = Complex.NaN;\n        Assert.assertTrue(realNaN.equals(imaginaryNaN));\n        Assert.assertTrue(imaginaryNaN.equals(complexNaN));\n        Assert.assertTrue(realNaN.equals(complexNaN));\n    }\n",
        "begin_line": 533,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 55)",
            "(line 536,col 9)-(line 536,col 60)",
            "(line 537,col 9)-(line 537,col 41)",
            "(line 538,col 9)-(line 538,col 56)",
            "(line 539,col 9)-(line 539,col 59)",
            "(line 540,col 9)-(line 540,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testHashCode()",
        "snippet": "    @Test\n    public void testHashCode() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());\n        Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());\n    }\n",
        "begin_line": 543,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 42)",
            "(line 546,col 9)-(line 546,col 61)",
            "(line 547,col 9)-(line 547,col 55)",
            "(line 548,col 9)-(line 548,col 53)",
            "(line 549,col 9)-(line 549,col 55)",
            "(line 550,col 9)-(line 550,col 55)",
            "(line 551,col 9)-(line 551,col 60)",
            "(line 552,col 9)-(line 552,col 73)",
            "(line 553,col 9)-(line 553,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcos()",
        "snippet": "    @Test\n    public void testAcos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.936812, -2.30551);\n        TestUtils.assertEquals(expected, z.acos(), 1.0e-5);\n        TestUtils.assertEquals(new Complex(FastMath.acos(0), 0),\n                Complex.ZERO.acos(), 1.0e-12);\n    }\n",
        "begin_line": 556,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 38)",
            "(line 559,col 9)-(line 559,col 59)",
            "(line 560,col 9)-(line 560,col 59)",
            "(line 561,col 9)-(line 562,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosInf()",
        "snippet": "    @Test\n    public void testAcosInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.acos());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, infOne.acos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.acos());\n        TestUtils.assertSame(Complex.NaN, infInf.acos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.acos());\n    }\n",
        "begin_line": 565,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 567,col 9)-(line 567,col 57)",
            "(line 568,col 9)-(line 568,col 60)",
            "(line 569,col 9)-(line 569,col 57)",
            "(line 570,col 9)-(line 570,col 60)",
            "(line 571,col 9)-(line 571,col 57)",
            "(line 572,col 9)-(line 572,col 60)",
            "(line 573,col 9)-(line 573,col 60)",
            "(line 574,col 9)-(line 574,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosNaN()",
        "snippet": "    @Test\n    public void testAcosNaN() {\n        Assert.assertTrue(Complex.NaN.acos().isNaN());\n    }\n",
        "begin_line": 577,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 579,col 9)-(line 579,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsin()",
        "snippet": "    @Test\n    public void testAsin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.633984, 2.30551);\n        TestUtils.assertEquals(expected, z.asin(), 1.0e-5);\n    }\n",
        "begin_line": 582,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 584,col 9)-(line 584,col 38)",
            "(line 585,col 9)-(line 585,col 58)",
            "(line 586,col 9)-(line 586,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinNaN()",
        "snippet": "    @Test\n    public void testAsinNaN() {\n        Assert.assertTrue(Complex.NaN.asin().isNaN());\n    }\n",
        "begin_line": 589,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinInf()",
        "snippet": "    @Test\n    public void testAsinInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.asin());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, infOne.asin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.asin());\n        TestUtils.assertSame(Complex.NaN, infInf.asin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.asin());\n    }\n",
        "begin_line": 594,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 596,col 57)",
            "(line 597,col 9)-(line 597,col 60)",
            "(line 598,col 9)-(line 598,col 57)",
            "(line 599,col 9)-(line 599,col 60)",
            "(line 600,col 9)-(line 600,col 57)",
            "(line 601,col 9)-(line 601,col 60)",
            "(line 602,col 9)-(line 602,col 60)",
            "(line 603,col 9)-(line 603,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtan()",
        "snippet": "    @Test\n    public void testAtan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.44831, 0.158997);\n        TestUtils.assertEquals(expected, z.atan(), 1.0e-5);\n    }\n",
        "begin_line": 607,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 609,col 9)-(line 609,col 38)",
            "(line 610,col 9)-(line 610,col 58)",
            "(line 611,col 9)-(line 611,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanInf()",
        "snippet": "    @Test\n    public void testAtanInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.atan());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, infOne.atan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.atan());\n        TestUtils.assertSame(Complex.NaN, infInf.atan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.atan());\n    }\n",
        "begin_line": 614,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 616,col 9)-(line 616,col 57)",
            "(line 617,col 9)-(line 617,col 60)",
            "(line 618,col 9)-(line 618,col 57)",
            "(line 619,col 9)-(line 619,col 60)",
            "(line 620,col 9)-(line 620,col 57)",
            "(line 621,col 9)-(line 621,col 60)",
            "(line 622,col 9)-(line 622,col 60)",
            "(line 623,col 9)-(line 623,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanI()",
        "snippet": "    @Test\n    public void testAtanI() {\n        Assert.assertTrue(Complex.I.atan().isNaN());\n    }\n",
        "begin_line": 626,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 628,col 9)-(line 628,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanNaN()",
        "snippet": "    @Test\n    public void testAtanNaN() {\n        Assert.assertTrue(Complex.NaN.atan().isNaN());\n    }\n",
        "begin_line": 631,
        "end_line": 634,
        "comment": "",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCos()",
        "snippet": "    @Test\n    public void testCos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-27.03495, -3.851153);\n        TestUtils.assertEquals(expected, z.cos(), 1.0e-5);\n    }\n",
        "begin_line": 636,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 38)",
            "(line 639,col 9)-(line 639,col 61)",
            "(line 640,col 9)-(line 640,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosNaN()",
        "snippet": "    @Test\n    public void testCosNaN() {\n        Assert.assertTrue(Complex.NaN.cos().isNaN());\n    }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosInf()",
        "snippet": "    @Test\n    public void testCosInf() {\n        TestUtils.assertSame(infNegInf, oneInf.cos());\n        TestUtils.assertSame(infInf, oneNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, infOne.cos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.cos());\n        TestUtils.assertSame(Complex.NaN, infInf.cos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cos());\n    }\n",
        "begin_line": 648,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 54)",
            "(line 651,col 9)-(line 651,col 54)",
            "(line 652,col 9)-(line 652,col 56)",
            "(line 653,col 9)-(line 653,col 59)",
            "(line 654,col 9)-(line 654,col 56)",
            "(line 655,col 9)-(line 655,col 59)",
            "(line 656,col 9)-(line 656,col 59)",
            "(line 657,col 9)-(line 657,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosh()",
        "snippet": "    @Test\n    public void testCosh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.58066, -7.58155);\n        TestUtils.assertEquals(expected, z.cosh(), 1.0e-5);\n    }\n",
        "begin_line": 660,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 662,col 9)-(line 662,col 38)",
            "(line 663,col 9)-(line 663,col 59)",
            "(line 664,col 9)-(line 664,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshNaN()",
        "snippet": "    @Test\n    public void testCoshNaN() {\n        Assert.assertTrue(Complex.NaN.cosh().isNaN());\n    }\n",
        "begin_line": 667,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshInf()",
        "snippet": "    @Test\n    public void testCoshInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.cosh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.cosh());\n        TestUtils.assertSame(infInf, infOne.cosh());\n        TestUtils.assertSame(infNegInf, negInfOne.cosh());\n        TestUtils.assertSame(Complex.NaN, infInf.cosh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh());\n    }\n",
        "begin_line": 672,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 674,col 9)-(line 674,col 57)",
            "(line 675,col 9)-(line 675,col 60)",
            "(line 676,col 9)-(line 676,col 52)",
            "(line 677,col 9)-(line 677,col 58)",
            "(line 678,col 9)-(line 678,col 57)",
            "(line 679,col 9)-(line 679,col 60)",
            "(line 680,col 9)-(line 680,col 60)",
            "(line 681,col 9)-(line 681,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExp()",
        "snippet": "    @Test\n    public void testExp() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-13.12878, -15.20078);\n        TestUtils.assertEquals(expected, z.exp(), 1.0e-5);\n        TestUtils.assertEquals(Complex.ONE,\n                Complex.ZERO.exp(), 10e-12);\n        Complex iPi = Complex.I.multiply(new Complex(pi,0));\n        TestUtils.assertEquals(Complex.ONE.negate(),\n                iPi.exp(), 10e-12);\n    }\n",
        "begin_line": 684,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 686,col 9)-(line 686,col 38)",
            "(line 687,col 9)-(line 687,col 61)",
            "(line 688,col 9)-(line 688,col 58)",
            "(line 689,col 9)-(line 690,col 44)",
            "(line 691,col 9)-(line 691,col 60)",
            "(line 692,col 9)-(line 693,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpNaN()",
        "snippet": "    @Test\n    public void testExpNaN() {\n        Assert.assertTrue(Complex.NaN.exp().isNaN());\n    }\n",
        "begin_line": 696,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 698,col 9)-(line 698,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpInf()",
        "snippet": "    @Test\n    public void testExpInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.exp());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.exp());\n        TestUtils.assertSame(infInf, infOne.exp());\n        TestUtils.assertSame(Complex.ZERO, negInfOne.exp());\n        TestUtils.assertSame(Complex.NaN, infInf.exp());\n        TestUtils.assertSame(Complex.NaN, infNegInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.exp());\n    }\n",
        "begin_line": 701,
        "end_line": 711,
        "comment": "",
        "child_ranges": [
            "(line 703,col 9)-(line 703,col 56)",
            "(line 704,col 9)-(line 704,col 59)",
            "(line 705,col 9)-(line 705,col 51)",
            "(line 706,col 9)-(line 706,col 60)",
            "(line 707,col 9)-(line 707,col 56)",
            "(line 708,col 9)-(line 708,col 59)",
            "(line 709,col 9)-(line 709,col 59)",
            "(line 710,col 9)-(line 710,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLog()",
        "snippet": "    @Test\n    public void testLog() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.60944, 0.927295);\n        TestUtils.assertEquals(expected, z.log(), 1.0e-5);\n    }\n",
        "begin_line": 713,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 715,col 9)-(line 715,col 38)",
            "(line 716,col 9)-(line 716,col 58)",
            "(line 717,col 9)-(line 717,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogNaN()",
        "snippet": "    @Test\n    public void testLogNaN() {\n        Assert.assertTrue(Complex.NaN.log().isNaN());\n    }\n",
        "begin_line": 720,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 722,col 9)-(line 722,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogInf()",
        "snippet": "    @Test\n    public void testLogInf() {\n        TestUtils.assertEquals(new Complex(inf, pi / 2),\n                oneInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 2),\n                oneNegInf.log(), 10e-12);\n        TestUtils.assertEquals(infZero, infOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi),\n                negInfOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi / 4),\n                infInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 4),\n                infNegInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),\n                negInfInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n                negInfNegInf.log(), 10e-12);\n    }\n",
        "begin_line": 725,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 727,col 9)-(line 728,col 38)",
            "(line 729,col 9)-(line 730,col 41)",
            "(line 731,col 9)-(line 731,col 62)",
            "(line 732,col 9)-(line 733,col 41)",
            "(line 734,col 9)-(line 735,col 38)",
            "(line 736,col 9)-(line 737,col 41)",
            "(line 738,col 9)-(line 739,col 41)",
            "(line 740,col 9)-(line 741,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogZero()",
        "snippet": "    @Test\n    public void testLogZero() {\n        TestUtils.assertSame(negInfZero, Complex.ZERO.log());\n    }\n",
        "begin_line": 744,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 746,col 9)-(line 746,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        Complex x = new Complex(3, 4);\n        Complex y = new Complex(5, 6);\n        Complex expected = new Complex(-1.860893, 11.83677);\n        TestUtils.assertEquals(expected, x.pow(y), 1.0e-5);\n    }\n",
        "begin_line": 749,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 38)",
            "(line 752,col 9)-(line 752,col 38)",
            "(line 753,col 9)-(line 753,col 60)",
            "(line 754,col 9)-(line 754,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()",
        "snippet": "    @Test\n    public void testPowNaNBase() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(Complex.NaN.pow(x).isNaN());\n    }\n",
        "begin_line": 757,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 38)",
            "(line 760,col 9)-(line 760,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()",
        "snippet": "    @Test\n    public void testPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(x.pow(Complex.NaN).isNaN());\n    }\n",
        "begin_line": 763,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 38)",
            "(line 766,col 9)-(line 766,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowInf()",
        "snippet": "   @Test\n   public void testPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));\n   }\n",
        "begin_line": 769,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 771,col 8)-(line 771,col 65)",
            "(line 772,col 8)-(line 772,col 68)",
            "(line 773,col 8)-(line 773,col 65)",
            "(line 774,col 8)-(line 774,col 65)",
            "(line 775,col 8)-(line 775,col 68)",
            "(line 776,col 8)-(line 776,col 68)",
            "(line 777,col 8)-(line 777,col 71)",
            "(line 778,col 8)-(line 778,col 65)",
            "(line 779,col 8)-(line 779,col 68)",
            "(line 780,col 8)-(line 780,col 65)",
            "(line 781,col 8)-(line 781,col 68)",
            "(line 782,col 8)-(line 782,col 68)",
            "(line 783,col 8)-(line 783,col 71)",
            "(line 784,col 8)-(line 784,col 69)",
            "(line 785,col 8)-(line 785,col 72)",
            "(line 786,col 8)-(line 786,col 66)",
            "(line 787,col 8)-(line 787,col 63)",
            "(line 788,col 8)-(line 788,col 66)",
            "(line 789,col 8)-(line 789,col 60)",
            "(line 790,col 8)-(line 790,col 66)",
            "(line 791,col 8)-(line 791,col 69)",
            "(line 792,col 8)-(line 792,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowZero()",
        "snippet": "   @Test\n   public void testPowZero() {\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ZERO));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.I));\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.ONE.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.I.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n   }\n",
        "begin_line": 795,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 797,col 8)-(line 798,col 46)",
            "(line 799,col 8)-(line 800,col 47)",
            "(line 801,col 8)-(line 802,col 44)",
            "(line 803,col 8)-(line 804,col 54)",
            "(line 805,col 8)-(line 806,col 52)",
            "(line 807,col 8)-(line 808,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPow()",
        "snippet": "    @Test\n    public void testScalarPow() {\n        Complex x = new Complex(3, 4);\n        double yDouble = 5.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 811,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 813,col 9)-(line 813,col 38)",
            "(line 814,col 9)-(line 814,col 29)",
            "(line 815,col 9)-(line 815,col 48)",
            "(line 816,col 9)-(line 816,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowNaNBase()",
        "snippet": "    @Test\n    public void testScalarPowNaNBase() {\n        Complex x = Complex.NaN;\n        double yDouble = 5.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 819,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 32)",
            "(line 822,col 9)-(line 822,col 29)",
            "(line 823,col 9)-(line 823,col 48)",
            "(line 824,col 9)-(line 824,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowNaNExponent()",
        "snippet": "    @Test\n    public void testScalarPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 827,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 829,col 9)-(line 829,col 38)",
            "(line 830,col 9)-(line 830,col 36)",
            "(line 831,col 9)-(line 831,col 48)",
            "(line 832,col 9)-(line 832,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowInf()",
        "snippet": "   @Test\n   public void testScalarPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(10));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.POSITIVE_INFINITY));\n   }\n",
        "begin_line": 835,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 837,col 8)-(line 837,col 83)",
            "(line 838,col 8)-(line 838,col 83)",
            "(line 839,col 8)-(line 839,col 57)",
            "(line 840,col 8)-(line 840,col 60)",
            "(line 841,col 8)-(line 841,col 57)",
            "(line 842,col 8)-(line 842,col 60)",
            "(line 843,col 8)-(line 843,col 59)",
            "(line 844,col 8)-(line 844,col 63)",
            "(line 845,col 8)-(line 845,col 84)",
            "(line 846,col 8)-(line 846,col 84)",
            "(line 847,col 8)-(line 847,col 78)",
            "(line 848,col 8)-(line 848,col 78)",
            "(line 849,col 8)-(line 849,col 81)",
            "(line 850,col 8)-(line 850,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowZero()",
        "snippet": "   @Test\n   public void testScalarPowZero() {\n       TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(1.0));\n       TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(0.0));\n       TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(0.0), 10e-12);\n       TestUtils.assertEquals(Complex.ONE, Complex.I.pow(0.0), 10e-12);\n       TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(0.0), 10e-12);\n   }\n",
        "begin_line": 853,
        "end_line": 860,
        "comment": "",
        "child_ranges": [
            "(line 855,col 8)-(line 855,col 64)",
            "(line 856,col 8)-(line 856,col 64)",
            "(line 857,col 8)-(line 857,col 73)",
            "(line 858,col 8)-(line 858,col 71)",
            "(line 859,col 8)-(line 859,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testpowNull()",
        "snippet": "    @Test(expected=NullArgumentException.class)\n    public void testpowNull() {\n        Complex.ONE.pow(null);\n    }\n",
        "begin_line": 862,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 864,col 9)-(line 864,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSin()",
        "snippet": "    @Test\n    public void testSin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(3.853738, -27.01681);\n        TestUtils.assertEquals(expected, z.sin(), 1.0e-5);\n    }\n",
        "begin_line": 867,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 38)",
            "(line 870,col 9)-(line 870,col 60)",
            "(line 871,col 9)-(line 871,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinInf()",
        "snippet": "    @Test\n    public void testSinInf() {\n        TestUtils.assertSame(infInf, oneInf.sin());\n        TestUtils.assertSame(infNegInf, oneNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, infOne.sin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.sin());\n        TestUtils.assertSame(Complex.NaN, infInf.sin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sin());\n    }\n",
        "begin_line": 874,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 876,col 9)-(line 876,col 51)",
            "(line 877,col 9)-(line 877,col 57)",
            "(line 878,col 9)-(line 878,col 56)",
            "(line 879,col 9)-(line 879,col 59)",
            "(line 880,col 9)-(line 880,col 56)",
            "(line 881,col 9)-(line 881,col 59)",
            "(line 882,col 9)-(line 882,col 59)",
            "(line 883,col 9)-(line 883,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinNaN()",
        "snippet": "    @Test\n    public void testSinNaN() {\n        Assert.assertTrue(Complex.NaN.sin().isNaN());\n    }\n",
        "begin_line": 886,
        "end_line": 889,
        "comment": "",
        "child_ranges": [
            "(line 888,col 9)-(line 888,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinh()",
        "snippet": "    @Test\n    public void testSinh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.54812, -7.61923);\n        TestUtils.assertEquals(expected, z.sinh(), 1.0e-5);\n    }\n",
        "begin_line": 891,
        "end_line": 896,
        "comment": "",
        "child_ranges": [
            "(line 893,col 9)-(line 893,col 38)",
            "(line 894,col 9)-(line 894,col 59)",
            "(line 895,col 9)-(line 895,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhNaN()",
        "snippet": "    @Test\n    public void testSinhNaN() {\n        Assert.assertTrue(Complex.NaN.sinh().isNaN());\n    }\n",
        "begin_line": 898,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 900,col 9)-(line 900,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhInf()",
        "snippet": "    @Test\n    public void testSinhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.sinh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.sinh());\n        TestUtils.assertSame(infInf, infOne.sinh());\n        TestUtils.assertSame(negInfInf, negInfOne.sinh());\n        TestUtils.assertSame(Complex.NaN, infInf.sinh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh());\n    }\n",
        "begin_line": 903,
        "end_line": 913,
        "comment": "",
        "child_ranges": [
            "(line 905,col 9)-(line 905,col 57)",
            "(line 906,col 9)-(line 906,col 60)",
            "(line 907,col 9)-(line 907,col 52)",
            "(line 908,col 9)-(line 908,col 58)",
            "(line 909,col 9)-(line 909,col 57)",
            "(line 910,col 9)-(line 910,col 60)",
            "(line 911,col 9)-(line 911,col 60)",
            "(line 912,col 9)-(line 912,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()",
        "snippet": "    @Test\n    public void testSqrtRealPositive() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(2, 1);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 915,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 917,col 9)-(line 917,col 38)",
            "(line 918,col 9)-(line 918,col 45)",
            "(line 919,col 9)-(line 919,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()",
        "snippet": "    @Test\n    public void testSqrtRealZero() {\n        Complex z = new Complex(0.0, 4);\n        Complex expected = new Complex(1.41421, 1.41421);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 922,
        "end_line": 927,
        "comment": "",
        "child_ranges": [
            "(line 924,col 9)-(line 924,col 40)",
            "(line 925,col 9)-(line 925,col 57)",
            "(line 926,col 9)-(line 926,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()",
        "snippet": "    @Test\n    public void testSqrtRealNegative() {\n        Complex z = new Complex(-3.0, 4);\n        Complex expected = new Complex(1, 2);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 929,
        "end_line": 934,
        "comment": "",
        "child_ranges": [
            "(line 931,col 9)-(line 931,col 41)",
            "(line 932,col 9)-(line 932,col 45)",
            "(line 933,col 9)-(line 933,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()",
        "snippet": "    @Test\n    public void testSqrtImaginaryZero() {\n        Complex z = new Complex(-3.0, 0.0);\n        Complex expected = new Complex(0.0, 1.73205);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 936,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 938,col 9)-(line 938,col 43)",
            "(line 939,col 9)-(line 939,col 53)",
            "(line 940,col 9)-(line 940,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()",
        "snippet": "    @Test\n    public void testSqrtImaginaryNegative() {\n        Complex z = new Complex(-3.0, -4.0);\n        Complex expected = new Complex(1.0, -2.0);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 943,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 945,col 9)-(line 945,col 44)",
            "(line 946,col 9)-(line 946,col 50)",
            "(line 947,col 9)-(line 947,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()",
        "snippet": "    @Test\n    public void testSqrtPolar() {\n        double r = 1;\n        for (int i = 0; i < 5; i++) {\n            r += i;\n            double theta = 0;\n            for (int j =0; j < 11; j++) {\n                theta += pi /12;\n                Complex z = ComplexUtils.polar2Complex(r, theta);\n                Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2);\n                TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12);\n            }\n        }\n    }\n",
        "begin_line": 950,
        "end_line": 963,
        "comment": "",
        "child_ranges": [
            "(line 952,col 9)-(line 952,col 21)",
            "(line 953,col 9)-(line 962,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()",
        "snippet": "    @Test\n    public void testSqrtNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt().isNaN());\n    }\n",
        "begin_line": 965,
        "end_line": 968,
        "comment": "",
        "child_ranges": [
            "(line 967,col 9)-(line 967,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtInf()",
        "snippet": "    @Test\n    public void testSqrtInf() {\n        TestUtils.assertSame(infNaN, oneInf.sqrt());\n        TestUtils.assertSame(infNaN, oneNegInf.sqrt());\n        TestUtils.assertSame(infZero, infOne.sqrt());\n        TestUtils.assertSame(zeroInf, negInfOne.sqrt());\n        TestUtils.assertSame(infNaN, infInf.sqrt());\n        TestUtils.assertSame(infNaN, infNegInf.sqrt());\n        TestUtils.assertSame(nanInf, negInfInf.sqrt());\n        TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt());\n    }\n",
        "begin_line": 970,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 972,col 9)-(line 972,col 52)",
            "(line 973,col 9)-(line 973,col 55)",
            "(line 974,col 9)-(line 974,col 53)",
            "(line 975,col 9)-(line 975,col 56)",
            "(line 976,col 9)-(line 976,col 52)",
            "(line 977,col 9)-(line 977,col 55)",
            "(line 978,col 9)-(line 978,col 55)",
            "(line 979,col 9)-(line 979,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1z()",
        "snippet": "    @Test\n    public void testSqrt1z() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(4.08033, -2.94094);\n        TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5);\n    }\n",
        "begin_line": 982,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 984,col 9)-(line 984,col 38)",
            "(line 985,col 9)-(line 985,col 58)",
            "(line 986,col 9)-(line 986,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()",
        "snippet": "    @Test\n    public void testSqrt1zNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt1z().isNaN());\n    }\n",
        "begin_line": 989,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 991,col 9)-(line 991,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTan()",
        "snippet": "    @Test\n    public void testTan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n    }\n",
        "begin_line": 994,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 996,col 9)-(line 996,col 38)",
            "(line 997,col 9)-(line 997,col 63)",
            "(line 998,col 9)-(line 998,col 58)",
            "(line 1000,col 9)-(line 1000,col 54)",
            "(line 1001,col 9)-(line 1001,col 37)",
            "(line 1002,col 9)-(line 1002,col 57)",
            "(line 1003,col 9)-(line 1003,col 47)",
            "(line 1004,col 9)-(line 1004,col 38)",
            "(line 1005,col 9)-(line 1005,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanNaN()",
        "snippet": "    @Test\n    public void testTanNaN() {\n        Assert.assertTrue(Complex.NaN.tan().isNaN());\n    }\n",
        "begin_line": 1008,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 9)-(line 1010,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanInf()",
        "snippet": "    @Test\n    public void testTanInf() {\n        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());\n        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, infOne.tan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());\n        TestUtils.assertSame(Complex.NaN, infInf.tan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());\n    }\n",
        "begin_line": 1013,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 9)-(line 1015,col 70)",
            "(line 1016,col 9)-(line 1016,col 74)",
            "(line 1017,col 9)-(line 1017,col 56)",
            "(line 1018,col 9)-(line 1018,col 59)",
            "(line 1019,col 9)-(line 1019,col 56)",
            "(line 1020,col 9)-(line 1020,col 59)",
            "(line 1021,col 9)-(line 1021,col 59)",
            "(line 1022,col 9)-(line 1022,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanCritical()",
        "snippet": "   @Test\n   public void testTanCritical() {\n        TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan());\n        TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan());\n    }\n",
        "begin_line": 1025,
        "end_line": 1029,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 9)-(line 1027,col 65)",
            "(line 1028,col 9)-(line 1028,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanh()",
        "snippet": "    @Test\n    public void testTanh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n    }\n",
        "begin_line": 1031,
        "end_line": 1043,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 9)-(line 1033,col 38)",
            "(line 1034,col 9)-(line 1034,col 60)",
            "(line 1035,col 9)-(line 1035,col 59)",
            "(line 1037,col 9)-(line 1037,col 55)",
            "(line 1038,col 9)-(line 1038,col 37)",
            "(line 1039,col 9)-(line 1039,col 57)",
            "(line 1040,col 9)-(line 1040,col 48)",
            "(line 1041,col 9)-(line 1041,col 38)",
            "(line 1042,col 9)-(line 1042,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhNaN()",
        "snippet": "    @Test\n    public void testTanhNaN() {\n        Assert.assertTrue(Complex.NaN.tanh().isNaN());\n    }\n",
        "begin_line": 1045,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 9)-(line 1047,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhInf()",
        "snippet": "    @Test\n    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());\n        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }\n",
        "begin_line": 1050,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1052,col 9)-(line 1052,col 57)",
            "(line 1053,col 9)-(line 1053,col 60)",
            "(line 1054,col 9)-(line 1054,col 71)",
            "(line 1055,col 9)-(line 1055,col 75)",
            "(line 1056,col 9)-(line 1056,col 57)",
            "(line 1057,col 9)-(line 1057,col 60)",
            "(line 1058,col 9)-(line 1058,col 60)",
            "(line 1059,col 9)-(line 1059,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhCritical()",
        "snippet": "    @Test\n    public void testTanhCritical() {\n        TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());\n    }\n",
        "begin_line": 1062,
        "end_line": 1065,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 9)-(line 1064,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMath221()",
        "snippet": "    @Test\n    public void testMath221() {\n        Assert.assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n    }\n",
        "begin_line": 1068,
        "end_line": 1071,
        "comment": " test issue MATH-221 ",
        "child_ranges": [
            "(line 1070,col 9)-(line 1070,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_thirdRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_thirdRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(-2,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.3660254037844386,  thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.36602540378443843,  thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(0.366025403784439,    thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.3660254037844384,  thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1084,
        "end_line": 1101,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = -2 + 2 * i</b>\n     *   => z_0 =  1      +          i\n     *   => z_1 = -1.3660 + 0.3660 * i\n     *   => z_2 =  0.3660 - 1.3660 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1087,col 9)-(line 1087,col 38)",
            "(line 1089,col 9)-(line 1089,col 71)",
            "(line 1091,col 9)-(line 1091,col 53)",
            "(line 1093,col 9)-(line 1093,col 91)",
            "(line 1094,col 9)-(line 1094,col 91)",
            "(line 1096,col 9)-(line 1096,col 91)",
            "(line 1097,col 9)-(line 1097,col 91)",
            "(line 1099,col 9)-(line 1099,col 91)",
            "(line 1100,col 9)-(line 1100,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_fourthRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_fourthRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(5,-2);\n        // The List holding all fourth roots\n        Complex[] fourthRootsOfZ = z.nthRoot(4).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(4, fourthRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(-0.14469266210702247,   fourthRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(0.14469266210702256,    fourthRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(0.14469266210702267,    fourthRootsOfZ[2].getImaginary(), 1.0e-5);\n        // test z_3\n        Assert.assertEquals(-0.14469266210702275,   fourthRootsOfZ[3].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[3].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1116,
        "end_line": 1136,
        "comment": "\n     * Test: computing <b>fourth roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 5 - 2 * i</b>\n     *   => z_0 =  1.5164 - 0.1446 * i\n     *   => z_1 =  0.1446 + 1.5164 * i\n     *   => z_2 = -1.5164 + 0.1446 * i\n     *   => z_3 = -1.5164 - 0.1446 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1119,col 9)-(line 1119,col 38)",
            "(line 1121,col 9)-(line 1121,col 72)",
            "(line 1123,col 9)-(line 1123,col 54)",
            "(line 1125,col 9)-(line 1125,col 94)",
            "(line 1126,col 9)-(line 1126,col 94)",
            "(line 1128,col 9)-(line 1128,col 94)",
            "(line 1129,col 9)-(line 1129,col 94)",
            "(line 1131,col 9)-(line 1131,col 94)",
            "(line 1132,col 9)-(line 1132,col 94)",
            "(line 1134,col 9)-(line 1134,col 94)",
            "(line 1135,col 9)-(line 1135,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty() {\n        // The number 8 has three third roots. One we all already know is the number 2.\n        // But there are two more complex roots.\n        Complex z = new Complex(8,0);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.0,                thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1149,
        "end_line": 1167,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 8</b>\n     *   => z_0 =  2\n     *   => z_1 = -1 + 1.73205 * i\n     *   => z_2 = -1 - 1.73205 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1153,col 9)-(line 1153,col 37)",
            "(line 1155,col 9)-(line 1155,col 71)",
            "(line 1157,col 9)-(line 1157,col 53)",
            "(line 1159,col 9)-(line 1159,col 89)",
            "(line 1160,col 9)-(line 1160,col 89)",
            "(line 1162,col 9)-(line 1162,col 89)",
            "(line 1163,col 9)-(line 1163,col 89)",
            "(line 1165,col 9)-(line 1165,col 89)",
            "(line 1166,col 9)-(line 1166,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_realPartZero()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_realPartZero() {\n        // complex number with only imaginary part\n        Complex z = new Complex(0,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0911236359717216,     thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.2599210498948732,     thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1181,
        "end_line": 1198,
        "comment": "\n     * Test: computing <b>third roots</b> of z with real part 0.\n     * <pre>\n     * <code>\n     * <b>z = 2 * i</b>\n     *   => z_0 =  1.0911 + 0.6299 * i\n     *   => z_1 = -1.0911 + 0.6299 * i\n     *   => z_2 = -2.3144 - 1.2599 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1184,col 9)-(line 1184,col 37)",
            "(line 1186,col 9)-(line 1186,col 71)",
            "(line 1188,col 9)-(line 1188,col 53)",
            "(line 1190,col 9)-(line 1190,col 94)",
            "(line 1191,col 9)-(line 1191,col 94)",
            "(line 1193,col 9)-(line 1193,col 94)",
            "(line 1194,col 9)-(line 1194,col 94)",
            "(line 1196,col 9)-(line 1196,col 94)",
            "(line 1197,col 9)-(line 1197,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_NAN_Inf() {\n        // NaN + finite -> NaN\n        List<Complex> roots = oneNaN.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        roots = nanZero.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // NaN + infinite -> NaN\n        roots = nanInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // finite + infinite -> Inf\n        roots = oneInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n\n        // infinite + infinite -> Inf\n        roots = negInfInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n    }\n",
        "begin_line": 1203,
        "end_line": 1228,
        "comment": "\n     * Test cornercases with NaN and Infinity.\n     ",
        "child_ranges": [
            "(line 1206,col 9)-(line 1206,col 48)",
            "(line 1207,col 9)-(line 1207,col 44)",
            "(line 1208,col 9)-(line 1208,col 55)",
            "(line 1210,col 9)-(line 1210,col 35)",
            "(line 1211,col 9)-(line 1211,col 44)",
            "(line 1212,col 9)-(line 1212,col 55)",
            "(line 1215,col 9)-(line 1215,col 34)",
            "(line 1216,col 9)-(line 1216,col 44)",
            "(line 1217,col 9)-(line 1217,col 55)",
            "(line 1220,col 9)-(line 1220,col 34)",
            "(line 1221,col 9)-(line 1221,col 44)",
            "(line 1222,col 9)-(line 1222,col 55)",
            "(line 1225,col 9)-(line 1225,col 37)",
            "(line 1226,col 9)-(line 1226,col 44)",
            "(line 1227,col 9)-(line 1227,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgument()",
        "snippet": "    @Test\n    public void testGetArgument() {\n        Complex z = new Complex(1, 0);\n        Assert.assertEquals(0.0, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, 1);\n        Assert.assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, 1);\n        Assert.assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 1);\n        Assert.assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 0);\n        Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, -1);\n        Assert.assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, -1);\n        Assert.assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, -1);\n        Assert.assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n    }\n",
        "begin_line": 1233,
        "end_line": 1259,
        "comment": "\n     * Test standard values\n     ",
        "child_ranges": [
            "(line 1235,col 9)-(line 1235,col 38)",
            "(line 1236,col 9)-(line 1236,col 59)",
            "(line 1238,col 9)-(line 1238,col 30)",
            "(line 1239,col 9)-(line 1239,col 69)",
            "(line 1241,col 9)-(line 1241,col 30)",
            "(line 1242,col 9)-(line 1242,col 69)",
            "(line 1244,col 9)-(line 1244,col 31)",
            "(line 1245,col 9)-(line 1245,col 73)",
            "(line 1247,col 9)-(line 1247,col 31)",
            "(line 1248,col 9)-(line 1248,col 67)",
            "(line 1250,col 9)-(line 1250,col 32)",
            "(line 1251,col 9)-(line 1251,col 74)",
            "(line 1253,col 9)-(line 1253,col 31)",
            "(line 1254,col 9)-(line 1254,col 70)",
            "(line 1256,col 9)-(line 1256,col 31)",
            "(line 1257,col 9)-(line 1257,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentInf()",
        "snippet": "    @Test\n    public void testGetArgumentInf() {\n        Assert.assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);\n    }\n",
        "begin_line": 1264,
        "end_line": 1274,
        "comment": "\n     * Verify atan2-style handling of infinite parts\n     ",
        "child_ranges": [
            "(line 1266,col 9)-(line 1266,col 74)",
            "(line 1267,col 9)-(line 1267,col 74)",
            "(line 1268,col 9)-(line 1268,col 64)",
            "(line 1269,col 9)-(line 1269,col 75)",
            "(line 1270,col 9)-(line 1270,col 65)",
            "(line 1271,col 9)-(line 1271,col 75)",
            "(line 1272,col 9)-(line 1272,col 85)",
            "(line 1273,col 9)-(line 1273,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN()",
        "snippet": "    @Test\n    public void testGetArgumentNaN() {\n        Assert.assertTrue(Double.isNaN(nanZero.getArgument()));\n        Assert.assertTrue(Double.isNaN(zeroNaN.getArgument()));\n        Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument()));\n    }\n",
        "begin_line": 1279,
        "end_line": 1284,
        "comment": "\n     * Verify that either part NaN results in NaN\n     ",
        "child_ranges": [
            "(line 1281,col 9)-(line 1281,col 63)",
            "(line 1282,col 9)-(line 1282,col 63)",
            "(line 1283,col 9)-(line 1283,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(z, TestUtils.serializeAndRecover(z));\n        Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN);\n        Assert.assertEquals(nanZero, ncmplx);\n        Assert.assertTrue(ncmplx.isNaN());\n        Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf);\n        Assert.assertEquals(infInf, infcmplx);\n        Assert.assertTrue(infcmplx.isInfinite());\n        TestComplex tz = new TestComplex(3.0, 4.0);\n        Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz));\n        TestComplex ntcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(oneNaN));\n        Assert.assertEquals(nanZero, ntcmplx);\n        Assert.assertTrue(ntcmplx.isNaN());\n        TestComplex inftcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(infInf));\n        Assert.assertEquals(infInf, inftcmplx);\n        Assert.assertTrue(inftcmplx.isInfinite());\n    }\n",
        "begin_line": 1286,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 9)-(line 1288,col 42)",
            "(line 1289,col 9)-(line 1289,col 65)",
            "(line 1290,col 9)-(line 1290,col 72)",
            "(line 1291,col 9)-(line 1291,col 45)",
            "(line 1292,col 9)-(line 1292,col 42)",
            "(line 1293,col 9)-(line 1293,col 74)",
            "(line 1294,col 9)-(line 1294,col 46)",
            "(line 1295,col 9)-(line 1295,col 49)",
            "(line 1296,col 9)-(line 1296,col 51)",
            "(line 1297,col 9)-(line 1297,col 67)",
            "(line 1298,col 9)-(line 1298,col 98)",
            "(line 1299,col 9)-(line 1299,col 46)",
            "(line 1300,col 9)-(line 1300,col 43)",
            "(line 1301,col 9)-(line 1301,col 100)",
            "(line 1302,col 9)-(line 1302,col 47)",
            "(line 1303,col 9)-(line 1303,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(double, double)",
        "snippet": "        public TestComplex(double real, double imaginary) {\n            super(real, imaginary);\n        }\n",
        "begin_line": 1316,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 13)-(line 1317,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(org.apache.commons.math.complex.Complex)",
        "snippet": "        public TestComplex(Complex other){\n            this(other.getReal(), other.getImaginary());\n        }\n",
        "begin_line": 1320,
        "end_line": 1322,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 13)-(line 1321,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.createComplex(double, double)",
        "snippet": "        @Override\n        protected TestComplex createComplex(double real, double imaginary){\n            return new TestComplex(real, imaginary);\n        }\n",
        "begin_line": 1324,
        "end_line": 1327,
        "comment": "",
        "child_ranges": [
            "(line 1326,col 13)-(line 1326,col 52)"
        ]
    }
]