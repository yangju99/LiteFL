[
    {
        "name": "ValuedEnum.compareTo#182",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object other) {\n        return iValue - ((ValuedEnum) other).iValue;\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValuedEnum.ValuedEnum#125",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.ValuedEnum(java.lang.String, int)",
        "snippet": "    protected ValuedEnum(String name, int value) {\n        super(name);\n        iValue = value;\n    }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "\n     * Constructor for enum item.\n     *\n     * @param name  the name of enum item\n     * @param value  the value of enum item\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "Enum.getEnumClass#518",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getEnumClass()",
        "snippet": "    public Class getEnumClass() {\n        return getClass();\n    }\n",
        "begin_line": 518,
        "end_line": 520,
        "comment": "\n     * <p>Retrieves the Class of this Enum item, set in the constructor.</p>\n     * \n     * <p>This is normally the same as <code>getClass()</code>, but for\n     * advanced Enums may be different. If overridden, it must return a\n     * constant value.</p>\n     * \n     * @return the <code>Class</code> of the enum\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Enum.Entry#296",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.Entry.Entry()",
        "snippet": "        protected Entry() {\n          super();\n        }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "\n         * <p>Restrictive constructor.</p>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.125
        },
        "num_failing_tests": 1
    },
    {
        "name": "Enum.Enum#311",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.Enum(java.lang.String)",
        "snippet": "    protected Enum(String name) {\n        super();\n        init(name);\n        iName = name;\n        iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();\n        // cannot create toString here as subclasses may want to include other data\n    }\n",
        "begin_line": 311,
        "end_line": 317,
        "comment": "\n     * <p>Constructor to add a new named item to the enumeration.</p>\n     *\n     * @param name  the name of the enum object,\n     *  must not be empty or <code>null</code>\n     * @throws IllegalArgumentException if the name is <code>null</code>\n     *  or an empty string\n     * @throws IllegalArgumentException if the getEnumClass() method returns\n     *  a null or invalid Class\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.125
        },
        "num_failing_tests": 1
    },
    {
        "name": "Enum.init#326",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.init(java.lang.String)",
        "snippet": "    private void init(String name) {\n        if (StringUtils.isEmpty(name)) {\n            throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n        }\n        \n        Class enumClass = getEnumClass();\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"getEnumClass() must not be null\");\n        }\n        Class cls = getClass();\n        boolean ok = false;\n        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n            if (cls == enumClass) {\n                ok = true;\n                break;\n            }\n            cls = cls.getSuperclass();\n        }\n        if (ok == false) {\n            throw new IllegalArgumentException(\"getEnumClass() must return a superclass of this class\");\n        }\n        \n        // create entry\n        Entry entry = (Entry) cEnumClasses.get(enumClass);\n        if (entry == null) {\n            entry = createEntry(enumClass);\n            cEnumClasses.put(enumClass, entry);\n        }\n        if (entry.map.containsKey(name)) {\n            throw new IllegalArgumentException(\"The Enum name must be unique, '\" + name + \"' has already been added\");\n        }\n        entry.map.put(name, this);\n        entry.list.add(this);\n    }\n",
        "begin_line": 326,
        "end_line": 359,
        "comment": "\n     * Initializes the enumeration.\n     * \n     * @param name  the enum name\n     * @throws IllegalArgumentException if the name is null or empty or duplicate\n     * @throws IllegalArgumentException if the enumClass is null or invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.125
        },
        "num_failing_tests": 1
    },
    {
        "name": "Enum.createEntry#483",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.createEntry(java.lang.Class)",
        "snippet": "    private static Entry createEntry(Class enumClass) {\n        Entry entry = new Entry();\n        Class cls = enumClass.getSuperclass();\n        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n            Entry loopEntry = (Entry) cEnumClasses.get(cls);\n            if (loopEntry != null) {\n                entry.list.addAll(loopEntry.list);\n                entry.map.putAll(loopEntry.map);\n                break;  // stop here, as this will already have had superclasses added\n            }\n            cls = cls.getSuperclass();\n        }\n        return entry;\n    }\n",
        "begin_line": 483,
        "end_line": 496,
        "comment": "\n     * <p>Creates an <code>Entry</code> for storing the Enums.</p>\n     *\n     * <p>This accounts for subclassed Enums.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum entry\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.125
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.isEmpty#184",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isEmpty(java.lang.String)",
        "snippet": "    public static boolean isEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "\n     * <p>Checks if a String is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty(\" \")       = false\n     * StringUtils.isEmpty(\"bob\")     = false\n     * StringUtils.isEmpty(\"  bob  \") = false\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer trims the String.\n     * That functionality is available in isBlank().</p>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if the String is empty or null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    }
]