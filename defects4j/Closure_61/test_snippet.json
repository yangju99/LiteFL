[
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.PeepholeRemoveDeadCodeTest()",
        "snippet": "  public PeepholeRemoveDeadCodeTest() {\n    super(\"\");\n  }\n",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 5)-(line 26,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    enableLineNumberCheck(true);\n  }\n",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 31,col 18)",
            "(line 32,col 5)-(line 32,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    PeepholeOptimizationsPass peepholePass =\n      new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode());\n\n    return peepholePass;\n  }\n",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 38,col 76)",
            "(line 40,col 5)-(line 40,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Reduce this to 2 if we get better expression evaluators.\n    return 2;\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.foldSame(java.lang.String)",
        "snippet": "  private void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 50,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  private void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldBlock()",
        "snippet": "  public void testFoldBlock() {\n    fold(\"{{foo()}}\", \"foo()\");\n    fold(\"{foo();{}}\", \"foo()\");\n    fold(\"{{foo()}{}}\", \"foo()\");\n    fold(\"{{foo()}{bar()}}\", \"foo();bar()\");\n    fold(\"{if(false)foo(); {bar()}}\", \"bar()\");\n    fold(\"{if(false)if(false)if(false)foo(); {bar()}}\", \"bar()\");\n\n    fold(\"{'hi'}\", \"\");\n    fold(\"{x==3}\", \"\");\n    fold(\"{ (function(){x++}) }\", \"\");\n    fold(\"function f(){return;}\", \"function f(){return;}\");\n    fold(\"function f(){return 3;}\", \"function f(){return 3}\");\n    fold(\"function f(){if(x)return; x=3; return; }\",\n         \"function f(){if(x)return; x=3; return; }\");\n    fold(\"{x=3;;;y=2;;;}\", \"x=3;y=2\");\n\n    // Cases to test for empty block.\n    fold(\"while(x()){x}\", \"while(x());\");\n    fold(\"while(x()){x()}\", \"while(x())x()\");\n    fold(\"for(x=0;x<100;x++){x}\", \"for(x=0;x<100;x++);\");\n    fold(\"for(x in y){x}\", \"for(x in y);\");\n  }\n",
        "begin_line": 57,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 58,col 31)",
            "(line 59,col 5)-(line 59,col 32)",
            "(line 60,col 5)-(line 60,col 33)",
            "(line 61,col 5)-(line 61,col 44)",
            "(line 62,col 5)-(line 62,col 47)",
            "(line 63,col 5)-(line 63,col 65)",
            "(line 65,col 5)-(line 65,col 23)",
            "(line 66,col 5)-(line 66,col 23)",
            "(line 67,col 5)-(line 67,col 38)",
            "(line 68,col 5)-(line 68,col 59)",
            "(line 69,col 5)-(line 69,col 62)",
            "(line 70,col 5)-(line 71,col 53)",
            "(line 72,col 5)-(line 72,col 38)",
            "(line 75,col 5)-(line 75,col 41)",
            "(line 76,col 5)-(line 76,col 45)",
            "(line 77,col 5)-(line 77,col 57)",
            "(line 78,col 5)-(line 78,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldBlocksWithManyChildren()",
        "snippet": "  public void testFoldBlocksWithManyChildren() {\n    fold(\"function f() { if (false) {} }\", \"function f(){}\");\n    fold(\"function f() { { if (false) {} if (true) {} {} } }\",\n         \"function f(){}\");\n    fold(\"{var x; var y; var z; function f() { { var a; { var b; } } } }\",\n         \"var x;var y;var z;function f(){var a;var b}\");\n  }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": " Try to remove spurious blocks with multiple children ",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 61)",
            "(line 84,col 5)-(line 85,col 27)",
            "(line 86,col 5)-(line 87,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testIf()",
        "snippet": "  public void testIf() {\n    fold(\"if (1){ x=1; } else { x = 2;}\", \"x=1\");\n    fold(\"if (false){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (undefined){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (null){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (void 0){ x = 1; } else { x = 2; }\", \"x=2\");\n    fold(\"if (void foo()){ x = 1; } else { x = 2; }\",\n         \"foo();x=2\");\n    fold(\"if (false){ x = 1; } else if (true) { x = 3; } else { x = 2; }\",\n         \"x=3\");\n    fold(\"if (x){ x = 1; } else if (false) { x = 3; }\",\n         \"if(x)x=1\");\n  }\n",
        "begin_line": 90,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 91,col 49)",
            "(line 92,col 5)-(line 92,col 56)",
            "(line 93,col 5)-(line 93,col 60)",
            "(line 94,col 5)-(line 94,col 55)",
            "(line 95,col 5)-(line 95,col 57)",
            "(line 96,col 5)-(line 97,col 22)",
            "(line 98,col 5)-(line 99,col 16)",
            "(line 100,col 5)-(line 101,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook()",
        "snippet": "  public void testHook() {\n    fold(\"true ? a() : b()\", \"a()\");\n    fold(\"false ? a() : b()\", \"b()\");\n\n    fold(\"a() ? b() : true\", \"a() && b()\");\n    fold(\"a() ? true : b()\", \"a() || b()\");\n\n    fold(\"(a = true) ? b() : c()\", \"a = true, b()\");\n    fold(\"(a = false) ? b() : c()\", \"a = false, c()\");\n    fold(\"do {f()} while((a = true) ? b() : c())\",\n         \"do {f()} while((a = true) , b())\");\n    fold(\"do {f()} while((a = false) ? b() : c())\",\n         \"do {f()} while((a = false) , c())\");\n\n    fold(\"var x = (true) ? 1 : 0\", \"var x=1\");\n    fold(\"var y = (true) ? ((false) ? 12 : (cond ? 1 : 2)) : 13\",\n         \"var y=cond?1:2\");\n\n    foldSame(\"var z=x?void 0:y()\");\n    foldSame(\"z=x?void 0:y()\");\n    foldSame(\"z*=x?void 0:y()\");\n\n    foldSame(\"var z=x?y():void 0\");\n    foldSame(\"(w?x:void 0).y=z\");\n    foldSame(\"(w?x:void 0).y+=z\");\n  }\n",
        "begin_line": 104,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 36)",
            "(line 106,col 5)-(line 106,col 37)",
            "(line 108,col 5)-(line 108,col 43)",
            "(line 109,col 5)-(line 109,col 43)",
            "(line 111,col 5)-(line 111,col 52)",
            "(line 112,col 5)-(line 112,col 54)",
            "(line 113,col 5)-(line 114,col 45)",
            "(line 115,col 5)-(line 116,col 46)",
            "(line 118,col 5)-(line 118,col 46)",
            "(line 119,col 5)-(line 120,col 27)",
            "(line 122,col 5)-(line 122,col 35)",
            "(line 123,col 5)-(line 123,col 31)",
            "(line 124,col 5)-(line 124,col 32)",
            "(line 126,col 5)-(line 126,col 35)",
            "(line 127,col 5)-(line 127,col 33)",
            "(line 128,col 5)-(line 128,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testConstantConditionWithSideEffect1()",
        "snippet": "  public void testConstantConditionWithSideEffect1() {\n    fold(\"if (b=true) x=1;\", \"b=true;x=1\");\n    fold(\"if (b=/ab/) x=1;\", \"b=/ab/;x=1\");\n    fold(\"if (b=/ab/){ x=1; } else { x=2; }\", \"b=/ab/;x=1\");\n    fold(\"var b;b=/ab/;if(b)x=1;\", \"var b;b=/ab/;x=1\");\n    foldSame(\"var b;b=f();if(b)x=1;\");\n    fold(\"var b=/ab/;if(b)x=1;\", \"var b=/ab/;x=1\");\n    foldSame(\"var b=f();if(b)x=1;\");\n    foldSame(\"b=b++;if(b)x=b;\");\n    fold(\"(b=0,b=1);if(b)x=b;\", \"b=0,b=1;if(b)x=b;\");\n    fold(\"b=1;if(foo,b)x=b;\",\"b=1;x=b;\");\n    foldSame(\"b=1;if(foo=1,b)x=b;\");\n  }\n",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 43)",
            "(line 133,col 5)-(line 133,col 43)",
            "(line 134,col 5)-(line 134,col 60)",
            "(line 135,col 5)-(line 135,col 55)",
            "(line 136,col 5)-(line 136,col 38)",
            "(line 137,col 5)-(line 137,col 51)",
            "(line 138,col 5)-(line 138,col 36)",
            "(line 139,col 5)-(line 139,col 32)",
            "(line 140,col 5)-(line 140,col 53)",
            "(line 141,col 5)-(line 141,col 41)",
            "(line 142,col 5)-(line 142,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testConstantConditionWithSideEffect2()",
        "snippet": "  public void testConstantConditionWithSideEffect2() {\n    fold(\"(b=true)?x=1:x=2;\", \"b=true,x=1\");\n    fold(\"(b=false)?x=1:x=2;\", \"b=false,x=2\");\n    fold(\"if (b=/ab/) x=1;\", \"b=/ab/;x=1\");\n    fold(\"var b;b=/ab/;(b)?x=1:x=2;\", \"var b;b=/ab/;x=1\");\n    foldSame(\"var b;b=f();(b)?x=1:x=2;\");\n    fold(\"var b=/ab/;(b)?x=1:x=2;\", \"var b=/ab/;x=1\");\n    foldSame(\"var b=f();(b)?x=1:x=2;\");\n  }\n",
        "begin_line": 145,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 44)",
            "(line 147,col 5)-(line 147,col 46)",
            "(line 148,col 5)-(line 148,col 43)",
            "(line 149,col 5)-(line 149,col 58)",
            "(line 150,col 5)-(line 150,col 41)",
            "(line 151,col 5)-(line 151,col 54)",
            "(line 152,col 5)-(line 152,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testVarLifting()",
        "snippet": "  public void testVarLifting() {\n    fold(\"if(true)var a\", \"var a\");\n    fold(\"if(false)var a\", \"var a\");\n\n    // More var lifting tests in PeepholeIntegrationTests\n  }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 35)",
            "(line 157,col 5)-(line 157,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldUselessWhile()",
        "snippet": "  public void testFoldUselessWhile() {\n    fold(\"while(false) { foo() }\", \"\");\n\n    fold(\"while(void 0) { foo() }\", \"\");\n    fold(\"while(undefined) { foo() }\", \"\");\n\n    foldSame(\"while(true) foo()\");\n\n    fold(\"while(false) { var a = 0; }\", \"var a\");\n\n    // Make sure it plays nice with minimizing\n    fold(\"while(false) { foo(); continue }\", \"\");\n\n    fold(\"while(0) { foo() }\", \"\");\n  }\n",
        "begin_line": 162,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 39)",
            "(line 165,col 5)-(line 165,col 40)",
            "(line 166,col 5)-(line 166,col 43)",
            "(line 168,col 5)-(line 168,col 34)",
            "(line 170,col 5)-(line 170,col 49)",
            "(line 173,col 5)-(line 173,col 49)",
            "(line 175,col 5)-(line 175,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldUselessFor()",
        "snippet": "  public void testFoldUselessFor() {\n    fold(\"for(;false;) { foo() }\", \"\");\n    fold(\"for(;void 0;) { foo() }\", \"\");\n    fold(\"for(;undefined;) { foo() }\", \"\");\n    fold(\"for(;true;) foo() \", \"for(;;) foo() \");\n    foldSame(\"for(;;) foo()\");\n    fold(\"for(;false;) { var a = 0; }\", \"var a\");\n\n    // Make sure it plays nice with minimizing\n    fold(\"for(;false;) { foo(); continue }\", \"\");\n  }\n",
        "begin_line": 178,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 39)",
            "(line 180,col 5)-(line 180,col 40)",
            "(line 181,col 5)-(line 181,col 43)",
            "(line 182,col 5)-(line 182,col 49)",
            "(line 183,col 5)-(line 183,col 30)",
            "(line 184,col 5)-(line 184,col 49)",
            "(line 187,col 5)-(line 187,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldUselessDo()",
        "snippet": "  public void testFoldUselessDo() {\n    fold(\"do { foo() } while(false);\", \"foo()\");\n    fold(\"do { foo() } while(void 0);\", \"foo()\");\n    fold(\"do { foo() } while(undefined);\", \"foo()\");\n    fold(\"do { foo() } while(true);\", \"do { foo() } while(true);\");\n    fold(\"do { var a = 0; } while(false);\", \"var a=0\");\n\n    fold(\"do { var a = 0; } while(!{a:foo()});\", \"var a=0;foo()\");\n\n    // Can't fold with break or continues.\n    foldSame(\"do { foo(); continue; } while(0)\");\n    foldSame(\"do { foo(); break; } while(0)\");\n  }\n",
        "begin_line": 190,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 191,col 5)-(line 191,col 48)",
            "(line 192,col 5)-(line 192,col 49)",
            "(line 193,col 5)-(line 193,col 52)",
            "(line 194,col 5)-(line 194,col 67)",
            "(line 195,col 5)-(line 195,col 55)",
            "(line 197,col 5)-(line 197,col 66)",
            "(line 200,col 5)-(line 200,col 49)",
            "(line 201,col 5)-(line 201,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testMinimizeWhileConstantCondition()",
        "snippet": "  public void testMinimizeWhileConstantCondition() {\n    fold(\"while(true) foo()\", \"while(true) foo()\");\n    fold(\"while(0) foo()\", \"\");\n    fold(\"while(0.0) foo()\", \"\");\n    fold(\"while(NaN) foo()\", \"\");\n    fold(\"while(null) foo()\", \"\");\n    fold(\"while(undefined) foo()\", \"\");\n    fold(\"while('') foo()\", \"\");\n  }\n",
        "begin_line": 204,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 51)",
            "(line 206,col 5)-(line 206,col 31)",
            "(line 207,col 5)-(line 207,col 33)",
            "(line 208,col 5)-(line 208,col 33)",
            "(line 209,col 5)-(line 209,col 34)",
            "(line 210,col 5)-(line 210,col 39)",
            "(line 211,col 5)-(line 211,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldConstantCommaExpressions()",
        "snippet": "  public void testFoldConstantCommaExpressions() {\n    fold(\"if (true, false) {foo()}\", \"\");\n    fold(\"if (false, true) {foo()}\", \"foo()\");\n    fold(\"true, foo()\", \"foo()\");\n    fold(\"(1 + 2 + ''), foo()\", \"foo()\");\n  }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 41)",
            "(line 216,col 5)-(line 216,col 46)",
            "(line 217,col 5)-(line 217,col 33)",
            "(line 218,col 5)-(line 218,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveUselessOps()",
        "snippet": "  public void testRemoveUselessOps() {\n    // There are four place where expression results are discarded:\n    //  - a top level expression EXPR_RESULT\n    //  - the LHS of a COMMA\n    //  - the FOR init expression\n    //  - the FOR increment expression\n\n\n    // Known side-effect free functions calls are removed.\n    fold(\"Math.random()\", \"\");\n    fold(\"Math.random(f() + g())\", \"f(),g();\");\n    fold(\"Math.random(f(),g(),h())\", \"f(),g(),h();\");\n\n    // Calls to functions with unknown side-effects are are left.\n    foldSame(\"f();\");\n    foldSame(\"(function () {})();\");\n\n    // Uncalled function expressions are removed\n    fold(\"(function () {});\", \"\");\n    fold(\"(function f() {});\", \"\");\n    // ... including any code they contain.\n    fold(\"(function () {foo();});\", \"\");\n\n    // Useless operators are removed.\n    fold(\"+f()\", \"f()\");\n    fold(\"a=(+f(),g())\", \"a=(f(),g())\");\n    fold(\"a=(true,g())\", \"a=g()\");\n    fold(\"f(),true\", \"f()\");\n    fold(\"f() + g()\", \"f(),g()\");\n\n    fold(\"for(;;+f()){}\", \"for(;;f()){}\");\n    fold(\"for(+f();;g()){}\", \"for(f();;g()){}\");\n    fold(\"for(;;Math.random(f(),g(),h())){}\", \"for(;;f(),g(),h()){}\");\n\n    // The optimization cascades into conditional expressions:\n    fold(\"g() && +f()\", \"g() && f()\");\n    fold(\"g() || +f()\", \"g() || f()\");\n    fold(\"x ? g() : +f()\", \"x ? g() : f()\");\n\n    fold(\"+x()\", \"x()\");\n    fold(\"+x() * 2\", \"x()\");\n    fold(\"-(+x() * 2)\", \"x()\");\n    fold(\"2 -(+x() * 2)\", \"x()\");\n    fold(\"x().foo\", \"x()\");\n    foldSame(\"x().foo()\");\n\n    foldSame(\"x++\");\n    foldSame(\"++x\");\n    foldSame(\"x--\");\n    foldSame(\"--x\");\n    foldSame(\"x = 2\");\n    foldSame(\"x *= 2\");\n\n    // Sanity check, other expression are left alone.\n    foldSame(\"function f() {}\");\n    foldSame(\"var x;\");\n  }\n",
        "begin_line": 222,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 30)",
            "(line 232,col 5)-(line 232,col 47)",
            "(line 233,col 5)-(line 233,col 53)",
            "(line 236,col 5)-(line 236,col 21)",
            "(line 237,col 5)-(line 237,col 36)",
            "(line 240,col 5)-(line 240,col 34)",
            "(line 241,col 5)-(line 241,col 35)",
            "(line 243,col 5)-(line 243,col 40)",
            "(line 246,col 5)-(line 246,col 24)",
            "(line 247,col 5)-(line 247,col 40)",
            "(line 248,col 5)-(line 248,col 34)",
            "(line 249,col 5)-(line 249,col 28)",
            "(line 250,col 5)-(line 250,col 33)",
            "(line 252,col 5)-(line 252,col 42)",
            "(line 253,col 5)-(line 253,col 48)",
            "(line 254,col 5)-(line 254,col 70)",
            "(line 257,col 5)-(line 257,col 38)",
            "(line 258,col 5)-(line 258,col 38)",
            "(line 259,col 5)-(line 259,col 44)",
            "(line 261,col 5)-(line 261,col 24)",
            "(line 262,col 5)-(line 262,col 28)",
            "(line 263,col 5)-(line 263,col 31)",
            "(line 264,col 5)-(line 264,col 33)",
            "(line 265,col 5)-(line 265,col 27)",
            "(line 266,col 5)-(line 266,col 26)",
            "(line 268,col 5)-(line 268,col 20)",
            "(line 269,col 5)-(line 269,col 20)",
            "(line 270,col 5)-(line 270,col 20)",
            "(line 271,col 5)-(line 271,col 20)",
            "(line 272,col 5)-(line 272,col 22)",
            "(line 273,col 5)-(line 273,col 23)",
            "(line 276,col 5)-(line 276,col 32)",
            "(line 277,col 5)-(line 277,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testOptimizeSwitch()",
        "snippet": "  public void testOptimizeSwitch() {\n    fold(\"switch(a){}\", \"\");\n    fold(\"switch(foo()){}\", \"foo()\");\n    fold(\"switch(a){default:}\", \"\");\n    fold(\"switch(a){default:break;}\", \"\");\n    fold(\"switch(a){default:var b;break;}\", \"var b\");\n    fold(\"switch(a){case 1: default:}\", \"\");\n    fold(\"switch(a){default: case 1:}\", \"\");\n    fold(\"switch(a){default: break; case 1:break;}\", \"\");\n    fold(\"switch(a){default: var b; break; case 1: var c; break;}\",\n        \"var c; var b;\");\n\n    // Can't remove cases if a default exists.\n    foldSame(\"function f() {switch(a){default: return; case 1: break;}}\");\n    foldSame(\"function f() {switch(a){case 1: foo();}}\");\n    foldSame(\"function f() {switch(a){case 3: case 2: case 1: foo();}}\");\n\n    fold(\"function f() {switch(a){case 2: case 1: default: foo();}}\",\n         \"function f() {switch(a){default: foo();}}\");\n    fold(\"switch(a){case 1: default:break; case 2: foo()}\",\n         \"switch(a){case 2: foo()}\");\n    foldSame(\"switch(a){case 1: goo(); default:break; case 2: foo()}\");\n\n    // TODO(johnlenz): merge the useless \"case 2\"\n    foldSame(\"switch(a){case 1: goo(); case 2:break; case 3: foo()}\");\n\n    // Can't remove cases if something useful is done.\n    foldSame(\"switch(a){case 1: var c =2; break;}\");\n    foldSame(\"function f() {switch(a){case 1: return;}}\");\n    foldSame(\"x:switch(a){case 1: break x;}\");\n  }\n",
        "begin_line": 280,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 281,col 28)",
            "(line 282,col 5)-(line 282,col 37)",
            "(line 283,col 5)-(line 283,col 36)",
            "(line 284,col 5)-(line 284,col 42)",
            "(line 285,col 5)-(line 285,col 53)",
            "(line 286,col 5)-(line 286,col 44)",
            "(line 287,col 5)-(line 287,col 44)",
            "(line 288,col 5)-(line 288,col 57)",
            "(line 289,col 5)-(line 290,col 25)",
            "(line 293,col 5)-(line 293,col 74)",
            "(line 294,col 5)-(line 294,col 57)",
            "(line 295,col 5)-(line 295,col 73)",
            "(line 297,col 5)-(line 298,col 54)",
            "(line 299,col 5)-(line 300,col 37)",
            "(line 301,col 5)-(line 301,col 71)",
            "(line 304,col 5)-(line 304,col 70)",
            "(line 307,col 5)-(line 307,col 52)",
            "(line 308,col 5)-(line 308,col 58)",
            "(line 309,col 5)-(line 309,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveNumber()",
        "snippet": "  public void testRemoveNumber() {\n    test(\"3\", \"\");\n  }\n",
        "begin_line": 312,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 5)-(line 313,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveVarGet1()",
        "snippet": "  public void testRemoveVarGet1() {\n    test(\"a\", \"\");\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveVarGet2()",
        "snippet": "  public void testRemoveVarGet2() {\n    test(\"var a = 1;a\", \"var a = 1\");\n  }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 321,col 5)-(line 321,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveNamespaceGet1()",
        "snippet": "  public void testRemoveNamespaceGet1() {\n    test(\"var a = {};a.b\", \"var a = {}\");\n  }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 325,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveNamespaceGet2()",
        "snippet": "  public void testRemoveNamespaceGet2() {\n    test(\"var a = {};a.b=1;a.b\", \"var a = {};a.b=1\");\n  }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemovePrototypeGet1()",
        "snippet": "  public void testRemovePrototypeGet1() {\n    test(\"var a = {};a.prototype.b\", \"var a = {}\");\n  }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemovePrototypeGet2()",
        "snippet": "  public void testRemovePrototypeGet2() {\n    test(\"var a = {};a.prototype.b = 1;a.prototype.b\",\n         \"var a = {};a.prototype.b = 1\");\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 338,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveAdd1()",
        "snippet": "  public void testRemoveAdd1() {\n    test(\"1 + 2\", \"\");\n  }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveVar1()",
        "snippet": "  public void testNoRemoveVar1() {\n    testSame(\"var a = 1\");\n  }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 346,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveVar2()",
        "snippet": "  public void testNoRemoveVar2() {\n    testSame(\"var a = 1, b = 2\");\n  }\n",
        "begin_line": 349,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveAssign1()",
        "snippet": "  public void testNoRemoveAssign1() {\n    testSame(\"a = 1\");\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveAssign2()",
        "snippet": "  public void testNoRemoveAssign2() {\n    testSame(\"a = b = 1\");\n  }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveAssign3()",
        "snippet": "  public void testNoRemoveAssign3() {\n    test(\"1 + (a = 2)\", \"a = 2\");\n  }\n",
        "begin_line": 361,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 362,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveAssign4()",
        "snippet": "  public void testNoRemoveAssign4() {\n    testSame(\"x.a = 1\");\n  }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 366,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveAssign5()",
        "snippet": "  public void testNoRemoveAssign5() {\n    testSame(\"x.a = x.b = 1\");\n  }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveAssign6()",
        "snippet": "  public void testNoRemoveAssign6() {\n    test(\"1 + (x.a = 2)\", \"x.a = 2\");\n  }\n",
        "begin_line": 373,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 374,col 5)-(line 374,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveCall1()",
        "snippet": "  public void testNoRemoveCall1() {\n    testSame(\"a()\");\n  }\n",
        "begin_line": 377,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 378,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveCall2()",
        "snippet": "  public void testNoRemoveCall2() {\n    test(\"a()+b()\", \"a(),b()\");\n  }\n",
        "begin_line": 381,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveCall3()",
        "snippet": "  public void testNoRemoveCall3() {\n    testSame(\"a() && b()\");\n  }\n",
        "begin_line": 385,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 386,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveCall4()",
        "snippet": "  public void testNoRemoveCall4() {\n    testSame(\"a() || b()\");\n  }\n",
        "begin_line": 389,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 390,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveCall5()",
        "snippet": "  public void testNoRemoveCall5() {\n    test(\"a() || 1\", \"a()\");\n  }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveCall6()",
        "snippet": "  public void testNoRemoveCall6() {\n    testSame(\"1 || a()\");\n  }\n",
        "begin_line": 397,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 398,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveThrow1()",
        "snippet": "  public void testNoRemoveThrow1() {\n    testSame(\"function f(){throw a()}\");\n  }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveThrow2()",
        "snippet": "  public void testNoRemoveThrow2() {\n    testSame(\"function f(){throw a}\");\n  }\n",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 406,col 5)-(line 406,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveThrow3()",
        "snippet": "  public void testNoRemoveThrow3() {\n    testSame(\"function f(){throw 10}\");\n  }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 410,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveInControlStructure1()",
        "snippet": "  public void testRemoveInControlStructure1() {\n    test(\"if(x()) 1\", \"x()\");\n  }\n",
        "begin_line": 413,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 414,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveInControlStructure2()",
        "snippet": "  public void testRemoveInControlStructure2() {\n    test(\"while(2) 1\", \"while(2);\");\n  }\n",
        "begin_line": 417,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveInControlStructure3()",
        "snippet": "  public void testRemoveInControlStructure3() {\n    test(\"for(1;2;3) 4\", \"for(;;);\");\n  }\n",
        "begin_line": 421,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 422,col 5)-(line 422,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook1()",
        "snippet": "  public void testHook1() {\n    test(\"1 ? 2 : 3\", \"\");\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 426,col 5)-(line 426,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook2()",
        "snippet": "  public void testHook2() {\n    test(\"x ? a() : 3\", \"x && a()\");\n  }\n",
        "begin_line": 429,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 430,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook3()",
        "snippet": "  public void testHook3() {\n    test(\"x ? 2 : a()\", \"x || a()\");\n  }\n",
        "begin_line": 433,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook4()",
        "snippet": "  public void testHook4() {\n    testSame(\"x ? a() : b()\");\n  }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 438,col 5)-(line 438,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook5()",
        "snippet": "  public void testHook5() {\n    test(\"a() ? 1 : 2\", \"a()\");\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook6()",
        "snippet": "  public void testHook6() {\n    test(\"a() ? b() : 2\", \"a() && b()\");\n  }\n",
        "begin_line": 445,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 446,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook7()",
        "snippet": "  public void testHook7() {\n    test(\"a() ? 1 : b()\", \"a() || b()\");\n  }\n",
        "begin_line": 452,
        "end_line": 454,
        "comment": " precedents would require them.",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testHook8()",
        "snippet": "  public void testHook8() {\n    testSame(\"a() ? b() : c()\");\n  }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 457,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testShortCircuit1()",
        "snippet": "  public void testShortCircuit1() {\n    testSame(\"1 && a()\");\n  }\n",
        "begin_line": 460,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testShortCircuit2()",
        "snippet": "  public void testShortCircuit2() {\n    test(\"1 && a() && 2\", \"1 && a()\");\n  }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testShortCircuit3()",
        "snippet": "  public void testShortCircuit3() {\n    test(\"a() && 1 && 2\", \"a()\");\n  }\n",
        "begin_line": 468,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 469,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testShortCircuit4()",
        "snippet": "  public void testShortCircuit4() {\n    testSame(\"a() && 1 && b()\");\n  }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testComplex1()",
        "snippet": "  public void testComplex1() {\n    test(\"1 && a() + b() + c()\", \"1 && (a(), b(), c())\");\n  }\n",
        "begin_line": 476,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 477,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testComplex2()",
        "snippet": "  public void testComplex2() {\n    test(\"1 && (a() ? b() : 1)\", \"1 && a() && b()\");\n  }\n",
        "begin_line": 480,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testComplex3()",
        "snippet": "  public void testComplex3() {\n    test(\"1 && (a() ? b() : 1 + c())\", \"1 && (a() ? b() : c())\");\n  }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 485,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testComplex4()",
        "snippet": "  public void testComplex4() {\n    test(\"1 && (a() ? 1 : 1 + c())\", \"1 && (a() || c())\");\n  }\n",
        "begin_line": 488,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 489,col 5)-(line 489,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testComplex5()",
        "snippet": "  public void testComplex5() {\n    // can't simplify lhs of short circuit statements with side effects\n    testSame(\"(a() ? 1 : 1 + c()) && foo()\");\n  }\n",
        "begin_line": 492,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveFunctionDeclaration1()",
        "snippet": "  public void testNoRemoveFunctionDeclaration1() {\n    testSame(\"function foo(){}\");\n  }\n",
        "begin_line": 497,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 498,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveFunctionDeclaration2()",
        "snippet": "  public void testNoRemoveFunctionDeclaration2() {\n    testSame(\"var foo = function (){}\");\n  }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 502,col 5)-(line 502,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoSimplifyFunctionArgs1()",
        "snippet": "  public void testNoSimplifyFunctionArgs1() {\n    testSame(\"f(1 + 2, 3 + g())\");\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoSimplifyFunctionArgs2()",
        "snippet": "  public void testNoSimplifyFunctionArgs2() {\n    testSame(\"1 && f(1 + 2, 3 + g())\");\n  }\n",
        "begin_line": 509,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 510,col 5)-(line 510,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoSimplifyFunctionArgs3()",
        "snippet": "  public void testNoSimplifyFunctionArgs3() {\n    testSame(\"1 && foo(a() ? b() : 1 + c())\");\n  }\n",
        "begin_line": 513,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 514,col 5)-(line 514,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveInherits1()",
        "snippet": "  public void testNoRemoveInherits1() {\n    testSame(\"var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a)\");\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveInherits2()",
        "snippet": "  public void testNoRemoveInherits2() {\n    test(\"var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a) + 1\",\n         \"var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a)\");\n  }\n",
        "begin_line": 521,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 523,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveInherits3()",
        "snippet": "  public void testNoRemoveInherits3() {\n    testSame(\"this.a = {}; var b = {}; b.inherits(a);\");\n  }\n",
        "begin_line": 526,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 527,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNoRemoveInherits4()",
        "snippet": "  public void testNoRemoveInherits4() {\n    test(\"this.a = {}; var b = {}; b.inherits(a) + 1;\",\n         \"this.a = {}; var b = {}; b.inherits(a)\");\n  }\n",
        "begin_line": 530,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 532,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveFromLabel1()",
        "snippet": "  public void testRemoveFromLabel1() {\n    test(\"LBL: void 0\", \"LBL: {}\");\n  }\n",
        "begin_line": 535,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 536,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testRemoveFromLabel2()",
        "snippet": "  public void testRemoveFromLabel2() {\n    test(\"LBL: foo() + 1 + bar()\", \"LBL: foo(),bar()\");\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testCall1()",
        "snippet": "  public void testCall1() {\n    test(\"Math.sin(0);\", \"\");\n  }\n",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 544,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testCall2()",
        "snippet": "  public void testCall2() {\n    test(\"1 + Math.sin(0);\", \"\");\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 548,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNew1()",
        "snippet": "  public void testNew1() {\n    test(\"new Date;\", \"\");\n  }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testNew2()",
        "snippet": "  public void testNew2() {\n    test(\"1 + new Date;\", \"\");\n  }\n",
        "begin_line": 555,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 556,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testFoldAssign()",
        "snippet": "  public void testFoldAssign() {\n    test(\"x=x\", \"\");\n    testSame(\"x=xy\");\n    testSame(\"x=x + 1\");\n    testSame(\"x.a=x.a\");\n    test(\"var y=(x=x)\", \"var y=x\");\n    test(\"y=1 + (x=x)\", \"y=1 + x\");\n  }\n",
        "begin_line": 559,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 20)",
            "(line 561,col 5)-(line 561,col 21)",
            "(line 562,col 5)-(line 562,col 24)",
            "(line 563,col 5)-(line 563,col 24)",
            "(line 564,col 5)-(line 564,col 35)",
            "(line 565,col 5)-(line 565,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testTryCatchFinally()",
        "snippet": "  public void testTryCatchFinally() {\n    testSame(\"try {foo()} catch (e) {bar()}\");\n    testSame(\"try { try {foo()} catch (e) {bar()}} catch (x) {bar()}\");\n    test(\"try {var x = 1} finally {}\", \"var x = 1;\");\n    testSame(\"try {var x = 1} finally {x()}\");\n    test(\"function f() { return; try{var x = 1}finally{} }\",\n        \"function f() { return; var x = 1; }\");\n  }\n",
        "begin_line": 568,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 569,col 46)",
            "(line 570,col 5)-(line 570,col 71)",
            "(line 571,col 5)-(line 571,col 53)",
            "(line 572,col 5)-(line 572,col 46)",
            "(line 573,col 5)-(line 574,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() {\n    test(\"({})\", \"\");\n    test(\"({a:1})\", \"\");\n    test(\"({a:foo()})\", \"foo()\");\n    test(\"({'a':foo()})\", \"foo()\");\n  }\n",
        "begin_line": 577,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 578,col 21)",
            "(line 579,col 5)-(line 579,col 24)",
            "(line 580,col 5)-(line 580,col 33)",
            "(line 581,col 5)-(line 581,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest.testArrayLiteral()",
        "snippet": "  public void testArrayLiteral() {\n    test(\"([])\", \"\");\n    test(\"([1])\", \"\");\n    test(\"([a])\", \"\");\n    test(\"([foo()])\", \"foo()\");\n  }\n",
        "begin_line": 584,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 21)",
            "(line 586,col 5)-(line 586,col 22)",
            "(line 587,col 5)-(line 587,col 22)",
            "(line 588,col 5)-(line 588,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 6)",
            "(line 122,col 5)-(line 122,col 39)",
            "(line 123,col 5)-(line 123,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 156,
        "end_line": 171,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 52)",
            "(line 159,col 5)-(line 161,col 5)",
            "(line 165,col 5)-(line 165,col 32)",
            "(line 167,col 5)-(line 168,col 65)",
            "(line 169,col 5)-(line 169,col 55)",
            "(line 170,col 5)-(line 170,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 181,
        "end_line": 185,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 29)",
            "(line 221,col 5)-(line 221,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 28)",
            "(line 260,col 5)-(line 260,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 288,
        "end_line": 296,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 290,col 5)-(line 292,col 40)",
            "(line 294,col 5)-(line 295,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 362,
        "end_line": 365,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 381,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 384,col 5)-(line 386,col 6)",
            "(line 387,col 5)-(line 387,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 424,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 41)",
            "(line 408,col 5)-(line 408,col 28)",
            "(line 410,col 5)-(line 410,col 43)",
            "(line 412,col 5)-(line 414,col 5)",
            "(line 417,col 5)-(line 417,col 39)",
            "(line 418,col 5)-(line 419,col 58)",
            "(line 421,col 5)-(line 421,col 71)",
            "(line 423,col 5)-(line 423,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 458,
        "end_line": 461,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 476,
        "end_line": 487,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 56)",
            "(line 482,col 5)-(line 484,col 5)",
            "(line 485,col 5)-(line 485,col 55)",
            "(line 486,col 5)-(line 486,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 507,
        "end_line": 510,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 41)",
            "(line 525,col 5)-(line 525,col 28)",
            "(line 527,col 5)-(line 527,col 56)",
            "(line 528,col 5)-(line 528,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 537,col 5)-(line 537,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 548,col 5)-(line 548,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 564,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 588,
        "end_line": 595,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 590,col 5)-(line 594,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 608,
        "end_line": 614,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 612,col 6)",
            "(line 613,col 5)-(line 613,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 621,
        "end_line": 623,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 622,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 644,
        "end_line": 647,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 664,
        "end_line": 677,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 676,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 692,col 5)-(line 692,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 710,
        "end_line": 916,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 713,col 5)-(line 713,col 51)",
            "(line 714,col 5)-(line 714,col 44)",
            "(line 716,col 5)-(line 716,col 39)",
            "(line 717,col 5)-(line 718,col 66)",
            "(line 720,col 5)-(line 722,col 5)",
            "(line 723,col 5)-(line 723,col 44)",
            "(line 724,col 5)-(line 724,col 40)",
            "(line 727,col 5)-(line 727,col 38)",
            "(line 728,col 5)-(line 728,col 54)",
            "(line 729,col 5)-(line 729,col 50)",
            "(line 731,col 5)-(line 731,col 45)",
            "(line 732,col 5)-(line 732,col 68)",
            "(line 733,col 5)-(line 733,col 34)",
            "(line 734,col 5)-(line 734,col 59)",
            "(line 735,col 5)-(line 735,col 35)",
            "(line 737,col 5)-(line 738,col 39)",
            "(line 740,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 915,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 918,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 920,col 5)-(line 920,col 57)",
            "(line 921,col 5)-(line 921,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 927,
        "end_line": 945,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 41)",
            "(line 929,col 5)-(line 929,col 62)",
            "(line 930,col 5)-(line 932,col 5)",
            "(line 933,col 5)-(line 933,col 55)",
            "(line 934,col 5)-(line 934,col 39)",
            "(line 935,col 5)-(line 936,col 66)",
            "(line 937,col 5)-(line 937,col 44)",
            "(line 938,col 5)-(line 938,col 42)",
            "(line 940,col 5)-(line 943,col 5)",
            "(line 944,col 5)-(line 944,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 47)",
            "(line 957,col 5)-(line 959,col 5)",
            "(line 960,col 5)-(line 960,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 967,
        "end_line": 973,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 47)",
            "(line 969,col 5)-(line 971,col 5)",
            "(line 972,col 5)-(line 972,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 980,
        "end_line": 987,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 981,col 5)-(line 981,col 48)",
            "(line 982,col 5)-(line 982,col 47)",
            "(line 983,col 5)-(line 985,col 5)",
            "(line 986,col 5)-(line 986,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 994,
        "end_line": 1000,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 995,col 5)-(line 995,col 47)",
            "(line 996,col 5)-(line 998,col 5)",
            "(line 999,col 5)-(line 999,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1006,
        "end_line": 1013,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1007,col 5)-(line 1007,col 53)",
            "(line 1008,col 5)-(line 1011,col 5)",
            "(line 1012,col 5)-(line 1012,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1016,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 7)-(line 1017,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1020,
        "end_line": 1021,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1023,
        "end_line": 1024,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1027,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1028,col 5)-(line 1028,col 39)",
            "(line 1029,col 5)-(line 1029,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1037,
        "end_line": 1049,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 52)",
            "(line 1039,col 5)-(line 1047,col 39)",
            "(line 1048,col 5)-(line 1048,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-9abd6611-f903-49c9-b863-904ac912030e.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1041,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 13)-(line 1044,col 13)"
        ]
    }
]