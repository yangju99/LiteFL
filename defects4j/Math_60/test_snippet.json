[
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String)",
        "snippet": "    public NormalDistributionTest(String arg0) {\n        super(arg0);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n     * Constructor for NormalDistributionTest.\n     * @param arg0\n     ",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public NormalDistribution makeDistribution() {\n        return new NormalDistributionImpl(2.1, 1.4);\n    }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R\n        return new double[] {-2.226325228634938d, -1.156887023657177d, -0.643949578356075d, -0.2027950777320613d, 0.305827808237559d,\n                6.42632522863494d, 5.35688702365718d, 4.843949578356074d, 4.40279507773206d, 3.89417219176244d};\n    }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 52,col 9)-(line 53,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n                0.990d, 0.975d, 0.950d, 0.900d};\n    }\n",
        "begin_line": 57,
        "end_line": 61,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 59,col 9)-(line 60,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] {0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380,\n                0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380};\n    }\n",
        "begin_line": 64,
        "end_line": 68,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 66,col 9)-(line 67,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        setTolerance(defaultTolerance);\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 22)",
            "(line 75,col 9)-(line 75,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()",
        "snippet": "    private void verifyQuantiles() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        double mu = distribution.getMean();\n        double sigma = distribution.getStandardDeviation();\n        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma,\n                mu, mu + sigma, mu + 2 * sigma,  mu + 3 * sigma, mu + 4 * sigma,\n                mu + 5 * sigma});\n        // Quantiles computed using R (same as Mathematica)\n        setCumulativeTestValues(new double[] {0.02275013194817921, 0.158655253931457, 0.5, 0.841344746068543,\n                0.977249868051821, 0.99865010196837, 0.999968328758167,  0.999999713348428});\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 80,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 81)",
            "(line 82,col 9)-(line 82,col 43)",
            "(line 83,col 9)-(line 83,col 59)",
            "(line 84,col 9)-(line 86,col 33)",
            "(line 88,col 9)-(line 89,col 93)",
            "(line 90,col 9)-(line 90,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles()",
        "snippet": "    public void testQuantiles() throws Exception {\n        setDensityTestValues(new double[] {0.0385649760808, 0.172836231799, 0.284958771715, 0.172836231799, 0.0385649760808,\n                0.00316560600853, 9.55930184035e-05, 1.06194251052e-06});\n        verifyQuantiles();\n        verifyDensities();\n\n        setDistribution(new NormalDistributionImpl(0, 1));\n        setDensityTestValues(new double[] {0.0539909665132, 0.241970724519, 0.398942280401, 0.241970724519, 0.0539909665132,\n                0.00443184841194, 0.000133830225765, 1.48671951473e-06});\n        verifyQuantiles();\n        verifyDensities();\n\n        setDistribution(new NormalDistributionImpl(0, 0.1));\n        setDensityTestValues(new double[] {0.539909665132, 2.41970724519, 3.98942280401, 2.41970724519,\n                0.539909665132, 0.0443184841194, 0.00133830225765, 1.48671951473e-05});\n        verifyQuantiles();\n        verifyDensities();\n    }\n",
        "begin_line": 93,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 95,col 73)",
            "(line 96,col 9)-(line 96,col 26)",
            "(line 97,col 9)-(line 97,col 26)",
            "(line 99,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 101,col 73)",
            "(line 102,col 9)-(line 102,col 26)",
            "(line 103,col 9)-(line 103,col 26)",
            "(line 105,col 9)-(line 105,col 60)",
            "(line 106,col 9)-(line 107,col 87)",
            "(line 108,col 9)-(line 108,col 26)",
            "(line 109,col 9)-(line 109,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(\n                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 60)",
            "(line 114,col 9)-(line 115,col 83)",
            "(line 116,col 9)-(line 116,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testGetMean()",
        "snippet": "    public void testGetMean() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        assertEquals(2.1, distribution.getMean(), 0);\n    }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 81)",
            "(line 121,col 9)-(line 121,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation()",
        "snippet": "    public void testGetStandardDeviation() {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        assertEquals(1.4, distribution.getStandardDeviation(), 0);\n    }\n",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 81)",
            "(line 126,col 9)-(line 126,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testPreconditions()",
        "snippet": "    public void testPreconditions() {\n        try {\n            new NormalDistributionImpl(1, 0);\n            fail(\"Should have generated NotStrictlyPositiveException\");\n        } catch (NotStrictlyPositiveException e) {\n            // Expected.\n        }\n    }\n",
        "begin_line": 129,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 135,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testDensity()",
        "snippet": "    public void testDensity() {\n        double [] x = new double[]{-2, -1, 0, 1, 2};\n        // R 2.5: print(dnorm(c(-2,-1,0,1,2)), digits=10)\n        checkDensity(0, 1, x, new double[]{0.05399096651, 0.24197072452, 0.39894228040, 0.24197072452, 0.05399096651});\n        // R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)\n        checkDensity(1.1, 1, x, new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});\n    }\n",
        "begin_line": 138,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 52)",
            "(line 141,col 9)-(line 141,col 119)",
            "(line 143,col 9)-(line 143,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.checkDensity(double, double, double[], double[])",
        "snippet": "    private void checkDensity(double mean, double sd, double[] x, double[] expected) {\n        NormalDistribution d = new NormalDistributionImpl(mean, sd);\n        for (int i = 0; i < x.length; i++) {\n            assertEquals(expected[i], d.density(x[i]), 1e-9);\n        }\n    }\n",
        "begin_line": 146,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 68)",
            "(line 148,col 9)-(line 150,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()",
        "snippet": "    public void testExtremeValues() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                assertTrue(lowerTail > 0.0d);\n                assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);\n                assertTrue(upperTail > 0.99999);\n            }\n        }\n        \n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n        \n   }\n",
        "begin_line": 157,
        "end_line": 179,
        "comment": "\n     * Check to make sure top-coding of extreme values works correctly.\n     * Verifies fixes for JIRA MATH-167, MATH-414\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 75)",
            "(line 159,col 9)-(line 172,col 9)",
            "(line 174,col 9)-(line 174,col 81)",
            "(line 175,col 9)-(line 175,col 82)",
            "(line 176,col 9)-(line 176,col 89)",
            "(line 177,col 9)-(line 177,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionTest.testMath280()",
        "snippet": "    public void testMath280() throws MathException {\n        NormalDistribution normal = new NormalDistributionImpl(0,1);\n        double result = normal.inverseCumulativeProbability(0.9986501019683698);\n        assertEquals(3.0, result, defaultTolerance);\n        result = normal.inverseCumulativeProbability(0.841344746068543);\n        assertEquals(1.0, result, defaultTolerance);\n        result = normal.inverseCumulativeProbability(0.9999683287581673);\n        assertEquals(4.0, result, defaultTolerance);\n        result = normal.inverseCumulativeProbability(0.9772498680518209);\n        assertEquals(2.0, result, defaultTolerance);\n    }\n",
        "begin_line": 181,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 68)",
            "(line 183,col 9)-(line 183,col 80)",
            "(line 184,col 9)-(line 184,col 52)",
            "(line 185,col 9)-(line 185,col 72)",
            "(line 186,col 9)-(line 186,col 52)",
            "(line 187,col 9)-(line 187,col 73)",
            "(line 188,col 9)-(line 188,col 52)",
            "(line 189,col 9)-(line 189,col 73)",
            "(line 190,col 9)-(line 190,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String)",
        "snippet": "    public ContinuousDistributionAbstractTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructor for ContinuousDistributionAbstractTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract ContinuousDistribution makeDistribution();\n",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeCumulativeTestPoints();\n",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Creates the default cumulative probability test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Creates the default cumulative probability test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeDensityTestValues()",
        "snippet": "    public abstract double[] makeDensityTestValues();\n",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Creates the default density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public double[] makeInverseCumulativeTestPoints() {\n        return makeCumulativeTestValues();\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public double[] makeInverseCumulativeTestValues() {\n        return makeCumulativeTestPoints();\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        distribution = makeDistribution();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();\n        densityTestValues = makeDensityTestValues();\n    }\n",
        "begin_line": 123,
        "end_line": 132,
        "comment": "\n     * Setup sets all test instance data to default values\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 22)",
            "(line 126,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 58)",
            "(line 128,col 9)-(line 128,col 58)",
            "(line 129,col 9)-(line 129,col 72)",
            "(line 130,col 9)-(line 130,col 72)",
            "(line 131,col 9)-(line 131,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        distribution = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;\n        densityTestValues = null;\n    }\n",
        "begin_line": 137,
        "end_line": 146,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 25)",
            "(line 140,col 9)-(line 140,col 28)",
            "(line 141,col 9)-(line 141,col 36)",
            "(line 142,col 9)-(line 142,col 36)",
            "(line 143,col 9)-(line 143,col 43)",
            "(line 144,col 9)-(line 144,col 43)",
            "(line 145,col 9)-(line 145,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \"\n                + cumulativeTestPoints[i], cumulativeTestValues[i],\n                distribution.cumulativeProbability(cumulativeTestPoints[i]),\n                getTolerance());\n        }\n    }\n",
        "begin_line": 154,
        "end_line": 161,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 160,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n                 distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]),\n                 getTolerance());\n        }\n    }\n",
        "begin_line": 167,
        "end_line": 174,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 173,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyDensities()",
        "snippet": "    protected void verifyDensities() throws Exception {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect probability density value returned for \"\n                + cumulativeTestPoints[i], densityTestValues[i],\n                 //TODO: remove cast when density(double) is added to ContinuousDistribution\n                 ((AbstractContinuousDistribution) distribution).density(cumulativeTestPoints[i]),\n                 getTolerance());\n        }\n    }\n",
        "begin_line": 179,
        "end_line": 187,
        "comment": "\n     * Verifies that density calculations match expected values\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 186,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    public void testCumulativeProbabilities() throws Exception {\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    public void testInverseCumulativeProbabilities() throws Exception {\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testDensities()",
        "snippet": "    public void testDensities() throws Exception {\n        verifyDensities();\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Verifies that density calculations return expected values\n     * for default test instance data\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()",
        "snippet": "    public void testConsistency() throws Exception {\n        for (int i=1; i < cumulativeTestPoints.length; i++) {\n\n            // check that cdf(x, x) = 0\n            TestUtils.assertEquals(0d,\n               distribution.cumulativeProbability\n                 (cumulativeTestPoints[i], cumulativeTestPoints[i]), tolerance);\n\n            // check that P(a < X < b) = P(X < b) - P(X < a)\n            double upper = FastMath.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double lower = FastMath.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double diff = distribution.cumulativeProbability(upper) -\n                distribution.cumulativeProbability(lower);\n            double direct = distribution.cumulativeProbability(lower, upper);\n            TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\"\n                    + lower + \",\" + upper + \")\", diff, direct, tolerance);\n        }\n    }\n",
        "begin_line": 218,
        "end_line": 235,
        "comment": "\n     * Verifies that probability computations are consistent\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    public void testIllegalArguments() throws Exception {\n        try {\n            distribution.cumulativeProbability(1, 0);\n            fail(\"Expecting IllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            fail(\"Expecting IllegalArgumentException for p = -1\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            fail(\"Expecting IllegalArgumentException for p = 2\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 240,
        "end_line": 259,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 241,col 9)-(line 246,col 9)",
            "(line 247,col 9)-(line 252,col 9)",
            "(line 253,col 9)-(line 258,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testSampling()",
        "snippet": "    public void testSampling() throws Exception {\n        AbstractContinuousDistribution dist = (AbstractContinuousDistribution) makeDistribution();\n        final int sampleSize = 1000;\n        double[] sample = dist.sample(sampleSize);\n        double[] quartiles = TestUtils.getDistributionQuartiles(dist);\n        double[] expected = {250, 250, 250, 250};\n        long[] counts = new long[4];\n        dist.reseedRandomGenerator(1000);  // Use fixed seed\n        for (int i = 0; i < sampleSize; i++) {\n            TestUtils.updateCounts(sample[i], counts, quartiles);\n        }\n        TestUtils.assertChiSquareAccept(expected, counts, 0.001);\n    }\n",
        "begin_line": 264,
        "end_line": 276,
        "comment": "\n     * Test sampling\n     ",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 98)",
            "(line 266,col 9)-(line 266,col 36)",
            "(line 267,col 9)-(line 267,col 50)",
            "(line 268,col 9)-(line 268,col 70)",
            "(line 269,col 9)-(line 269,col 49)",
            "(line 270,col 9)-(line 270,col 36)",
            "(line 271,col 9)-(line 271,col 41)",
            "(line 272,col 9)-(line 274,col 9)",
            "(line 275,col 9)-(line 275,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected double[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 282,
        "end_line": 284,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[])",
        "snippet": "    protected void setCumulativeTestPoints(double[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 289,
        "end_line": 291,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 303,
        "end_line": 305,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDensityTestValues()",
        "snippet": "    protected double[] getDensityTestValues() {\n        return densityTestValues;\n    }\n",
        "begin_line": 307,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDensityTestValues(double[])",
        "snippet": "    protected void setDensityTestValues(double[] densityTestValues) {\n        this.densityTestValues = densityTestValues;\n    }\n",
        "begin_line": 311,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution()",
        "snippet": "    protected ContinuousDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.AbstractContinuousDistribution)",
        "snippet": "    protected void setDistribution(AbstractContinuousDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected double[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 346,
        "end_line": 348,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[])",
        "snippet": "    protected void setInverseCumulativeTestValues(double[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 360,
        "end_line": 362,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.NormalDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 367,
        "end_line": 369,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 35)"
        ]
    }
]