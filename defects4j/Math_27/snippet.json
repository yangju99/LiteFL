[
    {
        "name": "Fraction.percentageValue#596",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.percentageValue()",
        "snippet": "    public double percentageValue() {\n        return multiply(100).doubleValue();\n    }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n     * <p>\n     * Gets the fraction percentage as a <tt>double</tt>. This calculates the\n     * fraction as the numerator divided by denominator multiplied by 100.\n     * </p>\n     *\n     * @return the fraction percentage as a <tt>double</tt>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.multiply#554",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.multiply(int)",
        "snippet": "    public Fraction multiply(final int i) {\n        return new Fraction(numerator * i, denominator);\n    }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "\n     * Multiply the fraction by an integer.\n     * @param i the <tt>integer</tt> to multiply by.\n     * @return this * i\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.doubleValue#317",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.doubleValue()",
        "snippet": "    @Override\n    public double doubleValue() {\n        return (double)numerator / (double)denominator;\n    }\n",
        "begin_line": 317,
        "end_line": 320,
        "comment": "\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>double</tt>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#2899",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(int)",
        "snippet": "    public static int abs(final int x) {\n        return (x < 0) ? -x : x;\n    }\n",
        "begin_line": 2899,
        "end_line": 2901,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0697
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArithmeticUtils.gcd#384",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java",
        "class_name": "org.apache.commons.math3.util.ArithmeticUtils",
        "signature": "org.apache.commons.math3.util.ArithmeticUtils.gcd(int, int)",
        "snippet": "    public static int gcd(final int p, final int q) {\n        int u = p;\n        int v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                                  p, q);\n            }\n            return FastMath.abs(u) + FastMath.abs(v);\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                              p, q);\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n        return -u * (1 << k); // gcd is u*2^k\n    }\n",
        "begin_line": 384,
        "end_line": 440,
        "comment": "\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations\n     * {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},\n     * {@code gcd(Integer.MIN_VALUE, 0)} and\n     * {@code gcd(0, Integer.MIN_VALUE)} throw an\n     * {@code ArithmeticException}, because the result would be 2^31, which\n     * is too large for an int value.</li>\n     * <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and\n     * {@code gcd(x, 0)} is the absolute value of {@code x}, except\n     * for the special cases above.\n     * <li>The invocation {@code gcd(0, 0)} is the only one which returns\n     * {@code 0}.</li>\n     * </ul>\n     *\n     * @param p Number.\n     * @param q Number.\n     * @return the greatest common divisor, never negative.\n     * @throws MathArithmeticException if the result cannot be represented as\n     * a non-negative {@code int} value.\n     * @since 1.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0697
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#256",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(int, int)",
        "snippet": "    public Fraction(int num, int den) {\n        if (den == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);\n        }\n        if (den < 0) {\n            if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE) {\n                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);\n            }\n            num = -num;\n            den = -den;\n        }\n        // reduce numerator and denominator by greatest common denominator.\n        final int d = ArithmeticUtils.gcd(num, den);\n        if (d > 1) {\n            num /= d;\n            den /= d;\n        }\n\n        // move sign to numerator.\n        if (den < 0) {\n            num = -num;\n            den = -den;\n        }\n        this.numerator   = num;\n        this.denominator = den;\n    }\n",
        "begin_line": 256,
        "end_line": 284,
        "comment": "\n     * Create a fraction given the numerator and denominator.  The fraction is\n     * reduced to lowest terms.\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws MathArithmeticException if the denominator is {@code zero}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0697
        },
        "num_failing_tests": 1
    }
]