[
    {
        "name": "DatasetUtilities.calculatePieDatasetTotal#151",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset)",
        "snippet": "    public static double calculatePieDatasetTotal(PieDataset dataset) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        List keys = dataset.getKeys();\n        double totalValue = 0;\n        Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            Comparable current = (Comparable) iterator.next();\n            if (current != null) {\n                Number value = dataset.getValue(current);\n                double v = 0.0;\n                if (value != null) {\n                    v = value.doubleValue();\n                }\n                if (v > 0) {\n                    totalValue = totalValue + v;\n                }\n            }\n        }\n        return totalValue;\n    }\n",
        "begin_line": 151,
        "end_line": 172,
        "comment": "\r\n     * Calculates the total of all the values in a {@link PieDataset}.  If \r\n     * the dataset contains negative or <code>null</code> values, they are \r\n     * ignored. \r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The total.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getLegendItems#2609",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getLegendItems()",
        "snippet": "    public LegendItemCollection getLegendItems() {\n\n        LegendItemCollection result = new LegendItemCollection();\n        if (this.dataset == null) {\n            return result;\n        }\n        List keys = this.dataset.getKeys();\n        int section = 0;\n        Shape shape = getLegendItemShape();\n        Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number n = this.dataset.getValue(key);\n            boolean include = true;\n            if (n == null) {\n                include = !this.ignoreNullValues;   \n            }\n            else {\n                double v = n.doubleValue();\n                if (v == 0.0) {\n                    include = !this.ignoreZeroValues;   \n                }\n                else {\n                    include = v > 0.0;   \n                }\n            }\n            if (include) {\n                String label = this.legendLabelGenerator.generateSectionLabel(\n                        this.dataset, key);\n                if (label != null) {\n                    String description = label;\n                    String toolTipText = null;\n                    if (this.legendLabelToolTipGenerator != null) {\n                        toolTipText = this.legendLabelToolTipGenerator\n                                .generateSectionLabel(this.dataset, key);\n                    }\n                    String urlText = null;\n                    if (this.legendLabelURLGenerator != null) {\n                        urlText = this.legendLabelURLGenerator.generateURL(\n                                this.dataset, key, this.pieIndex);\n                    }\n                    Paint paint = lookupSectionPaint(key, true);\n                    Paint outlinePaint = lookupSectionOutlinePaint(key);\n                    Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                    LegendItem item = new LegendItem(label, description, \n                            toolTipText, urlText, true, shape, true, paint, \n                            true, outlinePaint, outlineStroke, \n                            false,          // line not visible\n                            new Line2D.Float(), new BasicStroke(), Color.black);\n                    item.setDataset(getDataset());\n                    result.add(item);\n                }\n                section++;\n            }\n            else {\n                section++;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 2609,
        "end_line": 2668,
        "comment": "\r\n     * Returns a collection of legend items for the pie chart.\r\n     *\r\n     * @return The legend items (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot3D.draw#225",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot3D.java",
        "class_name": "org.jfree.chart.plot.PiePlot3D",
        "signature": "org.jfree.chart.plot.PiePlot3D.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D plotArea, Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info) {\n\n        // adjust for insets...\n        RectangleInsets insets = getInsets();\n        insets.trim(plotArea);\n\n        Rectangle2D originalPlotArea = (Rectangle2D) plotArea.clone();\n        if (info != null) {\n            info.setPlotArea(plotArea);\n            info.setDataArea(plotArea);\n        }\n\n        drawBackground(g2, plotArea);\n\n        Shape savedClip = g2.getClip();\n        g2.clip(plotArea);\n\n        // adjust the plot area by the interior spacing value\n        double gapPercent = getInteriorGap();\n        double labelPercent = 0.0;\n        if (getLabelGenerator() != null) {\n            labelPercent = getLabelGap() + getMaximumLabelWidth();   \n        }\n        double gapHorizontal = plotArea.getWidth() * (gapPercent \n                + labelPercent) * 2.0;\n        double gapVertical = plotArea.getHeight() * gapPercent * 2.0;\n\n        if (DEBUG_DRAW_INTERIOR) {\n            double hGap = plotArea.getWidth() * getInteriorGap();\n            double vGap = plotArea.getHeight() * getInteriorGap();\n            double igx1 = plotArea.getX() + hGap;\n            double igx2 = plotArea.getMaxX() - hGap;\n            double igy1 = plotArea.getY() + vGap;\n            double igy2 = plotArea.getMaxY() - vGap;\n            g2.setPaint(Color.lightGray);\n            g2.draw(new Rectangle2D.Double(igx1, igy1, igx2 - igx1, \n                    igy2 - igy1));\n        }\n\n        double linkX = plotArea.getX() + gapHorizontal / 2;\n        double linkY = plotArea.getY() + gapVertical / 2;\n        double linkW = plotArea.getWidth() - gapHorizontal;\n        double linkH = plotArea.getHeight() - gapVertical;\n        \n        // make the link area a square if the pie chart is to be circular...\n        if (isCircular()) { // is circular?\n            double min = Math.min(linkW, linkH) / 2;\n            linkX = (linkX + linkX + linkW) / 2 - min;\n            linkY = (linkY + linkY + linkH) / 2 - min;\n            linkW = 2 * min;\n            linkH = 2 * min;\n        }\n        \n        PiePlotState state = initialise(g2, plotArea, this, null, info);\n\n        // the link area defines the dog leg points for the linking lines to \n        // the labels\n        Rectangle2D linkAreaXX = new Rectangle2D.Double(linkX, linkY, linkW, \n                linkH * (1 - this.depthFactor));\n        state.setLinkArea(linkAreaXX);\n\n        if (DEBUG_DRAW_LINK_AREA) {\n            g2.setPaint(Color.blue);\n            g2.draw(linkAreaXX);\n            g2.setPaint(Color.yellow);\n            g2.draw(new Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), \n                    linkAreaXX.getWidth(), linkAreaXX.getHeight()));\n        }\n        \n        // the explode area defines the max circle/ellipse for the exploded pie \n        // sections.\n        // it is defined by shrinking the linkArea by the linkMargin factor.\n        double hh = linkW * getLabelLinkMargin();\n        double vv = linkH * getLabelLinkMargin();\n        Rectangle2D explodeArea = new Rectangle2D.Double(linkX + hh / 2.0, \n                linkY + vv / 2.0, linkW - hh, linkH - vv);\n       \n        state.setExplodedPieArea(explodeArea);\n        \n        // the pie area defines the circle/ellipse for regular pie sections.\n        // it is defined by shrinking the explodeArea by the explodeMargin \n        // factor. \n        double maximumExplodePercent = getMaximumExplodePercent();\n        double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);\n        \n        double h1 = explodeArea.getWidth() * percent;\n        double v1 = explodeArea.getHeight() * percent;\n        Rectangle2D pieArea = new Rectangle2D.Double(explodeArea.getX() \n                + h1 / 2.0, explodeArea.getY() + v1 / 2.0,\n                explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);\n\n        // the link area defines the dog-leg point for the linking lines to \n        // the labels\n        int depth = (int) (pieArea.getHeight() * this.depthFactor);\n        Rectangle2D linkArea = new Rectangle2D.Double(linkX, linkY, linkW, \n                linkH - depth);\n        state.setLinkArea(linkArea);   \n\n        state.setPieArea(pieArea);\n        state.setPieCenterX(pieArea.getCenterX());\n        state.setPieCenterY(pieArea.getCenterY() - depth / 2.0);\n        state.setPieWRadius(pieArea.getWidth() / 2.0);\n        state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);\n\n        // get the data source - return if null;\n        PieDataset dataset = getDataset();\n        if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n            drawNoDataMessage(g2, plotArea);\n            g2.setClip(savedClip);\n            drawOutline(g2, plotArea);\n            return;\n        }\n\n        // if too any elements\n        if (dataset.getKeys().size() > plotArea.getWidth()) {\n            String text = \"Too many elements\";\n            Font sfont = new Font(\"dialog\", Font.BOLD, 10);\n            g2.setFont(sfont);\n            FontMetrics fm = g2.getFontMetrics(sfont);\n            int stringWidth = fm.stringWidth(text);\n\n            g2.drawString(text, (int) (plotArea.getX() + (plotArea.getWidth() \n                    - stringWidth) / 2), (int) (plotArea.getY() \n                    + (plotArea.getHeight() / 2)));\n            return;\n        }\n        // if we are drawing a perfect circle, we need to readjust the top left\n        // coordinates of the drawing area for the arcs to arrive at this\n        // effect.\n        if (isCircular()) {\n            double min = Math.min(plotArea.getWidth(), \n                    plotArea.getHeight()) / 2;\n            plotArea = new Rectangle2D.Double(plotArea.getCenterX() - min, \n                    plotArea.getCenterY() - min, 2 * min, 2 * min);\n        }\n        // get a list of keys...\n        List sectionKeys = dataset.getKeys();\n\n        if (sectionKeys.size() == 0) {\n            return;\n        }\n\n        // establish the coordinates of the top left corner of the drawing area\n        double arcX = pieArea.getX();\n        double arcY = pieArea.getY();\n\n        //g2.clip(clipArea);\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                getForegroundAlpha()));\n\n        double totalValue = DatasetUtilities.calculatePieDatasetTotal(dataset);\n        double runningTotal = 0;\n        if (depth < 0) {\n            return;  // if depth is negative don't draw anything\n        }\n\n        ArrayList arcList = new ArrayList();\n        Arc2D.Double arc;\n        Paint paint;\n        Paint outlinePaint;\n        Stroke outlineStroke;\n\n        Iterator iterator = sectionKeys.iterator();\n        while (iterator.hasNext()) {\n\n            Comparable currentKey = (Comparable) iterator.next();\n            Number dataValue = dataset.getValue(currentKey);\n            if (dataValue == null) {\n                arcList.add(null);\n                continue;\n            }\n            double value = dataValue.doubleValue();\n            if (value <= 0) {\n                arcList.add(null);\n                continue;\n            }\n            double startAngle = getStartAngle();\n            double direction = getDirection().getFactor();\n            double angle1 = startAngle + (direction * (runningTotal * 360)) \n                    / totalValue;\n            double angle2 = startAngle + (direction * (runningTotal + value) \n                    * 360) / totalValue;\n            if (Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) {\n                arcList.add(new Arc2D.Double(arcX, arcY + depth, \n                        pieArea.getWidth(), pieArea.getHeight() - depth,\n                        angle1, angle2 - angle1, Arc2D.PIE));\n            }\n            else {\n                arcList.add(null);\n            }\n            runningTotal += value;\n        }\n\n        Shape oldClip = g2.getClip();\n\n        Ellipse2D top = new Ellipse2D.Double(pieArea.getX(), pieArea.getY(), \n                pieArea.getWidth(), pieArea.getHeight() - depth);\n\n        Ellipse2D bottom = new Ellipse2D.Double(pieArea.getX(), pieArea.getY() \n                + depth, pieArea.getWidth(), pieArea.getHeight() - depth);\n\n        Rectangle2D lower = new Rectangle2D.Double(top.getX(), \n                top.getCenterY(), pieArea.getWidth(), bottom.getMaxY() \n                - top.getCenterY());\n\n        Rectangle2D upper = new Rectangle2D.Double(pieArea.getX(), top.getY(), \n                pieArea.getWidth(), bottom.getCenterY() - top.getY());\n\n        Area a = new Area(top);\n        a.add(new Area(lower));\n        Area b = new Area(bottom);\n        b.add(new Area(upper));\n        Area pie = new Area(a);\n        pie.intersect(b);\n\n        Area front = new Area(pie);\n        front.subtract(new Area(top));\n\n        Area back = new Area(pie);\n        back.subtract(new Area(bottom));\n\n        // draw the bottom circle\n        int[] xs;\n        int[] ys;\n        arc = new Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), \n                pieArea.getHeight() - depth, 0, 360, Arc2D.PIE);\n\n        int categoryCount = arcList.size();\n        for (int categoryIndex = 0; categoryIndex < categoryCount; \n                 categoryIndex++) {\n            arc = (Arc2D.Double) arcList.get(categoryIndex);\n            if (arc == null) {\n                continue;\n            }\n            Comparable key = getSectionKey(categoryIndex);\n            paint = lookupSectionPaint(key, true);\n            outlinePaint = lookupSectionOutlinePaint(key);\n            outlineStroke = lookupSectionOutlineStroke(key);\n            g2.setPaint(paint);\n            g2.fill(arc);\n            g2.setPaint(outlinePaint);\n            g2.setStroke(outlineStroke);\n            g2.draw(arc);\n            g2.setPaint(paint);\n\n            Point2D p1 = arc.getStartPoint();\n\n            // draw the height\n            xs = new int[] {(int) arc.getCenterX(), (int) arc.getCenterX(),\n                    (int) p1.getX(), (int) p1.getX()};\n            ys = new int[] {(int) arc.getCenterY(), (int) arc.getCenterY() \n                    - depth, (int) p1.getY() - depth, (int) p1.getY()};\n            Polygon polygon = new Polygon(xs, ys, 4);\n            g2.setPaint(java.awt.Color.lightGray);\n            g2.fill(polygon);\n            g2.setPaint(outlinePaint);\n            g2.setStroke(outlineStroke);\n            g2.draw(polygon);\n            g2.setPaint(paint);\n\n        }\n\n        g2.setPaint(Color.gray);\n        g2.fill(back);\n        g2.fill(front);\n\n        // cycle through once drawing only the sides at the back...\n        int cat = 0;\n        iterator = arcList.iterator();\n        while (iterator.hasNext()) {\n            Arc2D segment = (Arc2D) iterator.next();\n            if (segment != null) {\n                Comparable key = getSectionKey(cat);\n                paint = lookupSectionPaint(key, true);\n                outlinePaint = lookupSectionOutlinePaint(key);\n                outlineStroke = lookupSectionOutlineStroke(key);\n                drawSide(g2, pieArea, segment, front, back, paint, \n                        outlinePaint, outlineStroke, false, true);\n            }\n            cat++;\n        }\n\n        // cycle through again drawing only the sides at the front...\n        cat = 0;\n        iterator = arcList.iterator();\n        while (iterator.hasNext()) {\n            Arc2D segment = (Arc2D) iterator.next();\n            if (segment != null) {\n                Comparable key = getSectionKey(cat);\n                paint = lookupSectionPaint(key);\n                outlinePaint = lookupSectionOutlinePaint(key);\n                outlineStroke = lookupSectionOutlineStroke(key);\n                drawSide(g2, pieArea, segment, front, back, paint, \n                        outlinePaint, outlineStroke, true, false);\n            }\n            cat++;\n        }\n\n        g2.setClip(oldClip);\n\n        // draw the sections at the top of the pie (and set up tooltips)...\n        Arc2D upperArc;\n        for (int sectionIndex = 0; sectionIndex < categoryCount; \n                 sectionIndex++) {\n            arc = (Arc2D.Double) arcList.get(sectionIndex);\n            if (arc == null) {\n                continue;\n            }\n            upperArc = new Arc2D.Double(arcX, arcY, pieArea.getWidth(),\n                    pieArea.getHeight() - depth, arc.getAngleStart(), \n                    arc.getAngleExtent(), Arc2D.PIE);\n            \n            Comparable currentKey = (Comparable) sectionKeys.get(sectionIndex);\n            paint = lookupSectionPaint(currentKey, true);\n            outlinePaint = lookupSectionOutlinePaint(currentKey);\n            outlineStroke = lookupSectionOutlineStroke(currentKey);\n            g2.setPaint(paint);\n            g2.fill(upperArc);\n            g2.setStroke(outlineStroke);\n            g2.setPaint(outlinePaint);\n            g2.draw(upperArc);\n\n           // add a tooltip for the section...\n            if (info != null) {\n                EntityCollection entities \n                        = info.getOwner().getEntityCollection();\n                if (entities != null) {\n                    String tip = null;\n                    PieToolTipGenerator tipster = getToolTipGenerator();\n                    if (tipster != null) {\n                        // @mgs: using the method's return value was missing \n                        tip = tipster.generateToolTip(dataset, currentKey);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, currentKey,\n                                getPieIndex());\n                    }\n                    PieSectionEntity entity = new PieSectionEntity(\n                            upperArc, dataset, getPieIndex(), sectionIndex, \n                            currentKey, tip, url);\n                    entities.add(entity);\n                }\n            }\n            List keys = dataset.getKeys();\n            Rectangle2D adjustedPlotArea = new Rectangle2D.Double(\n                    originalPlotArea.getX(), originalPlotArea.getY(), \n                    originalPlotArea.getWidth(), originalPlotArea.getHeight() \n                    - depth);\n            if (getSimpleLabels()) {\n                drawSimpleLabels(g2, keys, totalValue, adjustedPlotArea, \n                        linkArea, state);\n            }\n            else {\n                drawLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, \n                        state);\n            }\n        }\n\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n        drawOutline(g2, originalPlotArea);\n\n    }\n",
        "begin_line": 225,
        "end_line": 591,
        "comment": "\r\n     * Draws the plot on a Java 2D graphics device (such as the screen or a \r\n     * printer).  This method is called by the \r\n     * {@link org.jfree.chart.JFreeChart} class, you don't normally need \r\n     * to call it yourself.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the area within which the plot should be drawn.\r\n     * @param anchor  the anchor point.\r\n     * @param parentState  the state from the parent plot, if there is one.\r\n     * @param info  collects info about the drawing \r\n     *              (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getInteriorGap#669",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getInteriorGap()",
        "snippet": "    public double getInteriorGap() {\n        return this.interiorGap;\n    }\n",
        "begin_line": 669,
        "end_line": 671,
        "comment": "\r\n     * Returns the interior gap, measured as a percentage of the available \r\n     * drawing space.\r\n     *\r\n     * @return The gap (as a percentage of the available drawing space).\r\n     * \r\n     * @see #setInteriorGap(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getLabelGenerator#1397",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getLabelGenerator()",
        "snippet": "    public PieSectionLabelGenerator getLabelGenerator() {\n        return this.labelGenerator;   \n    }\n",
        "begin_line": 1397,
        "end_line": 1399,
        "comment": "\r\n     * Returns the section label generator. \r\n     * \r\n     * @return The generator (possibly <code>null</code>).\r\n     * \r\n     * @see #setLabelGenerator(PieSectionLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getLabelGap#1422",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getLabelGap()",
        "snippet": "    public double getLabelGap() {\n        return this.labelGap;   \n    }\n",
        "begin_line": 1422,
        "end_line": 1424,
        "comment": "\r\n     * Returns the gap between the edge of the pie and the labels, expressed as \r\n     * a percentage of the plot width.\r\n     * \r\n     * @return The gap (a percentage, where 0.05 = five percent).\r\n     * \r\n     * @see #setLabelGap(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getMaximumLabelWidth#1447",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getMaximumLabelWidth()",
        "snippet": "    public double getMaximumLabelWidth() {\n        return this.maximumLabelWidth;   \n    }\n",
        "begin_line": 1447,
        "end_line": 1449,
        "comment": "\r\n     * Returns the maximum label width as a percentage of the plot width.\r\n     * \r\n     * @return The width (a percentage, where 0.20 = 20 percent).\r\n     * \r\n     * @see #setMaximumLabelWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.drawBackground#928",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {\n        // some subclasses override this method completely, so don't put \n        // anything here that *must* be done\n        fillBackground(g2, area);\n        drawBackgroundImage(g2, area);\n    }\n",
        "begin_line": 928,
        "end_line": 933,
        "comment": "\r\n     * Draws the plot background (the background color and/or image).\r\n     * <P>\r\n     * This method will be called during the chart drawing process and is \r\n     * declared public so that it can be accessed by the renderers used by \r\n     * certain subclasses.  You shouldn't need to call this method directly.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param area  the area within which the plot should be drawn.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.fillBackground#945",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fillBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void fillBackground(Graphics2D g2, Rectangle2D area) {\n        fillBackground(g2, area, PlotOrientation.VERTICAL);\n    }\n",
        "begin_line": 945,
        "end_line": 947,
        "comment": "\r\n     * Fills the specified area with the background paint.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * \r\n     * @see #getBackgroundPaint()\r\n     * @see #getBackgroundAlpha()\r\n     * @see #fillBackground(Graphics2D, Rectangle2D, PlotOrientation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlotState.PiePlotState#88",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "signature": "org.jfree.chart.plot.PiePlotState.PiePlotState(org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public PiePlotState(PlotRenderingInfo info) {\n        super(info);\n        this.passesRequired = 1;\n        this.total = 0.0;\n    }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\r\n     * Creates a new object for recording temporary state information for a \r\n     * renderer.\r\n     * \r\n     * @param info  the plot rendering info.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlotState.setPassesRequired#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlotState.java",
        "class_name": "org.jfree.chart.plot.PiePlotState",
        "signature": "org.jfree.chart.plot.PiePlotState.setPassesRequired(int)",
        "snippet": "    public void setPassesRequired(int passes) {\n        this.passesRequired = passes;   \n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "\r\n     * Sets the number of passes required by the renderer.\r\n     * \r\n     * @param passes  the passes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.isCircular#705",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.isCircular()",
        "snippet": "    public boolean isCircular() {\n        return this.circular;\n    }\n",
        "begin_line": 705,
        "end_line": 707,
        "comment": "\r\n     * Returns a flag indicating whether the pie chart is circular, or\r\n     * stretched into an elliptical shape.\r\n     *\r\n     * @return A flag indicating whether the pie chart is circular.\r\n     * \r\n     * @see #setCircular(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.initialise#2046",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlot, java.lang.Integer, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n",
        "begin_line": 2046,
        "end_line": 2056,
        "comment": "\r\n     * Initialises the drawing procedure.  This method will be called before \r\n     * the first item is rendered, giving the plot an opportunity to initialise\r\n     * any state information it wants to maintain.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area (<code>null</code> not permitted).\r\n     * @param plot  the plot.\r\n     * @param index  the secondary index (<code>null</code> for primary \r\n     *               renderer).\r\n     * @param info  collects chart rendering information for return to caller.\r\n     * \r\n     * @return A state object (maintains state information relevant to one \r\n     *         chart drawing).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createPieChart3D#688",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createPieChart3D(String title,\n                                              PieDataset dataset,\n                                              boolean legend,\n                                              boolean tooltips,\n                                              boolean urls) {\n\n        PiePlot3D plot = new PiePlot3D(dataset);\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator());\n        }\n        if (urls) {\n            plot.setURLGenerator(new StandardPieURLGenerator());\n        }\n        return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, \n                legend);\n\n    }\n",
        "begin_line": 688,
        "end_line": 705,
        "comment": "\r\n     * Creates a 3D pie chart using the specified dataset.  The chart object \r\n     * returned by this method uses a {@link PiePlot3D} instance as the\r\n     * plot.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A pie chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot3D.PiePlot3D#150",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot3D.java",
        "class_name": "org.jfree.chart.plot.PiePlot3D",
        "signature": "org.jfree.chart.plot.PiePlot3D.PiePlot3D(org.jfree.data.general.PieDataset)",
        "snippet": "    public PiePlot3D(PieDataset dataset) {\n        super(dataset);\n        setCircular(false, false);\n    }\n",
        "begin_line": 150,
        "end_line": 153,
        "comment": "\r\n     * Creates a pie chart with a three dimensional effect using the specified \r\n     * dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getDataset#550",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getDataset()",
        "snippet": "    public PieDataset getDataset() {\n        return this.dataset;\n    }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "\r\n     * Returns the dataset.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     * \r\n     * @see #setDataset(PieDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.setCircular#730",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.setCircular(boolean, boolean)",
        "snippet": "    public void setCircular(boolean circular, boolean notify) {\n        this.circular = circular;\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));   \n        }\n    }\n",
        "begin_line": 730,
        "end_line": 735,
        "comment": "\r\n     * Sets the circular attribute and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param circular  the new value of the flag.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #isCircular()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.arrange#468",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        Size2D result = new Size2D();\n        fetchLegendItems();\n        if (this.items.isEmpty()) {\n            return result;   \n        }\n        BlockContainer container = this.wrapper;\n        if (container == null) {\n            container = this.items;\n        }\n        RectangleConstraint c = toContentConstraint(constraint);\n        Size2D size = container.arrange(g2, c);\n        result.height = calculateTotalHeight(size.height);\n        result.width = calculateTotalWidth(size.width);\n        return result;\n    }\n",
        "begin_line": 468,
        "end_line": 483,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.draw#141",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        double w = area.getWidth();\n        double h = area.getHeight();\n        // if the area has zero height or width, we shouldn't draw anything\n        if (w <= 0.0 || h <= 0.0) {\n            return;\n        }\n        double t = this.insets.calculateTopInset(h);\n        double b = this.insets.calculateBottomInset(h);\n        double l = this.insets.calculateLeftInset(w);\n        double r = this.insets.calculateRightInset(w);\n        double x = area.getX();\n        double y = area.getY();\n        double x0 = x + l / 2.0;\n        double x1 = x + w - r / 2.0;\n        double y0 = y + h - b / 2.0;\n        double y1 = y + t / 2.0;\n        g2.setPaint(getPaint());\n        g2.setStroke(getStroke());\n        Line2D line = new Line2D.Double();\n        if (t > 0.0) {\n            line.setLine(x0, y1, x1, y1);\n            g2.draw(line);\n        }\n        if (b > 0.0) {\n            line.setLine(x0, y0, x1, y0);\n            g2.draw(line);\n        }\n        if (l > 0.0) {\n            line.setLine(x0, y0, x0, y1);\n            g2.draw(line);\n        }\n        if (r > 0.0) {\n            line.setLine(x1, y0, x1, y1);\n            g2.draw(line);\n        }        \n    }    \n",
        "begin_line": 141,
        "end_line": 177,
        "comment": "\r\n     * Draws the border by filling in the reserved space (in black).\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.setInsets#503",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setInsets(RectangleInsets insets) {\n        setInsets(insets, true);\n    }\n",
        "begin_line": 503,
        "end_line": 505,
        "comment": "\r\n     * Sets the insets for the plot and sends a {@link PlotChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param insets  the new insets (<code>null</code> not permitted).\r\n     * \r\n     * @see #getInsets()\r\n     * @see #setInsets(RectangleInsets, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.setInsets#518",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets, boolean)",
        "snippet": "    public void setInsets(RectangleInsets insets, boolean notify) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (!this.insets.equals(insets)) {\n            this.insets = insets;\n            if (notify) {\n                notifyListeners(new PlotChangeEvent(this));\n            }\n        }\n\n    }\n",
        "begin_line": 518,
        "end_line": 529,
        "comment": "\r\n     * Sets the insets for the plot and, if requested,  and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param insets  the new insets (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether the registered listeners are\r\n     *                notified.\r\n     *                \r\n     * @see #getInsets()\r\n     * @see #setInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.equals#180",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof RectangleInsets)) {\n                return false;\n        }\n        final RectangleInsets that = (RectangleInsets) obj;\n        if (that.unitType != this.unitType) {\n            return false;   \n        }\n        if (this.left != that.left) {\n            return false;   \n        }\n        if (this.right != that.right) {\n            return false;   \n        }\n        if (this.top != that.top) {\n            return false;   \n        }\n        if (this.bottom != that.bottom) {\n            return false;   \n        }\n        return true;   \n    }\n",
        "begin_line": 180,
        "end_line": 204,
        "comment": "\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "RendererState.RendererState#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/RendererState.java",
        "class_name": "org.jfree.chart.renderer.RendererState",
        "signature": "org.jfree.chart.renderer.RendererState.RendererState(org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public RendererState(PlotRenderingInfo info) {\n        this.info = info;\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\r\n     * Creates a new state object.\r\n     * \r\n     * @param info  the plot rendering info.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.fillBackground#961",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fillBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    protected void fillBackground(Graphics2D g2, Rectangle2D area, \n            PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        if (this.backgroundPaint == null) {\n            return;\n        }\n        Paint p = this.backgroundPaint;\n        if (p instanceof GradientPaint) {\n            GradientPaint gp = (GradientPaint) p;\n            if (orientation == PlotOrientation.VERTICAL) {\n                p = new GradientPaint((float) area.getCenterX(), \n                        (float) area.getMaxY(), gp.getColor1(), \n                        (float) area.getCenterX(), (float) area.getMinY(), \n                        gp.getColor2());\n            }\n            else if (orientation == PlotOrientation.HORIZONTAL) {\n                p = new GradientPaint((float) area.getMinX(), \n                        (float) area.getCenterY(), gp.getColor1(), \n                        (float) area.getMaxX(), (float) area.getCenterY(), \n                        gp.getColor2());\n            }\n        }            \n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                this.backgroundAlpha));\n        g2.setPaint(p);\n        g2.fill(area);\n        g2.setComposite(originalComposite);        \n    }\n",
        "begin_line": 961,
        "end_line": 991,
        "comment": "\r\n     * Fills the specified area with the background paint.  If the background\r\n     * paint is an instance of <code>GradientPaint</code>, the gradient will\r\n     * run in the direction suggested by the plot's orientation.\r\n     * \r\n     * @param g2  the graphics target.\r\n     * @param area  the plot area.\r\n     * @param orientation  the plot orientation (<code>null</code> not \r\n     *         permitted).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.drawBackgroundImage#1004",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.drawBackgroundImage(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackgroundImage(Graphics2D g2, Rectangle2D area) {\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0,\n                    this.backgroundImage.getWidth(null), \n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, area, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(), \n                    (int) dest.getY(), (int) dest.getWidth() + 1, \n                    (int) dest.getHeight() + 1, null);\n            g2.setComposite(originalComposite);\n        }\n    }\n",
        "begin_line": 1004,
        "end_line": 1018,
        "comment": "\r\n     * Draws the background image (if there is one) aligned within the \r\n     * specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * \r\n     * @see #getBackgroundImage()\r\n     * @see #getBackgroundImageAlignment()\r\n     * @see #getBackgroundImageAlpha()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.arrange#438",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        RectangleConstraint cc = toContentConstraint(constraint);\n        LengthConstraintType w = cc.getWidthConstraintType();\n        LengthConstraintType h = cc.getHeightConstraintType();\n        Size2D contentSize = null;\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");                 \n            }            \n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(g2, cc.getWidthRange(), \n                        cc.getHeightRange()); \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");                 \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");                 \n            }\n        }\n        return new Size2D(calculateTotalWidth(contentSize.getWidth()),\n                calculateTotalHeight(contentSize.getHeight()));\n    }\n",
        "begin_line": 438,
        "end_line": 479,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.arrangeRR#492",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range)",
        "snippet": "    protected Size2D arrangeRR(Graphics2D g2, Range widthRange, \n            Range heightRange) {\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {\n            float maxWidth = (float) widthRange.getUpperBound();\n            g2.setFont(this.font);\n            this.content = TextUtilities.createTextBlock(this.text, this.font, \n                    this.paint, maxWidth, new G2TextMeasurer(g2));\n            this.content.setLineAlignment(this.textAlignment);\n            Size2D contentSize = this.content.calculateDimensions(g2);\n            if (this.expandToFitSpace) {\n                return new Size2D(maxWidth, contentSize.getHeight());\n            }\n            else {\n                return contentSize;\n            }\n        }\n        else if (position == RectangleEdge.LEFT || position \n                == RectangleEdge.RIGHT) {\n            float maxWidth = (float) heightRange.getUpperBound();\n            g2.setFont(this.font);\n            this.content = TextUtilities.createTextBlock(this.text, this.font, \n                    this.paint, maxWidth, new G2TextMeasurer(g2));\n            this.content.setLineAlignment(this.textAlignment);\n            Size2D contentSize = this.content.calculateDimensions(g2);\n            \n            // transpose the dimensions, because the title is rotated\n            if (this.expandToFitSpace) {\n                return new Size2D(contentSize.getHeight(), maxWidth);\n            }\n            else {\n                return new Size2D(contentSize.height, contentSize.width);\n            }\n        }\n        else {\n            throw new RuntimeException(\"Unrecognised exception.\");\n        }\n    }\n",
        "begin_line": 492,
        "end_line": 529,
        "comment": "\r\n     * Returns the content size for the title.  This will reflect the fact that\r\n     * a text title positioned on the left or right of a chart will be rotated\r\n     * 90 degrees.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param widthRange  the width range.\r\n     * @param heightRange  the height range.\r\n     * \r\n     * @return The content size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.draw#554",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        if (this.content == null) {\n            return null;   \n        }\n        area = trimMargin(area);\n        drawBorder(g2, area);\n        if (this.text.equals(\"\")) {\n            return null;\n        }\n        ChartEntity entity = null;\n        if (params instanceof EntityBlockParams) {\n            EntityBlockParams p = (EntityBlockParams) params;\n            if (p.getGenerateEntities()) {\n                entity = new ChartEntity(area, this.toolTipText, this.urlText);    \n            }\n        }\n        area = trimBorder(area);\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(area);\n        }\n        area = trimPadding(area);\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {\n            drawHorizontal(g2, area);\n        }\n        else if (position == RectangleEdge.LEFT \n                 || position == RectangleEdge.RIGHT) {\n            drawVertical(g2, area);\n        }\n        BlockResult result = new BlockResult();\n        if (entity != null) {\n            StandardEntityCollection sec = new StandardEntityCollection();\n            sec.add(entity);\n            result.setEntityCollection(sec);\n        }\n        return result;\n    }\n",
        "begin_line": 554,
        "end_line": 591,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  if this is an instance of {@link EntityBlockParams} it\r\n     *                is used to determine whether or not an \r\n     *                {@link EntityCollection} is returned by this method.\r\n     * \r\n     * @return An {@link EntityCollection} containing a chart entity for the\r\n     *         title, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.drawHorizontal#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.drawHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void drawHorizontal(Graphics2D g2, Rectangle2D area) {\n        Rectangle2D titleArea = (Rectangle2D) area.clone();\n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextBlockAnchor anchor = null;\n        float x = 0.0f;\n        HorizontalAlignment horizontalAlignment = getHorizontalAlignment();\n        if (horizontalAlignment == HorizontalAlignment.LEFT) {\n            x = (float) titleArea.getX();\n            anchor = TextBlockAnchor.TOP_LEFT;\n        }\n        else if (horizontalAlignment == HorizontalAlignment.RIGHT) {\n            x = (float) titleArea.getMaxX();\n            anchor = TextBlockAnchor.TOP_RIGHT;\n        }\n        else if (horizontalAlignment == HorizontalAlignment.CENTER) {\n            x = (float) titleArea.getCenterX();\n            anchor = TextBlockAnchor.TOP_CENTER;\n        }\n        float y = 0.0f;\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP) {\n            y = (float) titleArea.getY();\n        }\n        else if (position == RectangleEdge.BOTTOM) {\n            y = (float) titleArea.getMaxY();\n            if (horizontalAlignment == HorizontalAlignment.LEFT) {\n                anchor = TextBlockAnchor.BOTTOM_LEFT;\n            }\n            else if (horizontalAlignment == HorizontalAlignment.CENTER) {\n                anchor = TextBlockAnchor.BOTTOM_CENTER;\n            }\n            else if (horizontalAlignment == HorizontalAlignment.RIGHT) {\n                anchor = TextBlockAnchor.BOTTOM_RIGHT;\n            }\n        }\n        this.content.draw(g2, x, y, anchor);\n    }\n",
        "begin_line": 601,
        "end_line": 638,
        "comment": "\r\n     * Draws a the title horizontally within the specified area.  This method \r\n     * will be called from the {@link #draw(Graphics2D, Rectangle2D) draw} \r\n     * method.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area for the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.createTextBlock#162",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n            Paint paint, float maxWidth, TextMeasurer measurer) {\n        \n        return createTextBlock(text, font, paint, maxWidth, Integer.MAX_VALUE, \n                measurer);\n    }\n",
        "begin_line": 162,
        "end_line": 167,
        "comment": "\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the <code>maxWidth</code> value is\n     * respected.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param measurer  the text measurer.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.createTextBlock#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, int, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n            Paint paint, float maxWidth, int maxLines, TextMeasurer measurer) {\n        \n        TextBlock result = new TextBlock();\n        BreakIterator iterator = BreakIterator.getLineInstance();\n        iterator.setText(text);\n        int current = 0;\n        int lines = 0;\n        int length = text.length();\n        while (current < length && lines < maxLines) {\n            int next = nextLineBreak(text, current, maxWidth, iterator, \n                    measurer);\n            if (next == BreakIterator.DONE) {\n                result.addLine(text.substring(current), font, paint);\n                return result;\n            }\n            result.addLine(text.substring(current, next), font, paint);\n            lines++;\n            current = next;\n            while (current < text.length()&& text.charAt(current) == '\\n') {\n                current++;\n            }\n        }\n        if (current < length) {\n            TextLine lastLine = result.getLastLine();\n            TextFragment lastFragment = lastLine.getLastTextFragment();\n            String oldStr = lastFragment.getText();\n            String newStr = \"...\";\n            if (oldStr.length() > 3) {\n                newStr = oldStr.substring(0, oldStr.length() - 3) + \"...\";\n            }\n\n            lastLine.removeFragment(lastFragment);\n            TextFragment newFragment = new TextFragment(newStr, \n                    lastFragment.getFont(), lastFragment.getPaint());\n            lastLine.addFragment(newFragment);\n        }\n        return result;\n    }\n",
        "begin_line": 183,
        "end_line": 221,
        "comment": "\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the <code>maxWidth</code> value is\n     * respected.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param maxLines  the maximum number of lines.\n     * @param measurer  the text measurer.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.nextLineBreak#234",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.nextLineBreak(java.lang.String, int, float, java.text.BreakIterator, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    private static int nextLineBreak(String text, int start,\n            float width, BreakIterator iterator, TextMeasurer measurer) {\n        \n        // this method is (loosely) based on code in JFreeReport's \n        // TextParagraph class\n        int current = start;\n        int end;\n        float x = 0.0f;\n        boolean firstWord = true;\n        int newline = text.indexOf('\\n', start);\n        if (newline < 0) {\n            newline = Integer.MAX_VALUE;\n        }\n        while (((end = iterator.next()) != BreakIterator.DONE)) {\n            if (end > newline) {\n                return newline;\n            }\n            x += measurer.getStringWidth(text, current, end);\n            if (x > width) {\n                if (firstWord) {\n                    while (measurer.getStringWidth(text, start, end) > width) {\n                        end--;\n                        if (end <= start) {\n                            return end;\n                        }\n                    }\n                    return end;\n                }\n                else {\n                    end = iterator.previous();\n                    return end;\n                }\n            }\n            // we found at least one word that fits ...\n            firstWord = false;\n            current = end;\n        }\n        return BreakIterator.DONE;\n    }\n",
        "begin_line": 234,
        "end_line": 272,
        "comment": "\n     * Returns the character index of the next line break.\n     * \n     * @param text  the text.\n     * @param start  the start index.\n     * @param width  the target display width.\n     * @param iterator  the word break iterator.\n     * @param measurer  the text measurer.\n     * \n     * @return The index of the next line break.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.setLineAlignment#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.setLineAlignment(org.jfree.chart.util.HorizontalAlignment)",
        "snippet": "    public void setLineAlignment(HorizontalAlignment alignment) {\n        if (alignment == null) {\n            throw new IllegalArgumentException(\"Null 'alignment' argument.\");\n        }\n        this.lineAlignment = alignment;   \n    }\n",
        "begin_line": 104,
        "end_line": 109,
        "comment": "\n     * Sets the alignment of the lines of text within the block.\n     * \n     * @param alignment  the alignment (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.calculateOffsets#264",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateOffsets(org.jfree.chart.text.TextBlockAnchor, double, double)",
        "snippet": "    private float[] calculateOffsets(TextBlockAnchor anchor, \n                                     double width, double height) {\n        float[] result = new float[2];\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextBlockAnchor.TOP_CENTER\n                || anchor == TextBlockAnchor.CENTER\n                || anchor == TextBlockAnchor.BOTTOM_CENTER) {\n                    \n            xAdj = (float) -width / 2.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.TOP_RIGHT\n                || anchor == TextBlockAnchor.CENTER_RIGHT\n                || anchor == TextBlockAnchor.BOTTOM_RIGHT) {\n                    \n            xAdj = (float) -width;\n            \n        }\n\n        if (anchor == TextBlockAnchor.TOP_LEFT\n                || anchor == TextBlockAnchor.TOP_CENTER\n                || anchor == TextBlockAnchor.TOP_RIGHT) {\n                    \n            yAdj = 0.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.CENTER_LEFT\n                || anchor == TextBlockAnchor.CENTER\n                || anchor == TextBlockAnchor.CENTER_RIGHT) {\n                    \n            yAdj = (float) -height / 2.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.BOTTOM_LEFT\n                || anchor == TextBlockAnchor.BOTTOM_CENTER\n                || anchor == TextBlockAnchor.BOTTOM_RIGHT) {\n                    \n            yAdj = (float) -height;\n            \n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n    }   \n",
        "begin_line": 264,
        "end_line": 309,
        "comment": "\n     * Calculates the x and y offsets required to align the text block with the\n     * specified anchor point.  This assumes that the top left of the text \n     * block is at (0.0, 0.0).\n     * \n     * @param anchor  the anchor position.\n     * @param width  the width of the text block.\n     * @param height  the height of the text block.\n     * \n     * @return The offsets (float[0] = x offset, float[1] = y offset).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "G2TextMeasurer.G2TextMeasurer#61",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "signature": "org.jfree.chart.text.G2TextMeasurer.G2TextMeasurer(java.awt.Graphics2D)",
        "snippet": "    public G2TextMeasurer(Graphics2D g2) {\n        this.g2 = g2;\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Creates a new text measurer.\n     * \n     * @param g2  the graphics device.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "G2TextMeasurer.getStringWidth#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "signature": "org.jfree.chart.text.G2TextMeasurer.getStringWidth(java.lang.String, int, int)",
        "snippet": "    public float getStringWidth(String text, int start, int end) {\n        FontMetrics fm = this.g2.getFontMetrics();\n        Rectangle2D bounds = TextUtilities.getTextBounds(text.substring(start, \n                end), this.g2, fm);\n        float result = (float) bounds.getWidth();\n        return result;\n    }\n",
        "begin_line": 74,
        "end_line": 80,
        "comment": "\n     * Returns the string width.\n     * \n     * @param text  the text.\n     * @param start  the index of the first character to measure.\n     * @param end  the index of the last character to measure.\n     * \n     * @return The string width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockResult.getEntityCollection#66",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "class_name": "org.jfree.chart.block.BlockResult",
        "signature": "org.jfree.chart.block.BlockResult.getEntityCollection()",
        "snippet": "    public EntityCollection getEntityCollection() {\n        return this.entities;   \n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\r\n     * Returns the collection of entities from the block.\r\n     * \r\n     * @return The entities.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.draw#1132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public void draw(Graphics2D g2, \n                     Rectangle2D chartArea, Point2D anchor, \n                     ChartRenderingInfo info) {\n\n        notifyListeners(new ChartProgressEvent(this, this, \n                ChartProgressEvent.DRAWING_STARTED, 0));\n\n        // record the chart area, if info is requested...\n        if (info != null) {\n            info.clear();\n            info.setChartArea(chartArea);\n        }\n\n        // ensure no drawing occurs outside chart area...\n        Shape savedClip = g2.getClip();\n        g2.clip(chartArea);\n\n        g2.addRenderingHints(this.renderingHints);\n\n        // draw the chart background...\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(chartArea);\n        }\n\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0, \n                    this.backgroundImage.getWidth(null), \n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, chartArea, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(), \n                    (int) dest.getY(), (int) dest.getWidth(), \n                    (int) dest.getHeight(), null);\n            g2.setComposite(originalComposite);\n        }\n\n        if (isBorderVisible()) {\n            Paint paint = getBorderPaint();\n            Stroke stroke = getBorderStroke();\n            if (paint != null && stroke != null) {\n                Rectangle2D borderArea = new Rectangle2D.Double(\n                        chartArea.getX(), chartArea.getY(), \n                        chartArea.getWidth() - 1.0, chartArea.getHeight() \n                        - 1.0);\n                g2.setPaint(paint);\n                g2.setStroke(stroke);\n                g2.draw(borderArea);\n            }\n        }\n\n        // draw the title and subtitles...\n        Rectangle2D nonTitleArea = new Rectangle2D.Double();\n        nonTitleArea.setRect(chartArea);\n        this.padding.trim(nonTitleArea);\n        \n        EntityCollection entities = null;\n        if (info != null) {\n            entities = info.getEntityCollection();   \n        }\n        if (this.title != null) {\n            EntityCollection e = drawTitle(this.title, g2, nonTitleArea, \n                    (entities != null));\n            if (e != null) {\n                entities.addAll(e);   \n            }\n        }\n\n        Iterator iterator = this.subtitles.iterator();\n        while (iterator.hasNext()) {\n            Title currentTitle = (Title) iterator.next();\n            EntityCollection e = drawTitle(currentTitle, g2, nonTitleArea, \n                    (entities != null));\n            if (e != null) {\n                entities.addAll(e);   \n            }\n        }\n\n        Rectangle2D plotArea = nonTitleArea;\n \n        // draw the plot (axes and data visualisation)\n        PlotRenderingInfo plotInfo = null;\n        if (info != null) {\n            plotInfo = info.getPlotInfo();\n        }\n        this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n\n        g2.setClip(savedClip);\n\n        notifyListeners(new ChartProgressEvent(this, this, \n                ChartProgressEvent.DRAWING_FINISHED, 100));\n    }\n",
        "begin_line": 1132,
        "end_line": 1225,
        "comment": "\r\n     * Draws the chart on a Java 2D graphics device (such as the screen or a\r\n     * printer).\r\n     * <P>\r\n     * This method is the focus of the entire JFreeChart library.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param chartArea  the area within which the chart should be drawn.\r\n     * @param anchor  the anchor point (in Java2D space) for the chart \r\n     *                (<code>null</code> permitted).\r\n     * @param info  records info about the drawing (null means collect no info).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.createAlignedRectangle2D#1237",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createAlignedRectangle2D(org.jfree.chart.util.Size2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment)",
        "snippet": "    private Rectangle2D createAlignedRectangle2D(Size2D dimensions, \n            Rectangle2D frame, HorizontalAlignment hAlign, \n            VerticalAlignment vAlign) {\n        double x = Double.NaN;\n        double y = Double.NaN;\n        if (hAlign == HorizontalAlignment.LEFT) {\n            x = frame.getX();   \n        }\n        else if (hAlign == HorizontalAlignment.CENTER) {\n            x = frame.getCenterX() - (dimensions.width / 2.0);   \n        }\n        else if (hAlign == HorizontalAlignment.RIGHT) {\n            x = frame.getMaxX() - dimensions.width;   \n        }\n        if (vAlign == VerticalAlignment.TOP) {\n            y = frame.getY();   \n        }\n        else if (vAlign == VerticalAlignment.CENTER) {\n            y = frame.getCenterY() - (dimensions.height / 2.0);   \n        }\n        else if (vAlign == VerticalAlignment.BOTTOM) {\n            y = frame.getMaxY() - dimensions.height;   \n        }\n        \n        return new Rectangle2D.Double(x, y, dimensions.width, \n                dimensions.height);\n    }\n",
        "begin_line": 1237,
        "end_line": 1263,
        "comment": "\r\n     * Creates a rectangle that is aligned to the frame.\r\n     * \r\n     * @param dimensions  the dimensions for the rectangle.\r\n     * @param frame  the frame to align to.\r\n     * @param hAlign  the horizontal alignment.\r\n     * @param vAlign  the vertical alignment.\r\n     * \r\n     * @return A rectangle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.drawTitle#1279",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected EntityCollection drawTitle(Title t, Graphics2D g2, \n                                         Rectangle2D area, boolean entities) {\n\n        if (t == null) {\n            throw new IllegalArgumentException(\"Null 't' argument.\");   \n        }\n        if (area == null) {\n            throw new IllegalArgumentException(\"Null 'area' argument.\");   \n        }\n        Rectangle2D titleArea = new Rectangle2D.Double();\n        RectangleEdge position = t.getPosition();\n        double ww = area.getWidth();\n        if (ww <= 0.0) {\n            return null;\n        }\n        double hh = area.getHeight();\n        if (hh <= 0.0) {\n            return null;\n        }\n        RectangleConstraint constraint = new RectangleConstraint(ww, \n                new Range(0.0, ww), LengthConstraintType.RANGE, hh, \n                new Range(0.0, hh), LengthConstraintType.RANGE);\n        Object retValue = null;\n        BlockParams p = new BlockParams();\n        p.setGenerateEntities(entities);\n        if (position == RectangleEdge.TOP) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    t.getHorizontalAlignment(), VerticalAlignment.TOP);\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), Math.min(area.getY() + size.height, \n                    area.getMaxY()), area.getWidth(), Math.max(area.getHeight()\n                    - size.height, 0));\n        }\n        else if (position == RectangleEdge.BOTTOM) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    t.getHorizontalAlignment(), VerticalAlignment.BOTTOM);\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), area.getY(), area.getWidth(), \n                    area.getHeight() - size.height);\n        }\n        else if (position == RectangleEdge.RIGHT) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    HorizontalAlignment.RIGHT, t.getVerticalAlignment());\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), area.getY(), area.getWidth() \n                    - size.width, area.getHeight());\n        }\n\n        else if (position == RectangleEdge.LEFT) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    HorizontalAlignment.LEFT, t.getVerticalAlignment());\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX() + size.width, area.getY(), area.getWidth() \n                    - size.width, area.getHeight());\n        }\n        else {\n            throw new RuntimeException(\"Unrecognised title position.\");\n        }\n        EntityCollection result = null;\n        if (retValue instanceof EntityBlockResult) {\n            EntityBlockResult ebr = (EntityBlockResult) retValue;\n            result = ebr.getEntityCollection();\n        }\n        return result;   \n    }\n",
        "begin_line": 1279,
        "end_line": 1347,
        "comment": "\r\n     * Draws a title.  The title should be drawn at the top, bottom, left or \r\n     * right of the specified area, and the area should be updated to reflect \r\n     * the amount of space used by the title.\r\n     *\r\n     * @param t  the title (<code>null</code> not permitted).\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param area  the chart area, excluding any existing titles \r\n     *              (<code>null</code> not permitted).\r\n     * @param entities  a flag that controls whether or not an entity \r\n     *                  collection is returned for the title.\r\n     * \r\n     * @return An entity collection for the title (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.Size2D#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D()",
        "snippet": "    public Size2D() {\n        this(0.0, 0.0);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Creates a new instance with zero width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.fetchLegendItems#387",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.fetchLegendItems()",
        "snippet": "    protected void fetchLegendItems() {\n        this.items.clear();\n        RectangleEdge p = getPosition();\n        if (RectangleEdge.isTopOrBottom(p)) {\n            this.items.setArrangement(this.hLayout);   \n        }\n        else {\n            this.items.setArrangement(this.vLayout);   \n        }\n        for (int s = 0; s < this.sources.length; s++) {\n            LegendItemCollection legendItems = this.sources[s].getLegendItems();\n            if (legendItems != null) {\n                for (int i = 0; i < legendItems.getItemCount(); i++) {\n                    LegendItem item = legendItems.get(i);\n                    Block block = createLegendItemBlock(item);\n                    this.items.add(block);\n                }\n            }\n        }\n    }\n",
        "begin_line": 387,
        "end_line": 406,
        "comment": "\r\n     * Fetches the latest legend items.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.draw#506",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        Rectangle2D target = (Rectangle2D) area.clone();\n        target = trimMargin(target);\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(target);\n        }\n        BlockFrame border = getFrame();\n        border.draw(g2, target);\n        border.getInsets().trim(target);\n        BlockContainer container = this.wrapper;\n        if (container == null) {\n            container = this.items; \n        }\n        target = trimPadding(target);\n        return container.draw(g2, target, params);   \n    }\n",
        "begin_line": 506,
        "end_line": 522,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return An {@link org.jfree.chart.block.EntityBlockResult} or \r\n     *         <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.getInsets#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\r\n     * Returns the insets.\r\n     * \r\n     * @return The insets (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "FlowArrangement.clear#414",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.clear()",
        "snippet": "    public void clear() {\n        // no action required.\n    }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "\r\n     * Clears any cached information.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.setArrangement#117",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.setArrangement(org.jfree.chart.block.Arrangement)",
        "snippet": "    public void setArrangement(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;   \n    }\n",
        "begin_line": 117,
        "end_line": 122,
        "comment": "\r\n     * Sets the arrangement (layout) manager.\r\n     * \r\n     * @param arrangement  the arrangement (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.isEmpty#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return this.blocks.isEmpty();   \n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Returns <code>true</code> if there are no blocks in the container, and\r\n     * <code>false</code> otherwise.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.clear#167",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.clear()",
        "snippet": "    public void clear() {\n        this.blocks.clear();\n        this.arrangement.clear();\n    }\n",
        "begin_line": 167,
        "end_line": 170,
        "comment": "\r\n     * Clears all the blocks from the container.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.draw#205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        // check if we need to collect chart entities from the container\n        EntityBlockParams ebp = null;\n        StandardEntityCollection sec = null;\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                sec = new StandardEntityCollection();   \n            }\n        }\n        Rectangle2D contentArea = (Rectangle2D) area.clone();\n        contentArea = trimMargin(contentArea);\n        drawBorder(g2, contentArea);\n        contentArea = trimBorder(contentArea);\n        contentArea = trimPadding(contentArea);\n        Iterator iterator = this.blocks.iterator();\n        while (iterator.hasNext()) {\n            Block block = (Block) iterator.next();\n            Rectangle2D bounds = block.getBounds();\n            Rectangle2D drawArea = new Rectangle2D.Double(bounds.getX() \n                    + area.getX(), bounds.getY() + area.getY(), \n                    bounds.getWidth(), bounds.getHeight());\n            Object r = block.draw(g2, drawArea, params);\n            if (sec != null) {\n                if (r instanceof EntityBlockResult) {\n                    EntityBlockResult ebr = (EntityBlockResult) r;\n                    EntityCollection ec = ebr.getEntityCollection();\n                    sec.addAll(ec);\n                }\n            }\n        }\n        BlockResult result = null;\n        if (sec != null) {\n            result = new BlockResult();\n            result.setEntityCollection(sec);\n        }\n        return result;\n    }\n",
        "begin_line": 205,
        "end_line": 242,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  passed on to blocks within the container \r\n     *                (<code>null</code> permitted).\r\n     * \r\n     * @return An instance of {@link EntityBlockResult}, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.getFrame#238",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getFrame()",
        "snippet": "    public BlockFrame getFrame() {\n        return this.frame;\n    }\n",
        "begin_line": 238,
        "end_line": 240,
        "comment": "\r\n     * Returns the current frame (border).\r\n     * \r\n     * @return The frame.\r\n     * \r\n     * @since 1.0.5\r\n     * @see #setFrame(BlockFrame)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.Size2D#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D(double, double)",
        "snippet": "    public Size2D(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Creates a new instance with the specified width and height.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.getWidth#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Returns the width.\n     *\n     * @return The width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Size2D.getHeight#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Returns the height.\n     *\n     * @return The height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateTopInset#380",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopInset(double)",
        "snippet": "    public double calculateTopInset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.top * height);\n        }\n        return result;\n    }\n",
        "begin_line": 380,
        "end_line": 386,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateTopOutset#395",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopOutset(double)",
        "snippet": "    public double calculateTopOutset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.top;\n        }\n        return result;\n    }\n",
        "begin_line": 395,
        "end_line": 401,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateBottomInset#410",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomInset(double)",
        "snippet": "    public double calculateBottomInset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.bottom * height);\n        }\n        return result;\n    }\n",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateBottomOutset#425",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double)",
        "snippet": "    public double calculateBottomOutset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.bottom;\n        }\n        return result;\n    }\n",
        "begin_line": 425,
        "end_line": 431,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateLeftInset#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftInset(double)",
        "snippet": "    public double calculateLeftInset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.left * width);\n        }\n        return result;\n    }\n",
        "begin_line": 440,
        "end_line": 446,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateLeftOutset#455",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double)",
        "snippet": "    public double calculateLeftOutset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.left;\n        }\n        return result;\n    }\n",
        "begin_line": 455,
        "end_line": 461,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateRightInset#470",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightInset(double)",
        "snippet": "    public double calculateRightInset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.right * width);\n        }\n        return result;\n    }\n",
        "begin_line": 470,
        "end_line": 476,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.calculateRightOutset#485",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightOutset(double)",
        "snippet": "    public double calculateRightOutset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.right;\n        }\n        return result;\n    }\n",
        "begin_line": 485,
        "end_line": 491,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.trimWidth#500",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimWidth(double)",
        "snippet": "    public double trimWidth(double width) {\n        return width - calculateLeftInset(width) - calculateRightInset(width);   \n    }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\n     * Trims the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The trimmed width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.extendWidth#511",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendWidth(double)",
        "snippet": "    public double extendWidth(double width) {\n        return width + calculateLeftOutset(width) + calculateRightOutset(width);   \n    }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "\n     * Extends the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The extended width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.trimHeight#522",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimHeight(double)",
        "snippet": "    public double trimHeight(double height) {\n        return height \n               - calculateTopInset(height) - calculateBottomInset(height);   \n    }\n",
        "begin_line": 522,
        "end_line": 525,
        "comment": "\n     * Trims the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The trimmed height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.extendHeight#534",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendHeight(double)",
        "snippet": "    public double extendHeight(double height) {\n        return height \n               + calculateTopOutset(height) + calculateBottomOutset(height);   \n    }\n",
        "begin_line": 534,
        "end_line": 537,
        "comment": "\n     * Extends the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The extended height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.trim#544",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trim(java.awt.geom.Rectangle2D)",
        "snippet": "    public void trim(Rectangle2D area) {\n        double w = area.getWidth();\n        double h = area.getHeight();\n        double l = calculateLeftInset(w);\n        double r = calculateRightInset(w);\n        double t = calculateTopInset(h);\n        double b = calculateBottomInset(h);\n        area.setRect(area.getX() + l, area.getY() + t, w - l - r, h - t - b);    \n    }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "\n     * Shrinks the given rectangle by the amount of these insets.\n     * \n     * @param area  the area (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectUtilities.getClassLoader#254",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.getClassLoader(java.lang.Class)",
        "snippet": "    public synchronized static ClassLoader getClassLoader(final Class c) {\n        if (classLoader != null) {\n            return classLoader;\n        }\n        if (\"ThreadContext\".equals(classLoaderSource)) {\n            final ClassLoader threadLoader\n                = Thread.currentThread().getContextClassLoader();\n            if (threadLoader != null) {\n                return threadLoader;\n            }\n        }\n\n        // Context classloader - do not cache ..\n        final ClassLoader applicationCL = c.getClassLoader();\n        if (applicationCL == null) {\n            return ClassLoader.getSystemClassLoader();\n        }\n        else {\n            return applicationCL;\n        }\n    }\n",
        "begin_line": 254,
        "end_line": 274,
        "comment": "\n     * Returns the classloader, which was responsible for loading the given\n     * class.\n     *\n     * @param c the classloader, either an application class loader or the\n     *          boot loader.\n     * @return the classloader, never null.\n     * @throws SecurityException if the SecurityManager does not allow to grab\n     *                           the context classloader.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectUtilities.isJDK14#438",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.isJDK14()",
        "snippet": "    public static boolean isJDK14() {\n        ClassLoader loader = getClassLoader(ObjectUtilities.class);\n        if (loader != null) {\n            try {\n              loader.loadClass(\"java.util.RandomAccess\");\n              return true;\n            }\n            catch (ClassNotFoundException e) {\n              return false;\n            }\n            catch(Exception e) {\n              // do nothing, but do not crash ...\n            }\n        }\n        // OK, the quick and dirty, but secure way failed. Lets try it\n        // using the standard way.\n        try {\n            String version = System.getProperty(\n                    \"java.vm.specification.version\");\n            // parse the beast...\n            if (version == null) {\n                return false;\n            }\n\n            String[] versions = parseVersions(version);\n            String[] target = new String[]{ \"1\", \"4\" };\n            return (ArrayUtilities.compareVersionArrays(versions, target) >= 0);\n        }\n        catch(Exception e) {\n            return false;\n        }\n    }\n",
        "begin_line": 438,
        "end_line": 469,
        "comment": "\n     * Returns <code>true</code> if we are running on JRE 1.4 or later.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.getPosition#205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.getPosition()",
        "snippet": "    public RectangleEdge getPosition() {\n        return this.position;\n    }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\r\n     * Returns the position of the title.\r\n     *\r\n     * @return The title position (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.getHorizontalAlignment#230",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.getHorizontalAlignment()",
        "snippet": "    public HorizontalAlignment getHorizontalAlignment() {\n        return this.horizontalAlignment;\n    }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\r\n     * Returns the horizontal alignment of the title.\r\n     *\r\n     * @return The horizontal alignment (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.getTextBounds#284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.getTextBounds(java.lang.String, java.awt.Graphics2D, java.awt.FontMetrics)",
        "snippet": "    public static Rectangle2D getTextBounds(String text, Graphics2D g2, \n            FontMetrics fm) {\n        \n        final Rectangle2D bounds;\n        if (TextUtilities.useFontMetricsGetStringBounds) {\n            bounds = fm.getStringBounds(text, g2);\n            // getStringBounds() can return incorrect height for some Unicode\n            // characters...see bug parade 6183356, let's replace it with \n            // something correct\n            LineMetrics lm = fm.getFont().getLineMetrics(text,\n                    g2.getFontRenderContext());\n            bounds.setRect(bounds.getX(), bounds.getY(), bounds.getWidth(),\n                    lm.getHeight());\n        }\n        else {\n            double width = fm.stringWidth(text);\n            double height = fm.getHeight();\n            bounds = new Rectangle2D.Double(0.0, -fm.getAscent(), width, \n                    height);\n        }\n        return bounds;\n    }\n",
        "begin_line": 284,
        "end_line": 305,
        "comment": "\n     * Returns the bounds for the specified text.\n     * \n     * @param text  the text (<code>null</code> permitted).\n     * @param g2  the graphics context (not <code>null</code>).\n     * @param fm  the font metrics (not <code>null</code>).\n     * \n     * @return The text bounds (<code>null</code> if the <code>text</code> \n     *         argument is <code>null</code>).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.drawRotatedString#472",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, double, float, float)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2,\n            float textX, float textY, double angle,\n            float rotateX, float rotateY) {\n\n        if ((text == null) || (text.equals(\"\"))) {\n            return;\n        }\n\n        AffineTransform saved = g2.getTransform();\n\n        // apply the rotation...\n        AffineTransform rotate = AffineTransform.getRotateInstance(\n                angle, rotateX, rotateY);\n        g2.transform(rotate);\n\n        if (useDrawRotatedStringWorkaround) {\n            // workaround for JDC bug ID 4312117 and others...\n            TextLayout tl = new TextLayout(text, g2.getFont(), \n                    g2.getFontRenderContext());\n            tl.draw(g2, textX, textY);\n        }\n        else {\n            // replaces this code...\n            g2.drawString(text, textX, textY);\n        }\n        g2.setTransform(saved);\n\n    }\n",
        "begin_line": 472,
        "end_line": 499,
        "comment": "\n     * A utility method for drawing rotated text.\n     * <P>\n     * A common rotation is -Math.PI/2 which draws text 'vertically' (with the \n     * top of the characters on the left).\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param textX  the x-coordinate for the text (before rotation).\n     * @param textY  the y-coordinate for the text (before rotation).\n     * @param angle  the angle of the (clockwise) rotation (in radians).\n     * @param rotateX  the point about which the text is rotated.\n     * @param rotateY  the point about which the text is rotated.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.drawRotatedString#514",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, float, float)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2, float x, \n            float y, TextAnchor textAnchor, double angle, float rotationX, \n            float rotationY) {\n\n        if (text == null || text.equals(\"\")) {\n            return;\n        }\n        float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor);\n        drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1], angle, \n                rotationX, rotationY);\n    }\n",
        "begin_line": 514,
        "end_line": 524,
        "comment": "\n     * Draws a string that is aligned by one anchor point and rotated about \n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle.\n     * @param rotationX  the x-coordinate for the rotation anchor point.\n     * @param rotationY  the y-coordinate for the rotation anchor point.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextUtilities.deriveTextBoundsAnchorOffsets#599",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.deriveTextBoundsAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2,\n            String text, TextAnchor anchor) {\n\n        float[] result = new float[2];\n        FontRenderContext frc = g2.getFontRenderContext();\n        Font f = g2.getFont();\n        FontMetrics fm = g2.getFontMetrics(f);\n        Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm);\n        LineMetrics metrics = f.getLineMetrics(text, frc);\n        float ascent = metrics.getAscent();\n        float halfAscent = ascent / 2.0f;\n        float descent = metrics.getDescent();\n        float leading = metrics.getLeading();\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_CENTER) {\n\n            xAdj = (float) -bounds.getWidth() / 2.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_RIGHT\n                || anchor == TextAnchor.CENTER_RIGHT\n                || anchor == TextAnchor.BOTTOM_RIGHT\n                || anchor == TextAnchor.BASELINE_RIGHT\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            xAdj = (float) -bounds.getWidth();\n\n        }\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.TOP_RIGHT) {\n\n            yAdj = -descent - leading + (float) bounds.getHeight();\n\n        }\n        else if (anchor == TextAnchor.HALF_ASCENT_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            yAdj = halfAscent;\n\n        }\n        else if (anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.CENTER_RIGHT) {\n\n            yAdj = -descent - leading + (float) (bounds.getHeight() / 2.0);\n\n        }\n        else if (anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.BASELINE_RIGHT) {\n\n            yAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n\n            yAdj = -metrics.getDescent() - metrics.getLeading();\n\n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n\n    }\n",
        "begin_line": 599,
        "end_line": 673,
        "comment": "\n     * A utility method that calculates the anchor offsets for a string.  \n     * Normally, the (x, y) coordinate for drawing text is a point on the \n     * baseline at the left of the text string.  If you add these offsets to \n     * (x, y) and draw the string, then the anchor point should coincide with \n     * the (x, y) point.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.TextLine#107",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.TextLine(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public TextLine(String text, Font font, Paint paint) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");   \n        }\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");   \n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.fragments = new java.util.ArrayList();\n        TextFragment fragment = new TextFragment(text, font, paint);\n        this.fragments.add(fragment);\n    }\n",
        "begin_line": 107,
        "end_line": 120,
        "comment": "\n     * Creates a new text line.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the text font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.draw#152",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, float anchorY, \n                     TextAnchor anchor, float rotateX, float rotateY, \n                     double angle) {\n    \n        float x = anchorX;\n        float yOffset = calculateBaselineOffset(g2, anchor);\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            Size2D d = fragment.calculateDimensions(g2);\n            fragment.draw(g2, x, anchorY + yOffset, TextAnchor.BASELINE_LEFT, \n                    rotateX, rotateY, angle);\n            x = x + (float) d.getWidth();\n        }\n    \n    }\n",
        "begin_line": 152,
        "end_line": 167,
        "comment": "\n     * Draws the text line.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text line that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.calculateDimensions#176",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        double width = 0.0;\n        double height = 0.0;\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            Size2D dimension = fragment.calculateDimensions(g2);\n            width = width + dimension.getWidth();\n            height = Math.max(height, dimension.getHeight());\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 176,
        "end_line": 187,
        "comment": "\n     * Calculates the width and height of the text line.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.calculateBaselineOffset#225",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private float calculateBaselineOffset(Graphics2D g2, \n                                          TextAnchor anchor) {\n        float result = 0.0f;\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            result = Math.max(result, \n                    fragment.calculateBaselineOffset(g2, anchor));\n        }\n        return result;\n    }\n",
        "begin_line": 225,
        "end_line": 235,
        "comment": "\n     * Calculate the offsets required to translate from the specified anchor \n     * position to the left baseline position.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor position.\n     * \n     * @return The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.TextFragment#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public TextFragment(String text, Font font, Paint paint) {\n        this(text, font, paint, 0.0f);\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Creates a new text fragment.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.TextFragment#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint, float)",
        "snippet": "    public TextFragment(String text, Font font, Paint paint,\n                        float baselineOffset) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");  \n        }\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        this.baselineOffset = baselineOffset;\n    }\n",
        "begin_line": 136,
        "end_line": 151,
        "comment": "\n     * Creates a new text fragment.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     * @param baselineOffset  the baseline offset.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.draw#201",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, \n                     float anchorY, TextAnchor anchor,\n                     float rotateX, float rotateY, \n                     double angle) {\n    \n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextUtilities.drawRotatedString(this.text, g2, anchorX, anchorY \n                + this.baselineOffset, anchor, angle, rotateX, rotateY);\n    \n    }\n",
        "begin_line": 201,
        "end_line": 211,
        "comment": "\n     * Draws the text fragment.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate of the anchor point.\n     * @param anchorY  the y-coordinate of the anchor point.\n     * @param anchor  the location of the text that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate of the rotation point.\n     * @param rotateY  the y-coordinate of the rotation point.\n     * @param angle  the angle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.calculateDimensions#220",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        FontMetrics fm = g2.getFontMetrics(this.font);\n        Rectangle2D bounds = TextUtilities.getTextBounds(this.text, g2, fm);\n        Size2D result = new Size2D(bounds.getWidth(), bounds.getHeight());\n        return result;\n    }\n",
        "begin_line": 220,
        "end_line": 225,
        "comment": "\n     * Calculates the dimensions of the text fragment.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height of the text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.calculateBaselineOffset#236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public float calculateBaselineOffset(Graphics2D g2, TextAnchor anchor) {\n        float result = 0.0f;\n        FontMetrics fm = g2.getFontMetrics(this.font);\n        LineMetrics lm = fm.getLineMetrics(\"ABCxyz\", g2);\n        if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.TOP_CENTER\n                                          || anchor == TextAnchor.TOP_RIGHT) {\n            result = lm.getAscent();\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT \n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n            result = -lm.getDescent() - lm.getLeading();\n        }\n        return result;                                             \n    }\n",
        "begin_line": 236,
        "end_line": 250,
        "comment": "\n     * Calculates the vertical offset between the baseline and the specified \n     * text anchor.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor.\n     * \n     * @return the offset.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.TextBlock#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.TextBlock()",
        "snippet": "    public TextBlock() {\n        this.lines = new java.util.ArrayList();\n        this.lineAlignment = HorizontalAlignment.CENTER;\n    }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "\n     * Creates a new empty text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.addLine#118",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.addLine(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public void addLine(String text, Font font, Paint paint) {\n        addLine(new TextLine(text, font, paint));\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Adds a line of text that will be displayed using the specified font.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.addLine#127",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.addLine(org.jfree.chart.text.TextLine)",
        "snippet": "    public void addLine(TextLine line) {\n        this.lines.add(line);    \n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\n     * Adds a {@link TextLine} to the block.\n     * \n     * @param line  the line.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.calculateDimensions#161",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        double width = 0.0;\n        double height = 0.0;\n        Iterator iterator = this.lines.iterator();\n        while (iterator.hasNext()) {\n            TextLine line = (TextLine) iterator.next();\n            Size2D dimension = line.calculateDimensions(g2);\n            width = Math.max(width, dimension.getWidth());\n            height = height + dimension.getHeight();\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 161,
        "end_line": 172,
        "comment": "\n     * Returns the width and height of the text block.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.draw#209",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor)",
        "snippet": "    public void draw(Graphics2D g2, float x, float y, TextBlockAnchor anchor) {\n        draw(g2, x, y, anchor, 0.0f, 0.0f, 0.0);\n    }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n     * Draws the text block at a specific location.\n     * \n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for the anchor point.\n     * @param y  the y-coordinate for the anchor point.\n     * @param anchor  the anchor point.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.draw#226",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, float anchorY, \n                     TextBlockAnchor anchor, float rotateX, float rotateY, \n                     double angle) {\n    \n        Size2D d = calculateDimensions(g2);\n        float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight());\n        Iterator iterator = this.lines.iterator();\n        float yCursor = 0.0f;\n        while (iterator.hasNext()) {\n            TextLine line = (TextLine) iterator.next();\n            Size2D dimension = line.calculateDimensions(g2);\n            float lineOffset = 0.0f;\n            if (this.lineAlignment == HorizontalAlignment.CENTER) {\n                lineOffset = (float) (d.getWidth() - dimension.getWidth()) \n                    / 2.0f;   \n            }\n            else if (this.lineAlignment == HorizontalAlignment.RIGHT) {\n                lineOffset = (float) (d.getWidth() - dimension.getWidth());   \n            }\n            line.draw(g2, anchorX + offsets[0] + lineOffset, anchorY \n                    + offsets[1] + yCursor, TextAnchor.TOP_LEFT, rotateX, \n                    rotateY, angle);\n            yCursor = yCursor + (float) dimension.getHeight();\n        }\n        \n    }\n",
        "begin_line": 226,
        "end_line": 251,
        "comment": "\n     * Draws the text block, aligning it with the specified anchor point and \n     * rotating it about the specified rotation point.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text block that is aligned to the \n     *                anchor point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the x-coordinate for the rotation point.\n     * @param angle  the rotation (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.getInsets#490",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 490,
        "end_line": 492,
        "comment": "\r\n     * Returns the insets for the plot area.\r\n     *\r\n     * @return The insets (never <code>null</code>).\r\n     * \r\n     * @see #setInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartProgressEvent.ChartProgressEvent#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "signature": "org.jfree.chart.event.ChartProgressEvent.ChartProgressEvent(java.lang.Object, org.jfree.chart.JFreeChart, int, int)",
        "snippet": "    public ChartProgressEvent(Object source, JFreeChart chart, int type, \n                              int percent) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 75,
        "end_line": 80,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an \r\n     *                axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     * @param percent  the percentage of completion.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.RectangleConstraint#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType, double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType)",
        "snippet": "    public RectangleConstraint(double w, Range widthRange, \n                               LengthConstraintType widthConstraintType,\n                               double h, Range heightRange, \n                               LengthConstraintType heightConstraintType) {\n        if (widthConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");\n        }\n        if (heightConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'heightType' argument.\"); \n        }\n        this.width = w;\n        this.widthRange = widthRange;\n        this.widthConstraintType = widthConstraintType;\n        this.height = h;\n        this.heightRange = heightRange;\n        this.heightConstraintType = heightConstraintType;\n    }\n",
        "begin_line": 146,
        "end_line": 162,
        "comment": "\r\n     * Creates a new constraint.\r\n     * \r\n     * @param w  the fixed or maximum width.\r\n     * @param widthRange  the width range.\r\n     * @param widthConstraintType  the width type.\r\n     * @param h  the fixed or maximum height.\r\n     * @param heightRange  the height range.\r\n     * @param heightConstraintType  the height type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getWidth#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Returns the fixed width.\r\n     * \r\n     * @return The width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getWidthRange#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthRange()",
        "snippet": "    public Range getWidthRange() {\n        return this.widthRange;   \n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getWidthConstraintType#187",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthConstraintType()",
        "snippet": "    public LengthConstraintType getWidthConstraintType() {\n        return this.widthConstraintType;\n    }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getHeight#196",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\r\n     * Returns the fixed height.\r\n     * \r\n     * @return The height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getHeightRange#205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightRange()",
        "snippet": "    public Range getHeightRange() {\n        return this.heightRange;   \n    }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleConstraint.getHeightConstraintType#214",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightConstraintType()",
        "snippet": "    public LengthConstraintType getHeightConstraintType() {\n        return this.heightConstraintType;\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "LengthConstraintType.LengthConstraintType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "signature": "org.jfree.chart.block.LengthConstraintType.LengthConstraintType(java.lang.String)",
        "snippet": "    private LengthConstraintType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockResult.BlockResult#57",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "class_name": "org.jfree.chart.block.BlockResult",
        "signature": "org.jfree.chart.block.BlockResult.BlockResult()",
        "snippet": "    public BlockResult() {\n        this.entities = null;    \n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\r\n     * Creates a new result instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockParams.BlockParams#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.BlockParams()",
        "snippet": "    public BlockParams() {\n        this.translateX = 0.0;\n        this.translateY = 0.0;\n        this.generateEntities = false;    \n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockParams.getGenerateEntities#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.getGenerateEntities()",
        "snippet": "    public boolean getGenerateEntities() {\n        return this.generateEntities;   \n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Returns the flag that controls whether or not chart entities are \r\n     * generated.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockParams.setGenerateEntities#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.setGenerateEntities(boolean)",
        "snippet": "    public void setGenerateEntities(boolean generate) {\n        this.generateEntities = generate;   \n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\r\n     * Sets the flag that controls whether or not chart entities are generated.\r\n     * \r\n     * @param generate  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.getInsets#144",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\r\n     * Returns the space reserved for the border.\r\n     * \r\n     * @return The space (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.draw#163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        // this default implementation will just fill the available\n        // border space with a single color\n        double t = this.insets.calculateTopInset(area.getHeight());\n        double b = this.insets.calculateBottomInset(area.getHeight());\n        double l = this.insets.calculateLeftInset(area.getWidth());\n        double r = this.insets.calculateRightInset(area.getWidth());\n        double x = area.getX();\n        double y = area.getY();\n        double w = area.getWidth();\n        double h = area.getHeight();\n        g2.setPaint(this.paint);\n        Rectangle2D rect = new Rectangle2D.Double();\n        if (t > 0.0) {\n            rect.setRect(x, y, w, t);\n            g2.fill(rect);\n        }\n        if (b > 0.0) {\n            rect.setRect(x, y + h - b, w, b);\n            g2.fill(rect);\n        }\n        if (l > 0.0) {\n            rect.setRect(x, y, l, h);\n            g2.fill(rect);\n        }\n        if (r > 0.0) {\n            rect.setRect(x + w - r, y, r, h);\n            g2.fill(rect);\n        }\n    }\n",
        "begin_line": 163,
        "end_line": 192,
        "comment": "\r\n     * Draws the border by filling in the reserved space.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentWidth#382",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(double)",
        "snippet": "    protected double trimToContentWidth(double fixedWidth) {\n        double result = this.margin.trimWidth(fixedWidth);\n        result = this.frame.getInsets().trimWidth(result);\n        result = this.padding.trimWidth(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 382,
        "end_line": 387,
        "comment": "\r\n     * Calculate the width available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * width.\r\n     * \r\n     * @param fixedWidth  the fixed width.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentHeight(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentHeight#400",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(double)",
        "snippet": "    protected double trimToContentHeight(double fixedHeight) {\n        double result = this.margin.trimHeight(fixedHeight);\n        result = this.frame.getInsets().trimHeight(result);\n        result = this.padding.trimHeight(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 400,
        "end_line": 405,
        "comment": "\r\n     * Calculate the height available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * height.\r\n     * \r\n     * @param fixedHeight  the fixed height.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.toContentConstraint#415",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected RectangleConstraint toContentConstraint(RectangleConstraint c) {\n        if (c == null) {\n            throw new IllegalArgumentException(\"Null 'c' argument.\");\n        }\n        if (c.equals(RectangleConstraint.NONE)) {\n            return c;\n        }\n        double w = c.getWidth();\n        Range wr = c.getWidthRange();\n        double h = c.getHeight();\n        Range hr = c.getHeightRange();\n        double ww = trimToContentWidth(w);\n        double hh = trimToContentHeight(h);\n        Range wwr = trimToContentWidth(wr);\n        Range hhr = trimToContentHeight(hr);\n        return new RectangleConstraint(\n            ww, wwr, c.getWidthConstraintType(), \n            hh, hhr, c.getHeightConstraintType()\n        );\n    }\n",
        "begin_line": 415,
        "end_line": 434,
        "comment": "\r\n     * Returns a constraint for the content of this block that will result in\r\n     * the bounds of the block matching the specified constraint.\r\n     * \r\n     * @param c  the outer constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The content constraint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentWidth#436",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentWidth(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentWidth(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentWidth(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 436,
        "end_line": 449,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimToContentHeight#451",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentHeight(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentHeight(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentHeight(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 451,
        "end_line": 464,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.calculateTotalWidth#473",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double)",
        "snippet": "    protected double calculateTotalWidth(double contentWidth) {\n        double result = contentWidth;\n        result = this.padding.extendWidth(result);\n        result = this.frame.getInsets().extendWidth(result);\n        result = this.margin.extendWidth(result);\n        return result;\n    }\n",
        "begin_line": 473,
        "end_line": 479,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content width.\r\n     * \r\n     * @param contentWidth  the content width.\r\n     * \r\n     * @return The adjusted width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.calculateTotalHeight#488",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double)",
        "snippet": "    protected double calculateTotalHeight(double contentHeight) {\n        double result = contentHeight;\n        result = this.padding.extendHeight(result);\n        result = this.frame.getInsets().extendHeight(result);\n        result = this.margin.extendHeight(result);\n        return result;\n    }\n",
        "begin_line": 488,
        "end_line": 494,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content height.\r\n     * \r\n     * @param contentHeight  the content height.\r\n     * \r\n     * @return The adjusted height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimMargin#504",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimMargin(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimMargin(Rectangle2D area) {\n        // defer argument checking...\n        this.margin.trim(area);\n        return area;\n    }\n",
        "begin_line": 504,
        "end_line": 508,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the margin.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimBorder#518",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimBorder(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimBorder(Rectangle2D area) {\n        // defer argument checking...\n        this.frame.getInsets().trim(area);\n        return area;\n    }\n",
        "begin_line": 518,
        "end_line": 522,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the border.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.trimPadding#532",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimPadding(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimPadding(Rectangle2D area) {\n        // defer argument checking...\n        this.padding.trim(area);\n        return area;\n    }\n",
        "begin_line": 532,
        "end_line": 536,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the padding.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.drawBorder#544",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void drawBorder(Graphics2D g2, Rectangle2D area) {\n        this.frame.draw(g2, area);\n    }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "\r\n     * Draws the border around the perimeter of the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.isBorderVisible#456",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.isBorderVisible()",
        "snippet": "    public boolean isBorderVisible() {\n        return this.borderVisible;\n    }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "\r\n     * Returns a flag that controls whether or not a border is drawn around the\r\n     * outside of the chart.\r\n     *\r\n     * @return A boolean.\r\n     * \r\n     * @see #setBorderVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.notifyListeners#1537",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartProgressEvent)",
        "snippet": "    protected void notifyListeners(ChartProgressEvent event) {\n\n        Object[] listeners = this.progressListeners.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == ChartProgressListener.class) {\n                ((ChartProgressListener) listeners[i + 1]).chartProgress(event);\n            }\n        }\n\n    }\n",
        "begin_line": 1537,
        "end_line": 1546,
        "comment": "\r\n     * Sends a {@link ChartProgressEvent} to all registered listeners.\r\n     *\r\n     * @param event  information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendItemCollection.LegendItemCollection#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.LegendItemCollection()",
        "snippet": "    public LegendItemCollection() {\n        this.items = new java.util.ArrayList();\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\r\n     * Constructs a new legend item collection, initially empty.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendItemCollection.getItemCount#103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.items.size();\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\r\n     * Returns the number of legend items in the collection.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleEdge.isTopOrBottom#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public static boolean isTopOrBottom(RectangleEdge edge) {\n        return (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM);    \n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * Returns <code>true</code> if the edge is <code>TOP</code> or \n     * <code>BOTTOM</code>, and <code>false</code> otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "Rotation.Rotation#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "class_name": "org.jfree.chart.util.Rotation",
        "signature": "org.jfree.chart.util.Rotation.Rotation(java.lang.String, double)",
        "snippet": "    private Rotation(final String name, final double factor) {\n        this.name = name;\n        this.factor = factor;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     * @param factor  the rotation factor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.PiePlot#491",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.general.PieDataset)",
        "snippet": "    public PiePlot(PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        \n        this.interiorGap = DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = DEFAULT_START_ANGLE;\n        this.direction = Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n\n        this.sectionPaintMap = new PaintMap();\n        this.baseSectionPaint = Color.gray;\n\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n\n        this.sectionOutlineStrokeMap = new StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        \n        this.explodePercentages = new TreeMap();\n\n        this.labelGenerator = new StandardPieSectionLabelGenerator();\n        this.labelFont = DEFAULT_LABEL_FONT;\n        this.labelPaint = DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new PieLabelDistributor(0);\n        \n        this.simpleLabels = false;\n        this.simpleLabelOffset = new RectangleInsets(UnitType.RELATIVE, 0.18, \n                0.18, 0.18, 0.18);\n        this.labelPadding = new RectangleInsets(2, 2, 2, 2);\n        \n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        \n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n",
        "begin_line": 491,
        "end_line": 541,
        "comment": "\r\n     * Creates a plot that will draw a pie chart for the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "PieLabelDistributor.PieLabelDistributor#61",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PieLabelDistributor.java",
        "class_name": "org.jfree.chart.plot.PieLabelDistributor",
        "signature": "org.jfree.chart.plot.PieLabelDistributor.PieLabelDistributor(int)",
        "snippet": "    public PieLabelDistributor(int labelCount) {\n        super();\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\r\n     * Creates a new distributor.\r\n     * \r\n     * @param labelCount  the number of labels (ignored).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPieLabelDistributor.AbstractPieLabelDistributor#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/AbstractPieLabelDistributor.java",
        "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
        "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.AbstractPieLabelDistributor()",
        "snippet": "    public AbstractPieLabelDistributor() {\n        this.labels = new java.util.ArrayList();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#89",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator()",
        "snippet": "    public StandardPieSectionLabelGenerator() {\n        this(DEFAULT_SECTION_LABEL_FORMAT, NumberFormat.getNumberInstance(), \n                NumberFormat.getPercentInstance());\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\r\n     * Creates a new section label generator using \r\n     * {@link #DEFAULT_SECTION_LABEL_FORMAT} as the label format string, and \r\n     * platform default number and percentage formatters.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#139",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public StandardPieSectionLabelGenerator(String labelFormat,\n            NumberFormat numberFormat, NumberFormat percentFormat) {\n        super(labelFormat, numberFormat, percentFormat);\n        this.attributedLabels = new ObjectList();\n    }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages \r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    protected AbstractPieItemLabelGenerator(String labelFormat,\n                                            NumberFormat numberFormat, \n                                            NumberFormat percentFormat) {\n\n        if (labelFormat == null) {\n            throw new IllegalArgumentException(\"Null 'labelFormat' argument.\");\n        }\n        if (numberFormat == null) {\n            throw new IllegalArgumentException(\"Null 'numberFormat' argument.\");\n        }\n        if (percentFormat == null) {\n            throw new IllegalArgumentException(\n                \"Null 'percentFormat' argument.\"\n            );   \n        }\n        this.labelFormat = labelFormat;\n        this.numberFormat = numberFormat;\n        this.percentFormat = percentFormat;\n\n    }\n",
        "begin_line": 80,
        "end_line": 99,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not\r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages\r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrokeMap.StrokeMap#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StrokeMap.java",
        "class_name": "org.jfree.chart.StrokeMap",
        "signature": "org.jfree.chart.StrokeMap.StrokeMap()",
        "snippet": "    public StrokeMap() {\n        this.store = new TreeMap();    \n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Creates a new (empty) map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintMap.PaintMap#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/PaintMap.java",
        "class_name": "org.jfree.chart.PaintMap",
        "signature": "org.jfree.chart.PaintMap.PaintMap()",
        "snippet": "    public PaintMap() {\n        this.store = new HashMap();    \n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Creates a new (empty) map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlockAnchor.TextBlockAnchor#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TextBlockAnchor(java.lang.String)",
        "snippet": "    private TextBlockAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.114
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.Title#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title()",
        "snippet": "    protected Title() {\n        this(Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT,\n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.setPosition#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void setPosition(RectangleEdge position) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (this.position != position) {\n            this.position = position;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 215,
        "end_line": 223,
        "comment": "\r\n     * Sets the position for the title and sends a {@link TitleChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param position  the position (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.notifyListeners#356",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent)",
        "snippet": "    protected void notifyListeners(TitleChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.listenerList.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == TitleChangeListener.class) {\n                    ((TitleChangeListener) listeners[i + 1]).titleChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 356,
        "end_line": 366,
        "comment": "\r\n     * Notifies all registered listeners that the chart title has changed in \r\n     * some way.\r\n     *\r\n     * @param event  an object that contains information about the change to \r\n     *               the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.LegendTitle#161",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource)",
        "snippet": "    public LegendTitle(LegendItemSource source) {\n        this(source, new FlowArrangement(), new ColumnArrangement());\n    }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\r\n     * Constructs a new (empty) legend for the specified source.\r\n     * \r\n     * @param source  the source.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.LegendTitle#174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement)",
        "snippet": "    public LegendTitle(LegendItemSource source, \n                       Arrangement hLayout, Arrangement vLayout) {\n        this.sources = new LegendItemSource[] {source};\n        this.items = new BlockContainer(hLayout);\n        this.hLayout = hLayout;\n        this.vLayout = vLayout;\n        this.backgroundPaint = null;  \n        this.legendItemGraphicEdge = RectangleEdge.LEFT;\n        this.legendItemGraphicAnchor = RectangleAnchor.CENTER;\n        this.legendItemGraphicLocation = RectangleAnchor.CENTER;\n        this.legendItemGraphicPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n        this.itemFont = DEFAULT_ITEM_FONT;\n        this.itemPaint = DEFAULT_ITEM_PAINT;\n        this.itemLabelPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 174,
        "end_line": 188,
        "comment": "\r\n     * Creates a new legend title with the specified arrangement.\r\n     * \r\n     * @param source  the source.\r\n     * @param hLayout  the horizontal item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     * @param vLayout  the vertical item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.setBackgroundPaint#228",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n        this.backgroundPaint = paint;   \n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "\r\n     * Sets the background paint for the legend and sends a \r\n     * {@link TitleChangeEvent} to all registered listeners.\r\n     * \r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "TitleChangeEvent.TitleChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "signature": "org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title)",
        "snippet": "    public TitleChangeEvent(Title title) {\n        super(title);\n        this.title = title;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Default constructor.\r\n     *\r\n     * @param title  the chart title that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.LineBorder#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder()",
        "snippet": "    public LineBorder() {\n        this(Color.black, new BasicStroke(1.0f), new RectangleInsets(1.0, 1.0, \n                1.0, 1.0));\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\r\n     * Creates a default border.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.LineBorder#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public LineBorder(Paint paint, Stroke stroke, RectangleInsets insets) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        this.paint = paint;\n        this.stroke = stroke;\n        this.insets = insets;\n    }  \n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "\r\n     * Creates a new border with the specified color.\r\n     * \r\n     * @param paint  the color (<code>null</code> not permitted).\r\n     * @param stroke  the border stroke (<code>null</code> not permitted).\r\n     * @param insets  the insets (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "FlowArrangement.FlowArrangement#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement()",
        "snippet": "    public FlowArrangement() {   \n        this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "FlowArrangement.FlowArrangement#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
        "snippet": "    public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign,\n                           double hGap, double vGap) {   \n        this.horizontalAlignment = hAlign;\n        this.verticalAlignment = vAlign;\n        this.horizontalGap = hGap;\n        this.verticalGap = vGap;\n    }\n",
        "begin_line": 91,
        "end_line": 97,
        "comment": "\r\n     * Creates a new instance.\r\n     * \r\n     * @param hAlign  the horizontal alignment (currently ignored).\r\n     * @param vAlign  the vertical alignment (currently ignored).\r\n     * @param hGap  the horizontal gap.\r\n     * @param vGap  the vertical gap.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "ColumnArrangement.ColumnArrangement#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement()",
        "snippet": "    public ColumnArrangement() {   \n    }\n",
        "begin_line": 78,
        "end_line": 79,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.BlockContainer#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
        "snippet": "    public BlockContainer(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;\n        this.blocks = new ArrayList();\n    }    \n",
        "begin_line": 95,
        "end_line": 101,
        "comment": "\r\n     * Creates a new instance with the specified arrangement.\r\n     * \r\n     * @param arrangement  the arrangement manager (<code>null</code> not \r\n     *                     permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setMargin#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setMargin(RectangleInsets margin) {\n        if (margin == null) {\n            throw new IllegalArgumentException(\"Null 'margin' argument.\");   \n        }\n        this.margin = margin;\n    }\n",
        "begin_line": 208,
        "end_line": 213,
        "comment": "\r\n     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param margin  the margin (<code>null</code> not permitted).\r\n     * \r\n     * @see #getMargin()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setFrame#250",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame)",
        "snippet": "    public void setFrame(BlockFrame frame) {\n        if (frame == null) {\n            throw new IllegalArgumentException(\"Null 'frame' argument.\");   \n        }\n        this.frame = frame;\n    }\n",
        "begin_line": 250,
        "end_line": 255,
        "comment": "\r\n     * Sets the frame (or border).\r\n     * \r\n     * @param frame  the frame (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.5\r\n     * @see #getFrame()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.JFreeChart#363",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean)",
        "snippet": "    public JFreeChart(String title, Font titleFont, Plot plot, \n                      boolean createLegend) {\n\n        if (plot == null) {\n            throw new NullPointerException(\"Null 'plot' argument.\");\n        }\n\n        // create storage for listeners...\n        this.progressListeners = new EventListenerList();\n        this.changeListeners = new EventListenerList();\n        this.notify = true;  // default is to notify listeners when the \n                             // chart changes\n\n        this.renderingHints = new RenderingHints(\n                RenderingHints.KEY_ANTIALIASING, \n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        this.borderVisible = false;\n        this.borderStroke = new BasicStroke(1.0f);\n        this.borderPaint = Color.black;\n\n        this.padding = RectangleInsets.ZERO_INSETS;\n        \n        this.plot = plot;\n        plot.addChangeListener(this);\n\n        this.subtitles = new ArrayList();\n\n        // create a legend, if requested...\n        if (createLegend) {\n            LegendTitle legend = new LegendTitle(this.plot);\n            legend.setMargin(new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n            legend.setFrame(new LineBorder());\n            legend.setBackgroundPaint(Color.white);\n            legend.setPosition(RectangleEdge.BOTTOM);\n            this.subtitles.add(legend);\n            legend.addChangeListener(this);\n        }\n\n        // add the chart title, if one has been specified...\n        if (title != null) {\n            if (titleFont == null) {\n                titleFont = DEFAULT_TITLE_FONT;\n            }\n            this.title = new TextTitle(title, titleFont);\n            this.title.addChangeListener(this);\n        }\n\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n\n        this.backgroundImage = DEFAULT_BACKGROUND_IMAGE;\n        this.backgroundImageAlignment = DEFAULT_BACKGROUND_IMAGE_ALIGNMENT;\n        this.backgroundImageAlpha = DEFAULT_BACKGROUND_IMAGE_ALPHA;\n\n    }\n",
        "begin_line": 363,
        "end_line": 417,
        "comment": "\r\n     * Creates a new chart with the given title and plot.  The \r\n     * <code>createLegend</code> argument specifies whether or not a legend\r\n     * should be added to the chart.  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param titleFont  the font for displaying the chart title \r\n     *                   (<code>null</code> permitted).\r\n     * @param plot  controller of the visual representation of the data \r\n     *              (<code>null</code> not permitted).\r\n     * @param createLegend  a flag indicating whether or not a legend should   \r\n     *                      be created for the chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.TextTitle#186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font)",
        "snippet": "    public TextTitle(String text, Font font) {\n        this(text, font, TextTitle.DEFAULT_TEXT_PAINT, Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT, \n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 186,
        "end_line": 190,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     *\r\n     * @param text  the title text (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.TextTitle#205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public TextTitle(String text, Font font, Paint paint, \n                     RectangleEdge position, \n                     HorizontalAlignment horizontalAlignment, \n                     VerticalAlignment verticalAlignment,\n                     RectangleInsets padding) {\n\n        super(position, horizontalAlignment, verticalAlignment, padding);\n        \n        if (text == null) {\n            throw new NullPointerException(\"Null 'text' argument.\");\n        }\n        if (font == null) {\n            throw new NullPointerException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new NullPointerException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        // the textAlignment and the horizontalAlignment are separate things,\n        // but it makes sense for the default textAlignment to match the\n        // title's horizontal alignment...\n        this.textAlignment = horizontalAlignment;\n        this.backgroundPaint = null;\n        this.content = null;\n        this.toolTipText = null;\n        this.urlText = null;\n        \n    }\n",
        "begin_line": 205,
        "end_line": 234,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param text  the text for the title (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     * @param paint  the title paint (<code>null</code> not permitted).\r\n     * @param position  the title position (<code>null</code> not permitted).\r\n     * @param horizontalAlignment  the horizontal alignment (<code>null</code> \r\n     *                             not permitted).\r\n     * @param verticalAlignment  the vertical alignment (<code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the space to leave around the outside of the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 1
    },
    {
        "name": "VerticalAlignment.VerticalAlignment#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String)",
        "snippet": "    private VerticalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "HorizontalAlignment.HorizontalAlignment#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String)",
        "snippet": "    private HorizontalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.Title#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    protected Title(RectangleEdge position,\n                    HorizontalAlignment horizontalAlignment, \n                    VerticalAlignment verticalAlignment,\n                    RectangleInsets padding) {\n\n        // check arguments...\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (horizontalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'horizontalAlignment' argument.\");\n        }\n\n        if (verticalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'verticalAlignment' argument.\");\n        }\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'spacer' argument.\");\n        }\n\n        this.position = position;\n        this.horizontalAlignment = horizontalAlignment;\n        this.verticalAlignment = verticalAlignment;\n        setPadding(padding);\n        this.listenerList = new EventListenerList();\n        this.notify = true;\n\n    }\n",
        "begin_line": 169,
        "end_line": 198,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param position  the position of the title (<code>null</code> not \r\n     *                  permitted).\r\n     * @param horizontalAlignment  the horizontal alignment of the title (LEFT,\r\n     *                             CENTER or RIGHT, <code>null</code> not \r\n     *                             permitted).\r\n     * @param verticalAlignment  the vertical alignment of the title (TOP, \r\n     *                           MIDDLE or BOTTOM, <code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the amount of space to leave around the outside of the \r\n     *                 title (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.addChangeListener#336",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener)",
        "snippet": "    public void addChangeListener(TitleChangeListener listener) {\n        this.listenerList.add(TitleChangeListener.class, listener);\n    }\n",
        "begin_line": 336,
        "end_line": 338,
        "comment": "\r\n     * Registers an object for notification of changes to the title.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.BlockBorder#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
        "snippet": "    public BlockBorder(RectangleInsets insets, Paint paint) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.insets = insets;\n        this.paint = paint;\n    }\n",
        "begin_line": 128,
        "end_line": 137,
        "comment": "\r\n     * Creates a new border.\r\n     * \r\n     * @param insets  the border insets (<code>null</code> not permitted).\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.AbstractBlock#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
        "snippet": "    protected AbstractBlock() {\n        this.id = null;\n        this.width = 0.0;\n        this.height = 0.0;\n        this.bounds = new Rectangle2D.Float();\n        this.margin = RectangleInsets.ZERO_INSETS;\n        this.frame = BlockBorder.NONE; \n        this.padding = RectangleInsets.ZERO_INSETS;\n    }\n",
        "begin_line": 109,
        "end_line": 117,
        "comment": "\r\n     * Creates a new block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setPadding#276",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setPadding(RectangleInsets padding) {\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'padding' argument.\");   \n        }\n        this.padding = padding;\n    }\n",
        "begin_line": 276,
        "end_line": 281,
        "comment": "\r\n     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param padding  the padding (<code>null</code> not permitted).\r\n     * \r\n     * @see #getPadding()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.ProjectInfo#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo()",
        "snippet": "    public ProjectInfo() {\n        // nothing required\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Constructs an empty project info object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.setLogo#110",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image)",
        "snippet": "    public void setLogo(final Image logo) {\n        this.logo = logo;\n    }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * Sets the project logo.\n     *\n     * @param logo  the project logo.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.setLicenceText#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String)",
        "snippet": "    public void setLicenceText(final String licenceText) {\n        this.licenceText = licenceText;\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * Sets the project licence text.\n     *\n     * @param licenceText  the licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.setContributors#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List)",
        "snippet": "    public void setContributors(final List contributors) {\n        this.contributors = contributors;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Sets the list of contributors.\n     *\n     * @param contributors  the list of contributors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Licences.getInstance#798",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getInstance()",
        "snippet": "    public static Licences getInstance() {\n        if (singleton == null) {\n            singleton = new Licences();\n        }\n        return singleton;\n    }\n",
        "begin_line": 798,
        "end_line": 803,
        "comment": "\n     * Returns a reference to this class.\n     *\n     * @return the instance reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Licences.getLGPL#821",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getLGPL()",
        "snippet": "    public String getLGPL() {\n        return LGPL;\n    }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "\n     * Returns the LGPL text in a non static way to prevent the compiler\n     * to copy the contents of the field.\n     *\n     * @return the LGPL licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.Library#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.Library()",
        "snippet": "    protected Library() {\n        // nothing required\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Creates a new library reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setInfo#127",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setInfo(java.lang.String)",
        "snippet": "    protected void setInfo(String info) {\n        this.info = info;\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\n     * Sets the project info.\n     * \n     * @param info  the project info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setLicenceName#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setLicenceName(java.lang.String)",
        "snippet": "    protected void setLicenceName(String licenceName) {\n        this.licenceName = licenceName;\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * Sets the licence name.\n     * \n     * @param licenceName  the licence name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setName#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setName(java.lang.String)",
        "snippet": "    protected void setName(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setVersion#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setVersion(java.lang.String)",
        "snippet": "    protected void setVersion(String version) {\n        this.version = version;\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * Sets the version identifier.\n     * \n     * @param version  the version identifier.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Contributor.Contributor#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "class_name": "org.jfree.chart.ui.Contributor",
        "signature": "org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String)",
        "snippet": "    public Contributor(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\n     * Creates a new contributor.\n     *\n     * @param name  the name.\n     * @param email  the e-mail address.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.BasicProjectInfo#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo()",
        "snippet": "    public BasicProjectInfo() {\n        this.libraries = new ArrayList();\n        this.optionalLibraries = new ArrayList();\n    }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setCopyright#197",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String)",
        "snippet": "    public void setCopyright(String copyright) {\n        this.copyright = copyright;\n    }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * Sets the project copyright statement.\n     *\n     * @param copyright  the project copyright statement.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setInfo#206",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String)",
        "snippet": "    public void setInfo(String info) {\n        super.setInfo(info);\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Sets the project info string (for example, this could be the project URL).\n     * \n     * @param info  the info string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setLicenceName#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String)",
        "snippet": "    public void setLicenceName(String licence) {\n        super.setLicenceName(licence);\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Sets the license name.\n     * \n     * @param licence  the license name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setName#224",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String)",
        "snippet": "    public void setName(String name) {\n        super.setName(name);\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setVersion#233",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String)",
        "snippet": "    public void setVersion(String version) {\n        super.setVersion(version);\n    }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n     * Sets the project version number.\n     * \n     * @param version  the version number.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChartResources.getContents#51",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "signature": "org.jfree.chart.resources.JFreeChartResources.getContents()",
        "snippet": "    public Object[][] getContents() {\n        return CONTENTS;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\r\n     * Returns the array of strings in the resource bundle.\r\n     *\r\n     * @return The resources.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleEdge.RectangleEdge#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
        "snippet": "    private RectangleEdge(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.addChangeListener#869",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener)",
        "snippet": "    public void addChangeListener(PlotChangeListener listener) {\n        this.listenerList.add(PlotChangeListener.class, listener);\n    }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": "\r\n     * Registers an object for notification of changes to the plot.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @see #removeChangeListener(PlotChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.getLowerBound#98",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getLowerBound()",
        "snippet": "    public double getLowerBound() {\n        return this.lower;\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\r\n     * Returns the lower bound for the range.\r\n     *\r\n     * @return The lower bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0924
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.getUpperBound#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getUpperBound()",
        "snippet": "    public double getUpperBound() {\n        return this.upper;\n    }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\r\n     * Returns the upper bound for the range.\r\n     *\r\n     * @return The upper bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0924
        },
        "num_failing_tests": 1
    },
    {
        "name": "PlotOrientation.PlotOrientation#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.Range#83",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower \n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0887
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextAnchor.TextAnchor#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0822
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.notifyListeners#889",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 889,
        "end_line": 896,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0811
        },
        "num_failing_tests": 1
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0811
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.Plot#286",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 286,
        "end_line": 306,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline \r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence, \n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 194,
        "end_line": 205,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 287,
        "end_line": 337,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series \r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.intArray#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.intArray#531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartColor.createDefaultPaintArray#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 149,
        "end_line": 187,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and \r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom, \n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);   \n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     * \n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0765
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0765
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.ObjectList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0735
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0735
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0735
        },
        "num_failing_tests": 1
    }
]