[
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(PiePlot3DTests.class);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.PiePlot3DTests(java.lang.String)",
        "snippet": "    public PiePlot3DTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        PiePlot3D p1 = new PiePlot3D();\n        PiePlot3D p2 = new PiePlot3D();\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n        \n        p1.setDepthFactor(1.23);\n        assertFalse(p1.equals(p2));\n        p2.setDepthFactor(1.23);\n        assertTrue(p1.equals(p2));\n        \n        p1.setDarkerSides(true);\n        assertFalse(p1.equals(p2));\n        p2.setDarkerSides(true);\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 90,
        "end_line": 105,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 32)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 32)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        PiePlot3D p1 = new PiePlot3D(null);\n        PiePlot3D p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (PiePlot3D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 110,
        "end_line": 131,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 28)",
            "(line 115,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 129,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.PiePlot3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
        "signature": "org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset()",
        "snippet": "    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 136,
        "end_line": 152,
        "comment": "\n     * Draws a pie chart where the label generator returns null.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 138,col 30)",
            "(line 139,col 9)-(line 139,col 32)",
            "(line 140,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 28)"
        ]
    }
]