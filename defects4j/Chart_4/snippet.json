[
    {
        "name": "DatasetUtilities.findDomainBounds#646",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset)",
        "snippet": "    public static Range findDomainBounds(XYDataset dataset) {\n        return findDomainBounds(dataset, true);\n    }\n",
        "begin_line": 646,
        "end_line": 648,
        "comment": "\r\n     * Returns the range of values in the domain (x-values) of a dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The range of values (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.getDataRange#4425",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDataRange(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        List includedAnnotations = new ArrayList();\n        boolean isDomainAxis = true;\n\n        // is it a domain axis?\n        int domainIndex = getDomainAxisIndex(axis);\n        if (domainIndex >= 0) {\n            isDomainAxis = true;\n            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                    new Integer(domainIndex)));\n            if (domainIndex == 0) {\n                // grab the plot's annotations\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // or is it a range axis?\n        int rangeIndex = getRangeAxisIndex(axis);\n        if (rangeIndex >= 0) {\n            isDomainAxis = false;\n            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                    new Integer(rangeIndex)));\n            if (rangeIndex == 0) {\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // iterate through the datasets that map to the axis and get the union\n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            XYDataset d = (XYDataset) iterator.next();\n            if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n                \n                    Collection c = r.getAnnotations();\n                    Iterator i = c.iterator();\n                    while (i.hasNext()) {\n                        XYAnnotation a = (XYAnnotation) i.next();\n                        if (a instanceof XYAnnotationBoundsInfo) {\n                            includedAnnotations.add(a);\n                        }\n                    }\n            }\n        }\n\n        Iterator it = includedAnnotations.iterator();\n        while (it.hasNext()) {\n            XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n            if (xyabi.getIncludeInDataBounds()) {\n                if (isDomainAxis) {\n                    result = Range.combine(result, xyabi.getXRange());\n                }\n                else {\n                    result = Range.combine(result, xyabi.getYRange());\n                }\n            }\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 4425,
        "end_line": 4519,
        "comment": "\r\n     * Returns the range for the specified axis.\r\n     *\r\n     * @param axis  the axis.\r\n     *\r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYSeriesCollection.getDomainBounds#576",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.getDomainBounds(boolean)",
        "snippet": "    public Range getDomainBounds(boolean includeInterval) {\n        if (includeInterval) {\n            return this.intervalDelegate.getDomainBounds(includeInterval);\n        }\n        else {\n            double lower = Double.POSITIVE_INFINITY;\n            double upper = Double.NEGATIVE_INFINITY;\n            int seriesCount = getSeriesCount();\n            for (int s = 0; s < seriesCount; s++) {\n                XYSeries series = getSeries(s);\n                double minX = series.getMinX();\n                if (!Double.isNaN(minX)) {\n                    lower = Math.min(lower, minX);\n                }\n                double maxX = series.getMaxX();\n                if (!Double.isNaN(maxX)) {\n                    upper = Math.max(upper, maxX);\n                }\n            }\n            if (lower > upper) {\n                return null;\n            }\n            else {\n                return new Range(lower, upper);\n            }\n        }\n    }\n",
        "begin_line": 576,
        "end_line": 602,
        "comment": "\r\n     * Returns the range of the values in this dataset's domain.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         x-interval is taken into account.\r\n     *\r\n     * @return The range (or <code>null</code> if the dataset contains no\r\n     *     values).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9091
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.getMinX#191",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.getMinX()",
        "snippet": "    public double getMinX() {\n        return this.minX;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\r\n     * Returns the smallest x-value in the series, ignoring any Double.NaN\r\n     * values.  This method returns Double.NaN if there is no smallest x-value\r\n     * (for example, when the series is empty).\r\n     *\r\n     * @return The smallest x-value.\r\n     *\r\n     * @see #getMaxX()\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9091
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.getMaxX#206",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.getMaxX()",
        "snippet": "    public double getMaxX() {\n        return this.maxX;\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\r\n     * Returns the largest x-value in the series, ignoring any Double.NaN\r\n     * values.  This method returns Double.NaN if there is no largest x-value\r\n     * (for example, when the series is empty).\r\n     *\r\n     * @return The largest x-value.\r\n     *\r\n     * @see #getMinX()\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9091
        },
        "num_failing_tests": 20
    },
    {
        "name": "DatasetUtilities.findDomainBounds#660",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    public static Range findDomainBounds(XYDataset dataset,\n                                         boolean includeInterval) {\n\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n\n        Range result = null;\n        // if the dataset implements DomainInfo, life is easier\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            result = info.getDomainBounds(includeInterval);\n        }\n        else {\n            result = iterateDomainBounds(dataset, includeInterval);\n        }\n        return result;\n\n    }\n",
        "begin_line": 660,
        "end_line": 678,
        "comment": "\r\n     * Returns the range of values in the domain (x-values) of a dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  determines whether or not the x-interval is taken\r\n     *                         into account (only applies if the dataset is an\r\n     *                         {@link IntervalXYDataset}).\r\n     *\r\n     * @return The range of values (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8781
        },
        "num_failing_tests": 22
    },
    {
        "name": "IntervalXYDelegate.isAutoWidth#149",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.isAutoWidth()",
        "snippet": "    public boolean isAutoWidth() {\n        return this.autoWidth;\n    }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\r\n     * Returns <code>true</code> if the interval width is automatically\r\n     * calculated, and <code>false</code> otherwise.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8704
        },
        "num_failing_tests": 20
    },
    {
        "name": "IntervalXYDelegate.getIntervalPositionFactor#176",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor()",
        "snippet": "    public double getIntervalPositionFactor() {\n        return this.intervalPositionFactor;\n    }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\r\n     * Returns the interval position factor.\r\n     *\r\n     * @return The interval position factor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8704
        },
        "num_failing_tests": 20
    },
    {
        "name": "IntervalXYDelegate.getIntervalWidth#239",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth()",
        "snippet": "    public double getIntervalWidth() {\n        if (isAutoWidth() && !Double.isInfinite(this.autoIntervalWidth)) {\n            // everything is fine: autoWidth is on, and an autoIntervalWidth\n            // was set.\n            return this.autoIntervalWidth;\n        }\n        else {\n            // either autoWidth is off or autoIntervalWidth was not set.\n            return this.fixedIntervalWidth;\n        }\n    }\n",
        "begin_line": 239,
        "end_line": 249,
        "comment": "\r\n     * Returns the interval width.  This method will return either the\r\n     * auto calculated interval width or the manually specified interval\r\n     * width, depending on the {@link #isAutoWidth()} result.\r\n     *\r\n     * @return The interval width to use.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8704
        },
        "num_failing_tests": 20
    },
    {
        "name": "IntervalXYDelegate.getDomainBounds#364",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.getDomainBounds(boolean)",
        "snippet": "    public Range getDomainBounds(boolean includeInterval) {\n        // first get the range without the interval, then expand it for the\n        // interval width\n        Range range = DatasetUtilities.findDomainBounds(this.dataset, false);\n        if (includeInterval && range != null) {\n            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();\n            double upperAdj = getIntervalWidth() - lowerAdj;\n            range = new Range(range.getLowerBound() - lowerAdj,\n                range.getUpperBound() + upperAdj);\n        }\n        return range;\n    }\n",
        "begin_line": 364,
        "end_line": 375,
        "comment": "\r\n     * Returns the range of the values in the dataset's domain, including\r\n     * or excluding the interval around each x-value as specified.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         x-interval should be taken into account.\r\n     *\r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8704
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYPlot.getRendererForDataset#1743",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRendererForDataset(org.jfree.data.xy.XYDataset)",
        "snippet": "    public XYItemRenderer getRendererForDataset(XYDataset dataset) {\n        XYItemRenderer result = null;\n        for (int i = 0; i < this.datasets.size(); i++) {\n            if (this.datasets.get(i) == dataset) {\n                result = (XYItemRenderer) this.renderers.get(i);\n                if (result == null) {\n                    result = getRenderer();\n                }\n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1743,
        "end_line": 1755,
        "comment": "\r\n     * Returns the renderer for the specified dataset.  The code first\r\n     * determines the index of the dataset, then checks if there is a\r\n     * renderer with the same index (if not, the method returns renderer(0).\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @return The renderer (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYSeries.XYSeries#142",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.XYSeries(java.lang.Comparable)",
        "snippet": "    public XYSeries(Comparable key) {\n        this(key, true, true);\n    }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\r\n     * Creates a new empty series.  By default, items added to the series will\r\n     * be sorted into ascending order by x-value, and duplicate x-values will\r\n     * be allowed (these defaults can be modified with another constructor.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6428
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.compareTo#212",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another TimeSeriesDataPair object\n        // -------------------------------------------------------\n        if (o1 instanceof XYDataItem) {\n            XYDataItem dataItem = (XYDataItem) o1;\n            double compare = this.x.doubleValue()\n                             - dataItem.getX().doubleValue();\n            if (compare > 0.0) {\n                result = 1;\n            }\n            else {\n                if (compare < 0.0) {\n                    result = -1;\n                }\n                else {\n                    result = 0;\n                }\n            }\n        }\n\n        // CASE 2 : Comparing to a general object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 212,
        "end_line": 244,
        "comment": "\r\n     * Returns an integer indicating the order of this object relative to\r\n     * another object.\r\n     * <P>\r\n     * For the order we consider only the x-value:\r\n     * negative == \"less-than\", zero == \"equal\", positive == \"greater-than\".\r\n     *\r\n     * @param o1  the object being compared to.\r\n     *\r\n     * @return An integer indicating the order of this data pair object\r\n     *      relative to another object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6428
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYPlot.getRenderer#1575",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRenderer()",
        "snippet": "    public XYItemRenderer getRenderer() {\n        return getRenderer(0);\n    }\n",
        "begin_line": 1575,
        "end_line": 1577,
        "comment": "\r\n     * Returns the renderer for the primary dataset.\r\n     *\r\n     * @return The item renderer (possibly <code>null</code>).\r\n     *\r\n     * @see #setRenderer(XYItemRenderer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6383
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYSeriesCollection.getSeries#252",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.getSeries(int)",
        "snippet": "    public XYSeries getSeries(int series) {\n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\"Series index out of bounds\");\n        }\n        return (XYSeries) this.data.get(series);\n    }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "\r\n     * Returns a series from the collection.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The series.\r\n     *\r\n     * @throws IllegalArgumentException if <code>series</code> is not in the\r\n     *     range <code>0</code> to <code>getSeriesCount() - 1</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6287
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeriesCollection.XYSeriesCollection#113",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.XYSeriesCollection(org.jfree.data.xy.XYSeries)",
        "snippet": "    public XYSeriesCollection(XYSeries series) {\n        this.data = new java.util.ArrayList();\n        this.intervalDelegate = new IntervalXYDelegate(this, false);\n        addChangeListener(this.intervalDelegate);\n        if (series != null) {\n            this.data.add(series);\n            series.addChangeListener(this);\n        }\n        setSelectionState(this);\n    }\n",
        "begin_line": 113,
        "end_line": 122,
        "comment": "\r\n     * Constructs a dataset and populates it with a single series.\r\n     *\r\n     * @param series  the series (<code>null</code> ignored).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6127
        },
        "num_failing_tests": 20
    },
    {
        "name": "AbstractXYDataset.setSelectionState#126",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/AbstractXYDataset.java",
        "class_name": "org.jfree.data.xy.AbstractXYDataset",
        "signature": "org.jfree.data.xy.AbstractXYDataset.setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)",
        "snippet": "    public void setSelectionState(XYDatasetSelectionState state) {\n        this.selectionState = state;\n        fireDatasetChanged();\n    }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "\r\n     * Sets the selection state for this dataset.\r\n     *\r\n     * @param state  the selection state (<code>null</code> permitted).\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6037
        },
        "num_failing_tests": 21
    },
    {
        "name": "ChartFactory.createScatterPlot#1478",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createScatterPlot(String title, String xAxisLabel,\n            String yAxisLabel, XYDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        yAxis.setAutoRangeIncludesZero(false);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n        XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);\n        renderer.setBaseToolTipGenerator(toolTipGenerator);\n        renderer.setBaseURLGenerator(urlGenerator);\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n",
        "begin_line": 1478,
        "end_line": 1512,
        "comment": "\r\n     * Creates a scatter plot with default settings.  The chart object\r\n     * returned by this method uses an {@link XYPlot} instance as the plot,\r\n     * with a {@link NumberAxis} for the domain axis, a  {@link NumberAxis}\r\n     * as the range axis, and an {@link XYLineAndShapeRenderer} as the\r\n     * renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param xAxisLabel  a label for the X-axis (<code>null</code> permitted).\r\n     * @param yAxisLabel  a label for the Y-axis (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical)\r\n     *                     (<code>null</code> NOT permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A scatter plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.603
        },
        "num_failing_tests": 8
    },
    {
        "name": "XYSeries.minIgnoreNaN#698",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.minIgnoreNaN(double, double)",
        "snippet": "    private double minIgnoreNaN(double a, double b) {\n        if (Double.isNaN(a)) {\n            return b;\n        }\n        else {\n            if (Double.isNaN(b)) {\n                return a;\n            }\n            else {\n                return Math.min(a, b);\n            }\n        }\n    }\n",
        "begin_line": 698,
        "end_line": 710,
        "comment": "\r\n     * A function to find the minimum of two values, but ignoring any\r\n     * Double.NaN values.\r\n     *\r\n     * @param a  the first value.\r\n     * @param b  the second value.\r\n     *\r\n     * @return The minimum of the two values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5971
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.maxIgnoreNaN#721",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.maxIgnoreNaN(double, double)",
        "snippet": "    private double maxIgnoreNaN(double a, double b) {\n        if (Double.isNaN(a)) {\n            return b;\n        }\n        else {\n            if (Double.isNaN(b)) {\n                return a;\n            }\n            else {\n                return Math.max(a, b);\n            }\n        }\n    }\n",
        "begin_line": 721,
        "end_line": 733,
        "comment": "\r\n     * A function to find the maximum of two values, but ignoring any\r\n     * Double.NaN values.\r\n     *\r\n     * @param a  the first value.\r\n     * @param b  the second value.\r\n     *\r\n     * @return The maximum of the two values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5971
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeriesCollection.getSeriesCount#212",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.getSeriesCount()",
        "snippet": "    public int getSeriesCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "\r\n     * Returns the number of series in the collection.\r\n     *\r\n     * @return The series count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5913
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.add#503",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.add(org.jfree.data.xy.XYDataItem, boolean)",
        "snippet": "    public void add(XYDataItem item, boolean notify) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n        item = (XYDataItem) item.clone();\n        if (this.autoSort) {\n            int index = Collections.binarySearch(this.data, item);\n            if (index < 0) {\n                this.data.add(-index - 1, item);\n            }\n            else {\n                if (this.allowDuplicateXValues) {\n                    // need to make sure we are adding *after* any duplicates\n                    int size = this.data.size();\n                    while (index < size && item.compareTo(\n                            this.data.get(index)) == 0) {\n                        index++;\n                    }\n                    if (index < this.data.size()) {\n                        this.data.add(index, item);\n                    }\n                    else {\n                        this.data.add(item);\n                    }\n                }\n                else {\n                    throw new SeriesException(\"X-value already exists.\");\n                }\n            }\n        }\n        else {\n            if (!this.allowDuplicateXValues) {\n                // can't allow duplicate values, so we need to check whether\n                // there is an item with the given x-value already\n                int index = indexOf(item.getX());\n                if (index >= 0) {\n                    throw new SeriesException(\"X-value already exists.\");\n                }\n            }\n            this.data.add(item);\n        }\n        updateBoundsForAddedItem(item);\n        if (getItemCount() > this.maximumItemCount) {\n            XYDataItem removed = (XYDataItem) this.data.remove(0);\n            updateBoundsForRemovedItem(removed);\n        }\n        if (notify) {\n            fireSeriesChanged();\n        }\n    }\n",
        "begin_line": 503,
        "end_line": 552,
        "comment": "\r\n     * Adds a data item to the series and, if requested, sends a\r\n     * {@link SeriesChangeEvent} to all registered listeners.\r\n     *\r\n     * @param item  the (x, y) item (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether or not a\r\n     *                {@link SeriesChangeEvent} is sent to all registered\r\n     *                listeners.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5913
        },
        "num_failing_tests": 20
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        this(source, null);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#80",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object, org.jfree.data.general.SeriesChangeInfo)",
        "snippet": "    public SeriesChangeEvent(Object source, SeriesChangeInfo summary) {\n        super(source);\n        this.summary = summary;\n    }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\r\n     * Constructs a new change event.\r\n     *\r\n     * @param source  the event source.\r\n     * @param summary  a summary of the change (<code>null</code> permitted).\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "Series.Series#101",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\r\n     * Creates a new series with the specified key.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "Series.Series#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;\n    }\n",
        "begin_line": 111,
        "end_line": 120,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "Series.addChangeListener#294",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.addChangeListener(org.jfree.data.general.SeriesChangeListener)",
        "snippet": "    public void addChangeListener(SeriesChangeListener listener) {\n        this.listeners.add(SeriesChangeListener.class, listener);\n    }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "\r\n     * Registers an object with this series, to receive notification whenever\r\n     * the series changes.\r\n     * <P>\r\n     * Objects being registered must implement the {@link SeriesChangeListener}\r\n     * interface.\r\n     *\r\n     * @param listener  the listener to register.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "Series.fireSeriesChanged#312",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 312,
        "end_line": 316,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "Series.notifyListeners#324",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 324,
        "end_line": 334,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5597
        },
        "num_failing_tests": 21
    },
    {
        "name": "XYSeries.updateBoundsForAddedItem#247",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem)",
        "snippet": "    private void updateBoundsForAddedItem(XYDataItem item) {\n        double x = item.getXValue();\n        this.minX = minIgnoreNaN(this.minX, x);\n        this.maxX = maxIgnoreNaN(this.maxX, x);\n        if (item.getY() != null) {\n            double y = item.getYValue();\n            this.minY = minIgnoreNaN(this.minY, y);\n            this.maxY = maxIgnoreNaN(this.maxY, y);\n        }\n    }\n",
        "begin_line": 247,
        "end_line": 256,
        "comment": "\r\n     * Updates the cached values for the minimum and maximum data values.\r\n     *\r\n     * @param item  the item added (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.getItemCount#343",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 343,
        "end_line": 345,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @see #getItems()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.add#411",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.add(double, double)",
        "snippet": "    public void add(double x, double y) {\n        add(new Double(x), new Double(y), true);\n    }\n",
        "begin_line": 411,
        "end_line": 413,
        "comment": "\r\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param x  the x value.\r\n     * @param y  the y value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.add#488",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.add(java.lang.Number, java.lang.Number, boolean)",
        "snippet": "    public void add(Number x, Number y, boolean notify) {\n        // delegate argument checking to XYDataItem...\n        XYDataItem item = new XYDataItem(x, y);\n        add(item, notify);\n    }\n",
        "begin_line": 488,
        "end_line": 492,
        "comment": "\r\n     * Adds new data to the series and, if requested, sends a\r\n     * {@link SeriesChangeEvent} to all registered listeners.\r\n     * <P>\r\n     * Throws an exception if the x-value is a duplicate AND the\r\n     * allowDuplicateXValues flag is false.\r\n     *\r\n     * @param x  the x-value (<code>null</code> not permitted).\r\n     * @param y  the y-value (<code>null</code> permitted).\r\n     * @param notify  a flag the controls whether or not a\r\n     *                {@link SeriesChangeEvent} is sent to all registered\r\n     *                listeners.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.XYDataItem#83",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.XYDataItem(java.lang.Number, java.lang.Number)",
        "snippet": "    public XYDataItem(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n        this.x = x;\n        this.y = y;\n        this.selected = false;\n    }\n",
        "begin_line": 83,
        "end_line": 90,
        "comment": "\r\n     * Constructs a new data item.\r\n     *\r\n     * @param x  the x-value (<code>null</code> NOT permitted).\r\n     * @param y  the y-value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.getX#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.getX()",
        "snippet": "    public Number getX() {\n        return this.x;\n    }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\r\n     * Returns the x-value.\r\n     *\r\n     * @return The x-value (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.getXValue#121",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.getXValue()",
        "snippet": "    public double getXValue() {\n        // this.x is not allowed to be null...\n        return this.x.doubleValue();\n    }\n",
        "begin_line": 121,
        "end_line": 124,
        "comment": "\r\n     * Returns the x-value as a double primitive.\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @see #getX()\r\n     * @see #getYValue()\r\n     *\r\n     * @since 1.0.9\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.getY#131",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.getY()",
        "snippet": "    public Number getY() {\n        return this.y;\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\r\n     * Returns the y-value.\r\n     *\r\n     * @return The y-value (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.getYValue#145",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.getYValue()",
        "snippet": "    public double getYValue() {\n        double result = Double.NaN;\n        if (this.y != null) {\n            result = this.y.doubleValue();\n        }\n        return result;\n    }\n",
        "begin_line": 145,
        "end_line": 151,
        "comment": "\r\n     * Returns the y-value as a double primitive.\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @see #getY()\r\n     * @see #getXValue()\r\n     *\r\n     * @since 1.0.9\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYDataItem.clone#251",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.clone()",
        "snippet": "    public Object clone() {\n        Object clone = null;\n        try {\n            clone = super.clone();\n        }\n        catch (CloneNotSupportedException e) { // won't get here...\n            e.printStackTrace();\n        }\n        return clone;\n    }\n",
        "begin_line": 251,
        "end_line": 260,
        "comment": "\r\n     * Returns a clone of this object.\r\n     *\r\n     * @return A clone.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5551
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYSeries.XYSeries#168",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.XYSeries(java.lang.Comparable, boolean, boolean)",
        "snippet": "    public XYSeries(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues) {\n        super(key);\n        this.data = new java.util.ArrayList();\n        this.autoSort = autoSort;\n        this.allowDuplicateXValues = allowDuplicateXValues;\n        this.minX = Double.NaN;\n        this.maxX = Double.NaN;\n        this.minY = Double.NaN;\n        this.maxY = Double.NaN;\n    }\n",
        "begin_line": 168,
        "end_line": 178,
        "comment": "\r\n     * Constructs a new xy-series that contains no data.  You can specify\r\n     * whether or not duplicate x-values are allowed for the series.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     * @param autoSort  a flag that controls whether or not the items in the\r\n     *                  series are sorted.\r\n     * @param allowDuplicateXValues  a flag that controls whether duplicate\r\n     *                               x-values are allowed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5505
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYPlot.getRenderer#1588",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRenderer(int)",
        "snippet": "    public XYItemRenderer getRenderer(int index) {\n        XYItemRenderer result = null;\n        if (this.renderers.size() > index) {\n            result = (XYItemRenderer) this.renderers.get(index);\n        }\n        return result;\n\n    }\n",
        "begin_line": 1588,
        "end_line": 1595,
        "comment": "\r\n     * Returns the renderer for a dataset, or <code>null</code>.\r\n     *\r\n     * @param index  the renderer index.\r\n     *\r\n     * @return The renderer (possibly <code>null</code>).\r\n     *\r\n     * @see #setRenderer(int, XYItemRenderer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5311
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.setAutoRangeIncludesZero#259",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.setAutoRangeIncludesZero(boolean)",
        "snippet": "    public void setAutoRangeIncludesZero(boolean flag) {\n        if (this.autoRangeIncludesZero != flag) {\n            this.autoRangeIncludesZero = flag;\n            if (isAutoRange()) {\n                autoAdjustRange();\n            }\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 259,
        "end_line": 267,
        "comment": "\r\n     * Sets the flag that indicates whether or not the axis range, if\r\n     * automatically calculated, is forced to include zero.\r\n     * <p>\r\n     * If the flag is changed to <code>true</code>, the axis range is\r\n     * recalculated.\r\n     * <p>\r\n     * Any change to the flag will trigger an {@link AxisChangeEvent}.\r\n     *\r\n     * @param flag  the new value of the flag.\r\n     *\r\n     * @see #getAutoRangeIncludesZero()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.523
        },
        "num_failing_tests": 19
    },
    {
        "name": "IntervalXYDelegate.datasetChanged#383",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent e) {\n        // TODO: by coding the event with some information about what changed\n        // in the dataset, we could make the recalculation of the interval\n        // more efficient in some cases (for instance, if the change is\n        // just an update to a y-value, then the x-interval doesn't need\n        // updating)...\n        if (this.autoWidth) {\n            this.autoIntervalWidth = recalculateInterval();\n        }\n    }\n",
        "begin_line": 383,
        "end_line": 392,
        "comment": "\r\n     * Handles events from the dataset by recalculating the interval if\r\n     * necessary.\r\n     *\r\n     * @param e  the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5209
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYPlot.XYPlot#616",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.XYPlot(org.jfree.data.xy.XYDataset, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.xy.XYItemRenderer)",
        "snippet": "    public XYPlot(XYDataset dataset,\n                  ValueAxis domainAxis,\n                  ValueAxis rangeAxis,\n                  XYItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n        this.weight = 1;  // only relevant when this is a subplot\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        // allocate storage for datasets, axes and renderers (all optional)\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        this.datasets = new ObjectList();\n        this.renderers = new ObjectList();\n\n        this.datasetToDomainAxesMap = new TreeMap();\n        this.datasetToRangeAxesMap = new TreeMap();\n\n        this.annotations = new java.util.ArrayList();\n\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);\n\n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = true;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.domainMinorGridlinesVisible = false;\n        this.domainMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainMinorGridlinePaint = Color.white;\n\n        this.domainZeroBaselineVisible = false;\n        this.domainZeroBaselinePaint = Color.black;\n        this.domainZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.rangeGridlinesVisible = true;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeMinorGridlinesVisible = false;\n        this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeMinorGridlinePaint = Color.white;\n\n        this.rangeZeroBaselineVisible = false;\n        this.rangeZeroBaselinePaint = Color.black;\n        this.rangeZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.domainCrosshairVisible = false;\n        this.domainCrosshairValue = 0.0;\n        this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n        this.rangeCrosshairVisible = false;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n    }\n",
        "begin_line": 616,
        "end_line": 710,
        "comment": "\r\n     * Creates a new plot with the specified dataset, axes and renderer.  Any\r\n     * of the arguments can be <code>null</code>, but in that case you should\r\n     * take care to specify the value before using the plot (otherwise a\r\n     * <code>NullPointerException</code> may be thrown).\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.518
        },
        "num_failing_tests": 22
    },
    {
        "name": "IntervalXYDelegate.IntervalXYDelegate#132",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.IntervalXYDelegate(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    public IntervalXYDelegate(XYDataset dataset, boolean autoWidth) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        this.dataset = dataset;\n        this.autoWidth = autoWidth;\n        this.intervalPositionFactor = 0.5;\n        this.autoIntervalWidth = Double.POSITIVE_INFINITY;\n        this.fixedIntervalWidth = 1.0;\n    }\n",
        "begin_line": 132,
        "end_line": 141,
        "comment": "\r\n     * Creates a new delegate for the specified dataset.\r\n     *\r\n     * @param dataset  the underlying dataset (<code>null</code> not permitted).\r\n     * @param autoWidth  a flag that controls whether the interval width is\r\n     *                   calculated automatically.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5171
        },
        "num_failing_tests": 20
    },
    {
        "name": "XYPlot.configureDomainAxes#968",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 968,
        "end_line": 975,
        "comment": "\r\n     * Configures the domain axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.getDatasetsMappedToDomainAxis#4322",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDatasetsMappedToDomainAxis(java.lang.Integer)",
        "snippet": "    private List getDatasetsMappedToDomainAxis(Integer axisIndex) {\n        if (axisIndex == null) {\n            throw new IllegalArgumentException(\"Null 'axisIndex' argument.\");\n        }\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            List mappedAxes = (List) this.datasetToDomainAxesMap.get(\n                    new Integer(i));\n            if (mappedAxes == null) {\n                if (axisIndex.equals(ZERO)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n            else {\n                if (mappedAxes.contains(axisIndex)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 4322,
        "end_line": 4342,
        "comment": "\r\n     * A utility method that returns a list of datasets that are mapped to a\r\n     * particular axis.\r\n     *\r\n     * @param axisIndex  the axis index (<code>null</code> not permitted).\r\n     *\r\n     * @return A list of datasets.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.getDomainAxisIndex#4383",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public int getDomainAxisIndex(ValueAxis axis) {\n        int result = this.domainAxes.indexOf(axis);\n        if (result < 0) {\n            // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot p = (XYPlot) parent;\n                result = p.getDomainAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 4383,
        "end_line": 4394,
        "comment": "\r\n     * Returns the index of the given domain axis.\r\n     *\r\n     * @param axis  the axis.\r\n     *\r\n     * @return The axis index.\r\n     *\r\n     * @see #getRangeAxisIndex(ValueAxis)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4972
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.getRangeAxisIndex#4405",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public int getRangeAxisIndex(ValueAxis axis) {\n        int result = this.rangeAxes.indexOf(axis);\n        if (result < 0) {\n            // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot p = (XYPlot) parent;\n                result = p.getRangeAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 4405,
        "end_line": 4416,
        "comment": "\r\n     * Returns the index of the given range axis.\r\n     *\r\n     * @param axis  the axis.\r\n     *\r\n     * @return The axis index.\r\n     *\r\n     * @see #getDomainAxisIndex(ValueAxis)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4972
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractDataset.notifyListeners#180",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 180,
        "end_line": 190,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     *\r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4924
        },
        "num_failing_tests": 21
    },
    {
        "name": "AbstractSeriesDataset.AbstractSeriesDataset#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
        "class_name": "org.jfree.data.general.AbstractSeriesDataset",
        "signature": "org.jfree.data.general.AbstractSeriesDataset.AbstractSeriesDataset()",
        "snippet": "    protected AbstractSeriesDataset() {\n        super();\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.489
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.indexOf#160",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.indexOf(java.lang.Object)",
        "snippet": "    protected int indexOf(Object object) {\n        for (int index = 0; index < this.size; index++) {\n            if (this.objects[index] == object) {\n                return (index);\n            }\n        }\n        return -1;\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not in\n     * the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4762
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.configureRangeAxes#1268",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1268,
        "end_line": 1275,
        "comment": "\r\n     * Configures the range axes.\r\n     *\r\n     * @see #configureDomainAxes()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.getDataset#1381",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDataset(int)",
        "snippet": "    public XYDataset getDataset(int index) {\n        XYDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (XYDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1381,
        "end_line": 1387,
        "comment": "\r\n     * Returns a dataset.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     *\r\n     * @see #setDataset(int, XYDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.mapDatasetToDomainAxis#1462",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        List axisIndices = new java.util.ArrayList(1);\n        axisIndices.add(new Integer(axisIndex));\n        mapDatasetToDomainAxes(index, axisIndices);\n    }\n",
        "begin_line": 1462,
        "end_line": 1466,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.  All data will be plotted\r\n     * against axis zero by default, no mapping is required for this case.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index.\r\n     *\r\n     * @see #mapDatasetToRangeAxis(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.mapDatasetToDomainAxes#1478",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxes(int, java.util.List)",
        "snippet": "    public void mapDatasetToDomainAxes(int index, List axisIndices) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires 'index' >= 0.\");\n        }\n        checkAxisIndices(axisIndices);\n        Integer key = new Integer(index);\n        this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));\n    }\n",
        "begin_line": 1478,
        "end_line": 1487,
        "comment": "\r\n     * Maps the specified dataset to the axes in the list.  Note that the\r\n     * conversion of data values into Java2D space is always performed using\r\n     * the first axis in the list.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\r\n     *\r\n     * @since 1.0.12\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.checkAxisIndices#1532",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.checkAxisIndices(java.util.List)",
        "snippet": "    private void checkAxisIndices(List indices) {\n        // axisIndices can be:\n        // 1.  null;\n        // 2.  non-empty, containing only Integer objects that are unique.\n        if (indices == null) {\n            return;  // OK\n        }\n        int count = indices.size();\n        if (count == 0) {\n            throw new IllegalArgumentException(\"Empty list not permitted.\");\n        }\n        HashSet set = new HashSet();\n        for (int i = 0; i < count; i++) {\n            Object item = indices.get(i);\n            if (!(item instanceof Integer)) {\n                throw new IllegalArgumentException(\n                        \"Indices must be Integer instances.\");\n            }\n            if (set.contains(item)) {\n                throw new IllegalArgumentException(\"Indices must be unique.\");\n            }\n            set.add(item);\n        }\n    }\n",
        "begin_line": 1532,
        "end_line": 1555,
        "comment": "\r\n     * This method is used to perform argument checking on the list of\r\n     * axis indices passed to mapDatasetToDomainAxes() and\r\n     * mapDatasetToRangeAxes().\r\n     *\r\n     * @param indices  the list of indices (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYPlot.datasetChanged#4528",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n        configureDomainAxes();\n        configureRangeAxes();\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n    }\n",
        "begin_line": 4528,
        "end_line": 4539,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The axis ranges are updated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "SeriesRenderingOrder.SeriesRenderingOrder#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
        "signature": "org.jfree.chart.plot.SeriesRenderingOrder.SeriesRenderingOrder(java.lang.String)",
        "snippet": "    private SeriesRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4534
        },
        "num_failing_tests": 22
    },
    {
        "name": "StandardChartTheme.StandardChartTheme#303",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.StandardChartTheme(java.lang.String)",
        "snippet": "    public StandardChartTheme(String name) {\n        if (name == null) {\n            throw new IllegalArgumentException(\"Null 'name' argument.\");\n        }\n        this.name = name;\n        this.extraLargeFont = new Font(\"Tahoma\", Font.BOLD, 20);\n        this.largeFont = new Font(\"Tahoma\", Font.BOLD, 14);\n        this.regularFont = new Font(\"Tahoma\", Font.PLAIN, 12);\n        this.smallFont = new Font(\"Tahoma\", Font.PLAIN, 10);\n        this.titlePaint = Color.black;\n        this.subtitlePaint = Color.black;\n        this.legendBackgroundPaint = Color.white;\n        this.legendItemPaint = Color.darkGray;\n        this.chartBackgroundPaint = Color.white;\n        this.drawingSupplier = new DefaultDrawingSupplier();\n        this.plotBackgroundPaint = Color.lightGray;\n        this.plotOutlinePaint = Color.black;\n        this.labelLinkPaint = Color.black;\n        this.labelLinkStyle = PieLabelLinkStyle.CUBIC_CURVE;\n        this.axisOffset = new RectangleInsets(4, 4, 4, 4);\n        this.domainGridlinePaint = Color.white;\n        this.rangeGridlinePaint = Color.white;\n        this.baselinePaint = Color.black;\n        this.crosshairPaint = Color.blue;\n        this.axisLabelPaint = Color.darkGray;\n        this.tickLabelPaint = Color.darkGray;\n        this.barPainter = new GradientBarPainter();\n        this.xyBarPainter = new GradientXYBarPainter();\n        this.shadowVisible = true;\n        this.shadowPaint = Color.gray;\n        this.itemLabelPaint = Color.black;\n        this.thermometerPaint = Color.white;\n        this.wallPaint = BarRenderer3D.DEFAULT_WALL_PAINT;\n        this.errorIndicatorPaint = Color.black;\n    }\n",
        "begin_line": 303,
        "end_line": 337,
        "comment": "\r\n     * Creates a new default instance.\r\n     *\r\n     * @param name  the name of the theme (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartFactory.createTimeSeriesChart#1880",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createTimeSeriesChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createTimeSeriesChart(String title,\n                                                   String timeAxisLabel,\n                                                   String valueAxisLabel,\n                                                   XYDataset dataset,\n                                                   boolean legend,\n                                                   boolean tooltips,\n                                                   boolean urls) {\n\n        ValueAxis timeAxis = new DateAxis(timeAxisLabel);\n        timeAxis.setLowerMargin(0.02);  // reduce the default margins\n        timeAxis.setUpperMargin(0.02);\n        NumberAxis valueAxis = new NumberAxis(valueAxisLabel);\n        valueAxis.setAutoRangeIncludesZero(false);  // override default\n        XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator\n                = StandardXYToolTipGenerator.getTimeSeriesInstance();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n\n        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer(true,\n                false);\n        renderer.setBaseToolTipGenerator(toolTipGenerator);\n        renderer.setBaseURLGenerator(urlGenerator);\n        plot.setRenderer(renderer);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n",
        "begin_line": 1880,
        "end_line": 1917,
        "comment": "\r\n     * Creates and returns a time series chart.  A time series chart is an\r\n     * {@link XYPlot} with a {@link DateAxis} for the x-axis and a\r\n     * {@link NumberAxis} for the y-axis.  The default renderer is an\r\n     * {@link XYLineAndShapeRenderer}.\r\n     * <P>\r\n     * A convenient dataset to use with this chart is a\r\n     * {@link org.jfree.data.time.TimeSeriesCollection}.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param timeAxisLabel  a label for the time axis (<code>null</code>\r\n     *                       permitted).\r\n     * @param valueAxisLabel  a label for the value axis (<code>null</code>\r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A time series chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 4
    },
    {
        "name": "GradientBarPainter.GradientBarPainter#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/GradientBarPainter.java",
        "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
        "signature": "org.jfree.chart.renderer.category.GradientBarPainter.GradientBarPainter()",
        "snippet": "    public GradientBarPainter() {\n        this(0.10, 0.20, 0.80);\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4179
        },
        "num_failing_tests": 22
    },
    {
        "name": "GradientBarPainter.GradientBarPainter#88",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/GradientBarPainter.java",
        "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
        "signature": "org.jfree.chart.renderer.category.GradientBarPainter.GradientBarPainter(double, double, double)",
        "snippet": "    public GradientBarPainter(double g1, double g2, double g3) {\n        this.g1 = g1;\n        this.g2 = g2;\n        this.g3 = g3;\n    }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\r\n     * Creates a new instance.\r\n     *\r\n     * @param g1\r\n     * @param g2\r\n     * @param g3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4179
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisChangeEvent.AxisChangeEvent#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/AxisChangeEvent.java",
        "class_name": "org.jfree.chart.event.AxisChangeEvent",
        "signature": "org.jfree.chart.event.AxisChangeEvent.AxisChangeEvent(org.jfree.chart.axis.Axis)",
        "snippet": "    public AxisChangeEvent(Axis axis) {\n        super(axis);\n        this.axis = axis;\n    }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\r\n     * Creates a new AxisChangeEvent.\r\n     *\r\n     * @param axis  the axis that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4179
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.notifyListeners#1221",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.notifyListeners(org.jfree.chart.event.AxisChangeEvent)",
        "snippet": "    protected void notifyListeners(AxisChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == AxisChangeListener.class) {\n                ((AxisChangeListener) listeners[i + 1]).axisChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 1221,
        "end_line": 1228,
        "comment": "\r\n     * Notifies all registered listeners that the axis has changed.\r\n     * The AxisChangeEvent provides information about the change.\r\n     *\r\n     * @param event  information about the change to the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4179
        },
        "num_failing_tests": 22
    },
    {
        "name": "DateRange.DateRange#71",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "class_name": "org.jfree.data.time.DateRange",
        "signature": "org.jfree.data.time.DateRange.DateRange()",
        "snippet": "    public DateRange() {\n        this(new Date(0), new Date(1));\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateRange.DateRange#81",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "class_name": "org.jfree.data.time.DateRange",
        "signature": "org.jfree.data.time.DateRange.DateRange(java.util.Date, java.util.Date)",
        "snippet": "    public DateRange(Date lower, Date upper) {\n        super(lower.getTime(), upper.getTime());\n        this.lowerDate = lower.getTime();\n        this.upperDate = upper.getTime();\n    }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\r\n     * Constructs a new range.\r\n     *\r\n     * @param lower  the lower bound (<code>null</code> not permitted).\r\n     * @param upper  the upper bound (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickUnitType.DateTickUnitType#97",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnitType.java",
        "class_name": "org.jfree.chart.axis.DateTickUnitType",
        "signature": "org.jfree.chart.axis.DateTickUnitType.DateTickUnitType(java.lang.String, int)",
        "snippet": "    private DateTickUnitType(String name, int calendarField) {\n        this.name = name;\n        this.calendarField = calendarField;\n    }\n",
        "begin_line": 97,
        "end_line": 100,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     * @param calendarField  the calendar field.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickUnitType.toString#116",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnitType.java",
        "class_name": "org.jfree.chart.axis.DateTickUnitType",
        "signature": "org.jfree.chart.axis.DateTickUnitType.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickUnitType.equals#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnitType.java",
        "class_name": "org.jfree.chart.axis.DateTickUnitType",
        "signature": "org.jfree.chart.axis.DateTickUnitType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof DateTickUnitType)) {\n            return false;\n        }\n        DateTickUnitType t = (DateTickUnitType) obj;\n        if (!this.name.equals(t.toString())) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 128,
        "end_line": 140,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified\r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param obj  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickUnit.DateTickUnit#120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(org.jfree.chart.axis.DateTickUnitType, int, java.text.DateFormat)",
        "snippet": "    public DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateFormat formatter) {\n        this(unitType, multiple, unitType, multiple, formatter);\n    }\n",
        "begin_line": 120,
        "end_line": 123,
        "comment": "\r\n     * Creates a new date tick unit.\r\n     *\r\n     * @param unitType  the unit type (<code>null</code> not permitted).\r\n     * @param multiple  the multiple (of the unit type, must be > 0).\r\n     * @param formatter  the date formatter (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickUnit.DateTickUnit#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(org.jfree.chart.axis.DateTickUnitType, int, org.jfree.chart.axis.DateTickUnitType, int, java.text.DateFormat)",
        "snippet": "    public DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateTickUnitType rollUnitType, int rollMultiple,\n            DateFormat formatter) {\n        super(DateTickUnit.getMillisecondCount(unitType, multiple));\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        if (multiple <= 0) {\n            throw new IllegalArgumentException(\"Requires 'multiple' > 0.\");\n        }\n        if (rollMultiple <= 0) {\n            throw new IllegalArgumentException(\"Requires 'rollMultiple' > 0.\");\n        }\n        this.unitType = unitType;\n        this.count = multiple;\n        this.rollUnitType = rollUnitType;\n        this.rollCount = rollMultiple;\n        this.formatter = formatter;\n    }\n",
        "begin_line": 136,
        "end_line": 154,
        "comment": "\r\n     * Creates a new unit.\r\n     *\r\n     * @param unitType  the unit.\r\n     * @param multiple  the multiple.\r\n     * @param rollUnitType  the roll unit.\r\n     * @param rollMultiple  the roll multiple.\r\n     * @param formatter  the date formatter (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickUnit.getMillisecondCount#301",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.getMillisecondCount(org.jfree.chart.axis.DateTickUnitType, int)",
        "snippet": "    private static long getMillisecondCount(DateTickUnitType unit, int count) {\n\n        if (unit.equals(DateTickUnitType.YEAR)) {\n            return (365L * 24L * 60L * 60L * 1000L) * count;\n        }\n        else if (unit.equals(DateTickUnitType.MONTH)) {\n            return (31L * 24L * 60L * 60L * 1000L) * count;\n        }\n        else if (unit.equals(DateTickUnitType.DAY)) {\n            return (24L * 60L * 60L * 1000L) * count;\n        }\n        else if (unit.equals(DateTickUnitType.HOUR)) {\n            return (60L * 60L * 1000L) * count;\n        }\n        else if (unit.equals(DateTickUnitType.MINUTE)) {\n            return (60L * 1000L) * count;\n        }\n        else if (unit.equals(DateTickUnitType.SECOND)) {\n            return 1000L * count;\n        }\n        else if (unit.equals(DateTickUnitType.MILLISECOND)) {\n            return count;\n        }\n        else {\n            throw new IllegalArgumentException(\"The 'unit' argument has a \" +\n                    \"value that is not recognised.\");\n        }\n\n    }\n",
        "begin_line": 301,
        "end_line": 329,
        "comment": "\r\n     * Returns the (approximate) number of milliseconds for the given unit and\r\n     * unit count.\r\n     * <P>\r\n     * This value is an approximation some of the time (e.g. months are\r\n     * assumed to have 31 days) but this shouldn't matter.\r\n     *\r\n     * @param unit  the unit.\r\n     * @param count  the unit count.\r\n     *\r\n     * @return The number of milliseconds.\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateTickMarkPosition.DateTickMarkPosition#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.DateTickMarkPosition(java.lang.String)",
        "snippet": "    private DateTickMarkPosition(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.DateAxis#348",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String)",
        "snippet": "    public DateAxis(String label) {\n        this(label, TimeZone.getDefault());\n    }\n",
        "begin_line": 348,
        "end_line": 350,
        "comment": "\r\n     * Creates a date axis with the specified label.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.DateAxis#365",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String, java.util.TimeZone)",
        "snippet": "    public DateAxis(String label, TimeZone zone) {\n        this(label, zone, Locale.getDefault());\n    }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "\r\n     * Creates a date axis. A timeline is specified for the axis. This allows\r\n     * special transformations to occur between a domain of values and the\r\n     * values included in the axis.\r\n     *\r\n     * @see org.jfree.chart.axis.SegmentedTimeline\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param zone  the time zone.\r\n     *\r\n     * @deprecated From 1.0.11 onwards, use {@link #DateAxis(String, TimeZone,\r\n     *         Locale)} instead, to explicitly set the locale.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.DateAxis#382",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public DateAxis(String label, TimeZone zone, Locale locale) {\n        super(label, DateAxis.createStandardDateTickUnits(zone, locale));\n        setTickUnit(DateAxis.DEFAULT_DATE_TICK_UNIT, false, false);\n        setAutoRangeMinimumSize(\n                DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS);\n        setRange(DEFAULT_DATE_RANGE, false, false);\n        this.dateFormatOverride = null;\n        this.timeZone = zone;\n        this.locale = locale;\n        this.timeline = DEFAULT_TIMELINE;\n    }\n",
        "begin_line": 382,
        "end_line": 392,
        "comment": "\r\n     * Creates a date axis. A timeline is specified for the axis. This allows\r\n     * special transformations to occur between a domain of values and the\r\n     * values included in the axis.\r\n     *\r\n     * @see org.jfree.chart.axis.SegmentedTimeline\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param zone  the time zone.\r\n     * @param locale  the locale (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.setTickUnit#493",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit, boolean, boolean)",
        "snippet": "    public void setTickUnit(DateTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelection) {\n\n        this.tickUnit = unit;\n        if (turnOffAutoSelection) {\n            setAutoTickUnitSelection(false, false);\n        }\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n",
        "begin_line": 493,
        "end_line": 504,
        "comment": "\r\n     * Sets the tick unit attribute.\r\n     *\r\n     * @param unit  the new tick unit.\r\n     * @param notify  notify registered listeners?\r\n     * @param turnOffAutoSelection  turn off auto selection?\r\n     *\r\n     * @see #getTickUnit()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.setRange#549",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.setRange(org.jfree.data.Range, boolean, boolean)",
        "snippet": "    public void setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"Null 'range' argument.\");\n        }\n        // usually the range will be a DateRange, but if it isn't do a\n        // conversion...\n        if (!(range instanceof DateRange)) {\n            range = new DateRange(range);\n        }\n        super.setRange(range, turnOffAutoRange, notify);\n    }\n",
        "begin_line": 549,
        "end_line": 560,
        "comment": "\r\n     * Sets the range for the axis, if requested, sends an\r\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect,\r\n     * the auto-range flag is set to <code>false</code> (optional).\r\n     *\r\n     * @param range  the range (<code>null</code> not permitted).\r\n     * @param turnOffAutoRange  a flag that controls whether or not the auto\r\n     *                          range is turned off.\r\n     * @param notify  a flag that controls whether or not listeners are\r\n     *                notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.configure#717",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.configure()",
        "snippet": "    public void configure() {\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n    }\n",
        "begin_line": 717,
        "end_line": 721,
        "comment": "\r\n     * Configures the axis to work with the specified plot.  If the axis has\r\n     * auto-scaling, then sets the maximum and minimum values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.createStandardDateTickUnits#1147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static TickUnitSource createStandardDateTickUnits(TimeZone zone,\n    \t\tLocale locale) {\n\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n        \tthrow new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        TickUnits units = new TickUnits();\n\n        // date formatters\n        DateFormat f1 = new SimpleDateFormat(\"HH:mm:ss.SSS\", locale);\n        DateFormat f2 = new SimpleDateFormat(\"HH:mm:ss\", locale);\n        DateFormat f3 = new SimpleDateFormat(\"HH:mm\", locale);\n        DateFormat f4 = new SimpleDateFormat(\"d-MMM, HH:mm\", locale);\n        DateFormat f5 = new SimpleDateFormat(\"d-MMM\", locale);\n        DateFormat f6 = new SimpleDateFormat(\"MMM-yyyy\", locale);\n        DateFormat f7 = new SimpleDateFormat(\"yyyy\", locale);\n\n        f1.setTimeZone(zone);\n        f2.setTimeZone(zone);\n        f3.setTimeZone(zone);\n        f4.setTimeZone(zone);\n        f5.setTimeZone(zone);\n        f6.setTimeZone(zone);\n        f7.setTimeZone(zone);\n\n        // milliseconds\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 1, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 5,\n                DateTickUnitType.MILLISECOND, 1, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 10,\n                DateTickUnitType.MILLISECOND, 1, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 25,\n                DateTickUnitType.MILLISECOND, 5, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 50,\n                DateTickUnitType.MILLISECOND, 10, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 100,\n                DateTickUnitType.MILLISECOND, 10, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 250,\n                DateTickUnitType.MILLISECOND, 10, f1));\n        units.add(new DateTickUnit(DateTickUnitType.MILLISECOND, 500,\n                DateTickUnitType.MILLISECOND, 50, f1));\n\n        // seconds\n        units.add(new DateTickUnit(DateTickUnitType.SECOND, 1,\n                DateTickUnitType.MILLISECOND, 50, f2));\n        units.add(new DateTickUnit(DateTickUnitType.SECOND, 5,\n                DateTickUnitType.SECOND, 1, f2));\n        units.add(new DateTickUnit(DateTickUnitType.SECOND, 10,\n                DateTickUnitType.SECOND, 1, f2));\n        units.add(new DateTickUnit(DateTickUnitType.SECOND, 30,\n                DateTickUnitType.SECOND, 5, f2));\n\n        // minutes\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 1,\n                DateTickUnitType.SECOND, 5, f3));\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 2,\n                DateTickUnitType.SECOND, 10, f3));\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 5,\n                DateTickUnitType.MINUTE, 1, f3));\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 10,\n                DateTickUnitType.MINUTE, 1, f3));\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 15,\n                DateTickUnitType.MINUTE, 5, f3));\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 20,\n                DateTickUnitType.MINUTE, 5, f3));\n        units.add(new DateTickUnit(DateTickUnitType.MINUTE, 30,\n                DateTickUnitType.MINUTE, 5, f3));\n\n        // hours\n        units.add(new DateTickUnit(DateTickUnitType.HOUR, 1,\n                DateTickUnitType.MINUTE, 5, f3));\n        units.add(new DateTickUnit(DateTickUnitType.HOUR, 2,\n                DateTickUnitType.MINUTE, 10, f3));\n        units.add(new DateTickUnit(DateTickUnitType.HOUR, 4,\n                DateTickUnitType.MINUTE, 30, f3));\n        units.add(new DateTickUnit(DateTickUnitType.HOUR, 6,\n                DateTickUnitType.HOUR, 1, f3));\n        units.add(new DateTickUnit(DateTickUnitType.HOUR, 12,\n                DateTickUnitType.HOUR, 1, f4));\n\n        // days\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 1,\n                DateTickUnitType.HOUR, 1, f5));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 2,\n                DateTickUnitType.HOUR, 1, f5));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 7,\n                DateTickUnitType.DAY, 1, f5));\n        units.add(new DateTickUnit(DateTickUnitType.DAY, 15,\n                DateTickUnitType.DAY, 1, f5));\n\n        // months\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 1,\n                DateTickUnitType.DAY, 1, f6));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 2,\n                DateTickUnitType.DAY, 1, f6));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 3,\n                DateTickUnitType.MONTH, 1, f6));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 4,\n                DateTickUnitType.MONTH, 1, f6));\n        units.add(new DateTickUnit(DateTickUnitType.MONTH, 6,\n                DateTickUnitType.MONTH, 1, f6));\n\n        // years\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 1,\n                DateTickUnitType.MONTH, 1, f7));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 2,\n                DateTickUnitType.MONTH, 3, f7));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 5,\n                DateTickUnitType.YEAR, 1, f7));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 10,\n                DateTickUnitType.YEAR, 1, f7));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 25,\n                DateTickUnitType.YEAR, 5, f7));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 50,\n                DateTickUnitType.YEAR, 10, f7));\n        units.add(new DateTickUnit(DateTickUnitType.YEAR, 100,\n                DateTickUnitType.YEAR, 20, f7));\n\n        return units;\n\n    }\n",
        "begin_line": 1147,
        "end_line": 1270,
        "comment": "\r\n     * Returns a collection of standard date tick units.  This collection will\r\n     * be used by default, but you are free to create your own collection if\r\n     * you want to (see the\r\n     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited\r\n     * from the {@link ValueAxis} class).\r\n     *\r\n     * @param zone  the time zone (<code>null</code> not permitted).\r\n     * @param locale  the locale (<code>null</code> not permitted).\r\n     *\r\n     * @return A collection of standard date tick units.\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "DateAxis.autoAdjustRange#1275",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.autoAdjustRange()",
        "snippet": "    protected void autoAdjustRange() {\n\n        Plot plot = getPlot();\n\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                if (this.timeline instanceof SegmentedTimeline) {\n                    //Timeline hasn't method getStartTime()\n                    r = new DateRange((\n                            (SegmentedTimeline) this.timeline).getStartTime(),\n                            ((SegmentedTimeline) this.timeline).getStartTime()\n                            + 1);\n                }\n                else {\n                    r = new DateRange();\n                }\n            }\n\n            long upper = this.timeline.toTimelineValue(\n                    (long) r.getUpperBound());\n            long lower;\n            long fixedAutoRange = (long) getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = upper - fixedAutoRange;\n            }\n            else {\n                lower = this.timeline.toTimelineValue((long) r.getLowerBound());\n                double range = upper - lower;\n                long minRange = (long) getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    long expand = (long) (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n                upper = upper + (long) (range * getUpperMargin());\n                lower = lower - (long) (range * getLowerMargin());\n            }\n\n            upper = this.timeline.toMillisecond(upper);\n            lower = this.timeline.toMillisecond(lower);\n            DateRange dr = new DateRange(new Date(lower), new Date(upper));\n            setRange(dr, false, false);\n        }\n\n    }\n",
        "begin_line": 1275,
        "end_line": 1326,
        "comment": "\r\n     * Rescales the axis to ensure that all data is visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4139
        },
        "num_failing_tests": 7
    },
    {
        "name": "PieLabelLinkStyle.PieLabelLinkStyle#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PieLabelLinkStyle.java",
        "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
        "signature": "org.jfree.chart.plot.PieLabelLinkStyle.PieLabelLinkStyle(java.lang.String)",
        "snippet": "    private PieLabelLinkStyle(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4007
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.setAutoRangeMinimumSize#1008",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize(double)",
        "snippet": "    public void setAutoRangeMinimumSize(double size) {\n        setAutoRangeMinimumSize(size, true);\n    }\n",
        "begin_line": 1008,
        "end_line": 1010,
        "comment": "\r\n     * Sets the auto range minimum size and sends an {@link AxisChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param size  the size.\r\n     *\r\n     * @see #getAutoRangeMinimumSize()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3989
        },
        "num_failing_tests": 7
    },
    {
        "name": "ValueAxis.setAutoRangeMinimumSize#1022",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize(double, boolean)",
        "snippet": "    public void setAutoRangeMinimumSize(double size, boolean notify) {\n        if (size <= 0.0) {\n            throw new IllegalArgumentException(\n                \"NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.\");\n        }\n        if (this.autoRangeMinimumSize != size) {\n            this.autoRangeMinimumSize = size;\n            if (this.autoRange) {\n                autoAdjustRange();\n            }\n            if (notify) {\n                notifyListeners(new AxisChangeEvent(this));\n            }\n        }\n\n    }\n",
        "begin_line": 1022,
        "end_line": 1037,
        "comment": "\r\n     * Sets the minimum size allowed for the axis range when it is\r\n     * automatically calculated.\r\n     * <p>\r\n     * If requested, an {@link AxisChangeEvent} is forwarded to all registered\r\n     * listeners.\r\n     *\r\n     * @param size  the new minimum.\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3989
        },
        "num_failing_tests": 7
    },
    {
        "name": "Range.combine#213",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.combine(org.jfree.data.Range, org.jfree.data.Range)",
        "snippet": "    public static Range combine(Range range1, Range range2) {\n        if (range1 == null) {\n            return range2;\n        }\n        else {\n            if (range2 == null) {\n                return range1;\n            }\n            else {\n                double l = Math.min(range1.getLowerBound(),\n                        range2.getLowerBound());\n                double u = Math.max(range1.getUpperBound(),\n                        range2.getUpperBound());\n                return new Range(l, u);\n            }\n        }\n    }\n",
        "begin_line": 213,
        "end_line": 229,
        "comment": "\r\n     * Creates a new range by combining two existing ranges.\r\n     * <P>\r\n     * Note that:\r\n     * <ul>\r\n     *   <li>either range can be <code>null</code>, in which case the other\r\n     *       range is returned;</li>\r\n     *   <li>if both ranges are <code>null</code> the return value is\r\n     *       <code>null</code>.</li>\r\n     * </ul>\r\n     *\r\n     * @param range1  the first range (<code>null</code> permitted).\r\n     * @param range2  the second range (<code>null</code> permitted).\r\n     *\r\n     * @return A new range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 22
    },
    {
        "name": "GradientXYBarPainter.GradientXYBarPainter#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
        "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
        "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.GradientXYBarPainter()",
        "snippet": "    public GradientXYBarPainter() {\n        this(0.10, 0.20, 0.80);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3869
        },
        "num_failing_tests": 22
    },
    {
        "name": "GradientXYBarPainter.GradientXYBarPainter#87",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
        "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
        "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.GradientXYBarPainter(double, double, double)",
        "snippet": "    public GradientXYBarPainter(double g1, double g2, double g3) {\n        this.g1 = g1;\n        this.g2 = g2;\n        this.g3 = g3;\n    }\n",
        "begin_line": 87,
        "end_line": 91,
        "comment": "\r\n     * Creates a new instance.\r\n     *\r\n     * @param g1\r\n     * @param g2\r\n     * @param g3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3869
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#167",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged()",
        "snippet": "    protected void fireDatasetChanged() {\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3853
        },
        "num_failing_tests": 21
    },
    {
        "name": "ObjectList.indexOf#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.indexOf(java.lang.Object)",
        "snippet": "    public int indexOf(Object object) {\n        return super.indexOf(object);\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not\n     * in the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.383
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.setPlot#1042",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setPlot(org.jfree.chart.plot.Plot)",
        "snippet": "    public void setPlot(Plot plot) {\n        this.plot = plot;\n        configure();\n    }\n",
        "begin_line": 1042,
        "end_line": 1045,
        "comment": "\r\n     * Sets a reference to the plot that the axis is assigned to.\r\n     * <P>\r\n     * This method is used internally, you shouldn't need to call it yourself.\r\n     *\r\n     * @param plot  the plot.\r\n     *\r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.383
        },
        "num_failing_tests": 22
    },
    {
        "name": "RangeType.RangeType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.RangeType(java.lang.String)",
        "snippet": "    private RangeType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3804
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.isAutoRange#950",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isAutoRange()",
        "snippet": "    public boolean isAutoRange() {\n        return this.autoRange;\n    }\n",
        "begin_line": 950,
        "end_line": 952,
        "comment": "\r\n     * Returns the flag that controls whether or not the axis range is\r\n     * automatically adjusted to fit the data values.\r\n     *\r\n     * @return The flag.\r\n     *\r\n     * @see #setAutoRange(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3804
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.NumberAxis#200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.NumberAxis(java.lang.String)",
        "snippet": "    public NumberAxis(String label) {\n        super(label, NumberAxis.createStandardTickUnits());\n        this.rangeType = RangeType.FULL;\n        this.autoRangeIncludesZero = DEFAULT_AUTO_RANGE_INCLUDES_ZERO;\n        this.autoRangeStickyZero = DEFAULT_AUTO_RANGE_STICKY_ZERO;\n        this.tickUnit = DEFAULT_TICK_UNIT;\n        this.numberFormatOverride = null;\n        this.markerBand = null;\n    }\n",
        "begin_line": 200,
        "end_line": 208,
        "comment": "\r\n     * Constructs a number axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3804
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.createStandardTickUnits#701",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.createStandardTickUnits()",
        "snippet": "    public static TickUnitSource createStandardTickUnits() {\n\n        TickUnits units = new TickUnits();\n        DecimalFormat df0 = new DecimalFormat(\"0.00000000\");\n        DecimalFormat df1 = new DecimalFormat(\"0.0000000\");\n        DecimalFormat df2 = new DecimalFormat(\"0.000000\");\n        DecimalFormat df3 = new DecimalFormat(\"0.00000\");\n        DecimalFormat df4 = new DecimalFormat(\"0.0000\");\n        DecimalFormat df5 = new DecimalFormat(\"0.000\");\n        DecimalFormat df6 = new DecimalFormat(\"0.00\");\n        DecimalFormat df7 = new DecimalFormat(\"0.0\");\n        DecimalFormat df8 = new DecimalFormat(\"#,##0\");\n        DecimalFormat df9 = new DecimalFormat(\"#,###,##0\");\n        DecimalFormat df10 = new DecimalFormat(\"#,###,###,##0\");\n\n        // we can add the units in any order, the TickUnits collection will\n        // sort them...\n        units.add(new NumberTickUnit(0.0000001, df1, 2));\n        units.add(new NumberTickUnit(0.000001, df2, 2));\n        units.add(new NumberTickUnit(0.00001, df3, 2));\n        units.add(new NumberTickUnit(0.0001, df4, 2));\n        units.add(new NumberTickUnit(0.001, df5, 2));\n        units.add(new NumberTickUnit(0.01, df6, 2));\n        units.add(new NumberTickUnit(0.1, df7, 2));\n        units.add(new NumberTickUnit(1, df8, 2));\n        units.add(new NumberTickUnit(10, df8, 2));\n        units.add(new NumberTickUnit(100, df8, 2));\n        units.add(new NumberTickUnit(1000, df8, 2));\n        units.add(new NumberTickUnit(10000, df8, 2));\n        units.add(new NumberTickUnit(100000, df8, 2));\n        units.add(new NumberTickUnit(1000000, df9, 2));\n        units.add(new NumberTickUnit(10000000, df9, 2));\n        units.add(new NumberTickUnit(100000000, df9, 2));\n        units.add(new NumberTickUnit(1000000000, df10, 2));\n        units.add(new NumberTickUnit(10000000000.0, df10, 2));\n        units.add(new NumberTickUnit(100000000000.0, df10, 2));\n\n        units.add(new NumberTickUnit(0.00000025, df0, 5));\n        units.add(new NumberTickUnit(0.0000025, df1, 5));\n        units.add(new NumberTickUnit(0.000025, df2, 5));\n        units.add(new NumberTickUnit(0.00025, df3, 5));\n        units.add(new NumberTickUnit(0.0025, df4, 5));\n        units.add(new NumberTickUnit(0.025, df5, 5));\n        units.add(new NumberTickUnit(0.25, df6, 5));\n        units.add(new NumberTickUnit(2.5, df7, 5));\n        units.add(new NumberTickUnit(25, df8, 5));\n        units.add(new NumberTickUnit(250, df8, 5));\n        units.add(new NumberTickUnit(2500, df8, 5));\n        units.add(new NumberTickUnit(25000, df8, 5));\n        units.add(new NumberTickUnit(250000, df8, 5));\n        units.add(new NumberTickUnit(2500000, df9, 5));\n        units.add(new NumberTickUnit(25000000, df9, 5));\n        units.add(new NumberTickUnit(250000000, df9, 5));\n        units.add(new NumberTickUnit(2500000000.0, df10, 5));\n        units.add(new NumberTickUnit(25000000000.0, df10, 5));\n        units.add(new NumberTickUnit(250000000000.0, df10, 5));\n\n        units.add(new NumberTickUnit(0.0000005, df1, 5));\n        units.add(new NumberTickUnit(0.000005, df2, 5));\n        units.add(new NumberTickUnit(0.00005, df3, 5));\n        units.add(new NumberTickUnit(0.0005, df4, 5));\n        units.add(new NumberTickUnit(0.005, df5, 5));\n        units.add(new NumberTickUnit(0.05, df6, 5));\n        units.add(new NumberTickUnit(0.5, df7, 5));\n        units.add(new NumberTickUnit(5L, df8, 5));\n        units.add(new NumberTickUnit(50L, df8, 5));\n        units.add(new NumberTickUnit(500L, df8, 5));\n        units.add(new NumberTickUnit(5000L, df8, 5));\n        units.add(new NumberTickUnit(50000L, df8, 5));\n        units.add(new NumberTickUnit(500000L, df8, 5));\n        units.add(new NumberTickUnit(5000000L, df9, 5));\n        units.add(new NumberTickUnit(50000000L, df9, 5));\n        units.add(new NumberTickUnit(500000000L, df9, 5));\n        units.add(new NumberTickUnit(5000000000L, df10, 5));\n        units.add(new NumberTickUnit(50000000000L, df10, 5));\n        units.add(new NumberTickUnit(500000000000L, df10, 5));\n\n        return units;\n\n    }\n",
        "begin_line": 701,
        "end_line": 780,
        "comment": "\r\n     * Creates the standard tick units.\r\n     * <P>\r\n     * If you don't like these defaults, create your own instance of TickUnits\r\n     * and then pass it to the setStandardTickUnits() method in the\r\n     * NumberAxis class.\r\n     *\r\n     * @return The standard tick units.\r\n     *\r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     * @see #createIntegerTickUnits()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3804
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getPlot#1029",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getPlot()",
        "snippet": "    public Plot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 1029,
        "end_line": 1031,
        "comment": "\r\n     * Returns the plot that the axis is assigned to.  This method will return\r\n     * <code>null</code> if the axis is not currently assigned to a plot.\r\n     *\r\n     * @return The plot that the axis is assigned to (possibly\r\n     *         <code>null</code>).\r\n     *\r\n     * @see #setPlot(Plot)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3804
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.compareTo#142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object object) {\n\n        if (object instanceof TickUnit) {\n            TickUnit other = (TickUnit) object;\n            if (this.size > other.getSize()) {\n                return 1;\n            }\n            else if (this.size < other.getSize()) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return -1;\n        }\n\n    }\n",
        "begin_line": 142,
        "end_line": 160,
        "comment": "\r\n     * Compares this tick unit to an arbitrary object.\r\n     *\r\n     * @param object  the object to compare against.\r\n     *\r\n     * @return <code>1</code> if the size of the other object is less than this,\r\n     *      <code>0</code> if both have the same size and <code>-1</code> this\r\n     *      size is less than the others.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractDataset.addChangeListener#129",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.general.DatasetChangeListener)",
        "snippet": "    public void addChangeListener(DatasetChangeListener listener) {\n        this.listenerList.add(DatasetChangeListener.class, listener);\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\r\n     * Registers an object to receive notification of changes to the dataset.\r\n     *\r\n     * @param listener  the object to register.\r\n     *\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3767
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.TickUnit#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double, int)",
        "snippet": "    public TickUnit(double size, int minorTickCount) {\n        this.size = size;\n        this.minorTickCount = minorTickCount;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\r\n     * Constructs a new tick unit.\r\n     *\r\n     * @param size  the tick unit size.\r\n     * @param minorTickCount  the minor tick count.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.372
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberTickUnit.NumberTickUnit#99",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat, int)",
        "snippet": "    public NumberTickUnit(double size, NumberFormat formatter,\n            int minorTickCount) {\n        super(size, minorTickCount);\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        this.formatter = formatter;\n    }\n",
        "begin_line": 99,
        "end_line": 106,
        "comment": "\r\n     * Creates a new number tick unit.\r\n     *\r\n     * @param size  the size of the tick unit.\r\n     * @param formatter  a number formatter for the tick unit (<code>null</code>\r\n     *                   not permitted).\r\n     * @param minorTickCount  the number of minor ticks.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.372
        },
        "num_failing_tests": 22
    },
    {
        "name": "DatasetGroup.DatasetGroup#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3697
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractDataset.AbstractDataset#92",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own\r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3697
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYStepAreaRenderer.XYStepAreaRenderer#153",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.XYStepAreaRenderer(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
        "snippet": "    public XYStepAreaRenderer(int type,\n                              XYToolTipGenerator toolTipGenerator,\n                              XYURLGenerator urlGenerator) {\n\n        super();\n        setBaseToolTipGenerator(toolTipGenerator);\n        setBaseURLGenerator(urlGenerator);\n\n        if (type == AREA) {\n            this.plotArea = true;\n        }\n        else if (type == SHAPES) {\n            this.shapesVisible = true;\n        }\n        else if (type == AREA_AND_SHAPES) {\n            this.plotArea = true;\n            this.shapesVisible = true;\n        }\n        this.showOutline = false;\n    }\n",
        "begin_line": 153,
        "end_line": 172,
        "comment": "\r\n     * Constructs a new renderer.\r\n     * <p>\r\n     * To specify the type of renderer, use one of the constants:\r\n     * AREA, SHAPES or AREA_AND_SHAPES.\r\n     *\r\n     * @param type  the type of renderer.\r\n     * @param toolTipGenerator  the tool tip generator to use\r\n     *                          (<code>null</code> permitted).\r\n     * @param urlGenerator  the URL generator (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "ChartFactory.createXYAreaChart#1604",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createXYAreaChart(String title,\n                                               String xAxisLabel,\n                                               String yAxisLabel,\n                                               XYDataset dataset,\n                                               PlotOrientation orientation,\n                                               boolean legend,\n                                               boolean tooltips,\n                                               boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n        plot.setOrientation(orientation);\n        plot.setForegroundAlpha(0.5f);\n\n        XYToolTipGenerator tipGenerator = null;\n        if (tooltips) {\n            tipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n\n        plot.setRenderer(new XYAreaRenderer(XYAreaRenderer.AREA, tipGenerator,\n                urlGenerator));\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n",
        "begin_line": 1604,
        "end_line": 1640,
        "comment": "\r\n     * Creates an area chart using an {@link XYDataset}.\r\n     * <P>\r\n     * The chart object returned by this method uses an {@link XYPlot} instance\r\n     * as the plot, with a {@link NumberAxis} for the domain axis, a\r\n     * {@link NumberAxis} as the range axis, and a {@link XYAreaRenderer} as\r\n     * the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param xAxisLabel  a label for the X-axis (<code>null</code> permitted).\r\n     * @param yAxisLabel  a label for the Y-axis (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical)\r\n     *                     (<code>null</code> NOT permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return An XY area chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "ChartFactory.createXYStepChart#1764",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createXYStepChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createXYStepChart(String title,\n                                               String xAxisLabel,\n                                               String yAxisLabel,\n                                               XYDataset dataset,\n                                               PlotOrientation orientation,\n                                               boolean legend,\n                                               boolean tooltips,\n                                               boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        DateAxis xAxis = new DateAxis(xAxisLabel);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n        XYItemRenderer renderer\n            = new XYStepRenderer(toolTipGenerator, urlGenerator);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n        plot.setDomainCrosshairVisible(false);\n        plot.setRangeCrosshairVisible(false);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n",
        "begin_line": 1764,
        "end_line": 1802,
        "comment": "\r\n     * Creates a stepped XY plot with default settings.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param xAxisLabel  a label for the X-axis (<code>null</code> permitted).\r\n     * @param yAxisLabel  a label for the Y-axis (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical)\r\n     *                     (<code>null</code> NOT permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "ChartFactory.createXYStepAreaChart#1819",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createXYStepAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createXYStepAreaChart(String title,\n                                                   String xAxisLabel,\n                                                   String yAxisLabel,\n                                                   XYDataset dataset,\n                                                   PlotOrientation orientation,\n                                                   boolean legend,\n                                                   boolean tooltips,\n                                                   boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n        XYItemRenderer renderer = new XYStepAreaRenderer(\n                XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator,\n                urlGenerator);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n        plot.setDomainCrosshairVisible(false);\n        plot.setRangeCrosshairVisible(false);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n    }\n",
        "begin_line": 1819,
        "end_line": 1857,
        "comment": "\r\n     * Creates a filled stepped XY plot with default settings.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param xAxisLabel  a label for the X-axis (<code>null</code> permitted).\r\n     * @param yAxisLabel  a label for the Y-axis (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical)\r\n     *                     (<code>null</code> NOT permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "ValueAxis.ValueAxis#275",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.ValueAxis(java.lang.String, org.jfree.chart.axis.TickUnitSource)",
        "snippet": "    protected ValueAxis(String label, TickUnitSource standardTickUnits) {\n\n        super(label);\n\n        this.positiveArrowVisible = false;\n        this.negativeArrowVisible = false;\n\n        this.range = DEFAULT_RANGE;\n        this.autoRange = DEFAULT_AUTO_RANGE;\n        this.defaultAutoRange = DEFAULT_RANGE;\n\n        this.inverted = DEFAULT_INVERTED;\n        this.autoRangeMinimumSize = DEFAULT_AUTO_RANGE_MINIMUM_SIZE;\n\n        this.lowerMargin = DEFAULT_LOWER_MARGIN;\n        this.upperMargin = DEFAULT_UPPER_MARGIN;\n\n        this.fixedAutoRange = 0.0;\n\n        this.autoTickUnitSelection = DEFAULT_AUTO_TICK_UNIT_SELECTION;\n        this.standardTickUnits = standardTickUnits;\n\n        Polygon p1 = new Polygon();\n        p1.addPoint(0, 0);\n        p1.addPoint(-2, 2);\n        p1.addPoint(2, 2);\n\n        this.upArrow = p1;\n\n        Polygon p2 = new Polygon();\n        p2.addPoint(0, 0);\n        p2.addPoint(-2, -2);\n        p2.addPoint(2, -2);\n\n        this.downArrow = p2;\n\n        Polygon p3 = new Polygon();\n        p3.addPoint(0, 0);\n        p3.addPoint(-2, -2);\n        p3.addPoint(-2, 2);\n\n        this.rightArrow = p3;\n\n        Polygon p4 = new Polygon();\n        p4.addPoint(0, 0);\n        p4.addPoint(2, -2);\n        p4.addPoint(2, 2);\n\n        this.leftArrow = p4;\n\n        this.verticalTickLabels = false;\n        this.minorTickCount = 0;\n\n    }\n",
        "begin_line": 275,
        "end_line": 328,
        "comment": "\r\n     * Constructs a value axis.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param standardTickUnits  the source for standard tick units\r\n     *                           (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3651
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnits.TickUnits#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.TickUnits()",
        "snippet": "    public TickUnits() {\n        this.tickUnits = new ArrayList();\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Constructs a new collection of tick units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3651
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnits.add#89",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.add(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public void add(TickUnit unit) {\n        if (unit == null) {\n            throw new NullPointerException(\"Null 'unit' argument.\");\n        }\n        this.tickUnits.add(unit);\n        Collections.sort(this.tickUnits);\n    }\n",
        "begin_line": 89,
        "end_line": 95,
        "comment": "\r\n     * Adds a tick unit to the collection.  The tick units are maintained in\r\n     * ascending order.\r\n     *\r\n     * @param unit  the tick unit to add (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3651
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.getSize#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.getSize()",
        "snippet": "    public double getSize() {\n        return this.size;\n    }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\r\n     * Returns the size of the tick unit.\r\n     *\r\n     * @return The size of the tick unit.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3651
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.Axis#307",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.Axis(java.lang.String)",
        "snippet": "    protected Axis(String label) {\n\n        this.label = label;\n        this.visible = DEFAULT_AXIS_VISIBLE;\n        this.labelFont = DEFAULT_AXIS_LABEL_FONT;\n        this.labelPaint = DEFAULT_AXIS_LABEL_PAINT;\n        this.labelInsets = DEFAULT_AXIS_LABEL_INSETS;\n        this.labelAngle = 0.0;\n        this.labelToolTip = null;\n        this.labelURL = null;\n\n        this.axisLineVisible = true;\n        this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT;\n        this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE;\n\n        this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE;\n        this.tickLabelFont = DEFAULT_TICK_LABEL_FONT;\n        this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT;\n        this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS;\n\n        this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE;\n        this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE;\n        this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT;\n        this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH;\n        this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n\n        this.minorTickMarksVisible = false;\n        this.minorTickMarkInsideLength = 0.0f;\n        this.minorTickMarkOutsideLength = 2.0f;\n\n        this.plot = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 307,
        "end_line": 341,
        "comment": "\r\n     * Constructs an axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3608
        },
        "num_failing_tests": 22
    },
    {
        "name": "Range.getLowerBound#101",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getLowerBound()",
        "snippet": "    public double getLowerBound() {\n        return this.lower;\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\r\n     * Returns the lower bound for the range.\r\n     *\r\n     * @return The lower bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3551
        },
        "num_failing_tests": 21
    },
    {
        "name": "Range.getUpperBound#110",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getUpperBound()",
        "snippet": "    public double getUpperBound() {\n        return this.upper;\n    }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\r\n     * Returns the upper bound for the range.\r\n     *\r\n     * @return The upper bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3551
        },
        "num_failing_tests": 21
    },
    {
        "name": "StandardXYURLGenerator.StandardXYURLGenerator#88",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.StandardXYURLGenerator()",
        "snippet": "    public StandardXYURLGenerator() {\n        this(DEFAULT_PREFIX, DEFAULT_SERIES_PARAMETER, DEFAULT_ITEM_PARAMETER);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\r\n     * Creates a new default generator.  This constructor is equivalent to\r\n     * calling <code>StandardXYURLGenerator(\"index.html\", \"series\", \"item\");\r\n     * </code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3548
        },
        "num_failing_tests": 6
    },
    {
        "name": "StandardXYURLGenerator.StandardXYURLGenerator#112",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/urls/StandardXYURLGenerator.java",
        "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
        "signature": "org.jfree.chart.urls.StandardXYURLGenerator.StandardXYURLGenerator(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public StandardXYURLGenerator(String prefix,\n                                  String seriesParameterName,\n                                  String itemParameterName) {\n        if (prefix == null) {\n            throw new IllegalArgumentException(\"Null 'prefix' argument.\");\n        }\n        if (seriesParameterName == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'seriesParameterName' argument.\");\n        }\n        if (itemParameterName == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'itemParameterName' argument.\");\n        }\n        this.prefix = prefix;\n        this.seriesParameterName = seriesParameterName;\n        this.itemParameterName = itemParameterName;\n    }\n",
        "begin_line": 112,
        "end_line": 129,
        "comment": "\r\n     * Constructor that overrides all the defaults\r\n     *\r\n     * @param prefix  the prefix to the URL (<code>null</code> not permitted).\r\n     * @param seriesParameterName  the name of the series parameter to go in\r\n     *                             each URL (<code>null</code> not permitted).\r\n     * @param itemParameterName  the name of the item parameter to go in each\r\n     *                           URL (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3548
        },
        "num_failing_tests": 6
    },
    {
        "name": "DatasetRenderingOrder.DatasetRenderingOrder#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
        "snippet": "    private DatasetRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3516
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectList.get#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.get(int)",
        "snippet": "    public Object get(int index) {\n        return super.get(index);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the object at the specified index, if there is one, or\n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3496
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectList.set#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
        "snippet": "    public void set(int index, Object object) {\n        super.set(index, object);\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3496
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotOrientation.PlotOrientation#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3467
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberTickUnit.NumberTickUnit#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat)",
        "snippet": "    public NumberTickUnit(double size, NumberFormat formatter) {\n        super(size);\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        this.formatter = formatter;\n    }\n",
        "begin_line": 81,
        "end_line": 87,
        "comment": "\r\n     * Creates a new number tick unit.\r\n     *\r\n     * @param size  the size of the tick unit.\r\n     * @param formatter  a number formatter for the tick unit (<code>null</code>\r\n     *                   not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3467
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.TickUnit#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double)",
        "snippet": "    public TickUnit(double size) {\n        this.size = size;\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\r\n     * Constructs a new tick unit.\r\n     *\r\n     * @param size  the tick unit size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3458
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.get#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
        "snippet": "    protected Object get(int index) {\n        Object result = null;\n        if (index >= 0 && index < this.size) {\n            result = this.objects[index];\n        }\n        return result;\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Returns the object at the specified index, if there is one, or\n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3439
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.set#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
        "snippet": "    protected void set(int index, Object object) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires index >= 0.\");\n        }\n        if (index >= this.objects.length) {\n            Object[] enlarged = new Object[index + this.increment];\n            System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);\n            this.objects = enlarged;\n        }\n        this.objects[index] = object;\n        this.size = Math.max(this.size, index + 1);\n    }\n",
        "begin_line": 122,
        "end_line": 133,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3439
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartChangeEvent.setType#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public void setType(ChartChangeEventType type) {\n        this.type = type;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Sets the event type.\r\n     *\r\n     * @param type  the event type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3439
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.autoAdjustRange#424",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.autoAdjustRange()",
        "snippet": "    protected void autoAdjustRange() {\n\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = r.getLowerBound();\n            if (this.rangeType == RangeType.POSITIVE) {\n                lower = Math.max(0.0, lower);\n                upper = Math.max(0.0, upper);\n            }\n            else if (this.rangeType == RangeType.NEGATIVE) {\n                lower = Math.min(0.0, lower);\n                upper = Math.min(0.0, upper);\n            }\n\n            if (getAutoRangeIncludesZero()) {\n                lower = Math.min(lower, 0.0);\n                upper = Math.max(upper, 0.0);\n            }\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = upper - fixedAutoRange;\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                    if (lower == upper) { // see bug report 1549218\n                        double adjust = Math.abs(lower) / 10.0;\n                        lower = lower - adjust;\n                        upper = upper + adjust;\n                    }\n                    if (this.rangeType == RangeType.POSITIVE) {\n                        if (lower < 0.0) {\n                            upper = upper - lower;\n                            lower = 0.0;\n                        }\n                    }\n                    else if (this.rangeType == RangeType.NEGATIVE) {\n                        if (upper > 0.0) {\n                            lower = lower - upper;\n                            upper = 0.0;\n                        }\n                    }\n                }\n\n                if (getAutoRangeStickyZero()) {\n                    if (upper <= 0.0) {\n                        upper = Math.min(0.0, upper + getUpperMargin() * range);\n                    }\n                    else {\n                        upper = upper + getUpperMargin() * range;\n                    }\n                    if (lower >= 0.0) {\n                        lower = Math.max(0.0, lower - getLowerMargin() * range);\n                    }\n                    else {\n                        lower = lower - getLowerMargin() * range;\n                    }\n                }\n                else {\n                    upper = upper + getUpperMargin() * range;\n                    lower = lower - getLowerMargin() * range;\n                }\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }\n",
        "begin_line": 424,
        "end_line": 510,
        "comment": "\r\n     * Rescales the axis to ensure that all data is visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3424
        },
        "num_failing_tests": 19
    },
    {
        "name": "Range.Range#86",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower\n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 86,
        "end_line": 94,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3412
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.getParent#448",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getParent()",
        "snippet": "    public Plot getParent() {\n        return this.parent;\n    }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "\r\n     * Returns the parent plot (or <code>null</code> if this plot is not part\r\n     * of a combined plot).\r\n     *\r\n     * @return The parent plot.\r\n     *\r\n     * @see #setParent(Plot)\r\n     * @see #getRootPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.335
        },
        "num_failing_tests": 22
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the\r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be\r\n     * <code>null</code> (in this case the source will be the\r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3308
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.notifyListeners#959",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        // if the 'notify' flag has been switched to false, we don't notify\n        // the listeners\n        if (!this.notify) {\n            return;\n        }\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 959,
        "end_line": 971,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.Plot#299",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"Tahoma\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.notify = true;\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 299,
        "end_line": 320,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3237
        },
        "num_failing_tests": 22
    },
    {
        "name": "ResourceBundleWrapper.getBundle#118",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ResourceBundleWrapper.java",
        "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
        "signature": "org.jfree.chart.util.ResourceBundleWrapper.getBundle(java.lang.String)",
        "snippet": "    public static final ResourceBundle getBundle(String baseName) {\n        // the noCodeBaseClassLoader is configured by a call to the\n        // removeCodeBase() method, typically in the init() method of an\n        // applet...\n        if (noCodeBaseClassLoader != null) {\n            return ResourceBundle.getBundle(baseName, Locale.getDefault(),\n                    noCodeBaseClassLoader);\n        }\n        else {\n            // standard ResourceBundle behaviour\n            return ResourceBundle.getBundle(baseName);\n        }\n    }\n",
        "begin_line": 118,
        "end_line": 130,
        "comment": "\r\n     * Finds and returns the specified resource bundle.\r\n     *\r\n     * @param baseName  the base name.\r\n     *\r\n     * @return The resource bundle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3221
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline\r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3214
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence,\n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 194,
        "end_line": 205,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     *\r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3214
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 287,
        "end_line": 337,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series\r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3214
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.intArray#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3214
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.intArray#531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3214
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartColor.createDefaultPaintArray#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 149,
        "end_line": 187,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and\r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3214
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.setStandardTickUnits#1409",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)",
        "snippet": "    public void setStandardTickUnits(TickUnitSource source) {\n        this.standardTickUnits = source;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n",
        "begin_line": 1409,
        "end_line": 1412,
        "comment": "\r\n     * Sets the source for obtaining standard tick units for the axis and sends\r\n     * an {@link AxisChangeEvent} to all registered listeners.  The axis will\r\n     * try to select the smallest tick unit from the source that does not cause\r\n     * the tick labels to overlap (see also the\r\n     * {@link #setAutoTickUnitSelection(boolean)} method.\r\n     *\r\n     * @param source  the source for standard tick units (<code>null</code>\r\n     *                permitted).\r\n     *\r\n     * @see #getStandardTickUnits()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "NumberAxis.createIntegerTickUnits#790",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.createIntegerTickUnits()",
        "snippet": "    public static TickUnitSource createIntegerTickUnits() {\n        TickUnits units = new TickUnits();\n        DecimalFormat df0 = new DecimalFormat(\"0\");\n        DecimalFormat df1 = new DecimalFormat(\"#,##0\");\n        units.add(new NumberTickUnit(1, df0, 2));\n        units.add(new NumberTickUnit(2, df0, 2));\n        units.add(new NumberTickUnit(5, df0, 5));\n        units.add(new NumberTickUnit(10, df0, 2));\n        units.add(new NumberTickUnit(20, df0, 2));\n        units.add(new NumberTickUnit(50, df0, 5));\n        units.add(new NumberTickUnit(100, df0, 2));\n        units.add(new NumberTickUnit(200, df0, 2));\n        units.add(new NumberTickUnit(500, df0, 5));\n        units.add(new NumberTickUnit(1000, df1, 2));\n        units.add(new NumberTickUnit(2000, df1, 2));\n        units.add(new NumberTickUnit(5000, df1, 5));\n        units.add(new NumberTickUnit(10000, df1, 2));\n        units.add(new NumberTickUnit(20000, df1, 2));\n        units.add(new NumberTickUnit(50000, df1, 5));\n        units.add(new NumberTickUnit(100000, df1, 2));\n        units.add(new NumberTickUnit(200000, df1, 2));\n        units.add(new NumberTickUnit(500000, df1, 5));\n        units.add(new NumberTickUnit(1000000, df1, 2));\n        units.add(new NumberTickUnit(2000000, df1, 2));\n        units.add(new NumberTickUnit(5000000, df1, 5));\n        units.add(new NumberTickUnit(10000000, df1, 2));\n        units.add(new NumberTickUnit(20000000, df1, 2));\n        units.add(new NumberTickUnit(50000000, df1, 5));\n        units.add(new NumberTickUnit(100000000, df1, 2));\n        units.add(new NumberTickUnit(200000000, df1, 2));\n        units.add(new NumberTickUnit(500000000, df1, 5));\n        units.add(new NumberTickUnit(1000000000, df1, 2));\n        units.add(new NumberTickUnit(2000000000, df1, 2));\n        units.add(new NumberTickUnit(5000000000.0, df1, 5));\n        units.add(new NumberTickUnit(10000000000.0, df1, 2));\n        return units;\n    }\n",
        "begin_line": 790,
        "end_line": 826,
        "comment": "\r\n     * Returns a collection of tick units for integer values.\r\n     *\r\n     * @return A collection of tick units for integer values.\r\n     *\r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     * @see #createStandardTickUnits()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardXYToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator()",
        "snippet": "    public StandardXYToolTipGenerator() {\n        this(DEFAULT_TOOL_TIP_FORMAT, NumberFormat.getNumberInstance(),\n                NumberFormat.getNumberInstance());\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\r\n     * Creates a tool tip generator using default number formatters.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3103
        },
        "num_failing_tests": 6
    },
    {
        "name": "RectangleInsets.RectangleInsets#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom,\n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);\n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     *\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2978
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left,\n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     *\n     * @param unitType  absolute or relative units (<code>null</code> not\n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2978
        },
        "num_failing_tests": 22
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2937
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.size#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2736
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.configure#415",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.configure()",
        "snippet": "    public void configure() {\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n    }\n",
        "begin_line": 415,
        "end_line": 419,
        "comment": "\r\n     * Configures the axis to work with the specified plot.  If the axis has\r\n     * auto-scaling, then sets the maximum and minimum values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2732
        },
        "num_failing_tests": 15
    },
    {
        "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardXYToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public StandardXYToolTipGenerator(String formatString,\n            NumberFormat xFormat, NumberFormat yFormat) {\n\n        super(formatString, xFormat, yFormat);\n\n    }\n",
        "begin_line": 96,
        "end_line": 101,
        "comment": "\r\n     * Creates a tool tip generator using the specified number formatters.\r\n     *\r\n     * @param formatString  the item label format string (<code>null</code> not\r\n     *                      permitted).\r\n     * @param xFormat  the format object for the x values (<code>null</code>\r\n     *                 not permitted).\r\n     * @param yFormat  the format object for the y values (<code>null</code>\r\n     *                 not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2727
        },
        "num_failing_tests": 6
    },
    {
        "name": "ValueAxis.setLowerMargin#1095",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setLowerMargin(double)",
        "snippet": "    public void setLowerMargin(double margin) {\n        this.lowerMargin = margin;\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n        notifyListeners(new AxisChangeEvent(this));\n    }\n",
        "begin_line": 1095,
        "end_line": 1101,
        "comment": "\r\n     * Sets the lower margin for the axis (as a percentage of the axis range)\r\n     * and sends an {@link AxisChangeEvent} to all registered listeners.  This\r\n     * margin is added only when the axis range is auto-calculated - if you set\r\n     * the axis range manually, the margin is ignored.\r\n     *\r\n     * @param margin  the margin percentage (for example, 0.05 is five percent).\r\n     *\r\n     * @see #getLowerMargin()\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2697
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.setUpperMargin#1128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setUpperMargin(double)",
        "snippet": "    public void setUpperMargin(double margin) {\n        this.upperMargin = margin;\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n        notifyListeners(new AxisChangeEvent(this));\n    }\n",
        "begin_line": 1128,
        "end_line": 1134,
        "comment": "\r\n     * Sets the upper margin for the axis (as a percentage of the axis range)\r\n     * and sends an {@link AxisChangeEvent} to all registered listeners.  This\r\n     * margin is added only when the axis range is auto-calculated - if you set\r\n     * the axis range manually, the margin is ignored.\r\n     *\r\n     * @param margin  the margin percentage (for example, 0.05 is five percent).\r\n     *\r\n     * @see #getLowerMargin()\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2697
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    protected AbstractXYItemLabelGenerator(String formatString,\n                                           NumberFormat xFormat,\n                                           NumberFormat yFormat) {\n\n        if (formatString == null) {\n            throw new IllegalArgumentException(\"Null 'formatString' argument.\");\n        }\n        if (xFormat == null) {\n            throw new IllegalArgumentException(\"Null 'xFormat' argument.\");\n        }\n        if (yFormat == null) {\n            throw new IllegalArgumentException(\"Null 'yFormat' argument.\");\n        }\n        this.formatString = formatString;\n        this.xFormat = xFormat;\n        this.yFormat = yFormat;\n\n    }\n",
        "begin_line": 111,
        "end_line": 128,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param formatString  the item label format string (<code>null</code>\r\n     *                      not permitted).\r\n     * @param xFormat  the format object for the x values (<code>null</code>\r\n     *                 not permitted).\r\n     * @param yFormat  the format object for the y values (<code>null</code>\r\n     *                 not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2667
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2578
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title,\r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2578
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart,\n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2578
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectList.ObjectList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2489
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2489
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2489
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2489
        },
        "num_failing_tests": 22
    },
    {
        "name": "XYSeriesCollection.setIntervalWidth#620",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.setIntervalWidth(double)",
        "snippet": "    public void setIntervalWidth(double width) {\n        if (width < 0.0) {\n            throw new IllegalArgumentException(\"Negative 'width' argument.\");\n        }\n        this.intervalDelegate.setFixedIntervalWidth(width);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 620,
        "end_line": 626,
        "comment": "\r\n     * Sets the interval width and sends a {@link DatasetChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param width  the width (negative values not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntervalXYDelegate.setFixedIntervalWidth#224",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/IntervalXYDelegate.java",
        "class_name": "org.jfree.data.xy.IntervalXYDelegate",
        "signature": "org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth(double)",
        "snippet": "    public void setFixedIntervalWidth(double w) {\n        if (w < 0.0) {\n            throw new IllegalArgumentException(\"Negative 'w' argument.\");\n        }\n        this.fixedIntervalWidth = w;\n        this.autoWidth = false;\n    }\n",
        "begin_line": 224,
        "end_line": 230,
        "comment": "\r\n     * Sets the fixed interval width and, as a side effect, sets the\r\n     * <code>autoWidth</code> flag to <code>false</code>.\r\n     *\r\n     * Note that changing the interval width amounts to changing the data\r\n     * values represented by the dataset.  Therefore, the dataset\r\n     * that is using this delegate is responsible for generating the\r\n     * appropriate {@link DatasetChangeEvent}.\r\n     *\r\n     * @param w  the width (negative values not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesCollection.TimeSeriesCollection#143",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "signature": "org.jfree.data.time.TimeSeriesCollection.TimeSeriesCollection()",
        "snippet": "    public TimeSeriesCollection() {\n        this(null, TimeZone.getDefault());\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\r\n     * Constructs an empty dataset, tied to the default timezone.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesCollection.addSeries#318",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "signature": "org.jfree.data.time.TimeSeriesCollection.addSeries(org.jfree.data.time.TimeSeries)",
        "snippet": "    public void addSeries(TimeSeries series) {\n        if (series == null) {\n            throw new IllegalArgumentException(\"Null 'series' argument.\");\n        }\n        this.data.add(series);\n        series.addChangeListener(this);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 318,
        "end_line": 325,
        "comment": "\r\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param series  the series (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.SpreadsheetDate#146",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.SpreadsheetDate(int)",
        "snippet": "    public SpreadsheetDate(final int serial) {\n\n        if ((serial >= SERIAL_LOWER_BOUND) && (serial <= SERIAL_UPPER_BOUND)) {\n            this.serial = serial;\n        }\n        else {\n            throw new IllegalArgumentException(\n                \"SpreadsheetDate: Serial must be in range 2 to 2958465.\");\n        }\n\n        // the day-month-year needs to be synchronised with the serial number...\n      // get the year from the serial date\n      final int days = this.serial - SERIAL_LOWER_BOUND;\n      // overestimated because we ignored leap days\n      final int overestimatedYYYY = 1900 + (days / 365);\n      final int leaps = SerialDate.leapYearCount(overestimatedYYYY);\n      final int nonleapdays = days - leaps;\n      // underestimated because we overestimated years\n      int underestimatedYYYY = 1900 + (nonleapdays / 365);\n\n      if (underestimatedYYYY == overestimatedYYYY) {\n          this.year = underestimatedYYYY;\n      }\n      else {\n          int ss1 = calcSerial(1, 1, underestimatedYYYY);\n          while (ss1 <= this.serial) {\n              underestimatedYYYY = underestimatedYYYY + 1;\n              ss1 = calcSerial(1, 1, underestimatedYYYY);\n          }\n          this.year = underestimatedYYYY - 1;\n      }\n\n      final int ss2 = calcSerial(1, 1, this.year);\n\n      int[] daysToEndOfPrecedingMonth\n          = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n\n      if (isLeapYear(this.year)) {\n          daysToEndOfPrecedingMonth\n              = LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n      }\n\n      // get the month from the serial date\n      int mm = 1;\n      int sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1;\n      while (sss < this.serial) {\n          mm = mm + 1;\n          sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1;\n      }\n      this.month = mm - 1;\n\n      // what's left is d(+1);\n      this.day = this.serial - ss2\n                 - daysToEndOfPrecedingMonth[this.month] + 1;\n\n    }\n",
        "begin_line": 146,
        "end_line": 201,
        "comment": "\n     * Standard constructor - creates a new date object representing the\n     * specified day number (which should be in the range 2 to 2958465.\n     *\n     * @param serial  the serial number for the day (range: 2 to 2958465).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.calcSerial#448",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.calcSerial(int, int, int)",
        "snippet": "    private int calcSerial(final int d, final int m, final int y) {\n        final int yy = ((y - 1900) * 365) + SerialDate.leapYearCount(y - 1);\n        int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];\n        if (m > MonthConstants.FEBRUARY) {\n            if (SerialDate.isLeapYear(y)) {\n                mm = mm + 1;\n            }\n        }\n        final int dd = d;\n        return yy + mm + dd + 1;\n    }\n",
        "begin_line": 448,
        "end_line": 458,
        "comment": "\n     * Calculate the serial number from the day, month and year.\n     * <P>\n     * 1-Jan-1900 = 2.\n     *\n     * @param d  the day.\n     * @param m  the month.\n     * @param y  the year.\n     *\n     * @return the serial number from the day, month and year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.isLeapYear#497",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.isLeapYear(int)",
        "snippet": "    public static boolean isLeapYear(final int yyyy) {\n\n        if ((yyyy % 4) != 0) {\n            return false;\n        }\n        else if ((yyyy % 400) == 0) {\n            return true;\n        }\n        else if ((yyyy % 100) == 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n\n    }\n",
        "begin_line": 497,
        "end_line": 512,
        "comment": "\n     * Determines whether or not the specified year is a leap year.\n     *\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return <code>true</code> if the specified year is a leap year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.createInstance#803",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.createInstance(int)",
        "snippet": "    public static SerialDate createInstance(final int serial) {\n        return new SpreadsheetDate(serial);\n    }\n",
        "begin_line": 803,
        "end_line": 805,
        "comment": "\n     * Factory method that returns an instance of some concrete subclass of\n     * {@link SerialDate}.\n     *\n     * @param serial  the serial number for the day (1 January 1900 = 2).\n     *\n     * @return a instance of SerialDate.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.Day#112",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.Day()",
        "snippet": "    public Day() {\n        this(new Date());\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\r\n     * Creates a new instance, derived from the system date/time (and assuming\r\n     * the default timezone).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.Day#133",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.Day(org.jfree.data.time.SerialDate)",
        "snippet": "    public Day(SerialDate serialDate) {\n        if (serialDate == null) {\n            throw new IllegalArgumentException(\"Null 'serialDate' argument.\");\n        }\n        this.serialDate = serialDate;\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 133,
        "end_line": 139,
        "comment": "\r\n     * Constructs a new one day time period.\r\n     *\r\n     * @param serialDate  the day (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.Day#149",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.Day(java.util.Date)",
        "snippet": "    public Day(Date time) {\n        // defer argument checking...\n        this(time, TimeZone.getDefault());\n    }\n",
        "begin_line": 149,
        "end_line": 152,
        "comment": "\r\n     * Constructs a new instance, based on a particular date/time and the\r\n     * default time zone.\r\n     *\r\n     * @param time  the time (<code>null</code> not permitted).\r\n     *\r\n     * @see #Day(Date, TimeZone)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.Day#160",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.Day(java.util.Date, java.util.TimeZone)",
        "snippet": "    public Day(Date time, TimeZone zone) {\n        // FIXME: need a Locale as well as a TimeZone\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone);\n        calendar.setTime(time);\n        int d = calendar.get(Calendar.DAY_OF_MONTH);\n        int m = calendar.get(Calendar.MONTH) + 1;\n        int y = calendar.get(Calendar.YEAR);\n        this.serialDate = SerialDate.createInstance(d, m, y);\n        peg(calendar);\n    }\n",
        "begin_line": 160,
        "end_line": 175,
        "comment": "\r\n     * Constructs a new instance, based on a particular date/time and time zone.\r\n     *\r\n     * @param time  the date/time.\r\n     * @param zone  the time zone.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.next#285",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.next()",
        "snippet": "    public RegularTimePeriod next() {\n\n        Day result;\n        int serial = this.serialDate.toSerial();\n        if (serial < SerialDate.SERIAL_UPPER_BOUND) {\n            SerialDate tomorrow = SerialDate.createInstance(serial + 1);\n            return new Day(tomorrow);\n        }\n        else {\n            result = null;\n        }\n        return result;\n\n    }\n",
        "begin_line": 285,
        "end_line": 298,
        "comment": "\r\n     * Returns the day following this one, or <code>null</code> if some limit\r\n     * has been reached.\r\n     *\r\n     * @return The day following this one, or <code>null</code> if some limit\r\n     *         has been reached.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYStepRenderer.XYStepRenderer#135",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/XYStepRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
        "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.XYStepRenderer(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
        "snippet": "    public XYStepRenderer(XYToolTipGenerator toolTipGenerator,\n                          XYURLGenerator urlGenerator) {\n        super();\n        setBaseToolTipGenerator(toolTipGenerator);\n        setBaseURLGenerator(urlGenerator);\n        setBaseShapesVisible(false);\n    }\n",
        "begin_line": 135,
        "end_line": 141,
        "comment": "\r\n     * Constructs a new renderer with the specified tool tip and URL\r\n     * generators.\r\n     *\r\n     * @param toolTipGenerator  the item label generator (<code>null</code>\r\n     *     permitted).\r\n     * @param urlGenerator  the URL generator (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2023
        },
        "num_failing_tests": 3
    },
    {
        "name": "XYLineAndShapeRenderer.setBaseShapesVisible#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)",
        "snippet": "    public void setBaseShapesVisible(boolean flag) {\n        this.baseShapesVisible = flag;\n        fireChangeEvent();\n    }\n",
        "begin_line": 440,
        "end_line": 443,
        "comment": "\r\n     * Sets the base 'shapes visible' flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1928
        },
        "num_failing_tests": 3
    },
    {
        "name": "XYSeriesCollection.addSeries#146",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.addSeries(org.jfree.data.xy.XYSeries)",
        "snippet": "    public void addSeries(XYSeries series) {\n        if (series == null) {\n            throw new IllegalArgumentException(\"Null 'series' argument.\");\n        }\n        this.data.add(series);\n        series.addChangeListener(this);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 146,
        "end_line": 153,
        "comment": "\r\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param series  the series (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1778
        },
        "num_failing_tests": 4
    },
    {
        "name": "XYSeriesCollection.XYSeriesCollection#104",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYSeriesCollection",
        "signature": "org.jfree.data.xy.XYSeriesCollection.XYSeriesCollection()",
        "snippet": "    public XYSeriesCollection() {\n        this(null);\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\r\n     * Constructs an empty dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1557
        },
        "num_failing_tests": 4
    },
    {
        "name": "TimeSeriesCollection.getDomainBounds#635",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "signature": "org.jfree.data.time.TimeSeriesCollection.getDomainBounds(boolean)",
        "snippet": "    public Range getDomainBounds(boolean includeInterval) {\n        Range result = null;\n        Iterator iterator = this.data.iterator();\n        while (iterator.hasNext()) {\n            TimeSeries series = (TimeSeries) iterator.next();\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 635,
        "end_line": 657,
        "comment": "\r\n     * Returns the range of the values in this dataset's domain.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         x-interval is taken into account.\r\n     *\r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.iterateDomainBounds#737",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    public static Range iterateDomainBounds(XYDataset dataset,\n                                            boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n        double lvalue;\n        double uvalue;\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = dataset.getXValue(series, item);\n                    uvalue = lvalue;\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        if (minimum > maximum) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
        "begin_line": 737,
        "end_line": 782,
        "comment": "\r\n     * Iterates over the items in an {@link XYDataset} to find\r\n     * the range of x-values.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines, for an\r\n     *          {@link IntervalXYDataset}, whether the x-interval or just the\r\n     *          x-value is used to determine the overall range.\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.setRange#1256",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setRange(org.jfree.data.Range, boolean, boolean)",
        "snippet": "    public void setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"Null 'range' argument.\");\n        }\n        if (turnOffAutoRange) {\n            this.autoRange = false;\n        }\n        this.range = range;\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1256,
        "end_line": 1268,
        "comment": "\r\n     * Sets the range for the axis, if requested, sends an\r\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect,\r\n     * the auto-range flag is set to <code>false</code> (optional).\r\n     *\r\n     * @param range  the range (<code>null</code> not permitted).\r\n     * @param turnOffAutoRange  a flag that controls whether or not the auto\r\n     *                          range is turned off.\r\n     * @param notify  a flag that controls whether or not listeners are\r\n     *                notified.\r\n     *\r\n     * @see #getRange()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1436
        },
        "num_failing_tests": 8
    },
    {
        "name": "AbstractXYItemRenderer.setBaseURLGenerator#619",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)",
        "snippet": "    public void setBaseURLGenerator(XYURLGenerator generator) {\n        setBaseURLGenerator(generator, true);\n    }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\r\n     * Sets the default URL generator and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     *\r\n     * @see #getBaseURLGenerator()\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.143
        },
        "num_failing_tests": 6
    },
    {
        "name": "AbstractXYItemRenderer.setBaseURLGenerator#634",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator, boolean)",
        "snippet": "    public void setBaseURLGenerator(XYURLGenerator generator, boolean notify) {\n        this.baseURLGenerator = generator;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 634,
        "end_line": 639,
        "comment": "\r\n     * Sets the default URL generator and, if requested, sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     * @param notify  notify listener?\r\n     *\r\n     * @see #getBaseURLGenerator()\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.143
        },
        "num_failing_tests": 6
    },
    {
        "name": "AbstractXYItemRenderer.setBaseToolTipGenerator#500",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)",
        "snippet": "    public void setBaseToolTipGenerator(XYToolTipGenerator generator) {\n        setBaseToolTipGenerator(generator, true);\n    }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\r\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     *\r\n     * @see #getBaseToolTipGenerator()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1319
        },
        "num_failing_tests": 6
    },
    {
        "name": "AbstractXYItemRenderer.setBaseToolTipGenerator#515",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator, boolean)",
        "snippet": "    public void setBaseToolTipGenerator(XYToolTipGenerator generator,\n            boolean notify) {\n        this.baseToolTipGenerator = generator;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 515,
        "end_line": 521,
        "comment": "\r\n     * Sets the default tool tip generator and, if requested, sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #getBaseToolTipGenerator()\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1319
        },
        "num_failing_tests": 6
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#105",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, Number value) {\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");\n        }\n        this.period = period;\n        this.value = value;\n        this.selected = false;\n    }\n",
        "begin_line": 105,
        "end_line": 112,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#120",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, double)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, double value) {\n        this(period, new Double(value));\n    }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value associated with the time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.getPeriod#129",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.getPeriod()",
        "snippet": "    public RegularTimePeriod getPeriod() {\n        return this.period;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\r\n     * Returns the time period.\r\n     *\r\n     * @return The time period (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.getValue#140",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.getValue()",
        "snippet": "    public Number getValue() {\n        return this.value;\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\r\n     * Returns the value.\r\n     *\r\n     * @return The value (<code>null</code> possible).\r\n     *\r\n     * @see #setValue(java.lang.Number)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.clone#265",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.clone()",
        "snippet": "    public Object clone() {\n        Object clone = null;\n        try {\n            clone = super.clone();\n        }\n        catch (CloneNotSupportedException e) { // won't get here...\n            e.printStackTrace();\n        }\n        return clone;\n    }\n",
        "begin_line": 265,
        "end_line": 274,
        "comment": "\r\n     * Clones the data item.  Note: there is no need to clone the period or\r\n     * value since they are immutable instances.\r\n     *\r\n     * @return A clone of the data item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesCollection.TimeSeriesCollection#177",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesCollection.java",
        "class_name": "org.jfree.data.time.TimeSeriesCollection",
        "signature": "org.jfree.data.time.TimeSeriesCollection.TimeSeriesCollection(org.jfree.data.time.TimeSeries, java.util.TimeZone)",
        "snippet": "    public TimeSeriesCollection(TimeSeries series, TimeZone zone) {\n        super();\n        // FIXME:  need a locale as well as a timezone\n        if (zone == null) {\n            zone = TimeZone.getDefault();\n        }\n        this.workingCalendar = Calendar.getInstance(zone);\n        this.data = new ArrayList();\n        if (series != null) {\n            this.data.add(series);\n            series.addChangeListener(this);\n        }\n        this.xPosition = TimePeriodAnchor.START;\n        setSelectionState(this);\n    }\n",
        "begin_line": 177,
        "end_line": 191,
        "comment": "\r\n     * Constructs a dataset containing a single series (more can be added),\r\n     * tied to a specific timezone.\r\n     *\r\n     * @param series  a series to add to the collection (<code>null</code>\r\n     *                permitted).\r\n     * @param zone  the timezone (<code>null</code> permitted, will use\r\n     *              <code>TimeZone.getDefault()</code> in that case).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#167",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable)",
        "snippet": "    public TimeSeries(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\r\n     * Creates a new (empty) time series.  By default, a daily time series is\r\n     * created.  Use one of the other constructors if you require a different\r\n     * time period.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#184",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.String, java.lang.String)",
        "snippet": "    public TimeSeries(Comparable name, String domain, String range) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.timePeriodClass = null;\n        this.data = new java.util.ArrayList();\n        this.maximumItemCount = Integer.MAX_VALUE;\n        this.maximumItemAge = Long.MAX_VALUE;\n        this.minY = Double.NaN;\n        this.maxY = Double.NaN;\n    }\n",
        "begin_line": 184,
        "end_line": 194,
        "comment": "\r\n     * Creates a new time series that contains no data.\r\n     * <P>\r\n     * Descriptions can be specified for the domain and range.  One situation\r\n     * where this is helpful is when generating a chart for the time series -\r\n     * axis labels can be taken from the domain and range description.\r\n     *\r\n     * @param name  the name of the series (<code>null</code> not permitted).\r\n     * @param domain  the domain description (<code>null</code> permitted).\r\n     * @param range  the range description (<code>null</code> permitted).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getItemCount#252",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getRawDataItem#427",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getRawDataItem(int)",
        "snippet": "    TimeSeriesDataItem getRawDataItem(int index) {\n        return (TimeSeriesDataItem) this.data.get(index);\n    }\n",
        "begin_line": 427,
        "end_line": 429,
        "comment": "\r\n     * Returns a data item for the series.  This method returns the object\r\n     * that is used for the underlying storage - you should not modify the\r\n     * contents of the returned value unless you know what you are doing.\r\n     *\r\n     * @param index  the item index (zero-based).\r\n     *\r\n     * @return The data item.\r\n     *\r\n     * @see #getDataItem(int)\r\n     *\r\n     * @since 1.0.14\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getTimePeriod#461",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getTimePeriod(int)",
        "snippet": "    public RegularTimePeriod getTimePeriod(int index) {\n        return getRawDataItem(index).getPeriod();\n    }\n",
        "begin_line": 461,
        "end_line": 463,
        "comment": "\r\n     * Returns the time period at the specified index.\r\n     *\r\n     * @param index  the index of the data item.\r\n     *\r\n     * @return The time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#574",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem, boolean)",
        "snippet": "    public void add(TimeSeriesDataItem item, boolean notify) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n        item = (TimeSeriesDataItem) item.clone();\n        Class c = item.getPeriod().getClass();\n        if (this.timePeriodClass == null) {\n            this.timePeriodClass = c;\n        }\n        else if (!this.timePeriodClass.equals(c)) {\n            StringBuffer b = new StringBuffer();\n            b.append(\"You are trying to add data where the time period class \");\n            b.append(\"is \");\n            b.append(item.getPeriod().getClass().getName());\n            b.append(\", but the TimeSeries is expecting an instance of \");\n            b.append(this.timePeriodClass.getName());\n            b.append(\".\");\n            throw new SeriesException(b.toString());\n        }\n\n        // make the change (if it's not a duplicate time period)...\n        boolean added = false;\n        int count = getItemCount();\n        if (count == 0) {\n            this.data.add(item);\n            added = true;\n        }\n        else {\n            RegularTimePeriod last = getTimePeriod(getItemCount() - 1);\n            if (item.getPeriod().compareTo(last) > 0) {\n                this.data.add(item);\n                added = true;\n            }\n            else {\n                int index = Collections.binarySearch(this.data, item);\n                if (index < 0) {\n                    this.data.add(-index - 1, item);\n                    added = true;\n                }\n                else {\n                    StringBuffer b = new StringBuffer();\n                    b.append(\"You are attempting to add an observation for \");\n                    b.append(\"the time period \");\n                    b.append(item.getPeriod().toString());\n                    b.append(\" but the series already contains an observation\");\n                    b.append(\" for that time period. Duplicates are not \");\n                    b.append(\"permitted.  Try using the addOrUpdate() method.\");\n                    throw new SeriesException(b.toString());\n                }\n            }\n        }\n        if (added) {\n            updateBoundsForAddedItem(item);\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);\n                updateBoundsForRemovedItem(d);\n            }\n\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            if (notify) {\n                fireSeriesChanged();\n            }\n        }\n\n    }\n",
        "begin_line": 574,
        "end_line": 641,
        "comment": "\r\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\r\n     *              permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#650",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double)",
        "snippet": "    public void add(RegularTimePeriod period, double value) {\n        // defer argument checking...\n        add(period, value, true);\n    }\n",
        "begin_line": 650,
        "end_line": 653,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#663",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double, boolean)",
        "snippet": "    public void add(RegularTimePeriod period, double value, boolean notify) {\n        // defer argument checking...\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        add(item, notify);\n    }\n",
        "begin_line": 663,
        "end_line": 667,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.removeAgedItems#873",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.removeAgedItems(boolean)",
        "snippet": "    public void removeAgedItems(boolean notify) {\n        // check if there are any values earlier than specified by the history\n        // count...\n        if (getItemCount() > 1) {\n            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();\n            boolean removed = false;\n            while ((latest - getTimePeriod(0).getSerialIndex())\n                    > this.maximumItemAge) {\n                this.data.remove(0);\n                removed = true;\n            }\n            if (removed) {\n                findBoundsByIteration();\n                if (notify) {\n                    fireSeriesChanged();\n                }\n            }\n        }\n    }\n",
        "begin_line": 873,
        "end_line": 891,
        "comment": "\r\n     * Age items in the series.  Ensure that the timespan from the youngest to\r\n     * the oldest record in the series does not exceed maximumItemAge time\r\n     * periods.  Oldest items will be removed if required.\r\n     *\r\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is\r\n     *                sent to registered listeners IF any items are removed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.updateBoundsForAddedItem#1211",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)",
        "snippet": "    private void updateBoundsForAddedItem(TimeSeriesDataItem item) {\n        Number yN = item.getValue();\n        if (item.getValue() != null) {\n            double y = yN.doubleValue();\n            this.minY = minIgnoreNaN(this.minY, y);\n            this.maxY = maxIgnoreNaN(this.maxY, y);\n        }\n    }\n",
        "begin_line": 1211,
        "end_line": 1218,
        "comment": "\r\n     * Updates the cached values for the minimum and maximum data values.\r\n     *\r\n     * @param item  the item added (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.14\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.minIgnoreNaN#1265",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.minIgnoreNaN(double, double)",
        "snippet": "    private double minIgnoreNaN(double a, double b) {\n        if (Double.isNaN(a)) {\n            return b;\n        }\n        else {\n            if (Double.isNaN(b)) {\n                return a;\n            }\n            else {\n                return Math.min(a, b);\n            }\n        }\n    }\n",
        "begin_line": 1265,
        "end_line": 1277,
        "comment": "\r\n     * A function to find the minimum of two values, but ignoring any\r\n     * Double.NaN values.\r\n     *\r\n     * @param a  the first value.\r\n     * @param b  the second value.\r\n     *\r\n     * @return The minimum of the two values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.maxIgnoreNaN#1288",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.maxIgnoreNaN(double, double)",
        "snippet": "    private double maxIgnoreNaN(double a, double b) {\n        if (Double.isNaN(a)) {\n            return b;\n        }\n        else {\n            if (Double.isNaN(b)) {\n                return a;\n            }\n            else {\n                return Math.max(a, b);\n            }\n        }\n    }\n",
        "begin_line": 1288,
        "end_line": 1300,
        "comment": "\r\n     * A function to find the maximum of two values, but ignoring any\r\n     * Double.NaN values.\r\n     *\r\n     * @param a  the first value.\r\n     * @param b  the second value.\r\n     *\r\n     * @return The maximum of the two values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodAnchor.TimePeriodAnchor#76",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodAnchor.java",
        "class_name": "org.jfree.data.time.TimePeriodAnchor",
        "signature": "org.jfree.data.time.TimePeriodAnchor.TimePeriodAnchor(java.lang.String)",
        "snippet": "    private TimePeriodAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.SpreadsheetDate#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.SpreadsheetDate(int, int, int)",
        "snippet": "    public SpreadsheetDate(final int day, final int month, final int year) {\n\n        if ((year >= 1900) && (year <= 9999)) {\n            this.year = year;\n        }\n        else {\n            throw new IllegalArgumentException(\n                \"The 'year' argument must be in range 1900 to 9999.\"\n            );\n        }\n\n        if ((month >= MonthConstants.JANUARY)\n                && (month <= MonthConstants.DECEMBER)) {\n            this.month = month;\n        }\n        else {\n            throw new IllegalArgumentException(\n                \"The 'month' argument must be in the range 1 to 12.\"\n            );\n        }\n\n        if ((day >= 1) && (day <= SerialDate.lastDayOfMonth(month, year))) {\n            this.day = day;\n        }\n        else {\n            throw new IllegalArgumentException(\"Invalid 'day' argument.\");\n        }\n\n        // the serial number needs to be synchronised with the day-month-year...\n        this.serial = calcSerial(day, month, year);\n\n    }\n",
        "begin_line": 107,
        "end_line": 138,
        "comment": "\n     * Creates a new date instance.\n     *\n     * @param day  the day (in the range 1 to 28/29/30/31).\n     * @param month  the month (in the range 1 to 12).\n     * @param year  the year (in the range 1900 to 9999).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.toSerial#210",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.toSerial()",
        "snippet": "    public int toSerial() {\n        return this.serial;\n    }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\n     * Returns the serial number for the date, where 1 January 1900 = 2\n     * (this corresponds, almost, to the numbering system used in Microsoft\n     * Excel for Windows and Lotus 1-2-3).\n     *\n     * @return The serial number of this date.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.getYYYY#230",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.getYYYY()",
        "snippet": "    public int getYYYY() {\n        return this.year;\n    }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\n     * Returns the year (assume a valid range of 1900 to 9999).\n     *\n     * @return The year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.getMonth#239",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.getMonth()",
        "snippet": "    public int getMonth() {\n        return this.month;\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n     * Returns the month (January = 1, February = 2, March = 3).\n     *\n     * @return The month of the year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.getDayOfMonth#248",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.getDayOfMonth()",
        "snippet": "    public int getDayOfMonth() {\n        return this.day;\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * Returns the day of the month.\n     *\n     * @return The day of the month.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SpreadsheetDate.compare#307",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SpreadsheetDate.java",
        "class_name": "org.jfree.data.time.SpreadsheetDate",
        "signature": "org.jfree.data.time.SpreadsheetDate.compare(org.jfree.data.time.SerialDate)",
        "snippet": "    public int compare(final SerialDate other) {\n        return this.serial - other.toSerial();\n    }\n",
        "begin_line": 307,
        "end_line": 309,
        "comment": "\n     * Returns the difference (in days) between this date and the specified\n     * 'other' date.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return The difference (in days) between this date and the specified\n     *         'other' date.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.SerialDate#210",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.SerialDate()",
        "snippet": "    protected SerialDate() {\n    }\n",
        "begin_line": 210,
        "end_line": 211,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.leapYearCount#524",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.leapYearCount(int)",
        "snippet": "    public static int leapYearCount(final int yyyy) {\n\n        final int leap4 = (yyyy - 1896) / 4;\n        final int leap100 = (yyyy - 1800) / 100;\n        final int leap400 = (yyyy - 1600) / 400;\n        return leap4 - leap100 + leap400;\n\n    }\n",
        "begin_line": 524,
        "end_line": 531,
        "comment": "\n     * Returns the number of leap years from 1900 to the specified year\n     * INCLUSIVE.\n     * <P>\n     * Note that 1900 is not a leap year.\n     *\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of leap years from 1900 to the specified year.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialDate.createInstance#790",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.createInstance(int, int, int)",
        "snippet": "    public static SerialDate createInstance(final int day, final int month,\n                                            final int yyyy) {\n        return new SpreadsheetDate(day, month, yyyy);\n    }\n",
        "begin_line": 790,
        "end_line": 793,
        "comment": "\n     * Factory method that returns an instance of some concrete subclass of\n     * {@link SerialDate}.\n     *\n     * @param day  the day (1-31).\n     * @param month  the month (1-12).\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return An instance of {@link SerialDate}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getSerialDate#186",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getSerialDate()",
        "snippet": "    public SerialDate getSerialDate() {\n        return this.serialDate;\n    }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\r\n     * Returns the day as a {@link SerialDate}.  Note: the reference that is\r\n     * returned should be an instance of an immutable {@link SerialDate}\r\n     * (otherwise the caller could use the reference to alter the state of\r\n     * this <code>Day</code> instance, and <code>Day</code> is supposed\r\n     * to be immutable).\r\n     *\r\n     * @return The day as a {@link SerialDate}.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.peg#253",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "\r\n     * Recalculates the start date/time and end date/time for this time period\r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getSerialIndex#305",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getSerialIndex()",
        "snippet": "    public long getSerialIndex() {\n        return this.serialDate.toSerial();\n    }\n",
        "begin_line": 305,
        "end_line": 307,
        "comment": "\r\n     * Returns a serial index number for the day.\r\n     *\r\n     * @return The serial index number.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getFirstMillisecond#320",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        int year = this.serialDate.getYYYY();\n        int month = this.serialDate.getMonth();\n        int day = this.serialDate.getDayOfMonth();\n        calendar.clear();\n        calendar.set(year, month - 1, day, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        //return calendar.getTimeInMillis();  // this won't work for JDK 1.3\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 320,
        "end_line": 329,
        "comment": "\r\n     * Returns the first millisecond of the day, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  calendar to use (<code>null</code> not permitted).\r\n     *\r\n     * @return The start of the day as milliseconds since 01-01-1970.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.getLastMillisecond#342",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        int year = this.serialDate.getYYYY();\n        int month = this.serialDate.getMonth();\n        int day = this.serialDate.getDayOfMonth();\n        calendar.clear();\n        calendar.set(year, month - 1, day, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        //return calendar.getTimeInMillis();  // this won't work for JDK 1.3\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 342,
        "end_line": 351,
        "comment": "\r\n     * Returns the last millisecond of the day, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  calendar to use (<code>null</code> not permitted).\r\n     *\r\n     * @return The end of the day as milliseconds since 01-01-1970.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Day.compareTo#402",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Day.java",
        "class_name": "org.jfree.data.time.Day",
        "signature": "org.jfree.data.time.Day.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another Day object\n        // ----------------------------------------\n        if (o1 instanceof Day) {\n            Day d = (Day) o1;\n            result = -d.getSerialDate().compare(this.serialDate);\n        }\n\n        // CASE 2 : Comparing to another TimePeriod object\n        // -----------------------------------------------\n        else if (o1 instanceof RegularTimePeriod) {\n            // more difficult case - evaluate later...\n            result = 0;\n        }\n\n        // CASE 3 : Comparing to a non-TimePeriod object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 402,
        "end_line": 429,
        "comment": "\r\n     * Returns an integer indicating the order of this Day object relative to\r\n     * the specified object:\r\n     *\r\n     * negative == before, zero == same, positive == after.\r\n     *\r\n     * @param o1  the object to compare.\r\n     *\r\n     * @return negative == before, zero == same, positive == after.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYLineAndShapeRenderer.XYLineAndShapeRenderer#174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer()",
        "snippet": "    public XYLineAndShapeRenderer() {\n        this(true, true);\n    }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "\r\n     * Creates a new renderer with both lines and shapes visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 3
    },
    {
        "name": "SerialDate.lastDayOfMonth#542",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.lastDayOfMonth(int, int)",
        "snippet": "    public static int lastDayOfMonth(final int month, final int yyyy) {\n\n        final int result = LAST_DAY_OF_MONTH[month];\n        if (month != FEBRUARY) {\n            return result;\n        }\n        else if (isLeapYear(yyyy)) {\n            return result + 1;\n        }\n        else {\n            return result;\n        }\n\n    }\n",
        "begin_line": 542,
        "end_line": 555,
        "comment": "\n     * Returns the number of the last day of the month, taking into account\n     * leap years.\n     *\n     * @param month  the month.\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of the last day of the month.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYLineAndShapeRenderer.XYLineAndShapeRenderer#184",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer(boolean, boolean)",
        "snippet": "    public XYLineAndShapeRenderer(boolean lines, boolean shapes) {\n        this.seriesLinesVisible = new BooleanList();\n        this.baseLinesVisible = lines;\n        this.legendLine = new Line2D.Double(-7.0, 0.0, 7.0, 0.0);\n\n        this.seriesShapesVisible = new BooleanList();\n        this.baseShapesVisible = shapes;\n\n        this.useFillPaint = false;     // use item paint for fills by default\n        this.seriesShapesFilled = new BooleanList();\n        this.baseShapesFilled = true;\n\n        this.drawOutlines = true;\n        this.useOutlinePaint = false;  // use item paint for outlines by\n                                       // default, not outline paint\n\n        this.drawSeriesLineAsPath = false;\n    }\n",
        "begin_line": 184,
        "end_line": 201,
        "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param lines  lines visible?\r\n     * @param shapes  shapes visible?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1034
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractXYItemRenderer.AbstractXYItemRenderer#231",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.AbstractXYItemRenderer()",
        "snippet": "    protected AbstractXYItemRenderer() {\n        super();\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.baseURLGenerator = null;\n        this.backgroundAnnotations = new java.util.ArrayList();\n        this.foregroundAnnotations = new java.util.ArrayList();\n        this.legendItemLabelGenerator = new StandardXYSeriesLabelGenerator(\n                \"{0}\");\n    }\n",
        "begin_line": 231,
        "end_line": 241,
        "comment": "\r\n     * Creates a renderer where the tooltip generator and the URL generator are\r\n     * both <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 7
    },
    {
        "name": "AbstractRenderer.fireChangeEvent#2884",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent()",
        "snippet": "    protected void fireChangeEvent() {\n\n        // the commented out code would be better, but only if\n        // RendererChangeEvent is immutable, which it isn't.  See if there is\n        // a way to fix this...\n\n        //if (this.event == null) {\n        //    this.event = new RendererChangeEvent(this);\n        //}\n        //notifyListeners(this.event);\n\n        notifyListeners(new RendererChangeEvent(this));\n    }\n",
        "begin_line": 2884,
        "end_line": 2896,
        "comment": "\r\n     * Sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 7
    },
    {
        "name": "AbstractRenderer.notifyListeners#2903",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.notifyListeners(org.jfree.chart.event.RendererChangeEvent)",
        "snippet": "    public void notifyListeners(RendererChangeEvent event) {\n        Object[] ls = this.listenerList.getListenerList();\n        for (int i = ls.length - 2; i >= 0; i -= 2) {\n            if (ls[i] == RendererChangeListener.class) {\n                ((RendererChangeListener) ls[i + 1]).rendererChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 2903,
        "end_line": 2910,
        "comment": "\r\n     * Notifies all registered listeners that the renderer has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 7
    },
    {
        "name": "StandardXYSeriesLabelGenerator.StandardXYSeriesLabelGenerator#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.StandardXYSeriesLabelGenerator(java.lang.String)",
        "snippet": "    public StandardXYSeriesLabelGenerator(String format) {\n        if (format == null) {\n            throw new IllegalArgumentException(\"Null 'format' argument.\");\n        }\n        this.formatPattern = format;\n    }\n",
        "begin_line": 86,
        "end_line": 91,
        "comment": "\r\n     * Creates a new series label generator.\r\n     *\r\n     * @param format  the format pattern (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 7
    },
    {
        "name": "RendererChangeEvent.RendererChangeEvent#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "signature": "org.jfree.chart.event.RendererChangeEvent.RendererChangeEvent(java.lang.Object)",
        "snippet": "    public RendererChangeEvent(Object renderer) {\n        this(renderer, false);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\r\n     * Creates a new event.\r\n     *\r\n     * @param renderer  the renderer that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 7
    },
    {
        "name": "RendererChangeEvent.RendererChangeEvent#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "signature": "org.jfree.chart.event.RendererChangeEvent.RendererChangeEvent(java.lang.Object, boolean)",
        "snippet": "    public RendererChangeEvent(Object renderer,\n            boolean seriesVisibilityChanged) {\n        super(renderer);\n        this.renderer = renderer;\n        this.seriesVisibilityChanged = seriesVisibilityChanged;\n    }\n",
        "begin_line": 80,
        "end_line": 85,
        "comment": "\r\n     * Creates a new event.\r\n     *\r\n     * @param renderer  the renderer that generated the event.\r\n     * @param seriesVisibilityChanged  a flag that indicates whether or not\r\n     *         the event relates to a change in the series visibility flags.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 7
    },
    {
        "name": "StrokeList.StrokeList#57",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.StrokeList()",
        "snippet": "    public StrokeList() {\n        super();\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "ShapeList.ShapeList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.ShapeList()",
        "snippet": "    public ShapeList() {\n        super();\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "PaintList.PaintList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.PaintList()",
        "snippet": "    public PaintList() {\n        super();\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "BooleanList.BooleanList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.BooleanList()",
        "snippet": "    public BooleanList() {\n    }\n",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "AbstractRenderer.AbstractRenderer#391",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.AbstractRenderer()",
        "snippet": "    public AbstractRenderer() {\n\n        this.seriesVisibleList = new BooleanList();\n        this.baseSeriesVisible = true;\n\n        this.seriesVisibleInLegendList = new BooleanList();\n        this.baseSeriesVisibleInLegend = true;\n\n        this.paintList = new PaintList();\n        this.basePaint = DEFAULT_PAINT;\n        this.autoPopulateSeriesPaint = true;\n\n        this.fillPaintList = new PaintList();\n        this.baseFillPaint = Color.white;\n        this.autoPopulateSeriesFillPaint = false;\n\n        this.outlinePaintList = new PaintList();\n        this.baseOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.autoPopulateSeriesOutlinePaint = false;\n\n        this.strokeList = new StrokeList();\n        this.baseStroke = DEFAULT_STROKE;\n        this.autoPopulateSeriesStroke = true;\n\n        this.outlineStrokeList = new StrokeList();\n        this.baseOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.autoPopulateSeriesOutlineStroke = false;\n\n        this.shapeList = new ShapeList();\n        this.baseShape = DEFAULT_SHAPE;\n        this.autoPopulateSeriesShape = true;\n\n        this.itemLabelsVisibleList = new BooleanList();\n        this.baseItemLabelsVisible = false;\n\n        this.itemLabelFontList = new ObjectList();\n        this.baseItemLabelFont = new Font(\"Tahoma\", Font.PLAIN, 10);\n\n        this.itemLabelPaintList = new PaintList();\n        this.baseItemLabelPaint = Color.black;\n\n        this.positiveItemLabelPositionList = new ObjectList();\n        this.basePositiveItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n\n        this.negativeItemLabelPositionList = new ObjectList();\n        this.baseNegativeItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n\n        this.createEntitiesList = new BooleanList();\n        this.baseCreateEntities = true;\n\n        this.defaultEntityRadius = 3;\n\n        this.legendShapeList = new ShapeList();\n        this.baseLegendShape = null;\n\n        this.treatLegendShapeAsLine = false;\n\n        this.legendTextFont = new ObjectList();\n        this.baseLegendTextFont = null;\n\n        this.legendTextPaint = new PaintList();\n        this.baseLegendTextPaint = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 391,
        "end_line": 458,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#88",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,\n                             TextAnchor textAnchor) {\n        this(itemLabelAnchor, textAnchor, TextAnchor.CENTER, 0.0);\n    }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "\r\n     * Creates a new position record (with zero rotation).\r\n     *\r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not\r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,\n                             TextAnchor textAnchor,\n                             TextAnchor rotationAnchor,\n                             double angle) {\n\n        if (itemLabelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'itemLabelAnchor' argument.\");\n        }\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n\n        this.itemLabelAnchor = itemLabelAnchor;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n\n    }\n",
        "begin_line": 106,
        "end_line": 128,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point\r\n     * relative to the data item (dot, bar or other visual item) on a chart.\r\n     * The item label is aligned by aligning the text anchor with the\r\n     * item label anchor.\r\n     *\r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not\r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not\r\n     *                        permitted).\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "ItemLabelAnchor.ItemLabelAnchor#167",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.ItemLabelAnchor(java.lang.String)",
        "snippet": "    private ItemLabelAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 7
    },
    {
        "name": "AbstractRenderer.removeChangeListener#2858",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.removeChangeListener(org.jfree.chart.event.RendererChangeListener)",
        "snippet": "    public void removeChangeListener(RendererChangeListener listener) {\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Null 'listener' argument.\");\n        }\n        this.listenerList.remove(RendererChangeListener.class, listener);\n    }\n",
        "begin_line": 2858,
        "end_line": 2863,
        "comment": "\r\n     * Deregisters an object so that it no longer receives\r\n     * notification of changes to the renderer.\r\n     *\r\n     * @param listener  the object (<code>null</code> not permitted).\r\n     *\r\n     * @see #addChangeListener(RendererChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setRenderer#1633",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer, boolean)",
        "snippet": "    public void setRenderer(int index, XYItemRenderer renderer,\n                            boolean notify) {\n        XYItemRenderer existing = getRenderer(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.renderers.set(index, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n        configureDomainAxes();\n        configureRangeAxes();\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1633,
        "end_line": 1649,
        "comment": "\r\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param index  the index.\r\n     * @param renderer  the renderer.\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #getRenderer(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextAnchor.TextAnchor#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0832
        },
        "num_failing_tests": 7
    },
    {
        "name": "XYPlot.setRenderer#1606",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)",
        "snippet": "    public void setRenderer(XYItemRenderer renderer) {\n        setRenderer(0, renderer);\n    }\n",
        "begin_line": 1606,
        "end_line": 1608,
        "comment": "\r\n     * Sets the renderer for the primary dataset and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.  If the renderer\r\n     * is set to <code>null</code>, no data will be displayed.\r\n     *\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     *\r\n     * @see #getRenderer()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultXYDataset.DefaultXYDataset#81",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/DefaultXYDataset.java",
        "class_name": "org.jfree.data.xy.DefaultXYDataset",
        "signature": "org.jfree.data.xy.DefaultXYDataset.DefaultXYDataset()",
        "snippet": "    public DefaultXYDataset() {\n        this.seriesKeys = new java.util.ArrayList();\n        this.seriesList = new java.util.ArrayList();\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\r\n     * Creates a new <code>DefaultXYDataset</code> instance, initially\r\n     * containing no data.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultXYDataset.getSeriesCount#91",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/DefaultXYDataset.java",
        "class_name": "org.jfree.data.xy.DefaultXYDataset",
        "signature": "org.jfree.data.xy.DefaultXYDataset.getSeriesCount()",
        "snippet": "    public int getSeriesCount() {\n        return this.seriesList.size();\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\r\n     * Returns the number of series in the dataset.\r\n     *\r\n     * @return The series count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.equals#5309",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof XYPlot)) {\n            return false;\n        }\n        XYPlot that = (XYPlot) obj;\n        if (this.weight != that.weight) {\n            return false;\n        }\n        if (this.orientation != that.orientation) {\n            return false;\n        }\n        if (!this.domainAxes.equals(that.domainAxes)) {\n            return false;\n        }\n        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {\n            return false;\n        }\n        if (this.rangeCrosshairLockedOnData\n                != that.rangeCrosshairLockedOnData) {\n            return false;\n        }\n        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {\n            return false;\n        }\n        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {\n            return false;\n        }\n        if (this.domainMinorGridlinesVisible\n                != that.domainMinorGridlinesVisible) {\n            return false;\n        }\n        if (this.rangeMinorGridlinesVisible\n                != that.rangeMinorGridlinesVisible) {\n            return false;\n        }\n        if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {\n            return false;\n        }\n        if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {\n            return false;\n        }\n        if (this.domainCrosshairVisible != that.domainCrosshairVisible) {\n            return false;\n        }\n        if (this.domainCrosshairValue != that.domainCrosshairValue) {\n            return false;\n        }\n        if (this.domainCrosshairLockedOnData\n                != that.domainCrosshairLockedOnData) {\n            return false;\n        }\n        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {\n            return false;\n        }\n        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.renderers, that.renderers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {\n            return false;\n        }\n        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.datasetToDomainAxesMap,\n                that.datasetToDomainAxesMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.datasetToRangeAxesMap,\n                that.datasetToRangeAxesMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainGridlineStroke,\n                that.domainGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainGridlinePaint,\n                that.domainGridlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeGridlineStroke,\n                that.rangeGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeGridlinePaint,\n                that.rangeGridlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainMinorGridlineStroke,\n                that.domainMinorGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainMinorGridlinePaint,\n                that.domainMinorGridlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke,\n                that.rangeMinorGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeMinorGridlinePaint,\n                that.rangeMinorGridlinePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainZeroBaselinePaint,\n                that.domainZeroBaselinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainZeroBaselineStroke,\n                that.domainZeroBaselineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeZeroBaselinePaint,\n                that.rangeZeroBaselinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke,\n                that.rangeZeroBaselineStroke)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainCrosshairStroke,\n                that.domainCrosshairStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainCrosshairPaint,\n                that.domainCrosshairPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeCrosshairStroke,\n                that.rangeCrosshairStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeCrosshairPaint,\n                that.rangeCrosshairPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundDomainMarkers,\n                that.foregroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundDomainMarkers,\n                that.backgroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundRangeMarkers,\n                that.foregroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundRangeMarkers,\n                that.backgroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundDomainMarkers,\n                that.foregroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundDomainMarkers,\n                that.backgroundDomainMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundRangeMarkers,\n                that.foregroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundRangeMarkers,\n                that.backgroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.annotations, that.annotations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.fixedLegendItems,\n                that.fixedLegendItems)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainTickBandPaint,\n                that.domainTickBandPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeTickBandPaint,\n                that.rangeTickBandPaint)) {\n            return false;\n        }\n        if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {\n            return false;\n        }\n        for (int i = 0; i < 4; i++) {\n            if (!PaintUtilities.equal(this.quadrantPaint[i],\n                    that.quadrantPaint[i])) {\n                return false;\n            }\n        }\n        return super.equals(obj);\n    }\n",
        "begin_line": 5309,
        "end_line": 5510,
        "comment": "\r\n     * Tests this plot for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createPieChart#327",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createPieChart(String title,\n                                            PieDataset dataset,\n                                            boolean legend,\n                                            boolean tooltips,\n                                            boolean urls) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator());\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator());\n        }\n        if (urls) {\n            plot.setURLGenerator(new StandardPieURLGenerator());\n        }\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n    }\n",
        "begin_line": 327,
        "end_line": 346,
        "comment": "\r\n     * Creates a pie chart with default settings.\r\n     * <P>\r\n     * The chart object returned by this method uses a {@link PiePlot} instance\r\n     * as the plot.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A pie chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setRenderer#1619",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)",
        "snippet": "    public void setRenderer(int index, XYItemRenderer renderer) {\n        setRenderer(index, renderer, true);\n    }\n",
        "begin_line": 1619,
        "end_line": 1621,
        "comment": "\r\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param index  the index.\r\n     * @param renderer  the renderer.\r\n     *\r\n     * @see #getRenderer(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.055
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.setLabelGenerator#1603",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
        "snippet": "    public void setLabelGenerator(PieSectionLabelGenerator generator) {\n        this.labelGenerator = generator;\n        fireChangeEvent();\n    }\n",
        "begin_line": 1603,
        "end_line": 1606,
        "comment": "\r\n     * Sets the section label generator and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     *\r\n     * @see #getLabelGenerator()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator()",
        "snippet": "    public StandardPieToolTipGenerator() {\n        this(DEFAULT_TOOLTIP_FORMAT);\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\r\n     * Creates an item label generator using default number formatters.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPieDataset.DefaultPieDataset#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DefaultPieDataset.java",
        "class_name": "org.jfree.data.general.DefaultPieDataset",
        "signature": "org.jfree.data.general.DefaultPieDataset.DefaultPieDataset()",
        "snippet": "    public DefaultPieDataset() {\n        this.data = new DefaultKeyedValues();\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\r\n     * Constructs a new dataset, initially empty.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPieDataset.setValue#196",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DefaultPieDataset.java",
        "class_name": "org.jfree.data.general.DefaultPieDataset",
        "signature": "org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, java.lang.Number)",
        "snippet": "    public void setValue(Comparable key, Number value) {\n        this.data.setValue(key, value);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 196,
        "end_line": 199,
        "comment": "\r\n     * Sets the data value for a key and sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     *\r\n     * @throws IllegalArgumentException if <code>key</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.PiePlot#538",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.general.PieDataset)",
        "snippet": "    public PiePlot(PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n\n        this.interiorGap = DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = DEFAULT_START_ANGLE;\n        this.direction = Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n\n        this.sectionPaintMap = new PaintMap();\n        this.baseSectionPaint = Color.gray;\n        this.autoPopulateSectionPaint = true;\n\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.autoPopulateSectionOutlinePaint = false;\n\n        this.sectionOutlineStrokeMap = new StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.autoPopulateSectionOutlineStroke = false;\n\n        this.explodePercentages = new TreeMap();\n\n        this.labelGenerator = new StandardPieSectionLabelGenerator();\n        this.labelFont = DEFAULT_LABEL_FONT;\n        this.labelPaint = DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new PieLabelDistributor(0);\n\n        this.simpleLabels = false;\n        this.simpleLabelOffset = new RectangleInsets(UnitType.RELATIVE, 0.18,\n                0.18, 0.18, 0.18);\n        this.labelPadding = new RectangleInsets(2, 2, 2, 2);\n\n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n\n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n",
        "begin_line": 538,
        "end_line": 591,
        "comment": "\r\n     * Creates a plot that will draw a pie chart for the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.setToolTipGenerator#2101",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)",
        "snippet": "    public void setToolTipGenerator(PieToolTipGenerator generator) {\n        this.toolTipGenerator = generator;\n        fireChangeEvent();\n    }\n",
        "begin_line": 2101,
        "end_line": 2104,
        "comment": "\r\n     * Sets the tool tip generator and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.  Set the generator to <code>null</code> if you\r\n     * don't want any tool tips.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     *\r\n     * @see #getToolTipGenerator()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String)",
        "snippet": "    public StandardPieToolTipGenerator(String labelFormat) {\n        this(labelFormat, Locale.getDefault());\n    }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\r\n     * Creates a pie tool tip generator for the default locale.\r\n     *\r\n     * @param labelFormat  the label format (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#123",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.util.Locale)",
        "snippet": "    public StandardPieToolTipGenerator(String labelFormat, Locale locale) {\n        this(labelFormat, NumberFormat.getNumberInstance(locale),\n                NumberFormat.getPercentInstance(locale));\n    }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "\r\n     * Creates a pie tool tip generator for the specified locale.\r\n     *\r\n     * @param labelFormat  the label format (<code>null</code> not permitted).\r\n     * @param locale  the locale (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public StandardPieToolTipGenerator(String labelFormat,\n            NumberFormat numberFormat, NumberFormat percentFormat) {\n        super(labelFormat, numberFormat, percentFormat);\n    }\n",
        "begin_line": 138,
        "end_line": 141,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not\r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages\r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintMap.clear#133",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintMap.java",
        "class_name": "org.jfree.chart.util.PaintMap",
        "signature": "org.jfree.chart.util.PaintMap.clear()",
        "snippet": "    public void clear() {\n        this.store.clear();\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\r\n     * Resets the map to empty.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0503
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.clearSectionPaints#988",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.clearSectionPaints(boolean)",
        "snippet": "    public void clearSectionPaints(boolean notify) {\n        this.sectionPaintMap.clear();\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 988,
        "end_line": 993,
        "comment": "\r\n     * Clears the section paint settings for this plot and, if requested, sends\r\n     * a {@link PlotChangeEvent} to all registered listeners.  Be aware that\r\n     * if the <code>autoPopulateSectionPaint</code> flag is set, the section\r\n     * paints may be repopulated using the same colours as before.\r\n     *\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.11\r\n     *\r\n     * @see #autoPopulateSectionPaint\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0503
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardChartTheme.applyToPlot#1235",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToPlot(org.jfree.chart.plot.Plot)",
        "snippet": "    protected void applyToPlot(Plot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        if (plot.getDrawingSupplier() != null) {\n            plot.setDrawingSupplier(getDrawingSupplier());\n        }\n        if (plot.getBackgroundPaint() != null) {\n            plot.setBackgroundPaint(this.plotBackgroundPaint);\n        }\n        plot.setOutlinePaint(this.plotOutlinePaint);\n\n        // now handle specific plot types (and yes, I know this is some\n        // really ugly code that has to be manually updated any time a new\n        // plot type is added - I should have written something much cooler,\n        // but I didn't and neither did anyone else).\n        if (plot instanceof PiePlot) {\n            applyToPiePlot((PiePlot) plot);\n        }\n        else if (plot instanceof MultiplePiePlot) {\n            applyToMultiplePiePlot((MultiplePiePlot) plot);\n        }\n        else if (plot instanceof CategoryPlot) {\n            applyToCategoryPlot((CategoryPlot) plot);\n        }\n        else if (plot instanceof XYPlot) {\n            applyToXYPlot((XYPlot) plot);\n        }\n        else if (plot instanceof FastScatterPlot) {\n            applyToFastScatterPlot((FastScatterPlot) plot);\n        }\n        else if (plot instanceof MeterPlot) {\n            applyToMeterPlot((MeterPlot) plot);\n        }\n        else if (plot instanceof ThermometerPlot) {\n            applyToThermometerPlot((ThermometerPlot) plot);\n        }\n        else if (plot instanceof SpiderWebPlot) {\n            applyToSpiderWebPlot((SpiderWebPlot) plot);\n        }\n        else if (plot instanceof PolarPlot) {\n            applyToPolarPlot((PolarPlot) plot);\n        }\n    }\n",
        "begin_line": 1235,
        "end_line": 1278,
        "comment": "\r\n     * Applies the attributes of this theme to a plot.\r\n     *\r\n     * @param plot  the plot (<code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0503
        },
        "num_failing_tests": 2
    },
    {
        "name": "StandardChartTheme.applyToPiePlot#1287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToPiePlot(org.jfree.chart.plot.PiePlot)",
        "snippet": "    protected void applyToPiePlot(PiePlot plot) {\n        plot.setLabelLinkPaint(this.labelLinkPaint);\n        plot.setLabelLinkStyle(this.labelLinkStyle);\n        plot.setLabelFont(this.regularFont);\n\n        // clear the section attributes so that the theme's DrawingSupplier\n        // will be used\n        if (plot.getAutoPopulateSectionPaint()) {\n            plot.clearSectionPaints(false);\n        }\n        if (plot.getAutoPopulateSectionOutlinePaint()) {\n            plot.clearSectionOutlinePaints(false);\n        }\n        if (plot.getAutoPopulateSectionOutlineStroke()) {\n            plot.clearSectionOutlineStrokes(false);\n        }\n    }\n",
        "begin_line": 1287,
        "end_line": 1303,
        "comment": "\r\n     * Applies the attributes of this theme to a {@link PiePlot} instance.\r\n     * This method also clears any set values for the section paint, outline\r\n     * etc, so that the theme's {@link DrawingSupplier} will be used.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0503
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.getBackgroundPaint#233",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.getBackgroundPaint()",
        "snippet": "    public Paint getBackgroundPaint() {\n        return this.backgroundPaint;\n    }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\r\n     * Returns the background paint.\r\n     *\r\n     * @return The background paint (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.setItemPaint#369",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setItemPaint(java.awt.Paint)",
        "snippet": "    public void setItemPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.itemPaint = paint;\n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 369,
        "end_line": 375,
        "comment": "\r\n     * Sets the item paint.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.getWrapper#569",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.getWrapper()",
        "snippet": "    public BlockContainer getWrapper() {\n        return this.wrapper;\n    }\n",
        "begin_line": 569,
        "end_line": 571,
        "comment": "\r\n     * Returns the wrapper container, if any.\r\n     *\r\n     * @return The wrapper container (possibly <code>null</code>).\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 2
    },
    {
        "name": "StandardChartTheme.apply#1133",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.apply(org.jfree.chart.JFreeChart)",
        "snippet": "    public void apply(JFreeChart chart) {\n        if (chart == null) {\n            throw new IllegalArgumentException(\"Null 'chart' argument.\");\n        }\n        TextTitle title = chart.getTitle();\n        if (title != null) {\n            title.setFont(this.extraLargeFont);\n            title.setPaint(this.titlePaint);\n        }\n\n        int subtitleCount = chart.getSubtitleCount();\n        for (int i = 0; i < subtitleCount; i++) {\n            applyToTitle(chart.getSubtitle(i));\n        }\n\n        chart.setBackgroundPaint(this.chartBackgroundPaint);\n\n        // now process the plot if there is one\n        Plot plot = chart.getPlot();\n        if (plot != null) {\n            applyToPlot(plot);\n        }\n    }\n",
        "begin_line": 1133,
        "end_line": 1155,
        "comment": "\r\n     * Applies this theme to the supplied chart.\r\n     *\r\n     * @param chart  the chart (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 2
    },
    {
        "name": "StandardChartTheme.applyToTitle#1162",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToTitle(org.jfree.chart.title.Title)",
        "snippet": "    protected void applyToTitle(Title title) {\n        if (title instanceof TextTitle) {\n            TextTitle tt = (TextTitle) title;\n            tt.setFont(this.largeFont);\n            tt.setPaint(this.subtitlePaint);\n        }\n        else if (title instanceof LegendTitle) {\n            LegendTitle lt = (LegendTitle) title;\n            if (lt.getBackgroundPaint() != null) {\n                lt.setBackgroundPaint(this.legendBackgroundPaint);\n            }\n            lt.setItemFont(this.regularFont);\n            lt.setItemPaint(this.legendItemPaint);\n            if (lt.getWrapper() != null) {\n                applyToBlockContainer(lt.getWrapper());\n            }\n        }\n        else if (title instanceof PaintScaleLegend) {\n            PaintScaleLegend psl = (PaintScaleLegend) title;\n            psl.setBackgroundPaint(this.legendBackgroundPaint);\n            ValueAxis axis = psl.getAxis();\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n        else if (title instanceof CompositeTitle) {\n            CompositeTitle ct = (CompositeTitle) title;\n            BlockContainer bc = ct.getContainer();\n            List blocks = bc.getBlocks();\n            Iterator iterator = blocks.iterator();\n            while (iterator.hasNext()) {\n                Block b = (Block) iterator.next();\n                if (b instanceof Title) {\n                    applyToTitle((Title) b);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1162,
        "end_line": 1199,
        "comment": "\r\n     * Applies the attributes of this theme to the specified title.\r\n     *\r\n     * @param title  the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getSubtitle#737",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getSubtitle(int)",
        "snippet": "    public Title getSubtitle(int index) {\n        if ((index < 0) || (index >= getSubtitleCount())) {\n            throw new IllegalArgumentException(\"Index out of range.\");\n        }\n        return (Title) this.subtitles.get(index);\n    }\n",
        "begin_line": 737,
        "end_line": 742,
        "comment": "\r\n     * Returns a chart subtitle.\r\n     *\r\n     * @param index  the index of the chart subtitle (zero based).\r\n     *\r\n     * @return A chart subtitle.\r\n     *\r\n     * @see #addSubtitle(Title)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.setItemFont#347",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setItemFont(java.awt.Font)",
        "snippet": "    public void setItemFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.itemFont = font;\n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 347,
        "end_line": 353,
        "comment": "\r\n     * Sets the item font and sends a {@link TitleChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0492
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetUtilities.iterateToFindDomainBounds#1292",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(org.jfree.data.xy.XYDataset, java.util.List, boolean)",
        "snippet": "    public static Range iterateToFindDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (visibleSeriesKeys == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'visibleSeriesKeys' argument.\");\n        }\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            // handle special case of IntervalXYDataset\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            // standard case - plain XYDataset\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
        "begin_line": 1292,
        "end_line": 1349,
        "comment": "\r\n     * Returns the range of x-values in the specified dataset for the\r\n     * data items belonging to the visible series.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param visibleSeriesKeys  the visible series keys (<code>null</code> not\r\n     *     permitted).\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *     y-interval for the dataset is included (this only applies if the\r\n     *     dataset is an instance of IntervalXYDataset).\r\n     *\r\n     * @return The x-range (possibly <code>null</code>).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getAutoPopulateSectionPaint#1031",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionPaint()",
        "snippet": "    public boolean getAutoPopulateSectionPaint() {\n        return this.autoPopulateSectionPaint;\n    }\n",
        "begin_line": 1031,
        "end_line": 1033,
        "comment": "\r\n     * Returns the flag that controls whether or not the section paint is\r\n     * auto-populated by the {@link #lookupSectionPaint(Comparable)} method.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getAutoPopulateSectionOutlinePaint#1241",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlinePaint()",
        "snippet": "    public boolean getAutoPopulateSectionOutlinePaint() {\n        return this.autoPopulateSectionOutlinePaint;\n    }\n",
        "begin_line": 1241,
        "end_line": 1243,
        "comment": "\r\n     * Returns the flag that controls whether or not the section outline paint\r\n     * is auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\r\n     * method.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.getAutoPopulateSectionOutlineStroke#1424",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlineStroke()",
        "snippet": "    public boolean getAutoPopulateSectionOutlineStroke() {\n        return this.autoPopulateSectionOutlineStroke;\n    }\n",
        "begin_line": 1424,
        "end_line": 1426,
        "comment": "\r\n     * Returns the flag that controls whether or not the section outline stroke\r\n     * is auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\r\n     * method.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.setLabelLinkStyle#1709",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)",
        "snippet": "    public void setLabelLinkStyle(PieLabelLinkStyle style) {\n        if (style == null) {\n            throw new IllegalArgumentException(\"Null 'style' argument.\");\n        }\n        this.labelLinkStyle = style;\n        fireChangeEvent();\n    }\n",
        "begin_line": 1709,
        "end_line": 1715,
        "comment": "\r\n     * Sets the label link style and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param style  the new style (<code>null</code> not permitted).\r\n     *\r\n     * @see #getLabelLinkStyle()\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.setLabelLinkPaint#1763",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkPaint(java.awt.Paint)",
        "snippet": "    public void setLabelLinkPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelLinkPaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 1763,
        "end_line": 1769,
        "comment": "\r\n     * Sets the paint used for the lines that connect pie sections to their\r\n     * corresponding labels, and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getLabelLinkPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.setLabelFont#1832",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.setLabelFont(java.awt.Font)",
        "snippet": "    public void setLabelFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        this.labelFont = font;\n        fireChangeEvent();\n    }\n",
        "begin_line": 1832,
        "end_line": 1838,
        "comment": "\r\n     * Sets the section label font and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     *\r\n     * @see #getLabelFont()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.iterateToFindRangeBounds#1368",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(org.jfree.data.xy.XYDataset, java.util.List, org.jfree.data.Range, boolean)",
        "snippet": "    public static Range iterateToFindRangeBounds(XYDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (visibleSeriesKeys == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'visibleSeriesKeys' argument.\");\n        }\n        if (xRange == null) {\n            throw new IllegalArgumentException(\"Null 'xRange' argument\");\n        }\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        // handle three cases by dataset type\n        if (includeInterval && dataset instanceof OHLCDataset) {\n            // handle special case of OHLCDataset\n            OHLCDataset ohlc = (OHLCDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = ohlc.getXValue(series, item);\n                    if (xRange.contains(x)) {\n                        double lvalue = ohlc.getLowValue(series, item);\n                        double uvalue = ohlc.getHighValue(series, item);\n                        if (!Double.isNaN(lvalue)) {\n                            minimum = Math.min(minimum, lvalue);\n                        }\n                        if (!Double.isNaN(uvalue)) {\n                            maximum = Math.max(maximum, uvalue);\n                        }\n                    }\n                }\n            }\n        }\n        else if (includeInterval && dataset instanceof BoxAndWhiskerXYDataset) {\n            // handle special case of BoxAndWhiskerXYDataset\n            BoxAndWhiskerXYDataset bx = (BoxAndWhiskerXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = bx.getXValue(series, item);\n                    if (xRange.contains(x)) {\n                        Number lvalue = bx.getMinRegularValue(series, item);\n                        Number uvalue = bx.getMaxRegularValue(series, item);\n                        if (lvalue != null) {\n                            minimum = Math.min(minimum, lvalue.doubleValue());\n                        }\n                        if (uvalue != null) {\n                            maximum = Math.max(maximum, uvalue.doubleValue());\n                        }\n                    }\n                }\n            }\n        }\n        else if (includeInterval && dataset instanceof IntervalXYDataset) {\n            // handle special case of IntervalXYDataset\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = ixyd.getXValue(series, item);\n                    if (xRange.contains(x)) {\n                        double lvalue = ixyd.getStartYValue(series, item);\n                        double uvalue = ixyd.getEndYValue(series, item);\n                        if (!Double.isNaN(lvalue)) {\n                            minimum = Math.min(minimum, lvalue);\n                        }\n                        if (!Double.isNaN(uvalue)) {\n                            maximum = Math.max(maximum, uvalue);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            // standard case - plain XYDataset\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    double y = dataset.getYValue(series, item);\n                    if (xRange.contains(x)) {\n                        if (!Double.isNaN(y)) {\n                            minimum = Math.min(minimum, y);\n                            maximum = Math.max(maximum, y);\n                        }\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
        "begin_line": 1368,
        "end_line": 1480,
        "comment": "\r\n     * Returns the range of y-values in the specified dataset for the\r\n     * data items belonging to the visible series and with x-values in the\r\n     * given range.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param visibleSeriesKeys  the visible series keys (<code>null</code> not\r\n     *     permitted).\r\n     * @param xRange  the x-range (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *     y-interval for the dataset is included (this only applies if the\r\n     *     dataset is an instance of IntervalXYDataset).\r\n     *\r\n     * @return The y-range (possibly <code>null</code>).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createXYLineChart#1717",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createXYLineChart(String title,\n                                               String xAxisLabel,\n                                               String yAxisLabel,\n                                               XYDataset dataset,\n                                               PlotOrientation orientation,\n                                               boolean legend,\n                                               boolean tooltips,\n                                               boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        XYItemRenderer renderer = new XYLineAndShapeRenderer(true, false);\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);\n        plot.setOrientation(orientation);\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardXYURLGenerator());\n        }\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n",
        "begin_line": 1717,
        "end_line": 1747,
        "comment": "\r\n     * Creates a line chart (based on an {@link XYDataset}) with default\r\n     * settings.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param xAxisLabel  a label for the X-axis (<code>null</code> permitted).\r\n     * @param yAxisLabel  a label for the Y-axis (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical)\r\n     *                     (<code>null</code> NOT permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return The chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0465
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.setInsets#517",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setInsets(RectangleInsets insets) {\n        setInsets(insets, true);\n    }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\r\n     * Sets the insets for the plot and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param insets  the new insets (<code>null</code> not permitted).\r\n     *\r\n     * @see #getInsets()\r\n     * @see #setInsets(RectangleInsets, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0445
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.setInsets#532",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets, boolean)",
        "snippet": "    public void setInsets(RectangleInsets insets, boolean notify) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (!this.insets.equals(insets)) {\n            this.insets = insets;\n            if (notify) {\n                fireChangeEvent();\n            }\n        }\n\n    }\n",
        "begin_line": 532,
        "end_line": 543,
        "comment": "\r\n     * Sets the insets for the plot and, if requested,  and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param insets  the new insets (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether the registered listeners are\r\n     *                notified.\r\n     *\r\n     * @see #getInsets()\r\n     * @see #setInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0445
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.notifyListeners#393",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent)",
        "snippet": "    protected void notifyListeners(TitleChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.listenerList.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == TitleChangeListener.class) {\n                    ((TitleChangeListener) listeners[i + 1]).titleChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 393,
        "end_line": 403,
        "comment": "\r\n     * Notifies all registered listeners that the chart title has changed in\r\n     * some way.\r\n     *\r\n     * @param event  an object that contains information about the change to\r\n     *               the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.setFont#322",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.setFont(java.awt.Font)",
        "snippet": "    public void setFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (!this.font.equals(font)) {\n            this.font = font;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 322,
        "end_line": 330,
        "comment": "\r\n     * Sets the font used to display the title string.  Registered listeners\r\n     * are notified that the title has been modified.\r\n     *\r\n     * @param font  the new font (<code>null</code> not permitted).\r\n     *\r\n     * @see #getFont()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.setPaint#351",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.setPaint(java.awt.Paint)",
        "snippet": "    public void setPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (!this.paint.equals(paint)) {\n            this.paint = paint;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 351,
        "end_line": 359,
        "comment": "\r\n     * Sets the paint used to display the title string.  Registered listeners\r\n     * are notified that the title has been modified.\r\n     *\r\n     * @param paint  the new paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.getBackgroundPaint#552",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getBackgroundPaint()",
        "snippet": "    public Paint getBackgroundPaint() {\n        return this.backgroundPaint;\n    }\n",
        "begin_line": 552,
        "end_line": 554,
        "comment": "\r\n     * Returns the background color of the plot area.\r\n     *\r\n     * @return The paint (possibly <code>null</code>).\r\n     *\r\n     * @see #setBackgroundPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.setBackgroundPaint#564",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n\n        if (paint == null) {\n            if (this.backgroundPaint != null) {\n                this.backgroundPaint = null;\n                fireChangeEvent();\n            }\n        }\n        else {\n            if (this.backgroundPaint != null) {\n                if (this.backgroundPaint.equals(paint)) {\n                    return;  // nothing to do\n                }\n            }\n            this.backgroundPaint = paint;\n            fireChangeEvent();\n        }\n\n    }\n",
        "begin_line": 564,
        "end_line": 582,
        "comment": "\r\n     * Sets the background color of the plot area and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     *\r\n     * @see #getBackgroundPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.setDrawingSupplier#641",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)",
        "snippet": "    public void setDrawingSupplier(DrawingSupplier supplier) {\n        this.drawingSupplier = supplier;\n        fireChangeEvent();\n    }\n",
        "begin_line": 641,
        "end_line": 644,
        "comment": "\r\n     * Sets the drawing supplier for the plot and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.  The drawing\r\n     * supplier is responsible for supplying a limitless (possibly repeating)\r\n     * sequence of <code>Paint</code>, <code>Stroke</code> and\r\n     * <code>Shape</code> objects that the plot's renderer(s) can use to\r\n     * populate its (their) tables.\r\n     *\r\n     * @param supplier  the new supplier.\r\n     *\r\n     * @see #getDrawingSupplier()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.setOutlinePaint#845",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setOutlinePaint(java.awt.Paint)",
        "snippet": "    public void setOutlinePaint(Paint paint) {\n        if (paint == null) {\n            if (this.outlinePaint != null) {\n                this.outlinePaint = null;\n                fireChangeEvent();\n            }\n        }\n        else {\n            if (this.outlinePaint != null) {\n                if (this.outlinePaint.equals(paint)) {\n                    return;  // nothing to do\n                }\n            }\n            this.outlinePaint = paint;\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 845,
        "end_line": 861,
        "comment": "\r\n     * Sets the paint used to draw the outline of the plot area and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.  If you set this\r\n     * attribute to <code>null</code>, no outline will be drawn.\r\n     *\r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     *\r\n     * @see #getOutlinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "StandardChartTheme.getDrawingSupplier#1100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.getDrawingSupplier()",
        "snippet": "    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        if (this.drawingSupplier instanceof PublicCloneable) {\n            PublicCloneable pc = (PublicCloneable) this.drawingSupplier;\n              try {\n                result = (DrawingSupplier) pc.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                e.printStackTrace();\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1100,
        "end_line": 1112,
        "comment": "\r\n     * Returns a clone of the drawing supplier for this theme.\r\n     *\r\n     * @return A clone of the drawing supplier.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.JFreeChart#376",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean)",
        "snippet": "    public JFreeChart(String title, Font titleFont, Plot plot,\n                      boolean createLegend) {\n\n        if (plot == null) {\n            throw new NullPointerException(\"Null 'plot' argument.\");\n        }\n\n        // create storage for listeners...\n        this.progressListeners = new EventListenerList();\n        this.changeListeners = new EventListenerList();\n        this.notify = true;  // default is to notify listeners when the\n                             // chart changes\n\n        this.renderingHints = new RenderingHints(\n                RenderingHints.KEY_ANTIALIASING,\n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        this.borderVisible = false;\n        this.borderStroke = new BasicStroke(1.0f);\n        this.borderPaint = Color.black;\n\n        this.padding = RectangleInsets.ZERO_INSETS;\n\n        this.plot = plot;\n        plot.addChangeListener(this);\n\n        this.subtitles = new ArrayList();\n\n        // create a legend, if requested...\n        if (createLegend) {\n            LegendTitle legend = new LegendTitle(this.plot);\n            legend.setMargin(new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n            legend.setFrame(new LineBorder());\n            legend.setBackgroundPaint(Color.white);\n            legend.setPosition(RectangleEdge.BOTTOM);\n            this.subtitles.add(legend);\n            legend.addChangeListener(this);\n        }\n\n        // add the chart title, if one has been specified...\n        if (title != null) {\n            if (titleFont == null) {\n                titleFont = DEFAULT_TITLE_FONT;\n            }\n            this.title = new TextTitle(title, titleFont);\n            this.title.addChangeListener(this);\n        }\n\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n\n        this.backgroundImage = DEFAULT_BACKGROUND_IMAGE;\n        this.backgroundImageAlignment = DEFAULT_BACKGROUND_IMAGE_ALIGNMENT;\n        this.backgroundImageAlpha = DEFAULT_BACKGROUND_IMAGE_ALPHA;\n\n    }\n",
        "begin_line": 376,
        "end_line": 430,
        "comment": "\r\n     * Creates a new chart with the given title and plot.  The\r\n     * <code>createLegend</code> argument specifies whether or not a legend\r\n     * should be added to the chart.\r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range\r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param titleFont  the font for displaying the chart title\r\n     *                   (<code>null</code> permitted).\r\n     * @param plot  controller of the visual representation of the data\r\n     *              (<code>null</code> not permitted).\r\n     * @param createLegend  a flag indicating whether or not a legend should\r\n     *                      be created for the chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getTitle#569",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getTitle()",
        "snippet": "    public TextTitle getTitle() {\n        return this.title;\n    }\n",
        "begin_line": 569,
        "end_line": 571,
        "comment": "\r\n     * Returns the main chart title.  Very often a chart will have just one\r\n     * title, so we make this case simple by providing accessor methods for\r\n     * the main title.  However, multiple titles are supported - see the\r\n     * {@link #addSubtitle(Title)} method.\r\n     *\r\n     * @return The chart title (possibly <code>null</code>).\r\n     *\r\n     * @see #setTitle(TextTitle)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.titleChanged#1571",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.titleChanged(org.jfree.chart.event.TitleChangeEvent)",
        "snippet": "    public void titleChanged(TitleChangeEvent event) {\n        event.setChart(this);\n        notifyListeners(event);\n    }\n",
        "begin_line": 1571,
        "end_line": 1574,
        "comment": "\r\n     * Receives notification that a chart title has changed, and passes this\r\n     * on to registered listeners.\r\n     *\r\n     * @param event  information about the chart title change.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.setPosition#253",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void setPosition(RectangleEdge position) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (this.position != position) {\n            this.position = position;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 253,
        "end_line": 261,
        "comment": "\r\n     * Sets the position for the title and sends a {@link TitleChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param position  the position (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0429
        },
        "num_failing_tests": 2
    },
    {
        "name": "LineBorder.LineBorder#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder()",
        "snippet": "    public LineBorder() {\n        this(Color.black, new BasicStroke(1.0f), new RectangleInsets(1.0, 1.0,\n                1.0, 1.0));\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "\r\n     * Creates a default border.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0429
        },
        "num_failing_tests": 2
    },
    {
        "name": "LineBorder.LineBorder#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public LineBorder(Paint paint, Stroke stroke, RectangleInsets insets) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        this.paint = paint;\n        this.stroke = stroke;\n        this.insets = insets;\n    }\n",
        "begin_line": 96,
        "end_line": 109,
        "comment": "\r\n     * Creates a new border with the specified color.\r\n     *\r\n     * @param paint  the color (<code>null</code> not permitted).\r\n     * @param stroke  the border stroke (<code>null</code> not permitted).\r\n     * @param insets  the insets (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0429
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractBlock.setMargin#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setMargin(RectangleInsets margin) {\n        if (margin == null) {\n            throw new IllegalArgumentException(\"Null 'margin' argument.\");\n        }\n        this.margin = margin;\n    }\n",
        "begin_line": 208,
        "end_line": 213,
        "comment": "\r\n     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no\r\n     * padding).\r\n     *\r\n     * @param margin  the margin (<code>null</code> not permitted).\r\n     *\r\n     * @see #getMargin()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0429
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractBlock.setFrame#250",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame)",
        "snippet": "    public void setFrame(BlockFrame frame) {\n        if (frame == null) {\n            throw new IllegalArgumentException(\"Null 'frame' argument.\");\n        }\n        this.frame = frame;\n    }\n",
        "begin_line": 250,
        "end_line": 255,
        "comment": "\r\n     * Sets the frame (or border).\r\n     *\r\n     * @param frame  the frame (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.5\r\n     * @see #getFrame()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0429
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEvent.setChart#112",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setChart(org.jfree.chart.JFreeChart)",
        "snippet": "    public void setChart(JFreeChart chart) {\n        this.chart = chart;\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\r\n     * Sets the chart that generated the change event.\r\n     *\r\n     * @param chart  the chart that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getSubtitleCount#724",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getSubtitleCount()",
        "snippet": "    public int getSubtitleCount() {\n        return this.subtitles.size();\n    }\n",
        "begin_line": 724,
        "end_line": 726,
        "comment": "\r\n     * Returns the number of titles for the chart.\r\n     *\r\n     * @return The number of titles for the chart.\r\n     *\r\n     * @see #getSubtitles()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getPlot#819",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getPlot()",
        "snippet": "    public Plot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 819,
        "end_line": 821,
        "comment": "\r\n     * Returns the plot for the chart.  The plot is a class responsible for\r\n     * coordinating the visual representation of the data, including the axes\r\n     * (if any).\r\n     *\r\n     * @return The plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.plotChanged#1582",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.plotChanged(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void plotChanged(PlotChangeEvent event) {\n        event.setChart(this);\n        notifyListeners(event);\n    }\n",
        "begin_line": 1582,
        "end_line": 1585,
        "comment": "\r\n     * Receives notification that the plot has changed, and passes this on to\r\n     * registered listeners.\r\n     *\r\n     * @param event  information about the plot change.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.setBackgroundPaint#243",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n        this.backgroundPaint = paint;\n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "\r\n     * Sets the background paint for the legend and sends a\r\n     * {@link TitleChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0424
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.TextTitle#200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font)",
        "snippet": "    public TextTitle(String text, Font font) {\n        this(text, font, TextTitle.DEFAULT_TEXT_PAINT, Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT,\n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 200,
        "end_line": 204,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     *\r\n     * @param text  the title text (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0422
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.setBackgroundPaint#970",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n\n        if (this.backgroundPaint != null) {\n            if (!this.backgroundPaint.equals(paint)) {\n                this.backgroundPaint = paint;\n                fireChartChanged();\n            }\n        }\n        else {\n            if (paint != null) {\n                this.backgroundPaint = paint;\n                fireChartChanged();\n            }\n        }\n\n    }\n",
        "begin_line": 970,
        "end_line": 985,
        "comment": "\r\n     * Sets the paint used to fill the chart background and sends a\r\n     * {@link ChartChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     *\r\n     * @see #getBackgroundPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0422
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.Title#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title()",
        "snippet": "    protected Title() {\n        this(Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT,\n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 138,
        "end_line": 142,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.LegendTitle#176",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource)",
        "snippet": "    public LegendTitle(LegendItemSource source) {\n        this(source, new FlowArrangement(), new ColumnArrangement());\n    }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\r\n     * Constructs a new (empty) legend for the specified source.\r\n     *\r\n     * @param source  the source.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.LegendTitle#189",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement)",
        "snippet": "    public LegendTitle(LegendItemSource source,\n                       Arrangement hLayout, Arrangement vLayout) {\n        this.sources = new LegendItemSource[] {source};\n        this.items = new BlockContainer(hLayout);\n        this.hLayout = hLayout;\n        this.vLayout = vLayout;\n        this.backgroundPaint = null;\n        this.legendItemGraphicEdge = RectangleEdge.LEFT;\n        this.legendItemGraphicAnchor = RectangleAnchor.CENTER;\n        this.legendItemGraphicLocation = RectangleAnchor.CENTER;\n        this.legendItemGraphicPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n        this.itemFont = DEFAULT_ITEM_FONT;\n        this.itemPaint = DEFAULT_ITEM_PAINT;\n        this.itemLabelPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 189,
        "end_line": 203,
        "comment": "\r\n     * Creates a new legend title with the specified arrangement.\r\n     *\r\n     * @param source  the source.\r\n     * @param hLayout  the horizontal item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     * @param vLayout  the vertical item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowArrangement.FlowArrangement#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement()",
        "snippet": "    public FlowArrangement() {\n        this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowArrangement.FlowArrangement#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
        "snippet": "    public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign,\n                           double hGap, double vGap) {\n        this.horizontalAlignment = hAlign;\n        this.verticalAlignment = vAlign;\n        this.horizontalGap = hGap;\n        this.verticalGap = vGap;\n    }\n",
        "begin_line": 91,
        "end_line": 97,
        "comment": "\r\n     * Creates a new instance.\r\n     *\r\n     * @param hAlign  the horizontal alignment (currently ignored).\r\n     * @param vAlign  the vertical alignment (currently ignored).\r\n     * @param hGap  the horizontal gap.\r\n     * @param vGap  the vertical gap.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "ColumnArrangement.ColumnArrangement#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement()",
        "snippet": "    public ColumnArrangement() {\n    }\n",
        "begin_line": 78,
        "end_line": 79,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "BlockContainer.BlockContainer#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
        "snippet": "    public BlockContainer(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;\n        this.blocks = new ArrayList();\n    }\n",
        "begin_line": 93,
        "end_line": 99,
        "comment": "\r\n     * Creates a new instance with the specified arrangement.\r\n     *\r\n     * @param arrangement  the arrangement manager (<code>null</code> not\r\n     *                     permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.notifyListeners#1513",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "    protected void notifyListeners(ChartChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.changeListeners.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == ChartChangeListener.class) {\n                    ((ChartChangeListener) listeners[i + 1]).chartChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1513,
        "end_line": 1523,
        "comment": "\r\n     * Sends a {@link ChartChangeEvent} to all registered listeners.\r\n     *\r\n     * @param event  information about the event that triggered the\r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0418
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.TextTitle#219",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public TextTitle(String text, Font font, Paint paint,\n                     RectangleEdge position,\n                     HorizontalAlignment horizontalAlignment,\n                     VerticalAlignment verticalAlignment,\n                     RectangleInsets padding) {\n\n        super(position, horizontalAlignment, verticalAlignment, padding);\n\n        if (text == null) {\n            throw new NullPointerException(\"Null 'text' argument.\");\n        }\n        if (font == null) {\n            throw new NullPointerException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new NullPointerException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        // the textAlignment and the horizontalAlignment are separate things,\n        // but it makes sense for the default textAlignment to match the\n        // title's horizontal alignment...\n        this.textAlignment = horizontalAlignment;\n        this.backgroundPaint = null;\n        this.content = null;\n        this.toolTipText = null;\n        this.urlText = null;\n\n    }\n",
        "begin_line": 219,
        "end_line": 248,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param text  the text for the title (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     * @param paint  the title paint (<code>null</code> not permitted).\r\n     * @param position  the title position (<code>null</code> not permitted).\r\n     * @param horizontalAlignment  the horizontal alignment (<code>null</code>\r\n     *                             not permitted).\r\n     * @param verticalAlignment  the vertical alignment (<code>null</code> not\r\n     *                           permitted).\r\n     * @param padding  the space to leave around the outside of the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0412
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.clone#543",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.clone()",
        "snippet": "    public Object clone() throws CloneNotSupportedException {\n        DefaultDrawingSupplier clone = (DefaultDrawingSupplier) super.clone();\n        return clone;\n    }\n",
        "begin_line": 543,
        "end_line": 546,
        "comment": "\r\n     * Returns a clone.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException if a component of the supplier does\r\n     *                                    not support cloning.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.getDomainAxisCount#944",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisCount()",
        "snippet": "    public int getDomainAxisCount() {\n        return this.domainAxes.size();\n    }\n",
        "begin_line": 944,
        "end_line": 946,
        "comment": "\r\n     * Returns the number of domain axes.\r\n     *\r\n     * @return The axis count.\r\n     *\r\n     * @see #getRangeAxisCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getRangeAxisCount#1242",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisCount()",
        "snippet": "    public int getRangeAxisCount() {\n        return this.rangeAxes.size();\n    }\n",
        "begin_line": 1242,
        "end_line": 1244,
        "comment": "\r\n     * Returns the number of range axes.\r\n     *\r\n     * @return The axis count.\r\n     *\r\n     * @see #getDomainAxisCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setDomainZeroBaselinePaint#2248",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselinePaint(java.awt.Paint)",
        "snippet": "    public void setDomainZeroBaselinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.domainZeroBaselinePaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 2248,
        "end_line": 2254,
        "comment": "\r\n     * Sets the paint for the zero baseline plotted against the domain axis and\r\n     * sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.5\r\n     *\r\n     * @see #getDomainZeroBaselinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setDomainCrosshairPaint#4702",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairPaint(java.awt.Paint)",
        "snippet": "    public void setDomainCrosshairPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.domainCrosshairPaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 4702,
        "end_line": 4708,
        "comment": "\r\n     * Sets the paint used to draw the crosshairs (if visible) and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint the new crosshair paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getDomainCrosshairPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardChartTheme.applyToXYPlot#1379",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToXYPlot(org.jfree.chart.plot.XYPlot)",
        "snippet": "    protected void applyToXYPlot(XYPlot plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        // process all domain axes\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        // process all range axes\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = (ValueAxis) plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        // process all renderers\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n\n        // process all annotations\n        Iterator iter = plot.getAnnotations().iterator();\n        while (iter.hasNext()) {\n            XYAnnotation a = (XYAnnotation) iter.next();\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1379,
        "end_line": 1441,
        "comment": "\r\n     * Applies the attributes of this theme to a {@link XYPlot}.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardChartTheme.applyToXYItemRenderer#1653",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToXYItemRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)",
        "snippet": "    protected void applyToXYItemRenderer(XYItemRenderer renderer) {\n        if (renderer == null) {\n            throw new IllegalArgumentException(\"Null 'renderer' argument.\");\n        }\n        if (renderer instanceof AbstractRenderer) {\n            applyToAbstractRenderer((AbstractRenderer) renderer);\n        }\n        renderer.setBaseItemLabelFont(this.regularFont);\n        renderer.setBaseItemLabelPaint(this.itemLabelPaint);\n        if (renderer instanceof XYBarRenderer) {\n            XYBarRenderer br = (XYBarRenderer) renderer;\n            br.setBarPainter(this.xyBarPainter);\n            br.setShadowVisible(this.shadowVisible);\n        }\n    }\n",
        "begin_line": 1653,
        "end_line": 1667,
        "comment": "\r\n     * Applies the settings of this theme to the specified renderer.\r\n     *\r\n     * @param renderer  the renderer (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.getDrawingSupplier#617",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getDrawingSupplier()",
        "snippet": "    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        Plot p = getParent();\n        if (p != null) {\n            result = p.getDrawingSupplier();\n        }\n        else {\n            result = this.drawingSupplier;\n        }\n        return result;\n    }\n",
        "begin_line": 617,
        "end_line": 627,
        "comment": "\r\n     * Returns the drawing supplier for the plot.\r\n     *\r\n     * @return The drawing supplier (possibly <code>null</code>).\r\n     *\r\n     * @see #setDrawingSupplier(DrawingSupplier)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProjectInfo.ProjectInfo#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo()",
        "snippet": "    public ProjectInfo() {\n        // nothing required\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Constructs an empty project info object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProjectInfo.setLogo#110",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image)",
        "snippet": "    public void setLogo(final Image logo) {\n        this.logo = logo;\n    }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * Sets the project logo.\n     *\n     * @param logo  the project logo.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProjectInfo.setLicenceText#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String)",
        "snippet": "    public void setLicenceText(final String licenceText) {\n        this.licenceText = licenceText;\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * Sets the project licence text.\n     *\n     * @param licenceText  the licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProjectInfo.setContributors#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List)",
        "snippet": "    public void setContributors(final List contributors) {\n        this.contributors = contributors;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Sets the list of contributors.\n     *\n     * @param contributors  the list of contributors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Licences.getInstance#798",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getInstance()",
        "snippet": "    public static Licences getInstance() {\n        if (singleton == null) {\n            singleton = new Licences();\n        }\n        return singleton;\n    }\n",
        "begin_line": 798,
        "end_line": 803,
        "comment": "\n     * Returns a reference to this class.\n     *\n     * @return the instance reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Licences.getLGPL#821",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getLGPL()",
        "snippet": "    public String getLGPL() {\n        return LGPL;\n    }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "\n     * Returns the LGPL text in a non static way to prevent the compiler\n     * to copy the contents of the field.\n     *\n     * @return the LGPL licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Library.Library#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.Library()",
        "snippet": "    protected Library() {\n        // nothing required\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Creates a new library reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Library.setInfo#127",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setInfo(java.lang.String)",
        "snippet": "    protected void setInfo(String info) {\n        this.info = info;\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\n     * Sets the project info.\n     *\n     * @param info  the project info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Library.setLicenceName#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setLicenceName(java.lang.String)",
        "snippet": "    protected void setLicenceName(String licenceName) {\n        this.licenceName = licenceName;\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * Sets the licence name.\n     *\n     * @param licenceName  the licence name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Library.setName#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setName(java.lang.String)",
        "snippet": "    protected void setName(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Sets the project name.\n     *\n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Library.setVersion#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setVersion(java.lang.String)",
        "snippet": "    protected void setVersion(String version) {\n        this.version = version;\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * Sets the version identifier.\n     *\n     * @param version  the version identifier.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Contributor.Contributor#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "class_name": "org.jfree.chart.ui.Contributor",
        "signature": "org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String)",
        "snippet": "    public Contributor(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\n     * Creates a new contributor.\n     *\n     * @param name  the name.\n     * @param email  the e-mail address.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicProjectInfo.BasicProjectInfo#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo()",
        "snippet": "    public BasicProjectInfo() {\n        this.libraries = new ArrayList();\n        this.optionalLibraries = new ArrayList();\n    }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicProjectInfo.setCopyright#197",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String)",
        "snippet": "    public void setCopyright(String copyright) {\n        this.copyright = copyright;\n    }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * Sets the project copyright statement.\n     *\n     * @param copyright  the project copyright statement.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicProjectInfo.setInfo#206",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String)",
        "snippet": "    public void setInfo(String info) {\n        super.setInfo(info);\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Sets the project info string (for example, this could be the project URL).\n     *\n     * @param info  the info string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicProjectInfo.setLicenceName#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String)",
        "snippet": "    public void setLicenceName(String licence) {\n        super.setLicenceName(licence);\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Sets the license name.\n     *\n     * @param licence  the license name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicProjectInfo.setName#224",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String)",
        "snippet": "    public void setName(String name) {\n        super.setName(name);\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * Sets the project name.\n     *\n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicProjectInfo.setVersion#233",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String)",
        "snippet": "    public void setVersion(String version) {\n        super.setVersion(version);\n    }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n     * Sets the project version number.\n     *\n     * @param version  the version number.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.addChangeListener#373",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener)",
        "snippet": "    public void addChangeListener(TitleChangeListener listener) {\n        this.listenerList.add(TitleChangeListener.class, listener);\n    }\n",
        "begin_line": 373,
        "end_line": 375,
        "comment": "\r\n     * Registers an object for notification of changes to the title.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChartResources.getContents#51",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "signature": "org.jfree.chart.resources.JFreeChartResources.getContents()",
        "snippet": "    public Object[][] getContents() {\n        return CONTENTS;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\r\n     * Returns the array of strings in the resource bundle.\r\n     *\r\n     * @return The resources.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleInsets.equals#180",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof RectangleInsets)) {\n                return false;\n        }\n        final RectangleInsets that = (RectangleInsets) obj;\n        if (that.unitType != this.unitType) {\n            return false;\n        }\n        if (this.left != that.left) {\n            return false;\n        }\n        if (this.right != that.right) {\n            return false;\n        }\n        if (this.top != that.top) {\n            return false;\n        }\n        if (this.bottom != that.bottom) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 180,
        "end_line": 204,
        "comment": "\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setAxisOffset#769",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setAxisOffset(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setAxisOffset(RectangleInsets offset) {\n        if (offset == null) {\n            throw new IllegalArgumentException(\"Null 'offset' argument.\");\n        }\n        this.axisOffset = offset;\n        fireChangeEvent();\n    }\n",
        "begin_line": 769,
        "end_line": 775,
        "comment": "\r\n     * Sets the axis offsets (gap between the data area and the axes) and sends\r\n     * a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset (<code>null</code> not permitted).\r\n     *\r\n     * @see #getAxisOffset()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setDomainGridlinePaint#1936",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlinePaint(java.awt.Paint)",
        "snippet": "    public void setDomainGridlinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.domainGridlinePaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 1936,
        "end_line": 1942,
        "comment": "\r\n     * Sets the paint for the grid lines plotted against the domain axis, and\r\n     * sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @throws IllegalArgumentException if <code>paint</code> is\r\n     *     <code>null</code>.\r\n     *\r\n     * @see #getDomainGridlinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setRangeGridlinePaint#2057",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlinePaint(java.awt.Paint)",
        "snippet": "    public void setRangeGridlinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.rangeGridlinePaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 2057,
        "end_line": 2063,
        "comment": "\r\n     * Sets the paint for the grid lines plotted against the range axis and\r\n     * sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getRangeGridlinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setRangeZeroBaselinePaint#2329",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselinePaint(java.awt.Paint)",
        "snippet": "    public void setRangeZeroBaselinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.rangeZeroBaselinePaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 2329,
        "end_line": 2335,
        "comment": "\r\n     * Sets the paint for the zero baseline plotted against the range axis and\r\n     * sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getRangeZeroBaselinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getAnnotations#3013",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getAnnotations()",
        "snippet": "    public List getAnnotations() {\n        return new ArrayList(this.annotations);\n    }\n",
        "begin_line": 3013,
        "end_line": 3015,
        "comment": "\r\n     * Returns the list of annotations.\r\n     *\r\n     * @return The list of annotations.\r\n     *\r\n     * @since 1.0.1\r\n     *\r\n     * @see #addAnnotation(XYAnnotation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.setRangeCrosshairPaint#4859",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairPaint(java.awt.Paint)",
        "snippet": "    public void setRangeCrosshairPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.rangeCrosshairPaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 4859,
        "end_line": 4865,
        "comment": "\r\n     * Sets the paint used to color the crosshairs (if visible) and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint the new crosshair paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getRangeCrosshairPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "TitleChangeEvent.TitleChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "signature": "org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title)",
        "snippet": "    public TitleChangeEvent(Title title) {\n        super(title);\n        this.title = title;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Default constructor.\r\n     *\r\n     * @param title  the chart title that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0381
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.rendererChanged#4546",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.rendererChanged(org.jfree.chart.event.RendererChangeEvent)",
        "snippet": "    public void rendererChanged(RendererChangeEvent event) {\n        // if the event was caused by a change to series visibility, then\n        // the axis ranges might need updating...\n        if (event.getSeriesVisibilityChanged()) {\n            configureDomainAxes();\n            configureRangeAxes();\n        }\n        fireChangeEvent();\n    }\n",
        "begin_line": 4546,
        "end_line": 4554,
        "comment": "\r\n     * Receives notification of a renderer change event.\r\n     *\r\n     * @param event  the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0377
        },
        "num_failing_tests": 1
    },
    {
        "name": "RendererChangeEvent.getSeriesVisibilityChanged#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "signature": "org.jfree.chart.event.RendererChangeEvent.getSeriesVisibilityChanged()",
        "snippet": "    public boolean getSeriesVisibilityChanged() {\n        return this.seriesVisibilityChanged;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\r\n     * Returns the flag that indicates whether or not the event relates to\r\n     * a change in series visibility.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0377
        },
        "num_failing_tests": 1
    },
    {
        "name": "VerticalAlignment.VerticalAlignment#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String)",
        "snippet": "    private VerticalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "HorizontalAlignment.HorizontalAlignment#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String)",
        "snippet": "    private HorizontalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.Title#177",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    protected Title(RectangleEdge position,\n                    HorizontalAlignment horizontalAlignment,\n                    VerticalAlignment verticalAlignment,\n                    RectangleInsets padding) {\n\n        // check arguments...\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (horizontalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'horizontalAlignment' argument.\");\n        }\n\n        if (verticalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'verticalAlignment' argument.\");\n        }\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'spacer' argument.\");\n        }\n\n        this.visible = true;\n        this.position = position;\n        this.horizontalAlignment = horizontalAlignment;\n        this.verticalAlignment = verticalAlignment;\n        setPadding(padding);\n        this.listenerList = new EventListenerList();\n        this.notify = true;\n\n    }\n",
        "begin_line": 177,
        "end_line": 207,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param position  the position of the title (<code>null</code> not\r\n     *                  permitted).\r\n     * @param horizontalAlignment  the horizontal alignment of the title (LEFT,\r\n     *                             CENTER or RIGHT, <code>null</code> not\r\n     *                             permitted).\r\n     * @param verticalAlignment  the vertical alignment of the title (TOP,\r\n     *                           MIDDLE or BOTTOM, <code>null</code> not\r\n     *                           permitted).\r\n     * @param padding  the amount of space to leave around the outside of the\r\n     *                 title (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "BlockBorder.BlockBorder#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
        "snippet": "    public BlockBorder(RectangleInsets insets, Paint paint) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.insets = insets;\n        this.paint = paint;\n    }\n",
        "begin_line": 128,
        "end_line": 137,
        "comment": "\r\n     * Creates a new border.\r\n     *\r\n     * @param insets  the border insets (<code>null</code> not permitted).\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractBlock.AbstractBlock#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
        "snippet": "    protected AbstractBlock() {\n        this.id = null;\n        this.width = 0.0;\n        this.height = 0.0;\n        this.bounds = new Rectangle2D.Float();\n        this.margin = RectangleInsets.ZERO_INSETS;\n        this.frame = BlockBorder.NONE;\n        this.padding = RectangleInsets.ZERO_INSETS;\n    }\n",
        "begin_line": 109,
        "end_line": 117,
        "comment": "\r\n     * Creates a new block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractBlock.setPadding#276",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setPadding(RectangleInsets padding) {\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'padding' argument.\");\n        }\n        this.padding = padding;\n    }\n",
        "begin_line": 276,
        "end_line": 281,
        "comment": "\r\n     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no\r\n     * padding).\r\n     *\r\n     * @param padding  the padding (<code>null</code> not permitted).\r\n     *\r\n     * @see #getPadding()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleEdge.RectangleEdge#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
        "snippet": "    private RectangleEdge(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.037
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.addChangeListener#939",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener)",
        "snippet": "    public void addChangeListener(PlotChangeListener listener) {\n        this.listenerList.add(PlotChangeListener.class, listener);\n    }\n",
        "begin_line": 939,
        "end_line": 941,
        "comment": "\r\n     * Registers an object for notification of changes to the plot.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     *\r\n     * @see #removeChangeListener(PlotChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.037
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrokeMap.StrokeMap#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeMap.java",
        "class_name": "org.jfree.chart.util.StrokeMap",
        "signature": "org.jfree.chart.util.StrokeMap.StrokeMap()",
        "snippet": "    public StrokeMap() {\n        this.store = new TreeMap();\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Creates a new (empty) map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "Rotation.Rotation#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "class_name": "org.jfree.chart.util.Rotation",
        "signature": "org.jfree.chart.util.Rotation.Rotation(java.lang.String, double)",
        "snippet": "    private Rotation(final String name, final double factor) {\n        this.name = name;\n        this.factor = factor;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     * @param factor  the rotation factor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintMap.PaintMap#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintMap.java",
        "class_name": "org.jfree.chart.util.PaintMap",
        "signature": "org.jfree.chart.util.PaintMap.PaintMap()",
        "snippet": "    public PaintMap() {\n        this.store = new HashMap();\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\r\n     * Creates a new (empty) map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "PieLabelDistributor.PieLabelDistributor#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PieLabelDistributor.java",
        "class_name": "org.jfree.chart.plot.PieLabelDistributor",
        "signature": "org.jfree.chart.plot.PieLabelDistributor.PieLabelDistributor(int)",
        "snippet": "    public PieLabelDistributor(int labelCount) {\n        super();\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\r\n     * Creates a new distributor.\r\n     *\r\n     * @param labelCount  the number of labels (ignored).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPieLabelDistributor.AbstractPieLabelDistributor#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/AbstractPieLabelDistributor.java",
        "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
        "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.AbstractPieLabelDistributor()",
        "snippet": "    public AbstractPieLabelDistributor() {\n        this.labels = new java.util.ArrayList();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#92",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator()",
        "snippet": "    public StandardPieSectionLabelGenerator() {\n        this(DEFAULT_SECTION_LABEL_FORMAT, NumberFormat.getNumberInstance(),\n                NumberFormat.getPercentInstance());\n    }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "\r\n     * Creates a new section label generator using\r\n     * {@link #DEFAULT_SECTION_LABEL_FORMAT} as the label format string, and\r\n     * platform default number and percentage formatters.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public StandardPieSectionLabelGenerator(String labelFormat,\n            NumberFormat numberFormat, NumberFormat percentFormat) {\n        super(labelFormat, numberFormat, percentFormat);\n        this.attributedLabels = new ObjectList();\n    }\n",
        "begin_line": 142,
        "end_line": 146,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not\r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages\r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    protected AbstractPieItemLabelGenerator(String labelFormat,\n                                            NumberFormat numberFormat,\n                                            NumberFormat percentFormat) {\n\n        if (labelFormat == null) {\n            throw new IllegalArgumentException(\"Null 'labelFormat' argument.\");\n        }\n        if (numberFormat == null) {\n            throw new IllegalArgumentException(\"Null 'numberFormat' argument.\");\n        }\n        if (percentFormat == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'percentFormat' argument.\");\n        }\n        this.labelFormat = labelFormat;\n        this.numberFormat = numberFormat;\n        this.percentFormat = percentFormat;\n\n    }\n",
        "begin_line": 82,
        "end_line": 100,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not\r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages\r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.fireChangeEvent#978",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fireChangeEvent()",
        "snippet": "    protected void fireChangeEvent() {\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 978,
        "end_line": 980,
        "comment": "\r\n     * Sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.setOrientation#740",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.setOrientation(org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public void setOrientation(PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        if (orientation != this.orientation) {\n            this.orientation = orientation;\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 740,
        "end_line": 748,
        "comment": "\r\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param orientation  the orientation (<code>null</code> not allowed).\r\n     *\r\n     * @see #getOrientation()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0339
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractXYItemRenderer.findRangeBounds#872",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findRangeBounds(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    protected Range findRangeBounds(XYDataset dataset,\n            boolean includeInterval) {\n        if (dataset == null) {\n            return null;\n        }\n        if (getDataBoundsIncludesVisibleSeriesOnly()) {\n            List visibleSeriesKeys = new ArrayList();\n            int seriesCount = dataset.getSeriesCount();\n            for (int s = 0; s < seriesCount; s++) {\n                if (isSeriesVisible(s)) {\n                    visibleSeriesKeys.add(dataset.getSeriesKey(s));\n                }\n            }\n            // the bounds should be calculated using just the items within\n            // the current range of the x-axis...if there is one\n            Range xRange = null;\n            XYPlot p = getPlot();\n            if (p != null) {\n                ValueAxis xAxis = null;\n                int index = p.getIndexOf(this);\n                if (index >= 0) {\n                    xAxis = plot.getDomainAxisForDataset(index);\n                }\n                if (xAxis != null) {\n                    xRange = xAxis.getRange();\n                }\n            }\n            if (xRange == null) {\n                xRange = new Range(Double.NEGATIVE_INFINITY,\n                        Double.POSITIVE_INFINITY);\n            }\n            return DatasetUtilities.findRangeBounds(dataset,\n                    visibleSeriesKeys, xRange, includeInterval);\n        }\n        else {\n            return DatasetUtilities.findRangeBounds(dataset, includeInterval);\n        }\n    }\n",
        "begin_line": 872,
        "end_line": 909,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param includeInterval  include the interval (if any) for the dataset?\r\n     *\r\n     * @return The range (<code>null</code> if the dataset is <code>null</code>\r\n     *         or empty).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractXYItemRenderer.findRangeBounds#856",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
        "snippet": "    public Range findRangeBounds(XYDataset dataset) {\n        return findRangeBounds(dataset, false);\n    }\n",
        "begin_line": 856,
        "end_line": 858,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @return The range (<code>null</code> if the dataset is <code>null</code>\r\n     *         or empty).\r\n     *\r\n     * @see #findDomainBounds(XYDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getIndexOf#1730",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)",
        "snippet": "    public int getIndexOf(XYItemRenderer renderer) {\n        return this.renderers.indexOf(renderer);\n    }\n",
        "begin_line": 1730,
        "end_line": 1732,
        "comment": "\r\n     * Returns the index of the specified renderer, or <code>-1</code> if the\r\n     * renderer is not assigned to this plot.\r\n     *\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     *\r\n     * @return The renderer index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.findRangeBounds#906",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset, java.util.List, org.jfree.data.Range, boolean)",
        "snippet": "    public static Range findRangeBounds(XYDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        Range result = null;\n        if (dataset instanceof XYRangeInfo) {\n            XYRangeInfo info = (XYRangeInfo) dataset;\n            result = info.getRangeBounds(visibleSeriesKeys, xRange,\n                    includeInterval);\n        }\n        else {\n            result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\n                    xRange, includeInterval);\n        }\n        return result;\n    }\n",
        "begin_line": 906,
        "end_line": 922,
        "comment": "\r\n     * Finds the bounds of the y-values in the specified dataset, including\r\n     * only those series that are listed in visibleSeriesKeys, and those items\r\n     * whose x-values fall within the specified range.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param visibleSeriesKeys  the keys for the visible series\r\n     *     (<code>null</code> not permitted).\r\n     * @param xRange  the x-range (<code>null</code> not permitted).\r\n     * @param includeInterval  include the y-interval (if the dataset has a\r\n     *     y-interval).\r\n     *\r\n     * @return The data bounds.\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getRangeAxis#1164",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRangeAxis(int)",
        "snippet": "    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot xy = (XYPlot) parent;\n                result = xy.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1164,
        "end_line": 1177,
        "comment": "\r\n     * Returns a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     *\r\n     * @see #setRangeAxis(int, ValueAxis)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getDefaultAutoRange#1048",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getDefaultAutoRange()",
        "snippet": "    public Range getDefaultAutoRange() {\n        return this.defaultAutoRange;\n    }\n",
        "begin_line": 1048,
        "end_line": 1050,
        "comment": "\r\n     * Returns the default auto range.\r\n     *\r\n     * @return The default auto range (never <code>null</code>).\r\n     *\r\n     * @see #setDefaultAutoRange(Range)\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getDatasetCount#1430",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDatasetCount()",
        "snippet": "    public int getDatasetCount() {\n        return this.datasets.size();\n    }\n",
        "begin_line": 1430,
        "end_line": 1432,
        "comment": "\r\n     * Returns the number of datasets.\r\n     *\r\n     * @return The number of datasets.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getDomainAxisForDataset#3808",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisForDataset(int)",
        "snippet": "    public ValueAxis getDomainAxisForDataset(int index) {\n        int upper = Math.max(getDatasetCount(), getRendererCount());\n        if (index < 0 || index >= upper) {\n            throw new IllegalArgumentException(\"Index \" + index\n                    + \" out of bounds.\");\n        }\n        ValueAxis valueAxis = null;\n        List axisIndices = (List) this.datasetToDomainAxesMap.get(\n                new Integer(index));\n        if (axisIndices != null) {\n            // the first axis in the list is used for data <--> Java2D\n            Integer axisIndex = (Integer) axisIndices.get(0);\n            valueAxis = getDomainAxis(axisIndex.intValue());\n        }\n        else {\n            valueAxis = getDomainAxis(0);\n        }\n        return valueAxis;\n    }\n",
        "begin_line": 3808,
        "end_line": 3826,
        "comment": "\r\n     * Returns the domain axis for a dataset.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractXYItemRenderer.getPlot#259",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getPlot()",
        "snippet": "    public XYPlot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": "\r\n     * Returns the plot that the renderer is assigned to.\r\n     *\r\n     * @return The plot (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.findDomainBounds#695",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset, java.util.List, boolean)",
        "snippet": "    public static Range findDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        Range result = null;\n        if (dataset instanceof XYDomainInfo) {\n            XYDomainInfo info = (XYDomainInfo) dataset;\n            result = info.getDomainBounds(visibleSeriesKeys, includeInterval);\n        }\n        else {\n            result = iterateToFindDomainBounds(dataset, visibleSeriesKeys,\n                    includeInterval);\n        }\n        return result;\n    }\n",
        "begin_line": 695,
        "end_line": 710,
        "comment": "\r\n     * Returns the bounds of the x-values in the specified <code>dataset</code>\r\n     * taking into account only the visible series and including any x-interval\r\n     * if requested.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param visibleSeriesKeys  the visible series keys (<code>null</code>\r\n     *     not permitted).\r\n     * @param includeInterval  include the x-interval (if any)?\r\n     *\r\n     * @return The bounds (or <code>null</code> if the dataset contains no\r\n     *     values.\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractXYItemRenderer.findDomainBounds#808",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)",
        "snippet": "    public Range findDomainBounds(XYDataset dataset) {\n        return findDomainBounds(dataset, false);\n    }\n",
        "begin_line": 808,
        "end_line": 810,
        "comment": "\r\n     * Returns the lower and upper bounds (range) of the x-values in the\r\n     * specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @return The range (<code>null</code> if the dataset is <code>null</code>\r\n     *         or empty).\r\n     *\r\n     * @see #findRangeBounds(XYDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractXYItemRenderer.findDomainBounds#824",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    protected Range findDomainBounds(XYDataset dataset,\n            boolean includeInterval) {\n        if (dataset == null) {\n            return null;\n        }\n        if (getDataBoundsIncludesVisibleSeriesOnly()) {\n            List visibleSeriesKeys = new ArrayList();\n            int seriesCount = dataset.getSeriesCount();\n            for (int s = 0; s < seriesCount; s++) {\n                if (isSeriesVisible(s)) {\n                    visibleSeriesKeys.add(dataset.getSeriesKey(s));\n                }\n            }\n            return DatasetUtilities.findDomainBounds(dataset,\n                    visibleSeriesKeys, includeInterval);\n        }\n        else {\n            return DatasetUtilities.findDomainBounds(dataset, includeInterval);\n        }\n    }\n",
        "begin_line": 824,
        "end_line": 843,
        "comment": "\r\n     * Returns the lower and upper bounds (range) of the x-values in the\r\n     * specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param includeInterval  include the interval (if any) for the dataset?\r\n     *\r\n     * @return The range (<code>null</code> if the dataset is <code>null</code>\r\n     *         or empty).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getRendererCount#1564",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getRendererCount()",
        "snippet": "    public int getRendererCount() {\n        return this.renderers.size();\n    }\n",
        "begin_line": 1564,
        "end_line": 1566,
        "comment": "\r\n     * Returns the number of renderer slots for this plot.\r\n     *\r\n     * @return The number of renderer slots.\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0278
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues.DefaultKeyedValues#97",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.DefaultKeyedValues()",
        "snippet": "    public DefaultKeyedValues() {\n        this.keys = new ArrayList();\n        this.values = new ArrayList();\n        this.indexMap = new HashMap();\n    }\n",
        "begin_line": 97,
        "end_line": 101,
        "comment": "\n     * Creates a new collection (initially empty).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues.getIndex#148",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        final Integer i = (Integer) this.indexMap.get(key);\n        if (i == null) {\n            return -1;  // key not found\n        }\n        return i.intValue();\n    }\n",
        "begin_line": 148,
        "end_line": 157,
        "comment": "\n     * Returns the index for a given key.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     *\n     * @return The index, or <code>-1</code> if the key is not recognised.\n     *\n     * @throws IllegalArgumentException if <code>key</code> is\n     *     <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues.setValue#227",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, java.lang.Number)",
        "snippet": "    public void setValue(Comparable key, Number value) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            this.keys.set(keyIndex, key);\n            this.values.set(keyIndex, value);\n        }\n        else {\n            this.keys.add(key);\n            this.values.add(value);\n            this.indexMap.put(key, new Integer(this.keys.size() - 1));\n        }\n    }\n",
        "begin_line": 227,
        "end_line": 241,
        "comment": "\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractXYItemRenderer.getAnnotations#715",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getAnnotations()",
        "snippet": "    public Collection getAnnotations() {\n        List result = new java.util.ArrayList(this.foregroundAnnotations);\n        result.addAll(this.backgroundAnnotations);\n        return result;\n    }\n",
        "begin_line": 715,
        "end_line": 719,
        "comment": "\r\n     * Returns a collection of the annotations that are assigned to the\r\n     * renderer.\r\n     *\r\n     * @return A collection of annotations (possibly empty but never\r\n     *     <code>null</code>).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0273
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getDomainAxis#800",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDomainAxis(int)",
        "snippet": "    public ValueAxis getDomainAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.domainAxes.size()) {\n            result = (ValueAxis) this.domainAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof XYPlot) {\n                XYPlot xy = (XYPlot) parent;\n                result = xy.getDomainAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 800,
        "end_line": 813,
        "comment": "\r\n     * Returns the domain axis with the specified index, or <code>null</code>.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     *\r\n     * @see #setDomainAxis(int, ValueAxis)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0269
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.getDatasetsMappedToRangeAxis#4352",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDatasetsMappedToRangeAxis(java.lang.Integer)",
        "snippet": "    private List getDatasetsMappedToRangeAxis(Integer axisIndex) {\n        if (axisIndex == null) {\n            throw new IllegalArgumentException(\"Null 'axisIndex' argument.\");\n        }\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            List mappedAxes = (List) this.datasetToRangeAxesMap.get(\n                    new Integer(i));\n            if (mappedAxes == null) {\n                if (axisIndex.equals(ZERO)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n            else {\n                if (mappedAxes.contains(axisIndex)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 4352,
        "end_line": 4372,
        "comment": "\r\n     * A utility method that returns a list of datasets that are mapped to a\r\n     * particular axis.\r\n     *\r\n     * @param axisIndex  the axis index (<code>null</code> not permitted).\r\n     *\r\n     * @return A list of datasets.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0262
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractXYItemRenderer.setPlot#268",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setPlot(org.jfree.chart.plot.XYPlot)",
        "snippet": "    public void setPlot(XYPlot plot) {\n        this.plot = plot;\n    }\n",
        "begin_line": 268,
        "end_line": 270,
        "comment": "\r\n     * Sets the plot that the renderer is assigned to.\r\n     *\r\n     * @param plot  the plot (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0259
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.clear#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.clear()",
        "snippet": "    public void clear() {\n        Arrays.fill(this.objects, null);\n        this.size = 0;\n    }\n",
        "begin_line": 138,
        "end_line": 141,
        "comment": "\n     * Clears the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.clearSeriesPaints#798",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.clearSeriesPaints(boolean)",
        "snippet": "    public void clearSeriesPaints(boolean notify) {\n        this.paintList.clear();\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 798,
        "end_line": 803,
        "comment": "\r\n     * Clears the series paint settings for this renderer and, if requested,\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.getAutoPopulateSeriesPaint#855",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesPaint()",
        "snippet": "    public boolean getAutoPopulateSeriesPaint() {\n        return this.autoPopulateSeriesPaint;\n    }\n",
        "begin_line": 855,
        "end_line": 857,
        "comment": "\r\n     * Returns the flag that controls whether or not the series paint list is\r\n     * automatically populated when {@link #lookupSeriesPaint(int)} is called.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.6\r\n     *\r\n     * @see #setAutoPopulateSeriesPaint(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.clearSeriesStrokes#1296",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.clearSeriesStrokes(boolean)",
        "snippet": "    public void clearSeriesStrokes(boolean notify) {\n        this.strokeList.clear();\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1296,
        "end_line": 1301,
        "comment": "\r\n     * Clears the series stroke settings for this renderer and, if requested,\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.11\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.getAutoPopulateSeriesStroke#1356",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesStroke()",
        "snippet": "    public boolean getAutoPopulateSeriesStroke() {\n        return this.autoPopulateSeriesStroke;\n    }\n",
        "begin_line": 1356,
        "end_line": 1358,
        "comment": "\r\n     * Returns the flag that controls whether or not the series stroke list is\r\n     * automatically populated when {@link #lookupSeriesStroke(int)} is called.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.6\r\n     *\r\n     * @see #setAutoPopulateSeriesStroke(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.setBaseItemLabelFont#1913",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelFont(java.awt.Font)",
        "snippet": "    public void setBaseItemLabelFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        setBaseItemLabelFont(font, true);\n    }\n",
        "begin_line": 1913,
        "end_line": 1918,
        "comment": "\r\n     * Sets the base item label font and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     *\r\n     * @see #getBaseItemLabelFont()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.setBaseItemLabelFont#1930",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelFont(java.awt.Font, boolean)",
        "snippet": "    public void setBaseItemLabelFont(Font font, boolean notify) {\n        this.baseItemLabelFont = font;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1930,
        "end_line": 1935,
        "comment": "\r\n     * Sets the base item label font and, if requested, sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether or not listeners are\r\n     *                notified.\r\n     *\r\n     * @see #getBaseItemLabelFont()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.setBaseItemLabelPaint#2022",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelPaint(java.awt.Paint)",
        "snippet": "    public void setBaseItemLabelPaint(Paint paint) {\n        // defer argument checking...\n        setBaseItemLabelPaint(paint, true);\n    }\n",
        "begin_line": 2022,
        "end_line": 2025,
        "comment": "\r\n     * Sets the base item label paint and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getBaseItemLabelPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.setBaseItemLabelPaint#2037",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelPaint(java.awt.Paint, boolean)",
        "snippet": "    public void setBaseItemLabelPaint(Paint paint, boolean notify) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.baseItemLabelPaint = paint;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 2037,
        "end_line": 2045,
        "comment": "\r\n     * Sets the base item label paint and, if requested, sends a\r\n     * {@link RendererChangeEvent} to all registered listeners..\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether or not listeners are\r\n     *                notified.\r\n     *\r\n     * @see #getBaseItemLabelPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.setLabelFont#430",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setLabelFont(java.awt.Font)",
        "snippet": "    public void setLabelFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (!this.labelFont.equals(font)) {\n            this.labelFont = font;\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 430,
        "end_line": 438,
        "comment": "\r\n     * Sets the font for the axis label and sends an {@link AxisChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     *\r\n     * @see #getLabelFont()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.setLabelPaint#459",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setLabelPaint(java.awt.Paint)",
        "snippet": "    public void setLabelPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 459,
        "end_line": 465,
        "comment": "\r\n     * Sets the paint used to draw the axis label and sends an\r\n     * {@link AxisChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getLabelPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.setTickLabelFont#759",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setTickLabelFont(java.awt.Font)",
        "snippet": "    public void setTickLabelFont(Font font) {\n\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n\n        if (!this.tickLabelFont.equals(font)) {\n            this.tickLabelFont = font;\n            fireChangeEvent();\n        }\n\n    }\n",
        "begin_line": 759,
        "end_line": 770,
        "comment": "\r\n     * Sets the font for the tick labels and sends an {@link AxisChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param font  the font (<code>null</code> not allowed).\r\n     *\r\n     * @see #getTickLabelFont()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.setTickLabelPaint#791",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setTickLabelPaint(java.awt.Paint)",
        "snippet": "    public void setTickLabelPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.tickLabelPaint = paint;\n        fireChangeEvent();\n    }\n",
        "begin_line": 791,
        "end_line": 797,
        "comment": "\r\n     * Sets the paint used to draw tick labels (if they are showing) and\r\n     * sends an {@link AxisChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     *\r\n     * @see #getTickLabelPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardChartTheme.applyToValueAxis#1541",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToValueAxis(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    protected void applyToValueAxis(ValueAxis axis) {\n        axis.setLabelFont(this.largeFont);\n        axis.setLabelPaint(this.axisLabelPaint);\n        axis.setTickLabelFont(this.regularFont);\n        axis.setTickLabelPaint(this.tickLabelPaint);\n        if (axis instanceof SymbolAxis) {\n            applyToSymbolAxis((SymbolAxis) axis);\n        }\n        if (axis instanceof PeriodAxis) {\n            applyToPeriodAxis((PeriodAxis) axis);\n        }\n    }\n",
        "begin_line": 1541,
        "end_line": 1552,
        "comment": "\r\n     * Applies the attributes for this theme to a {@link ValueAxis}.\r\n     *\r\n     * @param axis  the axis (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardChartTheme.applyToAbstractRenderer#1587",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StandardChartTheme.java",
        "class_name": "org.jfree.chart.StandardChartTheme",
        "signature": "org.jfree.chart.StandardChartTheme.applyToAbstractRenderer(org.jfree.chart.renderer.AbstractRenderer)",
        "snippet": "    protected void applyToAbstractRenderer(AbstractRenderer renderer) {\n        if (renderer.getAutoPopulateSeriesPaint()) {\n            renderer.clearSeriesPaints(false);\n        }\n        if (renderer.getAutoPopulateSeriesStroke()) {\n            renderer.clearSeriesStrokes(false);\n        }\n    }\n",
        "begin_line": 1587,
        "end_line": 1594,
        "comment": "\r\n     * Applies the attributes for this theme to an {@link AbstractRenderer}.\r\n     *\r\n     * @param renderer  the renderer (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getRange#1225",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getRange()",
        "snippet": "    public Range getRange() {\n        return this.range;\n    }\n",
        "begin_line": 1225,
        "end_line": 1227,
        "comment": "\r\n     * Returns the range for the axis.\r\n     *\r\n     * @return The axis range (never <code>null</code>).\r\n     *\r\n     * @see #setRange(Range)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0234
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.fireChangeEvent#1235",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.fireChangeEvent()",
        "snippet": "    protected void fireChangeEvent() {\n        notifyListeners(new AxisChangeEvent(this));\n    }\n",
        "begin_line": 1235,
        "end_line": 1237,
        "comment": "\r\n     * Sends an {@link AxisChangeEvent} to all registered listeners.\r\n     *\r\n     * @since 1.0.12\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0234
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.axisChanged#1200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.axisChanged(org.jfree.chart.event.AxisChangeEvent)",
        "snippet": "    public void axisChanged(AxisChangeEvent event) {\n        fireChangeEvent();\n    }\n",
        "begin_line": 1200,
        "end_line": 1202,
        "comment": "\r\n     * Receives notification of a change to one of the plot's axes.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0233
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.mapDatasetToRangeAxis#1498",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        List axisIndices = new java.util.ArrayList(1);\n        axisIndices.add(new Integer(axisIndex));\n        mapDatasetToRangeAxes(index, axisIndices);\n    }\n",
        "begin_line": 1498,
        "end_line": 1502,
        "comment": "\r\n     * Maps a dataset to a particular range axis.  All data will be plotted\r\n     * against axis zero by default, no mapping is required for this case.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index.\r\n     *\r\n     * @see #mapDatasetToDomainAxis(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.023
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.mapDatasetToRangeAxes#1514",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxes(int, java.util.List)",
        "snippet": "    public void mapDatasetToRangeAxes(int index, List axisIndices) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires 'index' >= 0.\");\n        }\n        checkAxisIndices(axisIndices);\n        Integer key = new Integer(index);\n        this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));\n    }\n",
        "begin_line": 1514,
        "end_line": 1523,
        "comment": "\r\n     * Maps the specified dataset to the axes in the list.  Note that the\r\n     * conversion of data values into Java2D space is always performed using\r\n     * the first axis in the list.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\r\n     *\r\n     * @since 1.0.12\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.023
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly#2693",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly()",
        "snippet": "    public boolean getDataBoundsIncludesVisibleSeriesOnly() {\n        return this.dataBoundsIncludesVisibleSeriesOnly;\n    }\n",
        "begin_line": 2693,
        "end_line": 2695,
        "comment": "\r\n     * Returns the flag that controls whether or not the data bounds reported\r\n     * by this renderer will exclude non-visible series.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0219
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberAxis.getAutoRangeIncludesZero#242",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeIncludesZero()",
        "snippet": "    public boolean getAutoRangeIncludesZero() {\n        return this.autoRangeIncludesZero;\n    }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\r\n     * Returns the flag that indicates whether or not the automatic axis range\r\n     * (if indeed it is determined automatically) is forced to include zero.\r\n     *\r\n     * @return The flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0192
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberAxis.getAutoRangeStickyZero#277",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeStickyZero()",
        "snippet": "    public boolean getAutoRangeStickyZero() {\n        return this.autoRangeStickyZero;\n    }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\r\n     * Returns a flag that affects the auto-range when zero falls outside the\r\n     * data range but inside the margins defined for the axis.\r\n     *\r\n     * @return The flag.\r\n     *\r\n     * @see #setAutoRangeStickyZero(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0192
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.addChangeListener#2843",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.addChangeListener(org.jfree.chart.event.RendererChangeListener)",
        "snippet": "    public void addChangeListener(RendererChangeListener listener) {\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Null 'listener' argument.\");\n        }\n        this.listenerList.add(RendererChangeListener.class, listener);\n    }\n",
        "begin_line": 2843,
        "end_line": 2848,
        "comment": "\r\n     * Registers an object to receive notification of changes to the renderer.\r\n     *\r\n     * @param listener  the listener (<code>null</code> not permitted).\r\n     *\r\n     * @see #removeChangeListener(RendererChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getAutoRangeMinimumSize#996",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getAutoRangeMinimumSize()",
        "snippet": "    public double getAutoRangeMinimumSize() {\n        return this.autoRangeMinimumSize;\n    }\n",
        "begin_line": 996,
        "end_line": 998,
        "comment": "\r\n     * Returns the minimum size allowed for the axis range when it is\r\n     * automatically calculated.\r\n     *\r\n     * @return The minimum range.\r\n     *\r\n     * @see #setAutoRangeMinimumSize(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getLowerMargin#1080",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getLowerMargin()",
        "snippet": "    public double getLowerMargin() {\n        return this.lowerMargin;\n    }\n",
        "begin_line": 1080,
        "end_line": 1082,
        "comment": "\r\n     * Returns the lower margin for the axis, expressed as a percentage of the\r\n     * axis range.  This controls the space added to the lower end of the axis\r\n     * when the axis range is automatically calculated (it is ignored when the\r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The lower margin.\r\n     *\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getUpperMargin#1113",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getUpperMargin()",
        "snippet": "    public double getUpperMargin() {\n        return this.upperMargin;\n    }\n",
        "begin_line": 1113,
        "end_line": 1115,
        "comment": "\r\n     * Returns the upper margin for the axis, expressed as a percentage of the\r\n     * axis range.  This controls the space added to the lower end of the axis\r\n     * when the axis range is automatically calculated (it is ignored when the\r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The upper margin.\r\n     *\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getFixedAutoRange#1143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getFixedAutoRange()",
        "snippet": "    public double getFixedAutoRange() {\n        return this.fixedAutoRange;\n    }\n",
        "begin_line": 1143,
        "end_line": 1145,
        "comment": "\r\n     * Returns the fixed auto range.\r\n     *\r\n     * @return The length.\r\n     *\r\n     * @see #setFixedAutoRange(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.addChangeListener#1186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.addChangeListener(org.jfree.chart.event.AxisChangeListener)",
        "snippet": "    public void addChangeListener(AxisChangeListener listener) {\n        this.listenerList.add(AxisChangeListener.class, listener);\n    }\n",
        "begin_line": 1186,
        "end_line": 1188,
        "comment": "\r\n     * Registers an object for notification of changes to the axis.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     *\r\n     * @see #removeChangeListener(AxisChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "AxisLocation.AxisLocation#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
        "snippet": "    private AxisLocation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.017
        },
        "num_failing_tests": 1
    }
]