[
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LogAxisTests.class);\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.LogAxisTests(java.lang.String)",
        "snippet": "    public LogAxisTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LogAxis a1 = new LogAxis(\"Test\");\n        LogAxis a2 = null;\n        try {\n            a2 = (LogAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }\n",
        "begin_line": 93,
        "end_line": 105,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 41)",
            "(line 95,col 9)-(line 95,col 26)",
            "(line 96,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LogAxis a1 = new LogAxis(\"Test\");\n        LogAxis a2 = new LogAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        a1.setBase(2.0);\n        assertFalse(a1.equals(a2));\n        a2.setBase(2.0);\n        assertTrue(a1.equals(a2));\n\n        a1.setSmallestValue(0.1);\n        assertFalse(a1.equals(a2));\n        a2.setSmallestValue(0.1);\n        assertTrue(a1.equals(a2));\n\n        a1.setMinorTickCount(8);\n        assertFalse(a1.equals(a2));\n        a2.setMinorTickCount(8);\n        assertTrue(a1.equals(a2));\n    }\n",
        "begin_line": 110,
        "end_line": 129,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 115,col 9)-(line 115,col 24)",
            "(line 116,col 9)-(line 116,col 35)",
            "(line 117,col 9)-(line 117,col 24)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 120,col 9)-(line 120,col 33)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 33)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 125,col 9)-(line 125,col 32)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 127,col 32)",
            "(line 128,col 9)-(line 128,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        LogAxis a1 = new LogAxis(\"Test\");\n        LogAxis a2 = new LogAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 134,
        "end_line": 141,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 41)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 138,col 31)",
            "(line 139,col 9)-(line 139,col 31)",
            "(line 140,col 9)-(line 140,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testTranslateJava2DToValue()",
        "snippet": "    public void testTranslateJava2DToValue() {\n        LogAxis axis = new LogAxis();\n        axis.setRange(50.0, 100.0);\n        Rectangle2D dataArea = new Rectangle2D.Double(10.0, 50.0, 400.0, 300.0);\n        double y1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);\n        assertEquals(94.3874312681693, y1, EPSILON);\n        double y2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);\n        assertEquals(94.3874312681693, y2, EPSILON);\n        double x1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);\n        assertEquals(55.961246381405, x1, EPSILON);\n        double x2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);\n        assertEquals(55.961246381405, x2, EPSILON);\n        axis.setInverted(true);\n        double y3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);\n        assertEquals(52.9731547179647, y3, EPSILON);\n        double y4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);\n        assertEquals(52.9731547179647, y4, EPSILON);\n        double x3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);\n        assertEquals(89.3475453695651, x3, EPSILON);\n        double x4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);\n        assertEquals(89.3475453695651, x4, EPSILON);\n    }\n",
        "begin_line": 148,
        "end_line": 169,
        "comment": "\n     * Test the translation of Java2D values to data values.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 80)",
            "(line 152,col 9)-(line 152,col 75)",
            "(line 153,col 9)-(line 153,col 52)",
            "(line 154,col 9)-(line 154,col 76)",
            "(line 155,col 9)-(line 155,col 52)",
            "(line 156,col 9)-(line 156,col 74)",
            "(line 157,col 9)-(line 157,col 51)",
            "(line 158,col 9)-(line 158,col 77)",
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 31)",
            "(line 161,col 9)-(line 161,col 75)",
            "(line 162,col 9)-(line 162,col 52)",
            "(line 163,col 9)-(line 163,col 76)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 52)",
            "(line 167,col 9)-(line 167,col 77)",
            "(line 168,col 9)-(line 168,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LogAxis a1 = new LogAxis(\"Test Axis\");\n        LogAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (LogAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }\n",
        "begin_line": 174,
        "end_line": 195,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 46)",
            "(line 177,col 9)-(line 177,col 26)",
            "(line 179,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 193,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testAutoRange1()",
        "snippet": "    public void testAutoRange1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test\",\n            \"Categories\",\n            \"Value\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);\n        assertEquals(2.6066426411261268E7, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 201,
        "end_line": 220,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * LogAxis used as the range axis for a CategoryPlot.\n     ",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 70)",
            "(line 203,col 9)-(line 203,col 53)",
            "(line 204,col 9)-(line 204,col 53)",
            "(line 205,col 9)-(line 214,col 10)",
            "(line 215,col 9)-(line 215,col 59)",
            "(line 216,col 9)-(line 216,col 45)",
            "(line 217,col 9)-(line 217,col 32)",
            "(line 218,col 9)-(line 218,col 57)",
            "(line 219,col 9)-(line 219,col 74)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testAutoRange3()",
        "snippet": "    public void testAutoRange3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createLineChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(96.59363289248458, axis.getLowerBound(), EPSILON);\n        assertEquals(207.0529847682752, axis.getUpperBound(), EPSILON);\n\n        // now replacing the dataset should update the axis range...\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        dataset2.setValue(900.0, \"Row 1\", \"Column 1\");\n        dataset2.setValue(1000.0, \"Row 1\", \"Column 2\");\n        plot.setDataset(dataset2);\n        assertEquals(895.2712433374774, axis.getLowerBound(), EPSILON);\n        assertEquals(1005.2819262292991, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 227,
        "end_line": 247,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.  In this\n     * case, the original dataset is replaced with a new dataset.\n     ",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 70)",
            "(line 229,col 9)-(line 229,col 53)",
            "(line 230,col 9)-(line 230,col 53)",
            "(line 231,col 9)-(line 233,col 23)",
            "(line 234,col 9)-(line 234,col 59)",
            "(line 235,col 9)-(line 235,col 45)",
            "(line 236,col 9)-(line 236,col 32)",
            "(line 237,col 9)-(line 237,col 71)",
            "(line 238,col 9)-(line 238,col 71)",
            "(line 241,col 9)-(line 241,col 71)",
            "(line 242,col 9)-(line 242,col 54)",
            "(line 243,col 9)-(line 243,col 55)",
            "(line 244,col 9)-(line 244,col 34)",
            "(line 245,col 9)-(line 245,col 71)",
            "(line 246,col 9)-(line 246,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange1()",
        "snippet": "    public void testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 253,
        "end_line": 275,
        "comment": "\n     * Checks that the auto-range for the domain axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 51)",
            "(line 255,col 9)-(line 255,col 29)",
            "(line 256,col 9)-(line 256,col 29)",
            "(line 257,col 9)-(line 257,col 29)",
            "(line 258,col 9)-(line 258,col 62)",
            "(line 259,col 9)-(line 259,col 34)",
            "(line 260,col 9)-(line 269,col 10)",
            "(line 270,col 9)-(line 270,col 47)",
            "(line 271,col 9)-(line 271,col 45)",
            "(line 272,col 9)-(line 272,col 32)",
            "(line 273,col 9)-(line 273,col 72)",
            "(line 274,col 9)-(line 274,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange2()",
        "snippet": "    public void testXYAutoRange2() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 281,
        "end_line": 303,
        "comment": "\n     * Checks that the auto-range for the range axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 51)",
            "(line 283,col 9)-(line 283,col 29)",
            "(line 284,col 9)-(line 284,col 29)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 286,col 62)",
            "(line 287,col 9)-(line 287,col 34)",
            "(line 288,col 9)-(line 297,col 10)",
            "(line 298,col 9)-(line 298,col 47)",
            "(line 299,col 9)-(line 299,col 45)",
            "(line 300,col 9)-(line 300,col 32)",
            "(line 301,col 9)-(line 301,col 72)",
            "(line 302,col 9)-(line 302,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testSetLowerBound()",
        "snippet": "    public void testSetLowerBound() {\n        LogAxis axis = new LogAxis(\"X\");\n        axis.setRange(0.0, 10.0);\n        axis.setLowerBound(5.0);\n        assertEquals(5.0, axis.getLowerBound(), EPSILON);\n        axis.setLowerBound(10.0);\n        assertEquals(10.0, axis.getLowerBound(), EPSILON);\n        assertEquals(11.0, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 308,
        "end_line": 316,
        "comment": "\n     * Some checks for the setLowerBound() method.\n     ",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 40)",
            "(line 310,col 9)-(line 310,col 33)",
            "(line 311,col 9)-(line 311,col 32)",
            "(line 312,col 9)-(line 312,col 57)",
            "(line 313,col 9)-(line 313,col 33)",
            "(line 314,col 9)-(line 314,col 58)",
            "(line 315,col 9)-(line 315,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.LogAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.LogAxisTests.testTickMarksVisibleDefault()",
        "snippet": "    public void testTickMarksVisibleDefault() {\n        LogAxis axis = new LogAxis(\"Log Axis\");\n        assertTrue(axis.isTickMarksVisible());\n    }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "\n     * Checks the default value for the tickMarksVisible flag.\n     ",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 47)",
            "(line 323,col 9)-(line 323,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(NumberAxisTests.class);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.NumberAxisTests(java.lang.String)",
        "snippet": "    public NumberAxisTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = null;\n        try {\n            a2 = (NumberAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }\n",
        "begin_line": 104,
        "end_line": 116,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 29)",
            "(line 107,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        //private boolean autoRangeIncludesZero;\n        a1.setAutoRangeIncludesZero(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeIncludesZero(false);\n        assertTrue(a1.equals(a2));\n\n        //private boolean autoRangeStickyZero;\n        a1.setAutoRangeStickyZero(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeStickyZero(false);\n        assertTrue(a1.equals(a2));\n\n        //private NumberTickUnit tickUnit;\n        a1.setTickUnit(new NumberTickUnit(25.0));\n        assertFalse(a1.equals(a2));\n        a2.setTickUnit(new NumberTickUnit(25.0));\n        assertTrue(a1.equals(a2));\n\n        //private NumberFormat numberFormatOverride;\n        a1.setNumberFormatOverride(new DecimalFormat(\"0.00\"));\n        assertFalse(a1.equals(a2));\n        a2.setNumberFormatOverride(new DecimalFormat(\"0.00\"));\n        assertTrue(a1.equals(a2));\n\n        a1.setRangeType(RangeType.POSITIVE);\n        assertFalse(a1.equals(a2));\n        a2.setRangeType(RangeType.POSITIVE);\n        assertTrue(a1.equals(a2));\n\n    }\n",
        "begin_line": 121,
        "end_line": 156,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 47)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 128,col 9)-(line 128,col 43)",
            "(line 129,col 9)-(line 129,col 35)",
            "(line 130,col 9)-(line 130,col 43)",
            "(line 131,col 9)-(line 131,col 34)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 49)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 62)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 148,col 62)",
            "(line 149,col 9)-(line 149,col 34)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 161,
        "end_line": 168,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 47)",
            "(line 163,col 9)-(line 163,col 47)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 31)",
            "(line 166,col 9)-(line 166,col 31)",
            "(line 167,col 9)-(line 167,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testTranslateJava2DToValue()",
        "snippet": "    public void testTranslateJava2DToValue() {\n        NumberAxis axis = new NumberAxis();\n        axis.setRange(50.0, 100.0);\n        Rectangle2D dataArea = new Rectangle2D.Double(10.0, 50.0, 400.0, 300.0);\n        double y1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);\n        assertEquals(y1, 95.8333333, EPSILON);\n        double y2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);\n        assertEquals(y2, 95.8333333, EPSILON);\n        double x1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);\n        assertEquals(x1, 58.125, EPSILON);\n        double x2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);\n        assertEquals(x2, 58.125, EPSILON);\n        axis.setInverted(true);\n        double y3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);\n        assertEquals(y3, 54.1666667, EPSILON);\n        double y4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);\n        assertEquals(y4, 54.1666667, EPSILON);\n        double x3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);\n        assertEquals(x3, 91.875, EPSILON);\n        double x4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);\n        assertEquals(x4, 91.875, EPSILON);\n    }\n",
        "begin_line": 175,
        "end_line": 196,
        "comment": "\n     * Test the translation of Java2D values to data values.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 80)",
            "(line 179,col 9)-(line 179,col 75)",
            "(line 180,col 9)-(line 180,col 46)",
            "(line 181,col 9)-(line 181,col 76)",
            "(line 182,col 9)-(line 182,col 46)",
            "(line 183,col 9)-(line 183,col 74)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 185,col 9)-(line 185,col 77)",
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 31)",
            "(line 188,col 9)-(line 188,col 75)",
            "(line 189,col 9)-(line 189,col 46)",
            "(line 190,col 9)-(line 190,col 76)",
            "(line 191,col 9)-(line 191,col 46)",
            "(line 192,col 9)-(line 192,col 74)",
            "(line 193,col 9)-(line 193,col 42)",
            "(line 194,col 9)-(line 194,col 77)",
            "(line 195,col 9)-(line 195,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        NumberAxis a1 = new NumberAxis(\"Test Axis\");\n        NumberAxis a2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(a1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            a2 = (NumberAxis) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(a1, a2);\n\n    }\n",
        "begin_line": 201,
        "end_line": 222,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 52)",
            "(line 204,col 9)-(line 204,col 29)",
            "(line 206,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 220,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange1()",
        "snippet": "    public void testAutoRange1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test\",\n            \"Categories\",\n            \"Value\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        assertEquals(axis.getLowerBound(), 0.0, EPSILON);\n        assertEquals(axis.getUpperBound(), 210.0, EPSILON);\n    }\n",
        "begin_line": 228,
        "end_line": 246,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 70)",
            "(line 230,col 9)-(line 230,col 53)",
            "(line 231,col 9)-(line 231,col 53)",
            "(line 232,col 9)-(line 241,col 10)",
            "(line 242,col 9)-(line 242,col 59)",
            "(line 243,col 9)-(line 243,col 59)",
            "(line 244,col 9)-(line 244,col 57)",
            "(line 245,col 9)-(line 245,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange2()",
        "snippet": "    public void testAutoRange2() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createLineChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(axis.getLowerBound(), 95.0, EPSILON);\n        assertEquals(axis.getUpperBound(), 205.0, EPSILON);\n    }\n",
        "begin_line": 253,
        "end_line": 265,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.  In this\n     * case, the 'autoRangeIncludesZero' flag is set to false.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 70)",
            "(line 255,col 9)-(line 255,col 53)",
            "(line 256,col 9)-(line 256,col 53)",
            "(line 257,col 9)-(line 259,col 23)",
            "(line 260,col 9)-(line 260,col 59)",
            "(line 261,col 9)-(line 261,col 59)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 58)",
            "(line 264,col 9)-(line 264,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange3()",
        "snippet": "    public void testAutoRange3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createLineChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(axis.getLowerBound(), 95.0, EPSILON);\n        assertEquals(axis.getUpperBound(), 205.0, EPSILON);\n\n        // now replacing the dataset should update the axis range...\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        dataset2.setValue(900.0, \"Row 1\", \"Column 1\");\n        dataset2.setValue(1000.0, \"Row 1\", \"Column 2\");\n        plot.setDataset(dataset2);\n        assertEquals(axis.getLowerBound(), 895.0, EPSILON);\n        assertEquals(axis.getUpperBound(), 1005.0, EPSILON);\n    }\n",
        "begin_line": 273,
        "end_line": 293,
        "comment": "\n     * A simple test for the auto-range calculation looking at a\n     * NumberAxis used as the range axis for a CategoryPlot.  In this\n     * case, the 'autoRangeIncludesZero' flag is set to false AND the\n     * original dataset is replaced with a new dataset.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 53)",
            "(line 276,col 9)-(line 276,col 53)",
            "(line 277,col 9)-(line 279,col 23)",
            "(line 280,col 9)-(line 280,col 59)",
            "(line 281,col 9)-(line 281,col 59)",
            "(line 282,col 9)-(line 282,col 45)",
            "(line 283,col 9)-(line 283,col 58)",
            "(line 284,col 9)-(line 284,col 59)",
            "(line 287,col 9)-(line 287,col 71)",
            "(line 288,col 9)-(line 288,col 54)",
            "(line 289,col 9)-(line 289,col 55)",
            "(line 290,col 9)-(line 290,col 34)",
            "(line 291,col 9)-(line 291,col 59)",
            "(line 292,col 9)-(line 292,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange4()",
        "snippet": "    public void testAutoRange4() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.setValue(100.0, \"Row 1\", \"Column 1\");\n        dataset.setValue(200.0, \"Row 1\", \"Column 2\");\n        JFreeChart chart = ChartFactory.createBarChart(\"Test\", \"Categories\",\n                \"Value\", dataset, PlotOrientation.VERTICAL, false, false,\n                false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        BarRenderer br = (BarRenderer) plot.getRenderer();\n        br.setIncludeBaseInRange(false);\n        assertEquals(95.0, axis.getLowerBound(), EPSILON);\n        assertEquals(205.0, axis.getUpperBound(), EPSILON);\n\n        br.setIncludeBaseInRange(true);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);\n        assertEquals(210.0, axis.getUpperBound(), EPSILON);\n\n        axis.setAutoRangeIncludesZero(true);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);\n        assertEquals(210.0, axis.getUpperBound(), EPSILON);\n\n        br.setIncludeBaseInRange(true);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);\n        assertEquals(210.0, axis.getUpperBound(), EPSILON);\n\n        // now replacing the dataset should update the axis range...\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        dataset2.setValue(900.0, \"Row 1\", \"Column 1\");\n        dataset2.setValue(1000.0, \"Row 1\", \"Column 2\");\n        plot.setDataset(dataset2);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);\n        assertEquals(1050.0, axis.getUpperBound(), EPSILON);\n\n        br.setIncludeBaseInRange(false);\n        assertEquals(0.0, axis.getLowerBound(), EPSILON);\n        assertEquals(1050.0, axis.getUpperBound(), EPSILON);\n\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(895.0, axis.getLowerBound(), EPSILON);\n        assertEquals(1005.0, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 299,
        "end_line": 341,
        "comment": "\n     * A check for the interaction between the 'autoRangeIncludesZero' flag\n     * and the base setting in the BarRenderer.\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 70)",
            "(line 301,col 9)-(line 301,col 53)",
            "(line 302,col 9)-(line 302,col 53)",
            "(line 303,col 9)-(line 305,col 23)",
            "(line 306,col 9)-(line 306,col 59)",
            "(line 307,col 9)-(line 307,col 59)",
            "(line 308,col 9)-(line 308,col 45)",
            "(line 309,col 9)-(line 309,col 58)",
            "(line 310,col 9)-(line 310,col 40)",
            "(line 311,col 9)-(line 311,col 58)",
            "(line 312,col 9)-(line 312,col 59)",
            "(line 314,col 9)-(line 314,col 39)",
            "(line 315,col 9)-(line 315,col 57)",
            "(line 316,col 9)-(line 316,col 59)",
            "(line 318,col 9)-(line 318,col 44)",
            "(line 319,col 9)-(line 319,col 57)",
            "(line 320,col 9)-(line 320,col 59)",
            "(line 322,col 9)-(line 322,col 39)",
            "(line 323,col 9)-(line 323,col 57)",
            "(line 324,col 9)-(line 324,col 59)",
            "(line 327,col 9)-(line 327,col 71)",
            "(line 328,col 9)-(line 328,col 54)",
            "(line 329,col 9)-(line 329,col 55)",
            "(line 330,col 9)-(line 330,col 34)",
            "(line 331,col 9)-(line 331,col 57)",
            "(line 332,col 9)-(line 332,col 60)",
            "(line 334,col 9)-(line 334,col 40)",
            "(line 335,col 9)-(line 335,col 57)",
            "(line 336,col 9)-(line 336,col 60)",
            "(line 338,col 9)-(line 338,col 45)",
            "(line 339,col 9)-(line 339,col 59)",
            "(line 340,col 9)-(line 340,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange1()",
        "snippet": "    public void testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 347,
        "end_line": 369,
        "comment": "\n     * Checks that the auto-range for the domain axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 51)",
            "(line 349,col 9)-(line 349,col 29)",
            "(line 350,col 9)-(line 350,col 29)",
            "(line 351,col 9)-(line 351,col 29)",
            "(line 352,col 9)-(line 352,col 62)",
            "(line 353,col 9)-(line 353,col 34)",
            "(line 354,col 9)-(line 363,col 10)",
            "(line 364,col 9)-(line 364,col 47)",
            "(line 365,col 9)-(line 365,col 60)",
            "(line 366,col 9)-(line 366,col 45)",
            "(line 367,col 9)-(line 367,col 57)",
            "(line 368,col 9)-(line 368,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange2()",
        "snippet": "    public void testXYAutoRange2() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);\n    }\n",
        "begin_line": 375,
        "end_line": 397,
        "comment": "\n     * Checks that the auto-range for the range axis on an XYPlot is\n     * working as expected.\n     ",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 51)",
            "(line 377,col 9)-(line 377,col 29)",
            "(line 378,col 9)-(line 378,col 29)",
            "(line 379,col 9)-(line 379,col 29)",
            "(line 380,col 9)-(line 380,col 62)",
            "(line 381,col 9)-(line 381,col 34)",
            "(line 382,col 9)-(line 391,col 10)",
            "(line 392,col 9)-(line 392,col 47)",
            "(line 393,col 9)-(line 393,col 59)",
            "(line 394,col 9)-(line 394,col 45)",
            "(line 395,col 9)-(line 395,col 57)",
            "(line 396,col 9)-(line 396,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.NumberAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.NumberAxisTests.testSetLowerBound()",
        "snippet": "    public void testSetLowerBound() {\n        NumberAxis axis = new NumberAxis(\"X\");\n        axis.setRange(0.0, 10.0);\n        axis.setLowerBound(5.0);\n        assertEquals(5.0, axis.getLowerBound(), EPSILON);\n        axis.setLowerBound(10.0);\n        assertEquals(10.0, axis.getLowerBound(), EPSILON);\n        assertEquals(11.0, axis.getUpperBound(), EPSILON);\n\n        //axis.setRangeType(RangeType.POSITIVE);\n        //axis.setLowerBound(-5.0);\n        //assertEquals(0.0, axis.getLowerBound(), EPSILON);\n    }\n",
        "begin_line": 446,
        "end_line": 458,
        "comment": "\n     * Some checks for the setLowerBound() method.\n     ",
        "child_ranges": [
            "(line 447,col 9)-(line 447,col 46)",
            "(line 448,col 9)-(line 448,col 33)",
            "(line 449,col 9)-(line 449,col 32)",
            "(line 450,col 9)-(line 450,col 57)",
            "(line 451,col 9)-(line 451,col 33)",
            "(line 452,col 9)-(line 452,col 58)",
            "(line 453,col 9)-(line 453,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ValueAxisTests.class);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.ValueAxisTests(java.lang.String)",
        "snippet": "    public ValueAxisTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.testCloning()",
        "snippet": "    public void testCloning() {\n        ValueAxis a1 = new NumberAxis(\"Test\");\n        ValueAxis a2 = null;\n        try {\n            a2 = (NumberAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }\n",
        "begin_line": 90,
        "end_line": 102,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 28)",
            "(line 93,col 9)-(line 98,col 9)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.testEquals()",
        "snippet": "    public void testEquals() {\n\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        // axis line visible flag...\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n\n        // positiveArrowVisible;\n        a1.setPositiveArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setPositiveArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        // negativeArrowVisible;\n        a1.setNegativeArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setNegativeArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        //private Shape upArrow;\n\n        //private Shape downArrow;\n\n        //private Shape leftArrow;\n\n        //private Shape rightArrow;\n\n        // axisLinePaint\n        a1.setAxisLinePaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(Color.blue);\n        assertTrue(a1.equals(a2));\n\n        // axisLineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        a1.setAxisLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n\n        // inverted\n        a1.setInverted(true);\n        assertFalse(a1.equals(a2));\n        a2.setInverted(true);\n        assertTrue(a1.equals(a2));\n\n        // range\n        a1.setRange(new Range(50.0, 75.0));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Range(50.0, 75.0));\n        assertTrue(a1.equals(a2));\n\n        // autoRange\n        a1.setAutoRange(true);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRange(true);\n        assertTrue(a1.equals(a2));\n\n        // autoRangeMinimumSize\n        a1.setAutoRangeMinimumSize(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeMinimumSize(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertFalse(a1.equals(a2));\n        a2.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertTrue(a1.equals(a2));\n\n        // upperMargin\n        a1.setUpperMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        // lowerMargin\n        a1.setLowerMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        //private double fixedAutoRange;\n        a1.setFixedAutoRange(50.0);\n        assertFalse(a1.equals(a2));\n        a2.setFixedAutoRange(50.0);\n        assertTrue(a1.equals(a2));\n\n        //private boolean autoTickUnitSelection;\n        a1.setAutoTickUnitSelection(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoTickUnitSelection(false);\n        assertTrue(a1.equals(a2));\n\n        //private TickUnits standardTickUnits;\n        a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertFalse(a1.equals(a2));\n        a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertTrue(a1.equals(a2));\n\n        // verticalTickLabels\n        a1.setVerticalTickLabels(true);\n        assertFalse(a1.equals(a2));\n        a2.setVerticalTickLabels(true);\n        assertTrue(a1.equals(a2));\n\n\n        //private int autoTickIndex;\n        //protected double reservedForTickLabels;\n        //protected double reservedForAxisLabel;\n\n    }\n",
        "begin_line": 107,
        "end_line": 222,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 47)",
            "(line 110,col 9)-(line 110,col 47)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 114,col 9)-(line 114,col 37)",
            "(line 115,col 9)-(line 115,col 35)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 117,col 34)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 146,col 9)-(line 146,col 46)",
            "(line 147,col 9)-(line 147,col 37)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 150,col 34)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 154,col 35)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 159,col 9)-(line 159,col 43)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 43)",
            "(line 162,col 9)-(line 162,col 34)",
            "(line 165,col 9)-(line 165,col 30)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 167,col 30)",
            "(line 168,col 9)-(line 168,col 34)",
            "(line 171,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 172,col 35)",
            "(line 173,col 9)-(line 173,col 41)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 176,col 9)-(line 176,col 52)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 52)",
            "(line 179,col 9)-(line 179,col 34)",
            "(line 182,col 9)-(line 182,col 32)",
            "(line 183,col 9)-(line 183,col 35)",
            "(line 184,col 9)-(line 184,col 32)",
            "(line 185,col 9)-(line 185,col 34)",
            "(line 188,col 9)-(line 188,col 32)",
            "(line 189,col 9)-(line 189,col 35)",
            "(line 190,col 9)-(line 190,col 32)",
            "(line 191,col 9)-(line 191,col 34)",
            "(line 194,col 9)-(line 194,col 35)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 35)",
            "(line 197,col 9)-(line 197,col 34)",
            "(line 200,col 9)-(line 200,col 43)",
            "(line 201,col 9)-(line 201,col 35)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 203,col 9)-(line 203,col 34)",
            "(line 206,col 9)-(line 206,col 69)",
            "(line 207,col 9)-(line 207,col 35)",
            "(line 208,col 9)-(line 208,col 69)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 212,col 9)-(line 212,col 39)",
            "(line 213,col 9)-(line 213,col 35)",
            "(line 214,col 9)-(line 214,col 39)",
            "(line 215,col 9)-(line 215,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.axis.junit.ValueAxisTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "signature": "org.jfree.chart.axis.junit.ValueAxisTests.testAxisMargins()",
        "snippet": "    public void testAxisMargins() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        assertEquals(110.0, r.getLength(), EPSILON);\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        assertEquals(120.0, r.getLength(), EPSILON);\n    }\n",
        "begin_line": 228,
        "end_line": 245,
        "comment": "\n     * Tests the the lower and upper margin settings produce the expected\n     * results.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 45)",
            "(line 230,col 9)-(line 230,col 31)",
            "(line 231,col 9)-(line 231,col 31)",
            "(line 232,col 9)-(line 232,col 68)",
            "(line 233,col 9)-(line 233,col 38)",
            "(line 234,col 9)-(line 237,col 10)",
            "(line 238,col 9)-(line 238,col 74)",
            "(line 239,col 9)-(line 239,col 40)",
            "(line 240,col 9)-(line 240,col 52)",
            "(line 241,col 9)-(line 241,col 40)",
            "(line 242,col 9)-(line 242,col 40)",
            "(line 243,col 9)-(line 243,col 34)",
            "(line 244,col 9)-(line 244,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(JFreeChartTests.class);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.JFreeChartTests(java.lang.String)",
        "snippet": "    public JFreeChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        // create a dataset...\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Java\", new Double(43.2));\n        data.setValue(\"Visual Basic\", new Double(0.0));\n        data.setValue(\"C/C++\", new Double(17.5));\n\n        // create the chart...\n        this.pieChart = ChartFactory.createPieChart(\n            \"Pie Chart\",  // chart title\n            data,         // data\n            true,         // include legend\n            true,\n            false\n        );\n\n    }\n",
        "begin_line": 115,
        "end_line": 132,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 49)",
            "(line 124,col 9)-(line 130,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testEquals()",
        "snippet": "    public void testEquals() {\n        JFreeChart chart1 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), true);\n        JFreeChart chart2 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), true);\n        assertTrue(chart1.equals(chart2));\n        assertTrue(chart2.equals(chart1));\n\n        // renderingHints\n        chart1.setRenderingHints(new RenderingHints(\n                RenderingHints.KEY_TEXT_ANTIALIASING,\n                RenderingHints.VALUE_TEXT_ANTIALIAS_ON));\n        assertFalse(chart1.equals(chart2));\n        chart2.setRenderingHints(new RenderingHints(\n                RenderingHints.KEY_TEXT_ANTIALIASING,\n                RenderingHints.VALUE_TEXT_ANTIALIAS_ON));\n        assertTrue(chart1.equals(chart2));\n\n        // borderVisible\n        chart1.setBorderVisible(true);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBorderVisible(true);\n        assertTrue(chart1.equals(chart2));\n\n        // borderStroke\n        BasicStroke s = new BasicStroke(2.0f);\n        chart1.setBorderStroke(s);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBorderStroke(s);\n        assertTrue(chart1.equals(chart2));\n\n        // borderPaint\n        chart1.setBorderPaint(Color.red);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBorderPaint(Color.red);\n        assertTrue(chart1.equals(chart2));\n\n        // padding\n        chart1.setPadding(new RectangleInsets(1, 2, 3, 4));\n        assertFalse(chart1.equals(chart2));\n        chart2.setPadding(new RectangleInsets(1, 2, 3, 4));\n        assertTrue(chart1.equals(chart2));\n\n        // title\n        chart1.setTitle(\"XYZ\");\n        assertFalse(chart1.equals(chart2));\n        chart2.setTitle(\"XYZ\");\n        assertTrue(chart1.equals(chart2));\n\n        // subtitles\n        chart1.addSubtitle(new TextTitle(\"Subtitle\"));\n        assertFalse(chart1.equals(chart2));\n        chart2.addSubtitle(new TextTitle(\"Subtitle\"));\n        assertTrue(chart1.equals(chart2));\n\n        // plot\n        chart1 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new RingPlot(), false);\n        chart2 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), false);\n        assertFalse(chart1.equals(chart2));\n        chart2 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new RingPlot(), false);\n        assertTrue(chart1.equals(chart2));\n\n        // backgroundPaint\n        chart1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(chart1.equals(chart2));\n\n        // backgroundImage\n        chart1.setBackgroundImage(JFreeChart.INFO.getLogo());\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundImage(JFreeChart.INFO.getLogo());\n        assertTrue(chart1.equals(chart2));\n\n        // backgroundImageAlignment\n        chart1.setBackgroundImageAlignment(Align.BOTTOM_LEFT);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundImageAlignment(Align.BOTTOM_LEFT);\n        assertTrue(chart1.equals(chart2));\n\n        // backgroundImageAlpha\n        chart1.setBackgroundImageAlpha(0.1f);\n        assertFalse(chart1.equals(chart2));\n        chart2.setBackgroundImageAlpha(0.1f);\n        assertTrue(chart1.equals(chart2));\n    }\n",
        "begin_line": 137,
        "end_line": 227,
        "comment": "\n     * Check that the equals() method can distinguish all fields.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 139,col 76)",
            "(line 140,col 9)-(line 141,col 76)",
            "(line 142,col 9)-(line 142,col 42)",
            "(line 143,col 9)-(line 143,col 42)",
            "(line 146,col 9)-(line 148,col 57)",
            "(line 149,col 9)-(line 149,col 43)",
            "(line 150,col 9)-(line 152,col 57)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 156,col 9)-(line 156,col 38)",
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 158,col 38)",
            "(line 159,col 9)-(line 159,col 42)",
            "(line 162,col 9)-(line 162,col 46)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 164,col 9)-(line 164,col 43)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 169,col 9)-(line 169,col 41)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 42)",
            "(line 181,col 9)-(line 181,col 31)",
            "(line 182,col 9)-(line 182,col 43)",
            "(line 183,col 9)-(line 183,col 31)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 187,col 9)-(line 187,col 54)",
            "(line 188,col 9)-(line 188,col 43)",
            "(line 189,col 9)-(line 189,col 54)",
            "(line 190,col 9)-(line 190,col 42)",
            "(line 193,col 9)-(line 194,col 78)",
            "(line 195,col 9)-(line 196,col 77)",
            "(line 197,col 9)-(line 197,col 43)",
            "(line 198,col 9)-(line 199,col 78)",
            "(line 200,col 9)-(line 200,col 42)",
            "(line 203,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 43)",
            "(line 206,col 9)-(line 207,col 41)",
            "(line 208,col 9)-(line 208,col 42)",
            "(line 211,col 9)-(line 211,col 61)",
            "(line 212,col 9)-(line 212,col 43)",
            "(line 213,col 9)-(line 213,col 61)",
            "(line 214,col 9)-(line 214,col 42)",
            "(line 217,col 9)-(line 217,col 62)",
            "(line 218,col 9)-(line 218,col 43)",
            "(line 219,col 9)-(line 219,col 62)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 43)",
            "(line 225,col 9)-(line 225,col 45)",
            "(line 226,col 9)-(line 226,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        JFreeChart chart1 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), true);\n        JFreeChart chart2 = new JFreeChart(\"Title\",\n                new Font(\"SansSerif\", Font.PLAIN, 12), new PiePlot(), false);\n        assertFalse(chart1.equals(chart2));\n        assertFalse(chart2.equals(chart1));\n    }\n",
        "begin_line": 233,
        "end_line": 240,
        "comment": "\n     * A test to make sure that the legend is being picked up in the\n     * equals() testing.\n     ",
        "child_ranges": [
            "(line 234,col 9)-(line 235,col 76)",
            "(line 236,col 9)-(line 237,col 77)",
            "(line 238,col 9)-(line 238,col 43)",
            "(line 239,col 9)-(line 239,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSubtitleCount()",
        "snippet": "    public void testSubtitleCount() {\n        int count = this.pieChart.getSubtitleCount();\n        assertEquals(1, count);\n    }\n",
        "begin_line": 245,
        "end_line": 248,
        "comment": "\n     * Checks the subtitle count - should be 1 (the legend).\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 53)",
            "(line 247,col 9)-(line 247,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testGetSubtitle()",
        "snippet": "    public void testGetSubtitle() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true,\n                false, false);\n        Title t = chart.getSubtitle(0);\n        assertTrue(t instanceof LegendTitle);\n\n        boolean pass = false;\n        try {\n            t = chart.getSubtitle(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            t = chart.getSubtitle(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            t = chart.getSubtitle(2);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 253,
        "end_line": 286,
        "comment": "\n     * Some checks for the getSubtitle() method.\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 60)",
            "(line 255,col 9)-(line 256,col 30)",
            "(line 257,col 9)-(line 257,col 39)",
            "(line 258,col 9)-(line 258,col 45)",
            "(line 260,col 9)-(line 260,col 29)",
            "(line 261,col 9)-(line 266,col 9)",
            "(line 267,col 9)-(line 267,col 25)",
            "(line 269,col 9)-(line 269,col 21)",
            "(line 270,col 9)-(line 275,col 9)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 278,col 9)-(line 278,col 21)",
            "(line 279,col 9)-(line 284,col 9)",
            "(line 285,col 9)-(line 285,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Type 1\", 54.5);\n        data.setValue(\"Type 2\", 23.9);\n        data.setValue(\"Type 3\", 45.8);\n\n        JFreeChart c1 = ChartFactory.createPieChart(\"Test\", data, true, true,\n                true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n        LegendTitle lt2 = c2.getLegend();\n        assertTrue(lt2.getSources()[0] == c2.getPlot());\n    }\n",
        "begin_line": 291,
        "end_line": 319,
        "comment": "\n     * Serialize a pie chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 57)",
            "(line 294,col 9)-(line 294,col 38)",
            "(line 295,col 9)-(line 295,col 38)",
            "(line 296,col 9)-(line 296,col 38)",
            "(line 298,col 9)-(line 299,col 22)",
            "(line 300,col 9)-(line 300,col 29)",
            "(line 302,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 316,col 29)",
            "(line 317,col 9)-(line 317,col 41)",
            "(line 318,col 9)-(line 318,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        DefaultPieDataset data = new DefaultPieDataset();\n        data.setValue(\"Type 1\", 54.5);\n        data.setValue(\"Type 2\", 23.9);\n        data.setValue(\"Type 3\", 45.8);\n\n        JFreeChart c1 = ChartFactory.createPieChart3D(\"Test\", data, true, true,\n                true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }\n",
        "begin_line": 324,
        "end_line": 351,
        "comment": "\n     * Serialize a 3D pie chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 57)",
            "(line 327,col 9)-(line 327,col 38)",
            "(line 328,col 9)-(line 328,col 38)",
            "(line 329,col 9)-(line 329,col 38)",
            "(line 331,col 9)-(line 332,col 22)",
            "(line 333,col 9)-(line 333,col 29)",
            "(line 335,col 9)-(line 348,col 9)",
            "(line 349,col 9)-(line 349,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n\n        // row keys...\n        String series1 = \"First\";\n        String series2 = \"Second\";\n        String series3 = \"Third\";\n\n        // column keys...\n        String category1 = \"Category 1\";\n        String category2 = \"Category 2\";\n        String category3 = \"Category 3\";\n        String category4 = \"Category 4\";\n        String category5 = \"Category 5\";\n        String category6 = \"Category 6\";\n        String category7 = \"Category 7\";\n        String category8 = \"Category 8\";\n\n        // create the dataset...\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n        dataset.addValue(1.0, series1, category1);\n        dataset.addValue(4.0, series1, category2);\n        dataset.addValue(3.0, series1, category3);\n        dataset.addValue(5.0, series1, category4);\n        dataset.addValue(5.0, series1, category5);\n        dataset.addValue(7.0, series1, category6);\n        dataset.addValue(7.0, series1, category7);\n        dataset.addValue(8.0, series1, category8);\n\n        dataset.addValue(5.0, series2, category1);\n        dataset.addValue(7.0, series2, category2);\n        dataset.addValue(6.0, series2, category3);\n        dataset.addValue(8.0, series2, category4);\n        dataset.addValue(4.0, series2, category5);\n        dataset.addValue(4.0, series2, category6);\n        dataset.addValue(2.0, series2, category7);\n        dataset.addValue(1.0, series2, category8);\n\n        dataset.addValue(4.0, series3, category1);\n        dataset.addValue(3.0, series3, category2);\n        dataset.addValue(2.0, series3, category3);\n        dataset.addValue(3.0, series3, category4);\n        dataset.addValue(6.0, series3, category5);\n        dataset.addValue(3.0, series3, category6);\n        dataset.addValue(4.0, series3, category7);\n        dataset.addValue(3.0, series3, category8);\n\n        // create the chart...\n        JFreeChart c1 = ChartFactory.createBarChart(\n            \"Vertical Bar Chart\",      // chart title\n            \"Category\",                // domain axis label\n            \"Value\",                   // range axis label\n            dataset,                   // data\n            PlotOrientation.VERTICAL,  // orientation\n            true,                      // include legend\n            true,\n            false\n        );\n\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }\n",
        "begin_line": 356,
        "end_line": 433,
        "comment": "\n     * Serialize a bar chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 33)",
            "(line 360,col 9)-(line 360,col 34)",
            "(line 361,col 9)-(line 361,col 33)",
            "(line 364,col 9)-(line 364,col 40)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 367,col 40)",
            "(line 368,col 9)-(line 368,col 40)",
            "(line 369,col 9)-(line 369,col 40)",
            "(line 370,col 9)-(line 370,col 40)",
            "(line 371,col 9)-(line 371,col 40)",
            "(line 374,col 9)-(line 374,col 70)",
            "(line 376,col 9)-(line 376,col 50)",
            "(line 377,col 9)-(line 377,col 50)",
            "(line 378,col 9)-(line 378,col 50)",
            "(line 379,col 9)-(line 379,col 50)",
            "(line 380,col 9)-(line 380,col 50)",
            "(line 381,col 9)-(line 381,col 50)",
            "(line 382,col 9)-(line 382,col 50)",
            "(line 383,col 9)-(line 383,col 50)",
            "(line 385,col 9)-(line 385,col 50)",
            "(line 386,col 9)-(line 386,col 50)",
            "(line 387,col 9)-(line 387,col 50)",
            "(line 388,col 9)-(line 388,col 50)",
            "(line 389,col 9)-(line 389,col 50)",
            "(line 390,col 9)-(line 390,col 50)",
            "(line 391,col 9)-(line 391,col 50)",
            "(line 392,col 9)-(line 392,col 50)",
            "(line 394,col 9)-(line 394,col 50)",
            "(line 395,col 9)-(line 395,col 50)",
            "(line 396,col 9)-(line 396,col 50)",
            "(line 397,col 9)-(line 397,col 50)",
            "(line 398,col 9)-(line 398,col 50)",
            "(line 399,col 9)-(line 399,col 50)",
            "(line 400,col 9)-(line 400,col 50)",
            "(line 401,col 9)-(line 401,col 50)",
            "(line 404,col 9)-(line 413,col 10)",
            "(line 415,col 9)-(line 415,col 29)",
            "(line 417,col 9)-(line 430,col 9)",
            "(line 431,col 9)-(line 431,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n\n        RegularTimePeriod t = new Day();\n        TimeSeries series = new TimeSeries(\"Series 1\");\n        series.add(t, 36.4);\n        t = t.next();\n        series.add(t, 63.5);\n        TimeSeriesCollection dataset = new TimeSeriesCollection();\n        dataset.addSeries(series);\n\n        JFreeChart c1 = ChartFactory.createTimeSeriesChart(\"Test\", \"Date\",\n                \"Value\", dataset, true, true, true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }\n",
        "begin_line": 438,
        "end_line": 468,
        "comment": "\n     * Serialize a time seroes chart, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 440,col 9)-(line 440,col 40)",
            "(line 441,col 9)-(line 441,col 55)",
            "(line 442,col 9)-(line 442,col 28)",
            "(line 443,col 9)-(line 443,col 21)",
            "(line 444,col 9)-(line 444,col 28)",
            "(line 445,col 9)-(line 445,col 66)",
            "(line 446,col 9)-(line 446,col 34)",
            "(line 448,col 9)-(line 449,col 52)",
            "(line 450,col 9)-(line 450,col 29)",
            "(line 452,col 9)-(line 465,col 9)",
            "(line 466,col 9)-(line 466,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testAddSubtitle()",
        "snippet": "    public void testAddSubtitle() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true,\n                false, false);\n\n        TextTitle t0 = new TextTitle(\"T0\");\n        chart.addSubtitle(0, t0);\n        assertEquals(t0, chart.getSubtitle(0));\n\n        TextTitle t1 = new TextTitle(\"T1\");\n        chart.addSubtitle(t1);\n        assertEquals(t1, chart.getSubtitle(2));  // subtitle 1 is the legend\n\n        boolean pass = false;\n        try {\n            chart.addSubtitle(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            chart.addSubtitle(-1, t0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            chart.addSubtitle(4, t0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 473,
        "end_line": 512,
        "comment": "\n     * Some checks for the addSubtitle() methods.\n     ",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 60)",
            "(line 475,col 9)-(line 476,col 30)",
            "(line 478,col 9)-(line 478,col 43)",
            "(line 479,col 9)-(line 479,col 33)",
            "(line 480,col 9)-(line 480,col 47)",
            "(line 482,col 9)-(line 482,col 43)",
            "(line 483,col 9)-(line 483,col 30)",
            "(line 484,col 9)-(line 484,col 47)",
            "(line 486,col 9)-(line 486,col 29)",
            "(line 487,col 9)-(line 492,col 9)",
            "(line 493,col 9)-(line 493,col 25)",
            "(line 495,col 9)-(line 495,col 21)",
            "(line 496,col 9)-(line 501,col 9)",
            "(line 502,col 9)-(line 502,col 25)",
            "(line 504,col 9)-(line 504,col 21)",
            "(line 505,col 9)-(line 510,col 9)",
            "(line 511,col 9)-(line 511,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testGetSubtitles()",
        "snippet": "    public void testGetSubtitles() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true,\n                false, false);\n        List subtitles = chart.getSubtitles();\n\n        assertEquals(1, chart.getSubtitleCount());\n\n        // adding something to the returned list should NOT change the chart\n        subtitles.add(new TextTitle(\"T\"));\n        assertEquals(1, chart.getSubtitleCount());\n    }\n",
        "begin_line": 517,
        "end_line": 528,
        "comment": "\n     * Some checks for the getSubtitles() method.\n     ",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 60)",
            "(line 519,col 9)-(line 520,col 30)",
            "(line 521,col 9)-(line 521,col 46)",
            "(line 523,col 9)-(line 523,col 50)",
            "(line 526,col 9)-(line 526,col 42)",
            "(line 527,col 9)-(line 527,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testLegendEvents()",
        "snippet": "    public void testLegendEvents() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true,\n                false, false);\n        chart.addChangeListener(this);\n        this.lastChartChangeEvent = null;\n        LegendTitle legend = chart.getLegend();\n        legend.setPosition(RectangleEdge.TOP);\n        assertNotNull(this.lastChartChangeEvent);\n    }\n",
        "begin_line": 533,
        "end_line": 542,
        "comment": "\n     * Some checks for the default legend firing change events.\n     ",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 60)",
            "(line 535,col 9)-(line 536,col 30)",
            "(line 537,col 9)-(line 537,col 38)",
            "(line 538,col 9)-(line 538,col 41)",
            "(line 539,col 9)-(line 539,col 47)",
            "(line 540,col 9)-(line 540,col 46)",
            "(line 541,col 9)-(line 541,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.testTitleChangeEvent()",
        "snippet": "    public void testTitleChangeEvent() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        JFreeChart chart = ChartFactory.createPieChart(\"title\", dataset, true,\n                false, false);\n        chart.addChangeListener(this);\n        this.lastChartChangeEvent = null;\n        TextTitle t = chart.getTitle();\n        t.setFont(new Font(\"Dialog\", Font.BOLD, 9));\n        assertNotNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n\n        // now create a new title and replace the existing title, several\n        // things should happen:\n        // (1) Adding the new title should trigger an immediate\n        //     ChartChangeEvent;\n        // (2) Modifying the new title should trigger a ChartChangeEvent;\n        // (3) Modifying the old title should NOT trigger a ChartChangeEvent\n        TextTitle t2 = new TextTitle(\"T2\");\n        chart.setTitle(t2);\n        assertNotNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n\n        t2.setFont(new Font(\"Dialog\", Font.BOLD, 9));\n        assertNotNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n\n        t.setFont(new Font(\"Dialog\", Font.BOLD, 9));\n        assertNull(this.lastChartChangeEvent);\n        this.lastChartChangeEvent = null;\n    }\n",
        "begin_line": 547,
        "end_line": 576,
        "comment": "\n     * Some checks for title changes and event notification.\n     ",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 60)",
            "(line 549,col 9)-(line 550,col 30)",
            "(line 551,col 9)-(line 551,col 38)",
            "(line 552,col 9)-(line 552,col 41)",
            "(line 553,col 9)-(line 553,col 39)",
            "(line 554,col 9)-(line 554,col 52)",
            "(line 555,col 9)-(line 555,col 49)",
            "(line 556,col 9)-(line 556,col 41)",
            "(line 564,col 9)-(line 564,col 43)",
            "(line 565,col 9)-(line 565,col 27)",
            "(line 566,col 9)-(line 566,col 49)",
            "(line 567,col 9)-(line 567,col 41)",
            "(line 569,col 9)-(line 569,col 53)",
            "(line 570,col 9)-(line 570,col 49)",
            "(line 571,col 9)-(line 571,col 41)",
            "(line 573,col 9)-(line 573,col 52)",
            "(line 574,col 9)-(line 574,col 46)",
            "(line 575,col 9)-(line 575,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.JFreeChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
        "signature": "org.jfree.chart.junit.JFreeChartTests.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "    public void chartChanged(ChartChangeEvent event) {\n        this.lastChartChangeEvent = event;\n    }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "\n     * Records the last chart change event.\n     *\n     * @param event  the event.\n     ",
        "child_ranges": [
            "(line 587,col 9)-(line 587,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ScatterPlotTests.class);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.ScatterPlotTests(java.lang.String)",
        "snippet": "    public ScatterPlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n\n        assertTrue(success);\n\n    }\n",
        "begin_line": 105,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions\n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 32)",
            "(line 109,col 9)-(line 121,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 130,
        "end_line": 151,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 52)",
            "(line 134,col 9)-(line 134,col 32)",
            "(line 135,col 9)-(line 135,col 32)",
            "(line 136,col 9)-(line 136,col 32)",
            "(line 137,col 9)-(line 137,col 60)",
            "(line 139,col 9)-(line 139,col 46)",
            "(line 140,col 9)-(line 140,col 40)",
            "(line 141,col 9)-(line 141,col 52)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 35)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 145,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 73)",
            "(line 148,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 157,
        "end_line": 164,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 52)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 73)",
            "(line 161,col 9)-(line 161,col 50)",
            "(line 162,col 9)-(line 162,col 75)",
            "(line 163,col 9)-(line 163,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createScatterPlot(\n            \"Scatter Plot\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            false            // urls\n        );\n\n    }\n",
        "begin_line": 171,
        "end_line": 192,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 30)",
            "(line 176,col 9)-(line 176,col 30)",
            "(line 177,col 9)-(line 177,col 30)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 181,col 9)-(line 190,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.ScatterPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "signature": "org.jfree.chart.junit.ScatterPlotTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 209,col 13)-(line 209,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesChartTests.class);\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.TimeSeriesChartTests(java.lang.String)",
        "snippet": "    public TimeSeriesChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 102,
        "end_line": 120,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions\n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 32)",
            "(line 105,col 9)-(line 117,col 9)",
            "(line 118,col 9)-(line 118,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 125,
        "end_line": 146,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 52)",
            "(line 129,col 9)-(line 129,col 32)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 60)",
            "(line 134,col 9)-(line 134,col 46)",
            "(line 135,col 9)-(line 135,col 40)",
            "(line 136,col 9)-(line 136,col 52)",
            "(line 137,col 9)-(line 137,col 33)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 38)",
            "(line 141,col 9)-(line 142,col 73)",
            "(line 143,col 9)-(line 144,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 152,
        "end_line": 159,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 52)",
            "(line 154,col 9)-(line 154,col 53)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 50)",
            "(line 157,col 9)-(line 157,col 75)",
            "(line 158,col 9)-(line 158,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createTimeSeriesChart(\n            \"XY Line Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }\n",
        "begin_line": 166,
        "end_line": 186,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 52)",
            "(line 170,col 9)-(line 170,col 30)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 176,col 9)-(line 184,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.TimeSeriesChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "signature": "org.jfree.chart.junit.TimeSeriesChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 203,col 13)-(line 203,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYAreaChartTests.class);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.XYAreaChartTests(java.lang.String)",
        "snippet": "    public XYAreaChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions\n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0,\n                false);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 153,
        "end_line": 161,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 159,col 23)",
            "(line 160,col 9)-(line 160,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYAreaChart(\n            \"Area Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }\n",
        "begin_line": 168,
        "end_line": 189,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 30)",
            "(line 175,col 9)-(line 175,col 60)",
            "(line 178,col 9)-(line 187,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYAreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 206,col 13)-(line 206,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYStepAreaChartTests.class);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.XYStepAreaChartTests(java.lang.String)",
        "snippet": "    public XYStepAreaChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions\n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 158,col 75)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYStepAreaChart(\n            \"Step Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true            // urls\n        );\n\n    }\n",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 177,col 9)-(line 186,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepAreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYStepChartTests.class);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.XYStepChartTests(java.lang.String)",
        "snippet": "    public XYStepChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 103,
        "end_line": 121,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions\n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 32)",
            "(line 106,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 126,
        "end_line": 147,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 32)",
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 142,col 9)-(line 143,col 73)",
            "(line 144,col 9)-(line 145,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 153,
        "end_line": 160,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 73)",
            "(line 157,col 9)-(line 157,col 50)",
            "(line 158,col 9)-(line 158,col 75)",
            "(line 159,col 9)-(line 159,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1.0, 1.0);\n        series1.add(2.0, 2.0);\n        series1.add(3.0, 3.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        // create the chart...\n        return ChartFactory.createXYStepChart(\n            \"Step Chart\",  // chart title\n            \"Domain\",\n            \"Range\",\n            dataset,         // data\n            PlotOrientation.VERTICAL,\n            true,            // include legend\n            true,            // tooltips\n            true             // urls\n        );\n\n    }\n",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 172,col 9)-(line 172,col 30)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 177,col 9)-(line 186,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.XYStepChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
        "signature": "org.jfree.chart.junit.XYStepChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYPlotTests.class);\n    }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
        "snippet": "    public XYPlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n\n        XYPlot plot1 = new XYPlot();\n        XYPlot plot2 = new XYPlot();\n        assertTrue(plot1.equals(plot2));\n\n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis...\n        plot1.setDomainAxis(new NumberAxis(\"Domain Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new NumberAxis(\"Domain Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DomainAxes...\n        plot1.setDomainAxis(11, new NumberAxis(\"Secondary Domain Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new NumberAxis(\"Secondary Domain Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DomainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxis...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary RangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary RangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DatasetDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // secondaryDatasetRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // renderer\n        plot1.setRenderer(new DefaultXYItemRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new DefaultXYItemRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        // secondary renderers\n        plot1.setRenderer(11, new DefaultXYItemRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new DefaultXYItemRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeZeroBaselineVisible\n        plot1.setRangeZeroBaselineVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeZeroBaselineStroke\n        plot1.setRangeZeroBaselineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeZeroBaselinePaint\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink,\n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink,\n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        // range markers\n        plot1.addRangeMarker(new ValueMarker(4.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary range markers\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        // fixed legend items\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        // quadrant origin\n        plot1.setQuadrantOrigin(new Point2D.Double(12.3, 45.6));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantOrigin(new Point2D.Double(12.3, 45.6));\n        assertTrue(plot1.equals(plot2));\n\n        // quadrant paint\n        plot1.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red,\n                4.0f, 5.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red,\n                4.0f, 5.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red,\n                5.0f, 6.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red,\n                5.0f, 6.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red,\n                6.0f, 7.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red,\n                6.0f, 7.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainTickBandPaint(Color.red);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainTickBandPaint(Color.red);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeTickBandPaint(Color.blue);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeTickBandPaint(Color.blue);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainMinorGridlinePaint(Color.red);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainMinorGridlinePaint(Color.red);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlineStroke(new BasicStroke(1.1f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(new BasicStroke(1.1f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(Color.blue);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(Color.blue);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        List axisIndices = Arrays.asList(new Integer[] {new Integer(0),\n            new Integer(1)});\n        plot1.mapDatasetToDomainAxes(0, axisIndices);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxes(0, axisIndices);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.mapDatasetToRangeAxes(0, axisIndices);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxes(0, axisIndices);\n        assertTrue(plot1.equals(plot2));\n    }\n",
        "begin_line": 144,
        "end_line": 439,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 36)",
            "(line 147,col 9)-(line 147,col 36)",
            "(line 148,col 9)-(line 148,col 40)",
            "(line 151,col 9)-(line 151,col 57)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 57)",
            "(line 154,col 9)-(line 154,col 40)",
            "(line 157,col 9)-(line 157,col 73)",
            "(line 158,col 9)-(line 158,col 41)",
            "(line 159,col 9)-(line 159,col 73)",
            "(line 160,col 9)-(line 160,col 40)",
            "(line 163,col 9)-(line 163,col 59)",
            "(line 164,col 9)-(line 164,col 41)",
            "(line 165,col 9)-(line 165,col 59)",
            "(line 166,col 9)-(line 166,col 40)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 41)",
            "(line 171,col 9)-(line 171,col 63)",
            "(line 172,col 9)-(line 172,col 40)",
            "(line 175,col 9)-(line 175,col 73)",
            "(line 176,col 9)-(line 176,col 41)",
            "(line 177,col 9)-(line 177,col 73)",
            "(line 178,col 9)-(line 178,col 40)",
            "(line 181,col 9)-(line 181,col 67)",
            "(line 182,col 9)-(line 182,col 41)",
            "(line 183,col 9)-(line 183,col 67)",
            "(line 184,col 9)-(line 184,col 40)",
            "(line 187,col 9)-(line 187,col 57)",
            "(line 188,col 9)-(line 188,col 41)",
            "(line 189,col 9)-(line 189,col 57)",
            "(line 190,col 9)-(line 190,col 40)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 194,col 9)-(line 194,col 41)",
            "(line 195,col 9)-(line 195,col 62)",
            "(line 196,col 9)-(line 196,col 40)",
            "(line 199,col 9)-(line 199,col 71)",
            "(line 200,col 9)-(line 200,col 41)",
            "(line 201,col 9)-(line 201,col 71)",
            "(line 202,col 9)-(line 202,col 40)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 41)",
            "(line 207,col 9)-(line 207,col 66)",
            "(line 208,col 9)-(line 208,col 40)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 212,col 9)-(line 212,col 41)",
            "(line 213,col 9)-(line 213,col 45)",
            "(line 214,col 9)-(line 214,col 40)",
            "(line 217,col 9)-(line 217,col 44)",
            "(line 218,col 9)-(line 218,col 41)",
            "(line 219,col 9)-(line 219,col 44)",
            "(line 220,col 9)-(line 220,col 40)",
            "(line 223,col 9)-(line 223,col 55)",
            "(line 224,col 9)-(line 224,col 41)",
            "(line 225,col 9)-(line 225,col 55)",
            "(line 226,col 9)-(line 226,col 40)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 41)",
            "(line 231,col 9)-(line 231,col 59)",
            "(line 232,col 9)-(line 232,col 40)",
            "(line 235,col 9)-(line 235,col 47)",
            "(line 236,col 9)-(line 236,col 41)",
            "(line 237,col 9)-(line 237,col 47)",
            "(line 238,col 9)-(line 238,col 40)",
            "(line 241,col 9)-(line 241,col 46)",
            "(line 242,col 9)-(line 242,col 46)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 46)",
            "(line 245,col 9)-(line 245,col 40)",
            "(line 248,col 9)-(line 249,col 40)",
            "(line 250,col 9)-(line 250,col 41)",
            "(line 251,col 9)-(line 252,col 40)",
            "(line 253,col 9)-(line 253,col 40)",
            "(line 256,col 9)-(line 256,col 46)",
            "(line 257,col 9)-(line 257,col 41)",
            "(line 258,col 9)-(line 258,col 46)",
            "(line 259,col 9)-(line 259,col 40)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 41)",
            "(line 264,col 9)-(line 264,col 45)",
            "(line 265,col 9)-(line 265,col 40)",
            "(line 268,col 9)-(line 269,col 40)",
            "(line 270,col 9)-(line 270,col 41)",
            "(line 271,col 9)-(line 272,col 40)",
            "(line 273,col 9)-(line 273,col 40)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 48)",
            "(line 279,col 9)-(line 279,col 40)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 41)",
            "(line 284,col 9)-(line 284,col 49)",
            "(line 285,col 9)-(line 285,col 40)",
            "(line 288,col 9)-(line 289,col 40)",
            "(line 290,col 9)-(line 290,col 41)",
            "(line 291,col 9)-(line 292,col 40)",
            "(line 293,col 9)-(line 293,col 40)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 41)",
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 40)",
            "(line 302,col 9)-(line 302,col 44)",
            "(line 303,col 9)-(line 303,col 41)",
            "(line 304,col 9)-(line 304,col 44)",
            "(line 305,col 9)-(line 305,col 40)",
            "(line 308,col 9)-(line 308,col 46)",
            "(line 309,col 9)-(line 309,col 41)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 40)",
            "(line 314,col 9)-(line 315,col 40)",
            "(line 316,col 9)-(line 316,col 41)",
            "(line 317,col 9)-(line 318,col 40)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 41)",
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 40)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 41)",
            "(line 330,col 9)-(line 330,col 51)",
            "(line 331,col 9)-(line 331,col 40)",
            "(line 334,col 9)-(line 334,col 72)",
            "(line 335,col 9)-(line 335,col 41)",
            "(line 336,col 9)-(line 336,col 72)",
            "(line 337,col 9)-(line 337,col 40)",
            "(line 339,col 9)-(line 339,col 73)",
            "(line 340,col 9)-(line 340,col 41)",
            "(line 341,col 9)-(line 341,col 73)",
            "(line 342,col 9)-(line 342,col 40)",
            "(line 345,col 9)-(line 345,col 62)",
            "(line 346,col 9)-(line 346,col 41)",
            "(line 347,col 9)-(line 347,col 62)",
            "(line 348,col 9)-(line 348,col 40)",
            "(line 351,col 9)-(line 351,col 27)",
            "(line 352,col 9)-(line 352,col 41)",
            "(line 353,col 9)-(line 353,col 27)",
            "(line 354,col 9)-(line 354,col 40)",
            "(line 357,col 9)-(line 357,col 64)",
            "(line 358,col 9)-(line 358,col 41)",
            "(line 359,col 9)-(line 359,col 64)",
            "(line 360,col 9)-(line 360,col 40)",
            "(line 363,col 9)-(line 364,col 41)",
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 367,col 41)",
            "(line 368,col 9)-(line 368,col 40)",
            "(line 369,col 9)-(line 370,col 41)",
            "(line 371,col 9)-(line 371,col 41)",
            "(line 372,col 9)-(line 373,col 41)",
            "(line 374,col 9)-(line 374,col 40)",
            "(line 375,col 9)-(line 376,col 41)",
            "(line 377,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 379,col 41)",
            "(line 380,col 9)-(line 380,col 40)",
            "(line 381,col 9)-(line 382,col 41)",
            "(line 383,col 9)-(line 383,col 41)",
            "(line 384,col 9)-(line 385,col 41)",
            "(line 386,col 9)-(line 386,col 40)",
            "(line 388,col 9)-(line 388,col 48)",
            "(line 389,col 9)-(line 389,col 41)",
            "(line 390,col 9)-(line 390,col 48)",
            "(line 391,col 9)-(line 391,col 40)",
            "(line 393,col 9)-(line 393,col 48)",
            "(line 394,col 9)-(line 394,col 41)",
            "(line 395,col 9)-(line 395,col 48)",
            "(line 396,col 9)-(line 396,col 40)",
            "(line 398,col 9)-(line 398,col 51)",
            "(line 399,col 9)-(line 399,col 41)",
            "(line 400,col 9)-(line 400,col 51)",
            "(line 401,col 9)-(line 401,col 40)",
            "(line 403,col 9)-(line 403,col 53)",
            "(line 404,col 9)-(line 404,col 41)",
            "(line 405,col 9)-(line 405,col 53)",
            "(line 406,col 9)-(line 406,col 40)",
            "(line 408,col 9)-(line 408,col 61)",
            "(line 409,col 9)-(line 409,col 41)",
            "(line 410,col 9)-(line 410,col 61)",
            "(line 411,col 9)-(line 411,col 40)",
            "(line 413,col 9)-(line 413,col 50)",
            "(line 414,col 9)-(line 414,col 41)",
            "(line 415,col 9)-(line 415,col 50)",
            "(line 416,col 9)-(line 416,col 40)",
            "(line 418,col 9)-(line 418,col 53)",
            "(line 419,col 9)-(line 419,col 41)",
            "(line 420,col 9)-(line 420,col 53)",
            "(line 421,col 9)-(line 421,col 40)",
            "(line 423,col 9)-(line 423,col 66)",
            "(line 424,col 9)-(line 424,col 41)",
            "(line 425,col 9)-(line 425,col 66)",
            "(line 426,col 9)-(line 426,col 40)",
            "(line 428,col 9)-(line 429,col 29)",
            "(line 430,col 9)-(line 430,col 53)",
            "(line 431,col 9)-(line 431,col 41)",
            "(line 432,col 9)-(line 432,col 53)",
            "(line 433,col 9)-(line 433,col 40)",
            "(line 435,col 9)-(line 435,col 52)",
            "(line 436,col 9)-(line 436,col 41)",
            "(line 437,col 9)-(line 437,col 52)",
            "(line 438,col 9)-(line 438,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYPlot p1 = new XYPlot();\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 444,
        "end_line": 456,
        "comment": "\n     * Confirm that basic cloning works.\n     ",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 33)",
            "(line 446,col 9)-(line 446,col 25)",
            "(line 447,col 9)-(line 452,col 9)",
            "(line 453,col 9)-(line 453,col 29)",
            "(line 454,col 9)-(line 454,col 51)",
            "(line 455,col 9)-(line 455,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"),\n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        p1.setRangeAxis(1, new NumberAxis(\"Range Axis 2\"));\n        List axisIndices = Arrays.asList(new Integer[] {new Integer(0),\n                new Integer(1)});\n        p1.mapDatasetToDomainAxes(0, axisIndices);\n        p1.mapDatasetToRangeAxes(0, axisIndices);\n        p1.setRenderer(1, new XYBarRenderer());\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 461,
        "end_line": 480,
        "comment": "\n     * Tests cloning for a more complex plot.\n     ",
        "child_ranges": [
            "(line 462,col 9)-(line 463,col 76)",
            "(line 464,col 9)-(line 464,col 59)",
            "(line 465,col 9)-(line 466,col 33)",
            "(line 467,col 9)-(line 467,col 50)",
            "(line 468,col 9)-(line 468,col 49)",
            "(line 469,col 9)-(line 469,col 47)",
            "(line 470,col 9)-(line 470,col 25)",
            "(line 471,col 9)-(line 476,col 9)",
            "(line 477,col 9)-(line 477,col 29)",
            "(line 478,col 9)-(line 478,col 51)",
            "(line 479,col 9)-(line 479,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning3()",
        "snippet": "    public void testCloning3() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"),\n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        LegendItemCollection c1 = new LegendItemCollection();\n        p1.setFixedLegendItems(c1);\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n\n        // verify independence of fixed legend item collection\n        c1.add(new LegendItem(\"X\"));\n        assertFalse(p1.equals(p2));\n    }\n",
        "begin_line": 486,
        "end_line": 505,
        "comment": "\n     * Tests cloning for a plot where the fixed legend items have been\n     * specified.\n     ",
        "child_ranges": [
            "(line 487,col 9)-(line 488,col 76)",
            "(line 489,col 9)-(line 489,col 61)",
            "(line 490,col 9)-(line 490,col 35)",
            "(line 491,col 9)-(line 491,col 25)",
            "(line 492,col 9)-(line 497,col 9)",
            "(line 498,col 9)-(line 498,col 29)",
            "(line 499,col 9)-(line 499,col 51)",
            "(line 500,col 9)-(line 500,col 34)",
            "(line 503,col 9)-(line 503,col 36)",
            "(line 504,col 9)-(line 504,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
        "snippet": "    public void testCloning_QuadrantOrigin() {\n        XYPlot p1 = new XYPlot();\n        Point2D p = new Point2D.Double(1.2, 3.4);\n        p1.setQuadrantOrigin(p);\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.getQuadrantOrigin() != p);\n    }\n",
        "begin_line": 510,
        "end_line": 525,
        "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 33)",
            "(line 512,col 9)-(line 512,col 49)",
            "(line 513,col 9)-(line 513,col 32)",
            "(line 514,col 9)-(line 514,col 25)",
            "(line 515,col 9)-(line 520,col 9)",
            "(line 521,col 9)-(line 521,col 29)",
            "(line 522,col 9)-(line 522,col 51)",
            "(line 523,col 9)-(line 523,col 34)",
            "(line 524,col 9)-(line 524,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
        "snippet": "    public void testCloning_QuadrantPaint() {\n        XYPlot p1 = new XYPlot();\n        p1.setQuadrantPaint(3, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n\n        // check for independence\n        p1.setQuadrantPaint(1, Color.red);\n        assertFalse(p1.equals(p2));\n        p2.setQuadrantPaint(1, Color.red);\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 530,
        "end_line": 550,
        "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 33)",
            "(line 532,col 9)-(line 533,col 41)",
            "(line 534,col 9)-(line 534,col 25)",
            "(line 535,col 9)-(line 540,col 9)",
            "(line 541,col 9)-(line 541,col 29)",
            "(line 542,col 9)-(line 542,col 51)",
            "(line 543,col 9)-(line 543,col 34)",
            "(line 546,col 9)-(line 546,col 42)",
            "(line 547,col 9)-(line 547,col 35)",
            "(line 548,col 9)-(line 548,col 42)",
            "(line 549,col 9)-(line 549,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
        "snippet": "    public void testCloneIndependence() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"),\n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        p1.setDomainAxis(1, new NumberAxis(\"Domain Axis 2\"));\n        p1.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);\n        p1.setRangeAxis(1, new NumberAxis(\"Range Axis 2\"));\n        p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        p1.setRenderer(1, new XYBarRenderer());\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1.equals(p2));\n\n        p1.getDomainAxis().setLabel(\"Label\");\n        assertFalse(p1.equals(p2));\n        p2.getDomainAxis().setLabel(\"Label\");\n        assertTrue(p1.equals(p2));\n\n        p1.getDomainAxis(1).setLabel(\"S1\");\n        assertFalse(p1.equals(p2));\n        p2.getDomainAxis(1).setLabel(\"S1\");\n        assertTrue(p1.equals(p2));\n\n        p1.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(p1.equals(p2));\n        p2.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(p1.equals(p2));\n\n        p1.mapDatasetToDomainAxis(2, 1);\n        assertFalse(p1.equals(p2));\n        p2.mapDatasetToDomainAxis(2, 1);\n        assertTrue(p1.equals(p2));\n\n        p1.getRangeAxis().setLabel(\"Label\");\n        assertFalse(p1.equals(p2));\n        p2.getRangeAxis().setLabel(\"Label\");\n        assertTrue(p1.equals(p2));\n\n        p1.getRangeAxis(1).setLabel(\"S1\");\n        assertFalse(p1.equals(p2));\n        p2.getRangeAxis(1).setLabel(\"S1\");\n        assertTrue(p1.equals(p2));\n\n        p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT);\n        assertFalse(p1.equals(p2));\n        p2.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT);\n        assertTrue(p1.equals(p2));\n\n        p1.mapDatasetToRangeAxis(2, 1);\n        assertFalse(p1.equals(p2));\n        p2.mapDatasetToRangeAxis(2, 1);\n        assertTrue(p1.equals(p2));\n\n        p1.getRenderer().setBaseOutlinePaint(Color.cyan);\n        assertFalse(p1.equals(p2));\n        p2.getRenderer().setBaseOutlinePaint(Color.cyan);\n        assertTrue(p1.equals(p2));\n\n        p1.getRenderer(1).setBaseOutlinePaint(Color.red);\n        assertFalse(p1.equals(p2));\n        p2.getRenderer(1).setBaseOutlinePaint(Color.red);\n        assertTrue(p1.equals(p2));\n\n    }\n",
        "begin_line": 555,
        "end_line": 623,
        "comment": "\n     * Tests the independence of the clones.\n     ",
        "child_ranges": [
            "(line 556,col 9)-(line 557,col 76)",
            "(line 558,col 9)-(line 558,col 61)",
            "(line 559,col 9)-(line 559,col 65)",
            "(line 560,col 9)-(line 560,col 59)",
            "(line 561,col 9)-(line 561,col 62)",
            "(line 562,col 9)-(line 562,col 47)",
            "(line 563,col 9)-(line 563,col 25)",
            "(line 564,col 9)-(line 570,col 9)",
            "(line 571,col 9)-(line 571,col 34)",
            "(line 573,col 9)-(line 573,col 45)",
            "(line 574,col 9)-(line 574,col 35)",
            "(line 575,col 9)-(line 575,col 45)",
            "(line 576,col 9)-(line 576,col 34)",
            "(line 578,col 9)-(line 578,col 43)",
            "(line 579,col 9)-(line 579,col 35)",
            "(line 580,col 9)-(line 580,col 43)",
            "(line 581,col 9)-(line 581,col 34)",
            "(line 583,col 9)-(line 583,col 63)",
            "(line 584,col 9)-(line 584,col 35)",
            "(line 585,col 9)-(line 585,col 63)",
            "(line 586,col 9)-(line 586,col 34)",
            "(line 588,col 9)-(line 588,col 40)",
            "(line 589,col 9)-(line 589,col 35)",
            "(line 590,col 9)-(line 590,col 40)",
            "(line 591,col 9)-(line 591,col 34)",
            "(line 593,col 9)-(line 593,col 44)",
            "(line 594,col 9)-(line 594,col 35)",
            "(line 595,col 9)-(line 595,col 44)",
            "(line 596,col 9)-(line 596,col 34)",
            "(line 598,col 9)-(line 598,col 42)",
            "(line 599,col 9)-(line 599,col 35)",
            "(line 600,col 9)-(line 600,col 42)",
            "(line 601,col 9)-(line 601,col 34)",
            "(line 603,col 9)-(line 603,col 61)",
            "(line 604,col 9)-(line 604,col 35)",
            "(line 605,col 9)-(line 605,col 61)",
            "(line 606,col 9)-(line 606,col 34)",
            "(line 608,col 9)-(line 608,col 39)",
            "(line 609,col 9)-(line 609,col 35)",
            "(line 610,col 9)-(line 610,col 39)",
            "(line 611,col 9)-(line 611,col 34)",
            "(line 613,col 9)-(line 613,col 57)",
            "(line 614,col 9)-(line 614,col 35)",
            "(line 615,col 9)-(line 615,col 57)",
            "(line 616,col 9)-(line 616,col 34)",
            "(line 618,col 9)-(line 618,col 57)",
            "(line 619,col 9)-(line 619,col 35)",
            "(line 620,col 9)-(line 620,col 57)",
            "(line 621,col 9)-(line 621,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
        "snippet": "    public void testSetNullRenderer() {\n        boolean failed = false;\n        try {\n            XYPlot plot = new XYPlot(null, new NumberAxis(\"X\"),\n                    new NumberAxis(\"Y\"), null);\n            plot.setRenderer(null);\n        }\n        catch (Exception e) {\n            failed = true;\n        }\n        assertTrue(!failed);\n    }\n",
        "begin_line": 629,
        "end_line": 640,
        "comment": "\n     * Setting a null renderer should be allowed, but is generating a null\n     * pointer exception in 0.9.7.\n     ",
        "child_ranges": [
            "(line 630,col 9)-(line 630,col 31)",
            "(line 631,col 9)-(line 638,col 9)",
            "(line 639,col 9)-(line 639,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n\n        XYDataset data = new XYSeriesCollection();\n        NumberAxis domainAxis = new NumberAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        StandardXYItemRenderer renderer = new StandardXYItemRenderer();\n        XYPlot p1 = new XYPlot(data, domainAxis, rangeAxis, renderer);\n        XYPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 645,
        "end_line": 670,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 647,col 9)-(line 647,col 50)",
            "(line 648,col 9)-(line 648,col 57)",
            "(line 649,col 9)-(line 649,col 55)",
            "(line 650,col 9)-(line 650,col 71)",
            "(line 651,col 9)-(line 651,col 70)",
            "(line 652,col 9)-(line 652,col 25)",
            "(line 654,col 9)-(line 667,col 9)",
            "(line 668,col 9)-(line 668,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        IntervalXYDataset data1 = createDataset1();\n        XYItemRenderer renderer1 = new XYBarRenderer(0.20);\n        renderer1.setBaseToolTipGenerator(\n                StandardXYToolTipGenerator.getTimeSeriesInstance());\n        XYPlot p1 = new XYPlot(data1, new DateAxis(\"Date\"), null, renderer1);\n        XYPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 676,
        "end_line": 701,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.  This test\n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
        "child_ranges": [
            "(line 678,col 9)-(line 678,col 51)",
            "(line 679,col 9)-(line 679,col 59)",
            "(line 680,col 9)-(line 681,col 68)",
            "(line 682,col 9)-(line 682,col 77)",
            "(line 683,col 9)-(line 683,col 25)",
            "(line 685,col 9)-(line 698,col 9)",
            "(line 699,col 9)-(line 699,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n            \"Test Chart\",\n            \"Domain Axis\",\n            \"Range Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n\n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        assertEquals(chart, chart2);\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;\n            e.printStackTrace();\n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 713,
        "end_line": 755,
        "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported\n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null\n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop,\n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty\n     * lists in the constructor) not being initialized by the readObject()\n     * method following deserialization.  This test has been written to\n     * reproduce the bug (now fixed).\n     ",
        "child_ranges": [
            "(line 715,col 9)-(line 715,col 62)",
            "(line 716,col 9)-(line 725,col 10)",
            "(line 726,col 9)-(line 726,col 33)",
            "(line 729,col 9)-(line 743,col 9)",
            "(line 745,col 9)-(line 745,col 36)",
            "(line 746,col 9)-(line 746,col 30)",
            "(line 747,col 9)-(line 753,col 9)",
            "(line 754,col 9)-(line 754,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n            \"Test Chart\",\n            \"Domain Axis\",\n            \"Range Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.addDomainMarker(new ValueMarker(1.0), Layer.FOREGROUND);\n        plot.addDomainMarker(new IntervalMarker(2.0, 3.0), Layer.BACKGROUND);\n        plot.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(5.0, 6.0), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n\n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        assertEquals(chart, chart2);\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;\n            e.printStackTrace();\n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 761,
        "end_line": 808,
        "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
        "child_ranges": [
            "(line 763,col 9)-(line 763,col 62)",
            "(line 764,col 9)-(line 773,col 10)",
            "(line 774,col 9)-(line 774,col 47)",
            "(line 775,col 9)-(line 775,col 69)",
            "(line 776,col 9)-(line 776,col 77)",
            "(line 777,col 9)-(line 777,col 68)",
            "(line 778,col 9)-(line 778,col 76)",
            "(line 779,col 9)-(line 779,col 33)",
            "(line 782,col 9)-(line 796,col 9)",
            "(line 798,col 9)-(line 798,col 36)",
            "(line 799,col 9)-(line 799,col 30)",
            "(line 800,col 9)-(line 806,col 9)",
            "(line 807,col 9)-(line 807,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        XYSeriesCollection dataset1 = new XYSeriesCollection();\n        NumberAxis domainAxis1 = new NumberAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        StandardXYItemRenderer renderer1 = new StandardXYItemRenderer();\n        XYPlot p1 = new XYPlot(dataset1, domainAxis1, rangeAxis1, renderer1);\n        NumberAxis domainAxis2 = new NumberAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        StandardXYItemRenderer renderer2 = new StandardXYItemRenderer();\n        XYSeriesCollection dataset2 = new XYSeriesCollection();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        XYPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n        // now check that all datasets, renderers and axes are being listened\n        // too...\n        NumberAxis domainAxisA = (NumberAxis) p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        XYSeriesCollection datasetA = (XYSeriesCollection) p2.getDataset(0);\n        StandardXYItemRenderer rendererA\n            = (StandardXYItemRenderer) p2.getRenderer(0);\n        NumberAxis domainAxisB = (NumberAxis) p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        XYSeriesCollection datasetB = (XYSeriesCollection) p2.getDataset(1);\n        StandardXYItemRenderer rendererB\n            = (StandardXYItemRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }\n",
        "begin_line": 815,
        "end_line": 866,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 816,col 9)-(line 816,col 63)",
            "(line 817,col 9)-(line 817,col 60)",
            "(line 818,col 9)-(line 818,col 58)",
            "(line 819,col 9)-(line 819,col 72)",
            "(line 820,col 9)-(line 820,col 77)",
            "(line 821,col 9)-(line 821,col 60)",
            "(line 822,col 9)-(line 822,col 58)",
            "(line 823,col 9)-(line 823,col 72)",
            "(line 824,col 9)-(line 824,col 63)",
            "(line 825,col 9)-(line 825,col 35)",
            "(line 826,col 9)-(line 826,col 41)",
            "(line 827,col 9)-(line 827,col 39)",
            "(line 828,col 9)-(line 828,col 37)",
            "(line 829,col 9)-(line 829,col 25)",
            "(line 830,col 9)-(line 843,col 9)",
            "(line 844,col 9)-(line 844,col 29)",
            "(line 848,col 9)-(line 848,col 66)",
            "(line 849,col 9)-(line 849,col 64)",
            "(line 850,col 9)-(line 850,col 76)",
            "(line 851,col 9)-(line 852,col 57)",
            "(line 853,col 9)-(line 853,col 66)",
            "(line 854,col 9)-(line 854,col 64)",
            "(line 855,col 9)-(line 855,col 76)",
            "(line 856,col 9)-(line 857,col 57)",
            "(line 858,col 9)-(line 858,col 45)",
            "(line 859,col 9)-(line 859,col 48)",
            "(line 860,col 9)-(line 860,col 47)",
            "(line 861,col 9)-(line 861,col 46)",
            "(line 862,col 9)-(line 862,col 45)",
            "(line 863,col 9)-(line 863,col 48)",
            "(line 864,col 9)-(line 864,col 47)",
            "(line 865,col 9)-(line 865,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
        "snippet": "    public void testGetRendererForDataset() {\n        XYDataset d0 = new XYSeriesCollection();\n        XYDataset d1 = new XYSeriesCollection();\n        XYDataset d2 = new XYSeriesCollection();\n        XYDataset d3 = new XYSeriesCollection();  // not used by plot\n        XYItemRenderer r0 = new XYLineAndShapeRenderer();\n        XYItemRenderer r2 = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot();\n        plot.setDataset(0, d0);\n        plot.setDataset(1, d1);\n        plot.setDataset(2, d2);\n        plot.setRenderer(0, r0);\n        // no renderer 1\n        plot.setRenderer(2, r2);\n        assertEquals(r0, plot.getRendererForDataset(d0));\n        assertEquals(r0, plot.getRendererForDataset(d1));\n        assertEquals(r2, plot.getRendererForDataset(d2));\n        assertEquals(null, plot.getRendererForDataset(d3));\n        assertEquals(null, plot.getRendererForDataset(null));\n    }\n",
        "begin_line": 871,
        "end_line": 890,
        "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
        "child_ranges": [
            "(line 872,col 9)-(line 872,col 48)",
            "(line 873,col 9)-(line 873,col 48)",
            "(line 874,col 9)-(line 874,col 48)",
            "(line 875,col 9)-(line 875,col 48)",
            "(line 876,col 9)-(line 876,col 57)",
            "(line 877,col 9)-(line 877,col 57)",
            "(line 878,col 9)-(line 878,col 35)",
            "(line 879,col 9)-(line 879,col 31)",
            "(line 880,col 9)-(line 880,col 31)",
            "(line 881,col 9)-(line 881,col 31)",
            "(line 882,col 9)-(line 882,col 32)",
            "(line 884,col 9)-(line 884,col 32)",
            "(line 885,col 9)-(line 885,col 57)",
            "(line 886,col 9)-(line 886,col 57)",
            "(line 887,col 9)-(line 887,col 57)",
            "(line 888,col 9)-(line 888,col 59)",
            "(line 889,col 9)-(line 889,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
        "snippet": "    public void testGetLegendItems() {\n        // check the case where there is a secondary dataset that doesn't\n        // have a renderer (i.e. falls back to renderer 0)\n        XYDataset d0 = createDataset1();\n        XYDataset d1 = createDataset2();\n        XYItemRenderer r0 = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot();\n        plot.setDataset(0, d0);\n        plot.setDataset(1, d1);\n        plot.setRenderer(0, r0);\n        LegendItemCollection items = plot.getLegendItems();\n        assertEquals(2, items.getItemCount());\n    }\n",
        "begin_line": 895,
        "end_line": 907,
        "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
        "child_ranges": [
            "(line 898,col 9)-(line 898,col 40)",
            "(line 899,col 9)-(line 899,col 40)",
            "(line 900,col 9)-(line 900,col 57)",
            "(line 901,col 9)-(line 901,col 35)",
            "(line 902,col 9)-(line 902,col 31)",
            "(line 903,col 9)-(line 903,col 31)",
            "(line 904,col 9)-(line 904,col 32)",
            "(line 905,col 9)-(line 905,col 59)",
            "(line 906,col 9)-(line 906,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
        "snippet": "    private IntervalXYDataset createDataset1() {\n\n        // create dataset 1...\n        TimeSeries series1 = new TimeSeries(\"Series 1\");\n        series1.add(new Day(1, MonthConstants.MARCH, 2002), 12353.3);\n        series1.add(new Day(2, MonthConstants.MARCH, 2002), 13734.4);\n        series1.add(new Day(3, MonthConstants.MARCH, 2002), 14525.3);\n        series1.add(new Day(4, MonthConstants.MARCH, 2002), 13984.3);\n        series1.add(new Day(5, MonthConstants.MARCH, 2002), 12999.4);\n        series1.add(new Day(6, MonthConstants.MARCH, 2002), 14274.3);\n        series1.add(new Day(7, MonthConstants.MARCH, 2002), 15943.5);\n        series1.add(new Day(8, MonthConstants.MARCH, 2002), 14845.3);\n        series1.add(new Day(9, MonthConstants.MARCH, 2002), 14645.4);\n        series1.add(new Day(10, MonthConstants.MARCH, 2002), 16234.6);\n        series1.add(new Day(11, MonthConstants.MARCH, 2002), 17232.3);\n        series1.add(new Day(12, MonthConstants.MARCH, 2002), 14232.2);\n        series1.add(new Day(13, MonthConstants.MARCH, 2002), 13102.2);\n        series1.add(new Day(14, MonthConstants.MARCH, 2002), 14230.2);\n        series1.add(new Day(15, MonthConstants.MARCH, 2002), 11235.2);\n\n        TimeSeriesCollection collection = new TimeSeriesCollection(series1);\n        return collection;\n\n    }\n",
        "begin_line": 914,
        "end_line": 937,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
        "child_ranges": [
            "(line 917,col 9)-(line 917,col 56)",
            "(line 918,col 9)-(line 918,col 69)",
            "(line 919,col 9)-(line 919,col 69)",
            "(line 920,col 9)-(line 920,col 69)",
            "(line 921,col 9)-(line 921,col 69)",
            "(line 922,col 9)-(line 922,col 69)",
            "(line 923,col 9)-(line 923,col 69)",
            "(line 924,col 9)-(line 924,col 69)",
            "(line 925,col 9)-(line 925,col 69)",
            "(line 926,col 9)-(line 926,col 69)",
            "(line 927,col 9)-(line 927,col 70)",
            "(line 928,col 9)-(line 928,col 70)",
            "(line 929,col 9)-(line 929,col 70)",
            "(line 930,col 9)-(line 930,col 70)",
            "(line 931,col 9)-(line 931,col 70)",
            "(line 932,col 9)-(line 932,col 70)",
            "(line 934,col 9)-(line 934,col 76)",
            "(line 935,col 9)-(line 935,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
        "snippet": "    private XYDataset createDataset2() {\n        // create dataset 1...\n        XYSeries series = new XYSeries(\"Series 2\");\n        XYSeriesCollection collection = new XYSeriesCollection(series);\n        return collection;\n\n    }\n",
        "begin_line": 944,
        "end_line": 950,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 946,col 9)-(line 946,col 51)",
            "(line 947,col 9)-(line 947,col 71)",
            "(line 948,col 9)-(line 948,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        XYPlot plot = new XYPlot();\n        XYItemRenderer renderer = new XYLineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }\n",
        "begin_line": 956,
        "end_line": 966,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 957,col 9)-(line 957,col 35)",
            "(line 958,col 9)-(line 958,col 63)",
            "(line 959,col 9)-(line 959,col 35)",
            "(line 962,col 9)-(line 962,col 67)",
            "(line 963,col 9)-(line 963,col 41)",
            "(line 964,col 9)-(line 964,col 48)",
            "(line 965,col 9)-(line 965,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
        "snippet": "    public void testRemoveAnnotation() {\n        XYPlot plot = new XYPlot();\n        XYTextAnnotation a1 = new XYTextAnnotation(\"X\", 1.0, 2.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"X\", 3.0, 4.0);\n        XYTextAnnotation a3 = new XYTextAnnotation(\"X\", 1.0, 2.0);\n        plot.addAnnotation(a1);\n        plot.addAnnotation(a2);\n        plot.addAnnotation(a3);\n        plot.removeAnnotation(a2);\n        XYTextAnnotation x = (XYTextAnnotation) plot.getAnnotations().get(0);\n        assertEquals(x, a1);\n\n        // now remove a3, but since a3.equals(a1), this will in fact remove\n        // a1...\n        assertTrue(a1.equals(a3));\n        plot.removeAnnotation(a3);  // actually removes a1\n        x = (XYTextAnnotation) plot.getAnnotations().get(0);\n        assertEquals(x, a3);\n    }\n",
        "begin_line": 971,
        "end_line": 989,
        "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
        "child_ranges": [
            "(line 972,col 9)-(line 972,col 35)",
            "(line 973,col 9)-(line 973,col 66)",
            "(line 974,col 9)-(line 974,col 66)",
            "(line 975,col 9)-(line 975,col 66)",
            "(line 976,col 9)-(line 976,col 31)",
            "(line 977,col 9)-(line 977,col 31)",
            "(line 978,col 9)-(line 978,col 31)",
            "(line 979,col 9)-(line 979,col 34)",
            "(line 980,col 9)-(line 980,col 77)",
            "(line 981,col 9)-(line 981,col 28)",
            "(line 985,col 9)-(line 985,col 34)",
            "(line 986,col 9)-(line 986,col 34)",
            "(line 987,col 9)-(line 987,col 60)",
            "(line 988,col 9)-(line 988,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        XYPlot plot = new XYPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }\n",
        "begin_line": 994,
        "end_line": 1004,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 995,col 9)-(line 995,col 35)",
            "(line 996,col 9)-(line 996,col 40)",
            "(line 997,col 9)-(line 997,col 32)",
            "(line 998,col 9)-(line 999,col 45)",
            "(line 1000,col 9)-(line 1000,col 45)",
            "(line 1001,col 9)-(line 1001,col 34)",
            "(line 1002,col 9)-(line 1002,col 78)",
            "(line 1003,col 9)-(line 1003,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        XYPlot plot = new XYPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }\n",
        "begin_line": 1009,
        "end_line": 1019,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 1010,col 9)-(line 1010,col 35)",
            "(line 1011,col 9)-(line 1011,col 40)",
            "(line 1012,col 9)-(line 1012,col 31)",
            "(line 1013,col 9)-(line 1014,col 45)",
            "(line 1015,col 9)-(line 1015,col 45)",
            "(line 1016,col 9)-(line 1016,col 33)",
            "(line 1017,col 9)-(line 1017,col 78)",
            "(line 1018,col 9)-(line 1018,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(1, new XYLineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 1025,
        "end_line": 1045,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 1026,col 9)-(line 1026,col 58)",
            "(line 1027,col 9)-(line 1028,col 71)",
            "(line 1029,col 9)-(line 1029,col 47)",
            "(line 1030,col 9)-(line 1030,col 58)",
            "(line 1031,col 9)-(line 1031,col 32)",
            "(line 1032,col 9)-(line 1043,col 9)",
            "(line 1044,col 9)-(line 1044,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
        "snippet": "    public void testDrawRangeGridlines() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(null);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 1051,
        "end_line": 1071,
        "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
        "child_ranges": [
            "(line 1052,col 9)-(line 1052,col 58)",
            "(line 1053,col 9)-(line 1054,col 71)",
            "(line 1055,col 9)-(line 1055,col 47)",
            "(line 1056,col 9)-(line 1056,col 31)",
            "(line 1057,col 9)-(line 1057,col 32)",
            "(line 1058,col 9)-(line 1069,col 9)",
            "(line 1070,col 9)-(line 1070,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
        "snippet": "    public void testDrawSeriesWithZeroItems() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        dataset.addSeries(\"Series 1\", new double[][] {{1.0, 2.0}, {3.0, 4.0}});\n        dataset.addSeries(\"Series 2\", new double[][] {{}, {}});\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 1077,
        "end_line": 1097,
        "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
        "child_ranges": [
            "(line 1078,col 9)-(line 1078,col 58)",
            "(line 1079,col 9)-(line 1079,col 79)",
            "(line 1080,col 9)-(line 1080,col 63)",
            "(line 1081,col 9)-(line 1082,col 71)",
            "(line 1083,col 9)-(line 1083,col 32)",
            "(line 1084,col 9)-(line 1095,col 9)",
            "(line 1096,col 9)-(line 1096,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
        "snippet": "    public void testRemoveDomainMarker() {\n        XYPlot plot = new XYPlot();\n        assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));\n    }\n",
        "begin_line": 1103,
        "end_line": 1106,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns\n     * false.\n     ",
        "child_ranges": [
            "(line 1104,col 9)-(line 1104,col 35)",
            "(line 1105,col 9)-(line 1105,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
        "snippet": "    public void testRemoveRangeMarker() {\n        XYPlot plot = new XYPlot();\n        assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }\n",
        "begin_line": 1112,
        "end_line": 1115,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns\n     * false.\n     ",
        "child_ranges": [
            "(line 1113,col 9)-(line 1113,col 35)",
            "(line 1114,col 9)-(line 1114,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetDomainAxisForDataset()",
        "snippet": "    public void testGetDomainAxisForDataset() {\n        XYDataset dataset = new XYSeriesCollection();\n        NumberAxis xAxis = new NumberAxis(\"X\");\n        NumberAxis yAxis = new NumberAxis(\"Y\");\n        XYItemRenderer renderer = new DefaultXYItemRenderer();\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);\n        assertEquals(xAxis, plot.getDomainAxisForDataset(0));\n\n        // should get IllegalArgumentException for negative index\n        boolean pass = false;\n        try {\n            plot.getDomainAxisForDataset(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // should get IllegalArgumentException for index too high\n        pass = false;\n        try {\n            plot.getDomainAxisForDataset(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // if multiple axes are mapped, the first in the list should be\n        // returned...\n        NumberAxis xAxis2 = new NumberAxis(\"X2\");\n        plot.setDomainAxis(1, xAxis2);\n        assertEquals(xAxis, plot.getDomainAxisForDataset(0));\n\n        plot.mapDatasetToDomainAxis(0, 1);\n        assertEquals(xAxis2, plot.getDomainAxisForDataset(0));\n\n        List axisIndices = Arrays.asList(new Integer[] {new Integer(0),\n                new Integer(1)});\n        plot.mapDatasetToDomainAxes(0, axisIndices);\n        assertEquals(xAxis, plot.getDomainAxisForDataset(0));\n\n        axisIndices = Arrays.asList(new Integer[] {new Integer(1),\n                new Integer(2)});\n        plot.mapDatasetToDomainAxes(0, axisIndices);\n        assertEquals(xAxis2, plot.getDomainAxisForDataset(0));\n    }\n",
        "begin_line": 1120,
        "end_line": 1166,
        "comment": "\n     * Some tests for the getDomainAxisForDataset() method.\n     ",
        "child_ranges": [
            "(line 1121,col 9)-(line 1121,col 53)",
            "(line 1122,col 9)-(line 1122,col 47)",
            "(line 1123,col 9)-(line 1123,col 47)",
            "(line 1124,col 9)-(line 1124,col 62)",
            "(line 1125,col 9)-(line 1125,col 66)",
            "(line 1126,col 9)-(line 1126,col 61)",
            "(line 1129,col 9)-(line 1129,col 29)",
            "(line 1130,col 9)-(line 1135,col 9)",
            "(line 1136,col 9)-(line 1136,col 25)",
            "(line 1139,col 9)-(line 1139,col 21)",
            "(line 1140,col 9)-(line 1145,col 9)",
            "(line 1146,col 9)-(line 1146,col 25)",
            "(line 1150,col 9)-(line 1150,col 49)",
            "(line 1151,col 9)-(line 1151,col 38)",
            "(line 1152,col 9)-(line 1152,col 61)",
            "(line 1154,col 9)-(line 1154,col 42)",
            "(line 1155,col 9)-(line 1155,col 62)",
            "(line 1157,col 9)-(line 1158,col 33)",
            "(line 1159,col 9)-(line 1159,col 52)",
            "(line 1160,col 9)-(line 1160,col 61)",
            "(line 1162,col 9)-(line 1163,col 33)",
            "(line 1164,col 9)-(line 1164,col 52)",
            "(line 1165,col 9)-(line 1165,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRangeAxisForDataset()",
        "snippet": "    public void testGetRangeAxisForDataset() {\n        XYDataset dataset = new XYSeriesCollection();\n        NumberAxis xAxis = new NumberAxis(\"X\");\n        NumberAxis yAxis = new NumberAxis(\"Y\");\n        XYItemRenderer renderer = new DefaultXYItemRenderer();\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);\n        assertEquals(yAxis, plot.getRangeAxisForDataset(0));\n\n        // should get IllegalArgumentException for negative index\n        boolean pass = false;\n        try {\n            plot.getRangeAxisForDataset(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // should get IllegalArgumentException for index too high\n        pass = false;\n        try {\n            plot.getRangeAxisForDataset(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // if multiple axes are mapped, the first in the list should be\n        // returned...\n        NumberAxis yAxis2 = new NumberAxis(\"Y2\");\n        plot.setRangeAxis(1, yAxis2);\n        assertEquals(yAxis, plot.getRangeAxisForDataset(0));\n\n        plot.mapDatasetToRangeAxis(0, 1);\n        assertEquals(yAxis2, plot.getRangeAxisForDataset(0));\n\n        List axisIndices = Arrays.asList(new Integer[] {new Integer(0),\n                new Integer(1)});\n        plot.mapDatasetToRangeAxes(0, axisIndices);\n        assertEquals(yAxis, plot.getRangeAxisForDataset(0));\n\n        axisIndices = Arrays.asList(new Integer[] {new Integer(1),\n                new Integer(2)});\n        plot.mapDatasetToRangeAxes(0, axisIndices);\n        assertEquals(yAxis2, plot.getRangeAxisForDataset(0));\n    }\n",
        "begin_line": 1171,
        "end_line": 1217,
        "comment": "\n     * Some tests for the getRangeAxisForDataset() method.\n     ",
        "child_ranges": [
            "(line 1172,col 9)-(line 1172,col 53)",
            "(line 1173,col 9)-(line 1173,col 47)",
            "(line 1174,col 9)-(line 1174,col 47)",
            "(line 1175,col 9)-(line 1175,col 62)",
            "(line 1176,col 9)-(line 1176,col 66)",
            "(line 1177,col 9)-(line 1177,col 60)",
            "(line 1180,col 9)-(line 1180,col 29)",
            "(line 1181,col 9)-(line 1186,col 9)",
            "(line 1187,col 9)-(line 1187,col 25)",
            "(line 1190,col 9)-(line 1190,col 21)",
            "(line 1191,col 9)-(line 1196,col 9)",
            "(line 1197,col 9)-(line 1197,col 25)",
            "(line 1201,col 9)-(line 1201,col 49)",
            "(line 1202,col 9)-(line 1202,col 37)",
            "(line 1203,col 9)-(line 1203,col 60)",
            "(line 1205,col 9)-(line 1205,col 41)",
            "(line 1206,col 9)-(line 1206,col 61)",
            "(line 1208,col 9)-(line 1209,col 33)",
            "(line 1210,col 9)-(line 1210,col 51)",
            "(line 1211,col 9)-(line 1211,col 60)",
            "(line 1213,col 9)-(line 1214,col 33)",
            "(line 1215,col 9)-(line 1215,col 51)",
            "(line 1216,col 9)-(line 1216,col 61)"
        ]
    }
]