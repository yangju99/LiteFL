[
    {
        "name": "Fraction.reduce#465",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.reduce()",
        "snippet": "    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }\n",
        "begin_line": 465,
        "end_line": 471,
        "comment": "\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     * \n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.getFraction#141",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getFraction(int, int)",
        "snippet": "    public static Fraction getFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (denominator < 0) {\n            if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        return new Fraction(numerator, denominator);\n    }\n",
        "begin_line": 141,
        "end_line": 154,
        "comment": "\n     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.greatestCommonDivisor#569",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.greatestCommonDivisor(int, int)",
        "snippet": "    private static int greatestCommonDivisor(int u, int v) {\n        //if either op. is abs 0 or 1, return 1:\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n        // B1. [Find power of 2]\n        int k=0;\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        if (k==31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t&1)==0) { // while t is even..\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t>0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u)/2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t!=0);\n        return -u*(1<<k); // gcd is u*2^k\n    }\n",
        "begin_line": 569,
        "end_line": 611,
        "comment": "\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.getNumerator#367",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getNumerator()",
        "snippet": "    public int getNumerator() {\n        return numerator;\n    }\n",
        "begin_line": 367,
        "end_line": 369,
        "comment": "\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.getDenominator#376",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getDenominator()",
        "snippet": "    public int getDenominator() {\n        return denominator;\n    }\n",
        "begin_line": 376,
        "end_line": 378,
        "comment": "\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#124",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.Fraction(int, int)",
        "snippet": "    private Fraction(int numerator, int denominator) {\n        super();\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n",
        "begin_line": 124,
        "end_line": 128,
        "comment": "\n     * <p>Constructs a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 1
    }
]