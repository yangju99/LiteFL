[
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.FractionTest(java.lang.String)",
        "snippet": "    public FractionTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(FractionTest.class);\n        suite.setName(\"Fraction Tests\");\n        return suite;\n    }\n",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 60)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.setUp()",
        "snippet": "    public void setUp() {\n    }\n",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testConstants()",
        "snippet": "    public void testConstants() {\n        assertEquals(0, Fraction.ZERO.getNumerator());\n        assertEquals(1, Fraction.ZERO.getDenominator());\n        \n        assertEquals(1, Fraction.ONE.getNumerator());\n        assertEquals(1, Fraction.ONE.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_HALF.getNumerator());\n        assertEquals(2, Fraction.ONE_HALF.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_THIRD.getNumerator());\n        assertEquals(3, Fraction.ONE_THIRD.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\n        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\n        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\n        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\n        \n        assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n    }\n",
        "begin_line": 51,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 54)",
            "(line 53,col 9)-(line 53,col 56)",
            "(line 55,col 9)-(line 55,col 53)",
            "(line 56,col 9)-(line 56,col 55)",
            "(line 58,col 9)-(line 58,col 58)",
            "(line 59,col 9)-(line 59,col 60)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 61)",
            "(line 64,col 9)-(line 64,col 60)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 67,col 9)-(line 67,col 61)",
            "(line 68,col 9)-(line 68,col 63)",
            "(line 70,col 9)-(line 70,col 62)",
            "(line 71,col 9)-(line 71,col 64)",
            "(line 73,col 9)-(line 73,col 64)",
            "(line 74,col 9)-(line 74,col 66)",
            "(line 76,col 9)-(line 76,col 59)",
            "(line 77,col 9)-(line 77,col 61)",
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 80,col 62)",
            "(line 82,col 9)-(line 82,col 62)",
            "(line 83,col 9)-(line 83,col 64)",
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_int_int()",
        "snippet": "    public void testFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(23, 345);\n        assertEquals(23, f.getNumerator());\n        assertEquals(345, f.getDenominator());\n        \n        // improper\n        f = Fraction.getFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getFraction(-6, 10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(6, -10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(-6, -10);\n        assertEquals(6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large: can't represent as unsimplified fraction, although\n        try {\n            f = Fraction.getFraction(4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 89,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 26)",
            "(line 93,col 9)-(line 93,col 39)",
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 44)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 98,col 9)-(line 98,col 42)",
            "(line 99,col 9)-(line 99,col 44)",
            "(line 102,col 9)-(line 102,col 39)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 44)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 44)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 46)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 44)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 43)",
            "(line 122,col 9)-(line 122,col 45)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 128,col 9)-(line 128,col 42)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 133,col 9)-(line 136,col 43)",
            "(line 138,col 9)-(line 141,col 43)",
            "(line 143,col 9)-(line 146,col 43)",
            "(line 149,col 9)-(line 152,col 43)",
            "(line 153,col 9)-(line 156,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_int_int_int()",
        "snippet": "    public void testFactory_int_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 0, 2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 1, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1, 2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negatives\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // negative whole\n        f = Fraction.getFraction(-1, 6, 10);\n        assertEquals(-16, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(-1, -6, 10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(-1, 6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(0, 1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(1, 2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); \n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large\n        f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);\n        assertEquals(-Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        try {\n            // negative denominators not allowed in this constructor.\n            f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 159,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 26)",
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 44)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 42)",
            "(line 169,col 9)-(line 169,col 44)",
            "(line 171,col 9)-(line 171,col 42)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 44)",
            "(line 176,col 9)-(line 176,col 42)",
            "(line 177,col 9)-(line 177,col 42)",
            "(line 178,col 9)-(line 178,col 44)",
            "(line 181,col 9)-(line 184,col 43)",
            "(line 186,col 9)-(line 189,col 43)",
            "(line 191,col 9)-(line 194,col 43)",
            "(line 197,col 9)-(line 197,col 44)",
            "(line 198,col 9)-(line 198,col 44)",
            "(line 199,col 9)-(line 199,col 45)",
            "(line 201,col 9)-(line 204,col 43)",
            "(line 206,col 9)-(line 209,col 43)",
            "(line 211,col 9)-(line 214,col 43)",
            "(line 217,col 9)-(line 220,col 43)",
            "(line 222,col 9)-(line 225,col 43)",
            "(line 227,col 9)-(line 230,col 43)",
            "(line 232,col 9)-(line 235,col 43)",
            "(line 237,col 9)-(line 240,col 43)",
            "(line 243,col 9)-(line 243,col 59)",
            "(line 244,col 9)-(line 244,col 59)",
            "(line 245,col 9)-(line 245,col 60)",
            "(line 247,col 9)-(line 251,col 43)",
            "(line 252,col 9)-(line 255,col 43)",
            "(line 256,col 9)-(line 259,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testReducedFactory_int_int()",
        "snippet": "    public void testReducedFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}      \n    }\n",
        "begin_line": 261,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 26)",
            "(line 265,col 9)-(line 265,col 46)",
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 44)",
            "(line 270,col 9)-(line 270,col 46)",
            "(line 271,col 9)-(line 271,col 42)",
            "(line 272,col 9)-(line 272,col 44)",
            "(line 274,col 9)-(line 274,col 46)",
            "(line 275,col 9)-(line 275,col 42)",
            "(line 276,col 9)-(line 276,col 44)",
            "(line 279,col 9)-(line 279,col 47)",
            "(line 280,col 9)-(line 280,col 43)",
            "(line 281,col 9)-(line 281,col 44)",
            "(line 284,col 9)-(line 284,col 48)",
            "(line 285,col 9)-(line 285,col 43)",
            "(line 286,col 9)-(line 286,col 44)",
            "(line 288,col 9)-(line 288,col 48)",
            "(line 289,col 9)-(line 289,col 43)",
            "(line 290,col 9)-(line 290,col 44)",
            "(line 292,col 9)-(line 292,col 49)",
            "(line 293,col 9)-(line 293,col 42)",
            "(line 294,col 9)-(line 294,col 44)",
            "(line 297,col 9)-(line 300,col 43)",
            "(line 302,col 9)-(line 305,col 43)",
            "(line 307,col 9)-(line 310,col 43)",
            "(line 313,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 42)",
            "(line 315,col 9)-(line 315,col 44)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 42)",
            "(line 319,col 9)-(line 319,col 44)",
            "(line 321,col 9)-(line 321,col 46)",
            "(line 322,col 9)-(line 322,col 42)",
            "(line 323,col 9)-(line 323,col 44)",
            "(line 325,col 9)-(line 325,col 48)",
            "(line 326,col 9)-(line 326,col 42)",
            "(line 327,col 9)-(line 327,col 44)",
            "(line 329,col 9)-(line 329,col 49)",
            "(line 330,col 9)-(line 330,col 43)",
            "(line 331,col 9)-(line 331,col 44)",
            "(line 335,col 9)-(line 335,col 63)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 337,col 9)-(line 337,col 67)",
            "(line 340,col 9)-(line 343,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_double()",
        "snippet": "    public void testFactory_double() {\n        Fraction f = null;\n        \n        try {\n            f = Fraction.getFraction(Double.NaN);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.POSITIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero\n        f = Fraction.getFraction(0.0d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one\n        f = Fraction.getFraction(1.0d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one half\n        f = Fraction.getFraction(0.5d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negative\n        f = Fraction.getFraction(-0.875d);\n        assertEquals(-7, f.getNumerator());\n        assertEquals(8, f.getDenominator());\n        \n        // over 1\n        f = Fraction.getFraction(1.25d);\n        assertEquals(5, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        // two thirds\n        f = Fraction.getFraction(0.66666d);\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        // small\n        f = Fraction.getFraction(1.0d/10001d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        Fraction f2 = null;\n        for (int i = 1; i <= 100; i++) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n        // save time by skipping some tests!  (\n        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n    }\n",
        "begin_line": 346,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 26)",
            "(line 349,col 9)-(line 352,col 43)",
            "(line 354,col 9)-(line 357,col 43)",
            "(line 359,col 9)-(line 362,col 43)",
            "(line 364,col 9)-(line 367,col 43)",
            "(line 370,col 9)-(line 370,col 39)",
            "(line 371,col 9)-(line 371,col 42)",
            "(line 372,col 9)-(line 372,col 44)",
            "(line 375,col 9)-(line 375,col 39)",
            "(line 376,col 9)-(line 376,col 42)",
            "(line 377,col 9)-(line 377,col 44)",
            "(line 380,col 9)-(line 380,col 39)",
            "(line 381,col 9)-(line 381,col 42)",
            "(line 382,col 9)-(line 382,col 44)",
            "(line 385,col 9)-(line 385,col 42)",
            "(line 386,col 9)-(line 386,col 43)",
            "(line 387,col 9)-(line 387,col 44)",
            "(line 390,col 9)-(line 390,col 40)",
            "(line 391,col 9)-(line 391,col 42)",
            "(line 392,col 9)-(line 392,col 44)",
            "(line 395,col 9)-(line 395,col 43)",
            "(line 396,col 9)-(line 396,col 42)",
            "(line 397,col 9)-(line 397,col 44)",
            "(line 400,col 9)-(line 400,col 46)",
            "(line 401,col 9)-(line 401,col 42)",
            "(line 402,col 9)-(line 402,col 44)",
            "(line 405,col 9)-(line 405,col 27)",
            "(line 406,col 9)-(line 418,col 9)",
            "(line 420,col 9)-(line 432,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String()",
        "snippet": "    public void testFactory_String() {\n        try {\n            Fraction.getFraction(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 435,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 439,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String_double()",
        "snippet": "    public void testFactory_String_double() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0.0\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.66666\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2.3R\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2147483648\"); // too big\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\".\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }\n",
        "begin_line": 443,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 26)",
            "(line 446,col 9)-(line 446,col 40)",
            "(line 447,col 9)-(line 447,col 42)",
            "(line 448,col 9)-(line 448,col 44)",
            "(line 450,col 9)-(line 450,col 40)",
            "(line 451,col 9)-(line 451,col 42)",
            "(line 452,col 9)-(line 452,col 44)",
            "(line 454,col 9)-(line 454,col 40)",
            "(line 455,col 9)-(line 455,col 42)",
            "(line 456,col 9)-(line 456,col 44)",
            "(line 458,col 9)-(line 458,col 44)",
            "(line 459,col 9)-(line 459,col 42)",
            "(line 460,col 9)-(line 460,col 44)",
            "(line 462,col 9)-(line 465,col 45)",
            "(line 467,col 9)-(line 470,col 45)",
            "(line 472,col 9)-(line 475,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String_proper()",
        "snippet": "    public void testFactory_String_proper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0 0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 1/5\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7 1/2\");\n        assertEquals(15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 2/4\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-7 1/2\");\n        assertEquals(-15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-1 2/4\");\n        assertEquals(-6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"a 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 b/4\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n\n        try {\n            f = Fraction.getFraction(\" 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\" \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }\n",
        "begin_line": 478,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 26)",
            "(line 481,col 9)-(line 481,col 42)",
            "(line 482,col 9)-(line 482,col 42)",
            "(line 483,col 9)-(line 483,col 44)",
            "(line 485,col 9)-(line 485,col 42)",
            "(line 486,col 9)-(line 486,col 42)",
            "(line 487,col 9)-(line 487,col 44)",
            "(line 489,col 9)-(line 489,col 42)",
            "(line 490,col 9)-(line 490,col 43)",
            "(line 491,col 9)-(line 491,col 44)",
            "(line 493,col 9)-(line 493,col 42)",
            "(line 494,col 9)-(line 494,col 42)",
            "(line 495,col 9)-(line 495,col 44)",
            "(line 497,col 9)-(line 497,col 43)",
            "(line 498,col 9)-(line 498,col 44)",
            "(line 499,col 9)-(line 499,col 44)",
            "(line 501,col 9)-(line 501,col 43)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 44)",
            "(line 505,col 9)-(line 508,col 45)",
            "(line 510,col 9)-(line 513,col 45)",
            "(line 515,col 9)-(line 518,col 45)",
            "(line 520,col 9)-(line 523,col 45)",
            "(line 525,col 9)-(line 528,col 45)",
            "(line 530,col 9)-(line 533,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String_improper()",
        "snippet": "    public void testFactory_String_improper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/3\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7/3\");\n        assertEquals(7, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/4\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2/d\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2e/3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }\n",
        "begin_line": 536,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 537,col 9)-(line 537,col 26)",
            "(line 539,col 9)-(line 539,col 40)",
            "(line 540,col 9)-(line 540,col 42)",
            "(line 541,col 9)-(line 541,col 44)",
            "(line 543,col 9)-(line 543,col 40)",
            "(line 544,col 9)-(line 544,col 42)",
            "(line 545,col 9)-(line 545,col 44)",
            "(line 547,col 9)-(line 547,col 40)",
            "(line 548,col 9)-(line 548,col 42)",
            "(line 549,col 9)-(line 549,col 44)",
            "(line 551,col 9)-(line 551,col 40)",
            "(line 552,col 9)-(line 552,col 42)",
            "(line 553,col 9)-(line 553,col 44)",
            "(line 555,col 9)-(line 555,col 40)",
            "(line 556,col 9)-(line 556,col 42)",
            "(line 557,col 9)-(line 557,col 44)",
            "(line 559,col 9)-(line 559,col 40)",
            "(line 560,col 9)-(line 560,col 42)",
            "(line 561,col 9)-(line 561,col 44)",
            "(line 563,col 9)-(line 566,col 45)",
            "(line 568,col 9)-(line 571,col 45)",
            "(line 573,col 9)-(line 576,col 45)",
            "(line 578,col 9)-(line 581,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testGets()",
        "snippet": "    public void testGets() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5, 6);\n        assertEquals(23, f.getNumerator());\n        assertEquals(3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(-3, 5, 6);\n        assertEquals(-23, f.getNumerator());\n        assertEquals(-3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(Integer.MIN_VALUE, f.getProperWhole());\n        assertEquals(0, f.getProperNumerator());\n        assertEquals(1, f.getDenominator());\n    }\n",
        "begin_line": 584,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 26)",
            "(line 587,col 9)-(line 587,col 42)",
            "(line 588,col 9)-(line 588,col 43)",
            "(line 589,col 9)-(line 589,col 44)",
            "(line 590,col 9)-(line 590,col 48)",
            "(line 591,col 9)-(line 591,col 44)",
            "(line 593,col 9)-(line 593,col 43)",
            "(line 594,col 9)-(line 594,col 44)",
            "(line 595,col 9)-(line 595,col 45)",
            "(line 596,col 9)-(line 596,col 48)",
            "(line 597,col 9)-(line 597,col 44)",
            "(line 599,col 9)-(line 599,col 58)",
            "(line 600,col 9)-(line 600,col 58)",
            "(line 601,col 9)-(line 601,col 60)",
            "(line 602,col 9)-(line 602,col 48)",
            "(line 603,col 9)-(line 603,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testConversions()",
        "snippet": "    public void testConversions() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 7, 8);\n        assertEquals(3, f.intValue());\n        assertEquals(3L, f.longValue());\n        assertEquals(3.875f, f.floatValue(), 0.00001f);\n        assertEquals(3.875d, f.doubleValue(), 0.00001d);\n    }\n",
        "begin_line": 606,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 26)",
            "(line 609,col 9)-(line 609,col 42)",
            "(line 610,col 9)-(line 610,col 38)",
            "(line 611,col 9)-(line 611,col 40)",
            "(line 612,col 9)-(line 612,col 55)",
            "(line 613,col 9)-(line 613,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testReduce()",
        "snippet": "    public void testReduce() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(result, Fraction.ZERO);\n    }\n",
        "begin_line": 616,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 26)",
            "(line 619,col 9)-(line 619,col 41)",
            "(line 620,col 9)-(line 620,col 37)",
            "(line 621,col 9)-(line 621,col 47)",
            "(line 622,col 9)-(line 622,col 49)",
            "(line 624,col 9)-(line 624,col 41)",
            "(line 625,col 9)-(line 625,col 28)",
            "(line 626,col 9)-(line 626,col 47)",
            "(line 627,col 9)-(line 627,col 49)",
            "(line 629,col 9)-(line 629,col 40)",
            "(line 630,col 9)-(line 630,col 28)",
            "(line 631,col 9)-(line 631,col 48)",
            "(line 632,col 9)-(line 632,col 49)",
            "(line 634,col 9)-(line 634,col 40)",
            "(line 635,col 9)-(line 635,col 28)",
            "(line 636,col 9)-(line 636,col 48)",
            "(line 637,col 9)-(line 637,col 49)",
            "(line 638,col 9)-(line 638,col 30)",
            "(line 640,col 9)-(line 640,col 39)",
            "(line 641,col 9)-(line 641,col 28)",
            "(line 642,col 9)-(line 642,col 47)",
            "(line 643,col 9)-(line 643,col 49)",
            "(line 644,col 9)-(line 644,col 30)",
            "(line 646,col 9)-(line 646,col 39)",
            "(line 647,col 9)-(line 647,col 28)",
            "(line 648,col 9)-(line 648,col 47)",
            "(line 649,col 9)-(line 649,col 49)",
            "(line 650,col 9)-(line 650,col 30)",
            "(line 652,col 9)-(line 652,col 41)",
            "(line 653,col 9)-(line 653,col 28)",
            "(line 654,col 9)-(line 654,col 47)",
            "(line 655,col 9)-(line 655,col 49)",
            "(line 656,col 9)-(line 656,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testInvert()",
        "snippet": "    public void testInvert() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.invert();\n        assertEquals(75, f.getNumerator());\n        assertEquals(50, f.getDenominator());\n        \n        f = Fraction.getFraction(4, 3);\n        f = f.invert();\n        assertEquals(3, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(-15, 47);\n        f = f.invert();\n        assertEquals(-47, f.getNumerator());\n        assertEquals(15, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 3);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // large values\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.invert();\n        assertEquals(1, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }\n",
        "begin_line": 659,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 660,col 9)-(line 660,col 26)",
            "(line 662,col 9)-(line 662,col 41)",
            "(line 663,col 9)-(line 663,col 23)",
            "(line 664,col 9)-(line 664,col 43)",
            "(line 665,col 9)-(line 665,col 45)",
            "(line 667,col 9)-(line 667,col 39)",
            "(line 668,col 9)-(line 668,col 23)",
            "(line 669,col 9)-(line 669,col 42)",
            "(line 670,col 9)-(line 670,col 44)",
            "(line 672,col 9)-(line 672,col 42)",
            "(line 673,col 9)-(line 673,col 23)",
            "(line 674,col 9)-(line 674,col 44)",
            "(line 675,col 9)-(line 675,col 45)",
            "(line 677,col 9)-(line 677,col 39)",
            "(line 678,col 9)-(line 681,col 43)",
            "(line 684,col 9)-(line 684,col 55)",
            "(line 685,col 9)-(line 688,col 43)",
            "(line 690,col 9)-(line 690,col 55)",
            "(line 691,col 9)-(line 691,col 23)",
            "(line 692,col 9)-(line 692,col 42)",
            "(line 693,col 9)-(line 693,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testNegate()",
        "snippet": "    public void testNegate() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.negate();\n        assertEquals(-50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.negate();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        // large values\n        f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 696,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 26)",
            "(line 699,col 9)-(line 699,col 41)",
            "(line 700,col 9)-(line 700,col 23)",
            "(line 701,col 9)-(line 701,col 44)",
            "(line 702,col 9)-(line 702,col 45)",
            "(line 704,col 9)-(line 704,col 42)",
            "(line 705,col 9)-(line 705,col 23)",
            "(line 706,col 9)-(line 706,col 43)",
            "(line 707,col 9)-(line 707,col 45)",
            "(line 710,col 9)-(line 710,col 73)",
            "(line 711,col 9)-(line 711,col 23)",
            "(line 712,col 9)-(line 712,col 60)",
            "(line 713,col 9)-(line 713,col 60)",
            "(line 715,col 9)-(line 715,col 55)",
            "(line 716,col 9)-(line 719,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testAbs()",
        "snippet": "    public void testAbs() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, -1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.abs();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 722,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 723,col 9)-(line 723,col 26)",
            "(line 725,col 9)-(line 725,col 41)",
            "(line 726,col 9)-(line 726,col 20)",
            "(line 727,col 9)-(line 727,col 43)",
            "(line 728,col 9)-(line 728,col 45)",
            "(line 730,col 9)-(line 730,col 42)",
            "(line 731,col 9)-(line 731,col 20)",
            "(line 732,col 9)-(line 732,col 43)",
            "(line 733,col 9)-(line 733,col 45)",
            "(line 735,col 9)-(line 735,col 55)",
            "(line 736,col 9)-(line 736,col 20)",
            "(line 737,col 9)-(line 737,col 58)",
            "(line 738,col 9)-(line 738,col 44)",
            "(line 740,col 9)-(line 740,col 56)",
            "(line 741,col 9)-(line 741,col 20)",
            "(line 742,col 9)-(line 742,col 58)",
            "(line 743,col 9)-(line 743,col 44)",
            "(line 745,col 9)-(line 745,col 55)",
            "(line 746,col 9)-(line 749,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testPow()",
        "snippet": "    public void testPow() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(3, 5);\n        assertSame(f, f.pow(1));\n        assertEquals(f, f.pow(1));\n\n        f = Fraction.getFraction(3, 5);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-1);\n        assertEquals(5, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // check unreduced fractions stay that way.\n        f = Fraction.getFraction(6, 10);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(6, 10);\n        assertEquals(f, f.pow(1));\n        assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));\n\n        f = Fraction.getFraction(6, 10);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-1);\n        assertEquals(10, f.getNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // zero to any positive power is still zero.\n        f = Fraction.getFraction(0, 1231);\n        f = f.pow(1);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1231, f.getDenominator());\n        f = f.pow(2);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        // zero to negative powers should throw an exception\n        try {\n            f = f.pow(-1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = f.pow(Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // one to any power is still one.\n        f = Fraction.getFraction(1, 1);\n        f = f.pow(0);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(-1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MAX_VALUE);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MIN_VALUE);\n        assertEquals(f, Fraction.ONE);\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // Numerator growing too negative during the pow operation.\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.pow(3);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(65536, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 752,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 753,col 26)",
            "(line 755,col 9)-(line 755,col 39)",
            "(line 756,col 9)-(line 756,col 45)",
            "(line 758,col 9)-(line 758,col 39)",
            "(line 759,col 9)-(line 759,col 32)",
            "(line 760,col 9)-(line 760,col 34)",
            "(line 762,col 9)-(line 762,col 39)",
            "(line 763,col 9)-(line 763,col 21)",
            "(line 764,col 9)-(line 764,col 42)",
            "(line 765,col 9)-(line 765,col 45)",
            "(line 767,col 9)-(line 767,col 39)",
            "(line 768,col 9)-(line 768,col 21)",
            "(line 769,col 9)-(line 769,col 43)",
            "(line 770,col 9)-(line 770,col 46)",
            "(line 772,col 9)-(line 772,col 39)",
            "(line 773,col 9)-(line 773,col 22)",
            "(line 774,col 9)-(line 774,col 42)",
            "(line 775,col 9)-(line 775,col 44)",
            "(line 777,col 9)-(line 777,col 39)",
            "(line 778,col 9)-(line 778,col 22)",
            "(line 779,col 9)-(line 779,col 43)",
            "(line 780,col 9)-(line 780,col 44)",
            "(line 783,col 9)-(line 783,col 40)",
            "(line 784,col 9)-(line 784,col 45)",
            "(line 786,col 9)-(line 786,col 40)",
            "(line 787,col 9)-(line 787,col 34)",
            "(line 788,col 9)-(line 788,col 64)",
            "(line 790,col 9)-(line 790,col 40)",
            "(line 791,col 9)-(line 791,col 21)",
            "(line 792,col 9)-(line 792,col 42)",
            "(line 793,col 9)-(line 793,col 45)",
            "(line 795,col 9)-(line 795,col 40)",
            "(line 796,col 9)-(line 796,col 21)",
            "(line 797,col 9)-(line 797,col 43)",
            "(line 798,col 9)-(line 798,col 46)",
            "(line 800,col 9)-(line 800,col 40)",
            "(line 801,col 9)-(line 801,col 22)",
            "(line 802,col 9)-(line 802,col 43)",
            "(line 803,col 9)-(line 803,col 44)",
            "(line 805,col 9)-(line 805,col 40)",
            "(line 806,col 9)-(line 806,col 22)",
            "(line 807,col 9)-(line 807,col 43)",
            "(line 808,col 9)-(line 808,col 44)",
            "(line 811,col 9)-(line 811,col 42)",
            "(line 812,col 9)-(line 812,col 21)",
            "(line 813,col 9)-(line 813,col 50)",
            "(line 814,col 9)-(line 814,col 42)",
            "(line 815,col 9)-(line 815,col 47)",
            "(line 816,col 9)-(line 816,col 21)",
            "(line 817,col 9)-(line 817,col 50)",
            "(line 818,col 9)-(line 818,col 42)",
            "(line 819,col 9)-(line 819,col 44)",
            "(line 822,col 9)-(line 825,col 43)",
            "(line 826,col 9)-(line 829,col 43)",
            "(line 832,col 9)-(line 832,col 39)",
            "(line 833,col 9)-(line 833,col 21)",
            "(line 834,col 9)-(line 834,col 38)",
            "(line 835,col 9)-(line 835,col 21)",
            "(line 836,col 9)-(line 836,col 38)",
            "(line 837,col 9)-(line 837,col 22)",
            "(line 838,col 9)-(line 838,col 38)",
            "(line 839,col 9)-(line 839,col 37)",
            "(line 840,col 9)-(line 840,col 38)",
            "(line 841,col 9)-(line 841,col 37)",
            "(line 842,col 9)-(line 842,col 38)",
            "(line 844,col 9)-(line 844,col 55)",
            "(line 845,col 9)-(line 848,col 43)",
            "(line 851,col 9)-(line 851,col 55)",
            "(line 852,col 9)-(line 855,col 43)",
            "(line 857,col 9)-(line 857,col 43)",
            "(line 858,col 9)-(line 861,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testAdd()",
        "snippet": "    public void testAdd() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.add(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.add(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.add(f2);\n        assertEquals(-1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.add(f2);\n        assertEquals(11, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 8);\n        f2 = Fraction.getFraction(1, 6);\n        f = f1.add(f2);\n        assertEquals(13, f.getNumerator());\n        assertEquals(24, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertSame(f2, f);\n        f = f2.add(f1);\n        assertSame(f2, f);\n        \n        f1 = Fraction.getFraction(-1, 13*13*2*2);\n        f2 = Fraction.getFraction(-2, 13*17*2);\n        f = f1.add(f2);\n        assertEquals(13*13*17*2*2, f.getDenominator());\n        assertEquals(-17 - 2*13*2, f.getNumerator());\n        \n        try {\n            f.add(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.add(f2);\n        assertEquals(52451, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD;\n        f = f1.add(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 864,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 865,col 9)-(line 865,col 26)",
            "(line 866,col 9)-(line 866,col 27)",
            "(line 867,col 9)-(line 867,col 27)",
            "(line 869,col 9)-(line 869,col 40)",
            "(line 870,col 9)-(line 870,col 40)",
            "(line 871,col 9)-(line 871,col 23)",
            "(line 872,col 9)-(line 872,col 42)",
            "(line 873,col 9)-(line 873,col 44)",
            "(line 875,col 9)-(line 875,col 40)",
            "(line 876,col 9)-(line 876,col 40)",
            "(line 877,col 9)-(line 877,col 23)",
            "(line 878,col 9)-(line 878,col 42)",
            "(line 879,col 9)-(line 879,col 44)",
            "(line 881,col 9)-(line 881,col 40)",
            "(line 882,col 9)-(line 882,col 40)",
            "(line 883,col 9)-(line 883,col 23)",
            "(line 884,col 9)-(line 884,col 42)",
            "(line 885,col 9)-(line 885,col 44)",
            "(line 887,col 9)-(line 887,col 40)",
            "(line 888,col 9)-(line 888,col 41)",
            "(line 889,col 9)-(line 889,col 23)",
            "(line 890,col 9)-(line 890,col 43)",
            "(line 891,col 9)-(line 891,col 44)",
            "(line 893,col 9)-(line 893,col 60)",
            "(line 894,col 9)-(line 894,col 26)",
            "(line 895,col 9)-(line 895,col 23)",
            "(line 896,col 9)-(line 896,col 58)",
            "(line 897,col 9)-(line 897,col 44)",
            "(line 899,col 9)-(line 899,col 40)",
            "(line 900,col 9)-(line 900,col 40)",
            "(line 901,col 9)-(line 901,col 23)",
            "(line 902,col 9)-(line 902,col 43)",
            "(line 903,col 9)-(line 903,col 45)",
            "(line 905,col 9)-(line 905,col 40)",
            "(line 906,col 9)-(line 906,col 40)",
            "(line 907,col 9)-(line 907,col 23)",
            "(line 908,col 9)-(line 908,col 43)",
            "(line 909,col 9)-(line 909,col 45)",
            "(line 911,col 9)-(line 911,col 40)",
            "(line 912,col 9)-(line 912,col 40)",
            "(line 913,col 9)-(line 913,col 23)",
            "(line 914,col 9)-(line 914,col 26)",
            "(line 915,col 9)-(line 915,col 23)",
            "(line 916,col 9)-(line 916,col 26)",
            "(line 918,col 9)-(line 918,col 49)",
            "(line 919,col 9)-(line 919,col 47)",
            "(line 920,col 9)-(line 920,col 23)",
            "(line 921,col 9)-(line 921,col 55)",
            "(line 922,col 9)-(line 922,col 53)",
            "(line 924,col 9)-(line 927,col 48)",
            "(line 931,col 9)-(line 931,col 45)",
            "(line 932,col 9)-(line 932,col 43)",
            "(line 933,col 9)-(line 933,col 23)",
            "(line 934,col 9)-(line 934,col 46)",
            "(line 935,col 9)-(line 935,col 53)",
            "(line 937,col 9)-(line 937,col 56)",
            "(line 938,col 9)-(line 938,col 32)",
            "(line 939,col 9)-(line 939,col 23)",
            "(line 940,col 9)-(line 940,col 60)",
            "(line 941,col 9)-(line 941,col 44)",
            "(line 943,col 9)-(line 943,col 60)",
            "(line 944,col 9)-(line 944,col 26)",
            "(line 945,col 9)-(line 945,col 23)",
            "(line 946,col 9)-(line 946,col 58)",
            "(line 947,col 9)-(line 947,col 44)",
            "(line 949,col 9)-(line 952,col 43)",
            "(line 955,col 9)-(line 955,col 56)",
            "(line 956,col 9)-(line 956,col 40)",
            "(line 957,col 9)-(line 960,col 43)",
            "(line 962,col 9)-(line 966,col 43)",
            "(line 968,col 9)-(line 972,col 43)",
            "(line 974,col 9)-(line 974,col 44)",
            "(line 975,col 9)-(line 975,col 43)",
            "(line 976,col 9)-(line 979,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testSubtract()",
        "snippet": "    public void testSubtract() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.subtract(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(7, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.subtract(f2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(7, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(4, 5);\n        f = f1.subtract(f2);\n        assertEquals(-4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f2.subtract(f1);\n        assertSame(f2, f);\n        \n        try {\n            f.subtract(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.subtract(f2);\n        assertEquals(-13085, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD.negate();\n        f = f1.subtract(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            fail(\"expecting ArithmeticException\");  //should overflow\n        } catch (ArithmeticException ex) {}\n            \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 982,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 983,col 9)-(line 983,col 26)",
            "(line 984,col 9)-(line 984,col 27)",
            "(line 985,col 9)-(line 985,col 27)",
            "(line 987,col 9)-(line 987,col 40)",
            "(line 988,col 9)-(line 988,col 40)",
            "(line 989,col 9)-(line 989,col 28)",
            "(line 990,col 9)-(line 990,col 42)",
            "(line 991,col 9)-(line 991,col 44)",
            "(line 993,col 9)-(line 993,col 40)",
            "(line 994,col 9)-(line 994,col 40)",
            "(line 995,col 9)-(line 995,col 28)",
            "(line 996,col 9)-(line 996,col 42)",
            "(line 997,col 9)-(line 997,col 44)",
            "(line 999,col 9)-(line 999,col 40)",
            "(line 1000,col 9)-(line 1000,col 40)",
            "(line 1001,col 9)-(line 1001,col 28)",
            "(line 1002,col 9)-(line 1002,col 42)",
            "(line 1003,col 9)-(line 1003,col 44)",
            "(line 1005,col 9)-(line 1005,col 40)",
            "(line 1006,col 9)-(line 1006,col 41)",
            "(line 1007,col 9)-(line 1007,col 28)",
            "(line 1008,col 9)-(line 1008,col 42)",
            "(line 1009,col 9)-(line 1009,col 44)",
            "(line 1011,col 9)-(line 1011,col 40)",
            "(line 1012,col 9)-(line 1012,col 40)",
            "(line 1013,col 9)-(line 1013,col 28)",
            "(line 1014,col 9)-(line 1014,col 43)",
            "(line 1015,col 9)-(line 1015,col 44)",
            "(line 1017,col 9)-(line 1017,col 40)",
            "(line 1018,col 9)-(line 1018,col 41)",
            "(line 1019,col 9)-(line 1019,col 28)",
            "(line 1020,col 9)-(line 1020,col 42)",
            "(line 1021,col 9)-(line 1021,col 44)",
            "(line 1023,col 9)-(line 1023,col 40)",
            "(line 1024,col 9)-(line 1024,col 40)",
            "(line 1025,col 9)-(line 1025,col 28)",
            "(line 1026,col 9)-(line 1026,col 42)",
            "(line 1027,col 9)-(line 1027,col 45)",
            "(line 1029,col 9)-(line 1029,col 40)",
            "(line 1030,col 9)-(line 1030,col 40)",
            "(line 1031,col 9)-(line 1031,col 28)",
            "(line 1032,col 9)-(line 1032,col 26)",
            "(line 1034,col 9)-(line 1037,col 48)",
            "(line 1041,col 9)-(line 1041,col 45)",
            "(line 1042,col 9)-(line 1042,col 43)",
            "(line 1043,col 9)-(line 1043,col 28)",
            "(line 1044,col 9)-(line 1044,col 47)",
            "(line 1045,col 9)-(line 1045,col 53)",
            "(line 1047,col 9)-(line 1047,col 56)",
            "(line 1048,col 9)-(line 1048,col 41)",
            "(line 1049,col 9)-(line 1049,col 28)",
            "(line 1050,col 9)-(line 1050,col 60)",
            "(line 1051,col 9)-(line 1051,col 44)",
            "(line 1053,col 9)-(line 1053,col 56)",
            "(line 1054,col 9)-(line 1054,col 26)",
            "(line 1055,col 9)-(line 1055,col 28)",
            "(line 1056,col 9)-(line 1056,col 60)",
            "(line 1057,col 9)-(line 1057,col 44)",
            "(line 1059,col 9)-(line 1064,col 43)",
            "(line 1067,col 9)-(line 1067,col 56)",
            "(line 1068,col 9)-(line 1068,col 39)",
            "(line 1069,col 9)-(line 1072,col 43)",
            "(line 1074,col 9)-(line 1078,col 43)",
            "(line 1080,col 9)-(line 1084,col 43)",
            "(line 1086,col 9)-(line 1086,col 44)",
            "(line 1087,col 9)-(line 1087,col 43)",
            "(line 1088,col 9)-(line 1091,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testMultiply()",
        "snippet": "    public void testMultiply() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(6, 10);\n        f2 = Fraction.getFraction(6, 10);\n        f = f1.multiplyBy(f2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        f = f.multiplyBy(f2);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(-3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.multiplyBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.multiplyBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.multiplyBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiplyBy(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1094,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 9)-(line 1095,col 26)",
            "(line 1096,col 9)-(line 1096,col 27)",
            "(line 1097,col 9)-(line 1097,col 27)",
            "(line 1099,col 9)-(line 1099,col 40)",
            "(line 1100,col 9)-(line 1100,col 40)",
            "(line 1101,col 9)-(line 1101,col 30)",
            "(line 1102,col 9)-(line 1102,col 42)",
            "(line 1103,col 9)-(line 1103,col 45)",
            "(line 1105,col 9)-(line 1105,col 41)",
            "(line 1106,col 9)-(line 1106,col 41)",
            "(line 1107,col 9)-(line 1107,col 30)",
            "(line 1108,col 9)-(line 1108,col 42)",
            "(line 1109,col 9)-(line 1109,col 45)",
            "(line 1110,col 9)-(line 1110,col 29)",
            "(line 1111,col 9)-(line 1111,col 43)",
            "(line 1112,col 9)-(line 1112,col 46)",
            "(line 1114,col 9)-(line 1114,col 40)",
            "(line 1115,col 9)-(line 1115,col 41)",
            "(line 1116,col 9)-(line 1116,col 30)",
            "(line 1117,col 9)-(line 1117,col 43)",
            "(line 1118,col 9)-(line 1118,col 45)",
            "(line 1120,col 9)-(line 1120,col 41)",
            "(line 1121,col 9)-(line 1121,col 41)",
            "(line 1122,col 9)-(line 1122,col 30)",
            "(line 1123,col 9)-(line 1123,col 42)",
            "(line 1124,col 9)-(line 1124,col 45)",
            "(line 1127,col 9)-(line 1127,col 40)",
            "(line 1128,col 9)-(line 1128,col 40)",
            "(line 1129,col 9)-(line 1129,col 30)",
            "(line 1130,col 9)-(line 1130,col 37)",
            "(line 1132,col 9)-(line 1132,col 40)",
            "(line 1133,col 9)-(line 1133,col 26)",
            "(line 1134,col 9)-(line 1134,col 30)",
            "(line 1135,col 9)-(line 1135,col 42)",
            "(line 1136,col 9)-(line 1136,col 44)",
            "(line 1138,col 9)-(line 1138,col 56)",
            "(line 1139,col 9)-(line 1139,col 72)",
            "(line 1140,col 9)-(line 1140,col 30)",
            "(line 1141,col 9)-(line 1141,col 58)",
            "(line 1142,col 9)-(line 1142,col 44)",
            "(line 1144,col 9)-(line 1147,col 48)",
            "(line 1149,col 9)-(line 1153,col 43)",
            "(line 1155,col 9)-(line 1159,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testDivide()",
        "snippet": "    public void testDivide() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.divideBy(f2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.ZERO;\n        try {\n            f = f1.divideBy(f2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.divideBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divideBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f1);  \n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.divideBy(null);\n            fail(\"IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1162,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 9)-(line 1163,col 26)",
            "(line 1164,col 9)-(line 1164,col 27)",
            "(line 1165,col 9)-(line 1165,col 27)",
            "(line 1167,col 9)-(line 1167,col 40)",
            "(line 1168,col 9)-(line 1168,col 40)",
            "(line 1169,col 9)-(line 1169,col 28)",
            "(line 1170,col 9)-(line 1170,col 42)",
            "(line 1171,col 9)-(line 1171,col 44)",
            "(line 1173,col 9)-(line 1173,col 40)",
            "(line 1174,col 9)-(line 1174,col 27)",
            "(line 1175,col 9)-(line 1178,col 43)",
            "(line 1180,col 9)-(line 1180,col 40)",
            "(line 1181,col 9)-(line 1181,col 40)",
            "(line 1182,col 9)-(line 1182,col 28)",
            "(line 1183,col 9)-(line 1183,col 37)",
            "(line 1185,col 9)-(line 1185,col 40)",
            "(line 1186,col 9)-(line 1186,col 26)",
            "(line 1187,col 9)-(line 1187,col 28)",
            "(line 1188,col 9)-(line 1188,col 42)",
            "(line 1189,col 9)-(line 1189,col 44)",
            "(line 1191,col 9)-(line 1191,col 56)",
            "(line 1192,col 9)-(line 1192,col 28)",
            "(line 1193,col 9)-(line 1193,col 42)",
            "(line 1194,col 9)-(line 1194,col 44)",
            "(line 1196,col 9)-(line 1196,col 72)",
            "(line 1197,col 9)-(line 1197,col 56)",
            "(line 1198,col 9)-(line 1198,col 28)",
            "(line 1199,col 9)-(line 1199,col 58)",
            "(line 1200,col 9)-(line 1200,col 44)",
            "(line 1202,col 9)-(line 1205,col 48)",
            "(line 1207,col 9)-(line 1211,col 43)",
            "(line 1212,col 9)-(line 1216,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testEquals()",
        "snippet": "    public void testEquals() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertEquals(false, f1.equals(null));\n        assertEquals(false, f1.equals(new Object()));\n        assertEquals(false, f1.equals(new Integer(6)));\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        assertEquals(false, f1.equals(f2));\n        assertEquals(true, f1.equals(f1));\n        assertEquals(true, f2.equals(f2));\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertEquals(true, f1.equals(f2));\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertEquals(false, f1.equals(f2));\n    }\n",
        "begin_line": 1219,
        "end_line": 1239,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 9)-(line 1220,col 27)",
            "(line 1221,col 9)-(line 1221,col 27)",
            "(line 1223,col 9)-(line 1223,col 40)",
            "(line 1224,col 9)-(line 1224,col 45)",
            "(line 1225,col 9)-(line 1225,col 53)",
            "(line 1226,col 9)-(line 1226,col 55)",
            "(line 1228,col 9)-(line 1228,col 40)",
            "(line 1229,col 9)-(line 1229,col 40)",
            "(line 1230,col 9)-(line 1230,col 43)",
            "(line 1231,col 9)-(line 1231,col 42)",
            "(line 1232,col 9)-(line 1232,col 42)",
            "(line 1234,col 9)-(line 1234,col 40)",
            "(line 1235,col 9)-(line 1235,col 42)",
            "(line 1237,col 9)-(line 1237,col 41)",
            "(line 1238,col 9)-(line 1238,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Fraction f1 = Fraction.getFraction(3, 5);\n        Fraction f2 = Fraction.getFraction(3, 5);\n        \n        assertTrue(f1.hashCode() == f2.hashCode());\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.hashCode() != f2.hashCode());\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.hashCode() != f2.hashCode());\n    }\n",
        "begin_line": 1241,
        "end_line": 1252,
        "comment": "",
        "child_ranges": [
            "(line 1242,col 9)-(line 1242,col 49)",
            "(line 1243,col 9)-(line 1243,col 49)",
            "(line 1245,col 9)-(line 1245,col 51)",
            "(line 1247,col 9)-(line 1247,col 40)",
            "(line 1248,col 9)-(line 1248,col 51)",
            "(line 1250,col 9)-(line 1250,col 41)",
            "(line 1251,col 9)-(line 1251,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f1) == 0);\n        \n        try {\n            f1.compareTo(null);\n            fail(\"expecting NullPointerException\");\n        } catch (NullPointerException ex) {}\n        \n        try {\n            f1.compareTo(new Object());\n            fail(\"expecting ClassCastException\");\n        } catch (ClassCastException ex) {}\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(4, 5);\n        assertTrue(f1.compareTo(f2) < 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n        f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n    }\n",
        "begin_line": 1254,
        "end_line": 1291,
        "comment": "",
        "child_ranges": [
            "(line 1255,col 9)-(line 1255,col 27)",
            "(line 1256,col 9)-(line 1256,col 27)",
            "(line 1258,col 9)-(line 1258,col 40)",
            "(line 1259,col 9)-(line 1259,col 42)",
            "(line 1261,col 9)-(line 1264,col 44)",
            "(line 1266,col 9)-(line 1269,col 42)",
            "(line 1271,col 9)-(line 1271,col 40)",
            "(line 1272,col 9)-(line 1272,col 41)",
            "(line 1273,col 9)-(line 1273,col 42)",
            "(line 1275,col 9)-(line 1275,col 40)",
            "(line 1276,col 9)-(line 1276,col 41)",
            "(line 1277,col 9)-(line 1277,col 42)",
            "(line 1279,col 9)-(line 1279,col 40)",
            "(line 1280,col 9)-(line 1280,col 42)",
            "(line 1281,col 9)-(line 1281,col 42)",
            "(line 1283,col 9)-(line 1283,col 41)",
            "(line 1284,col 9)-(line 1284,col 42)",
            "(line 1285,col 9)-(line 1285,col 42)",
            "(line 1287,col 9)-(line 1287,col 60)",
            "(line 1288,col 9)-(line 1288,col 41)",
            "(line 1289,col 9)-(line 1289,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testToString()",
        "snippet": "    public void testToString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"7/5\", f.toString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"4/2\", f.toString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0/2\", f.toString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"2/2\", f.toString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648/1\", f.toString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-2147483648/2147483647\", f.toString());\n    }\n",
        "begin_line": 1293,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1294,col 9)-(line 1294,col 26)",
            "(line 1296,col 9)-(line 1296,col 39)",
            "(line 1297,col 9)-(line 1297,col 34)",
            "(line 1298,col 9)-(line 1298,col 33)",
            "(line 1299,col 9)-(line 1299,col 38)",
            "(line 1301,col 9)-(line 1301,col 39)",
            "(line 1302,col 9)-(line 1302,col 42)",
            "(line 1304,col 9)-(line 1304,col 39)",
            "(line 1305,col 9)-(line 1305,col 42)",
            "(line 1307,col 9)-(line 1307,col 39)",
            "(line 1308,col 9)-(line 1308,col 42)",
            "(line 1310,col 9)-(line 1310,col 39)",
            "(line 1311,col 9)-(line 1311,col 42)",
            "(line 1313,col 9)-(line 1313,col 58)",
            "(line 1314,col 9)-(line 1314,col 52)",
            "(line 1316,col 9)-(line 1316,col 59)",
            "(line 1317,col 9)-(line 1317,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testToProperString()",
        "snippet": "    public void testToProperString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toProperString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toProperString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"1 2/5\", f.toProperString());        \n        \n        f = Fraction.getFraction(14, 10);\n        assertEquals(\"1 4/10\", f.toProperString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"2\", f.toProperString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0\", f.toProperString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"1\", f.toProperString());        \n        \n        f = Fraction.getFraction(-7, 5);\n        assertEquals(\"-1 2/5\", f.toProperString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648\", f.toProperString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-1 1/2147483647\", f.toProperString());\n\n        assertEquals(\"-1\", Fraction.getFraction(-1).toProperString());\n    }\n",
        "begin_line": 1320,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 9)-(line 1321,col 26)",
            "(line 1323,col 9)-(line 1323,col 39)",
            "(line 1324,col 9)-(line 1324,col 40)",
            "(line 1325,col 9)-(line 1325,col 33)",
            "(line 1326,col 9)-(line 1326,col 44)",
            "(line 1328,col 9)-(line 1328,col 39)",
            "(line 1329,col 9)-(line 1329,col 50)",
            "(line 1331,col 9)-(line 1331,col 41)",
            "(line 1332,col 9)-(line 1332,col 51)",
            "(line 1334,col 9)-(line 1334,col 39)",
            "(line 1335,col 9)-(line 1335,col 46)",
            "(line 1337,col 9)-(line 1337,col 39)",
            "(line 1338,col 9)-(line 1338,col 46)",
            "(line 1340,col 9)-(line 1340,col 39)",
            "(line 1341,col 9)-(line 1341,col 46)",
            "(line 1343,col 9)-(line 1343,col 40)",
            "(line 1344,col 9)-(line 1344,col 51)",
            "(line 1346,col 9)-(line 1346,col 58)",
            "(line 1347,col 9)-(line 1347,col 56)",
            "(line 1349,col 9)-(line 1349,col 59)",
            "(line 1350,col 9)-(line 1350,col 60)",
            "(line 1352,col 9)-(line 1352,col 70)"
        ]
    }
]