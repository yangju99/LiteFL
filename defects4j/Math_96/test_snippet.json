[
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        Complex z = new Complex(3.0, 4.0);\n        assertEquals(3.0, z.getReal(), 1.0e-5);\n        assertEquals(4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 42)",
            "(line 54,col 9)-(line 54,col 47)",
            "(line 55,col 9)-(line 55,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()",
        "snippet": "    public void testConstructorNaN() {\n        Complex z = new Complex(3.0, Double.NaN);\n        assertTrue(z.isNaN());\n\n        z = new Complex(nan, 4.0);\n        assertTrue(z.isNaN());\n\n        z = new Complex(3.0, 4.0);\n        assertFalse(z.isNaN());\n    }\n",
        "begin_line": 58,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 49)",
            "(line 60,col 9)-(line 60,col 30)",
            "(line 62,col 9)-(line 62,col 34)",
            "(line 63,col 9)-(line 63,col 30)",
            "(line 65,col 9)-(line 65,col 34)",
            "(line 66,col 9)-(line 66,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbs()",
        "snippet": "    public void testAbs() {\n        Complex z = new Complex(3.0, 4.0);\n        assertEquals(5.0, z.abs(), 1.0e-5);\n    }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 42)",
            "(line 71,col 9)-(line 71,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsNaN()",
        "snippet": "    public void testAbsNaN() {\n        assertTrue(Double.isNaN(Complex.NaN.abs()));\n        Complex z = new Complex(inf, nan);\n        assertTrue(Double.isNaN(z.abs()));\n    }\n",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 52)",
            "(line 76,col 9)-(line 76,col 42)",
            "(line 77,col 9)-(line 77,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()",
        "snippet": "    public void testAbsInfinite() {\n        Complex z = new Complex(inf, 0);\n        assertEquals(inf, z.abs(), 0);\n        z = new Complex(0, neginf);\n        assertEquals(inf, z.abs(), 0);\n        z = new Complex(inf, neginf);\n        assertEquals(inf, z.abs(), 0);     \n    }\n",
        "begin_line": 80,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 40)",
            "(line 82,col 9)-(line 82,col 38)",
            "(line 83,col 9)-(line 83,col 35)",
            "(line 84,col 9)-(line 84,col 38)",
            "(line 85,col 9)-(line 85,col 37)",
            "(line 86,col 9)-(line 86,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAdd()",
        "snippet": "    public void testAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.add(y);\n        assertEquals(8.0, z.getReal(), 1.0e-5);\n        assertEquals(10.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 89,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 42)",
            "(line 91,col 9)-(line 91,col 42)",
            "(line 92,col 9)-(line 92,col 29)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 94,col 9)-(line 94,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddNaN()",
        "snippet": "    public void testAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.add(Complex.NaN);\n        assertTrue(z.isNaN());\n        z = new Complex(1, nan);\n        Complex w = x.add(z);\n        assertEquals(w.getReal(), 4.0, 0);\n        assertTrue(Double.isNaN(w.getImaginary()));\n    }\n",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 42)",
            "(line 99,col 9)-(line 99,col 39)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 32)",
            "(line 102,col 9)-(line 102,col 29)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddInfinite()",
        "snippet": "    public void testAddInfinite() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(inf, 0);\n        Complex w = x.add(z);\n        assertEquals(w.getImaginary(), 1, 0);\n        assertEquals(inf, w.getReal(), 0);\n        \n        x = new Complex(neginf, 0);\n        assertTrue(Double.isNaN(x.add(z).getReal()));\n    }\n",
        "begin_line": 107,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 40)",
            "(line 110,col 9)-(line 110,col 29)",
            "(line 111,col 9)-(line 111,col 45)",
            "(line 112,col 9)-(line 112,col 42)",
            "(line 114,col 9)-(line 114,col 35)",
            "(line 115,col 9)-(line 115,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugate()",
        "snippet": "    public void testConjugate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.conjugate();\n        assertEquals(3.0, z.getReal(), 1.0e-5);\n        assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 42)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 47)",
            "(line 122,col 9)-(line 122,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()",
        "snippet": "    public void testConjugateNaN() {\n        Complex z = Complex.NaN.conjugate();\n        assertTrue(z.isNaN());\n    }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 127,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()",
        "snippet": "    public void testConjugateInfiinite() {\n        Complex z = new Complex(0, inf);\n        assertEquals(neginf, z.conjugate().getImaginary(), 0);\n        z = new Complex(0, neginf);\n        assertEquals(inf, z.conjugate().getImaginary(), 0);\n    }\n",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 40)",
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 35)",
            "(line 134,col 9)-(line 134,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivide()",
        "snippet": "    public void testDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.divide(y);\n        assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n        assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 42)",
            "(line 139,col 9)-(line 139,col 42)",
            "(line 140,col 9)-(line 140,col 32)",
            "(line 141,col 9)-(line 141,col 55)",
            "(line 142,col 9)-(line 142,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()",
        "snippet": "    public void testDivideInfinite() {\n        Complex x = new Complex(3, 4);\n        Complex w = new Complex(neginf, inf);\n        assertTrue(x.divide(w).equals(Complex.ZERO));\n        \n        Complex z = w.divide(x);\n        assertTrue(Double.isNaN(z.getReal()));\n        assertEquals(inf, z.getImaginary(), 0);\n        \n        w = new Complex(inf, inf);\n        z = w.divide(x);\n        assertTrue(Double.isNaN(z.getImaginary()));\n        assertEquals(inf, z.getReal(), 0);\n        \n        w = new Complex(1, inf);\n        z = w.divide(w);\n        assertTrue(Double.isNaN(z.getReal()));\n        assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 145,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 38)",
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 53)",
            "(line 150,col 9)-(line 150,col 32)",
            "(line 151,col 9)-(line 151,col 46)",
            "(line 152,col 9)-(line 152,col 47)",
            "(line 154,col 9)-(line 154,col 34)",
            "(line 155,col 9)-(line 155,col 24)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 42)",
            "(line 159,col 9)-(line 159,col 32)",
            "(line 160,col 9)-(line 160,col 24)",
            "(line 161,col 9)-(line 161,col 46)",
            "(line 162,col 9)-(line 162,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaN()",
        "snippet": "    public void testDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.NaN);\n        assertTrue(z.isNaN());\n    }\n",
        "begin_line": 165,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()",
        "snippet": "    public void testDivideNaNInf() {  \n       Complex z = oneInf.divide(Complex.ONE);\n       assertTrue(Double.isNaN(z.getReal()));\n       assertEquals(inf, z.getImaginary(), 0);\n       \n       z = negInfNegInf.divide(oneNaN);\n       assertTrue(Double.isNaN(z.getReal()));\n       assertTrue(Double.isNaN(z.getImaginary()));\n       \n       z = negInfInf.divide(Complex.ONE);\n       assertTrue(Double.isNaN(z.getReal()));\n       assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 171,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 172,col 8)-(line 172,col 46)",
            "(line 173,col 8)-(line 173,col 45)",
            "(line 174,col 8)-(line 174,col 46)",
            "(line 176,col 8)-(line 176,col 39)",
            "(line 177,col 8)-(line 177,col 45)",
            "(line 178,col 8)-(line 178,col 50)",
            "(line 180,col 8)-(line 180,col 41)",
            "(line 181,col 8)-(line 181,col 45)",
            "(line 182,col 8)-(line 182,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiply()",
        "snippet": "    public void testMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.multiply(y);\n        assertEquals(-9.0, z.getReal(), 1.0e-5);\n        assertEquals(38.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 185,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 42)",
            "(line 188,col 9)-(line 188,col 34)",
            "(line 189,col 9)-(line 189,col 48)",
            "(line 190,col 9)-(line 190,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()",
        "snippet": "    public void testMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.multiply(Complex.NaN);\n        assertTrue(z.isNaN());\n    }\n",
        "begin_line": 193,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 42)",
            "(line 195,col 9)-(line 195,col 44)",
            "(line 196,col 9)-(line 196,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()",
        "snippet": "    public void testMultiplyNaNInf() {\n        Complex z = new Complex(1,1);\n        Complex w = z.multiply(infOne);\n        assertEquals(w.getReal(), inf, 0);\n        assertEquals(w.getImaginary(), inf, 0);\n\n        // [MATH-164]\n        assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));\n        assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));\n        assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));\n        \n        w = oneInf.multiply(oneNegInf);\n        assertEquals(w.getReal(), inf, 0);\n        assertEquals(w.getImaginary(), inf, 0);\n        \n        w = negInfNegInf.multiply(oneNaN);\n        assertTrue(Double.isNaN(w.getReal()));\n        assertTrue(Double.isNaN(w.getImaginary()));  \n    }\n",
        "begin_line": 199,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 37)",
            "(line 201,col 9)-(line 201,col 39)",
            "(line 202,col 9)-(line 202,col 42)",
            "(line 203,col 9)-(line 203,col 47)",
            "(line 206,col 9)-(line 206,col 75)",
            "(line 207,col 9)-(line 207,col 75)",
            "(line 208,col 9)-(line 208,col 79)",
            "(line 210,col 9)-(line 210,col 39)",
            "(line 211,col 9)-(line 211,col 42)",
            "(line 212,col 9)-(line 212,col 47)",
            "(line 214,col 9)-(line 214,col 42)",
            "(line 215,col 9)-(line 215,col 46)",
            "(line 216,col 9)-(line 216,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegate()",
        "snippet": "    public void testNegate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.negate();\n        assertEquals(-3.0, z.getReal(), 1.0e-5);\n        assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 219,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 42)",
            "(line 221,col 9)-(line 221,col 31)",
            "(line 222,col 9)-(line 222,col 48)",
            "(line 223,col 9)-(line 223,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegateNaN()",
        "snippet": "    public void testNegateNaN() {\n        Complex z = Complex.NaN.negate();\n        assertTrue(z.isNaN());\n    }\n",
        "begin_line": 226,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 41)",
            "(line 228,col 9)-(line 228,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtract()",
        "snippet": "    public void testSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.subtract(y);\n        assertEquals(-2.0, z.getReal(), 1.0e-5);\n        assertEquals(-2.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 231,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 42)",
            "(line 233,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 234,col 34)",
            "(line 235,col 9)-(line 235,col 48)",
            "(line 236,col 9)-(line 236,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()",
        "snippet": "    public void testSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.subtract(Complex.NaN);\n        assertTrue(z.isNaN());\n    }\n",
        "begin_line": 239,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 42)",
            "(line 241,col 9)-(line 241,col 44)",
            "(line 242,col 9)-(line 242,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNull()",
        "snippet": "    public void testEqualsNull() {\n        Complex x = new Complex(3.0, 4.0);\n        assertFalse(x.equals(null));\n    }\n",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 42)",
            "(line 247,col 9)-(line 247,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsClass()",
        "snippet": "    public void testEqualsClass() {\n        Complex x = new Complex(3.0, 4.0);\n        assertFalse(x.equals(this));\n    }\n",
        "begin_line": 250,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 42)",
            "(line 252,col 9)-(line 252,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsSame()",
        "snippet": "    public void testEqualsSame() {\n        Complex x = new Complex(3.0, 4.0);\n        assertTrue(x.equals(x));\n    }\n",
        "begin_line": 255,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 257,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()",
        "snippet": "    public void testEqualsTrue() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(3.0, 4.0);\n        assertTrue(x.equals(y));\n    }\n",
        "begin_line": 260,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 42)",
            "(line 262,col 9)-(line 262,col 42)",
            "(line 263,col 9)-(line 263,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()",
        "snippet": "    public void testEqualsRealDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        assertFalse(x.equals(y));\n    }\n",
        "begin_line": 266,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 42)",
            "(line 268,col 9)-(line 268,col 61)",
            "(line 269,col 9)-(line 269,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()",
        "snippet": "    public void testEqualsImaginaryDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        assertFalse(x.equals(y));\n    }\n",
        "begin_line": 272,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 42)",
            "(line 274,col 9)-(line 274,col 61)",
            "(line 275,col 9)-(line 275,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()",
        "snippet": "    public void testEqualsNaN() {\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Complex complexNaN = Complex.NaN;\n        assertTrue(realNaN.equals(imaginaryNaN));\n        assertTrue(imaginaryNaN.equals(complexNaN));\n        assertTrue(realNaN.equals(complexNaN));\n    }\n",
        "begin_line": 278,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 55)",
            "(line 280,col 9)-(line 280,col 60)",
            "(line 281,col 9)-(line 281,col 41)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 52)",
            "(line 284,col 9)-(line 284,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        assertFalse(x.hashCode()==y.hashCode());\n        y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        assertFalse(x.hashCode()==y.hashCode());\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());\n        assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());\n    }\n",
        "begin_line": 287,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 42)",
            "(line 289,col 9)-(line 289,col 61)",
            "(line 290,col 9)-(line 290,col 48)",
            "(line 291,col 9)-(line 291,col 53)",
            "(line 292,col 9)-(line 292,col 48)",
            "(line 293,col 9)-(line 293,col 55)",
            "(line 294,col 9)-(line 294,col 60)",
            "(line 295,col 9)-(line 295,col 66)",
            "(line 296,col 9)-(line 296,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcos()",
        "snippet": "    public void testAcos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.936812, -2.30551);\n        TestUtils.assertEquals(expected, z.acos(), 1.0e-5);\n        TestUtils.assertEquals(new Complex(Math.acos(0), 0), \n                Complex.ZERO.acos(), 1.0e-12);\n    }\n",
        "begin_line": 299,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 38)",
            "(line 301,col 9)-(line 301,col 59)",
            "(line 302,col 9)-(line 302,col 59)",
            "(line 303,col 9)-(line 304,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosInf()",
        "snippet": "    public void testAcosInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.acos());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, infOne.acos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.acos());\n        TestUtils.assertSame(Complex.NaN, infInf.acos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.acos());\n    }\n",
        "begin_line": 307,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 57)",
            "(line 309,col 9)-(line 309,col 60)",
            "(line 310,col 9)-(line 310,col 57)",
            "(line 311,col 9)-(line 311,col 60)",
            "(line 312,col 9)-(line 312,col 57)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 60)",
            "(line 315,col 9)-(line 315,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosNaN()",
        "snippet": "    public void testAcosNaN() {\n        assertTrue(Complex.NaN.acos().isNaN());\n    }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsin()",
        "snippet": "    public void testAsin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.633984, 2.30551);\n        TestUtils.assertEquals(expected, z.asin(), 1.0e-5);\n    }\n",
        "begin_line": 322,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 38)",
            "(line 324,col 9)-(line 324,col 58)",
            "(line 325,col 9)-(line 325,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinNaN()",
        "snippet": "    public void testAsinNaN() {\n        assertTrue(Complex.NaN.asin().isNaN());\n    }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinInf()",
        "snippet": "    public void testAsinInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.asin());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, infOne.asin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.asin());\n        TestUtils.assertSame(Complex.NaN, infInf.asin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.asin());\n    }\n",
        "begin_line": 332,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 57)",
            "(line 334,col 9)-(line 334,col 60)",
            "(line 335,col 9)-(line 335,col 57)",
            "(line 336,col 9)-(line 336,col 60)",
            "(line 337,col 9)-(line 337,col 57)",
            "(line 338,col 9)-(line 338,col 60)",
            "(line 339,col 9)-(line 339,col 60)",
            "(line 340,col 9)-(line 340,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtan()",
        "snippet": "    public void testAtan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.44831, 0.158997);\n        TestUtils.assertEquals(expected, z.atan(), 1.0e-5);\n    }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 38)",
            "(line 346,col 9)-(line 346,col 58)",
            "(line 347,col 9)-(line 347,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanInf()",
        "snippet": "    public void testAtanInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.atan());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, infOne.atan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.atan());\n        TestUtils.assertSame(Complex.NaN, infInf.atan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.atan());\n    } \n",
        "begin_line": 350,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 57)",
            "(line 352,col 9)-(line 352,col 60)",
            "(line 353,col 9)-(line 353,col 57)",
            "(line 354,col 9)-(line 354,col 60)",
            "(line 355,col 9)-(line 355,col 57)",
            "(line 356,col 9)-(line 356,col 60)",
            "(line 357,col 9)-(line 357,col 60)",
            "(line 358,col 9)-(line 358,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanNaN()",
        "snippet": "    public void testAtanNaN() {\n        assertTrue(Complex.NaN.atan().isNaN());\n        assertTrue(Complex.I.atan().isNaN());\n    }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 47)",
            "(line 363,col 9)-(line 363,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCos()",
        "snippet": "    public void testCos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-27.03495, -3.851153);\n        TestUtils.assertEquals(expected, z.cos(), 1.0e-5);\n    }\n",
        "begin_line": 366,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 367,col 9)-(line 367,col 38)",
            "(line 368,col 9)-(line 368,col 61)",
            "(line 369,col 9)-(line 369,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosNaN()",
        "snippet": "    public void testCosNaN() {\n        assertTrue(Complex.NaN.cos().isNaN());\n    }\n",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosInf()",
        "snippet": "    public void testCosInf() {\n        TestUtils.assertSame(infNegInf, oneInf.cos());\n        TestUtils.assertSame(infInf, oneNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, infOne.cos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.cos());\n        TestUtils.assertSame(Complex.NaN, infInf.cos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cos());\n    } \n",
        "begin_line": 376,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 54)",
            "(line 378,col 9)-(line 378,col 54)",
            "(line 379,col 9)-(line 379,col 56)",
            "(line 380,col 9)-(line 380,col 59)",
            "(line 381,col 9)-(line 381,col 56)",
            "(line 382,col 9)-(line 382,col 59)",
            "(line 383,col 9)-(line 383,col 59)",
            "(line 384,col 9)-(line 384,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosh()",
        "snippet": "    public void testCosh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.58066, -7.58155);\n        TestUtils.assertEquals(expected, z.cosh(), 1.0e-5);\n    }\n",
        "begin_line": 387,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 38)",
            "(line 389,col 9)-(line 389,col 59)",
            "(line 390,col 9)-(line 390,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshNaN()",
        "snippet": "    public void testCoshNaN() {\n        assertTrue(Complex.NaN.cosh().isNaN());\n    }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshInf()",
        "snippet": "    public void testCoshInf() {  \n        TestUtils.assertSame(Complex.NaN, oneInf.cosh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.cosh());\n        TestUtils.assertSame(infInf, infOne.cosh());\n        TestUtils.assertSame(infNegInf, negInfOne.cosh());\n        TestUtils.assertSame(Complex.NaN, infInf.cosh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh());\n    } \n",
        "begin_line": 397,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 57)",
            "(line 399,col 9)-(line 399,col 60)",
            "(line 400,col 9)-(line 400,col 52)",
            "(line 401,col 9)-(line 401,col 58)",
            "(line 402,col 9)-(line 402,col 57)",
            "(line 403,col 9)-(line 403,col 60)",
            "(line 404,col 9)-(line 404,col 60)",
            "(line 405,col 9)-(line 405,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExp()",
        "snippet": "    public void testExp() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-13.12878, -15.20078);\n        TestUtils.assertEquals(expected, z.exp(), 1.0e-5);\n        TestUtils.assertEquals(Complex.ONE, \n                Complex.ZERO.exp(), 10e-12);\n        Complex iPi = Complex.I.multiply(new Complex(pi,0));\n        TestUtils.assertEquals(Complex.ONE.negate(), \n                iPi.exp(), 10e-12);\n    }\n",
        "begin_line": 408,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 38)",
            "(line 410,col 9)-(line 410,col 61)",
            "(line 411,col 9)-(line 411,col 58)",
            "(line 412,col 9)-(line 413,col 44)",
            "(line 414,col 9)-(line 414,col 60)",
            "(line 415,col 9)-(line 416,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpNaN()",
        "snippet": "    public void testExpNaN() {\n        assertTrue(Complex.NaN.exp().isNaN());\n    }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpInf()",
        "snippet": "    public void testExpInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.exp());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.exp());\n        TestUtils.assertSame(infInf, infOne.exp());\n        TestUtils.assertSame(Complex.ZERO, negInfOne.exp());\n        TestUtils.assertSame(Complex.NaN, infInf.exp());\n        TestUtils.assertSame(Complex.NaN, infNegInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.exp());\n    }\n",
        "begin_line": 423,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 56)",
            "(line 425,col 9)-(line 425,col 59)",
            "(line 426,col 9)-(line 426,col 51)",
            "(line 427,col 9)-(line 427,col 60)",
            "(line 428,col 9)-(line 428,col 56)",
            "(line 429,col 9)-(line 429,col 59)",
            "(line 430,col 9)-(line 430,col 59)",
            "(line 431,col 9)-(line 431,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLog()",
        "snippet": "    public void testLog() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.60944, 0.927295);\n        TestUtils.assertEquals(expected, z.log(), 1.0e-5);\n    }\n",
        "begin_line": 434,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 38)",
            "(line 436,col 9)-(line 436,col 58)",
            "(line 437,col 9)-(line 437,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogNaN()",
        "snippet": "    public void testLogNaN() {\n        assertTrue(Complex.NaN.log().isNaN());\n    }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogInf()",
        "snippet": "    public void testLogInf() {\n        TestUtils.assertEquals(new Complex(inf, pi / 2),\n                oneInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 2),\n                oneNegInf.log(), 10e-12);\n        TestUtils.assertEquals(infZero, infOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi),\n                negInfOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi / 4),\n                infInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 4),\n                infNegInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),\n                negInfInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n                negInfNegInf.log(), 10e-12);\n    }\n",
        "begin_line": 444,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 446,col 38)",
            "(line 447,col 9)-(line 448,col 41)",
            "(line 449,col 9)-(line 449,col 62)",
            "(line 450,col 9)-(line 451,col 41)",
            "(line 452,col 9)-(line 453,col 38)",
            "(line 454,col 9)-(line 455,col 41)",
            "(line 456,col 9)-(line 457,col 41)",
            "(line 458,col 9)-(line 459,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogZero()",
        "snippet": "    public void testLogZero() {\n        TestUtils.assertSame(negInfZero, Complex.ZERO.log());\n    }\n",
        "begin_line": 462,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPow()",
        "snippet": "    public void testPow() {\n        Complex x = new Complex(3, 4);\n        Complex y = new Complex(5, 6);\n        Complex expected = new Complex(-1.860893, 11.83677);\n        TestUtils.assertEquals(expected, x.pow(y), 1.0e-5);\n    }\n",
        "begin_line": 466,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 467,col 9)-(line 467,col 38)",
            "(line 468,col 9)-(line 468,col 38)",
            "(line 469,col 9)-(line 469,col 60)",
            "(line 470,col 9)-(line 470,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()",
        "snippet": "    public void testPowNaNBase() {\n        Complex x = new Complex(3, 4);\n        assertTrue(Complex.NaN.pow(x).isNaN());\n    }\n",
        "begin_line": 473,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 38)",
            "(line 475,col 9)-(line 475,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()",
        "snippet": "    public void testPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        assertTrue(x.pow(Complex.NaN).isNaN());\n    }\n",
        "begin_line": 478,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 38)",
            "(line 480,col 9)-(line 480,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowInf()",
        "snippet": "   public void testPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));   \n   }\n",
        "begin_line": 483,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 484,col 8)-(line 484,col 65)",
            "(line 485,col 8)-(line 485,col 68)",
            "(line 486,col 8)-(line 486,col 65)",
            "(line 487,col 8)-(line 487,col 65)",
            "(line 488,col 8)-(line 488,col 68)",
            "(line 489,col 8)-(line 489,col 68)",
            "(line 490,col 8)-(line 490,col 71)",
            "(line 491,col 8)-(line 491,col 65)",
            "(line 492,col 8)-(line 492,col 68)",
            "(line 493,col 8)-(line 493,col 65)",
            "(line 494,col 8)-(line 494,col 68)",
            "(line 495,col 8)-(line 495,col 68)",
            "(line 496,col 8)-(line 496,col 71)",
            "(line 497,col 8)-(line 497,col 69)",
            "(line 498,col 8)-(line 498,col 72)",
            "(line 499,col 8)-(line 499,col 66)",
            "(line 500,col 8)-(line 500,col 63)",
            "(line 501,col 8)-(line 501,col 66)",
            "(line 502,col 8)-(line 502,col 60)",
            "(line 503,col 8)-(line 503,col 66)",
            "(line 504,col 8)-(line 504,col 69)",
            "(line 505,col 8)-(line 505,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowZero()",
        "snippet": "   public void testPowZero() {\n       TestUtils.assertSame(Complex.NaN, \n               Complex.ZERO.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN, \n               Complex.ZERO.pow(Complex.ZERO));\n       TestUtils.assertSame(Complex.NaN, \n               Complex.ZERO.pow(Complex.I));\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.ONE.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.I.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n   }\n",
        "begin_line": 508,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 509,col 8)-(line 510,col 46)",
            "(line 511,col 8)-(line 512,col 47)",
            "(line 513,col 8)-(line 514,col 44)",
            "(line 515,col 8)-(line 516,col 54)",
            "(line 517,col 8)-(line 518,col 52)",
            "(line 519,col 8)-(line 520,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testpowNull()",
        "snippet": "    public void testpowNull() {\n        try {\n            Complex.ONE.pow(null); \n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 523,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 524,col 9)-(line 529,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSin()",
        "snippet": "    public void testSin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(3.853738, -27.01681);\n        TestUtils.assertEquals(expected, z.sin(), 1.0e-5);\n    }\n",
        "begin_line": 532,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 38)",
            "(line 534,col 9)-(line 534,col 60)",
            "(line 535,col 9)-(line 535,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinInf()",
        "snippet": "    public void testSinInf() {\n        TestUtils.assertSame(infInf, oneInf.sin());\n        TestUtils.assertSame(infNegInf, oneNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, infOne.sin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.sin());\n        TestUtils.assertSame(Complex.NaN, infInf.sin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sin());\n    }\n",
        "begin_line": 538,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 539,col 9)-(line 539,col 51)",
            "(line 540,col 9)-(line 540,col 57)",
            "(line 541,col 9)-(line 541,col 56)",
            "(line 542,col 9)-(line 542,col 59)",
            "(line 543,col 9)-(line 543,col 56)",
            "(line 544,col 9)-(line 544,col 59)",
            "(line 545,col 9)-(line 545,col 59)",
            "(line 546,col 9)-(line 546,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinNaN()",
        "snippet": "    public void testSinNaN() {\n        assertTrue(Complex.NaN.sin().isNaN());\n    }\n",
        "begin_line": 549,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 550,col 9)-(line 550,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinh()",
        "snippet": "    public void testSinh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.54812, -7.61923);\n        TestUtils.assertEquals(expected, z.sinh(), 1.0e-5);\n    }\n",
        "begin_line": 553,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 554,col 9)-(line 554,col 38)",
            "(line 555,col 9)-(line 555,col 59)",
            "(line 556,col 9)-(line 556,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhNaN()",
        "snippet": "    public void testSinhNaN() {\n        assertTrue(Complex.NaN.sinh().isNaN());\n    }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhInf()",
        "snippet": "    public void testSinhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.sinh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.sinh());\n        TestUtils.assertSame(infInf, infOne.sinh());\n        TestUtils.assertSame(negInfInf, negInfOne.sinh());\n        TestUtils.assertSame(Complex.NaN, infInf.sinh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh());\n    }\n",
        "begin_line": 563,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 564,col 9)-(line 564,col 57)",
            "(line 565,col 9)-(line 565,col 60)",
            "(line 566,col 9)-(line 566,col 52)",
            "(line 567,col 9)-(line 567,col 58)",
            "(line 568,col 9)-(line 568,col 57)",
            "(line 569,col 9)-(line 569,col 60)",
            "(line 570,col 9)-(line 570,col 60)",
            "(line 571,col 9)-(line 571,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()",
        "snippet": "    public void testSqrtRealPositive() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(2, 1);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 574,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 575,col 9)-(line 575,col 38)",
            "(line 576,col 9)-(line 576,col 45)",
            "(line 577,col 9)-(line 577,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()",
        "snippet": "    public void testSqrtRealZero() {\n        Complex z = new Complex(0.0, 4);\n        Complex expected = new Complex(1.41421, 1.41421);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 580,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 581,col 9)-(line 581,col 40)",
            "(line 582,col 9)-(line 582,col 57)",
            "(line 583,col 9)-(line 583,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()",
        "snippet": "    public void testSqrtRealNegative() {\n        Complex z = new Complex(-3.0, 4);\n        Complex expected = new Complex(1, 2);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 586,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 587,col 9)-(line 587,col 41)",
            "(line 588,col 9)-(line 588,col 45)",
            "(line 589,col 9)-(line 589,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()",
        "snippet": "    public void testSqrtImaginaryZero() {\n        Complex z = new Complex(-3.0, 0.0);\n        Complex expected = new Complex(0.0, 1.73205);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 592,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 593,col 9)-(line 593,col 43)",
            "(line 594,col 9)-(line 594,col 53)",
            "(line 595,col 9)-(line 595,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()",
        "snippet": "    public void testSqrtImaginaryNegative() {\n        Complex z = new Complex(-3.0, -4.0);\n        Complex expected = new Complex(1.0, -2.0);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 598,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 599,col 9)-(line 599,col 44)",
            "(line 600,col 9)-(line 600,col 50)",
            "(line 601,col 9)-(line 601,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()",
        "snippet": "    public void testSqrtPolar() {\n        double r = 1;\n        for (int i = 0; i < 5; i++) {\n            r += i;\n            double theta = 0;\n            for (int j =0; j < 11; j++) {\n                theta += pi /12;\n                Complex z = ComplexUtils.polar2Complex(r, theta);\n                Complex sqrtz = ComplexUtils.polar2Complex(Math.sqrt(r), theta / 2);\n                TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12);\n            }\n        }       \n    }\n",
        "begin_line": 604,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 605,col 9)-(line 605,col 21)",
            "(line 606,col 9)-(line 615,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()",
        "snippet": "    public void testSqrtNaN() {\n        assertTrue(Complex.NaN.sqrt().isNaN());\n    }\n",
        "begin_line": 618,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 619,col 9)-(line 619,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtInf()",
        "snippet": "    public void testSqrtInf() {\n        TestUtils.assertSame(infNaN, oneInf.sqrt());\n        TestUtils.assertSame(infNaN, oneNegInf.sqrt());\n        TestUtils.assertSame(infZero, infOne.sqrt());\n        TestUtils.assertSame(zeroInf, negInfOne.sqrt());\n        TestUtils.assertSame(infNaN, infInf.sqrt());\n        TestUtils.assertSame(infNaN, infNegInf.sqrt());\n        TestUtils.assertSame(nanInf, negInfInf.sqrt());\n        TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt());\n    }\n",
        "begin_line": 622,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 52)",
            "(line 624,col 9)-(line 624,col 55)",
            "(line 625,col 9)-(line 625,col 53)",
            "(line 626,col 9)-(line 626,col 56)",
            "(line 627,col 9)-(line 627,col 52)",
            "(line 628,col 9)-(line 628,col 55)",
            "(line 629,col 9)-(line 629,col 55)",
            "(line 630,col 9)-(line 630,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1z()",
        "snippet": "    public void testSqrt1z() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(4.08033, -2.94094);\n        TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5);\n    }\n",
        "begin_line": 633,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 634,col 9)-(line 634,col 38)",
            "(line 635,col 9)-(line 635,col 58)",
            "(line 636,col 9)-(line 636,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()",
        "snippet": "    public void testSqrt1zNaN() {\n        assertTrue(Complex.NaN.sqrt1z().isNaN());\n    }\n",
        "begin_line": 639,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 640,col 9)-(line 640,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTan()",
        "snippet": "    public void testTan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n    }\n",
        "begin_line": 643,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 644,col 9)-(line 644,col 38)",
            "(line 645,col 9)-(line 645,col 63)",
            "(line 646,col 9)-(line 646,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanNaN()",
        "snippet": "    public void testTanNaN() {\n        assertTrue(Complex.NaN.tan().isNaN());\n    }\n",
        "begin_line": 649,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanInf()",
        "snippet": "    public void testTanInf() {\n        TestUtils.assertSame(zeroNaN, oneInf.tan());\n        TestUtils.assertSame(zeroNaN, oneNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, infOne.tan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());\n        TestUtils.assertSame(Complex.NaN, infInf.tan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());\n    }\n",
        "begin_line": 653,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 654,col 9)-(line 654,col 52)",
            "(line 655,col 9)-(line 655,col 55)",
            "(line 656,col 9)-(line 656,col 56)",
            "(line 657,col 9)-(line 657,col 59)",
            "(line 658,col 9)-(line 658,col 56)",
            "(line 659,col 9)-(line 659,col 59)",
            "(line 660,col 9)-(line 660,col 59)",
            "(line 661,col 9)-(line 661,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanCritical()",
        "snippet": "   public void testTanCritical() {\n        TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan());\n        TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan());\n    }\n",
        "begin_line": 664,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 65)",
            "(line 666,col 9)-(line 666,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanh()",
        "snippet": "    public void testTanh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);\n    }\n",
        "begin_line": 669,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 670,col 9)-(line 670,col 38)",
            "(line 671,col 9)-(line 671,col 60)",
            "(line 672,col 9)-(line 672,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhNaN()",
        "snippet": "    public void testTanhNaN() {\n        assertTrue(Complex.NaN.tanh().isNaN());\n    }\n",
        "begin_line": 675,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 676,col 9)-(line 676,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhInf()",
        "snippet": "    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(nanZero, infOne.tanh());\n        TestUtils.assertSame(nanZero, negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }\n",
        "begin_line": 679,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 57)",
            "(line 681,col 9)-(line 681,col 60)",
            "(line 682,col 9)-(line 682,col 53)",
            "(line 683,col 9)-(line 683,col 56)",
            "(line 684,col 9)-(line 684,col 57)",
            "(line 685,col 9)-(line 685,col 60)",
            "(line 686,col 9)-(line 686,col 60)",
            "(line 687,col 9)-(line 687,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhCritical()",
        "snippet": "    public void testTanhCritical() {\n        TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());\n    }\n",
        "begin_line": 690,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 691,col 9)-(line 691,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMath221()",
        "snippet": "    public void testMath221() {\n        assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n    }\n",
        "begin_line": 695,
        "end_line": 697,
        "comment": " test issue MATH-221 ",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 86)"
        ]
    }
]