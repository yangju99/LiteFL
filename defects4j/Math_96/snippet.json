[
    {
        "name": "Complex.hashCode#276",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.hashCode()",
        "snippet": "    public int hashCode() {\n        if (isNaN()) {\n            return 7;\n        }\n        return 37 * (17 * MathUtils.hash(imaginary) + \n            MathUtils.hash(real));\n    }\n",
        "begin_line": 276,
        "end_line": 282,
        "comment": "\n     * Get a hashCode for the complex number.\n     * <p>\n     * All NaN values have the same hash code.</p>\n     * \n     * @return a hash code value for this object\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.multiply#354",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex)",
        "snippet": "    public Complex multiply(Complex rhs) {\n        if (isNaN() || rhs.isNaN()) {\n            return NaN;\n        }\n        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {\n            // we don't use Complex.isInfinite() to avoid testing for NaN again\n            return INF;\n        }\n        return createComplex(real * rhs.real - imaginary * rhs.imaginary,\n                real * rhs.imaginary + imaginary * rhs.real);\n    }\n",
        "begin_line": 354,
        "end_line": 365,
        "comment": "\n     * Return the product of this complex number and the given complex number.\n     * <p>\n     * Implements preliminary checks for NaN and infinity followed by\n     * the definitional formula:\n     * <pre><code>\n     * (a + bi)(c + di) = (ac - bd) + (ad + bc)i\n     * </code></pre>\n     * </p>\n     * <p>\n     * Returns {@link #NaN} if either this or <code>rhs</code> has one or more\n     * NaN parts.\n     * </p>\n     * Returns {@link #INF} if neither this nor <code>rhs</code> has one or more\n     * NaN parts and if either this or <code>rhs</code> has one or more\n     * infinite parts (same result is returned regardless of the sign of the\n     * components).\n     * </p>\n     * <p>\n     * Returns finite values in components of the result per the\n     * definitional formula in all remaining cases.\n     *  </p>\n     * \n     * @param rhs the other complex number\n     * @return the complex number product\n     * @throws NullPointerException if <code>rhs</code> is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.equals#245",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object other) {\n        boolean ret;\n        \n        if (this == other) { \n            ret = true;\n        } else if (other == null) {\n            ret = false;\n        } else  {\n            try {\n                Complex rhs = (Complex)other;\n                if (rhs.isNaN()) {\n                    ret = this.isNaN();\n                } else {\n                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                }\n            } catch (ClassCastException ex) {\n                // ignore exception\n                ret = false;\n            }\n        }\n      \n        return ret;\n    }\n",
        "begin_line": 245,
        "end_line": 267,
        "comment": "\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the two\n     * Complex objects are considered to be equal.</p>\n     * <p>\n     * All <code>NaN</code> values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to <code>Double.NaN</code>, the complex number is equal to \n     * <code>Complex.NaN</code>.</p>\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if\n     *         object is null, not an instance of Complex, or\n     *         not equal to this Complex instance\n     * \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.createComplex#871",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.createComplex(double, double)",
        "snippet": "    protected Complex createComplex(double real, double imaginary) {\n        return new Complex(real, imaginary);\n    }\n",
        "begin_line": 871,
        "end_line": 873,
        "comment": "\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real the real part\n     * @param imaginary the imaginary part\n     * @return a new complex number instance\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.isNaN#309",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.isNaN()",
        "snippet": "    public boolean isNaN() {\n        return Double.isNaN(real) || Double.isNaN(imaginary);        \n    }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": "\n     * Returns true if either or both parts of this complex number is NaN;\n     * false otherwise\n     *\n     * @return  true if either or both parts of this complex number is NaN;\n     * false otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.getReal#298",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.getReal()",
        "snippet": "    public double getReal() {\n        return real;\n    }\n",
        "begin_line": 298,
        "end_line": 300,
        "comment": "\n     * Access the real part.\n     *\n     * @return the real part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.Complex#75",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.Complex(double, double)",
        "snippet": "    public Complex(double real, double imaginary) {\n        super();\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n",
        "begin_line": 75,
        "end_line": 79,
        "comment": "\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real the real part\n     * @param imaginary the imaginary part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0819
        },
        "num_failing_tests": 1
    }
]