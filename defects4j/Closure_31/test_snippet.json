[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    externs = DEFAULT_EXTERNS;\n    filenames = Maps.newHashMap();\n    lastCompiler = null;\n    lastArg = null;\n    outReader = new ByteArrayOutputStream();\n    errReader = new ByteArrayOutputStream();\n    useStringComparison = false;\n    useModules = ModulePattern.NONE;\n    args.clear();\n    exitCodes = Lists.newArrayList();\n  }\n",
        "begin_line": 107,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 18)",
            "(line 110,col 5)-(line 110,col 30)",
            "(line 111,col 5)-(line 111,col 34)",
            "(line 112,col 5)-(line 112,col 24)",
            "(line 113,col 5)-(line 113,col 19)",
            "(line 114,col 5)-(line 114,col 44)",
            "(line 115,col 5)-(line 115,col 44)",
            "(line 116,col 5)-(line 116,col 32)",
            "(line 117,col 5)-(line 117,col 36)",
            "(line 118,col 5)-(line 118,col 17)",
            "(line 119,col 5)-(line 119,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering1()",
        "snippet": "  public void testWarningGuardOrdering1() {\n    args.add(\"--jscomp_error=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 127,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 42)",
            "(line 129,col 5)-(line 129,col 40)",
            "(line 130,col 5)-(line 130,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering2()",
        "snippet": "  public void testWarningGuardOrdering2() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 40)",
            "(line 135,col 5)-(line 135,col 42)",
            "(line 136,col 5)-(line 136,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering3()",
        "snippet": "  public void testWarningGuardOrdering3() {\n    args.add(\"--jscomp_warning=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 44)",
            "(line 141,col 5)-(line 141,col 40)",
            "(line 142,col 5)-(line 142,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering4()",
        "snippet": "  public void testWarningGuardOrdering4() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_warning=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 40)",
            "(line 147,col 5)-(line 147,col 44)",
            "(line 148,col 5)-(line 148,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOffByDefault()",
        "snippet": "  public void testCheckGlobalThisOffByDefault() {\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 152,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithAdvancedMode()",
        "snippet": "  public void testCheckGlobalThisOnWithAdvancedMode() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 59)",
            "(line 157,col 5)-(line 157,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithErrorFlag()",
        "snippet": "  public void testCheckGlobalThisOnWithErrorFlag() {\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 161,col 42)",
            "(line 162,col 5)-(line 162,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 165,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 40)",
            "(line 167,col 5)-(line 167,col 40)",
            "(line 168,col 5)-(line 168,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 173,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\",\n        \"function a() {}\" +\n        \"a.prototype.a = function(e, d) { alert(d); };\" +\n        \"var b = goog.c.b(a, {a: 1}),c;\" +\n        \"for (c in b) { b[c].call(b); }\" +\n        \"window.Foo = a;\");\n  }\n",
        "begin_line": 176,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 177,col 5)-(line 177,col 59)",
            "(line 178,col 5)-(line 189,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 40)",
            "(line 194,col 5)-(line 194,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOffByDefault()",
        "snippet": "  public void testTypeParsingOffByDefault() {\n    testSame(\"/** @return {number */ function f(a) { return a; }\");\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOnWithVerbose()",
        "snippet": "  public void testTypeParsingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n    test(\"/** @return {n} */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 201,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 40)",
            "(line 203,col 5)-(line 204,col 46)",
            "(line 205,col 5)-(line 206,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 209,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 40)",
            "(line 211,col 5)-(line 211,col 40)",
            "(line 212,col 5)-(line 212,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 215,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 40)",
            "(line 217,col 5)-(line 217,col 62)",
            "(line 219,col 5)-(line 219,col 44)",
            "(line 220,col 5)-(line 221,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 224,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 40)",
            "(line 226,col 5)-(line 226,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 229,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 230,col 40)",
            "(line 231,col 5)-(line 231,col 49)",
            "(line 232,col 5)-(line 232,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 235,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 40)",
            "(line 237,col 5)-(line 237,col 43)",
            "(line 238,col 5)-(line 238,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForQuiet()",
        "snippet": "  public void testCheckSymbolsOverrideForQuiet() {\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--jscomp_error=undefinedVars\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 38)",
            "(line 243,col 5)-(line 243,col 45)",
            "(line 244,col 5)-(line 244,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties1()",
        "snippet": "  public void testCheckUndefinedProperties1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 247,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 40)",
            "(line 249,col 5)-(line 249,col 49)",
            "(line 250,col 5)-(line 250,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties2()",
        "snippet": "  public void testCheckUndefinedProperties2() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 253,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 40)",
            "(line 255,col 5)-(line 255,col 47)",
            "(line 256,col 5)-(line 256,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties3()",
        "snippet": "  public void testCheckUndefinedProperties3() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() {var x = {}; var y = x.bar;}\",\n        TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 259,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 40)",
            "(line 261,col 5)-(line 262,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function f(a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 266,col 68)",
            "(line 267,col 5)-(line 267,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n  }\n",
        "begin_line": 270,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 29)",
            "(line 272,col 5)-(line 272,col 35)",
            "(line 273,col 5)-(line 273,col 20)",
            "(line 273,col 22)-(line 273,col 37)",
            "(line 274,col 5)-(line 274,col 19)",
            "(line 274,col 21)-(line 274,col 36)",
            "(line 275,col 5)-(line 279,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag2()",
        "snippet": "  public void testDefineFlag2() {\n    args.add(\"--define=FOO='x\\\"'\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x\\\\\\\"\\\";\");\n  }\n",
        "begin_line": 282,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 283,col 35)",
            "(line 284,col 5)-(line 285,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3()",
        "snippet": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }\n",
        "begin_line": 288,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 289,col 36)",
            "(line 290,col 5)-(line 291,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 295,col 30)",
            "(line 296,col 5)-(line 296,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 299,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 60)",
            "(line 301,col 5)-(line 302,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @const \\n * @const */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @const \\n * @const */ var x;\");\n  }\n",
        "begin_line": 305,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 40)",
            "(line 307,col 5)-(line 308,col 41)",
            "(line 309,col 5)-(line 309,col 38)",
            "(line 310,col 5)-(line 310,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {dom:{}};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 313,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 314,col 5)-(line 315,col 33)",
            "(line 316,col 5)-(line 316,col 51)",
            "(line 317,col 5)-(line 317,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGetMsgWiring()",
        "snippet": "  public void testGetMsgWiring() throws Exception {\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\",\n         \"var goog={getMsg:function(a){return a}}, \" +\n         \"MSG_FOO=goog.getMsg('foo');\");\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\" +\n         \"window['foo'] = MSG_FOO;\",\n         \"window.foo = 'foo';\");\n  }\n",
        "begin_line": 320,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 321,col 5)-(line 324,col 40)",
            "(line 325,col 5)-(line 325,col 59)",
            "(line 326,col 5)-(line 329,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCssNameWiring()",
        "snippet": "  public void testCssNameWiring() throws Exception {\n    test(\"var goog = {}; goog.getCssName = function() {};\" +\n         \"goog.setCssNameMapping = function() {};\" +\n         \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n         \"var a = goog.getCssName('goog-button');\" +\n         \"var b = goog.getCssName('css-button');\" +\n         \"var c = goog.getCssName('goog-menu');\" +\n         \"var d = goog.getCssName('css-menu');\",\n         \"var goog = { getCssName: function() {},\" +\n         \"             setCssNameMapping: function() {} },\" +\n         \"    a = 'a-b',\" +\n         \"    b = 'css-b',\" +\n         \"    c = 'a-menu',\" +\n         \"    d = 'css-menu';\");\n  }\n",
        "begin_line": 332,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 345,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70a()",
        "snippet": "  public void testIssue70a() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 352,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 353,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70b()",
        "snippet": "  public void testIssue70b() {\n    test(\"function foo([]) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 356,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 357,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 360,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 361,col 59)",
            "(line 362,col 5)-(line 362,col 31)",
            "(line 363,col 5)-(line 364,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--jscomp_off=es5Strict\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 367,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 368,col 57)",
            "(line 369,col 5)-(line 369,col 39)",
            "(line 370,col 5)-(line 370,col 40)",
            "(line 371,col 5)-(line 378,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue297()",
        "snippet": "  public void testIssue297() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n         \"}\",\n         \"function f(b) {\" +\n         \" var a;\" +\n         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && 0<a);\" +\n         \"}\");\n  }\n",
        "begin_line": 381,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 57)",
            "(line 383,col 5)-(line 390,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"element.offsetWidth;\",\n         \"element.offsetWidth\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 393,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 59)",
            "(line 395,col 5)-(line 396,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504()",
        "snippet": "  public void testIssue504() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"void function() { alert('hi'); }();\",\n         \"alert('hi');void 0\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 399,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 59)",
            "(line 401,col 5)-(line 402,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601()",
        "snippet": "  public void testIssue601() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"function f(){return'\\\\v'=='v'}window['f']=f\");\n  }\n",
        "begin_line": 405,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 406,col 5)-(line 406,col 52)",
            "(line 407,col 5)-(line 408,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601b()",
        "snippet": "  public void testIssue601b() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\v'=='v'}\");\n  }\n",
        "begin_line": 411,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 412,col 5)-(line 412,col 59)",
            "(line 413,col 5)-(line 414,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601c()",
        "snippet": "  public void testIssue601c() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\u000B' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\u000B'=='v'}\");\n  }\n",
        "begin_line": 417,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 59)",
            "(line 419,col 5)-(line 420,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    test(\"function foo(a) {}\",\n         \"function foo() {}\");\n  }\n",
        "begin_line": 423,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 424,col 57)",
            "(line 425,col 5)-(line 425,col 30)",
            "(line 426,col 5)-(line 427,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 430,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 431,col 57)",
            "(line 432,col 5)-(line 432,col 29)",
            "(line 433,col 5)-(line 434,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {}\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"throw (new function() {}).a;\");\n  }\n",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 438,col 5)-(line 438,col 59)",
            "(line 439,col 5)-(line 439,col 38)",
            "(line 440,col 5)-(line 440,col 30)",
            "(line 441,col 5)-(line 444,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {}\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"throw (new function Foo() {}).$x$;\");\n  }\n",
        "begin_line": 447,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 448,col 59)",
            "(line 449,col 5)-(line 449,col 38)",
            "(line 450,col 5)-(line 450,col 29)",
            "(line 451,col 5)-(line 454,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag1()",
        "snippet": "  public void testBooleanFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 457,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 57)",
            "(line 459,col 5)-(line 459,col 24)",
            "(line 460,col 5)-(line 461,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag2()",
        "snippet": "  public void testBooleanFlag2() {\n    args.add(\"--debug\");\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 464,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 24)",
            "(line 466,col 5)-(line 466,col 57)",
            "(line 467,col 5)-(line 468,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHelpFlag()",
        "snippet": "  public void testHelpFlag() {\n    args.add(\"--help\");\n    assertFalse(\n        createCommandLineRunner(\n            new String[] {\"function f() {}\"}).shouldRunCompiler());\n  }\n",
        "begin_line": 471,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 472,col 5)-(line 472,col 23)",
            "(line 473,col 5)-(line 475,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting1()",
        "snippet": "  public void testExternsLifting1() throws Exception{\n    String code = \"/** @externs */ function f() {}\";\n    test(new String[] {code},\n         new String[] {});\n\n    assertEquals(2, lastCompiler.getExternsForTesting().size());\n\n    CompilerInput extern = lastCompiler.getExternsForTesting().get(1);\n    assertNull(extern.getModule());\n    assertTrue(extern.isExtern());\n    assertEquals(code, extern.getCode());\n\n    assertEquals(1, lastCompiler.getInputsForTesting().size());\n\n    CompilerInput input = lastCompiler.getInputsForTesting().get(0);\n    assertNotNull(input.getModule());\n    assertFalse(input.isExtern());\n    assertEquals(\"\", input.getCode());\n  }\n",
        "begin_line": 478,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 479,col 5)-(line 479,col 52)",
            "(line 480,col 5)-(line 481,col 26)",
            "(line 483,col 5)-(line 483,col 64)",
            "(line 485,col 5)-(line 485,col 70)",
            "(line 486,col 5)-(line 486,col 35)",
            "(line 487,col 5)-(line 487,col 34)",
            "(line 488,col 5)-(line 488,col 41)",
            "(line 490,col 5)-(line 490,col 63)",
            "(line 492,col 5)-(line 492,col 68)",
            "(line 493,col 5)-(line 493,col 37)",
            "(line 494,col 5)-(line 494,col 34)",
            "(line 495,col 5)-(line 495,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting2()",
        "snippet": "  public void testExternsLifting2() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\"/** @externs */ function f() {}\", \"f(3);\"},\n         new String[] {\"f(3);\"},\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 498,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 40)",
            "(line 500,col 5)-(line 502,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOff()",
        "snippet": "  public void testSourceSortingOff() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    testSame(\n        new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n        });\n  }\n",
        "begin_line": 505,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 52)",
            "(line 507,col 5)-(line 511,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn()",
        "snippet": "  public void testSourceSortingOn() {\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 514,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 522,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps1()",
        "snippet": "  public void testSourceSortingCircularDeps1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 525,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 526,col 5)-(line 526,col 51)",
            "(line 527,col 5)-(line 532,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps2()",
        "snippet": "  public void testSourceSortingCircularDeps2() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('roses.lime.juice');\",\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\",\n          \"goog.provide('gimlet');\" +\n          \"     goog.require('gin'); goog.require('roses.lime.juice');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 535,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 536,col 51)",
            "(line 537,col 5)-(line 545,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn1()",
        "snippet": "  public void testSourcePruningOn1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 548,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 51)",
            "(line 550,col 5)-(line 558,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn2()",
        "snippet": "  public void testSourcePruningOn2() {\n    args.add(\"--closure_entry_point=guinness\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var guinness = {};\"\n         });\n  }\n",
        "begin_line": 561,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 562,col 5)-(line 562,col 47)",
            "(line 563,col 5)-(line 571,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn3()",
        "snippet": "  public void testSourcePruningOn3() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 574,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 575,col 45)",
            "(line 576,col 5)-(line 583,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn4()",
        "snippet": "  public void testSourcePruningOn4() {\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 586,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 45)",
            "(line 588,col 5)-(line 588,col 43)",
            "(line 589,col 5)-(line 597,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn5()",
        "snippet": "  public void testSourcePruningOn5() {\n    args.add(\"--closure_entry_point=shiraz\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         Compiler.MISSING_ENTRY_ERROR);\n  }\n",
        "begin_line": 600,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 601,col 45)",
            "(line 602,col 5)-(line 607,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn6()",
        "snippet": "  public void testSourcePruningOn6() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 610,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 611,col 5)-(line 611,col 45)",
            "(line 612,col 5)-(line 621,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDependencySortingWhitespaceMode()",
        "snippet": "  public void testDependencySortingWhitespaceMode() {\n    args.add(\"--manage_closure_dependencies\");\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.provide('hops');\",\n         },\n         new String[] {\n          \"goog.provide('hops');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.require('beer');\"\n         });\n  }\n",
        "begin_line": 624,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 625,col 5)-(line 625,col 46)",
            "(line 626,col 5)-(line 626,col 52)",
            "(line 627,col 5)-(line 636,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testForwardDeclareDroppedTypes()",
        "snippet": "  public void testForwardDeclareDroppedTypes() {\n    args.add(\"--manage_closure_dependencies=true\");\n\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\",\n          \"goog.provide('Scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         });\n\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         },\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 639,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 640,col 51)",
            "(line 642,col 5)-(line 642,col 40)",
            "(line 643,col 5)-(line 651,col 12)",
            "(line 653,col 5)-(line 661,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesEmptyEntryPoints()",
        "snippet": "  public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception {\n    // Prevents this from trying to load externs.zip\n    args.add(\"--use_only_custom_externs=true\");\n\n    args.add(\"--only_closure_dependencies=true\");\n    try {\n      CommandLineRunner runner = createCommandLineRunner(new String[0]);\n      runner.doRun();\n      fail(\"Expected FlagUsageException\");\n    } catch (FlagUsageException e) {\n      assertTrue(e.getMessage(),\n          e.getMessage().contains(\"only_closure_dependencies\"));\n    }\n  }\n",
        "begin_line": 664,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 47)",
            "(line 668,col 5)-(line 668,col 49)",
            "(line 669,col 5)-(line 676,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesOneEntryPoint()",
        "snippet": "  public void testOnlyClosureDependenciesOneEntryPoint() throws Exception {\n    args.add(\"--only_closure_dependencies=true\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.require('beer'); var beerRequired = 1;\",\n          \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n          \"goog.provide('hops'); var hopsProvided = 1;\",\n          \"goog.provide('scotch'); var scotchProvided = 1;\",\n          \"var includeFileWithoutProvides = 1;\"\n         },\n         new String[] {\n           \"var hops = {}, hopsProvided = 1;\",\n           \"var beer = {}, beerProvided = 1;\"\n         });\n  }\n",
        "begin_line": 679,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 680,col 49)",
            "(line 681,col 5)-(line 681,col 43)",
            "(line 682,col 5)-(line 692,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion1()",
        "snippet": "  public void testSourceMapExpansion1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--create_source_map=%outname%.map\");\n    testSame(\"var x = 3;\");\n    assertEquals(\"/path/to/out.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 695,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 696,col 33)",
            "(line 697,col 5)-(line 697,col 32)",
            "(line 698,col 5)-(line 698,col 50)",
            "(line 699,col 5)-(line 699,col 27)",
            "(line 700,col 5)-(line 702,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion2()",
        "snippet": "  public void testSourceMapExpansion2() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 705,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 706,col 5)-(line 706,col 37)",
            "(line 707,col 5)-(line 707,col 50)",
            "(line 708,col 5)-(line 708,col 48)",
            "(line 709,col 5)-(line 709,col 56)",
            "(line 710,col 5)-(line 712,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion3()",
        "snippet": "  public void testSourceMapExpansion3() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo_\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo_m0.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(),\n            lastCompiler.getModuleGraph().getRootModule()));\n  }\n",
        "begin_line": 715,
        "end_line": 724,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 37)",
            "(line 717,col 5)-(line 717,col 50)",
            "(line 718,col 5)-(line 718,col 49)",
            "(line 719,col 5)-(line 719,col 56)",
            "(line 720,col 5)-(line 723,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat1()",
        "snippet": "  public void testSourceMapFormat1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.DEFAULT,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 726,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 727,col 5)-(line 727,col 33)",
            "(line 728,col 5)-(line 728,col 32)",
            "(line 729,col 5)-(line 729,col 27)",
            "(line 730,col 5)-(line 731,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat2()",
        "snippet": "  public void testSourceMapFormat2() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--source_map_format=V3\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.V3,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 734,
        "end_line": 741,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 33)",
            "(line 736,col 5)-(line 736,col 32)",
            "(line 737,col 5)-(line 737,col 39)",
            "(line 738,col 5)-(line 738,col 27)",
            "(line 739,col 5)-(line 740,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleWrapperBaseNameExpansion()",
        "snippet": "  public void testModuleWrapperBaseNameExpansion() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--module_wrapper=m0:%s // %basename%\");\n    testSame(new String[] {\n      \"var x = 3;\",\n      \"var y = 4;\"\n    });\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.writeModuleOutput(\n        builder,\n        lastCompiler.getModuleGraph().getRootModule());\n    assertEquals(\"var x=3; // m0.js\\n\", builder.toString());\n  }\n",
        "begin_line": 743,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 744,col 5)-(line 744,col 37)",
            "(line 745,col 5)-(line 745,col 53)",
            "(line 746,col 5)-(line 749,col 7)",
            "(line 751,col 5)-(line 751,col 48)",
            "(line 752,col 5)-(line 754,col 55)",
            "(line 755,col 5)-(line 755,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion()",
        "snippet": "  public void testCharSetExpansion() {\n    testSame(\"\");\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n  }\n",
        "begin_line": 758,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 759,col 5)-(line 759,col 17)",
            "(line 760,col 5)-(line 760,col 70)",
            "(line 761,col 5)-(line 761,col 32)",
            "(line 762,col 5)-(line 762,col 17)",
            "(line 763,col 5)-(line 763,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testChainModuleManifest()",
        "snippet": "  public void testChainModuleManifest() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m1}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m2}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 766,
        "end_line": 787,
        "comment": "",
        "child_ranges": [
            "(line 767,col 5)-(line 767,col 37)",
            "(line 768,col 5)-(line 769,col 67)",
            "(line 771,col 5)-(line 771,col 48)",
            "(line 772,col 5)-(line 773,col 54)",
            "(line 774,col 5)-(line 786,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testStarModuleManifest()",
        "snippet": "  public void testStarModuleManifest() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m0}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m0}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 789,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 790,col 36)",
            "(line 791,col 5)-(line 792,col 67)",
            "(line 794,col 5)-(line 794,col 48)",
            "(line 795,col 5)-(line 796,col 54)",
            "(line 797,col 5)-(line 809,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag()",
        "snippet": "  public void testVersionFlag() {\n    args.add(\"--version\");\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 812,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 813,col 5)-(line 813,col 26)",
            "(line 814,col 5)-(line 814,col 17)",
            "(line 815,col 5)-(line 819,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag2()",
        "snippet": "  public void testVersionFlag2() {\n    lastArg = \"--version\";\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 822,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 823,col 5)-(line 823,col 26)",
            "(line 824,col 5)-(line 824,col 17)",
            "(line 825,col 5)-(line 829,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testPrintAstFlag()",
        "snippet": "  public void testPrintAstFlag() {\n    args.add(\"--print_ast=true\");\n    testSame(\"\");\n    assertEquals(\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node1 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> RETURN [label=\\\"SYN_BLOCK\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\\n\",\n        new String(outReader.toByteArray()));\n  }\n",
        "begin_line": 832,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 833,col 5)-(line 833,col 33)",
            "(line 834,col 5)-(line 834,col 17)",
            "(line 835,col 5)-(line 848,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSyntheticExterns()",
        "snippet": "  public void testSyntheticExterns() {\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"myVar.property;\"));\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         \"var theirVar={},myVar={},yourVar={};\");\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var myVar = {};\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 851,
        "end_line": 866,
        "comment": "",
        "child_ranges": [
            "(line 852,col 5)-(line 853,col 59)",
            "(line 854,col 5)-(line 855,col 46)",
            "(line 857,col 5)-(line 857,col 47)",
            "(line 858,col 5)-(line 858,col 40)",
            "(line 859,col 5)-(line 860,col 49)",
            "(line 862,col 5)-(line 862,col 47)",
            "(line 863,col 5)-(line 863,col 40)",
            "(line 864,col 5)-(line 865,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGoogAssertStripping()",
        "snippet": "  public void testGoogAssertStripping() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"goog.asserts.assert(false)\",\n         \"\");\n    args.add(\"--debug\");\n    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n  }\n",
        "begin_line": 868,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 869,col 5)-(line 869,col 59)",
            "(line 870,col 5)-(line 871,col 13)",
            "(line 872,col 5)-(line 872,col 24)",
            "(line 873,col 5)-(line 873,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testMissingReturnCheckOnWithVerbose()",
        "snippet": "  public void testMissingReturnCheckOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number} */ function f() {f()} f();\",\n        CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 876,
        "end_line": 880,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 877,col 40)",
            "(line 878,col 5)-(line 879,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGenerateExports()",
        "snippet": "  public void testGenerateExports() {\n    args.add(\"--generate_exports=true\");\n    test(\"/** @export */ foo.prototype.x = function() {};\",\n        \"foo.prototype.x=function(){};\"+\n        \"goog.exportSymbol(\\\"foo.prototype.x\\\",foo.prototype.x);\");\n  }\n",
        "begin_line": 882,
        "end_line": 887,
        "comment": "",
        "child_ranges": [
            "(line 883,col 5)-(line 883,col 40)",
            "(line 884,col 5)-(line 886,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDepreciationWithVerbose()",
        "snippet": "  public void testDepreciationWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @deprecated */ function f() {}; f()\",\n       CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 889,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 890,col 5)-(line 890,col 40)",
            "(line 891,col 5)-(line 892,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTwoParseErrors()",
        "snippet": "  public void testTwoParseErrors() {\n    // If parse errors are reported in different files, make\n    // sure all of them are reported.\n    Compiler compiler = compile(new String[] {\n      \"var a b;\",\n      \"var b c;\"\n    });\n    assertEquals(2, compiler.getErrors().length);\n  }\n",
        "begin_line": 895,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 901,col 7)",
            "(line 902,col 5)-(line 902,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES3ByDefault()",
        "snippet": "  public void testES3ByDefault() {\n    test(\"var x = f.function\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 905,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 906,col 5)-(line 906,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5()",
        "snippet": "  public void testES5() {\n    args.add(\"--language_in=ECMASCRIPT5\");\n    test(\"var x = f.function\", \"var x = f.function\");\n    test(\"var let\", \"var let\");\n  }\n",
        "begin_line": 909,
        "end_line": 913,
        "comment": "",
        "child_ranges": [
            "(line 910,col 5)-(line 910,col 42)",
            "(line 911,col 5)-(line 911,col 53)",
            "(line 912,col 5)-(line 912,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5Strict()",
        "snippet": "  public void testES5Strict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    test(\"var x = f.function\", \"'use strict';var x = f.function\");\n    test(\"var let\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 915,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 916,col 5)-(line 916,col 49)",
            "(line 917,col 5)-(line 917,col 66)",
            "(line 918,col 5)-(line 918,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrict()",
        "snippet": "  public void testES5StrictUseStrict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n  }\n",
        "begin_line": 921,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 922,col 5)-(line 922,col 49)",
            "(line 923,col 5)-(line 923,col 69)",
            "(line 924,col 5)-(line 924,col 46)",
            "(line 925,col 5)-(line 925,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrictMultipleInputs()",
        "snippet": "  public void testES5StrictUseStrictMultipleInputs() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\",\n        \"var y = f.function\", \"var z = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n    assertEquals(outputSource.substring(13).indexOf(\"'use strict'\"), -1);\n  }\n",
        "begin_line": 928,
        "end_line": 935,
        "comment": "",
        "child_ranges": [
            "(line 929,col 5)-(line 929,col 49)",
            "(line 930,col 5)-(line 931,col 53)",
            "(line 932,col 5)-(line 932,col 46)",
            "(line 933,col 5)-(line 933,col 64)",
            "(line 934,col 5)-(line 934,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordDefault()",
        "snippet": "  public void testWithKeywordDefault() {\n    test(\"var x = {}; with (x) {}\", ControlStructureCheck.USE_OF_WITH);\n  }\n",
        "begin_line": 937,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 938,col 5)-(line 938,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordWithEs5ChecksOff()",
        "snippet": "  public void testWithKeywordWithEs5ChecksOff() {\n    args.add(\"--jscomp_off=es5Strict\");\n    testSame(\"var x = {}; with (x) {}\");\n  }\n",
        "begin_line": 941,
        "end_line": 944,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 39)",
            "(line 943,col 5)-(line 943,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoSrCFilesWithManifest()",
        "snippet": "  public void testNoSrCFilesWithManifest() throws IOException {\n    args.add(\"--use_only_custom_externs=true\");\n    args.add(\"--output_manifest=test.MF\");\n    CommandLineRunner runner = createCommandLineRunner(new String[0]);\n    String expectedMessage = \"\";\n    try {\n      runner.doRun();\n    } catch (FlagUsageException e) {\n      expectedMessage = e.getMessage();\n    }\n    assertEquals(expectedMessage, \"Bad --js flag. \" +\n      \"Manifest files cannot be generated when the input is from stdin.\");\n  }\n",
        "begin_line": 946,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 947,col 5)-(line 947,col 47)",
            "(line 948,col 5)-(line 948,col 42)",
            "(line 949,col 5)-(line 949,col 70)",
            "(line 950,col 5)-(line 950,col 32)",
            "(line 951,col 5)-(line 955,col 5)",
            "(line 956,col 5)-(line 957,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMD()",
        "snippet": "  public void testTransformAMD() {\n    args.add(\"--transform_amd_modules\");\n    test(\"define({test: 1})\", \"exports = {test: 1}\");\n  }\n",
        "begin_line": 960,
        "end_line": 963,
        "comment": "",
        "child_ranges": [
            "(line 961,col 5)-(line 961,col 40)",
            "(line 962,col 5)-(line 962,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS()",
        "snippet": "  public void testProcessCJS() {\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"exports.test = 1\",\n        \"var module$foo$bar={test:1}; \" +\n        \"module$foo$bar.module$exports && \" +\n        \"(module$foo$bar=module$foo$bar.module$exports)\");\n  }\n",
        "begin_line": 965,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 966,col 5)-(line 966,col 44)",
            "(line 967,col 5)-(line 967,col 49)",
            "(line 968,col 5)-(line 968,col 33)",
            "(line 969,col 5)-(line 972,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS()",
        "snippet": "  public void testTransformAMDAndProcessCJS() {\n    args.add(\"--transform_amd_modules\");\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"define({foo: 1})\",\n        \"var module$foo$bar={}, module$foo$bar={foo:1}; \" +\n        \"module$foo$bar.module$exports && \" +\n        \"(module$foo$bar=module$foo$bar.module$exports)\");\n  }\n",
        "begin_line": 975,
        "end_line": 984,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 976,col 40)",
            "(line 977,col 5)-(line 977,col 44)",
            "(line 978,col 5)-(line 978,col 49)",
            "(line 979,col 5)-(line 979,col 33)",
            "(line 980,col 5)-(line 983,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 992,
        "end_line": 994,
        "comment": "",
        "child_ranges": [
            "(line 993,col 5)-(line 993,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 996,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 997,col 5)-(line 997,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    test(original, compiled, null);\n  }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1005,col 5)-(line 1005,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, String[] compiled,\n                    DiagnosticType warning) {\n    Compiler compiler = compile(original);\n\n    if (warning == null) {\n      assertEquals(\"Expected no warnings or errors\\n\" +\n          \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n          \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          0, compiler.getErrors().length + compiler.getWarnings().length);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 1014,
        "end_line": 1038,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   * If {@code warning} is non-null, we will also check if the given\n   * warning type was emitted.\n   ",
        "child_ranges": [
            "(line 1016,col 5)-(line 1016,col 42)",
            "(line 1018,col 5)-(line 1026,col 5)",
            "(line 1028,col 5)-(line 1028,col 50)",
            "(line 1029,col 5)-(line 1037,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 1043,
        "end_line": 1045,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1044,col 5)-(line 1044,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, String expected, DiagnosticType warning) {\n    test(new String[] { original }, new String[] { expected }, warning);\n  }\n",
        "begin_line": 1047,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 5)-(line 1048,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n\n    assertTrue(exitCodes.size() > 0);\n    int lastExitCode = exitCodes.get(exitCodes.size() - 1);\n\n    if (compiler.getErrors().length > 0) {\n      assertEquals(1, compiler.getErrors().length);\n      assertEquals(warning, compiler.getErrors()[0].getType());\n      assertEquals(1, lastExitCode);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n      assertEquals(0, lastExitCode);\n    }\n  }\n",
        "begin_line": 1054,
        "end_line": 1073,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1055,col 5)-(line 1055,col 42)",
            "(line 1056,col 5)-(line 1059,col 72)",
            "(line 1061,col 5)-(line 1061,col 37)",
            "(line 1062,col 5)-(line 1062,col 59)",
            "(line 1064,col 5)-(line 1072,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.createCommandLineRunner(java.lang.String[])",
        "snippet": "  private CommandLineRunner createCommandLineRunner(String[] original) {\n    for (int i = 0; i < original.length; i++) {\n      args.add(\"--js\");\n      args.add(\"/path/to/input\" + i + \".js\");\n      if (useModules == ModulePattern.CHAIN) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? (\":m\" + (i - 1)) : \"\"));\n      } else if (useModules == ModulePattern.STAR) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? \":m0\" : \"\"));\n      }\n    }\n\n    if (lastArg != null) {\n      args.add(lastArg);\n    }\n\n    String[] argStrings = args.toArray(new String[] {});\n    return new CommandLineRunner(\n        argStrings,\n        new PrintStream(outReader),\n        new PrintStream(errReader));\n  }\n",
        "begin_line": 1075,
        "end_line": 1097,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 5)-(line 1086,col 5)",
            "(line 1088,col 5)-(line 1090,col 5)",
            "(line 1092,col 5)-(line 1092,col 56)",
            "(line 1093,col 5)-(line 1096,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CommandLineRunner runner = createCommandLineRunner(original);\n    assertTrue(runner.shouldRunCompiler());\n    Supplier<List<SourceFile>> inputsSupplier = null;\n    Supplier<List<JSModule>> modulesSupplier = null;\n\n    if (useModules == ModulePattern.NONE) {\n      List<SourceFile> inputs = Lists.newArrayList();\n      for (int i = 0; i < original.length; i++) {\n        inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n      }\n      inputsSupplier = Suppliers.ofInstance(inputs);\n    } else if (useModules == ModulePattern.STAR) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleStar(original)));\n    } else if (useModules == ModulePattern.CHAIN) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleChain(original)));\n    } else {\n      throw new IllegalArgumentException(\"Unknown module type: \" + useModules);\n    }\n\n    runner.enableTestMode(\n        Suppliers.<List<SourceFile>>ofInstance(externs),\n        inputsSupplier,\n        modulesSupplier,\n        new Function<Integer, Boolean>() {\n          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n        });\n    runner.run();\n    lastCompiler = runner.getCompiler();\n    lastCommandLineRunner = runner;\n    return lastCompiler;\n  }\n",
        "begin_line": 1099,
        "end_line": 1137,
        "comment": "",
        "child_ranges": [
            "(line 1100,col 5)-(line 1100,col 65)",
            "(line 1101,col 5)-(line 1101,col 43)",
            "(line 1102,col 5)-(line 1102,col 53)",
            "(line 1103,col 5)-(line 1103,col 52)",
            "(line 1105,col 5)-(line 1121,col 5)",
            "(line 1123,col 5)-(line 1132,col 11)",
            "(line 1133,col 5)-(line 1133,col 17)",
            "(line 1134,col 5)-(line 1134,col 40)",
            "(line 1135,col 5)-(line 1135,col 35)",
            "(line 1136,col 5)-(line 1136,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.Anonymous-0e832d60-5174-417d-930b-2e4866f0e3fa.apply(java.lang.Integer)",
        "snippet": "          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n",
        "begin_line": 1128,
        "end_line": 1131,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 13)-(line 1130,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = new CommandLineRunner(argStrings);\n    Compiler compiler = runner.createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n    }\n    CompilerOptions options = new CompilerOptions();\n    // ECMASCRIPT5 is the most forgiving.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.init(externs, inputs, options);\n    Node all = compiler.parseInputs();\n    Preconditions.checkState(compiler.getErrorCount() == 0);\n    Preconditions.checkNotNull(all);\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 1139,
        "end_line": 1156,
        "comment": "",
        "child_ranges": [
            "(line 1140,col 5)-(line 1140,col 56)",
            "(line 1141,col 5)-(line 1141,col 65)",
            "(line 1142,col 5)-(line 1142,col 48)",
            "(line 1143,col 5)-(line 1143,col 51)",
            "(line 1144,col 5)-(line 1146,col 5)",
            "(line 1147,col 5)-(line 1147,col 52)",
            "(line 1149,col 5)-(line 1149,col 52)",
            "(line 1150,col 5)-(line 1150,col 44)",
            "(line 1151,col 5)-(line 1151,col 38)",
            "(line 1152,col 5)-(line 1152,col 60)",
            "(line 1153,col 5)-(line 1153,col 36)",
            "(line 1154,col 5)-(line 1154,col 32)",
            "(line 1155,col 5)-(line 1155,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setFilename(int, java.lang.String)",
        "snippet": "  private void setFilename(int i, String filename) {\n    this.filenames.put(i, filename);\n  }\n",
        "begin_line": 1158,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1159,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.getFilename(int)",
        "snippet": "  private String getFilename(int i) {\n    if (filenames.isEmpty()) {\n      return \"input\" + i;\n    }\n    return filenames.get(i);\n  }\n",
        "begin_line": 1162,
        "end_line": 1167,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 5)-(line 1165,col 5)",
            "(line 1166,col 5)-(line 1166,col 28)"
        ]
    }
]