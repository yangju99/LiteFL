[
    {
        "name": "Complex.reciprocal#299",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/complex/Complex.java",
        "class_name": "org.apache.commons.math3.complex.Complex",
        "signature": "org.apache.commons.math3.complex.Complex.reciprocal()",
        "snippet": "    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            return NaN;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            double scale = 1. / (real * q + imaginary);\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            double scale = 1. / (imaginary * q + real);\n            return createComplex(scale, -scale * q);\n        }\n    }\n",
        "begin_line": 299,
        "end_line": 321,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.FieldElement": "\n     * Returns the multiplicative inverse of {@code this} element.\n     * @return the inverse of {@code this}.\n     * @throws MathArithmeticException if {@code this} is zero\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.toString#1226",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/complex/Complex.java",
        "class_name": "org.apache.commons.math3.complex.Complex",
        "signature": "org.apache.commons.math3.complex.Complex.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"(\" + real + \", \" + imaginary + \")\";\n    }\n",
        "begin_line": 1226,
        "end_line": 1229,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.FieldElement": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.equals#338",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/complex/Complex.java",
        "class_name": "org.apache.commons.math3.complex.Complex",
        "signature": "org.apache.commons.math3.complex.Complex.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Complex){\n            Complex c = (Complex)other;\n            if (c.isNaN) {\n                return isNaN;\n            } else {\n                return (real == c.real) && (imaginary == c.imaginary);\n            }\n        }\n        return false;\n    }\n",
        "begin_line": 338,
        "end_line": 352,
        "comment": "\n     * Test for the equality of two Complex objects.\n     * If both the real and imaginary parts of two complex numbers\n     * are exactly the same, and neither is {@code Double.NaN}, the two\n     * Complex objects are considered to be equal.\n     * All {@code NaN} values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to {@code Double.NaN}, the complex number is equal to\n     * {@code NaN}.\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if object is\n     * {@code null}, not an instance of Complex, or not equal to this Complex\n     * instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.Complex#98",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/complex/Complex.java",
        "class_name": "org.apache.commons.math3.complex.Complex",
        "signature": "org.apache.commons.math3.complex.Complex.Complex(double, double)",
        "snippet": "    public Complex(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n\n        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n        isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));\n    }\n",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real Real part.\n     * @param imaginary Imaginary part.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0684
        },
        "num_failing_tests": 1
    }
]