[
    {
        "name": "FastDateParser.getParsePattern#179",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.getParsePattern()",
        "snippet": "    Pattern getParsePattern() {\n        return parsePattern;\n    }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": " Give access to generated pattern for test code",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateParser.parse#248",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.parse(java.lang.String)",
        "snippet": "    @Override\n    public Date parse(String source) throws ParseException {\n        Date date= parse(source, new ParsePosition(0));\n        if(date==null) {\n            // Add a note re supported date range\n            if (locale.equals(JAPANESE_IMPERIAL)) {\n                throw new ParseException(\n                        \"(The \" +locale + \" locale does not support dates before 1868 AD)\\n\" +\n                                \"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);\n            }\n            throw new ParseException(\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);\n        }\n        return date;\n    }\n",
        "begin_line": 248,
        "end_line": 261,
        "comment": " (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.setCalendar#730",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.NumberStrategy.setCalendar(org.apache.commons.lang3.time.FastDateParser, java.util.Calendar, java.lang.String)",
        "snippet": "        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            cal.set(field, modify(Integer.parseInt(value)));\n        }\n",
        "begin_line": 730,
        "end_line": 733,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": "\n     * Equivalent to DateFormat.parse(String). \n     * \n     * See {@link java.text.DateFormat#parse(String)} for more information. \n     * @param source A <code>String</code> whose beginning should be parsed. \n     * @return A <code>Date</code> parsed from the string\n     * @throws ParseException if the beginning of the specified string cannot be parsed.\n     "
        },
        "susp": {
            "ochiai_susp": 0.2209
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.modify#740",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.NumberStrategy.modify(int)",
        "snippet": "        public int modify(int iValue) {\n            return iValue;\n        }\n",
        "begin_line": 740,
        "end_line": 742,
        "comment": "\n         * Make any modifications to parsed integer\n         * @param iValue The parsed integer\n         * @return The modified value\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2209
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.parse#274",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.parse(java.lang.String, java.text.ParsePosition)",
        "snippet": "    @Override\n    public Date parse(String source, ParsePosition pos) {\n        int offset= pos.getIndex();\n        Matcher matcher= parsePattern.matcher(source.substring(offset));\n        if(!matcher.lookingAt()) {\n            return null;\n        }\n        // timing tests indicate getting new instance is 19% faster than cloning\n        Calendar cal= Calendar.getInstance(timeZone, locale);\n        cal.clear();\n\n        for(int i=0; i<strategies.length;) {\n            Strategy strategy= strategies[i++];\n            strategy.setCalendar(this, cal, matcher.group(i));\n        }\n        pos.setIndex(offset+matcher.end());\n        return cal.getTime();\n    }\n",
        "begin_line": 274,
        "end_line": 291,
        "comment": " (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2209
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.getStrategy#534",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.getStrategy(java.lang.String)",
        "snippet": "    private Strategy getStrategy(String formatField) {\n        switch(formatField.charAt(0)) {\n        case '\\'':\n            if(formatField.length()>2) {\n                formatField= formatField.substring(1, formatField.length()-1);\n            }\n            //$FALL-THROUGH$\n        default:\n            return new CopyQuotedStrategy(formatField);\n        case 'D':\n            return DAY_OF_YEAR_STRATEGY;\n        case 'E':\n            return DAY_OF_WEEK_STRATEGY;\n        case 'F':\n            return DAY_OF_WEEK_IN_MONTH_STRATEGY;\n        case 'G':\n            return ERA_STRATEGY;\n        case 'H':\n            return MODULO_HOUR_OF_DAY_STRATEGY;\n        case 'K':\n            return HOUR_STRATEGY;\n        case 'M':\n            return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;\n        case 'S':\n            return MILLISECOND_STRATEGY;\n        case 'W':\n            return WEEK_OF_MONTH_STRATEGY;\n        case 'Z':\n            break;\n        case 'a':\n            return AM_PM_STRATEGY;\n        case 'd':\n            return DAY_OF_MONTH_STRATEGY;\n        case 'h':\n            return MODULO_HOUR_STRATEGY;\n        case 'k':\n            return HOUR_OF_DAY_STRATEGY;\n        case 'm':\n            return MINUTE_STRATEGY;\n        case 's':\n            return SECOND_STRATEGY;\n        case 'w':\n            return WEEK_OF_YEAR_STRATEGY;\n        case 'y':\n            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\n        case 'z':\n            break;\n        }\n        TimeZoneStrategy tzs= tzsCache.get(locale);\n        if(tzs==null) {\n            tzs= new TimeZoneStrategy(locale);\n            TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);\n            if(inCache!=null) {\n                return inCache;\n            }\n        }\n        return tzs;\n    }\n",
        "begin_line": 534,
        "end_line": 591,
        "comment": "\n     * Obtain a Strategy given a field from a SimpleDateFormat pattern\n     * @param formatField A sub-sequence of the SimpleDateFormat pattern\n     * @return The Strategy that will handle parsing for the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.UnpaddedNumberField#707",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField.UnpaddedNumberField(int)",
        "snippet": "        UnpaddedNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 707,
        "end_line": 709,
        "comment": "\n         * Constructs an instance of {@code UnpadedNumberField} with the specified field.\n         *\n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.estimateLength#714",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 714,
        "end_line": 717,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.selectNumberRule#356",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }\n",
        "begin_line": 356,
        "end_line": 365,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     *\n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.parse#470",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.parse(java.lang.String)",
        "snippet": "    @Override\n    public Date parse(String source) throws ParseException {\n        return parser.parse(source);\n    }\n",
        "begin_line": 470,
        "end_line": 473,
        "comment": " (non-Javadoc)\n     * @see DateParser#parse(java.lang.String)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateParser.init#115",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.init()",
        "snippet": "    private void init() {\n        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField);\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    }\n",
        "begin_line": 115,
        "end_line": 150,
        "comment": "\n     * Initialize derived fields from defining fields.\n     * This is called from constructor and from readObject (de-serialization)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.CopyQuotedStrategy#603",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy.CopyQuotedStrategy(java.lang.String)",
        "snippet": "        CopyQuotedStrategy(String formatField) {\n            this.formatField= formatField;\n        }\n",
        "begin_line": 603,
        "end_line": 605,
        "comment": "\n         * Construct a Strategy that ensures the formatField has literal text\n         * @param formatField The literal text to match\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1342
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.addRegex#622",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy.addRegex(org.apache.commons.lang3.time.FastDateParser, java.lang.StringBuilder)",
        "snippet": "        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            escapeRegex(regex, formatField, true);\n            return false;\n        }\n",
        "begin_line": 622,
        "end_line": 626,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.1342
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.escapeRegex#303",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.escapeRegex(java.lang.StringBuilder, java.lang.String, boolean)",
        "snippet": "    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n        for(int i= 0; i<value.length(); ++i) {\n            char c= value.charAt(i);\n            switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n",
        "begin_line": 303,
        "end_line": 334,
        "comment": "\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @param unquote If true, replace two success quotes ('') with single quote (')\n     * @return The <code>StringBuilder</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1342
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.addRegex#716",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.NumberStrategy.addRegex(org.apache.commons.lang3.time.FastDateParser, java.lang.StringBuilder)",
        "snippet": "        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            if(parser.isNextNumber()) {\n                regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");\n            }\n            else {\n                regex.append(\"(\\\\p{IsNd}++)\");\n            }\n            return true;\n        }\n",
        "begin_line": 716,
        "end_line": 725,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.133
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.FastDateParser#104",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.FastDateParser(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\n        this.pattern = pattern;\n        this.timeZone = timeZone;\n        this.locale = locale;\n        init();\n    }\n",
        "begin_line": 104,
        "end_line": 109,
        "comment": "\n     * <p>Constructs a new FastDateParser.</p>\n     *\n     * @param pattern non-null {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone non-null time zone to use\n     * @param locale non-null locale\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.133
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.isNextNumber#484",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.isNextNumber()",
        "snippet": "    boolean isNextNumber() {\n        return nextStrategy!=null && nextStrategy.isNumber();\n    }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "\n     * Is the next field a number?\n     * @return true, if next field will be a number\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.133
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.TextStrategy#646",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.TextStrategy.TextStrategy(int)",
        "snippet": "        TextStrategy(int field) {\n            this.field= field;\n        }\n",
        "begin_line": 646,
        "end_line": 648,
        "comment": "\n         * Construct a Strategy that parses a Text field\n         * @param field The Calendar field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1319
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.NumberStrategy#701",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.NumberStrategy.NumberStrategy(int)",
        "snippet": "        NumberStrategy(int field) {\n             this.field= field;\n        }\n",
        "begin_line": 701,
        "end_line": 703,
        "comment": "\n         * Construct a Strategy that parses a Number field\n         * @param field The Calendar field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1319
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.StringLiteral#632",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.StringLiteral.StringLiteral(java.lang.String)",
        "snippet": "        StringLiteral(String value) {\n            mValue = value;\n        }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "\n         * Constructs a new instance of {@code StringLiteral}\n         * to hold the specified value.\n         *\n         * @param value the string literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.estimateLength#639",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.StringLiteral.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return mValue.length();\n        }\n",
        "begin_line": 639,
        "end_line": 642,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.parsePattern#167",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.parsePattern()",
        "snippet": "    protected List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n",
        "begin_line": 167,
        "end_line": 288,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.parseToken#297",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuilder buf = new StringBuilder();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 297,
        "end_line": 347,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     *\n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1043
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getInstance#164",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        return cache.getInstance(pattern, timeZone, locale);\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or {@code null}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.CharacterLiteral#599",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "\n         * Constructs a new instance of {@code CharacterLiteral}\n         * to hold the specified value.\n         *\n         * @param value the character literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.estimateLength#606",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return 1;\n        }\n",
        "begin_line": 606,
        "end_line": 609,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "FormatCache.getInstance#69",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public F getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        if (pattern == null) {\n            throw new NullPointerException(\"pattern must not be null\");\n        }\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        MultipartKey key = new MultipartKey(pattern, timeZone, locale);\n        F format = cInstanceCache.get(key);\n        if (format == null) {           \n            format = createInstance(pattern, timeZone, locale);\n            F previousValue= cInstanceCache.putIfAbsent(key, format);\n            if (previousValue != null) {\n                // another thread snuck in and did the same work\n                // we should return the instance that is in ConcurrentMap\n                format= previousValue;              \n            }\n        }\n        return format;\n    }\n",
        "begin_line": 69,
        "end_line": 91,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  the non-null time zone\n     * @param locale  the non-null locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.FastDatePrinter#136",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.FastDatePrinter(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {\n        mPattern = pattern;\n        mTimeZone = timeZone;\n        mLocale = locale;\n\n        init();\n    }\n",
        "begin_line": 136,
        "end_line": 142,
        "comment": "\n     * <p>Constructs a new FastDatePrinter.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDatePrinter.init#147",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.init()",
        "snippet": "    private void init() {\n        List<Rule> rulesList = parsePattern();\n        mRules = rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }\n",
        "begin_line": 147,
        "end_line": 157,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.createInstance#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.Anonymous-816885c9-8dfd-4ebb-b197-f2d9d73f596c.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "        @Override\n        protected FastDateFormat createInstance(String pattern, TimeZone timeZone, Locale locale) {\n            return new FastDateFormat(pattern, timeZone, locale);\n        }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.FastDateFormat#368",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        printer= new FastDatePrinter(pattern, timeZone, locale);\n        parser= new FastDateParser(pattern, timeZone, locale);\n    }\n",
        "begin_line": 368,
        "end_line": 371,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "FormatCache.MultipartKey#179",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.MultipartKey.MultipartKey(java.lang.Object...)",
        "snippet": "        public MultipartKey(Object... keys) {\n            this.keys = keys;\n        }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "\n         * Constructs an instance of <code>MultipartKey</code> to hold the specified objects.\n         * @param keys the set of objects that make up the key.  Each key may be null.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 1
    },
    {
        "name": "FormatCache.hashCode#197",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.MultipartKey.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            if(hashCode==0) {\n                int rc= 0;\n                for(Object key : keys) {\n                    if(key!=null) {\n                        rc= rc*7 + key.hashCode();\n                    }\n                }\n                hashCode= rc;\n            }\n            return hashCode;\n        }\n",
        "begin_line": 197,
        "end_line": 209,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 1
    }
]