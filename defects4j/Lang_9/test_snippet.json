[
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormat_ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormat_ParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormat_ParserTest.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    @Override\n    protected DateParser getInstance(String format, TimeZone timeZone, Locale locale) {\n        return FastDateFormat.getInstance(format, timeZone, locale);\n    }\n",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormat_ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormat_ParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD()",
        "snippet": "    public void testLocales_Long_AD() {} // Fails in super class\n",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Fails in super class",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.getInstance(java.lang.String)",
        "snippet": "    DateParser getInstance(String format) {\n        return getInstance(format, TimeZone.getDefault(), Locale.getDefault());\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.getDateInstance(int, java.util.Locale)",
        "snippet": "    private DateParser getDateInstance(int dateStyle, Locale locale) {\n        return getInstance(FormatCache.getPatternForStyle(Integer.valueOf(dateStyle), null, locale), TimeZone.getDefault(), Locale.getDefault());\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 145)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.getInstance(java.lang.String, java.util.Locale)",
        "snippet": "    private DateParser getInstance(String format, Locale locale) {\n        return getInstance(format, TimeZone.getDefault(), locale);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.getInstance(java.lang.String, java.util.TimeZone)",
        "snippet": "    private DateParser getInstance(String format, TimeZone timeZone) {\n        return getInstance(format, timeZone, Locale.getDefault());\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected DateParser getInstance(String format, TimeZone timeZone, Locale locale) {\n        return new FastDateParser(format, timeZone, locale);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Override this method in derived tests to change the construction of instances\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.test_Equality_Hash()",
        "snippet": "    @Test\n    public void test_Equality_Hash() {\n        DateParser[] parsers= {\n            getInstance(yMdHmsSZ, NEW_YORK, Locale.US),\n            getInstance(DMY_DOT, NEW_YORK, Locale.US),\n            getInstance(YMD_SLASH, NEW_YORK, Locale.US),\n            getInstance(MDY_DASH, NEW_YORK, Locale.US),\n            getInstance(MDY_SLASH, NEW_YORK, Locale.US),\n            getInstance(MDY_SLASH, REYKJAVIK, Locale.US),\n            getInstance(MDY_SLASH, REYKJAVIK, SWEDEN)\n        };\n\n        Map<DateParser,Integer> map= new HashMap<DateParser,Integer>();\n        int i= 0;\n        for(DateParser parser:parsers) {\n            map.put(parser, Integer.valueOf(i++));\n        }\n\n        i= 0;\n        for(DateParser parser:parsers) {\n            assertEquals(i++, map.get(parser).intValue());\n        }\n    }\n",
        "begin_line": 84,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 94,col 10)",
            "(line 96,col 9)-(line 96,col 71)",
            "(line 97,col 9)-(line 97,col 17)",
            "(line 98,col 9)-(line 100,col 9)",
            "(line 102,col 9)-(line 102,col 13)",
            "(line 103,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testParseZone()",
        "snippet": "    @Test\n    public void testParseZone() {}\n",
        "begin_line": 108,
        "end_line": 109,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort()",
        "snippet": "    @Test\n    public void testParseLongShort() throws ParseException {\n        Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n        cal.clear();\n        cal.set(2003, 1, 10, 15, 33, 20);\n        cal.set(Calendar.MILLISECOND, 989);\n        cal.setTimeZone(NEW_YORK);\n\n        DateParser fdf = getInstance(\"yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ\", NEW_YORK, Locale.US);\n\n        assertEquals(cal.getTime(), fdf.parse(\"2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00\"));\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n\n        Date parse = fdf.parse(\"2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00\");\n                assertEquals(cal.getTime(), parse);\n\n        fdf = getInstance(\"y G M d a E H m s S Z\", NEW_YORK, Locale.US);\n        assertEquals(cal.getTime(), fdf.parse(\"03 BC 2 10 PM Sat 15 33 20 989 -0500\"));\n\n        cal.set(Calendar.ERA, GregorianCalendar.AD);\n        assertEquals(cal.getTime(), fdf.parse(\"03 AD 2 10 PM Saturday 15 33 20 989 -0500\"));\n    }\n",
        "begin_line": 135,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 64)",
            "(line 138,col 9)-(line 138,col 20)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 34)",
            "(line 143,col 9)-(line 143,col 116)",
            "(line 145,col 9)-(line 145,col 112)",
            "(line 146,col 9)-(line 146,col 52)",
            "(line 148,col 9)-(line 148,col 98)",
            "(line 149,col 17)-(line 149,col 51)",
            "(line 151,col 9)-(line 151,col 72)",
            "(line 152,col 9)-(line 152,col 87)",
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testAmPm()",
        "snippet": "    @Test\n    public void testAmPm() throws ParseException {\n        Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n        cal.clear();\n\n        DateParser h = getInstance(\"yyyy-MM-dd hh a mm:ss\", NEW_YORK, Locale.US);\n        DateParser K = getInstance(\"yyyy-MM-dd KK a mm:ss\", NEW_YORK, Locale.US);\n        DateParser k = getInstance(\"yyyy-MM-dd kk:mm:ss\", NEW_YORK, Locale.US);\n        DateParser H = getInstance(\"yyyy-MM-dd HH:mm:ss\", NEW_YORK, Locale.US);\n\n        cal.set(2010, 7, 1, 0, 33, 20);\n        assertEquals(cal.getTime(), h.parse(\"2010-08-01 12 AM 33:20\"));\n        assertEquals(cal.getTime(), K.parse(\"2010-08-01 0 AM 33:20\"));\n        assertEquals(cal.getTime(), k.parse(\"2010-08-01 00:33:20\"));\n        assertEquals(cal.getTime(), H.parse(\"2010-08-01 00:33:20\"));\n\n        cal.set(2010, 7, 1, 3, 33, 20);\n        assertEquals(cal.getTime(), h.parse(\"2010-08-01 3 AM 33:20\"));\n        assertEquals(cal.getTime(), K.parse(\"2010-08-01 3 AM 33:20\"));\n        assertEquals(cal.getTime(), k.parse(\"2010-08-01 03:33:20\"));\n        assertEquals(cal.getTime(), H.parse(\"2010-08-01 03:33:20\"));\n\n        cal.set(2010, 7, 1, 15, 33, 20);\n        assertEquals(cal.getTime(), h.parse(\"2010-08-01 3 PM 33:20\"));\n        assertEquals(cal.getTime(), K.parse(\"2010-08-01 3 PM 33:20\"));\n        assertEquals(cal.getTime(), k.parse(\"2010-08-01 15:33:20\"));\n        assertEquals(cal.getTime(), H.parse(\"2010-08-01 15:33:20\"));\n\n        cal.set(2010, 7, 1, 12, 33, 20);\n        assertEquals(cal.getTime(), h.parse(\"2010-08-01 12 PM 33:20\"));\n        assertEquals(cal.getTime(), K.parse(\"2010-08-01 0 PM 33:20\"));\n        assertEquals(cal.getTime(), k.parse(\"2010-08-01 12:33:20\"));\n        assertEquals(cal.getTime(), H.parse(\"2010-08-01 12:33:20\"));\n    }\n",
        "begin_line": 158,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 20)",
            "(line 163,col 9)-(line 163,col 81)",
            "(line 164,col 9)-(line 164,col 81)",
            "(line 165,col 9)-(line 165,col 79)",
            "(line 166,col 9)-(line 166,col 79)",
            "(line 168,col 9)-(line 168,col 39)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 70)",
            "(line 171,col 9)-(line 171,col 68)",
            "(line 172,col 9)-(line 172,col 68)",
            "(line 174,col 9)-(line 174,col 39)",
            "(line 175,col 9)-(line 175,col 70)",
            "(line 176,col 9)-(line 176,col 70)",
            "(line 177,col 9)-(line 177,col 68)",
            "(line 178,col 9)-(line 178,col 68)",
            "(line 180,col 9)-(line 180,col 40)",
            "(line 181,col 9)-(line 181,col 70)",
            "(line 182,col 9)-(line 182,col 70)",
            "(line 183,col 9)-(line 183,col 68)",
            "(line 184,col 9)-(line 184,col 68)",
            "(line 186,col 9)-(line 186,col 40)",
            "(line 187,col 9)-(line 187,col 71)",
            "(line 188,col 9)-(line 188,col 70)",
            "(line 189,col 9)-(line 189,col 68)",
            "(line 190,col 9)-(line 190,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testParses()",
        "snippet": "    @Test\n    // Check that all Locales can parse the formats we use\n    public void testParses() throws Exception {\n        for(Locale locale : Locale.getAvailableLocales()) {\n            for(TimeZone tz : new TimeZone[]{NEW_YORK, GMT}) {\n                Calendar cal = Calendar.getInstance(tz);\n                for(int year : new int[]{2003, 1940, 1868, 1867, 0, -1940}) {\n                    // http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html\n                    if (year < 1868 && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {\n                        continue; // Japanese imperial calendar does not support eras before 1868\n                    }\n                    cal.clear();\n                    if (year < 0) {\n                        cal.set(-year, 1, 10);\n                        cal.set(Calendar.ERA, GregorianCalendar.BC);\n                    } else {\n                        cal.set(year, 1, 10);\n                    }\n                    Date in = cal.getTime();\n                    for(String format : new String[]{LONG_FORMAT, SHORT_FORMAT}) {\n                        SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n                        if (format.equals(SHORT_FORMAT)) {\n                            if (year < 1930) {\n                                sdf.set2DigitYearStart(cal.getTime());\n                            }\n                        }\n                        String fmt = sdf.format(in);\n                        try {\n                            Date out = sdf.parse(fmt);\n\n                            assertEquals(locale.toString()+\" \"+year+\" \"+ format+ \" \"+tz.getID(), in, out);\n                        } catch (ParseException pe) {\n                            System.out.println(fmt+\" \"+locale.toString()+\" \"+year+\" \"+ format+ \" \"+tz.getID());\n                            throw pe;\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 231,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD()",
        "snippet": "    @Test\n    public void testLocales_Long_AD() {}\n",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC()",
        "snippet": "    @Test\n    public void testLocales_Long_BC() throws Exception {\n        testLocales(LONG_FORMAT, true);\n    }\n",
        "begin_line": 242,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD()",
        "snippet": "    @Test\n    public void testLocales_Short_AD() {}\n",
        "begin_line": 247,
        "end_line": 248,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC()",
        "snippet": "    @Test\n    public void testLocales_Short_BC() throws Exception {\n        testLocales(SHORT_FORMAT, true);\n    }\n",
        "begin_line": 255,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD()",
        "snippet": "    @Test\n    public void testLocales_LongNoEra_AD() throws Exception {\n        testLocales(LONG_FORMAT_NOERA, false);\n    }\n",
        "begin_line": 260,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC()",
        "snippet": "    @Test\n    public void testLocales_LongNoEra_BC() throws Exception {\n        testLocales(LONG_FORMAT_NOERA, true);\n    }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD()",
        "snippet": "    @Test\n    public void testLocales_ShortNoEra_AD() throws Exception {\n        testLocales(SHORT_FORMAT_NOERA, false);\n    }\n",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC()",
        "snippet": "    @Test\n    public void testLocales_ShortNoEra_BC() throws Exception {\n        testLocales(SHORT_FORMAT_NOERA, true);\n    }\n",
        "begin_line": 275,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocales(java.lang.String, boolean)",
        "snippet": "    private void testLocales(String format, boolean eraBC) throws Exception {\n\n        Calendar cal= Calendar.getInstance(GMT);\n        cal.clear();\n        cal.set(2003, 1, 10);\n        if (eraBC) {\n            cal.set(Calendar.ERA, GregorianCalendar.BC);\n        }\n        for(Locale locale : Locale.getAvailableLocales()) {\n            // ja_JP_JP cannot handle dates before 1868 properly\n            if (eraBC && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {\n                continue;\n            }\n            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n            DateParser fdf = getInstance(format, locale);\n\n            try {\n                checkParse(locale, cal, sdf, fdf);\n            } catch(ParseException ex) {\n                Assert.fail(\"Locale \"+locale+ \" failed with \"+format+\" era \"+(eraBC?\"BC\":\"AD\")+\"\\n\" + trimMessage(ex.toString()));\n            }\n        }\n    }\n",
        "begin_line": 280,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 48)",
            "(line 283,col 9)-(line 283,col 20)",
            "(line 284,col 9)-(line 284,col 29)",
            "(line 285,col 9)-(line 287,col 9)",
            "(line 288,col 9)-(line 301,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.trimMessage(java.lang.String)",
        "snippet": "    private String trimMessage(String msg) {\n        if (msg.length() < 100) {\n            return msg;\n        }\n        int gmt = msg.indexOf(\"(GMT\");\n        if (gmt > 0) {\n            return msg.substring(0, gmt+4)+\"...)\";\n        }\n        return msg.substring(0, 100)+\"...\";\n    }\n",
        "begin_line": 304,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 307,col 9)",
            "(line 308,col 9)-(line 308,col 38)",
            "(line 309,col 9)-(line 311,col 9)",
            "(line 312,col 9)-(line 312,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.checkParse(java.util.Locale, java.util.Calendar, java.text.SimpleDateFormat, org.apache.commons.lang3.time.DateParser)",
        "snippet": "    private void checkParse(Locale locale, Calendar cal, SimpleDateFormat sdf, DateParser fdf) throws ParseException {\n        String formattedDate= sdf.format(cal.getTime());\n        Date expectedTime = sdf.parse(formattedDate);\n        Date actualTime = fdf.parse(formattedDate);\n        assertEquals(locale.toString()+\" \"+formattedDate\n                +\"\\n\",expectedTime, actualTime);\n    }\n",
        "begin_line": 315,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 56)",
            "(line 317,col 9)-(line 317,col 53)",
            "(line 318,col 9)-(line 318,col 51)",
            "(line 319,col 9)-(line 320,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testParseNumerics()",
        "snippet": "    @Test\n    public void testParseNumerics() throws ParseException {\n        Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n        cal.clear();\n        cal.set(2003, 1, 10, 15, 33, 20);\n        cal.set(Calendar.MILLISECOND, 989);\n\n        DateParser fdf = getInstance(\"yyyyMMddHHmmssSSS\", NEW_YORK, Locale.US);\n        assertEquals(cal.getTime(), fdf.parse(\"20030210153320989\"));\n    }\n",
        "begin_line": 323,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 64)",
            "(line 326,col 9)-(line 326,col 20)",
            "(line 327,col 9)-(line 327,col 41)",
            "(line 328,col 9)-(line 328,col 43)",
            "(line 330,col 9)-(line 330,col 79)",
            "(line 331,col 9)-(line 331,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testQuotes()",
        "snippet": "    @Test\n    public void testQuotes() throws ParseException {\n        Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n        cal.clear();\n        cal.set(2003, 1, 10, 15, 33, 20);\n        cal.set(Calendar.MILLISECOND, 989);\n\n        DateParser fdf = getInstance(\"''yyyyMMdd'A''B'HHmmssSSS''\", NEW_YORK, Locale.US);\n        assertEquals(cal.getTime(), fdf.parse(\"'20030210A'B153320989'\"));\n    }\n",
        "begin_line": 334,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 64)",
            "(line 337,col 9)-(line 337,col 20)",
            "(line 338,col 9)-(line 338,col 41)",
            "(line 339,col 9)-(line 339,col 43)",
            "(line 341,col 9)-(line 341,col 89)",
            "(line 342,col 9)-(line 342,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLANG_832()",
        "snippet": "    @Test\n    public void testLANG_832() throws Exception {\n        testSdfAndFdp(\"'d'd\" ,\"d3\", false); // OK\n        testSdfAndFdp(\"'d'd'\",\"d3\", true); // should fail (unterminated quote)\n    }\n",
        "begin_line": 345,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 43)",
            "(line 348,col 9)-(line 348,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLANG_831()",
        "snippet": "    @Test\n    public void testLANG_831() throws Exception {\n        testSdfAndFdp(\"M E\",\"3  Tue\", true);\n    }\n",
        "begin_line": 351,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testSdfAndFdp(java.lang.String, java.lang.String, boolean)",
        "snippet": "    private void testSdfAndFdp(String format, String date, boolean shouldFail)\n            throws Exception {\n        Date dfdp = null;\n        Date dsdf = null;\n        Throwable f = null;\n        Throwable s = null;\n\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);\n            sdf.setTimeZone(NEW_YORK);\n            dsdf = sdf.parse(date);\n            if (shouldFail) {\n                Assert.fail(\"Expected SDF failure, but got \" + dsdf + \" for [\"+format+\",\"+date+\"]\");\n            }\n        } catch (Exception e) {\n            s = e;\n            if (!shouldFail) {\n                throw e;\n            }\n//            System.out.println(\"sdf:\"+format+\"/\"+date+\"=>\"+e);\n        }\n\n        try {\n            DateParser fdp = getInstance(format, NEW_YORK, Locale.US);\n            dfdp = fdp.parse(date);\n            if (shouldFail) {\n                Assert.fail(\"Expected FDF failure, but got \" + dfdp + \" for [\"+format+\",\"+date+\"] using \"+((FastDateParser)fdp).getParsePattern());\n            }\n        } catch (Exception e) {\n            f = e;\n            if (!shouldFail) {\n                throw e;\n            }\n//            System.out.println(\"fdf:\"+format+\"/\"+date+\"=>\"+e);\n        }\n        // SDF and FDF should produce equivalent results\n        assertTrue(\"Should both or neither throw Exceptions\", (f==null)==(s==null));\n        assertEquals(\"Parsed dates should be equal\", dsdf, dfdp);\n    }\n",
        "begin_line": 356,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 25)",
            "(line 359,col 9)-(line 359,col 25)",
            "(line 360,col 9)-(line 360,col 27)",
            "(line 361,col 9)-(line 361,col 27)",
            "(line 363,col 9)-(line 376,col 9)",
            "(line 378,col 9)-(line 390,col 9)",
            "(line 392,col 9)-(line 392,col 84)",
            "(line 393,col 9)-(line 393,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testDayOf()",
        "snippet": "    @Test\n    public void testDayOf() throws ParseException {\n        Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n        cal.clear();\n        cal.set(2003, 1, 10);\n\n        DateParser fdf = getInstance(\"W w F D y\", NEW_YORK, Locale.US);\n        assertEquals(cal.getTime(), fdf.parse(\"3 7 2 41 03\"));\n    }\n",
        "begin_line": 396,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 64)",
            "(line 399,col 9)-(line 399,col 20)",
            "(line 400,col 9)-(line 400,col 29)",
            "(line 402,col 9)-(line 402,col 71)",
            "(line 403,col 9)-(line 403,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales()",
        "snippet": "    @Test\n    public void testShortDateStyleWithLocales() throws ParseException {\n        DateParser fdf = getDateInstance(FastDateFormat.SHORT, Locale.US);\n        Calendar cal = Calendar.getInstance();\n        cal.clear();\n\n        cal.set(2004, 1, 3);\n        assertEquals(cal.getTime(), fdf.parse(\"2/3/04\"));\n\n        fdf = getDateInstance(FastDateFormat.SHORT, SWEDEN);\n        assertEquals(cal.getTime(), fdf.parse(\"2004-02-03\"));\n    }\n",
        "begin_line": 410,
        "end_line": 421,
        "comment": "\n     * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}.\n     * @throws ParseException\n     ",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 74)",
            "(line 413,col 9)-(line 413,col 46)",
            "(line 414,col 9)-(line 414,col 20)",
            "(line 416,col 9)-(line 416,col 28)",
            "(line 417,col 9)-(line 417,col 57)",
            "(line 419,col 9)-(line 419,col 60)",
            "(line 420,col 9)-(line 420,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLowYearPadding()",
        "snippet": "    @Test\n    public void testLowYearPadding() throws ParseException {\n        DateParser parser = getInstance(YMD_SLASH);\n        Calendar cal = Calendar.getInstance();\n        cal.clear();\n\n        cal.set(1,0,1);\n        assertEquals(cal.getTime(), parser.parse(\"0001/01/01\"));\n        cal.set(10,0,1);\n        assertEquals(cal.getTime(), parser.parse(\"0010/01/01\"));\n        cal.set(100,0,1);\n        assertEquals(cal.getTime(), parser.parse(\"0100/01/01\"));\n        cal.set(999,0,1);\n        assertEquals(cal.getTime(), parser.parse(\"0999/01/01\"));\n    }\n",
        "begin_line": 427,
        "end_line": 441,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     * @throws ParseException\n     ",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 51)",
            "(line 430,col 9)-(line 430,col 46)",
            "(line 431,col 9)-(line 431,col 20)",
            "(line 433,col 9)-(line 433,col 23)",
            "(line 434,col 9)-(line 434,col 64)",
            "(line 435,col 9)-(line 435,col 24)",
            "(line 436,col 9)-(line 436,col 64)",
            "(line 437,col 9)-(line 437,col 25)",
            "(line 438,col 9)-(line 438,col 64)",
            "(line 439,col 9)-(line 439,col 25)",
            "(line 440,col 9)-(line 440,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testMilleniumBug()",
        "snippet": "    @Test\n    public void testMilleniumBug() throws ParseException {\n        DateParser parser = getInstance(DMY_DOT);\n        Calendar cal = Calendar.getInstance();\n        cal.clear();\n\n        cal.set(1000,0,1);\n        assertEquals(cal.getTime(), parser.parse(\"01.01.1000\"));\n    }\n",
        "begin_line": 446,
        "end_line": 454,
        "comment": "\n     * @throws ParseException\n     ",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 49)",
            "(line 449,col 9)-(line 449,col 46)",
            "(line 450,col 9)-(line 450,col 20)",
            "(line 452,col 9)-(line 452,col 26)",
            "(line 453,col 9)-(line 453,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLang303()",
        "snippet": "    @Test\n    public void testLang303() throws ParseException {\n        DateParser parser = getInstance(YMD_SLASH);\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 11, 31);\n\n        Date date = parser.parse(\"2004/11/31\");\n\n        parser = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) parser));\n        assertEquals(date, parser.parse(\"2004/11/31\"));\n    }\n",
        "begin_line": 456,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 51)",
            "(line 459,col 9)-(line 459,col 46)",
            "(line 460,col 9)-(line 460,col 30)",
            "(line 462,col 9)-(line 462,col 47)",
            "(line 464,col 9)-(line 464,col 101)",
            "(line 465,col 9)-(line 465,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLang538()",
        "snippet": "    @Test\n    public void testLang538() throws ParseException {\n        DateParser parser = getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", GMT);\n\n        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT-8\"));\n        cal.clear();\n        cal.set(2009, 9, 16, 8, 42, 16);\n\n        assertEquals(cal.getTime(), parser.parse(\"2009-10-16T16:42:16.000Z\"));\n    }\n",
        "begin_line": 468,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 77)",
            "(line 472,col 9)-(line 472,col 75)",
            "(line 473,col 9)-(line 473,col 20)",
            "(line 474,col 9)-(line 474,col 40)",
            "(line 476,col 9)-(line 476,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testEquals()",
        "snippet": "    @Test\n    public void testEquals() {\n        DateParser parser1= getInstance(YMD_SLASH);\n        DateParser parser2= getInstance(YMD_SLASH);\n\n        assertEquals(parser1, parser2);\n        assertEquals(parser1.hashCode(), parser2.hashCode());\n\n        assertFalse(parser1.equals(new Object()));\n    }\n",
        "begin_line": 479,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 481,col 9)-(line 481,col 51)",
            "(line 482,col 9)-(line 482,col 51)",
            "(line 484,col 9)-(line 484,col 39)",
            "(line 485,col 9)-(line 485,col 61)",
            "(line 487,col 9)-(line 487,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testToStringContainsName()",
        "snippet": "    @Test\n    public void testToStringContainsName() {\n        DateParser parser= getInstance(YMD_SLASH);\n        assertTrue(parser.toString().startsWith(\"FastDate\"));\n    }\n",
        "begin_line": 490,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 50)",
            "(line 493,col 9)-(line 493,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testPatternMatches()",
        "snippet": "    @Test\n    public void testPatternMatches() {\n        DateParser parser= getInstance(yMdHmsSZ);\n        assertEquals(yMdHmsSZ, parser.getPattern());\n    }\n",
        "begin_line": 496,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 49)",
            "(line 499,col 9)-(line 499,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testLocaleMatches()",
        "snippet": "    @Test\n    public void testLocaleMatches() {\n        DateParser parser= getInstance(yMdHmsSZ, SWEDEN);\n        assertEquals(SWEDEN, parser.getLocale());\n    }\n",
        "begin_line": 502,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 504,col 9)-(line 504,col 57)",
            "(line 505,col 9)-(line 505,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateParserTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_ParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateParserTest.testTimeZoneMatches()",
        "snippet": "    @Test\n    public void testTimeZoneMatches() {\n        DateParser parser= getInstance(yMdHmsSZ, REYKJAVIK);\n        assertEquals(REYKJAVIK, parser.getTimeZone());\n    }\n",
        "begin_line": 508,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 60)",
            "(line 511,col 9)-(line 511,col 54)"
        ]
    }
]