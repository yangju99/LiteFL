[
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.NormalizeTest()",
        "snippet": "  public NormalizeTest() {\n    super(EXTERNS);\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 19)",
            "(line 36,col 5)-(line 36,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    return new Normalize(compiler, false);\n  }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // The normalize pass is only run once.\n    return 1;\n  }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testSplitVar()",
        "snippet": "  public void testSplitVar() {\n    testSame(\"var a\");\n    test(\"var a, b\",\n         \"var a; var b\");\n    test(\"var a, b, c\",\n         \"var a; var b; var c\");\n    testSame(\"var a = 0 \");\n    test(\"var a = 0 , b = foo()\",\n         \"var a = 0; var b = foo()\");\n    test(\"var a = 0, b = 1, c = 2\",\n         \"var a = 0; var b = 1; var c = 2\");\n    test(\"var a = foo(1), b = foo(2), c = foo(3)\",\n         \"var a = foo(1); var b = foo(2); var c = foo(3)\");\n\n    // Verify vars extracted from FOR nodes are split.\n    test(\"for(var a = 0, b = foo(1), c = 1; c < b; c++) foo(2)\",\n         \"var a = 0; var b = foo(1); var c = 1; for(; c < b; c++) foo(2)\");\n\n    // Verify split vars properly introduce blocks when needed.\n    test(\"for(;;) var b = foo(1), c = foo(2);\",\n        \"for(;;){var b = foo(1); var c = foo(2)}\");\n    test(\"for(;;){var b = foo(1), c = foo(2);}\",\n         \"for(;;){var b = foo(1); var c = foo(2)}\");\n\n    test(\"try{var b = foo(1), c = foo(2);} finally foo(3);\",\n         \"try{var b = foo(1); var c = foo(2)} finally foo(3);\");\n    test(\"try{var b = foo(1),c = foo(2);} finally;\",\n         \"try{var b = foo(1); var c = foo(2)} finally;\");\n    test(\"try{foo(0);} finally var b = foo(1), c = foo(2);\",\n         \"try{foo(0);} finally {var b = foo(1); var c = foo(2)}\");\n\n    test(\"switch(a) {default: var b = foo(1), c = foo(2); break;}\",\n         \"switch(a) {default: var b = foo(1); var c = foo(2); break;}\");\n\n    test(\"do var a = foo(1), b; while(false);\",\n         \"do{var a = foo(1); var b} while(false);\");\n    test(\"a:var a,b,c;\",\n         \"a:{ var a;var b; var c; }\");\n    test(\"a:for(var a,b,c;;);\",\n         \"var a;var b; var c;a:for(;;);\");\n    test(\"if (true) a:var a,b;\",\n         \"if (true)a:{ var a; var b; }\");\n  }\n",
        "begin_line": 50,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 22)",
            "(line 52,col 5)-(line 53,col 25)",
            "(line 54,col 5)-(line 55,col 32)",
            "(line 56,col 5)-(line 56,col 27)",
            "(line 57,col 5)-(line 58,col 37)",
            "(line 59,col 5)-(line 60,col 44)",
            "(line 61,col 5)-(line 62,col 59)",
            "(line 65,col 5)-(line 66,col 75)",
            "(line 69,col 5)-(line 70,col 51)",
            "(line 71,col 5)-(line 72,col 52)",
            "(line 74,col 5)-(line 75,col 64)",
            "(line 76,col 5)-(line 77,col 57)",
            "(line 78,col 5)-(line 79,col 66)",
            "(line 81,col 5)-(line 82,col 72)",
            "(line 84,col 5)-(line 85,col 52)",
            "(line 86,col 5)-(line 87,col 38)",
            "(line 88,col 5)-(line 89,col 42)",
            "(line 90,col 5)-(line 91,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testDuplicateVarInExterns()",
        "snippet": "  public void testDuplicateVarInExterns() {\n    test(\"var extern;\",\n         \"/** @suppress {duplicate} */ var extern = 3;\", \"var extern = 3;\",\n         null, null);\n  }\n",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 97,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testUnhandled()",
        "snippet": "  public void testUnhandled() {\n    testSame(\"var x = y = 1\");\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testFor()",
        "snippet": "  public void testFor() {\n    // Verify assignments are extracted from the FOR init node.\n    test(\"for(a = 0; a < 2 ; a++) foo();\",\n         \"a = 0; for(; a < 2 ; a++) foo()\");\n    // Verify vars are extracted from the FOR init node.\n    test(\"for(var a = 0; c < b ; c++) foo()\",\n         \"var a = 0; for(; c < b ; c++) foo()\");\n\n    // Verify vars are extracted from the FOR init before the label node.\n    test(\"a:for(var a = 0; c < b ; c++) foo()\",\n         \"var a = 0; a:for(; c < b ; c++) foo()\");\n    // Verify vars are extracted from the FOR init before the labels node.\n    test(\"a:b:for(var a = 0; c < b ; c++) foo()\",\n         \"var a = 0; a:b:for(; c < b ; c++) foo()\");\n\n    // Verify block are properly introduced for ifs.\n    test(\"if(x) for(var a = 0; c < b ; c++) foo()\",\n         \"if(x){var a = 0; for(; c < b ; c++) foo()}\");\n\n    // Any other expression.\n    test(\"for(init(); a < 2 ; a++) foo();\",\n         \"init(); for(; a < 2 ; a++) foo()\");\n  }\n",
        "begin_line": 104,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 107,col 44)",
            "(line 109,col 5)-(line 110,col 48)",
            "(line 113,col 5)-(line 114,col 50)",
            "(line 116,col 5)-(line 117,col 52)",
            "(line 120,col 5)-(line 121,col 55)",
            "(line 124,col 5)-(line 125,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testForIn()",
        "snippet": "  public void testForIn() {\n    // Verify nothing happens with simple for-in\n    testSame(\"for(a in b) foo();\");\n\n    // Verify vars are extracted from the FOR-IN node.\n    test(\"for(var a in b) foo()\",\n         \"var a; for(a in b) foo()\");\n\n    // Verify vars are extracted from the FOR init before the label node.\n    test(\"a:for(var a in b) foo()\",\n         \"var a; a:for(a in b) foo()\");\n    // Verify vars are extracted from the FOR init before the labels node.\n    test(\"a:b:for(var a in b) foo()\",\n         \"var a; a:b:for(a in b) foo()\");\n\n    // Verify block are properly introduced for ifs.\n    test(\"if (x) for(var a in b) foo()\",\n         \"if (x) { var a; for(a in b) foo() }\");\n  }\n",
        "begin_line": 128,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 35)",
            "(line 133,col 5)-(line 134,col 37)",
            "(line 137,col 5)-(line 138,col 39)",
            "(line 140,col 5)-(line 141,col 41)",
            "(line 144,col 5)-(line 145,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testWhile()",
        "snippet": "  public void testWhile() {\n    // Verify while loops are converted to FOR loops.\n    test(\"while(c < b) foo()\",\n         \"for(; c < b;) foo()\");\n  }\n",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 151,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testMoveFunctions1()",
        "snippet": "  public void testMoveFunctions1() throws Exception {\n    test(\"function f() { if (x) return; foo(); function foo() {} }\",\n         \"function f() {function foo() {} if (x) return; foo(); }\");\n    test(\"function f() { \" +\n            \"function foo() {} \" +\n            \"if (x) return;\" +\n            \"foo(); \" +\n            \"function bar() {} \" +\n         \"}\",\n         \"function f() {\" +\n           \"function foo() {}\" +\n           \"function bar() {}\" +\n           \"if (x) return;\" +\n           \"foo();\" +\n         \"}\");\n  }\n",
        "begin_line": 154,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 156,col 68)",
            "(line 157,col 5)-(line 168,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testMoveFunctions2()",
        "snippet": "  public void testMoveFunctions2() throws Exception {\n    testSame(\"function f() { function foo() {} }\");\n    test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");\n    test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");\n    test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");\n  }\n",
        "begin_line": 171,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 51)",
            "(line 173,col 5)-(line 174,col 64)",
            "(line 175,col 5)-(line 176,col 60)",
            "(line 177,col 5)-(line 178,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.inFunction(java.lang.String)",
        "snippet": "  private String inFunction(String code) {\n    return \"(function(){\" + code + \"})\";\n  }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testSameInFunction(java.lang.String)",
        "snippet": "  private void testSameInFunction(String code) {\n    testSame(inFunction(code));\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testInFunction(java.lang.String, java.lang.String)",
        "snippet": "  private void testInFunction(String code, String expected) {\n    test(inFunction(code), inFunction(expected));\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testNormalizeFunctionDeclarations()",
        "snippet": "  public void testNormalizeFunctionDeclarations() throws Exception {\n    testSame(\"function f() {}\");\n    testSame(\"var f = function () {}\");\n    test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");\n    testSame(\"var f = function g() {}\");\n    test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");\n    test(\"{function g() {}}\",\n         \"{var g = function () {}}\");\n    testSame(\"if (function g() {}) {}\");\n    test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");\n    test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");\n    testSame(\"switch (function g() {}) {}\");\n    test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");\n\n\n    testSameInFunction(\"function f() {}\");\n    testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");\n    testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");\n    testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");\n    testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");\n  }\n",
        "begin_line": 193,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 32)",
            "(line 195,col 5)-(line 195,col 39)",
            "(line 196,col 5)-(line 197,col 39)",
            "(line 198,col 5)-(line 198,col 40)",
            "(line 199,col 5)-(line 200,col 41)",
            "(line 201,col 5)-(line 202,col 37)",
            "(line 203,col 5)-(line 203,col 40)",
            "(line 204,col 5)-(line 205,col 47)",
            "(line 206,col 5)-(line 207,col 55)",
            "(line 208,col 5)-(line 208,col 44)",
            "(line 209,col 5)-(line 210,col 57)",
            "(line 213,col 5)-(line 213,col 42)",
            "(line 214,col 5)-(line 215,col 56)",
            "(line 216,col 5)-(line 217,col 52)",
            "(line 218,col 5)-(line 219,col 62)",
            "(line 220,col 5)-(line 221,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testMakeLocalNamesUnique()",
        "snippet": "  public void testMakeLocalNamesUnique() {\n    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {\n      return;\n    }\n\n    // Verify global names are untouched.\n    testSame(\"var a;\");\n\n    // Verify global names are untouched.\n    testSame(\"a;\");\n\n    // Local names are made unique.\n    test(\"var a;function foo(a){var b;a}\",\n         \"var a;function foo(a$$1){var b;a$$1}\");\n    test(\"var a;function foo(){var b;a}function boo(){var b;a}\",\n         \"var a;function foo(){var b;a}function boo(){var b$$1;a}\");\n    test(\"function foo(a){var b}\" +\n         \"function boo(a){var b}\",\n         \"function foo(a){var b}\" +\n         \"function boo(a$$1){var b$$1}\");\n\n    // Verify function expressions are renamed.\n    test(\"var a = function foo(){foo()};var b = function foo(){foo()};\",\n         \"var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};\");\n\n    // Verify catch exceptions names are made unique\n    test(\"try { } catch(e) {e;}\",\n         \"try { } catch(e) {e;}\");\n    test(\"try { } catch(e) {e;}; try { } catch(e) {e;}\",\n         \"try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}\");\n    test(\"try { } catch(e) {e; try { } catch(e) {e;}};\",\n         \"try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; \");\n\n    // Verify the 1st global redefinition of extern definition is not removed.\n    test(\"/** @suppress {duplicate} */\\nvar window;\", \"var window;\");\n\n    // Verify the 2nd global redefinition of extern definition is removed.\n    test(\"/** @suppress {duplicate} */\\nvar window;\" +\n         \"/** @suppress {duplicate} */\\nvar window;\", \"var window;\");\n\n    // Verify local masking extern made unique.\n    test(\"function f() {var window}\",\n         \"function f() {var window$$1}\");\n  }\n",
        "begin_line": 225,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 226,col 5)-(line 228,col 5)",
            "(line 231,col 5)-(line 231,col 23)",
            "(line 234,col 5)-(line 234,col 19)",
            "(line 237,col 5)-(line 238,col 49)",
            "(line 239,col 5)-(line 240,col 68)",
            "(line 241,col 5)-(line 244,col 41)",
            "(line 247,col 5)-(line 248,col 79)",
            "(line 251,col 5)-(line 252,col 34)",
            "(line 253,col 5)-(line 254,col 63)",
            "(line 255,col 5)-(line 256,col 65)",
            "(line 259,col 5)-(line 259,col 69)",
            "(line 262,col 5)-(line 263,col 69)",
            "(line 266,col 5)-(line 267,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testRemoveDuplicateVarDeclarations1()",
        "snippet": "  public void testRemoveDuplicateVarDeclarations1() {\n    test(\"function f() { var a; var a }\",\n         \"function f() { var a; }\");\n    test(\"function f() { var a = 1; var a = 2 }\",\n         \"function f() { var a = 1; a = 2 }\");\n    test(\"var a = 1; function f(){ var a = 2 }\",\n         \"var a = 1; function f(){ var a$$1 = 2 }\");\n    test(\"function f() { var a = 1; lable1:var a = 2 }\",\n         \"function f() { var a = 1; lable1:{a = 2}}\");\n    test(\"function f() { var a = 1; lable1:var a }\",\n         \"function f() { var a = 1; lable1:{} }\");\n    test(\"function f() { var a = 1; for(var a in b); }\",\n         \"function f() { var a = 1; for(a in b); }\");\n  }\n",
        "begin_line": 270,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 272,col 36)",
            "(line 273,col 5)-(line 274,col 46)",
            "(line 275,col 5)-(line 276,col 52)",
            "(line 277,col 5)-(line 278,col 54)",
            "(line 279,col 5)-(line 280,col 50)",
            "(line 281,col 5)-(line 282,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testRemoveDuplicateVarDeclarations2()",
        "snippet": "  public void testRemoveDuplicateVarDeclarations2() {\n    test(\"var e = 1; function f(){ try {} catch (e) {} var e = 2 }\",\n         \"var e = 1; function f(){ try {} catch (e$$2) {} var e$$1 = 2 }\");\n  }\n",
        "begin_line": 285,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 287,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testRemoveDuplicateVarDeclarations3()",
        "snippet": "  public void testRemoveDuplicateVarDeclarations3() {\n    test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");\n    test(\"var f; function f(){}\",\n         \"function f(){}\");\n    test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");\n\n    test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");\n    test(\"function f(){} var f;\",\n         \"function f(){}\");\n    test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n    test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");\n  }\n",
        "begin_line": 290,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 292,col 34)",
            "(line 293,col 5)-(line 294,col 27)",
            "(line 295,col 5)-(line 296,col 61)",
            "(line 298,col 5)-(line 299,col 34)",
            "(line 300,col 5)-(line 301,col 27)",
            "(line 302,col 5)-(line 303,col 61)",
            "(line 307,col 5)-(line 309,col 60)",
            "(line 310,col 5)-(line 311,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testRenamingConstants()",
        "snippet": "  public void testRenamingConstants() {\n    test(\"var ACONST = 4;var b = ACONST;\",\n         \"var ACONST = 4; var b = ACONST;\");\n\n    test(\"var a, ACONST = 4;var b = ACONST;\",\n         \"var a; var ACONST = 4; var b = ACONST;\");\n\n    test(\"var ACONST; ACONST = 4; var b = ACONST;\",\n         \"var ACONST; ACONST = 4;\" +\n         \"var b = ACONST;\");\n\n    test(\"var ACONST = new Foo(); var b = ACONST;\",\n         \"var ACONST = new Foo(); var b = ACONST;\");\n\n    test(\"/** @const */var aa; aa=1;\", \"var aa;aa=1\");\n  }\n",
        "begin_line": 314,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 316,col 44)",
            "(line 318,col 5)-(line 319,col 51)",
            "(line 321,col 5)-(line 323,col 28)",
            "(line 325,col 5)-(line 326,col 52)",
            "(line 328,col 5)-(line 328,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testSkipRenamingExterns()",
        "snippet": "  public void testSkipRenamingExterns() {\n    test(\"var EXTERN; var ext; ext.FOO;\", \"var b = EXTERN; var c = ext.FOO\",\n         \"var b = EXTERN; var c = ext.FOO\", null, null);\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 333,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue166a()",
        "snippet": "  public void testIssue166a() {\n    test(\"try { throw 1 } catch(e) { /** @suppress {duplicate} */ var e=2 }\",\n         \"try { throw 1 } catch(e) { var e=2 }\",\n         Normalize.CATCH_BLOCK_VAR_ERROR);\n  }\n",
        "begin_line": 336,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 339,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue166b()",
        "snippet": "  public void testIssue166b() {\n    test(\"function a() {\" +\n         \"try { throw 1 } catch(e) { /** @suppress {duplicate} */ var e=2 }\" +\n         \"};\",\n         \"function a() {\" +\n         \"try { throw 1 } catch(e) { var e=2 }\" +\n         \"}\",\n         Normalize.CATCH_BLOCK_VAR_ERROR);\n  }\n",
        "begin_line": 342,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 343,col 5)-(line 349,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue166c()",
        "snippet": "  public void testIssue166c() {\n    test(\"var e = 0; try { throw 1 } catch(e) {\" +\n             \"/** @suppress {duplicate} */ var e=2 }\",\n         \"var e = 0; try { throw 1 } catch(e) { var e=2 }\",\n         Normalize.CATCH_BLOCK_VAR_ERROR);\n  }\n",
        "begin_line": 352,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 356,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue166d()",
        "snippet": "  public void testIssue166d() {\n    test(\"function a() {\" +\n         \"var e = 0; try { throw 1 } catch(e) {\" +\n             \"/** @suppress {duplicate} */ var e=2 }\" +\n         \"};\",\n         \"function a() {\" +\n         \"var e = 0; try { throw 1 } catch(e) { var e=2 }\" +\n         \"}\",\n         Normalize.CATCH_BLOCK_VAR_ERROR);\n  }\n",
        "begin_line": 359,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 360,col 5)-(line 367,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue166e()",
        "snippet": "  public void testIssue166e() {\n    test(\"var e = 2; try { throw 1 } catch(e) {}\",\n         \"var e = 2; try { throw 1 } catch(e$$1) {}\");\n  }\n",
        "begin_line": 370,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 371,col 5)-(line 372,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue166f()",
        "snippet": "  public void testIssue166f() {\n    test(\"function a() {\" +\n         \"var e = 2; try { throw 1 } catch(e) {}\" +\n         \"}\",\n         \"function a() {\" +\n         \"var e = 2; try { throw 1 } catch(e$$1) {}\" +\n         \"}\");\n  }\n",
        "begin_line": 375,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 381,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIssue()",
        "snippet": "  public void testIssue() {\n    super.allowExternsChanges(true);\n    test(\"var a,b,c; var a,b\", \"a(), b()\", \"a(), b()\", null, null);\n  }\n",
        "begin_line": 384,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 36)",
            "(line 386,col 5)-(line 386,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testNormalizeSyntheticCode()",
        "snippet": "  public void testNormalizeSyntheticCode() {\n    Compiler compiler = new Compiler();\n    compiler.init(\n        Lists.<JSSourceFile>newArrayList(),\n        Lists.<JSSourceFile>newArrayList(), new CompilerOptions());\n    Node code = Normalize.parseAndNormalizeSyntheticCode(\n        compiler, \"function f(x) {} function g(x) {}\", \"prefix_\");\n    assertEquals(\n        \"function f(x$$prefix_0){}function g(x$$prefix_1){}\",\n        compiler.toSource(code));\n  }\n",
        "begin_line": 389,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 390,col 39)",
            "(line 391,col 5)-(line 393,col 67)",
            "(line 394,col 5)-(line 395,col 66)",
            "(line 396,col 5)-(line 398,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testIsConstant()",
        "snippet": "  public void testIsConstant() throws Exception {\n    testSame(\"var CONST = 3; var b = CONST;\");\n    Node n = getLastCompiler().getRoot();\n\n    Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);\n    assertEquals(2, constantNodes.size());\n    for (Node hasProp : constantNodes) {\n      assertEquals(\"CONST\", hasProp.getString());\n    }\n  }\n",
        "begin_line": 401,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 46)",
            "(line 403,col 5)-(line 403,col 41)",
            "(line 405,col 5)-(line 405,col 78)",
            "(line 406,col 5)-(line 406,col 42)",
            "(line 407,col 5)-(line 409,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testPropertyIsConstant1()",
        "snippet": "  public void testPropertyIsConstant1() throws Exception {\n    testSame(\"var a = {};a.CONST = 3; var b = a.CONST;\");\n    Node n = getLastCompiler().getRoot();\n\n    Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);\n    assertEquals(2, constantNodes.size());\n    for (Node hasProp : constantNodes) {\n      assertEquals(\"CONST\", hasProp.getString());\n    }\n  }\n",
        "begin_line": 412,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 57)",
            "(line 414,col 5)-(line 414,col 41)",
            "(line 416,col 5)-(line 416,col 78)",
            "(line 417,col 5)-(line 417,col 42)",
            "(line 418,col 5)-(line 420,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testPropertyIsConstant2()",
        "snippet": "  public void testPropertyIsConstant2() throws Exception {\n    testSame(\"var a = {CONST: 3}; var b = a.CONST;\");\n    Node n = getLastCompiler().getRoot();\n\n    Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);\n    assertEquals(2, constantNodes.size());\n    for (Node hasProp : constantNodes) {\n      assertEquals(\"CONST\", hasProp.getString());\n    }\n  }\n",
        "begin_line": 423,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 424,col 53)",
            "(line 425,col 5)-(line 425,col 41)",
            "(line 427,col 5)-(line 427,col 78)",
            "(line 428,col 5)-(line 428,col 42)",
            "(line 429,col 5)-(line 431,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testGetterPropertyIsConstant()",
        "snippet": "  public void testGetterPropertyIsConstant() throws Exception {\n    testSame(\"var a = { get CONST() {return 3} }; \" +\n             \"var b = a.CONST;\");\n    Node n = getLastCompiler().getRoot();\n\n    Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);\n    assertEquals(2, constantNodes.size());\n    for (Node hasProp : constantNodes) {\n      assertEquals(\"CONST\", hasProp.getString());\n    }\n  }\n",
        "begin_line": 434,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 436,col 33)",
            "(line 437,col 5)-(line 437,col 41)",
            "(line 439,col 5)-(line 439,col 78)",
            "(line 440,col 5)-(line 440,col 42)",
            "(line 441,col 5)-(line 443,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testSetterPropertyIsConstant()",
        "snippet": "  public void testSetterPropertyIsConstant() throws Exception {\n    // Verifying that a SET is properly annotated.\n    testSame(\"var a = { set CONST(b) {throw 'invalid'} }; \" +\n             \"var c = a.CONST;\");\n    Node n = getLastCompiler().getRoot();\n\n    Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);\n    assertEquals(2, constantNodes.size());\n    for (Node hasProp : constantNodes) {\n      assertEquals(\"CONST\", hasProp.getString());\n    }\n  }\n",
        "begin_line": 446,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 449,col 33)",
            "(line 450,col 5)-(line 450,col 41)",
            "(line 452,col 5)-(line 452,col 78)",
            "(line 453,col 5)-(line 453,col 42)",
            "(line 454,col 5)-(line 456,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.findNodesWithProperty(com.google.javascript.rhino.Node, int)",
        "snippet": "  private Set<Node> findNodesWithProperty(Node root, final int prop) {\n    final Set<Node> set = Sets.newHashSet();\n    NodeTraversal.traverse(\n        getLastCompiler(), root, new AbstractPostOrderCallback() {\n        public void visit(NodeTraversal t, Node node, Node parent) {\n          if (node.getBooleanProp(prop)) {\n            set.add(node);\n          }\n        }\n      });\n    return set;\n  }\n",
        "begin_line": 459,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 44)",
            "(line 461,col 5)-(line 468,col 9)",
            "(line 469,col 5)-(line 469,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.Anonymous-78f9c626-661f-4d95-b598-ee008728cfa3.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        public void visit(NodeTraversal t, Node node, Node parent) {\n          if (node.getBooleanProp(prop)) {\n            set.add(node);\n          }\n        }\n",
        "begin_line": 463,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 464,col 11)-(line 466,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.testRenamingConstantProperties()",
        "snippet": "  public void testRenamingConstantProperties() {\n    // In order to detecte that foo.BAR is a constant, we need collapse\n    // properties to run first so that we can tell if the initial value is\n    // non-null and immutable.\n    new WithCollapse().testConstantProperties();\n  }\n",
        "begin_line": 472,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 476,col 5)-(line 476,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.WithCollapse.WithCollapse()",
        "snippet": "    WithCollapse() {\n      enableNormalize();\n    }\n",
        "begin_line": 480,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 481,col 7)-(line 481,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.WithCollapse.testConstantProperties()",
        "snippet": "    private void testConstantProperties() {\n      test(\"var a={}; a.ACONST = 4;var b = a.ACONST;\",\n           \"var a$ACONST = 4; var b = a$ACONST;\");\n\n      test(\"var a={b:{}}; a.b.ACONST = 4;var b = a.b.ACONST;\",\n           \"var a$b$ACONST = 4;var b = a$b$ACONST;\");\n\n      test(\"var a = {FOO: 1};var b = a.FOO;\",\n           \"var a$FOO = 1; var b = a$FOO;\");\n\n      test(\"var EXTERN; var ext; ext.FOO;\", \"var b = EXTERN; var c = ext.FOO\",\n           \"var b = EXTERN; var c = ext.FOO\", null, null);\n\n      test(\"var a={}; a.ACONST = 4; var b = a.ACONST;\",\n           \"var a$ACONST = 4; var b = a$ACONST;\");\n\n      test(\"var a = {}; function foo() { var d = a.CONST; };\" +\n           \"(function(){a.CONST=4})();\",\n           \"var a$CONST;function foo(){var d = a$CONST;};\" +\n           \"(function(){a$CONST = 4})();\");\n\n      test(\"var a = {}; a.ACONST = new Foo(); var b = a.ACONST;\",\n           \"var a$ACONST = new Foo(); var b = a$ACONST;\");\n    }\n",
        "begin_line": 484,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 485,col 7)-(line 486,col 50)",
            "(line 488,col 7)-(line 489,col 53)",
            "(line 491,col 7)-(line 492,col 44)",
            "(line 494,col 7)-(line 495,col 58)",
            "(line 497,col 7)-(line 498,col 50)",
            "(line 500,col 7)-(line 503,col 43)",
            "(line 505,col 7)-(line 506,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.WithCollapse.getNumRepetitions()",
        "snippet": "    @Override\n    protected int getNumRepetitions() {\n      // The normalize pass is only run once.\n      return 1;\n    }\n",
        "begin_line": 509,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 512,col 7)-(line 512,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.WithCollapse.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "    @Override\n    public CompilerPass getProcessor(final Compiler compiler) {\n      return new CompilerPass() {\n        public void process(Node externs, Node root) {\n          new CollapseProperties(compiler, false, true).process(externs, root);\n        }\n      };\n    }\n",
        "begin_line": 515,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 517,col 7)-(line 521,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "signature": "com.google.javascript.jscomp.NormalizeTest.WithCollapse.Anonymous-732ea2f2-bb80-48a0-ae75-a850d15a8d7c.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        public void process(Node externs, Node root) {\n          new CollapseProperties(compiler, false, true).process(externs, root);\n        }\n",
        "begin_line": 518,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 519,col 11)-(line 519,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VarCheckTest()",
        "snippet": "  public VarCheckTest() {\n    super(EXTERNS);\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    super.allowExternsChanges(true);\n    strictModuleDepErrorLevel = CheckLevel.OFF;\n    externValidationErrorLevel = null;\n    sanityCheck = false;\n    testSetupPass = null;\n  }\n",
        "begin_line": 39,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 41,col 5)-(line 41,col 18)",
            "(line 42,col 5)-(line 42,col 36)",
            "(line 43,col 5)-(line 43,col 47)",
            "(line 44,col 5)-(line 44,col 38)",
            "(line 45,col 5)-(line 45,col 24)",
            "(line 46,col 5)-(line 46,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.getOptions()",
        "snippet": "  @Override\n  protected CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK,\n        strictModuleDepErrorLevel);\n    if (externValidationErrorLevel != null) {\n     options.setWarningLevel(DiagnosticGroups.EXTERNS_VALIDATION,\n         externValidationErrorLevel);\n    }\n    return options;\n  }\n",
        "begin_line": 49,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 49)",
            "(line 52,col 5)-(line 53,col 35)",
            "(line 54,col 5)-(line 57,col 5)",
            "(line 58,col 5)-(line 58,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    if (!sanityCheck) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          if (testSetupPass != null) {\n            testSetupPass.process(externs, root);\n          }\n          new VarCheck(compiler, false).process(externs, root);\n          if (!compiler.hasErrors()) {\n            new VarCheck(compiler, true).process(externs, root);\n          }\n        }\n      };\n    }\n    return new VarCheck(compiler, sanityCheck);\n  }\n",
        "begin_line": 61,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 75,col 5)",
            "(line 76,col 5)-(line 76,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.Anonymous-5e23a33f-000a-43f8-b2e5-318799531ce1.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override public void process(Node externs, Node root) {\n          if (testSetupPass != null) {\n            testSetupPass.process(externs, root);\n          }\n          new VarCheck(compiler, false).process(externs, root);\n          if (!compiler.hasErrors()) {\n            new VarCheck(compiler, true).process(externs, root);\n          }\n        }\n",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 66,col 11)-(line 68,col 11)",
            "(line 69,col 11)-(line 69,col 63)",
            "(line 70,col 11)-(line 72,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Because we synthesize externs, the second pass won't emit a warning.\n    return 1;\n  }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testBreak()",
        "snippet": "  public void testBreak() {\n    testSame(\"a: while(1) break a;\");\n  }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 86,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testContinue()",
        "snippet": "  public void testContinue() {\n    testSame(\"a: while(1) continue a;\");\n  }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarNotDefined()",
        "snippet": "  public void testReferencedVarNotDefined() {\n    test(\"x = 0;\", null, VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarDefined1()",
        "snippet": "  public void testReferencedVarDefined1() {\n    testSame(\"var x, y; x=1;\");\n  }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarDefined2()",
        "snippet": "  public void testReferencedVarDefined2() {\n    testSame(\"var x; function y() {x=1;}\");\n  }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testReferencedVarsExternallyDefined()",
        "snippet": "  public void testReferencedVarsExternallyDefined() {\n    testSame(\"var x = window; alert(x);\");\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars1()",
        "snippet": "  public void testMultiplyDeclaredVars1() {\n    test(\"var x = 1; var x = 2;\", null,\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 111,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars2()",
        "snippet": "  public void testMultiplyDeclaredVars2() {\n    test(\"var y; try { y=1 } catch (x) {}\" +\n         \"try { y=1 } catch (x) {}\",\n         \"var y;try{y=1}catch(x){}try{y=1}catch(x){}\");\n  }\n",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 117,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars3()",
        "snippet": "  public void testMultiplyDeclaredVars3() {\n    test(\"try { var x = 1; x *=2; } catch (x) {}\", null,\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 122,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMultiplyDeclaredVars4()",
        "snippet": "  public void testMultiplyDeclaredVars4() {\n    testSame(\"x;\", \"var x = 1; var x = 2;\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR, true);\n  }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 127,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVarReferenceInExterns()",
        "snippet": "  public void testVarReferenceInExterns() {\n    testSame(\"asdf;\", \"var asdf;\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n  }\n",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 132,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testCallInExterns()",
        "snippet": "  public void testCallInExterns() {\n    testSame(\"yz();\", \"function yz() {}\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n  }\n",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 137,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns1()",
        "snippet": "  public void testPropReferenceInExterns1() {\n    testSame(\"asdf.foo;\", \"var asdf;\",\n        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 142,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns2()",
        "snippet": "  public void testPropReferenceInExterns2() {\n    testSame(\"asdf.foo;\", \"\",\n        VarCheck.UNDEFINED_VAR_ERROR, true);\n  }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 147,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns3()",
        "snippet": "  public void testPropReferenceInExterns3() {\n    testSame(\"asdf.foo;\", \"var asdf;\",\n        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    externValidationErrorLevel = CheckLevel.ERROR;\n    test(\n        \"asdf.foo;\", \"var asdf;\", \"\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR, null);\n\n    externValidationErrorLevel = CheckLevel.OFF;\n    test(\"asdf.foo;\", \"var asdf;\", \"var asdf;\", null, null);\n  }\n",
        "begin_line": 150,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 152,col 45)",
            "(line 154,col 5)-(line 154,col 50)",
            "(line 155,col 5)-(line 157,col 52)",
            "(line 159,col 5)-(line 159,col 48)",
            "(line 160,col 5)-(line 160,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVarInWithBlock()",
        "snippet": "  public void testVarInWithBlock() {\n    test(\"var a = {b:5}; with (a){b;}\", null, VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 164,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testInvalidFunctionDecl1()",
        "snippet": "  public void testInvalidFunctionDecl1() {\n    final CompilerTestCase testcase = this;\n\n    // A compiler pass that create invalid function names.\n    testSetupPass = new CompilerPass() {\n\n      void visit(Node n) {\n        if (n.getType() == Token.NAME\n            && !n.getString().isEmpty()\n            && n.getParent().getType() == Token.FUNCTION) {\n          n.setString(\"\");\n          testcase.getLastCompiler().reportCodeChange();\n        }\n        for (Node c : n.children()) {\n          visit(c);\n        }\n      }\n\n      @Override\n      public void process(Node externs, Node root) {\n        visit(root);\n      }\n    };\n\n    test(\"function f() {};\", null, VarCheck.INVALID_FUNCTION_DECL);\n    test(\"if (true) { function f(){}; }\", null, VarCheck.INVALID_FUNCTION_DECL);\n  }\n",
        "begin_line": 167,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 43)",
            "(line 171,col 5)-(line 189,col 6)",
            "(line 191,col 5)-(line 191,col 67)",
            "(line 192,col 5)-(line 192,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.Anonymous-a5c15d0c-9693-4c9c-a1ce-b98a75744f61.visit(com.google.javascript.rhino.Node)",
        "snippet": "      void visit(Node n) {\n        if (n.getType() == Token.NAME\n            && !n.getString().isEmpty()\n            && n.getParent().getType() == Token.FUNCTION) {\n          n.setString(\"\");\n          testcase.getLastCompiler().reportCodeChange();\n        }\n        for (Node c : n.children()) {\n          visit(c);\n        }\n      }\n",
        "begin_line": 173,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 182,col 9)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.Anonymous-3d3ba19b-7f8f-4135-91f8-0ee624b3ddd8.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public void process(Node externs, Node root) {\n        visit(root);\n      }\n",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testValidFunctionExpr()",
        "snippet": "  public void testValidFunctionExpr() {\n    testSame(\"(function() {});\");\n  }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRecursiveFunction()",
        "snippet": "  public void testRecursiveFunction() {\n    testSame(\"(function a() { return a(); })();\");\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 200,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testRecursiveFunction2()",
        "snippet": "  public void testRecursiveFunction2() {\n    testSame(\"var a = 3; (function a() { return a(); })();\");\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testLegalVarReferenceBetweenModules()",
        "snippet": "  public void testLegalVarReferenceBetweenModules() {\n    testDependentModules(\"var x = 10;\", \"var y = x++;\", null);\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMissingModuleDependencyDefault()",
        "snippet": "  public void testMissingModuleDependencyDefault() {\n    testIndependentModules(\"var x = 10;\", \"var y = x++;\",\n                           null, VarCheck.MISSING_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 211,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 213,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testViolatedModuleDependencyDefault()",
        "snippet": "  public void testViolatedModuleDependencyDefault() {\n    testDependentModules(\"var y = x++;\", \"var x = 10;\",\n                         VarCheck.VIOLATED_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 218,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMissingModuleDependencySkipNonStrict()",
        "snippet": "  public void testMissingModuleDependencySkipNonStrict() {\n    sanityCheck = true;\n    testIndependentModules(\"var x = 10;\", \"var y = x++;\",\n                           null, null);\n  }\n",
        "begin_line": 221,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 23)",
            "(line 223,col 5)-(line 224,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testViolatedModuleDependencySkipNonStrict()",
        "snippet": "  public void testViolatedModuleDependencySkipNonStrict() {\n    sanityCheck = true;\n    testDependentModules(\"var y = x++;\", \"var x = 10;\",\n                         null);\n  }\n",
        "begin_line": 227,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 23)",
            "(line 229,col 5)-(line 230,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testMissingModuleDependencySkipNonStrictPromoted()",
        "snippet": "  public void testMissingModuleDependencySkipNonStrictPromoted() {\n    sanityCheck = true;\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testIndependentModules(\"var x = 10;\", \"var y = x++;\",\n        VarCheck.STRICT_MODULE_DEP_ERROR, null);\n  }\n",
        "begin_line": 233,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 23)",
            "(line 235,col 5)-(line 235,col 49)",
            "(line 236,col 5)-(line 237,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testViolatedModuleDependencyNonStrictPromoted()",
        "snippet": "  public void testViolatedModuleDependencyNonStrictPromoted() {\n    sanityCheck = true;\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testDependentModules(\"var y = x++;\", \"var x = 10;\",\n        VarCheck.STRICT_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 240,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 23)",
            "(line 242,col 5)-(line 242,col 49)",
            "(line 243,col 5)-(line 244,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDependentStrictModuleDependencyCheck()",
        "snippet": "  public void testDependentStrictModuleDependencyCheck() {\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testDependentModules(\"var f = function() {return new B();};\",\n        \"var B = function() {}\",\n        VarCheck.STRICT_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 247,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 49)",
            "(line 249,col 5)-(line 251,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testIndependentStrictModuleDependencyCheck()",
        "snippet": "  public void testIndependentStrictModuleDependencyCheck() {\n    strictModuleDepErrorLevel = CheckLevel.ERROR;\n    testIndependentModules(\"var f = function() {return new B();};\",\n        \"var B = function() {}\",\n        VarCheck.STRICT_MODULE_DEP_ERROR, null);\n  }\n",
        "begin_line": 254,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 49)",
            "(line 256,col 5)-(line 258,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testStarStrictModuleDependencyCheck()",
        "snippet": "  public void testStarStrictModuleDependencyCheck() {\n    strictModuleDepErrorLevel = CheckLevel.WARNING;\n    testSame(createModuleStar(\"function a() {}\", \"function b() { a(); c(); }\",\n        \"function c() { a(); }\"),\n        VarCheck.STRICT_MODULE_DEP_ERROR);\n  }\n",
        "begin_line": 261,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 51)",
            "(line 263,col 5)-(line 265,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testForwardVarReferenceInLocalScope1()",
        "snippet": "  public void testForwardVarReferenceInLocalScope1() {\n    testDependentModules(\"var x = 10; function a() {y++;}\",\n                         \"var y = 11; a();\", null);\n  }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 270,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testForwardVarReferenceInLocalScope2()",
        "snippet": "  public void testForwardVarReferenceInLocalScope2() {\n    // It would be nice if this pass could use a call graph to flag this case\n    // as an error, but it currently doesn't.\n    testDependentModules(\"var x = 10; function a() {y++;} a();\",\n                         \"var y = 11;\", null);\n  }\n",
        "begin_line": 273,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 277,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDependentModules(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testDependentModules(String code1, String code2,\n                                    DiagnosticType error) {\n    testDependentModules(code1, code2, error, null);\n  }\n",
        "begin_line": 280,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testDependentModules(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testDependentModules(String code1, String code2,\n                                    DiagnosticType error,\n                                    DiagnosticType warning) {\n    testTwoModules(code1, code2, true, error, warning);\n  }\n",
        "begin_line": 285,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testIndependentModules(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testIndependentModules(String code1, String code2,\n                                      DiagnosticType error,\n                                      DiagnosticType warning) {\n    testTwoModules(code1, code2, false, error, warning);\n  }\n",
        "begin_line": 291,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testTwoModules(java.lang.String, java.lang.String, boolean, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTwoModules(String code1, String code2, boolean m2DependsOnm1,\n                              DiagnosticType error, DiagnosticType warning) {\n    JSModule m1 = new JSModule(\"m1\");\n    m1.add(JSSourceFile.fromCode(\"input1\", code1));\n    JSModule m2 = new JSModule(\"m2\");\n    m2.add(JSSourceFile.fromCode(\"input2\", code2));\n    if (m2DependsOnm1) {\n      m2.addDependency(m1);\n    }\n    test(new JSModule[] { m1, m2 },\n         new String[] { code1, code2 }, error, warning);\n  }\n",
        "begin_line": 297,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 299,col 37)",
            "(line 300,col 5)-(line 300,col 51)",
            "(line 301,col 5)-(line 301,col 37)",
            "(line 302,col 5)-(line 302,col 51)",
            "(line 303,col 5)-(line 305,col 5)",
            "(line 306,col 5)-(line 307,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testSimple()",
        "snippet": "  public void testSimple() {\n    checkSynthesizedExtern(\"x\", \"var x;\");\n    checkSynthesizedExtern(\"var x\", \"\");\n  }\n",
        "begin_line": 313,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 314,col 5)-(line 314,col 42)",
            "(line 315,col 5)-(line 315,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testSimpleSanityCheck()",
        "snippet": "  public void testSimpleSanityCheck() {\n    sanityCheck = true;\n    try {\n      checkSynthesizedExtern(\"x\", \"\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 318,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 23)",
            "(line 320,col 5)-(line 324,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testParameter()",
        "snippet": "  public void testParameter() {\n    checkSynthesizedExtern(\"function f(x){}\", \"\");\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testLocalVar()",
        "snippet": "  public void testLocalVar() {\n    checkSynthesizedExtern(\"function f(){x}\", \"var x\");\n  }\n",
        "begin_line": 331,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 332,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testTwoLocalVars()",
        "snippet": "  public void testTwoLocalVars() {\n    checkSynthesizedExtern(\"function f(){x}function g() {x}\", \"var x\");\n  }\n",
        "begin_line": 335,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 336,col 5)-(line 336,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testInnerFunctionLocalVar()",
        "snippet": "  public void testInnerFunctionLocalVar() {\n    checkSynthesizedExtern(\"function f(){function g() {x}}\", \"var x\");\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testNoCreateVarsForLabels()",
        "snippet": "  public void testNoCreateVarsForLabels() {\n    checkSynthesizedExtern(\"x:var y\", \"\");\n  }\n",
        "begin_line": 343,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 344,col 5)-(line 344,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns1()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns1() {\n    checkSynthesizedExtern(\n        \"x.foo;\", \"var x;\", \"var x; x.foo;\");\n  }\n",
        "begin_line": 347,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 349,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns2()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns2() {\n    checkSynthesizedExtern(\n        \"x;\", \"var x;\", \"var x; x;\");\n  }\n",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 354,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns3()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns3() {\n    checkSynthesizedExtern(\n        \"x.foo;\", \"function x() {}\", \"var x; x.foo; \");\n  }\n",
        "begin_line": 357,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 359,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.testVariableInNormalCodeUsedInExterns4()",
        "snippet": "  public void testVariableInNormalCodeUsedInExterns4() {\n    checkSynthesizedExtern(\n        \"x;\", \"function x() {}\", \"var x; x; \");\n  }\n",
        "begin_line": 362,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 363,col 5)-(line 364,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VariableTestCheck.VariableTestCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    VariableTestCheck(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 370,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 371,col 7)-(line 371,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VariableTestCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root),\n          new AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (NodeUtil.isName(n) && !NodeUtil.isFunction(parent)\n              && parent.getType() != Token.LABEL) {\n            assertTrue(\"Variable \" + n.getString() + \" should have be declared\",\n                t.getScope().isDeclared(n.getString(), true));\n          }\n        }\n      });\n    }\n",
        "begin_line": 374,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 376,col 7)-(line 386,col 9)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.VariableTestCheck.Anonymous-c496be38-40dc-4896-91bb-2268c1f4a187.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (NodeUtil.isName(n) && !NodeUtil.isFunction(parent)\n              && parent.getType() != Token.LABEL) {\n            assertTrue(\"Variable \" + n.getString() + \" should have be declared\",\n                t.getScope().isDeclared(n.getString(), true));\n          }\n        }\n",
        "begin_line": 378,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 380,col 11)-(line 384,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.checkSynthesizedExtern(java.lang.String, java.lang.String)",
        "snippet": "  public void checkSynthesizedExtern(\n      String input, String expectedExtern) {\n    checkSynthesizedExtern(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 390,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 392,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/VarCheckTest.java",
        "signature": "com.google.javascript.jscomp.VarCheckTest.checkSynthesizedExtern(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  public void checkSynthesizedExtern(\n      String extern, String input, String expectedExtern) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n    compiler.init(\n        new JSSourceFile[] { JSSourceFile.fromCode(\"extern\", extern) },\n        new JSSourceFile[] { JSSourceFile.fromCode(\"input\", input) },\n        options);\n    compiler.parseInputs();\n    assertFalse(compiler.hasErrors());\n\n    Node externsAndJs = compiler.getRoot();\n    Node root = externsAndJs.getLastChild();\n\n    Node rootOriginal = root.cloneTree();\n    Node externs = externsAndJs.getFirstChild();\n\n    Node expected = compiler.parseTestCode(expectedExtern);\n    assertFalse(compiler.hasErrors());\n\n    (new VarCheck(compiler, sanityCheck))\n        .process(externs, root);\n    if (!sanityCheck) {\n      (new VariableTestCheck(compiler)).process(externs, root);\n    }\n\n    String externsCode = compiler.toSource(externs);\n    String expectedCode = compiler.toSource(expected);\n\n    assertEquals(expectedCode, externsCode);\n  }\n",
        "begin_line": 395,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 397,col 39)",
            "(line 398,col 5)-(line 398,col 52)",
            "(line 399,col 5)-(line 401,col 24)",
            "(line 402,col 5)-(line 405,col 17)",
            "(line 406,col 5)-(line 406,col 27)",
            "(line 407,col 5)-(line 407,col 38)",
            "(line 409,col 5)-(line 409,col 43)",
            "(line 410,col 5)-(line 410,col 44)",
            "(line 412,col 5)-(line 412,col 41)",
            "(line 413,col 5)-(line 413,col 48)",
            "(line 415,col 5)-(line 415,col 59)",
            "(line 416,col 5)-(line 416,col 38)",
            "(line 418,col 5)-(line 419,col 32)",
            "(line 420,col 5)-(line 422,col 5)",
            "(line 424,col 5)-(line 424,col 52)",
            "(line 425,col 5)-(line 425,col 54)",
            "(line 427,col 5)-(line 427,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 112,
        "end_line": 118,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 113,col 5)-(line 115,col 6)",
            "(line 116,col 5)-(line 116,col 39)",
            "(line 117,col 5)-(line 117,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 141,
        "end_line": 141,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 150,
        "end_line": 165,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 52)",
            "(line 153,col 5)-(line 155,col 5)",
            "(line 159,col 5)-(line 159,col 32)",
            "(line 161,col 5)-(line 162,col 65)",
            "(line 163,col 5)-(line 163,col 55)",
            "(line 164,col 5)-(line 164,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 175,
        "end_line": 179,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 213,
        "end_line": 216,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 214,col 5)-(line 214,col 29)",
            "(line 215,col 5)-(line 215,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 28)",
            "(line 254,col 5)-(line 254,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 261,
        "end_line": 263,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 270,
        "end_line": 272,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 275,
        "end_line": 283,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 277,col 5)-(line 279,col 40)",
            "(line 281,col 5)-(line 282,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 303,
        "end_line": 305,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 318,
        "end_line": 321,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 320,col 5)-(line 320,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 333,
        "end_line": 336,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 349,
        "end_line": 352,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 351,col 5)-(line 351,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 368,
        "end_line": 375,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 373,col 6)",
            "(line 374,col 5)-(line 374,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 391,
        "end_line": 411,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 41)",
            "(line 395,col 5)-(line 395,col 28)",
            "(line 397,col 5)-(line 397,col 43)",
            "(line 399,col 5)-(line 401,col 5)",
            "(line 404,col 5)-(line 404,col 39)",
            "(line 405,col 5)-(line 406,col 58)",
            "(line 408,col 5)-(line 408,col 71)",
            "(line 410,col 5)-(line 410,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 431,
        "end_line": 433,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 432,col 5)-(line 432,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 447,col 5)-(line 447,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 463,
        "end_line": 474,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 41)",
            "(line 466,col 5)-(line 466,col 28)",
            "(line 468,col 5)-(line 468,col 56)",
            "(line 469,col 5)-(line 471,col 5)",
            "(line 472,col 5)-(line 472,col 55)",
            "(line 473,col 5)-(line 473,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 482,
        "end_line": 484,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 483,col 5)-(line 483,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 494,
        "end_line": 497,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 509,
        "end_line": 516,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 511,col 5)-(line 511,col 41)",
            "(line 512,col 5)-(line 512,col 28)",
            "(line 514,col 5)-(line 514,col 56)",
            "(line 515,col 5)-(line 515,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 523,
        "end_line": 525,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 534,
        "end_line": 536,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 535,col 5)-(line 535,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 546,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 547,col 5)-(line 551,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 562,
        "end_line": 564,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 563,col 5)-(line 563,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 575,
        "end_line": 582,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 577,col 5)-(line 581,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 595,
        "end_line": 601,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 597,col 5)-(line 599,col 6)",
            "(line 600,col 5)-(line 600,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 608,
        "end_line": 610,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 609,col 5)-(line 609,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 631,
        "end_line": 634,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 641,
        "end_line": 643,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 642,col 5)-(line 642,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 651,
        "end_line": 664,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 663,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 677,
        "end_line": 680,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 679,col 5)-(line 679,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.checkTreeEqualsSilent(mainRoot);\n      boolean externsChange = !externsRootClone\n          .checkTreeEqualsSilent(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 697,
        "end_line": 898,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 700,col 5)-(line 700,col 51)",
            "(line 701,col 5)-(line 701,col 44)",
            "(line 703,col 5)-(line 703,col 39)",
            "(line 704,col 5)-(line 705,col 66)",
            "(line 707,col 5)-(line 707,col 44)",
            "(line 708,col 5)-(line 708,col 40)",
            "(line 711,col 5)-(line 711,col 38)",
            "(line 712,col 5)-(line 712,col 54)",
            "(line 713,col 5)-(line 713,col 50)",
            "(line 715,col 5)-(line 715,col 45)",
            "(line 716,col 5)-(line 716,col 68)",
            "(line 717,col 5)-(line 717,col 34)",
            "(line 718,col 5)-(line 718,col 59)",
            "(line 719,col 5)-(line 719,col 35)",
            "(line 721,col 5)-(line 722,col 39)",
            "(line 724,col 5)-(line 764,col 5)",
            "(line 766,col 5)-(line 897,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 900,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 902,col 57)",
            "(line 903,col 5)-(line 903,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 909,
        "end_line": 927,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 910,col 5)-(line 910,col 41)",
            "(line 911,col 5)-(line 911,col 62)",
            "(line 912,col 5)-(line 914,col 5)",
            "(line 915,col 5)-(line 915,col 55)",
            "(line 916,col 5)-(line 916,col 39)",
            "(line 917,col 5)-(line 918,col 66)",
            "(line 919,col 5)-(line 919,col 44)",
            "(line 920,col 5)-(line 920,col 42)",
            "(line 922,col 5)-(line 925,col 5)",
            "(line 926,col 5)-(line 926,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 929,
        "end_line": 931,
        "comment": "",
        "child_ranges": [
            "(line 930,col 5)-(line 930,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 937,
        "end_line": 943,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 938,col 5)-(line 938,col 47)",
            "(line 939,col 5)-(line 941,col 5)",
            "(line 942,col 5)-(line 942,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 949,
        "end_line": 955,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 950,col 5)-(line 950,col 47)",
            "(line 951,col 5)-(line 953,col 5)",
            "(line 954,col 5)-(line 954,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 962,
        "end_line": 969,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 48)",
            "(line 964,col 5)-(line 964,col 47)",
            "(line 965,col 5)-(line 967,col 5)",
            "(line 968,col 5)-(line 968,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 976,
        "end_line": 982,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 977,col 5)-(line 977,col 47)",
            "(line 978,col 5)-(line 980,col 5)",
            "(line 981,col 5)-(line 981,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 988,
        "end_line": 995,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 53)",
            "(line 990,col 5)-(line 993,col 5)",
            "(line 994,col 5)-(line 994,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 998,
        "end_line": 1000,
        "comment": "",
        "child_ranges": [
            "(line 999,col 7)-(line 999,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1002,
        "end_line": 1003,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1005,
        "end_line": 1006,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1009,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1010,col 39)",
            "(line 1011,col 5)-(line 1011,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.VarCheckTest",
            "com.google.javascript.jscomp.NormalizeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1014,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 5)-(line 1015,col 41)"
        ]
    }
]