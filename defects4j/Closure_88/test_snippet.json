[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    lastCompiler = null;\n    outReader = new ByteArrayOutputStream();\n    errReader = new ByteArrayOutputStream();\n    useStringComparison = false;\n    useModules = ModulePattern.NONE;\n    args.clear();\n    exitCodes = Lists.newArrayList();\n  }\n",
        "begin_line": 91,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 18)",
            "(line 94,col 5)-(line 94,col 24)",
            "(line 95,col 5)-(line 95,col 44)",
            "(line 96,col 5)-(line 96,col 44)",
            "(line 97,col 5)-(line 97,col 32)",
            "(line 98,col 5)-(line 98,col 36)",
            "(line 99,col 5)-(line 99,col 17)",
            "(line 100,col 5)-(line 100,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 110,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 40)",
            "(line 115,col 5)-(line 115,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 40)",
            "(line 120,col 5)-(line 120,col 40)",
            "(line 121,col 5)-(line 121,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 124,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 40)",
            "(line 126,col 5)-(line 126,col 62)",
            "(line 128,col 5)-(line 128,col 44)",
            "(line 129,col 5)-(line 130,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 40)",
            "(line 135,col 5)-(line 135,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 138,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 139,col 40)",
            "(line 140,col 5)-(line 140,col 49)",
            "(line 141,col 5)-(line 141,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 40)",
            "(line 146,col 5)-(line 146,col 43)",
            "(line 147,col 5)-(line 147,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties1()",
        "snippet": "  public void testCheckUndefinedProperties1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 150,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 40)",
            "(line 152,col 5)-(line 152,col 49)",
            "(line 153,col 5)-(line 153,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties2()",
        "snippet": "  public void testCheckUndefinedProperties2() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 40)",
            "(line 158,col 5)-(line 158,col 47)",
            "(line 159,col 5)-(line 159,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties3()",
        "snippet": "  public void testCheckUndefinedProperties3() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() {var x = {}; var y = x.bar;}\",\n        TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 40)",
            "(line 164,col 5)-(line 165,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function (a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 67)",
            "(line 170,col 5)-(line 170,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = true, BAR = 5, CCC = true, DDD = true;\");\n  }\n",
        "begin_line": 173,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 29)",
            "(line 175,col 5)-(line 175,col 35)",
            "(line 176,col 5)-(line 176,col 20)",
            "(line 176,col 22)-(line 176,col 37)",
            "(line 177,col 5)-(line 177,col 19)",
            "(line 177,col 21)-(line 177,col 36)",
            "(line 178,col 5)-(line 182,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag2()",
        "snippet": "  public void testDefineFlag2() {\n    args.add(\"--define=FOO='x\\\"'\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x\\\\\\\"\\\";\");\n  }\n",
        "begin_line": 185,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 35)",
            "(line 187,col 5)-(line 188,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3()",
        "snippet": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }\n",
        "begin_line": 191,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 36)",
            "(line 193,col 5)-(line 194,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 30)",
            "(line 199,col 5)-(line 199,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 202,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 60)",
            "(line 204,col 5)-(line 205,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @type { not a type name } */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @type { not a type name } */ var x;\");\n  }\n",
        "begin_line": 208,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 40)",
            "(line 210,col 5)-(line 211,col 41)",
            "(line 212,col 5)-(line 212,col 38)",
            "(line 213,col 5)-(line 213,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {}; goog.dom = {};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 216,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 218,col 42)",
            "(line 219,col 5)-(line 219,col 51)",
            "(line 220,col 5)-(line 220,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70()",
        "snippet": "  public void testIssue70() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 230,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 59)",
            "(line 232,col 5)-(line 232,col 31)",
            "(line 233,col 5)-(line 234,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 237,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 57)",
            "(line 239,col 5)-(line 239,col 40)",
            "(line 240,col 5)-(line 247,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue297()",
        "snippet": "  public void testIssue297() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n         \"}\",\n         \"function f(b) {\" +\n         \" var a;\" +\n         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);\" +\n         \"}\");\n  }  \n",
        "begin_line": 250,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 57)",
            "(line 252,col 5)-(line 259,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    test(\"function foo(a) {}\",\n         \"function foo() {}\");\n  }\n",
        "begin_line": 262,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 57)",
            "(line 264,col 5)-(line 264,col 30)",
            "(line 265,col 5)-(line 266,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 269,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 57)",
            "(line 271,col 5)-(line 271,col 29)",
            "(line 272,col 5)-(line 273,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {}\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"throw (new function() {}).a;\");\n  }\n",
        "begin_line": 276,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 59)",
            "(line 278,col 5)-(line 278,col 38)",
            "(line 279,col 5)-(line 279,col 30)",
            "(line 280,col 5)-(line 283,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {}\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"throw (new function Foo() {}).$x$;\");\n  }\n",
        "begin_line": 286,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 59)",
            "(line 288,col 5)-(line 288,col 38)",
            "(line 289,col 5)-(line 289,col 29)",
            "(line 290,col 5)-(line 293,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag1()",
        "snippet": "  public void testBooleanFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 296,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 57)",
            "(line 298,col 5)-(line 298,col 24)",
            "(line 299,col 5)-(line 300,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag2()",
        "snippet": "  public void testBooleanFlag2() {\n    args.add(\"--debug\");\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 303,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 24)",
            "(line 305,col 5)-(line 305,col 57)",
            "(line 306,col 5)-(line 307,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHelpFlag()",
        "snippet": "  public void testHelpFlag() {\n    args.add(\"--help\");\n    assertFalse(\n        createCommandLineRunner(\n            new String[] {\"function f() {}\"}).shouldRunCompiler());\n  }\n",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 23)",
            "(line 312,col 5)-(line 314,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting1()",
        "snippet": "  public void testExternsLifting1() throws Exception{\n    String code = \"/** @externs */ function f() {}\";\n    test(new String[] {code},\n         new String[] {});\n\n    assertEquals(2, lastCompiler.getExternsForTesting().size());\n\n    CompilerInput extern = lastCompiler.getExternsForTesting().get(1);\n    assertNull(extern.getModule());\n    assertTrue(extern.isExtern());\n    assertEquals(code, extern.getCode());\n\n    assertEquals(1, lastCompiler.getInputsForTesting().size());\n\n    CompilerInput input = lastCompiler.getInputsForTesting().get(0);\n    assertNotNull(input.getModule());\n    assertFalse(input.isExtern());\n    assertEquals(\"\", input.getCode());\n  }\n",
        "begin_line": 317,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 318,col 5)-(line 318,col 52)",
            "(line 319,col 5)-(line 320,col 26)",
            "(line 322,col 5)-(line 322,col 64)",
            "(line 324,col 5)-(line 324,col 70)",
            "(line 325,col 5)-(line 325,col 35)",
            "(line 326,col 5)-(line 326,col 34)",
            "(line 327,col 5)-(line 327,col 41)",
            "(line 329,col 5)-(line 329,col 63)",
            "(line 331,col 5)-(line 331,col 68)",
            "(line 332,col 5)-(line 332,col 37)",
            "(line 333,col 5)-(line 333,col 34)",
            "(line 334,col 5)-(line 334,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting2()",
        "snippet": "  public void testExternsLifting2() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\"/** @externs */ function f() {}\", \"f(3);\"},\n         new String[] {\"f(3);\"},\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 337,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 40)",
            "(line 339,col 5)-(line 341,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOff()",
        "snippet": "  public void testSourceSortingOff() {\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         }, ProcessClosurePrimitives.LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 344,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 345,col 5)-(line 348,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn()",
        "snippet": "  public void testSourceSortingOn() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 351,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 352,col 51)",
            "(line 353,col 5)-(line 360,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps1()",
        "snippet": "  public void testSourceSortingCircularDeps1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 363,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 51)",
            "(line 365,col 5)-(line 370,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps2()",
        "snippet": "  public void testSourceSortingCircularDeps2() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('roses.lime.juice');\",\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\",\n          \"goog.provide('gimlet');\" +\n          \"     goog.require('gin'); goog.require('roses.lime.juice');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 373,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 374,col 5)-(line 374,col 51)",
            "(line 375,col 5)-(line 383,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn1()",
        "snippet": "  public void testSourcePruningOn1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 386,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 51)",
            "(line 388,col 5)-(line 396,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn2()",
        "snippet": "  public void testSourcePruningOn2() {\n    args.add(\"--closure_entry_point=guinness\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var guinness = {};\"\n         });\n  }\n",
        "begin_line": 399,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 47)",
            "(line 401,col 5)-(line 409,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn3()",
        "snippet": "  public void testSourcePruningOn3() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 412,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 45)",
            "(line 414,col 5)-(line 421,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn4()",
        "snippet": "  public void testSourcePruningOn4() {\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 424,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 425,col 45)",
            "(line 426,col 5)-(line 426,col 43)",
            "(line 427,col 5)-(line 435,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn5()",
        "snippet": "  public void testSourcePruningOn5() {\n    args.add(\"--closure_entry_point=shiraz\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         Compiler.MISSING_ENTRY_ERROR);\n  }\n",
        "begin_line": 438,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 439,col 45)",
            "(line 440,col 5)-(line 445,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn6()",
        "snippet": "  public void testSourcePruningOn6() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 448,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 45)",
            "(line 450,col 5)-(line 459,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testForwardDeclareDroppedTypes()",
        "snippet": "  public void testForwardDeclareDroppedTypes() {\n    args.add(\"--manage_closure_dependencies=true\");\n\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\",\n          \"goog.provide('Scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         });\n\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         },\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 463,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 51)",
            "(line 466,col 5)-(line 466,col 40)",
            "(line 467,col 5)-(line 475,col 12)",
            "(line 477,col 5)-(line 485,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion1()",
        "snippet": "  public void testSourceMapExpansion1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--create_source_map=%outname%.map\");\n    testSame(\"var x = 3;\");\n    assertEquals(\"/path/to/out.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 488,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 489,col 5)-(line 489,col 33)",
            "(line 490,col 5)-(line 490,col 32)",
            "(line 491,col 5)-(line 491,col 50)",
            "(line 492,col 5)-(line 492,col 27)",
            "(line 493,col 5)-(line 495,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion2()",
        "snippet": "  public void testSourceMapExpansion2() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 498,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 37)",
            "(line 500,col 5)-(line 500,col 50)",
            "(line 501,col 5)-(line 501,col 48)",
            "(line 502,col 5)-(line 502,col 56)",
            "(line 503,col 5)-(line 505,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion3()",
        "snippet": "  public void testSourceMapExpansion3() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo_\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo_m0.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(),\n            lastCompiler.getModuleGraph().getRootModule()));\n  }\n",
        "begin_line": 508,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 37)",
            "(line 510,col 5)-(line 510,col 50)",
            "(line 511,col 5)-(line 511,col 49)",
            "(line 512,col 5)-(line 512,col 56)",
            "(line 513,col 5)-(line 516,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat1()",
        "snippet": "  public void testSourceMapFormat1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.LEGACY,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 519,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 520,col 33)",
            "(line 521,col 5)-(line 521,col 32)",
            "(line 522,col 5)-(line 522,col 27)",
            "(line 523,col 5)-(line 524,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion()",
        "snippet": "  public void testCharSetExpansion() {\n    testSame(\"\");\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n  }\n",
        "begin_line": 527,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 528,col 17)",
            "(line 529,col 5)-(line 529,col 70)",
            "(line 530,col 5)-(line 530,col 32)",
            "(line 531,col 5)-(line 531,col 17)",
            "(line 532,col 5)-(line 532,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testChainModuleManifest()",
        "snippet": "  public void testChainModuleManifest() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestTo(\n        lastCompiler.getModuleGraph(), builder);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m1}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m2}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 535,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 536,col 37)",
            "(line 537,col 5)-(line 538,col 67)",
            "(line 540,col 5)-(line 540,col 48)",
            "(line 541,col 5)-(line 542,col 48)",
            "(line 543,col 5)-(line 555,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testStarModuleManifest()",
        "snippet": "  public void testStarModuleManifest() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestTo(\n        lastCompiler.getModuleGraph(), builder);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m0}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m0}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 558,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 559,col 36)",
            "(line 560,col 5)-(line 561,col 67)",
            "(line 563,col 5)-(line 563,col 48)",
            "(line 564,col 5)-(line 565,col 48)",
            "(line 566,col 5)-(line 578,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag()",
        "snippet": "  public void testVersionFlag() {\n    args.add(\"--version\");\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 581,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 582,col 5)-(line 582,col 26)",
            "(line 583,col 5)-(line 583,col 17)",
            "(line 584,col 5)-(line 588,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testPrintAstFlag()",
        "snippet": "  public void testPrintAstFlag() {\n    args.add(\"--print_ast=true\");\n    testSame(\"\");\n    assertEquals(\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node1 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> RETURN [label=\\\"SYN_BLOCK\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\\n\",\n        new String(outReader.toByteArray()));\n  }\n",
        "begin_line": 591,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 592,col 5)-(line 592,col 33)",
            "(line 593,col 5)-(line 593,col 17)",
            "(line 594,col 5)-(line 604,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 614,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 617,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 618,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    test(original, compiled, null);\n  }\n",
        "begin_line": 625,
        "end_line": 627,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 626,col 5)-(line 626,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, String[] compiled,\n                    DiagnosticType warning) {\n    Compiler compiler = compile(original);\n\n    if (warning == null) {\n      assertEquals(\"Expected no warnings or errors\\n\" +\n          \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n          \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          0, compiler.getErrors().length + compiler.getWarnings().length);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 635,
        "end_line": 659,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   * If {@code warning} is non-null, we will also check if the given\n   * warning type was emitted.\n   ",
        "child_ranges": [
            "(line 637,col 5)-(line 637,col 42)",
            "(line 639,col 5)-(line 647,col 5)",
            "(line 649,col 5)-(line 649,col 50)",
            "(line 650,col 5)-(line 658,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 664,
        "end_line": 666,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 665,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n\n    assertTrue(exitCodes.size() > 0);\n    int lastExitCode = exitCodes.get(exitCodes.size() - 1);\n\n    if (compiler.getErrors().length > 0) {\n      assertEquals(1, compiler.getErrors().length);\n      assertEquals(warning, compiler.getErrors()[0].getType());\n      assertEquals(1, lastExitCode);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n      assertEquals(0, lastExitCode);\n    }\n  }\n",
        "begin_line": 671,
        "end_line": 690,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 672,col 42)",
            "(line 673,col 5)-(line 676,col 72)",
            "(line 678,col 5)-(line 678,col 37)",
            "(line 679,col 5)-(line 679,col 59)",
            "(line 681,col 5)-(line 689,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.createCommandLineRunner(java.lang.String[])",
        "snippet": "  private CommandLineRunner createCommandLineRunner(String[] original) {\n    for (int i = 0; i < original.length; i++) {\n      args.add(\"--js\");\n      args.add(\"/path/to/input\" + i + \".js\");\n      if (useModules == ModulePattern.CHAIN) {\n        args.add(\"--module\");\n        args.add(\"mod\" + i + \":1\" + (i > 0 ? (\":mod\" + (i - 1)) : \"\"));\n      } else if (useModules == ModulePattern.STAR) {\n        args.add(\"--module\");\n        args.add(\"mod\" + i + \":1\" + (i > 0 ? \":mod0\" : \"\"));\n      }\n    }\n\n    String[] argStrings = args.toArray(new String[] {});\n    return new CommandLineRunner(\n        argStrings,\n        new PrintStream(outReader),\n        new PrintStream(errReader));\n  }\n",
        "begin_line": 692,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 693,col 5)-(line 703,col 5)",
            "(line 705,col 5)-(line 705,col 56)",
            "(line 706,col 5)-(line 709,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CommandLineRunner runner = createCommandLineRunner(original);\n    assertTrue(runner.shouldRunCompiler());\n    Supplier<List<JSSourceFile>> inputsSupplier = null;\n    Supplier<List<JSModule>> modulesSupplier = null;\n\n    if (useModules == ModulePattern.NONE) {\n      List<JSSourceFile> inputs = Lists.newArrayList();\n      for (int i = 0; i < original.length; i++) {\n        inputs.add(JSSourceFile.fromCode(\"input\" + i, original[i]));\n      }\n      inputsSupplier = Suppliers.ofInstance(inputs);\n    } else if (useModules == ModulePattern.STAR) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleStar(original)));\n    } else if (useModules == ModulePattern.CHAIN) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleChain(original)));\n    } else {\n      throw new IllegalArgumentException(\"Unknown module type: \" + useModules);\n    }\n\n    runner.enableTestMode(\n        Suppliers.<List<JSSourceFile>>ofInstance(externs),\n        inputsSupplier,\n        modulesSupplier,\n        new Function<Integer, Boolean>() {\n          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n        });\n    runner.run();\n    lastCompiler = runner.getCompiler();\n    lastCommandLineRunner = runner;\n    return lastCompiler;\n  }\n",
        "begin_line": 712,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 713,col 5)-(line 713,col 65)",
            "(line 714,col 5)-(line 714,col 43)",
            "(line 715,col 5)-(line 715,col 55)",
            "(line 716,col 5)-(line 716,col 52)",
            "(line 718,col 5)-(line 734,col 5)",
            "(line 736,col 5)-(line 745,col 11)",
            "(line 746,col 5)-(line 746,col 17)",
            "(line 747,col 5)-(line 747,col 40)",
            "(line 748,col 5)-(line 748,col 35)",
            "(line 749,col 5)-(line 749,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.Anonymous-5b294b90-dadb-412c-8c24-44f5e8f70391.apply(java.lang.Integer)",
        "snippet": "          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n",
        "begin_line": 741,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 743,col 13)-(line 743,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = new CommandLineRunner(argStrings);\n    Compiler compiler = runner.createCompiler();\n    List<JSSourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(JSSourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.init(externs, inputs, new CompilerOptions());\n    Node all = compiler.parseInputs();\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 752,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 56)",
            "(line 754,col 5)-(line 754,col 65)",
            "(line 755,col 5)-(line 755,col 48)",
            "(line 756,col 5)-(line 756,col 53)",
            "(line 757,col 5)-(line 759,col 5)",
            "(line 760,col 5)-(line 760,col 58)",
            "(line 761,col 5)-(line 761,col 38)",
            "(line 762,col 5)-(line 762,col 32)",
            "(line 763,col 5)-(line 763,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.DeadAssignmentsEliminationTest()",
        "snippet": "  public DeadAssignmentsEliminationTest() {\n    super(\"var extern;\");\n  }\n",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    return new CompilerPass() {\n      public void process(Node externs, Node js) {\n        NodeTraversal.traverse(\n            compiler, js, new DeadAssignmentsElimination(compiler));\n      }\n    };\n  }\n",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 43,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.Anonymous-505103bd-443b-441b-a70f-a641548394d0.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      public void process(Node externs, Node js) {\n        NodeTraversal.traverse(\n            compiler, js, new DeadAssignmentsElimination(compiler));\n      }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 41,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testSimple()",
        "snippet": "  public void testSimple() {\n    inFunction(\"var a; a=1\", \"var a; 1\");\n    inFunction(\"var a; a=1+1\", \"var a; 1+1\");\n    inFunction(\"var a; a=foo();\", \"var a; foo()\");\n    inFunction(\"a=1; var a; a=foo();\", \"1; var a; foo();\");\n    // This should be: \"var a; (function f(){})\", but we don't mess with\n    // functions with inner functions.\n    inFunction(\"var a; a=function f(){}\");\n  }\n",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 41)",
            "(line 53,col 5)-(line 53,col 45)",
            "(line 54,col 5)-(line 54,col 50)",
            "(line 55,col 5)-(line 55,col 59)",
            "(line 58,col 5)-(line 58,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testLoops()",
        "snippet": "  public void testLoops() {\n    inFunction(\"for(var a=0; a<10; a++) {}\");\n    inFunction(\"var x; for(var a=0; a<10; a++) {x=a}; a(x)\");\n    inFunction(\"var x; for(var a=0; x=a<10; a++) {}\",\n        \"var x; for(var a=0; a<10; a++) {}\");\n    inFunction(\"var x; for(var a=0; a<10; x=a) {}\",\n        \"var x; for(var a=0; a<10; a) {}\");\n    inFunction(\"var x; for(var a=0; a<10; x=a,a++) {}\",\n        \"var x; for(var a=0; a<10; a,a++) {}\");\n    inFunction(\"var x; for(var a=0; a<10; a++,x=a) {}\",\n        \"var x; for(var a=0; a<10; a++,a) {}\");\n    inFunction(\"var x;for(var a=0; a<10; a++) {x=1}\",\n        \"var x;for(var a=0; a<10; a++) {1}\");\n    inFunction(\"var x; x=1; do{x=2}while(0); x\",\n        \"var x; 1; do{x=2}while(0); x\");\n    inFunction(\"var x; x=1; while(1){x=2}; x\");\n  }\n",
        "begin_line": 61,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 45)",
            "(line 63,col 5)-(line 63,col 61)",
            "(line 64,col 5)-(line 65,col 45)",
            "(line 66,col 5)-(line 67,col 43)",
            "(line 68,col 5)-(line 69,col 47)",
            "(line 70,col 5)-(line 71,col 47)",
            "(line 72,col 5)-(line 73,col 45)",
            "(line 74,col 5)-(line 75,col 40)",
            "(line 76,col 5)-(line 76,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testMultiPaths()",
        "snippet": "  public void testMultiPaths() {\n    inFunction(\"var x,y; if(x)y=1;\", \"var x,y; if(x)1;\");\n    inFunction(\"var x,y; if(x)y=1; y=2; x(y)\", \"var x,y; if(x)1; y=2; x(y)\");\n    inFunction(\"var x; switch(x) { case(1): x=1; break; } x\");\n    inFunction(\"var x; switch(x) { case(1): x=1; break; }\",\n        \"var x; switch(x) { case(1): 1; break; }\");\n  }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 57)",
            "(line 81,col 5)-(line 81,col 77)",
            "(line 82,col 5)-(line 82,col 62)",
            "(line 83,col 5)-(line 84,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testUsedAsConditions()",
        "snippet": "  public void testUsedAsConditions() {\n    inFunction(\"var x; while(x=1){}\", \"var x; while(1){}\");\n    inFunction(\"var x; if(x=1){}\", \"var x; if(1){}\");\n    inFunction(\"var x; do{}while(x=1)\", \"var x; do{}while(1)\");\n    inFunction(\"var x; if(x=1==4&&1){}\", \"var x; if(1==4&&1) {}\");\n    inFunction(\"var x; if(0&&(x=1)){}\", \"var x; if(0&&1){}\");\n    inFunction(\"var x; if((x=2)&&(x=1)){}\", \"var x; if(2&&1){}\");\n    inFunction(\"var x; x=2; if(0&&x=1){}; x\");\n\n    inFunction(\"var x,y; if( (x=1)+(y=2) > 3){}\",\n        \"var x,y; if( 1+2 > 3){}\");\n  }\n",
        "begin_line": 87,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 59)",
            "(line 89,col 5)-(line 89,col 53)",
            "(line 90,col 5)-(line 90,col 63)",
            "(line 91,col 5)-(line 91,col 66)",
            "(line 92,col 5)-(line 92,col 61)",
            "(line 93,col 5)-(line 93,col 65)",
            "(line 94,col 5)-(line 94,col 46)",
            "(line 96,col 5)-(line 97,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testUsedAsConditionsInSwitchStatements()",
        "snippet": "  public void testUsedAsConditionsInSwitchStatements() {\n    inFunction(\"var x; switch(x=1){}\",\"var x; switch(1){}\");\n    inFunction(\"var x; switch(x){case(x=1):break;}\",\n        \"var x; switch(x){case(1):break;}\");\n\n    inFunction(\"var x,y; switch(y) { case (x += 1): break; case (x): break;}\");\n\n    inFunction(\"var x,y; switch(y) { case (x = 1): break; case (2): break;}\",\n               \"var x,y; switch(y) { case (1): break; case (2): break;}\");\n    inFunction(\"var x,y; switch(y) { case (x+=1): break; case (x=2): break;}\",\n               \"var x,y; switch(y) { case (x+1): break; case (2): break;}\");\n  }\n",
        "begin_line": 100,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 60)",
            "(line 102,col 5)-(line 103,col 44)",
            "(line 105,col 5)-(line 105,col 79)",
            "(line 107,col 5)-(line 108,col 74)",
            "(line 109,col 5)-(line 110,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentInReturn()",
        "snippet": "  public void testAssignmentInReturn() {\n    inFunction(\"var x; return x = 1;\", \"var x; return 1\");\n    inFunction(\"var x; return\");\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 58)",
            "(line 115,col 5)-(line 115,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentSamples()",
        "snippet": "  public void testAssignmentSamples() {\n    // We want this to be \"var x\" in these cases.\n    inFunction(\"var x = 2;\");\n    inFunction(\"var x = 2; x++;\", \"var x=2; void 0\");\n    inFunction(\"var x; x=x++;\", \"var x;x++\");\n    inFunction(\"var x; x+=1;\", \"var x;x+1\");\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 29)",
            "(line 121,col 5)-(line 121,col 53)",
            "(line 122,col 5)-(line 122,col 45)",
            "(line 123,col 5)-(line 123,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentInArgs()",
        "snippet": "  public void testAssignmentInArgs() {\n    inFunction(\"var x; foo(x = 1);\", \"var x; foo(1);\");\n    inFunction(\"var x; return foo(x = 1);\", \"var x; return foo(1);\");\n  }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 55)",
            "(line 128,col 5)-(line 128,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignAndReadInCondition()",
        "snippet": "  public void testAssignAndReadInCondition() {\n    inFunction(\"var a, b; if ((a = 1) && (b = a)) {b}\");\n    inFunction(\"var a, b; if ((b = a) && (a = 1)) {b}\",\n               \"var a, b; if ((b = a) && (1)) {b}\");\n  }\n",
        "begin_line": 134,
        "end_line": 138,
        "comment": "\n   * BUG #1358904\n   ",
        "child_ranges": [
            "(line 135,col 5)-(line 135,col 56)",
            "(line 136,col 5)-(line 137,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testParameters()",
        "snippet": "  public void testParameters() {\n    inFunction(\"param1=1; param1=2; param2(param1)\",\n        \"1; param1=2; param2(param1)\");\n    inFunction(\"param1=param2()\", \"param2()\");\n  }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 142,col 39)",
            "(line 143,col 5)-(line 143,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testErrorHandling()",
        "snippet": "  public void testErrorHandling() {\n    inFunction(\"var x; try{ x=1 } catch(e){ x=2 }; x\");\n    inFunction(\"var x; try{ x=1 } catch(e){ x=2 }\",\n        \"var x;try{ 1 } catch(e) { 2 }\");\n    inFunction(\"var x; try{ x=1 } finally { x=2 }; x\",\n        \"var x;try{ 1 } finally{ x=2 }; x\");\n    inFunction(\"var x; while(1) { try{x=1;break}finally{x} }\");\n    inFunction(\"var x; try{throw 1} catch(e){x=2} finally{x}\");\n    inFunction(\"var x; try{x=1;throw 1;x} finally{x=2}; x\",\n        \"var x; try{1;throw 1;x} finally{x=2}; x\");\n  }\n",
        "begin_line": 146,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 55)",
            "(line 148,col 5)-(line 149,col 41)",
            "(line 150,col 5)-(line 151,col 44)",
            "(line 152,col 5)-(line 152,col 63)",
            "(line 153,col 5)-(line 153,col 63)",
            "(line 154,col 5)-(line 155,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testDeadVarDeclarations()",
        "snippet": "  public void testDeadVarDeclarations() {\n    // Dead assignments in VAR is _NOT_ supported yet.\n    inFunction(\"var x=1;\");\n    inFunction(\"var x=1; x=2; x\");\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 27)",
            "(line 161,col 5)-(line 161,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testGlobal()",
        "snippet": "  public void testGlobal() {\n    // Doesn't do any work on global scope yet.\n    test(\"var x; x=1; x=2; x=3;\", \"var x; x=1; x=2; x=3;\");\n  }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInnerFunctions()",
        "snippet": "  public void testInnerFunctions() {\n    inFunction(\"var x = function() { var x; x=1; }\",\n        \"var x = function() { var x; 1; }\");\n  }\n",
        "begin_line": 169,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 170,col 5)-(line 171,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInnerFunctions2()",
        "snippet": "  public void testInnerFunctions2() {\n    // Give up DCE if there is a inner function.\n    inFunction(\"var x = 0; print(x); x = 1; var y = function(){}; y()\");\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testSelfReAssignment()",
        "snippet": "  public void testSelfReAssignment() {\n    inFunction(\"var x; x = x;\", \"var x; x\");\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testSelfIncrement()",
        "snippet": "  public void testSelfIncrement() {\n    inFunction(\"var x; x = x + 1;\", \"var x; x + 1\");\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentOp()",
        "snippet": "  public void testAssignmentOp() {\n    // We have remove constant expressions that cleans this one up.\n    inFunction(\"var x; x += foo()\", \"var x; x + foo()\");\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentOpUsedAsLhs()",
        "snippet": "  public void testAssignmentOpUsedAsLhs() {\n    inFunction(\"var x,y; y = x += foo(); print(y)\",\n               \"var x,y; y = x +  foo(); print(y)\");\n  }\n",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 194,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentOpUsedAsCondition()",
        "snippet": "  public void testAssignmentOpUsedAsCondition() {\n    inFunction(\"var x; if(x += foo()) {}\",\n               \"var x; if(x +  foo()) {}\");\n\n    inFunction(\"var x; if((x += foo()) > 1) {}\",\n               \"var x; if((x +  foo()) > 1) {}\");\n\n    // Not in a while because this happens every loop.\n    inFunction(\"var x; while((x += foo()) > 1) {}\");\n\n    inFunction(\"var x; for(;--x;){}\");\n    inFunction(\"var x; for(;x--;){}\");\n    inFunction(\"var x; for(;x -= 1;){}\");\n    inFunction(\"var x; for(;x = 0;){}\", \"var x; for(;0;){}\");\n\n    inFunction(\"var x; for(;;--x){}\");\n    inFunction(\"var x; for(;;x--){}\");\n    inFunction(\"var x; for(;;x -= 1){}\");\n    inFunction(\"var x; for(;;x = 0){}\", \"var x; for(;;0){}\");\n\n    inFunction(\"var x; for(--x;;){}\", \"var x; for(;;){}\");\n    inFunction(\"var x; for(x--;;){}\", \"var x; for(;;){}\");\n    inFunction(\"var x; for(x -= 1;;){}\", \"var x; for(x - 1;;){}\");\n    inFunction(\"var x; for(x = 0;;){}\", \"var x; for(0;;){}\");\n  }\n",
        "begin_line": 197,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 199,col 43)",
            "(line 201,col 5)-(line 202,col 49)",
            "(line 205,col 5)-(line 205,col 52)",
            "(line 207,col 5)-(line 207,col 38)",
            "(line 208,col 5)-(line 208,col 38)",
            "(line 209,col 5)-(line 209,col 41)",
            "(line 210,col 5)-(line 210,col 61)",
            "(line 212,col 5)-(line 212,col 38)",
            "(line 213,col 5)-(line 213,col 38)",
            "(line 214,col 5)-(line 214,col 41)",
            "(line 215,col 5)-(line 215,col 61)",
            "(line 217,col 5)-(line 217,col 58)",
            "(line 218,col 5)-(line 218,col 58)",
            "(line 219,col 5)-(line 219,col 66)",
            "(line 220,col 5)-(line 220,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testDeadIncrement()",
        "snippet": "  public void testDeadIncrement() {\n    // TODO(user): Optimize this.\n    inFunction(\"var x; x ++\", \"var x; void 0\");\n    inFunction(\"var x; x --\", \"var x; void 0\");\n  }\n",
        "begin_line": 223,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 47)",
            "(line 226,col 5)-(line 226,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testDeadButAlivePartiallyWithinTheExpression()",
        "snippet": "  public void testDeadButAlivePartiallyWithinTheExpression() {\n    inFunction(\"var x; x = 100, print(x), x = 101;\",\n               \"var x; x = 100, print(x),     101;\");\n    inFunction(\"var x; x = 100, print(x), print(x), x = 101;\",\n               \"var x; x = 100, print(x), print(x),     101;\");\n    inFunction(\"var x; x = 100, print(x), x = 0, print(x), x = 101;\",\n               \"var x; x = 100, print(x), x = 0, print(x),     101;\");\n  }\n",
        "begin_line": 229,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 231,col 53)",
            "(line 232,col 5)-(line 233,col 63)",
            "(line 234,col 5)-(line 235,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testMutipleDeadAssignmentsButAlivePartiallyWithinTheExpression()",
        "snippet": "  public void testMutipleDeadAssignmentsButAlivePartiallyWithinTheExpression() {\n    inFunction(\"var x; x = 1, x = 2, x = 3, x = 4, x = 5,\" +\n               \"  print(x), x = 0, print(x), x = 101;\",\n\n               \"var x; 1, 2, 3, 4, x = 5, print(x), x = 0, print(x), 101;\");\n  }\n",
        "begin_line": 238,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 242,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testDeadPartiallyWithinTheExpression()",
        "snippet": "  public void testDeadPartiallyWithinTheExpression() {\n    // Sadly, this is not covered. We don't suspect this would happend too\n    // often.\n    inFunction(\"var x; x = 100, x = 101; print(x);\");\n  }\n",
        "begin_line": 246,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentChain()",
        "snippet": "  public void testAssignmentChain() {\n    inFunction(\"var a,b,c,d,e; a = b = c = d = e = 1\",\n               \"var a,b,c,d,e; 1\");\n    inFunction(\"var a,b,c,d,e; a = b = c = d = e = 1; print(c)\",\n               \"var a,b,c,d,e;         c = 1        ; print(c)\");\n    inFunction(\"var a,b,c,d,e; a = b = c = d = e = 1; print(a + e)\",\n               \"var a,b,c,d,e; a =             e = 1; print(a + e)\");\n    inFunction(\"var a,b,c,d,e; a = b = c = d = e = 1; print(b + d)\",\n               \"var a,b,c,d,e;     b =     d     = 1; print(b + d)\");\n    inFunction(\"var a,b,c,d,e; a = b = c = d = e = 1; print(a + b + d + e)\",\n               \"var a,b,c,d,e; a = b =     d = e = 1; print(a + b + d + e)\");\n    inFunction(\"var a,b,c,d,e; a = b = c = d = e = 1; print(a+b+c+d+e)\");\n  }\n",
        "begin_line": 252,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 254,col 35)",
            "(line 255,col 5)-(line 256,col 65)",
            "(line 257,col 5)-(line 258,col 69)",
            "(line 259,col 5)-(line 260,col 69)",
            "(line 261,col 5)-(line 262,col 77)",
            "(line 263,col 5)-(line 263,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignmentOpChain()",
        "snippet": "  public void testAssignmentOpChain() {\n    inFunction(\"var a,b,c,d,e; a = b = c += d = e = 1\",\n               \"var a,b,c,d,e;         c + 1\");\n    inFunction(\"var a,b,c,d,e; a = b = c += d = e = 1;  print(e)\",\n               \"var a,b,c,d,e;         c +     (e = 1); print(e)\");\n    inFunction(\"var a,b,c,d,e; a = b = c += d = e = 1;  print(d)\",\n               \"var a,b,c,d,e;         c + (d = 1)  ;   print(d)\");\n    inFunction(\"var a,b,c,d,e; a = b = c += d = e = 1;  print(a)\",\n               \"var a,b,c,d,e; a =     c +          1;  print(a)\");\n  }\n",
        "begin_line": 266,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 268,col 47)",
            "(line 269,col 5)-(line 270,col 67)",
            "(line 271,col 5)-(line 272,col 67)",
            "(line 273,col 5)-(line 274,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIncDecInSubExpressions()",
        "snippet": "  public void testIncDecInSubExpressions() {\n    inFunction(\"var a; a = 1, a++; a\");\n    inFunction(\"var a; a = 1, ++a; a\");\n    inFunction(\"var a; a = 1, a--; a\");\n    inFunction(\"var a; a = 1, --a; a\");\n\n    inFunction(\"var a; a = 1, a++, print(a)\");\n    inFunction(\"var a; a = 1, ++a, print(a)\");\n    inFunction(\"var a; a = 1, a--, print(a)\");\n    inFunction(\"var a; a = 1, --a, print(a)\");\n\n    inFunction(\"var a; a = 1, print(a++)\");\n    inFunction(\"var a; a = 1, print(++a)\");\n\n    inFunction(\"var a; a = 1, print(a++)\");\n    inFunction(\"var a; a = 1, print(++a)\");\n\n    inFunction(\"var a; a = 1, print(a--)\");\n    inFunction(\"var a; a = 1, print(--a)\");\n  }\n",
        "begin_line": 277,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 39)",
            "(line 279,col 5)-(line 279,col 39)",
            "(line 280,col 5)-(line 280,col 39)",
            "(line 281,col 5)-(line 281,col 39)",
            "(line 283,col 5)-(line 283,col 46)",
            "(line 284,col 5)-(line 284,col 46)",
            "(line 285,col 5)-(line 285,col 46)",
            "(line 286,col 5)-(line 286,col 46)",
            "(line 288,col 5)-(line 288,col 43)",
            "(line 289,col 5)-(line 289,col 43)",
            "(line 291,col 5)-(line 291,col 43)",
            "(line 292,col 5)-(line 292,col 43)",
            "(line 294,col 5)-(line 294,col 43)",
            "(line 295,col 5)-(line 295,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testNestedReassignments()",
        "snippet": "  public void testNestedReassignments() {\n    inFunction(\"var a; a = (a = 1)\", \"var a; 1\");\n    inFunction(\"var a; a = (a *= 2)\", \"var a; a*2\");\n\n    // Note a = (a++) is not same as a++. Only if 'a' is dead.\n    inFunction(\"var a; a = (a++)\", \"var a; a++\"); // Preferred: \"var a\"\n    inFunction(\"var a; a = (++a)\", \"var a; ++a\"); // Preferred: \"var a\"\n\n    inFunction(\"var a; a = (b = (a = 1))\", \"var a; b = 1\");\n    inFunction(\"var a; a = (b = (a *= 2))\", \"var a; b = a * 2\");\n    inFunction(\"var a; a = (b = (a++))\", \"var a; b=a++\");\n    inFunction(\"var a; a = (b = (++a))\", \"var a; b=++a\");\n\n    // Include b as local.\n    inFunction(\"var a,b; a = (b = (a = 1))\", \"var a,b; 1\");\n    inFunction(\"var a,b; a = (b = (a *= 2))\", \"var a,b; a * 2\");\n    inFunction(\"var a,b; a = (b = (a++))\",\n               \"var a,b; a++\"); // Preferred: \"var a,b\"\n    inFunction(\"var a,b; a = (b = (++a))\",\n               \"var a,b; ++a\"); // Preferred: \"var a,b\"\n\n    inFunction(\"var a; a += (a++)\", \"var a; a + a++\");\n    inFunction(\"var a; a += (++a)\", \"var a; a+ (++a)\");\n\n    // Include b as local.\n    inFunction(\"var a,b; a += (b = (a = 1))\", \"var a,b; a + 1\");\n    inFunction(\"var a,b; a += (b = (a *= 2))\", \"var a,b; a + (a * 2)\");\n    inFunction(\"var a,b; a += (b = (a++))\", \"var a,b; a + a++\");\n    inFunction(\"var a,b; a += (b = (++a))\", \"var a,b; a+(++a)\");\n  }\n",
        "begin_line": 298,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 299,col 49)",
            "(line 300,col 5)-(line 300,col 52)",
            "(line 303,col 5)-(line 303,col 49)",
            "(line 304,col 5)-(line 304,col 49)",
            "(line 306,col 5)-(line 306,col 59)",
            "(line 307,col 5)-(line 307,col 64)",
            "(line 308,col 5)-(line 308,col 57)",
            "(line 309,col 5)-(line 309,col 57)",
            "(line 312,col 5)-(line 312,col 59)",
            "(line 313,col 5)-(line 313,col 64)",
            "(line 314,col 5)-(line 315,col 31)",
            "(line 316,col 5)-(line 317,col 31)",
            "(line 319,col 5)-(line 319,col 54)",
            "(line 320,col 5)-(line 320,col 55)",
            "(line 323,col 5)-(line 323,col 64)",
            "(line 324,col 5)-(line 324,col 71)",
            "(line 325,col 5)-(line 325,col 64)",
            "(line 326,col 5)-(line 326,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIncrementalReassignmentInForLoops()",
        "snippet": "  public void testIncrementalReassignmentInForLoops() {\n    inFunction(\"for(;x+=1;x+=1) {}\");\n    inFunction(\"for(;x;x+=1){}\");\n    inFunction(\"for(;x+=1;){foo(x)}\");\n    inFunction(\"for(;1;x+=1){foo(x)}\");\n  }\n",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 330,col 5)-(line 330,col 37)",
            "(line 331,col 5)-(line 331,col 33)",
            "(line 332,col 5)-(line 332,col 38)",
            "(line 333,col 5)-(line 333,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIdentityAssignments()",
        "snippet": "  public void testIdentityAssignments() {\n    inFunction(\"var x; x=x\", \"var x; x\");\n  }\n",
        "begin_line": 336,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(java.lang.String)",
        "snippet": "  private void inFunction(String src) {\n    inFunction(src, src);\n  }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 341,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(java.lang.String, java.lang.String)",
        "snippet": "  private void inFunction(String src, String expected) {\n    test(\"function FUNC(param1, param2){\" + src + \"}\",\n         \"function FUNC(param1, param2){\" + expected + \"}\");\n  }\n",
        "begin_line": 344,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 345,col 5)-(line 346,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testBug8730257()",
        "snippet": "  public void testBug8730257() {\n    inFunction(\n        \"  try {\" +\n        \"     var sortIndices = {};\" +\n        \"     sortIndices = bar();\" +\n        \"     for (var i = 0; i < 100; i++) {\" +\n        \"       var sortIndex = sortIndices[i];\" +\n        \"       bar(sortIndex);\" +\n        \"     }\" +\n        \"   } finally {\" +\n        \"     bar();\" +\n        \"   }\" );\n  }\n",
        "begin_line": 349,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 360,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testAssignToExtern()",
        "snippet": "  public void testAssignToExtern() {\n    inFunction(\"extern = true;\");\n  }\n",
        "begin_line": 363,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297a()",
        "snippet": "  public void testIssue297a() {\n    testSame(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n         \"}; f('');\");\n  }\n",
        "begin_line": 367,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 371,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297b()",
        "snippet": "  public void testIssue297b() {\n    test(\"function f() {\" +\n         \" var x;\" +\n         \" return (x='') && (x = x.substr(1));\" +\n         \"};\",\n         \"function f() {\" +\n         \" var x;\" +\n         \" return (x='') && (x.substr(1));\" +\n         \"};\");\n  }\n",
        "begin_line": 374,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 382,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297c()",
        "snippet": "  public void testIssue297c() {\n    test(\"function f() {\" +\n         \" var x;\" +\n         \" return (x=1) && (x = f(x));\" +\n         \"};\",\n         \"function f() {\" +\n         \" var x;\" +\n         \" return (x=1) && f(x);\" +\n         \"};\");\n  }\n",
        "begin_line": 385,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 393,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297d()",
        "snippet": "  public void testIssue297d() {\n    test(\"function f(a) {\" +\n         \" return (a=1) && (a = f(a));\" +\n         \"};\",\n         \"function f(a) {\" +\n         \" return (a=1) && (f(a));\" +\n         \"};\");\n  }\n",
        "begin_line": 396,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 402,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297e()",
        "snippet": "  public void testIssue297e() {\n    test(\"function f(a) {\" +\n         \" return (a=1) - (a = g(a));\" +\n         \"};\",\n         \"function f(a) {\" +\n         \" return (a=1) - (g(a));\" +\n         \"};\");\n  }\n",
        "begin_line": 405,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 406,col 5)-(line 411,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297f()",
        "snippet": "  public void testIssue297f() {\n    test(\"function f(a) {\" +\n         \" h((a=1) - (a = g(a)));\" +\n         \"};\",\n         \"function f(a) {\" +\n         \" h((a=1) - (g(a)));\" +\n         \"};\");\n  }\n",
        "begin_line": 414,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 420,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297g()",
        "snippet": "  public void testIssue297g() {\n    test(\"function f(a) {\" +\n         \" var b = h((b=1) - (b = g(b)));\" +\n         \" return b;\" +\n         \"};\",\n         // The last assignment in the initializer should be eliminated\n         \"function f(a) {\" +\n         \" var b = h((b=1) - (b = g(b)));\" +\n         \" return b;\" +\n         \"};\");\n  }\n",
        "begin_line": 423,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 432,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue297h()",
        "snippet": "  public void testIssue297h() {\n    test(\"function f(a) {\" +\n         \" var b = b=1;\" +\n         \" return b;\" +\n         \"};\",\n         // The assignment in the initializer should be eliminated\n         \"function f(a) {\" +\n         \" var b = b = 1;\" +\n         \" return b;\" +\n         \"};\");\n  }\n",
        "begin_line": 435,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 436,col 5)-(line 444,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInExpression()",
        "snippet": "  public void testInExpression() {\n    inFunction(\"var a; return a=(a=(a=3));\", \"var a; return 3;\");\n    inFunction(\"var a; return a=(a=(a=a));\", \"var a; return a;\");\n    inFunction(\"var a; return a=(a=(a=a+1)+1);\", \"var a; return a+1+1;\");\n    inFunction(\"var a; return a=(a=(a=f(a)+1)+1);\", \"var a; return f(a)+1+1;\");\n    inFunction(\"var a; return a=f(a=f(a=f(a)));\", \"var a; return f(f(f(a)));\");\n  }\n",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 65)",
            "(line 450,col 5)-(line 450,col 65)",
            "(line 451,col 5)-(line 451,col 73)",
            "(line 452,col 5)-(line 452,col 79)",
            "(line 453,col 5)-(line 453,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 108,col 5)-(line 110,col 6)",
            "(line 111,col 5)-(line 111,col 39)",
            "(line 112,col 5)-(line 112,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 136,
        "end_line": 136,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 52)",
            "(line 148,col 5)-(line 150,col 5)",
            "(line 154,col 5)-(line 154,col 32)",
            "(line 156,col 5)-(line 157,col 65)",
            "(line 158,col 5)-(line 158,col 55)",
            "(line 159,col 5)-(line 159,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 170,
        "end_line": 174,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 29)",
            "(line 203,col 5)-(line 203,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 28)",
            "(line 242,col 5)-(line 242,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 250,col 5)-(line 250,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 263,
        "end_line": 271,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 265,col 5)-(line 267,col 40)",
            "(line 269,col 5)-(line 270,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 306,
        "end_line": 309,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 308,col 5)-(line 308,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 339,col 5)-(line 339,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 356,
        "end_line": 363,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 359,col 5)-(line 361,col 6)",
            "(line 362,col 5)-(line 362,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 379,
        "end_line": 399,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 41)",
            "(line 383,col 5)-(line 383,col 28)",
            "(line 385,col 5)-(line 385,col 43)",
            "(line 387,col 5)-(line 389,col 5)",
            "(line 392,col 5)-(line 392,col 39)",
            "(line 393,col 5)-(line 394,col 58)",
            "(line 396,col 5)-(line 396,col 71)",
            "(line 398,col 5)-(line 398,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 435,col 5)-(line 435,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 451,
        "end_line": 462,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 41)",
            "(line 454,col 5)-(line 454,col 28)",
            "(line 456,col 5)-(line 456,col 56)",
            "(line 457,col 5)-(line 459,col 5)",
            "(line 460,col 5)-(line 460,col 55)",
            "(line 461,col 5)-(line 461,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 470,
        "end_line": 472,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 482,
        "end_line": 485,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 484,col 5)-(line 484,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 497,
        "end_line": 504,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 41)",
            "(line 500,col 5)-(line 500,col 28)",
            "(line 502,col 5)-(line 502,col 56)",
            "(line 503,col 5)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 512,col 5)-(line 512,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 524,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 523,col 5)-(line 523,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 534,
        "end_line": 540,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 535,col 5)-(line 539,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 563,
        "end_line": 570,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 565,col 5)-(line 569,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 583,
        "end_line": 589,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 587,col 6)",
            "(line 588,col 5)-(line 588,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 638,
        "end_line": 651,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 639,col 5)-(line 650,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 664,
        "end_line": 667,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 684,
        "end_line": 872,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 51)",
            "(line 688,col 5)-(line 688,col 44)",
            "(line 690,col 5)-(line 690,col 39)",
            "(line 691,col 5)-(line 692,col 66)",
            "(line 694,col 5)-(line 694,col 44)",
            "(line 695,col 5)-(line 695,col 40)",
            "(line 698,col 5)-(line 698,col 38)",
            "(line 699,col 5)-(line 699,col 54)",
            "(line 700,col 5)-(line 700,col 50)",
            "(line 702,col 5)-(line 702,col 45)",
            "(line 703,col 5)-(line 703,col 68)",
            "(line 704,col 5)-(line 704,col 34)",
            "(line 705,col 5)-(line 705,col 59)",
            "(line 706,col 5)-(line 706,col 35)",
            "(line 708,col 5)-(line 709,col 39)",
            "(line 711,col 5)-(line 751,col 5)",
            "(line 753,col 5)-(line 871,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 874,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 876,col 57)",
            "(line 877,col 5)-(line 877,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 883,
        "end_line": 901,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 884,col 5)-(line 884,col 41)",
            "(line 885,col 5)-(line 885,col 62)",
            "(line 886,col 5)-(line 888,col 5)",
            "(line 889,col 5)-(line 889,col 55)",
            "(line 890,col 5)-(line 890,col 39)",
            "(line 891,col 5)-(line 892,col 66)",
            "(line 893,col 5)-(line 893,col 44)",
            "(line 894,col 5)-(line 894,col 42)",
            "(line 896,col 5)-(line 899,col 5)",
            "(line 900,col 5)-(line 900,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 904,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 911,
        "end_line": 917,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 47)",
            "(line 913,col 5)-(line 915,col 5)",
            "(line 916,col 5)-(line 916,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 924,col 5)-(line 924,col 47)",
            "(line 925,col 5)-(line 927,col 5)",
            "(line 928,col 5)-(line 928,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 936,
        "end_line": 943,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 48)",
            "(line 938,col 5)-(line 938,col 47)",
            "(line 939,col 5)-(line 941,col 5)",
            "(line 942,col 5)-(line 942,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 950,
        "end_line": 956,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 47)",
            "(line 952,col 5)-(line 954,col 5)",
            "(line 955,col 5)-(line 955,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 962,
        "end_line": 969,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 53)",
            "(line 964,col 5)-(line 967,col 5)",
            "(line 968,col 5)-(line 968,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 972,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 973,col 7)-(line 973,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 976,
        "end_line": 977,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 979,
        "end_line": 980,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 983,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 984,col 39)",
            "(line 985,col 5)-(line 985,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 41)"
        ]
    }
]