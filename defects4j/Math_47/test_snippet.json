[
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 42)",
            "(line 62,col 9)-(line 62,col 54)",
            "(line 63,col 9)-(line 63,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()",
        "snippet": "    @Test\n    public void testConstructorNaN() {\n        Complex z = new Complex(3.0, Double.NaN);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(nan, 4.0);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(3.0, 4.0);\n        Assert.assertFalse(z.isNaN());\n    }\n",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 71,col 9)-(line 71,col 34)",
            "(line 72,col 9)-(line 72,col 37)",
            "(line 74,col 9)-(line 74,col 34)",
            "(line 75,col 9)-(line 75,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(5.0, z.abs(), 1.0e-5);\n    }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 42)",
            "(line 81,col 9)-(line 81,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsNaN()",
        "snippet": "    @Test\n    public void testAbsNaN() {\n        Assert.assertTrue(Double.isNaN(Complex.NaN.abs()));\n        Complex z = new Complex(inf, nan);\n        Assert.assertTrue(Double.isNaN(z.abs()));\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 59)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()",
        "snippet": "    @Test\n    public void testAbsInfinite() {\n        Complex z = new Complex(inf, 0);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(inf, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n    }\n",
        "begin_line": 91,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 40)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 35)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 98,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.add(y);\n        Assert.assertEquals(8.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 42)",
            "(line 105,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 106,col 54)",
            "(line 107,col 9)-(line 107,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddNaN()",
        "snippet": "    @Test\n    public void testAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.add(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = new Complex(1, nan);\n        Complex w = x.add(z);\n        Assert.assertSame(Complex.NaN, w);\n    }\n",
        "begin_line": 110,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 115,col 9)-(line 115,col 32)",
            "(line 116,col 9)-(line 116,col 29)",
            "(line 117,col 9)-(line 117,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddInf()",
        "snippet": "    @Test\n    public void testAddInf() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(inf, 0);\n        Complex w = x.add(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.add(z).getReal()));\n    }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 38)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 52)",
            "(line 126,col 9)-(line 126,col 49)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAdd()",
        "snippet": "    @Test\n    public void testScalarAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 133,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 136,col 29)",
            "(line 137,col 9)-(line 137,col 48)",
            "(line 138,col 9)-(line 138,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAddNaN()",
        "snippet": "    @Test\n    public void testScalarAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 42)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 48)",
            "(line 146,col 9)-(line 146,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarAddInf()",
        "snippet": "    @Test\n    public void testScalarAddInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        \n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n\n        x = new Complex(neginf, 0);\n        Assert.assertEquals(x.add(yComplex), x.add(yDouble));\n    }\n",
        "begin_line": 149,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 38)",
            "(line 152,col 9)-(line 152,col 50)",
            "(line 154,col 9)-(line 154,col 48)",
            "(line 155,col 9)-(line 155,col 61)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 158,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugate()",
        "snippet": "    @Test\n    public void testConjugate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.conjugate();\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 161,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 54)",
            "(line 166,col 9)-(line 166,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()",
        "snippet": "    @Test\n    public void testConjugateNaN() {\n        Complex z = Complex.NaN.conjugate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 169,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 44)",
            "(line 172,col 9)-(line 172,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()",
        "snippet": "    @Test\n    public void testConjugateInfiinite() {\n        Complex z = new Complex(0, inf);\n        Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.conjugate().getImaginary(), 0);\n    }\n",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 40)",
            "(line 178,col 9)-(line 178,col 69)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.divide(y);\n        Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 183,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 42)",
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 32)",
            "(line 188,col 9)-(line 188,col 62)",
            "(line 189,col 9)-(line 189,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideReal()",
        "snippet": "    @Test\n    public void testDivideReal() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(2d, 0d);\n        Assert.assertEquals(new Complex(1d, 1.5), x.divide(y));\n\n    }\n",
        "begin_line": 192,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 40)",
            "(line 195,col 9)-(line 195,col 40)",
            "(line 196,col 9)-(line 196,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideImaginary()",
        "snippet": "    @Test\n    public void testDivideImaginary() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(0d, 2d);\n        Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y));\n    }\n",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 40)",
            "(line 203,col 9)-(line 203,col 40)",
            "(line 204,col 9)-(line 204,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideInf()",
        "snippet": "    @Test\n    public void testDivideInf() {\n        Complex x = new Complex(3, 4);\n        Complex w = new Complex(neginf, inf);\n        Assert.assertTrue(x.divide(w).equals(Complex.ZERO));\n\n        Complex z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertEquals(inf, z.getImaginary(), 0);\n\n        w = new Complex(inf, inf);\n        z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n        Assert.assertEquals(inf, z.getReal(), 0);\n\n        w = new Complex(1, inf);\n        z = w.divide(w);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 207,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 38)",
            "(line 210,col 9)-(line 210,col 45)",
            "(line 211,col 9)-(line 211,col 60)",
            "(line 213,col 9)-(line 213,col 32)",
            "(line 214,col 9)-(line 214,col 53)",
            "(line 215,col 9)-(line 215,col 54)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 218,col 9)-(line 218,col 24)",
            "(line 219,col 9)-(line 219,col 58)",
            "(line 220,col 9)-(line 220,col 49)",
            "(line 222,col 9)-(line 222,col 32)",
            "(line 223,col 9)-(line 223,col 24)",
            "(line 224,col 9)-(line 224,col 53)",
            "(line 225,col 9)-(line 225,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZero()",
        "snippet": "    @Test\n    public void testDivideZero() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.ZERO);\n        Assert.assertEquals(z, Complex.INF);\n    }\n",
        "begin_line": 228,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 42)",
            "(line 231,col 9)-(line 231,col 43)",
            "(line 232,col 9)-(line 232,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZeroZero()",
        "snippet": "    @Test\n    public void testDivideZeroZero() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex z = x.divide(Complex.ZERO);\n        Assert.assertEquals(z, Complex.NaN);\n    }\n",
        "begin_line": 235,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 42)",
            "(line 238,col 9)-(line 238,col 43)",
            "(line 239,col 9)-(line 239,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaN()",
        "snippet": "    @Test\n    public void testDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 242,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 42)",
            "(line 245,col 9)-(line 245,col 42)",
            "(line 246,col 9)-(line 246,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()",
        "snippet": "    @Test\n    public void testDivideNaNInf() {\n       Complex z = oneInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertEquals(inf, z.getImaginary(), 0);\n\n       z = negInfNegInf.divide(oneNaN);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n\n       z = negInfInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 249,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 251,col 8)-(line 251,col 46)",
            "(line 252,col 8)-(line 252,col 52)",
            "(line 253,col 8)-(line 253,col 53)",
            "(line 255,col 8)-(line 255,col 39)",
            "(line 256,col 8)-(line 256,col 52)",
            "(line 257,col 8)-(line 257,col 57)",
            "(line 259,col 8)-(line 259,col 41)",
            "(line 260,col 8)-(line 260,col 52)",
            "(line 261,col 8)-(line 261,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivide()",
        "snippet": "    @Test\n    public void testScalarDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n    }\n",
        "begin_line": 264,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 29)",
            "(line 268,col 9)-(line 268,col 48)",
            "(line 269,col 9)-(line 269,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN()",
        "snippet": "    @Test\n    public void testScalarDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n    }\n",
        "begin_line": 272,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 42)",
            "(line 275,col 9)-(line 275,col 36)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideInf()",
        "snippet": "    @Test\n    public void testScalarDivideInf() {\n        Complex x = new Complex(1,1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n\n        yDouble = Double.NEGATIVE_INFINITY;\n        yComplex = new Complex(yDouble);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n        \n        x = new Complex(1, Double.NEGATIVE_INFINITY);\n        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n    }\n",
        "begin_line": 280,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 37)",
            "(line 283,col 9)-(line 283,col 50)",
            "(line 284,col 9)-(line 284,col 48)",
            "(line 285,col 9)-(line 285,col 73)",
            "(line 287,col 9)-(line 287,col 43)",
            "(line 288,col 9)-(line 288,col 40)",
            "(line 289,col 9)-(line 289,col 73)",
            "(line 291,col 9)-(line 291,col 53)",
            "(line 292,col 9)-(line 292,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarDivideZero()",
        "snippet": "    @Test\n    public void testScalarDivideZero() {\n        Complex x = new Complex(1,1);\n        TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0);\n    }\n",
        "begin_line": 295,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 37)",
            "(line 298,col 9)-(line 298,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.multiply(y);\n        Assert.assertEquals(-9.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 301,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 42)",
            "(line 304,col 9)-(line 304,col 42)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 306,col 55)",
            "(line 307,col 9)-(line 307,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()",
        "snippet": "    @Test\n    public void testMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.multiply(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n    }\n",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 42)",
            "(line 313,col 9)-(line 313,col 44)",
            "(line 314,col 9)-(line 314,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()",
        "snippet": "    @Test\n    public void testMultiplyNaNInf() {\n        Complex z = new Complex(1,1);\n        Complex w = z.multiply(infOne);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        // [MATH-164]\n        Assert.assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));\n\n        w = oneInf.multiply(oneNegInf);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        w = negInfNegInf.multiply(oneNaN);\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n        \n        z = new Complex(1, neginf);\n        Assert.assertSame(Complex.INF, z.multiply(z));\n    }\n",
        "begin_line": 317,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 37)",
            "(line 320,col 9)-(line 320,col 39)",
            "(line 321,col 9)-(line 321,col 49)",
            "(line 322,col 9)-(line 322,col 54)",
            "(line 325,col 9)-(line 325,col 82)",
            "(line 326,col 9)-(line 326,col 82)",
            "(line 327,col 9)-(line 327,col 86)",
            "(line 329,col 9)-(line 329,col 39)",
            "(line 330,col 9)-(line 330,col 49)",
            "(line 331,col 9)-(line 331,col 54)",
            "(line 333,col 9)-(line 333,col 42)",
            "(line 334,col 9)-(line 334,col 53)",
            "(line 335,col 9)-(line 335,col 58)",
            "(line 337,col 9)-(line 337,col 35)",
            "(line 338,col 9)-(line 338,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiply()",
        "snippet": "    @Test\n    public void testScalarMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 341,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 42)",
            "(line 344,col 9)-(line 344,col 29)",
            "(line 345,col 9)-(line 345,col 48)",
            "(line 346,col 9)-(line 346,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN()",
        "snippet": "    @Test\n    public void testScalarMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 42)",
            "(line 352,col 9)-(line 352,col 36)",
            "(line 353,col 9)-(line 353,col 48)",
            "(line 354,col 9)-(line 354,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyInf()",
        "snippet": "    @Test\n    public void testScalarMultiplyInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n        \n        yDouble = Double.NEGATIVE_INFINITY;\n        yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n    }\n",
        "begin_line": 357,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 38)",
            "(line 360,col 9)-(line 360,col 50)",
            "(line 361,col 9)-(line 361,col 48)",
            "(line 362,col 9)-(line 362,col 71)",
            "(line 364,col 9)-(line 364,col 43)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.negate();\n        Assert.assertEquals(-3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 369,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 42)",
            "(line 372,col 9)-(line 372,col 31)",
            "(line 373,col 9)-(line 373,col 55)",
            "(line 374,col 9)-(line 374,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegateNaN()",
        "snippet": "    @Test\n    public void testNegateNaN() {\n        Complex z = Complex.NaN.negate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 377,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 41)",
            "(line 380,col 9)-(line 380,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.subtract(y);\n        Assert.assertEquals(-2.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 383,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 42)",
            "(line 386,col 9)-(line 386,col 42)",
            "(line 387,col 9)-(line 387,col 34)",
            "(line 388,col 9)-(line 388,col 55)",
            "(line 389,col 9)-(line 389,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()",
        "snippet": "    @Test\n    public void testSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.subtract(Complex.NaN);\n        Assert.assertSame(Complex.NaN, z);\n        z = new Complex(1, nan);\n        Complex w = x.subtract(z);\n        Assert.assertSame(Complex.NaN, w);\n    }\n",
        "begin_line": 392,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 42)",
            "(line 395,col 9)-(line 395,col 44)",
            "(line 396,col 9)-(line 396,col 42)",
            "(line 397,col 9)-(line 397,col 32)",
            "(line 398,col 9)-(line 398,col 34)",
            "(line 399,col 9)-(line 399,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractInf()",
        "snippet": "    @Test\n    public void testSubtractInf() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(neginf, 0);\n        Complex w = x.subtract(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.subtract(z).getReal()));\n    }\n",
        "begin_line": 402,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 38)",
            "(line 405,col 9)-(line 405,col 43)",
            "(line 406,col 9)-(line 406,col 34)",
            "(line 407,col 9)-(line 407,col 52)",
            "(line 408,col 9)-(line 408,col 49)",
            "(line 410,col 9)-(line 410,col 35)",
            "(line 411,col 9)-(line 411,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtract()",
        "snippet": "    @Test\n    public void testScalarSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = 2.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 414,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 42)",
            "(line 417,col 9)-(line 417,col 29)",
            "(line 418,col 9)-(line 418,col 48)",
            "(line 419,col 9)-(line 419,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtractNaN()",
        "snippet": "    @Test\n    public void testScalarSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 422,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 42)",
            "(line 425,col 9)-(line 425,col 36)",
            "(line 426,col 9)-(line 426,col 48)",
            "(line 427,col 9)-(line 427,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarSubtractInf()",
        "snippet": "    @Test\n    public void testScalarSubtractInf() {\n        Complex x = new Complex(1, 1);\n        double yDouble = Double.POSITIVE_INFINITY;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n\n        x = new Complex(neginf, 0);\n        Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble));\n    }\n",
        "begin_line": 430,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 38)",
            "(line 433,col 9)-(line 433,col 50)",
            "(line 434,col 9)-(line 434,col 48)",
            "(line 435,col 9)-(line 435,col 71)",
            "(line 437,col 9)-(line 437,col 35)",
            "(line 438,col 9)-(line 438,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNull()",
        "snippet": "    @Test\n    public void testEqualsNull() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(null));\n    }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 42)",
            "(line 445,col 9)-(line 445,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsClass()",
        "snippet": "    @Test\n    public void testEqualsClass() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(this));\n    }\n",
        "begin_line": 448,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 42)",
            "(line 451,col 9)-(line 451,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsSame()",
        "snippet": "    @Test\n    public void testEqualsSame() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(x));\n    }\n",
        "begin_line": 454,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 42)",
            "(line 457,col 9)-(line 457,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()",
        "snippet": "    @Test\n    public void testEqualsTrue() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(y));\n    }\n",
        "begin_line": 460,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 42)",
            "(line 463,col 9)-(line 463,col 42)",
            "(line 464,col 9)-(line 464,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()",
        "snippet": "    @Test\n    public void testEqualsRealDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 467,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 42)",
            "(line 470,col 9)-(line 470,col 61)",
            "(line 471,col 9)-(line 471,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()",
        "snippet": "    @Test\n    public void testEqualsImaginaryDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 474,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 42)",
            "(line 477,col 9)-(line 477,col 61)",
            "(line 478,col 9)-(line 478,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()",
        "snippet": "    @Test\n    public void testEqualsNaN() {\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Complex complexNaN = Complex.NaN;\n        Assert.assertTrue(realNaN.equals(imaginaryNaN));\n        Assert.assertTrue(imaginaryNaN.equals(complexNaN));\n        Assert.assertTrue(realNaN.equals(complexNaN));\n    }\n",
        "begin_line": 481,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 55)",
            "(line 484,col 9)-(line 484,col 60)",
            "(line 485,col 9)-(line 485,col 41)",
            "(line 486,col 9)-(line 486,col 56)",
            "(line 487,col 9)-(line 487,col 59)",
            "(line 488,col 9)-(line 488,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testHashCode()",
        "snippet": "    @Test\n    public void testHashCode() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());\n        Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());\n    }\n",
        "begin_line": 491,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 42)",
            "(line 494,col 9)-(line 494,col 61)",
            "(line 495,col 9)-(line 495,col 55)",
            "(line 496,col 9)-(line 496,col 53)",
            "(line 497,col 9)-(line 497,col 55)",
            "(line 498,col 9)-(line 498,col 55)",
            "(line 499,col 9)-(line 499,col 60)",
            "(line 500,col 9)-(line 500,col 73)",
            "(line 501,col 9)-(line 501,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcos()",
        "snippet": "    @Test\n    public void testAcos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.936812, -2.30551);\n        TestUtils.assertEquals(expected, z.acos(), 1.0e-5);\n        TestUtils.assertEquals(new Complex(FastMath.acos(0), 0),\n                Complex.ZERO.acos(), 1.0e-12);\n    }\n",
        "begin_line": 504,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 506,col 9)-(line 506,col 38)",
            "(line 507,col 9)-(line 507,col 59)",
            "(line 508,col 9)-(line 508,col 59)",
            "(line 509,col 9)-(line 510,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosInf()",
        "snippet": "    @Test\n    public void testAcosInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.acos());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, infOne.acos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.acos());\n        TestUtils.assertSame(Complex.NaN, infInf.acos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.acos());\n    }\n",
        "begin_line": 513,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 515,col 9)-(line 515,col 57)",
            "(line 516,col 9)-(line 516,col 60)",
            "(line 517,col 9)-(line 517,col 57)",
            "(line 518,col 9)-(line 518,col 60)",
            "(line 519,col 9)-(line 519,col 57)",
            "(line 520,col 9)-(line 520,col 60)",
            "(line 521,col 9)-(line 521,col 60)",
            "(line 522,col 9)-(line 522,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosNaN()",
        "snippet": "    @Test\n    public void testAcosNaN() {\n        Assert.assertTrue(Complex.NaN.acos().isNaN());\n    }\n",
        "begin_line": 525,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 527,col 9)-(line 527,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsin()",
        "snippet": "    @Test\n    public void testAsin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.633984, 2.30551);\n        TestUtils.assertEquals(expected, z.asin(), 1.0e-5);\n    }\n",
        "begin_line": 530,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 532,col 9)-(line 532,col 38)",
            "(line 533,col 9)-(line 533,col 58)",
            "(line 534,col 9)-(line 534,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinNaN()",
        "snippet": "    @Test\n    public void testAsinNaN() {\n        Assert.assertTrue(Complex.NaN.asin().isNaN());\n    }\n",
        "begin_line": 537,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 539,col 9)-(line 539,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinInf()",
        "snippet": "    @Test\n    public void testAsinInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.asin());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, infOne.asin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.asin());\n        TestUtils.assertSame(Complex.NaN, infInf.asin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.asin());\n    }\n",
        "begin_line": 542,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 544,col 9)-(line 544,col 57)",
            "(line 545,col 9)-(line 545,col 60)",
            "(line 546,col 9)-(line 546,col 57)",
            "(line 547,col 9)-(line 547,col 60)",
            "(line 548,col 9)-(line 548,col 57)",
            "(line 549,col 9)-(line 549,col 60)",
            "(line 550,col 9)-(line 550,col 60)",
            "(line 551,col 9)-(line 551,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtan()",
        "snippet": "    @Test\n    public void testAtan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.44831, 0.158997);\n        TestUtils.assertEquals(expected, z.atan(), 1.0e-5);\n    }\n",
        "begin_line": 555,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 557,col 9)-(line 557,col 38)",
            "(line 558,col 9)-(line 558,col 58)",
            "(line 559,col 9)-(line 559,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanInf()",
        "snippet": "    @Test\n    public void testAtanInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.atan());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, infOne.atan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.atan());\n        TestUtils.assertSame(Complex.NaN, infInf.atan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.atan());\n    }\n",
        "begin_line": 562,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 564,col 9)-(line 564,col 57)",
            "(line 565,col 9)-(line 565,col 60)",
            "(line 566,col 9)-(line 566,col 57)",
            "(line 567,col 9)-(line 567,col 60)",
            "(line 568,col 9)-(line 568,col 57)",
            "(line 569,col 9)-(line 569,col 60)",
            "(line 570,col 9)-(line 570,col 60)",
            "(line 571,col 9)-(line 571,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanI()",
        "snippet": "    @Test\n    public void testAtanI() {\n        for (int i = -10; i < 10; i++) {\n            System.out.println(new Complex(0, 1 - 0.1 * i).atan());\n        }\n        Assert.assertTrue(Complex.I.atan().isInfinite());\n    }\n",
        "begin_line": 574,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 576,col 9)-(line 578,col 9)",
            "(line 579,col 9)-(line 579,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanNaN()",
        "snippet": "    @Test\n    public void testAtanNaN() {\n        Assert.assertTrue(Complex.NaN.atan().isNaN());\n    }\n",
        "begin_line": 582,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 584,col 9)-(line 584,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCos()",
        "snippet": "    @Test\n    public void testCos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-27.03495, -3.851153);\n        TestUtils.assertEquals(expected, z.cos(), 1.0e-5);\n    }\n",
        "begin_line": 587,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 38)",
            "(line 590,col 9)-(line 590,col 61)",
            "(line 591,col 9)-(line 591,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosNaN()",
        "snippet": "    @Test\n    public void testCosNaN() {\n        Assert.assertTrue(Complex.NaN.cos().isNaN());\n    }\n",
        "begin_line": 594,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 596,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosInf()",
        "snippet": "    @Test\n    public void testCosInf() {\n        TestUtils.assertSame(infNegInf, oneInf.cos());\n        TestUtils.assertSame(infInf, oneNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, infOne.cos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.cos());\n        TestUtils.assertSame(Complex.NaN, infInf.cos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cos());\n    }\n",
        "begin_line": 599,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 54)",
            "(line 602,col 9)-(line 602,col 54)",
            "(line 603,col 9)-(line 603,col 56)",
            "(line 604,col 9)-(line 604,col 59)",
            "(line 605,col 9)-(line 605,col 56)",
            "(line 606,col 9)-(line 606,col 59)",
            "(line 607,col 9)-(line 607,col 59)",
            "(line 608,col 9)-(line 608,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosh()",
        "snippet": "    @Test\n    public void testCosh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.58066, -7.58155);\n        TestUtils.assertEquals(expected, z.cosh(), 1.0e-5);\n    }\n",
        "begin_line": 611,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 613,col 9)-(line 613,col 38)",
            "(line 614,col 9)-(line 614,col 59)",
            "(line 615,col 9)-(line 615,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshNaN()",
        "snippet": "    @Test\n    public void testCoshNaN() {\n        Assert.assertTrue(Complex.NaN.cosh().isNaN());\n    }\n",
        "begin_line": 618,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshInf()",
        "snippet": "    @Test\n    public void testCoshInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.cosh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.cosh());\n        TestUtils.assertSame(infInf, infOne.cosh());\n        TestUtils.assertSame(infNegInf, negInfOne.cosh());\n        TestUtils.assertSame(Complex.NaN, infInf.cosh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh());\n    }\n",
        "begin_line": 623,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 625,col 9)-(line 625,col 57)",
            "(line 626,col 9)-(line 626,col 60)",
            "(line 627,col 9)-(line 627,col 52)",
            "(line 628,col 9)-(line 628,col 58)",
            "(line 629,col 9)-(line 629,col 57)",
            "(line 630,col 9)-(line 630,col 60)",
            "(line 631,col 9)-(line 631,col 60)",
            "(line 632,col 9)-(line 632,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExp()",
        "snippet": "    @Test\n    public void testExp() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-13.12878, -15.20078);\n        TestUtils.assertEquals(expected, z.exp(), 1.0e-5);\n        TestUtils.assertEquals(Complex.ONE,\n                Complex.ZERO.exp(), 10e-12);\n        Complex iPi = Complex.I.multiply(new Complex(pi,0));\n        TestUtils.assertEquals(Complex.ONE.negate(),\n                iPi.exp(), 10e-12);\n    }\n",
        "begin_line": 635,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 38)",
            "(line 638,col 9)-(line 638,col 61)",
            "(line 639,col 9)-(line 639,col 58)",
            "(line 640,col 9)-(line 641,col 44)",
            "(line 642,col 9)-(line 642,col 60)",
            "(line 643,col 9)-(line 644,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpNaN()",
        "snippet": "    @Test\n    public void testExpNaN() {\n        Assert.assertTrue(Complex.NaN.exp().isNaN());\n    }\n",
        "begin_line": 647,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpInf()",
        "snippet": "    @Test\n    public void testExpInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.exp());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.exp());\n        TestUtils.assertSame(infInf, infOne.exp());\n        TestUtils.assertSame(Complex.ZERO, negInfOne.exp());\n        TestUtils.assertSame(Complex.NaN, infInf.exp());\n        TestUtils.assertSame(Complex.NaN, infNegInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.exp());\n    }\n",
        "begin_line": 652,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 654,col 9)-(line 654,col 56)",
            "(line 655,col 9)-(line 655,col 59)",
            "(line 656,col 9)-(line 656,col 51)",
            "(line 657,col 9)-(line 657,col 60)",
            "(line 658,col 9)-(line 658,col 56)",
            "(line 659,col 9)-(line 659,col 59)",
            "(line 660,col 9)-(line 660,col 59)",
            "(line 661,col 9)-(line 661,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLog()",
        "snippet": "    @Test\n    public void testLog() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.60944, 0.927295);\n        TestUtils.assertEquals(expected, z.log(), 1.0e-5);\n    }\n",
        "begin_line": 664,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 666,col 9)-(line 666,col 38)",
            "(line 667,col 9)-(line 667,col 58)",
            "(line 668,col 9)-(line 668,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogNaN()",
        "snippet": "    @Test\n    public void testLogNaN() {\n        Assert.assertTrue(Complex.NaN.log().isNaN());\n    }\n",
        "begin_line": 671,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 673,col 9)-(line 673,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogInf()",
        "snippet": "    @Test\n    public void testLogInf() {\n        TestUtils.assertEquals(new Complex(inf, pi / 2),\n                oneInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 2),\n                oneNegInf.log(), 10e-12);\n        TestUtils.assertEquals(infZero, infOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi),\n                negInfOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi / 4),\n                infInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 4),\n                infNegInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),\n                negInfInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n                negInfNegInf.log(), 10e-12);\n    }\n",
        "begin_line": 676,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 678,col 9)-(line 679,col 38)",
            "(line 680,col 9)-(line 681,col 41)",
            "(line 682,col 9)-(line 682,col 62)",
            "(line 683,col 9)-(line 684,col 41)",
            "(line 685,col 9)-(line 686,col 38)",
            "(line 687,col 9)-(line 688,col 41)",
            "(line 689,col 9)-(line 690,col 41)",
            "(line 691,col 9)-(line 692,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogZero()",
        "snippet": "    @Test\n    public void testLogZero() {\n        TestUtils.assertSame(negInfZero, Complex.ZERO.log());\n    }\n",
        "begin_line": 695,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        Complex x = new Complex(3, 4);\n        Complex y = new Complex(5, 6);\n        Complex expected = new Complex(-1.860893, 11.83677);\n        TestUtils.assertEquals(expected, x.pow(y), 1.0e-5);\n    }\n",
        "begin_line": 700,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 702,col 9)-(line 702,col 38)",
            "(line 703,col 9)-(line 703,col 38)",
            "(line 704,col 9)-(line 704,col 60)",
            "(line 705,col 9)-(line 705,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()",
        "snippet": "    @Test\n    public void testPowNaNBase() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(Complex.NaN.pow(x).isNaN());\n    }\n",
        "begin_line": 708,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 710,col 9)-(line 710,col 38)",
            "(line 711,col 9)-(line 711,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()",
        "snippet": "    @Test\n    public void testPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(x.pow(Complex.NaN).isNaN());\n    }\n",
        "begin_line": 714,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 38)",
            "(line 717,col 9)-(line 717,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowInf()",
        "snippet": "   @Test\n   public void testPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));\n   }\n",
        "begin_line": 720,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 722,col 8)-(line 722,col 65)",
            "(line 723,col 8)-(line 723,col 68)",
            "(line 724,col 8)-(line 724,col 65)",
            "(line 725,col 8)-(line 725,col 65)",
            "(line 726,col 8)-(line 726,col 68)",
            "(line 727,col 8)-(line 727,col 68)",
            "(line 728,col 8)-(line 728,col 71)",
            "(line 729,col 8)-(line 729,col 65)",
            "(line 730,col 8)-(line 730,col 68)",
            "(line 731,col 8)-(line 731,col 65)",
            "(line 732,col 8)-(line 732,col 68)",
            "(line 733,col 8)-(line 733,col 68)",
            "(line 734,col 8)-(line 734,col 71)",
            "(line 735,col 8)-(line 735,col 69)",
            "(line 736,col 8)-(line 736,col 72)",
            "(line 737,col 8)-(line 737,col 66)",
            "(line 738,col 8)-(line 738,col 63)",
            "(line 739,col 8)-(line 739,col 66)",
            "(line 740,col 8)-(line 740,col 60)",
            "(line 741,col 8)-(line 741,col 66)",
            "(line 742,col 8)-(line 742,col 69)",
            "(line 743,col 8)-(line 743,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowZero()",
        "snippet": "   @Test\n   public void testPowZero() {\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ZERO));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.I));\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.ONE.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.I.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n   }\n",
        "begin_line": 746,
        "end_line": 760,
        "comment": "",
        "child_ranges": [
            "(line 748,col 8)-(line 749,col 46)",
            "(line 750,col 8)-(line 751,col 47)",
            "(line 752,col 8)-(line 753,col 44)",
            "(line 754,col 8)-(line 755,col 54)",
            "(line 756,col 8)-(line 757,col 52)",
            "(line 758,col 8)-(line 759,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPow()",
        "snippet": "    @Test\n    public void testScalarPow() {\n        Complex x = new Complex(3, 4);\n        double yDouble = 5.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 762,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 764,col 9)-(line 764,col 38)",
            "(line 765,col 9)-(line 765,col 29)",
            "(line 766,col 9)-(line 766,col 48)",
            "(line 767,col 9)-(line 767,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowNaNBase()",
        "snippet": "    @Test\n    public void testScalarPowNaNBase() {\n        Complex x = Complex.NaN;\n        double yDouble = 5.0;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 770,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 772,col 32)",
            "(line 773,col 9)-(line 773,col 29)",
            "(line 774,col 9)-(line 774,col 48)",
            "(line 775,col 9)-(line 775,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowNaNExponent()",
        "snippet": "    @Test\n    public void testScalarPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        double yDouble = Double.NaN;\n        Complex yComplex = new Complex(yDouble);\n        Assert.assertEquals(x.pow(yComplex), x.pow(yDouble));\n    }\n",
        "begin_line": 778,
        "end_line": 784,
        "comment": "",
        "child_ranges": [
            "(line 780,col 9)-(line 780,col 38)",
            "(line 781,col 9)-(line 781,col 36)",
            "(line 782,col 9)-(line 782,col 48)",
            "(line 783,col 9)-(line 783,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowInf()",
        "snippet": "   @Test\n   public void testScalarPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(10));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(1.0));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Double.POSITIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.NEGATIVE_INFINITY));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.POSITIVE_INFINITY));\n   }\n",
        "begin_line": 786,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 788,col 8)-(line 788,col 83)",
            "(line 789,col 8)-(line 789,col 83)",
            "(line 790,col 8)-(line 790,col 57)",
            "(line 791,col 8)-(line 791,col 60)",
            "(line 792,col 8)-(line 792,col 57)",
            "(line 793,col 8)-(line 793,col 60)",
            "(line 794,col 8)-(line 794,col 59)",
            "(line 795,col 8)-(line 795,col 63)",
            "(line 796,col 8)-(line 796,col 84)",
            "(line 797,col 8)-(line 797,col 84)",
            "(line 798,col 8)-(line 798,col 78)",
            "(line 799,col 8)-(line 799,col 78)",
            "(line 800,col 8)-(line 800,col 81)",
            "(line 801,col 8)-(line 801,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarPowZero()",
        "snippet": "   @Test\n   public void testScalarPowZero() {\n       TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(1.0));\n       TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(0.0));\n       TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(0.0), 10e-12);\n       TestUtils.assertEquals(Complex.ONE, Complex.I.pow(0.0), 10e-12);\n       TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(0.0), 10e-12);\n   }\n",
        "begin_line": 804,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 806,col 8)-(line 806,col 64)",
            "(line 807,col 8)-(line 807,col 64)",
            "(line 808,col 8)-(line 808,col 73)",
            "(line 809,col 8)-(line 809,col 71)",
            "(line 810,col 8)-(line 810,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testpowNull()",
        "snippet": "    @Test(expected=NullArgumentException.class)\n    public void testpowNull() {\n        Complex.ONE.pow(null);\n    }\n",
        "begin_line": 813,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 815,col 9)-(line 815,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSin()",
        "snippet": "    @Test\n    public void testSin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(3.853738, -27.01681);\n        TestUtils.assertEquals(expected, z.sin(), 1.0e-5);\n    }\n",
        "begin_line": 818,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 820,col 9)-(line 820,col 38)",
            "(line 821,col 9)-(line 821,col 60)",
            "(line 822,col 9)-(line 822,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinInf()",
        "snippet": "    @Test\n    public void testSinInf() {\n        TestUtils.assertSame(infInf, oneInf.sin());\n        TestUtils.assertSame(infNegInf, oneNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, infOne.sin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.sin());\n        TestUtils.assertSame(Complex.NaN, infInf.sin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sin());\n    }\n",
        "begin_line": 825,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 827,col 9)-(line 827,col 51)",
            "(line 828,col 9)-(line 828,col 57)",
            "(line 829,col 9)-(line 829,col 56)",
            "(line 830,col 9)-(line 830,col 59)",
            "(line 831,col 9)-(line 831,col 56)",
            "(line 832,col 9)-(line 832,col 59)",
            "(line 833,col 9)-(line 833,col 59)",
            "(line 834,col 9)-(line 834,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinNaN()",
        "snippet": "    @Test\n    public void testSinNaN() {\n        Assert.assertTrue(Complex.NaN.sin().isNaN());\n    }\n",
        "begin_line": 837,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinh()",
        "snippet": "    @Test\n    public void testSinh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.54812, -7.61923);\n        TestUtils.assertEquals(expected, z.sinh(), 1.0e-5);\n    }\n",
        "begin_line": 842,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 844,col 9)-(line 844,col 38)",
            "(line 845,col 9)-(line 845,col 59)",
            "(line 846,col 9)-(line 846,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhNaN()",
        "snippet": "    @Test\n    public void testSinhNaN() {\n        Assert.assertTrue(Complex.NaN.sinh().isNaN());\n    }\n",
        "begin_line": 849,
        "end_line": 852,
        "comment": "",
        "child_ranges": [
            "(line 851,col 9)-(line 851,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhInf()",
        "snippet": "    @Test\n    public void testSinhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.sinh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.sinh());\n        TestUtils.assertSame(infInf, infOne.sinh());\n        TestUtils.assertSame(negInfInf, negInfOne.sinh());\n        TestUtils.assertSame(Complex.NaN, infInf.sinh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh());\n    }\n",
        "begin_line": 854,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 856,col 9)-(line 856,col 57)",
            "(line 857,col 9)-(line 857,col 60)",
            "(line 858,col 9)-(line 858,col 52)",
            "(line 859,col 9)-(line 859,col 58)",
            "(line 860,col 9)-(line 860,col 57)",
            "(line 861,col 9)-(line 861,col 60)",
            "(line 862,col 9)-(line 862,col 60)",
            "(line 863,col 9)-(line 863,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()",
        "snippet": "    @Test\n    public void testSqrtRealPositive() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(2, 1);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 866,
        "end_line": 871,
        "comment": "",
        "child_ranges": [
            "(line 868,col 9)-(line 868,col 38)",
            "(line 869,col 9)-(line 869,col 45)",
            "(line 870,col 9)-(line 870,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()",
        "snippet": "    @Test\n    public void testSqrtRealZero() {\n        Complex z = new Complex(0.0, 4);\n        Complex expected = new Complex(1.41421, 1.41421);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 873,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 875,col 9)-(line 875,col 40)",
            "(line 876,col 9)-(line 876,col 57)",
            "(line 877,col 9)-(line 877,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()",
        "snippet": "    @Test\n    public void testSqrtRealNegative() {\n        Complex z = new Complex(-3.0, 4);\n        Complex expected = new Complex(1, 2);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 880,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 882,col 9)-(line 882,col 41)",
            "(line 883,col 9)-(line 883,col 45)",
            "(line 884,col 9)-(line 884,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()",
        "snippet": "    @Test\n    public void testSqrtImaginaryZero() {\n        Complex z = new Complex(-3.0, 0.0);\n        Complex expected = new Complex(0.0, 1.73205);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 887,
        "end_line": 892,
        "comment": "",
        "child_ranges": [
            "(line 889,col 9)-(line 889,col 43)",
            "(line 890,col 9)-(line 890,col 53)",
            "(line 891,col 9)-(line 891,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()",
        "snippet": "    @Test\n    public void testSqrtImaginaryNegative() {\n        Complex z = new Complex(-3.0, -4.0);\n        Complex expected = new Complex(1.0, -2.0);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 894,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 896,col 9)-(line 896,col 44)",
            "(line 897,col 9)-(line 897,col 50)",
            "(line 898,col 9)-(line 898,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()",
        "snippet": "    @Test\n    public void testSqrtPolar() {\n        double r = 1;\n        for (int i = 0; i < 5; i++) {\n            r += i;\n            double theta = 0;\n            for (int j =0; j < 11; j++) {\n                theta += pi /12;\n                Complex z = ComplexUtils.polar2Complex(r, theta);\n                Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2);\n                TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12);\n            }\n        }\n    }\n",
        "begin_line": 901,
        "end_line": 914,
        "comment": "",
        "child_ranges": [
            "(line 903,col 9)-(line 903,col 21)",
            "(line 904,col 9)-(line 913,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()",
        "snippet": "    @Test\n    public void testSqrtNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt().isNaN());\n    }\n",
        "begin_line": 916,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 918,col 9)-(line 918,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtInf()",
        "snippet": "    @Test\n    public void testSqrtInf() {\n        TestUtils.assertSame(infNaN, oneInf.sqrt());\n        TestUtils.assertSame(infNaN, oneNegInf.sqrt());\n        TestUtils.assertSame(infZero, infOne.sqrt());\n        TestUtils.assertSame(zeroInf, negInfOne.sqrt());\n        TestUtils.assertSame(infNaN, infInf.sqrt());\n        TestUtils.assertSame(infNaN, infNegInf.sqrt());\n        TestUtils.assertSame(nanInf, negInfInf.sqrt());\n        TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt());\n    }\n",
        "begin_line": 921,
        "end_line": 931,
        "comment": "",
        "child_ranges": [
            "(line 923,col 9)-(line 923,col 52)",
            "(line 924,col 9)-(line 924,col 55)",
            "(line 925,col 9)-(line 925,col 53)",
            "(line 926,col 9)-(line 926,col 56)",
            "(line 927,col 9)-(line 927,col 52)",
            "(line 928,col 9)-(line 928,col 55)",
            "(line 929,col 9)-(line 929,col 55)",
            "(line 930,col 9)-(line 930,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1z()",
        "snippet": "    @Test\n    public void testSqrt1z() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(4.08033, -2.94094);\n        TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5);\n    }\n",
        "begin_line": 933,
        "end_line": 938,
        "comment": "",
        "child_ranges": [
            "(line 935,col 9)-(line 935,col 38)",
            "(line 936,col 9)-(line 936,col 58)",
            "(line 937,col 9)-(line 937,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()",
        "snippet": "    @Test\n    public void testSqrt1zNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt1z().isNaN());\n    }\n",
        "begin_line": 940,
        "end_line": 943,
        "comment": "",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTan()",
        "snippet": "    @Test\n    public void testTan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n    }\n",
        "begin_line": 945,
        "end_line": 950,
        "comment": "",
        "child_ranges": [
            "(line 947,col 9)-(line 947,col 38)",
            "(line 948,col 9)-(line 948,col 63)",
            "(line 949,col 9)-(line 949,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanNaN()",
        "snippet": "    @Test\n    public void testTanNaN() {\n        Assert.assertTrue(Complex.NaN.tan().isNaN());\n    }\n",
        "begin_line": 952,
        "end_line": 955,
        "comment": "",
        "child_ranges": [
            "(line 954,col 9)-(line 954,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanInf()",
        "snippet": "    @Test\n    public void testTanInf() {\n        TestUtils.assertSame(zeroNaN, oneInf.tan());\n        TestUtils.assertSame(zeroNaN, oneNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, infOne.tan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());\n        TestUtils.assertSame(Complex.NaN, infInf.tan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());\n    }\n",
        "begin_line": 957,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 959,col 9)-(line 959,col 52)",
            "(line 960,col 9)-(line 960,col 55)",
            "(line 961,col 9)-(line 961,col 56)",
            "(line 962,col 9)-(line 962,col 59)",
            "(line 963,col 9)-(line 963,col 56)",
            "(line 964,col 9)-(line 964,col 59)",
            "(line 965,col 9)-(line 965,col 59)",
            "(line 966,col 9)-(line 966,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanCritical()",
        "snippet": "   @Test\n   public void testTanCritical() {\n        TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan());\n        TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan());\n    }\n",
        "begin_line": 969,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 971,col 9)-(line 971,col 65)",
            "(line 972,col 9)-(line 972,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanh()",
        "snippet": "    @Test\n    public void testTanh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);\n    }\n",
        "begin_line": 975,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 977,col 9)-(line 977,col 38)",
            "(line 978,col 9)-(line 978,col 60)",
            "(line 979,col 9)-(line 979,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhNaN()",
        "snippet": "    @Test\n    public void testTanhNaN() {\n        Assert.assertTrue(Complex.NaN.tanh().isNaN());\n    }\n",
        "begin_line": 982,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 984,col 9)-(line 984,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhInf()",
        "snippet": "    @Test\n    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(nanZero, infOne.tanh());\n        TestUtils.assertSame(nanZero, negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }\n",
        "begin_line": 987,
        "end_line": 997,
        "comment": "",
        "child_ranges": [
            "(line 989,col 9)-(line 989,col 57)",
            "(line 990,col 9)-(line 990,col 60)",
            "(line 991,col 9)-(line 991,col 53)",
            "(line 992,col 9)-(line 992,col 56)",
            "(line 993,col 9)-(line 993,col 57)",
            "(line 994,col 9)-(line 994,col 60)",
            "(line 995,col 9)-(line 995,col 60)",
            "(line 996,col 9)-(line 996,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhCritical()",
        "snippet": "    @Test\n    public void testTanhCritical() {\n        TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());\n    }\n",
        "begin_line": 999,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 9)-(line 1001,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMath221()",
        "snippet": "    @Test\n    public void testMath221() {\n        Assert.assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n    }\n",
        "begin_line": 1005,
        "end_line": 1008,
        "comment": " test issue MATH-221 ",
        "child_ranges": [
            "(line 1007,col 9)-(line 1007,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_thirdRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_thirdRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(-2,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.3660254037844386,  thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.36602540378443843,  thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(0.366025403784439,    thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.3660254037844384,  thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1021,
        "end_line": 1038,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = -2 + 2 * i</b>\n     *   => z_0 =  1      +          i\n     *   => z_1 = -1.3660 + 0.3660 * i\n     *   => z_2 =  0.3660 - 1.3660 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1024,col 9)-(line 1024,col 38)",
            "(line 1026,col 9)-(line 1026,col 71)",
            "(line 1028,col 9)-(line 1028,col 53)",
            "(line 1030,col 9)-(line 1030,col 91)",
            "(line 1031,col 9)-(line 1031,col 91)",
            "(line 1033,col 9)-(line 1033,col 91)",
            "(line 1034,col 9)-(line 1034,col 91)",
            "(line 1036,col 9)-(line 1036,col 91)",
            "(line 1037,col 9)-(line 1037,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_fourthRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_fourthRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(5,-2);\n        // The List holding all fourth roots\n        Complex[] fourthRootsOfZ = z.nthRoot(4).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(4, fourthRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(-0.14469266210702247,   fourthRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(0.14469266210702256,    fourthRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(0.14469266210702267,    fourthRootsOfZ[2].getImaginary(), 1.0e-5);\n        // test z_3\n        Assert.assertEquals(-0.14469266210702275,   fourthRootsOfZ[3].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[3].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1053,
        "end_line": 1073,
        "comment": "\n     * Test: computing <b>fourth roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 5 - 2 * i</b>\n     *   => z_0 =  1.5164 - 0.1446 * i\n     *   => z_1 =  0.1446 + 1.5164 * i\n     *   => z_2 = -1.5164 + 0.1446 * i\n     *   => z_3 = -1.5164 - 0.1446 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1056,col 9)-(line 1056,col 38)",
            "(line 1058,col 9)-(line 1058,col 72)",
            "(line 1060,col 9)-(line 1060,col 54)",
            "(line 1062,col 9)-(line 1062,col 94)",
            "(line 1063,col 9)-(line 1063,col 94)",
            "(line 1065,col 9)-(line 1065,col 94)",
            "(line 1066,col 9)-(line 1066,col 94)",
            "(line 1068,col 9)-(line 1068,col 94)",
            "(line 1069,col 9)-(line 1069,col 94)",
            "(line 1071,col 9)-(line 1071,col 94)",
            "(line 1072,col 9)-(line 1072,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty() {\n        // The number 8 has three third roots. One we all already know is the number 2.\n        // But there are two more complex roots.\n        Complex z = new Complex(8,0);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.0,                thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1086,
        "end_line": 1104,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 8</b>\n     *   => z_0 =  2\n     *   => z_1 = -1 + 1.73205 * i\n     *   => z_2 = -1 - 1.73205 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1090,col 9)-(line 1090,col 37)",
            "(line 1092,col 9)-(line 1092,col 71)",
            "(line 1094,col 9)-(line 1094,col 53)",
            "(line 1096,col 9)-(line 1096,col 89)",
            "(line 1097,col 9)-(line 1097,col 89)",
            "(line 1099,col 9)-(line 1099,col 89)",
            "(line 1100,col 9)-(line 1100,col 89)",
            "(line 1102,col 9)-(line 1102,col 89)",
            "(line 1103,col 9)-(line 1103,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_realPartZero()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_realPartZero() {\n        // complex number with only imaginary part\n        Complex z = new Complex(0,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0911236359717216,     thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.2599210498948732,     thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 1118,
        "end_line": 1135,
        "comment": "\n     * Test: computing <b>third roots</b> of z with real part 0.\n     * <pre>\n     * <code>\n     * <b>z = 2 * i</b>\n     *   => z_0 =  1.0911 + 0.6299 * i\n     *   => z_1 = -1.0911 + 0.6299 * i\n     *   => z_2 = -2.3144 - 1.2599 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 1121,col 9)-(line 1121,col 37)",
            "(line 1123,col 9)-(line 1123,col 71)",
            "(line 1125,col 9)-(line 1125,col 53)",
            "(line 1127,col 9)-(line 1127,col 94)",
            "(line 1128,col 9)-(line 1128,col 94)",
            "(line 1130,col 9)-(line 1130,col 94)",
            "(line 1131,col 9)-(line 1131,col 94)",
            "(line 1133,col 9)-(line 1133,col 94)",
            "(line 1134,col 9)-(line 1134,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_NAN_Inf() {\n        // NaN + finite -> NaN\n        List<Complex> roots = oneNaN.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        roots = nanZero.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // NaN + infinite -> NaN\n        roots = nanInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // finite + infinite -> Inf\n        roots = oneInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n\n        // infinite + infinite -> Inf\n        roots = negInfInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n    }\n",
        "begin_line": 1140,
        "end_line": 1165,
        "comment": "\n     * Test cornercases with NaN and Infinity.\n     ",
        "child_ranges": [
            "(line 1143,col 9)-(line 1143,col 48)",
            "(line 1144,col 9)-(line 1144,col 44)",
            "(line 1145,col 9)-(line 1145,col 55)",
            "(line 1147,col 9)-(line 1147,col 35)",
            "(line 1148,col 9)-(line 1148,col 44)",
            "(line 1149,col 9)-(line 1149,col 55)",
            "(line 1152,col 9)-(line 1152,col 34)",
            "(line 1153,col 9)-(line 1153,col 44)",
            "(line 1154,col 9)-(line 1154,col 55)",
            "(line 1157,col 9)-(line 1157,col 34)",
            "(line 1158,col 9)-(line 1158,col 44)",
            "(line 1159,col 9)-(line 1159,col 55)",
            "(line 1162,col 9)-(line 1162,col 37)",
            "(line 1163,col 9)-(line 1163,col 44)",
            "(line 1164,col 9)-(line 1164,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgument()",
        "snippet": "    @Test\n    public void testGetArgument() {\n        Complex z = new Complex(1, 0);\n        Assert.assertEquals(0.0, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, 1);\n        Assert.assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, 1);\n        Assert.assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 1);\n        Assert.assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 0);\n        Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, -1);\n        Assert.assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, -1);\n        Assert.assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, -1);\n        Assert.assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n    }\n",
        "begin_line": 1170,
        "end_line": 1196,
        "comment": "\n     * Test standard values\n     ",
        "child_ranges": [
            "(line 1172,col 9)-(line 1172,col 38)",
            "(line 1173,col 9)-(line 1173,col 59)",
            "(line 1175,col 9)-(line 1175,col 30)",
            "(line 1176,col 9)-(line 1176,col 69)",
            "(line 1178,col 9)-(line 1178,col 30)",
            "(line 1179,col 9)-(line 1179,col 69)",
            "(line 1181,col 9)-(line 1181,col 31)",
            "(line 1182,col 9)-(line 1182,col 73)",
            "(line 1184,col 9)-(line 1184,col 31)",
            "(line 1185,col 9)-(line 1185,col 67)",
            "(line 1187,col 9)-(line 1187,col 32)",
            "(line 1188,col 9)-(line 1188,col 74)",
            "(line 1190,col 9)-(line 1190,col 31)",
            "(line 1191,col 9)-(line 1191,col 70)",
            "(line 1193,col 9)-(line 1193,col 31)",
            "(line 1194,col 9)-(line 1194,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentInf()",
        "snippet": "    @Test\n    public void testGetArgumentInf() {\n        Assert.assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);\n    }\n",
        "begin_line": 1201,
        "end_line": 1211,
        "comment": "\n     * Verify atan2-style handling of infinite parts\n     ",
        "child_ranges": [
            "(line 1203,col 9)-(line 1203,col 74)",
            "(line 1204,col 9)-(line 1204,col 74)",
            "(line 1205,col 9)-(line 1205,col 64)",
            "(line 1206,col 9)-(line 1206,col 75)",
            "(line 1207,col 9)-(line 1207,col 65)",
            "(line 1208,col 9)-(line 1208,col 75)",
            "(line 1209,col 9)-(line 1209,col 85)",
            "(line 1210,col 9)-(line 1210,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN()",
        "snippet": "    @Test\n    public void testGetArgumentNaN() {\n        Assert.assertTrue(Double.isNaN(nanZero.getArgument()));\n        Assert.assertTrue(Double.isNaN(zeroNaN.getArgument()));\n        Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument()));\n    }\n",
        "begin_line": 1216,
        "end_line": 1221,
        "comment": "\n     * Verify that either part NaN results in NaN\n     ",
        "child_ranges": [
            "(line 1218,col 9)-(line 1218,col 63)",
            "(line 1219,col 9)-(line 1219,col 63)",
            "(line 1220,col 9)-(line 1220,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(z, TestUtils.serializeAndRecover(z));\n        Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN);\n        Assert.assertEquals(nanZero, ncmplx);\n        Assert.assertTrue(ncmplx.isNaN());\n        Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf);\n        Assert.assertEquals(infInf, infcmplx);\n        Assert.assertTrue(infcmplx.isInfinite());\n        TestComplex tz = new TestComplex(3.0, 4.0);\n        Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz));\n        TestComplex ntcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(oneNaN));\n        Assert.assertEquals(nanZero, ntcmplx);\n        Assert.assertTrue(ntcmplx.isNaN());\n        TestComplex inftcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(infInf));\n        Assert.assertEquals(infInf, inftcmplx);\n        Assert.assertTrue(inftcmplx.isInfinite());\n    }\n",
        "begin_line": 1223,
        "end_line": 1241,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 9)-(line 1225,col 42)",
            "(line 1226,col 9)-(line 1226,col 65)",
            "(line 1227,col 9)-(line 1227,col 72)",
            "(line 1228,col 9)-(line 1228,col 45)",
            "(line 1229,col 9)-(line 1229,col 42)",
            "(line 1230,col 9)-(line 1230,col 74)",
            "(line 1231,col 9)-(line 1231,col 46)",
            "(line 1232,col 9)-(line 1232,col 49)",
            "(line 1233,col 9)-(line 1233,col 51)",
            "(line 1234,col 9)-(line 1234,col 67)",
            "(line 1235,col 9)-(line 1235,col 98)",
            "(line 1236,col 9)-(line 1236,col 46)",
            "(line 1237,col 9)-(line 1237,col 43)",
            "(line 1238,col 9)-(line 1238,col 100)",
            "(line 1239,col 9)-(line 1239,col 47)",
            "(line 1240,col 9)-(line 1240,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(double, double)",
        "snippet": "        public TestComplex(double real, double imaginary) {\n            super(real, imaginary);\n        }\n",
        "begin_line": 1253,
        "end_line": 1255,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 13)-(line 1254,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(org.apache.commons.math.complex.Complex)",
        "snippet": "        public TestComplex(Complex other){\n            this(other.getReal(), other.getImaginary());\n        }\n",
        "begin_line": 1257,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1258,col 13)-(line 1258,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.createComplex(double, double)",
        "snippet": "        @Override\n        protected TestComplex createComplex(double real, double imaginary){\n            return new TestComplex(real, imaginary);\n        }\n",
        "begin_line": 1261,
        "end_line": 1264,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 13)-(line 1263,col 52)"
        ]
    }
]