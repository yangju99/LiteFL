[
    {
        "name": "RandomStringUtils.random#223",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang3.RandomStringUtils",
        "signature": "org.apache.commons.lang3.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random)",
        "snippet": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }\n",
        "begin_line": 223,
        "end_line": 282,
        "comment": "\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "RandomStringUtils.random#317",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang3.RandomStringUtils",
        "signature": "org.apache.commons.lang3.RandomStringUtils.random(int, char...)",
        "snippet": "    public static String random(int count, char... chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, 0, chars.length, false, false, chars, RANDOM);\n    }\n",
        "begin_line": 317,
        "end_line": 322,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the character array containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomStringUtils.random#68",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang3.RandomStringUtils",
        "signature": "org.apache.commons.lang3.RandomStringUtils.random(int)",
        "snippet": "    public static String random(int count) {\n        return random(count, false, false);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of all characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomStringUtils.random#142",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang3.RandomStringUtils",
        "signature": "org.apache.commons.lang3.RandomStringUtils.random(int, boolean, boolean)",
        "snippet": "    public static String random(int count, boolean letters, boolean numbers) {\n        return random(count, 0, 0, letters, numbers);\n    }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomStringUtils.random#162",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang3.RandomStringUtils",
        "signature": "org.apache.commons.lang3.RandomStringUtils.random(int, int, int, boolean, boolean)",
        "snippet": "    public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n        return random(count, start, end, letters, numbers, null, RANDOM);\n    }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    }
]