[
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestGJChronology.class);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.TestGJChronology(java.lang.String)",
        "snippet": "    public TestGJChronology(String name) {\n        super(name);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 59)",
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 49)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 78,col 9)-(line 78,col 67)",
            "(line 79,col 9)-(line 79,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 47)",
            "(line 84,col 9)-(line 84,col 54)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 42)",
            "(line 87,col 9)-(line 87,col 36)",
            "(line 88,col 9)-(line 88,col 32)",
            "(line 89,col 9)-(line 89,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testFactoryUTC()",
        "snippet": "    public void testFactoryUTC() {\n        assertEquals(DateTimeZone.UTC, GJChronology.getInstanceUTC().getZone());\n        assertSame(GJChronology.class, GJChronology.getInstanceUTC().getClass());\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 81)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testFactory()",
        "snippet": "    public void testFactory() {\n        assertEquals(LONDON, GJChronology.getInstance().getZone());\n        assertSame(GJChronology.class, GJChronology.getInstance().getClass());\n    }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 67)",
            "(line 100,col 9)-(line 100,col 78)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testFactory_Zone()",
        "snippet": "    public void testFactory_Zone() {\n        assertEquals(TOKYO, GJChronology.getInstance(TOKYO).getZone());\n        assertEquals(PARIS, GJChronology.getInstance(PARIS).getZone());\n        assertEquals(LONDON, GJChronology.getInstance(null).getZone());\n        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO).getClass());\n    }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 71)",
            "(line 105,col 9)-(line 105,col 71)",
            "(line 106,col 9)-(line 106,col 71)",
            "(line 107,col 9)-(line 107,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testFactory_Zone_long_int()",
        "snippet": "    public void testFactory_Zone_long_int() {\n        GJChronology chrono = GJChronology.getInstance(TOKYO, 0L, 2);\n        assertEquals(TOKYO, chrono.getZone());\n        assertEquals(new Instant(0L), chrono.getGregorianCutover());\n        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, 0L, 2).getClass());\n        \n        try {\n            GJChronology.getInstance(TOKYO, 0L, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            GJChronology.getInstance(TOKYO, 0L, 8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 110,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 69)",
            "(line 112,col 9)-(line 112,col 46)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 90)",
            "(line 117,col 9)-(line 120,col 48)",
            "(line 121,col 9)-(line 124,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testFactory_Zone_RI()",
        "snippet": "    public void testFactory_Zone_RI() {\n        GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L));\n        assertEquals(TOKYO, chrono.getZone());\n        assertEquals(new Instant(0L), chrono.getGregorianCutover());\n        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass());\n        \n        DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC);\n        chrono = GJChronology.getInstance(TOKYO, null);\n        assertEquals(TOKYO, chrono.getZone());\n        assertEquals(cutover.toInstant(), chrono.getGregorianCutover());\n    }\n",
        "begin_line": 127,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 79)",
            "(line 129,col 9)-(line 129,col 46)",
            "(line 130,col 9)-(line 130,col 68)",
            "(line 131,col 9)-(line 131,col 100)",
            "(line 133,col 9)-(line 133,col 84)",
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testFactory_Zone_RI_int()",
        "snippet": "    public void testFactory_Zone_RI_int() {\n        GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L), 2);\n        assertEquals(TOKYO, chrono.getZone());\n        assertEquals(new Instant(0L), chrono.getGregorianCutover());\n        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L), 2).getClass());\n        \n        DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC);\n        chrono = GJChronology.getInstance(TOKYO, null, 2);\n        assertEquals(TOKYO, chrono.getZone());\n        assertEquals(cutover.toInstant(), chrono.getGregorianCutover());\n        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n        \n        try {\n            GJChronology.getInstance(TOKYO, new Instant(0L), 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            GJChronology.getInstance(TOKYO, new Instant(0L), 8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 139,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 82)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 68)",
            "(line 143,col 9)-(line 143,col 60)",
            "(line 144,col 9)-(line 144,col 103)",
            "(line 146,col 9)-(line 146,col 84)",
            "(line 147,col 9)-(line 147,col 58)",
            "(line 148,col 9)-(line 148,col 46)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 60)",
            "(line 152,col 9)-(line 155,col 48)",
            "(line 156,col 9)-(line 159,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testEquality()",
        "snippet": "    public void testEquality() {\n        assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO));\n        assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(LONDON));\n        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(PARIS));\n        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC());\n        assertSame(GJChronology.getInstance(), GJChronology.getInstance(LONDON));\n    }\n",
        "begin_line": 163,
        "end_line": 169,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 85)",
            "(line 165,col 9)-(line 165,col 87)",
            "(line 166,col 9)-(line 166,col 85)",
            "(line 167,col 9)-(line 167,col 81)",
            "(line 168,col 9)-(line 168,col 81)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testWithUTC()",
        "snippet": "    public void testWithUTC() {\n        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(LONDON).withUTC());\n        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(TOKYO).withUTC());\n        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC().withUTC());\n        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance().withUTC());\n    }\n",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 94)",
            "(line 173,col 9)-(line 173,col 93)",
            "(line 174,col 9)-(line 174,col 91)",
            "(line 175,col 9)-(line 175,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testWithZone()",
        "snippet": "    public void testWithZone() {\n        assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO).withZone(TOKYO));\n        assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(LONDON));\n        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(TOKYO).withZone(PARIS));\n        assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(null));\n        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance().withZone(PARIS));\n        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstanceUTC().withZone(PARIS));\n    }\n",
        "begin_line": 178,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 101)",
            "(line 180,col 9)-(line 180,col 103)",
            "(line 181,col 9)-(line 181,col 101)",
            "(line 182,col 9)-(line 182,col 101)",
            "(line 183,col 9)-(line 183,col 96)",
            "(line 184,col 9)-(line 184,col 99)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"GJChronology[Europe/London]\", GJChronology.getInstance(LONDON).toString());\n        assertEquals(\"GJChronology[Asia/Tokyo]\", GJChronology.getInstance(TOKYO).toString());\n        assertEquals(\"GJChronology[Europe/London]\", GJChronology.getInstance().toString());\n        assertEquals(\"GJChronology[UTC]\", GJChronology.getInstanceUTC().toString());\n        assertEquals(\"GJChronology[UTC,cutover=1970-01-01]\", GJChronology.getInstance(DateTimeZone.UTC, 0L, 4).toString());\n        assertEquals(\"GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=2]\", GJChronology.getInstance(DateTimeZone.UTC, 1L, 2).toString());\n    }\n",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 97)",
            "(line 189,col 9)-(line 189,col 93)",
            "(line 190,col 9)-(line 190,col 91)",
            "(line 191,col 9)-(line 191,col 84)",
            "(line 192,col 9)-(line 192,col 123)",
            "(line 193,col 9)-(line 193,col 144)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testDurationFields()",
        "snippet": "    public void testDurationFields() {\n        assertEquals(\"eras\", GJChronology.getInstance().eras().getName());\n        assertEquals(\"centuries\", GJChronology.getInstance().centuries().getName());\n        assertEquals(\"years\", GJChronology.getInstance().years().getName());\n        assertEquals(\"weekyears\", GJChronology.getInstance().weekyears().getName());\n        assertEquals(\"months\", GJChronology.getInstance().months().getName());\n        assertEquals(\"weeks\", GJChronology.getInstance().weeks().getName());\n        assertEquals(\"halfdays\", GJChronology.getInstance().halfdays().getName());\n        assertEquals(\"days\", GJChronology.getInstance().days().getName());\n        assertEquals(\"hours\", GJChronology.getInstance().hours().getName());\n        assertEquals(\"minutes\", GJChronology.getInstance().minutes().getName());\n        assertEquals(\"seconds\", GJChronology.getInstance().seconds().getName());\n        assertEquals(\"millis\", GJChronology.getInstance().millis().getName());\n        \n        assertEquals(false, GJChronology.getInstance().eras().isSupported());\n        assertEquals(true, GJChronology.getInstance().centuries().isSupported());\n        assertEquals(true, GJChronology.getInstance().years().isSupported());\n        assertEquals(true, GJChronology.getInstance().weekyears().isSupported());\n        assertEquals(true, GJChronology.getInstance().months().isSupported());\n        assertEquals(true, GJChronology.getInstance().weeks().isSupported());\n        assertEquals(true, GJChronology.getInstance().days().isSupported());\n        assertEquals(true, GJChronology.getInstance().halfdays().isSupported());\n        assertEquals(true, GJChronology.getInstance().hours().isSupported());\n        assertEquals(true, GJChronology.getInstance().minutes().isSupported());\n        assertEquals(true, GJChronology.getInstance().seconds().isSupported());\n        assertEquals(true, GJChronology.getInstance().millis().isSupported());\n        \n        assertEquals(false, GJChronology.getInstance().centuries().isPrecise());\n        assertEquals(false, GJChronology.getInstance().years().isPrecise());\n        assertEquals(false, GJChronology.getInstance().weekyears().isPrecise());\n        assertEquals(false, GJChronology.getInstance().months().isPrecise());\n        assertEquals(false, GJChronology.getInstance().weeks().isPrecise());\n        assertEquals(false, GJChronology.getInstance().days().isPrecise());\n        assertEquals(false, GJChronology.getInstance().halfdays().isPrecise());\n        assertEquals(true, GJChronology.getInstance().hours().isPrecise());\n        assertEquals(true, GJChronology.getInstance().minutes().isPrecise());\n        assertEquals(true, GJChronology.getInstance().seconds().isPrecise());\n        assertEquals(true, GJChronology.getInstance().millis().isPrecise());\n        \n        assertEquals(false, GJChronology.getInstanceUTC().centuries().isPrecise());\n        assertEquals(false, GJChronology.getInstanceUTC().years().isPrecise());\n        assertEquals(false, GJChronology.getInstanceUTC().weekyears().isPrecise());\n        assertEquals(false, GJChronology.getInstanceUTC().months().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().weeks().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().days().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().halfdays().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().hours().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());\n        assertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());\n        \n        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n        assertEquals(false, GJChronology.getInstance(gmt).centuries().isPrecise());\n        assertEquals(false, GJChronology.getInstance(gmt).years().isPrecise());\n        assertEquals(false, GJChronology.getInstance(gmt).weekyears().isPrecise());\n        assertEquals(false, GJChronology.getInstance(gmt).months().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).weeks().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).days().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).halfdays().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).hours().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).minutes().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).seconds().isPrecise());\n        assertEquals(true, GJChronology.getInstance(gmt).millis().isPrecise());\n    }\n",
        "begin_line": 197,
        "end_line": 260,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 74)",
            "(line 199,col 9)-(line 199,col 84)",
            "(line 200,col 9)-(line 200,col 76)",
            "(line 201,col 9)-(line 201,col 84)",
            "(line 202,col 9)-(line 202,col 78)",
            "(line 203,col 9)-(line 203,col 76)",
            "(line 204,col 9)-(line 204,col 82)",
            "(line 205,col 9)-(line 205,col 74)",
            "(line 206,col 9)-(line 206,col 76)",
            "(line 207,col 9)-(line 207,col 80)",
            "(line 208,col 9)-(line 208,col 80)",
            "(line 209,col 9)-(line 209,col 78)",
            "(line 211,col 9)-(line 211,col 77)",
            "(line 212,col 9)-(line 212,col 81)",
            "(line 213,col 9)-(line 213,col 77)",
            "(line 214,col 9)-(line 214,col 81)",
            "(line 215,col 9)-(line 215,col 78)",
            "(line 216,col 9)-(line 216,col 77)",
            "(line 217,col 9)-(line 217,col 76)",
            "(line 218,col 9)-(line 218,col 80)",
            "(line 219,col 9)-(line 219,col 77)",
            "(line 220,col 9)-(line 220,col 79)",
            "(line 221,col 9)-(line 221,col 79)",
            "(line 222,col 9)-(line 222,col 78)",
            "(line 224,col 9)-(line 224,col 80)",
            "(line 225,col 9)-(line 225,col 76)",
            "(line 226,col 9)-(line 226,col 80)",
            "(line 227,col 9)-(line 227,col 77)",
            "(line 228,col 9)-(line 228,col 76)",
            "(line 229,col 9)-(line 229,col 75)",
            "(line 230,col 9)-(line 230,col 79)",
            "(line 231,col 9)-(line 231,col 75)",
            "(line 232,col 9)-(line 232,col 77)",
            "(line 233,col 9)-(line 233,col 77)",
            "(line 234,col 9)-(line 234,col 76)",
            "(line 236,col 9)-(line 236,col 83)",
            "(line 237,col 9)-(line 237,col 79)",
            "(line 238,col 9)-(line 238,col 83)",
            "(line 239,col 9)-(line 239,col 80)",
            "(line 240,col 9)-(line 240,col 78)",
            "(line 241,col 9)-(line 241,col 77)",
            "(line 242,col 9)-(line 242,col 81)",
            "(line 243,col 9)-(line 243,col 78)",
            "(line 244,col 9)-(line 244,col 80)",
            "(line 245,col 9)-(line 245,col 80)",
            "(line 246,col 9)-(line 246,col 79)",
            "(line 248,col 9)-(line 248,col 57)",
            "(line 249,col 9)-(line 249,col 83)",
            "(line 250,col 9)-(line 250,col 79)",
            "(line 251,col 9)-(line 251,col 83)",
            "(line 252,col 9)-(line 252,col 80)",
            "(line 253,col 9)-(line 253,col 78)",
            "(line 254,col 9)-(line 254,col 77)",
            "(line 255,col 9)-(line 255,col 81)",
            "(line 256,col 9)-(line 256,col 78)",
            "(line 257,col 9)-(line 257,col 80)",
            "(line 258,col 9)-(line 258,col 80)",
            "(line 259,col 9)-(line 259,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testDateFields()",
        "snippet": "    public void testDateFields() {\n        assertEquals(\"era\", GJChronology.getInstance().era().getName());\n        assertEquals(\"centuryOfEra\", GJChronology.getInstance().centuryOfEra().getName());\n        assertEquals(\"yearOfCentury\", GJChronology.getInstance().yearOfCentury().getName());\n        assertEquals(\"yearOfEra\", GJChronology.getInstance().yearOfEra().getName());\n        assertEquals(\"year\", GJChronology.getInstance().year().getName());\n        assertEquals(\"monthOfYear\", GJChronology.getInstance().monthOfYear().getName());\n        assertEquals(\"weekyearOfCentury\", GJChronology.getInstance().weekyearOfCentury().getName());\n        assertEquals(\"weekyear\", GJChronology.getInstance().weekyear().getName());\n        assertEquals(\"weekOfWeekyear\", GJChronology.getInstance().weekOfWeekyear().getName());\n        assertEquals(\"dayOfYear\", GJChronology.getInstance().dayOfYear().getName());\n        assertEquals(\"dayOfMonth\", GJChronology.getInstance().dayOfMonth().getName());\n        assertEquals(\"dayOfWeek\", GJChronology.getInstance().dayOfWeek().getName());\n        \n        assertEquals(true, GJChronology.getInstance().era().isSupported());\n        assertEquals(true, GJChronology.getInstance().centuryOfEra().isSupported());\n        assertEquals(true, GJChronology.getInstance().yearOfCentury().isSupported());\n        assertEquals(true, GJChronology.getInstance().yearOfEra().isSupported());\n        assertEquals(true, GJChronology.getInstance().year().isSupported());\n        assertEquals(true, GJChronology.getInstance().monthOfYear().isSupported());\n        assertEquals(true, GJChronology.getInstance().weekyearOfCentury().isSupported());\n        assertEquals(true, GJChronology.getInstance().weekyear().isSupported());\n        assertEquals(true, GJChronology.getInstance().weekOfWeekyear().isSupported());\n        assertEquals(true, GJChronology.getInstance().dayOfYear().isSupported());\n        assertEquals(true, GJChronology.getInstance().dayOfMonth().isSupported());\n        assertEquals(true, GJChronology.getInstance().dayOfWeek().isSupported());\n    }\n",
        "begin_line": 262,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 72)",
            "(line 264,col 9)-(line 264,col 90)",
            "(line 265,col 9)-(line 265,col 92)",
            "(line 266,col 9)-(line 266,col 84)",
            "(line 267,col 9)-(line 267,col 74)",
            "(line 268,col 9)-(line 268,col 88)",
            "(line 269,col 9)-(line 269,col 100)",
            "(line 270,col 9)-(line 270,col 82)",
            "(line 271,col 9)-(line 271,col 94)",
            "(line 272,col 9)-(line 272,col 84)",
            "(line 273,col 9)-(line 273,col 86)",
            "(line 274,col 9)-(line 274,col 84)",
            "(line 276,col 9)-(line 276,col 75)",
            "(line 277,col 9)-(line 277,col 84)",
            "(line 278,col 9)-(line 278,col 85)",
            "(line 279,col 9)-(line 279,col 81)",
            "(line 280,col 9)-(line 280,col 76)",
            "(line 281,col 9)-(line 281,col 83)",
            "(line 282,col 9)-(line 282,col 89)",
            "(line 283,col 9)-(line 283,col 80)",
            "(line 284,col 9)-(line 284,col 86)",
            "(line 285,col 9)-(line 285,col 81)",
            "(line 286,col 9)-(line 286,col 82)",
            "(line 287,col 9)-(line 287,col 81)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testTimeFields()",
        "snippet": "    public void testTimeFields() {\n        assertEquals(\"halfdayOfDay\", GJChronology.getInstance().halfdayOfDay().getName());\n        assertEquals(\"clockhourOfHalfday\", GJChronology.getInstance().clockhourOfHalfday().getName());\n        assertEquals(\"hourOfHalfday\", GJChronology.getInstance().hourOfHalfday().getName());\n        assertEquals(\"clockhourOfDay\", GJChronology.getInstance().clockhourOfDay().getName());\n        assertEquals(\"hourOfDay\", GJChronology.getInstance().hourOfDay().getName());\n        assertEquals(\"minuteOfDay\", GJChronology.getInstance().minuteOfDay().getName());\n        assertEquals(\"minuteOfHour\", GJChronology.getInstance().minuteOfHour().getName());\n        assertEquals(\"secondOfDay\", GJChronology.getInstance().secondOfDay().getName());\n        assertEquals(\"secondOfMinute\", GJChronology.getInstance().secondOfMinute().getName());\n        assertEquals(\"millisOfDay\", GJChronology.getInstance().millisOfDay().getName());\n        assertEquals(\"millisOfSecond\", GJChronology.getInstance().millisOfSecond().getName());\n        \n        assertEquals(true, GJChronology.getInstance().halfdayOfDay().isSupported());\n        assertEquals(true, GJChronology.getInstance().clockhourOfHalfday().isSupported());\n        assertEquals(true, GJChronology.getInstance().hourOfHalfday().isSupported());\n        assertEquals(true, GJChronology.getInstance().clockhourOfDay().isSupported());\n        assertEquals(true, GJChronology.getInstance().hourOfDay().isSupported());\n        assertEquals(true, GJChronology.getInstance().minuteOfDay().isSupported());\n        assertEquals(true, GJChronology.getInstance().minuteOfHour().isSupported());\n        assertEquals(true, GJChronology.getInstance().secondOfDay().isSupported());\n        assertEquals(true, GJChronology.getInstance().secondOfMinute().isSupported());\n        assertEquals(true, GJChronology.getInstance().millisOfDay().isSupported());\n        assertEquals(true, GJChronology.getInstance().millisOfSecond().isSupported());\n    }\n",
        "begin_line": 290,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 90)",
            "(line 292,col 9)-(line 292,col 102)",
            "(line 293,col 9)-(line 293,col 92)",
            "(line 294,col 9)-(line 294,col 94)",
            "(line 295,col 9)-(line 295,col 84)",
            "(line 296,col 9)-(line 296,col 88)",
            "(line 297,col 9)-(line 297,col 90)",
            "(line 298,col 9)-(line 298,col 88)",
            "(line 299,col 9)-(line 299,col 94)",
            "(line 300,col 9)-(line 300,col 88)",
            "(line 301,col 9)-(line 301,col 94)",
            "(line 303,col 9)-(line 303,col 84)",
            "(line 304,col 9)-(line 304,col 90)",
            "(line 305,col 9)-(line 305,col 85)",
            "(line 306,col 9)-(line 306,col 86)",
            "(line 307,col 9)-(line 307,col 81)",
            "(line 308,col 9)-(line 308,col 83)",
            "(line 309,col 9)-(line 309,col 84)",
            "(line 310,col 9)-(line 310,col 83)",
            "(line 311,col 9)-(line 311,col 86)",
            "(line 312,col 9)-(line 312,col 83)",
            "(line 313,col 9)-(line 313,col 86)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testIllegalDates()",
        "snippet": "    public void testIllegalDates() {\n        try {\n            new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));\n            fail(\"Constructed illegal date\");\n        } catch (IllegalArgumentException e) { /* good */ }\n\n        try {\n            new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));\n            fail(\"Constructed illegal date\");\n        } catch (IllegalArgumentException e) { /* good */ }\n    }\n",
        "begin_line": 316,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 320,col 59)",
            "(line 322,col 9)-(line 325,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testParseEquivalence()",
        "snippet": "    public void testParseEquivalence() {\n        testParse(\"1581-01-01T01:23:45.678\", 1581, 1, 1, 1, 23, 45, 678);\n        testParse(\"1581-06-30\", 1581, 6, 30, 0, 0, 0, 0);\n        testParse(\"1582-01-01T01:23:45.678\", 1582, 1, 1, 1, 23, 45, 678);\n        testParse(\"1582-06-30T01:23:45.678\", 1582, 6, 30, 1, 23, 45, 678);\n        testParse(\"1582-10-04\", 1582, 10, 4, 0, 0, 0, 0);\n        testParse(\"1582-10-15\", 1582, 10, 15, 0, 0, 0, 0);\n        testParse(\"1582-12-31\", 1582, 12, 31, 0, 0, 0, 0);\n        testParse(\"1583-12-31\", 1583, 12, 31, 0, 0, 0, 0);\n    }\n",
        "begin_line": 328,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 73)",
            "(line 330,col 9)-(line 330,col 57)",
            "(line 331,col 9)-(line 331,col 73)",
            "(line 332,col 9)-(line 332,col 74)",
            "(line 333,col 9)-(line 333,col 57)",
            "(line 334,col 9)-(line 334,col 58)",
            "(line 335,col 9)-(line 335,col 58)",
            "(line 336,col 9)-(line 336,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testParse(java.lang.String, int, int, int, int, int, int, int)",
        "snippet": "    private void testParse(String str,\n                           int year, int month, int day,\n                           int hour, int minute, int second, int millis) {\n        assertEquals(new DateTime(str, GJChronology.getInstance(DateTimeZone.UTC)),\n                     new DateTime(year, month, day, hour, minute, second, millis,\n                                  GJChronology.getInstance(DateTimeZone.UTC)));\n    }\n",
        "begin_line": 339,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 344,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testCutoverAddYears()",
        "snippet": "    public void testCutoverAddYears() {\n        testAdd(\"1582-01-01\", DurationFieldType.years(), 1, \"1583-01-01\");\n        testAdd(\"1582-02-15\", DurationFieldType.years(), 1, \"1583-02-15\");\n        testAdd(\"1582-02-28\", DurationFieldType.years(), 1, \"1583-02-28\");\n        testAdd(\"1582-03-01\", DurationFieldType.years(), 1, \"1583-03-01\");\n        testAdd(\"1582-09-30\", DurationFieldType.years(), 1, \"1583-09-30\");\n        testAdd(\"1582-10-01\", DurationFieldType.years(), 1, \"1583-10-01\");\n        testAdd(\"1582-10-04\", DurationFieldType.years(), 1, \"1583-10-04\");\n        testAdd(\"1582-10-15\", DurationFieldType.years(), 1, \"1583-10-15\");\n        testAdd(\"1582-10-16\", DurationFieldType.years(), 1, \"1583-10-16\");\n\n        // Leap years...\n        testAdd(\"1580-01-01\", DurationFieldType.years(), 4, \"1584-01-01\");\n        testAdd(\"1580-02-29\", DurationFieldType.years(), 4, \"1584-02-29\");\n        testAdd(\"1580-10-01\", DurationFieldType.years(), 4, \"1584-10-01\");\n        testAdd(\"1580-10-10\", DurationFieldType.years(), 4, \"1584-10-10\");\n        testAdd(\"1580-10-15\", DurationFieldType.years(), 4, \"1584-10-15\");\n        testAdd(\"1580-12-31\", DurationFieldType.years(), 4, \"1584-12-31\");\n    }\n",
        "begin_line": 347,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 74)",
            "(line 349,col 9)-(line 349,col 74)",
            "(line 350,col 9)-(line 350,col 74)",
            "(line 351,col 9)-(line 351,col 74)",
            "(line 352,col 9)-(line 352,col 74)",
            "(line 353,col 9)-(line 353,col 74)",
            "(line 354,col 9)-(line 354,col 74)",
            "(line 355,col 9)-(line 355,col 74)",
            "(line 356,col 9)-(line 356,col 74)",
            "(line 359,col 9)-(line 359,col 74)",
            "(line 360,col 9)-(line 360,col 74)",
            "(line 361,col 9)-(line 361,col 74)",
            "(line 362,col 9)-(line 362,col 74)",
            "(line 363,col 9)-(line 363,col 74)",
            "(line 364,col 9)-(line 364,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testCutoverAddWeekyears()",
        "snippet": "    public void testCutoverAddWeekyears() {\n        testAdd(\"1582-W01-1\", DurationFieldType.weekyears(), 1, \"1583-W01-1\");\n        testAdd(\"1582-W39-1\", DurationFieldType.weekyears(), 1, \"1583-W39-1\");\n        testAdd(\"1583-W45-1\", DurationFieldType.weekyears(), 1, \"1584-W45-1\");\n\n        // This test fails, but I'm not sure if its worth fixing. The date\n        // falls after the cutover, but in the cutover year. The add operation\n        // is performed completely within the gregorian calendar, with no\n        // crossing of the cutover. As a result, no special correction is\n        // applied. Since the full gregorian year of 1582 has a different week\n        // numbers than the full julian year of 1582, the week number is off by\n        // one after the addition.\n        //\n        //testAdd(\"1582-W42-1\", DurationFieldType.weekyears(), 1, \"1583-W42-1\");\n\n        // Leap years...\n        testAdd(\"1580-W01-1\", DurationFieldType.weekyears(), 4, \"1584-W01-1\");\n        testAdd(\"1580-W30-7\", DurationFieldType.weekyears(), 4, \"1584-W30-7\");\n        testAdd(\"1580-W50-7\", DurationFieldType.weekyears(), 4, \"1584-W50-7\");\n    }\n",
        "begin_line": 367,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 78)",
            "(line 369,col 9)-(line 369,col 78)",
            "(line 370,col 9)-(line 370,col 78)",
            "(line 383,col 9)-(line 383,col 78)",
            "(line 384,col 9)-(line 384,col 78)",
            "(line 385,col 9)-(line 385,col 78)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testCutoverAddMonths()",
        "snippet": "    public void testCutoverAddMonths() {\n        testAdd(\"1582-01-01\", DurationFieldType.months(), 1, \"1582-02-01\");\n        testAdd(\"1582-01-01\", DurationFieldType.months(), 6, \"1582-07-01\");\n        testAdd(\"1582-01-01\", DurationFieldType.months(), 12, \"1583-01-01\");\n        testAdd(\"1582-11-15\", DurationFieldType.months(), 1, \"1582-12-15\");\n\n        testAdd(\"1582-09-04\", DurationFieldType.months(), 2, \"1582-11-04\");\n        testAdd(\"1582-09-05\", DurationFieldType.months(), 2, \"1582-11-05\");\n        testAdd(\"1582-09-10\", DurationFieldType.months(), 2, \"1582-11-10\");\n        testAdd(\"1582-09-15\", DurationFieldType.months(), 2, \"1582-11-15\");\n\n\n        // Leap years...\n        testAdd(\"1580-01-01\", DurationFieldType.months(), 48, \"1584-01-01\");\n        testAdd(\"1580-02-29\", DurationFieldType.months(), 48, \"1584-02-29\");\n        testAdd(\"1580-10-01\", DurationFieldType.months(), 48, \"1584-10-01\");\n        testAdd(\"1580-10-10\", DurationFieldType.months(), 48, \"1584-10-10\");\n        testAdd(\"1580-10-15\", DurationFieldType.months(), 48, \"1584-10-15\");\n        testAdd(\"1580-12-31\", DurationFieldType.months(), 48, \"1584-12-31\");\n    }\n",
        "begin_line": 388,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 75)",
            "(line 390,col 9)-(line 390,col 75)",
            "(line 391,col 9)-(line 391,col 76)",
            "(line 392,col 9)-(line 392,col 75)",
            "(line 394,col 9)-(line 394,col 75)",
            "(line 395,col 9)-(line 395,col 75)",
            "(line 396,col 9)-(line 396,col 75)",
            "(line 397,col 9)-(line 397,col 75)",
            "(line 401,col 9)-(line 401,col 76)",
            "(line 402,col 9)-(line 402,col 76)",
            "(line 403,col 9)-(line 403,col 76)",
            "(line 404,col 9)-(line 404,col 76)",
            "(line 405,col 9)-(line 405,col 76)",
            "(line 406,col 9)-(line 406,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testCutoverAddWeeks()",
        "snippet": "    public void testCutoverAddWeeks() {\n        testAdd(\"1582-01-01\", DurationFieldType.weeks(), 1, \"1582-01-08\");\n        testAdd(\"1583-01-01\", DurationFieldType.weeks(), 1, \"1583-01-08\");\n\n        // Weeks are precise, and so cutover is not ignored.\n        testAdd(\"1582-10-01\", DurationFieldType.weeks(), 2, \"1582-10-25\");\n        testAdd(\"1582-W01-1\", DurationFieldType.weeks(), 51, \"1583-W01-1\");\n    }\n",
        "begin_line": 409,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 74)",
            "(line 411,col 9)-(line 411,col 74)",
            "(line 414,col 9)-(line 414,col 74)",
            "(line 415,col 9)-(line 415,col 75)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testCutoverAddDays()",
        "snippet": "    public void testCutoverAddDays() {\n        testAdd(\"1582-10-03\", DurationFieldType.days(), 1, \"1582-10-04\");\n        testAdd(\"1582-10-04\", DurationFieldType.days(), 1, \"1582-10-15\");\n        testAdd(\"1582-10-15\", DurationFieldType.days(), 1, \"1582-10-16\");\n\n        testAdd(\"1582-09-30\", DurationFieldType.days(), 10, \"1582-10-20\");\n        testAdd(\"1582-10-04\", DurationFieldType.days(), 10, \"1582-10-24\");\n        testAdd(\"1582-10-15\", DurationFieldType.days(), 10, \"1582-10-25\");\n    }\n",
        "begin_line": 418,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 73)",
            "(line 420,col 9)-(line 420,col 73)",
            "(line 421,col 9)-(line 421,col 73)",
            "(line 423,col 9)-(line 423,col 74)",
            "(line 424,col 9)-(line 424,col 74)",
            "(line 425,col 9)-(line 425,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testYearEndAddDays()",
        "snippet": "    public void testYearEndAddDays() {\n        testAdd(\"1582-11-05\", DurationFieldType.days(), 28, \"1582-12-03\");\n        testAdd(\"1582-12-05\", DurationFieldType.days(), 28, \"1583-01-02\");\n        \n        testAdd(\"2005-11-05\", DurationFieldType.days(), 28, \"2005-12-03\");\n        testAdd(\"2005-12-05\", DurationFieldType.days(), 28, \"2006-01-02\");\n    }\n",
        "begin_line": 428,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 74)",
            "(line 430,col 9)-(line 430,col 74)",
            "(line 432,col 9)-(line 432,col 74)",
            "(line 433,col 9)-(line 433,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testSubtractDays()",
        "snippet": "    public void testSubtractDays() {\n        // This is a test for a bug in version 1.0. The dayOfMonth range\n        // duration field did not match the monthOfYear duration field. This\n        // caused an exception to be thrown when subtracting days.\n        DateTime dt = new DateTime\n            (1112306400000L, GJChronology.getInstance(DateTimeZone.forID(\"Europe/Berlin\")));\n        YearMonthDay ymd = dt.toYearMonthDay();\n        while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { \n            ymd = ymd.minus(Period.days(1));\n        }\n    }\n",
        "begin_line": 436,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 440,col 9)-(line 441,col 92)",
            "(line 442,col 9)-(line 442,col 47)",
            "(line 443,col 9)-(line 445,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testAdd(java.lang.String, org.joda.time.DurationFieldType, int, java.lang.String)",
        "snippet": "    private void testAdd(String start, DurationFieldType type, int amt, String end) {\n        DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));\n        DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));\n        assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));\n        assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));\n\n        DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC));\n        int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());\n        assertEquals(amt, diff);\n        \n        if (type == DurationFieldType.years() ||\n            type == DurationFieldType.months() ||\n            type == DurationFieldType.days()) {\n            YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n            YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n            assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));\n            assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));\n        }\n    }\n",
        "begin_line": 448,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 91)",
            "(line 450,col 9)-(line 450,col 87)",
            "(line 451,col 9)-(line 451,col 63)",
            "(line 452,col 9)-(line 452,col 64)",
            "(line 454,col 9)-(line 454,col 88)",
            "(line 455,col 9)-(line 455,col 79)",
            "(line 456,col 9)-(line 456,col 32)",
            "(line 458,col 9)-(line 465,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testTimeOfDayAdd()",
        "snippet": "    public void testTimeOfDayAdd() {\n        TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n        TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n        assertEquals(end, start.plusHours(22));\n        assertEquals(start, end.minusHours(22));\n        assertEquals(end, start.plusMinutes(22 * 60));\n        assertEquals(start, end.minusMinutes(22 * 60));\n    }\n",
        "begin_line": 468,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 76)",
            "(line 470,col 9)-(line 470,col 74)",
            "(line 471,col 9)-(line 471,col 47)",
            "(line 472,col 9)-(line 472,col 48)",
            "(line 473,col 9)-(line 473,col 54)",
            "(line 474,col 9)-(line 474,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testMaximumValue()",
        "snippet": "    public void testMaximumValue() {\n        DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n        while (dt.getYear() < 1590) {\n            dt = dt.plusDays(1);\n            YearMonthDay ymd = dt.toYearMonthDay();\n            assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());\n            assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());\n            assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());\n        }\n    }\n",
        "begin_line": 477,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 478,col 9)-(line 478,col 83)",
            "(line 479,col 9)-(line 485,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testPartialGetAsText()",
        "snippet": "    public void testPartialGetAsText() {\n        GJChronology chrono = GJChronology.getInstance(TOKYO);\n        assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n        assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    }\n",
        "begin_line": 488,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 62)",
            "(line 490,col 9)-(line 490,col 98)",
            "(line 491,col 9)-(line 491,col 99)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction()",
        "snippet": "    public void testLeapYearRulesConstruction() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        assertEquals(dt.getYear(), 1500);\n        assertEquals(dt.getMonthOfYear(), 2);\n        assertEquals(dt.getDayOfMonth(), 29);\n    }\n",
        "begin_line": 494,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 87)",
            "(line 497,col 9)-(line 497,col 41)",
            "(line 498,col 9)-(line 498,col 45)",
            "(line 499,col 9)-(line 499,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.chrono.TestGJChronology",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
        "signature": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstructionInvalid()",
        "snippet": "    public void testLeapYearRulesConstructionInvalid() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        try {\n            new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // good\n        }\n    }\n",
        "begin_line": 502,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 504,col 9)-(line 509,col 9)"
        ]
    }
]