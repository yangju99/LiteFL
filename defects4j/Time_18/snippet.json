[
    {
        "name": "IllegalFieldValueException.getMessage#313",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/IllegalFieldValueException.java",
        "class_name": "org.joda.time.IllegalFieldValueException",
        "signature": "org.joda.time.IllegalFieldValueException.getMessage()",
        "snippet": "    public String getMessage() {\n        return iMessage;\n    }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FieldUtils.verifyValueBounds#230",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/FieldUtils.java",
        "class_name": "org.joda.time.field.FieldUtils",
        "signature": "org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)",
        "snippet": "    public static void verifyValueBounds(DateTimeFieldType fieldType, \n                                         int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (fieldType, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n",
        "begin_line": 230,
        "end_line": 237,
        "comment": "\n     * Verify that input values are within specified bounds.\n     * \n     * @param value  the value to check\n     * @param lowerBound  the lower bound allowed for value\n     * @param upperBound  the upper bound allowed for value\n     * @throws IllegalFieldValueException if value is not in the specified bounds\n     * @since 1.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.getDateTimeMillis#350",
        "is_bug": true,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.getDateTimeMillis(int, int, int, int, int, int, int)",
        "snippet": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }\n",
        "begin_line": 350,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateMidnight.DateMidnight#342",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateMidnight.java",
        "class_name": "org.joda.time.DateMidnight",
        "signature": "org.joda.time.DateMidnight.DateMidnight(int, int, int, org.joda.time.Chronology)",
        "snippet": "    public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\n        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);\n    }\n",
        "begin_line": 342,
        "end_line": 344,
        "comment": "\n     * Constructs an instance from datetime field values\n     * using the specified chronology.\n     * The constructed object will have a local time of midnight.\n     * <p>\n     * If the chronology is null, <code>ISOChronology</code>\n     * in the default time zone is used.\n     *\n     * @param year  the year\n     * @param monthOfYear  the month of the year\n     * @param dayOfMonth  the day of the month\n     * @param chronology  the chronology, null means ISOChronology in default zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "IllegalFieldValueException.createMessage#39",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/IllegalFieldValueException.java",
        "class_name": "org.joda.time.IllegalFieldValueException",
        "signature": "org.joda.time.IllegalFieldValueException.createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)",
        "snippet": "    private static String createMessage(String fieldName, Number value,\n                                        Number lowerBound, Number upperBound, String explain) {\n        StringBuffer buf = new StringBuffer()\n            .append(\"Value \").append(value).append(\" for \").append(fieldName).append(' ');\n\n        if (lowerBound == null) {\n            if (upperBound == null) {\n                buf.append(\"is not supported\");\n            } else {\n                buf.append(\"must not be larger than \").append(upperBound);\n            }\n        } else if (upperBound == null) {\n            buf.append(\"must not be smaller than \").append(lowerBound);\n        } else {\n            buf.append(\"must be in the range [\")\n                .append(lowerBound)\n                .append(',')\n                .append(upperBound)\n                .append(']');\n        }\n        if (explain != null) {\n            buf.append(\": \").append(explain);\n        }\n\n        return buf.toString();\n    }\n",
        "begin_line": 39,
        "end_line": 64,
        "comment": "\n     * Creates a message for the exception.\n     *\n     * @param fieldName  the field name\n     * @param value  the value rejected\n     * @param lowerBound  the lower bound allowed\n     * @param upperBound  the uppe bound allowed\n     * @param explain  an explanation\n     * @return the message\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 1
    },
    {
        "name": "IllegalFieldValueException.IllegalFieldValueException#106",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/IllegalFieldValueException.java",
        "class_name": "org.joda.time.IllegalFieldValueException",
        "signature": "org.joda.time.IllegalFieldValueException.IllegalFieldValueException(org.joda.time.DateTimeFieldType, java.lang.Number, java.lang.Number, java.lang.Number)",
        "snippet": "    public IllegalFieldValueException(DateTimeFieldType fieldType,\n                                      Number value, Number lowerBound, Number upperBound) {\n        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n        iDateTimeFieldType = fieldType;\n        iDurationFieldType = null;\n        iFieldName = fieldType.getName();\n        iNumberValue = value;\n        iStringValue = null;\n        iLowerBound = lowerBound;\n        iUpperBound = upperBound;\n        iMessage = super.getMessage();\n    }\n",
        "begin_line": 106,
        "end_line": 117,
        "comment": "\n     * Constructor.\n     * \n     * @param fieldType  type of field being set\n     * @param value  illegal value being set\n     * @param lowerBound  lower legal field value, or null if not applicable\n     * @param upperBound  upper legal field value, or null if not applicable\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1204
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.getName#377",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.getName()",
        "snippet": "    public String getName() {\n        return iName;\n    }\n",
        "begin_line": 377,
        "end_line": 379,
        "comment": "\n     * Get the name of the field.\n     * <p>\n     * By convention, names follow a pattern of \"dddOfRrr\", where \"ddd\" represents\n     * the (singular) duration unit field name and \"Rrr\" represents the (singular)\n     * duration range field name. If the range field is not applicable, then\n     * the name of the field is simply the (singular) duration field name.\n     * \n     * @return field name\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0909
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.getInstanceUTC#122",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.getInstanceUTC()",
        "snippet": "    public static GJChronology getInstanceUTC() {\n        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The time zone of the returned instance is UTC.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0733
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.getInstance#184",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)",
        "snippet": "    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek) {\n        \n        zone = DateTimeUtils.getZone(zone);\n        Instant cutoverInstant;\n        if (gregorianCutover == null) {\n            cutoverInstant = DEFAULT_CUTOVER;\n        } else {\n            cutoverInstant = gregorianCutover.toInstant();\n        }\n\n        GJChronology chrono;\n\n        ArrayList<GJChronology> chronos = cCache.get(zone);\n        if (chronos == null) {\n            chronos = new ArrayList<GJChronology>(2);\n            cCache.put(zone, chronos);\n        } else {\n            for (int i=chronos.size(); --i>=0; ) {\n                chrono = chronos.get(i);\n                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n                    cutoverInstant.equals(chrono.getGregorianCutover())) {\n                    \n                    return chrono;\n                }\n            }\n        }\n\n        if (zone == DateTimeZone.UTC) {\n            chrono = new GJChronology\n                (JulianChronology.getInstance(zone, minDaysInFirstWeek),\n                 GregorianChronology.getInstance(zone, minDaysInFirstWeek),\n                 cutoverInstant);\n        } else {\n            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n            chrono = new GJChronology\n                (ZonedChronology.getInstance(chrono, zone),\n                 chrono.iJulianChronology,\n                 chrono.iGregorianChronology,\n                 chrono.iCutoverInstant);\n        }\n\n        chronos.add(chrono);\n\n        return chrono;\n    }\n",
        "begin_line": 184,
        "end_line": 231,
        "comment": "\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "Instant.toInstant#143",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Instant.java",
        "class_name": "org.joda.time.Instant",
        "signature": "org.joda.time.Instant.toInstant()",
        "snippet": "    public Instant toInstant() {\n        return this;\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\n     * Get this object as an Instant by returning <code>this</code>.\n     * \n     * @return <code>this</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.calculateFirstDayOfYearMillis#214",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis(int)",
        "snippet": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1969-12-19 Julian.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1968;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1968 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1968-01-01 and 1969-12-19.\n\n        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;\n    }\n",
        "begin_line": 214,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.assemble#452",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        Object[] params = (Object[])getParam();\n\n        JulianChronology julian = (JulianChronology)params[0];\n        GregorianChronology gregorian = (GregorianChronology)params[1];\n        Instant cutoverInstant = (Instant)params[2];\n        iCutoverMillis = cutoverInstant.getMillis();\n\n        iJulianChronology = julian;\n        iGregorianChronology = gregorian;\n        iCutoverInstant = cutoverInstant;\n\n        if (getBase() != null) {\n            return;\n        }\n\n        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\n            throw new IllegalArgumentException();\n        }\n\n        // Compute difference between the chronologies at the cutover instant\n        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n\n        // Begin field definitions.\n\n        // First just copy all the Gregorian fields and then override those\n        // that need special attention.\n        fields.copyFieldsFrom(gregorian);\n        \n        // Assuming cutover is at midnight, all time of day fields can be\n        // gregorian since they are unaffected by cutover.\n\n        // Verify assumption.\n        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {\n            // Cutover is sometime in the day, so cutover fields are required\n            // for time of day.\n\n            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),\n                                                         fields.clockhourOfHalfday, iCutoverMillis);\n            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n        }\n\n        // These fields just require basic cutover support.\n        {\n            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\n        }\n\n        // DayOfYear and weekOfWeekyear require special handling since cutover\n        // year has fewer days and weeks. Extend the cutover to the start of\n        // the next year or weekyear. This keeps the sequence unbroken during\n        // the cutover year.\n\n        {\n            long cutover = gregorian.year().roundCeiling(iCutoverMillis);\n            fields.dayOfYear = new CutoverField(\n                julian.dayOfYear(), fields.dayOfYear, cutover);\n        }\n\n        {\n            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\n            fields.weekOfWeekyear = new CutoverField(\n                julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n        }\n\n        // These fields are special because they have imprecise durations. The\n        // family of addition methods need special attention. Override affected\n        // duration fields as well.\n        {\n            fields.year = new ImpreciseCutoverField(\n                julian.year(), fields.year, iCutoverMillis);\n            fields.years = fields.year.getDurationField();\n            fields.yearOfEra = new ImpreciseCutoverField(\n                julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n            fields.yearOfCentury = new ImpreciseCutoverField(\n                julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n            \n            fields.centuryOfEra = new ImpreciseCutoverField(\n                julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n            fields.centuries = fields.centuryOfEra.getDurationField();\n            \n            fields.monthOfYear = new ImpreciseCutoverField(\n                julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n            fields.months = fields.monthOfYear.getDurationField();\n            \n            fields.weekyear = new ImpreciseCutoverField(\n                julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n            fields.weekyearOfCentury = new ImpreciseCutoverField(\n                julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n            fields.weekyears = fields.weekyear.getDurationField();\n        }\n\n        // These fields require basic cutover support, except they must link to\n        // imprecise durations.\n        {\n            CutoverField cf = new CutoverField\n                (julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n            cf.iRangeDurationField = fields.months;\n            fields.dayOfMonth = cf;\n        }\n    }\n",
        "begin_line": 452,
        "end_line": 560,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicYearDateTimeField.roundCeiling#126",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.roundCeiling(long)",
        "snippet": "    public long roundCeiling(long instant) {\n        int year = get(instant);\n        long yearStartMillis = iChronology.getYearMillis(year);\n        if (instant != yearStartMillis) {\n            // Bump up to start of next year.\n            instant = iChronology.getYearMillis(year + 1);\n        }\n        return instant;\n    }\n",
        "begin_line": 126,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTimeField.roundCeiling#885",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.roundCeiling(long)",
        "snippet": "    public long roundCeiling(long instant) {\n        long newInstant = roundFloor(instant);\n        if (newInstant != instant) {\n            instant = add(newInstant, 1);\n        }\n        return instant;\n    }\n",
        "begin_line": 885,
        "end_line": 891,
        "comment": "\n     * Round to the highest whole unit of this field. The value of this field\n     * and all fields of a higher magnitude may be incremented in order to\n     * achieve this result. The fractional millis that cannot be expressed in\n     * whole increments of this field are set to minimum.\n     * <p>\n     * For example, a datetime of 2002-11-02T23:34:56.789, rounded to the\n     * highest whole hour is 2002-11-03T00:00:00.000.\n     * <p>\n     * The default implementation calls roundFloor, and if the instant is\n     * modified as a result, adds one field unit. Subclasses are encouraged to\n     * provide a more efficient implementation.\n     *\n     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round\n     * @return rounded milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.LinkedDurationField#1070",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.LinkedDurationField.LinkedDurationField(org.joda.time.DurationField, org.joda.time.chrono.GJChronology.ImpreciseCutoverField)",
        "snippet": "        LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {\n            super(durationField, durationField.getType());\n            iField = dateTimeField;\n        }\n",
        "begin_line": 1070,
        "end_line": 1073,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.ImpreciseCutoverField#921",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.ImpreciseCutoverField.ImpreciseCutoverField(org.joda.time.DateTimeField, org.joda.time.DateTimeField, long)",
        "snippet": "        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n            this(julianField, gregorianField, null, cutoverMillis, false);\n        }\n",
        "begin_line": 921,
        "end_line": 923,
        "comment": "\n         * Creates a duration field that links back to this.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.ImpreciseCutoverField#930",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.ImpreciseCutoverField.ImpreciseCutoverField(org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long)",
        "snippet": "        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n                              DurationField durationField, long cutoverMillis)\n        {\n            this(julianField, gregorianField, durationField, cutoverMillis, false);\n        }\n",
        "begin_line": 930,
        "end_line": 934,
        "comment": "\n         * Uses a shared duration field rather than creating a new one.\n         *\n         * @param durationField shared duration field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.ImpreciseCutoverField#941",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.ImpreciseCutoverField.ImpreciseCutoverField(org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long, boolean)",
        "snippet": "        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n                              DurationField durationField,\n                              long cutoverMillis, boolean convertByWeekyear)\n        {\n            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);\n            if (durationField == null) {\n                durationField = new LinkedDurationField(iDurationField, this);\n            }\n            iDurationField = durationField;\n        }\n",
        "begin_line": 941,
        "end_line": 950,
        "comment": "\n         * Uses a shared duration field rather than creating a new one.\n         *\n         * @param durationField shared duration field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.CutoverField#599",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.CutoverField.CutoverField(org.joda.time.DateTimeField, org.joda.time.DateTimeField, long)",
        "snippet": "        CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n            this(julianField, gregorianField, cutoverMillis, false);\n        }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "\n         * @param julianField field from the chronology used before the cutover instant\n         * @param gregorianField field from the chronology used at and after the cutover\n         * @param cutoverMillis  the millis of the cutover\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.CutoverField#609",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.CutoverField.CutoverField(org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)",
        "snippet": "        CutoverField(DateTimeField julianField, DateTimeField gregorianField,\n                     long cutoverMillis, boolean convertByWeekyear) {\n            super(gregorianField.getType());\n            iJulianField = julianField;\n            iGregorianField = gregorianField;\n            iCutover = cutoverMillis;\n            iConvertByWeekyear = convertByWeekyear;\n            // Although average length of Julian and Gregorian years differ,\n            // use the Gregorian duration field because it is more accurate.\n            iDurationField = gregorianField.getDurationField();\n\n            DurationField rangeField = gregorianField.getRangeDurationField();\n            if (rangeField == null) {\n                rangeField = julianField.getRangeDurationField();\n            }\n            iRangeDurationField = rangeField;\n        }\n",
        "begin_line": 609,
        "end_line": 625,
        "comment": "\n         * @param julianField field from the chronology used before the cutover instant\n         * @param gregorianField field from the chronology used at and after the cutover\n         * @param cutoverMillis  the millis of the cutover\n         * @param convertByWeekyear\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.getDurationField#751",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.CutoverField.getDurationField()",
        "snippet": "        public DurationField getDurationField() {\n            return iDurationField;\n        }\n",
        "begin_line": 751,
        "end_line": 753,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.convertByYear#82",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.convertByYear(long, org.joda.time.Chronology, org.joda.time.Chronology)",
        "snippet": "    private static long convertByYear(long instant, Chronology from, Chronology to) {\n        return to.getDateTimeMillis\n            (from.year().get(instant),\n             from.monthOfYear().get(instant),\n             from.dayOfMonth().get(instant),\n             from.millisOfDay().get(instant));\n    }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": "\n     * Convert a datetime from one chronology to another.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.GJChronology#268",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.GJChronology(org.joda.time.chrono.JulianChronology, org.joda.time.chrono.GregorianChronology, org.joda.time.Instant)",
        "snippet": "    private GJChronology(JulianChronology julian,\n                         GregorianChronology gregorian,\n                         Instant cutoverInstant) {\n        super(null, new Object[] {julian, gregorian, cutoverInstant});\n    }\n",
        "begin_line": 268,
        "end_line": 272,
        "comment": "\n     * @param julian chronology used before the cutover instant\n     * @param gregorian chronology used at and after the cutover instant\n     * @param cutoverInstant instant when the gregorian chronology began\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJChronology.julianToGregorianByYear#562",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
        "class_name": "org.joda.time.chrono.GJChronology",
        "signature": "org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)",
        "snippet": "    long julianToGregorianByYear(long instant) {\n        return convertByYear(instant, iJulianChronology, iGregorianChronology);\n    }\n",
        "begin_line": 562,
        "end_line": 564,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.add#71",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.add(long, int)",
        "snippet": "    public long add(long instant, int years) {\n        if (years == 0) {\n            return instant;\n        }\n        return set(instant, get(instant) + years);\n    }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": "\n     * Add the specified years to the specified time instant.\n     * \n     * @see org.joda.time.DateTimeField#add\n     * @param instant  the time instant in millis to update.\n     * @param years  the years to add (can be negative).\n     * @return the updated time instant.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "SkipDateTimeField.get#79",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/SkipDateTimeField.java",
        "class_name": "org.joda.time.field.SkipDateTimeField",
        "signature": "org.joda.time.field.SkipDateTimeField.get(long)",
        "snippet": "    public int get(long millis) {\n        int value = super.get(millis);\n        if (value <= iSkip) {\n            value--;\n        }\n        return value;\n    }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getWeekyear#492",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getWeekyear(long)",
        "snippet": "    int getWeekyear(long instant) {\n        int year = getYear(instant);\n        int week = getWeekOfWeekyear(instant, year);\n        if (week == 1) {\n            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n        } else if (week > 51) {\n            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n        } else {\n            return year;\n        }\n    }\n",
        "begin_line": 492,
        "end_line": 502,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "DelegatedDateTimeField.get#95",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DelegatedDateTimeField.java",
        "class_name": "org.joda.time.field.DelegatedDateTimeField",
        "signature": "org.joda.time.field.DelegatedDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iField.get(instant);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.isLeapYear#210",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.isLeapYear(int)",
        "snippet": "    boolean isLeapYear(int year) {\n        return (year & 3) == 0;\n    }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getAverageMillisPerYearDividedByTwo#252",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo()",
        "snippet": "    long getAverageMillisPerYearDividedByTwo() {\n        return MILLIS_PER_YEAR / 2;\n    }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getApproxMillisAtEpochDividedByTwo#260",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo()",
        "snippet": "    long getApproxMillisAtEpochDividedByTwo() {\n        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n    }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.set#127",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.set(long, int)",
        "snippet": "    public long set(long instant, int year) {\n        FieldUtils.verifyValueBounds(this, Math.abs(year),\n                                     iChronology.getMinYear(), iChronology.getMaxYear());\n        //\n        // Do nothing if no real change is requested.\n        //\n        int thisWeekyear = get( instant );\n        if ( thisWeekyear == year ) {\n            return instant;\n        }\n        //\n        // Calculate the DayOfWeek (to be preserved).\n        //\n        int thisDow = iChronology.getDayOfWeek(instant);\n        //\n        // Calculate the maximum weeks in the target year.\n        //\n        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n        int weeksInToYear = iChronology.getWeeksInYear( year );\n        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n            weeksInToYear : weeksInFromYear;\n        //\n        // Get the current week of the year. This will be preserved in\n        // the output unless it is greater than the maximum possible\n        // for the target weekyear.  In that case it is adjusted\n        // to the maximum possible.\n        //\n        int setToWeek = iChronology.getWeekOfWeekyear(instant);\n        if ( setToWeek > maxOutWeeks ) {\n            setToWeek = maxOutWeeks;\n        }\n        //\n        // Get a wroking copy of the current date-time.\n        // This can be a convenience for debugging.\n        //\n        long workInstant = instant; // Get a copy\n        //\n        // Attempt to get close to the proper weekyear.\n        // Note - we cannot currently call ourself, so we just call\n        // set for the year.  This at least gets us close.\n        //\n        workInstant = iChronology.setYear( workInstant, year );\n        //\n        // Calculate the weekyear number for the get close to value\n        // (which might not be equal to the year just set).\n        //\n        int workWoyYear = get( workInstant );\n\n        //\n        // At most we are off by one year, which can be \"fixed\" by\n        // adding/subtracting a week.\n        //\n        if ( workWoyYear < year ) {\n            workInstant += DateTimeConstants.MILLIS_PER_WEEK;\n        } else if ( workWoyYear > year ) {\n            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;\n        }\n        //\n        // Set the proper week in the current weekyear.\n        //\n\n        // BEGIN: possible set WeekOfWeekyear logic.\n        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n        // No range check required (we already know it is OK).\n        workInstant = workInstant + (setToWeek - currentWoyWeek)\n            * (long)DateTimeConstants.MILLIS_PER_WEEK;\n        // END: possible set WeekOfWeekyear logic.\n\n        //\n        // Reset DayOfWeek to previous value.\n        //\n        // Note: This works fine, but it ideally shouldn't invoke other\n        // fields from within a field.\n        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n        //\n        // Return result.\n        //\n        return workInstant;\n    }\n",
        "begin_line": 127,
        "end_line": 205,
        "comment": "\n     * Set the Year of a week based year component of the specified time instant.\n     *\n     * @see org.joda.time.DateTimeField#set\n     * @param instant  the time instant in millis to update.\n     * @param year  the year (-9999,9999) to set the date to.\n     * @return the updated DateTime.\n     * @throws IllegalArgumentException  if year is invalid.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.get#59",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iChronology.getWeekyear(instant);\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Get the Year of a week based year component of the specified time instant.\n     * \n     * @see org.joda.time.DateTimeField#get\n     * @param instant  the time instant in millis to query.\n     * @return the year extracted from the input.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getWeeksInYear#326",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getWeeksInYear(int)",
        "snippet": "    int getWeeksInYear(int year) {\n        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n    }\n",
        "begin_line": 326,
        "end_line": 330,
        "comment": "\n     * Get the number of weeks in the year.\n     *\n     * @param year  the year to use\n     * @return number of weeks in the year\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.roundFloor#231",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor(long)",
        "snippet": "    public long roundFloor(long instant) {\n        // Note: This works fine, but it ideally shouldn't invoke other\n        // fields from within a field.\n        instant = iChronology.weekOfWeekyear().roundFloor(instant);\n        int wow = iChronology.getWeekOfWeekyear(instant);\n        if (wow > 1) {\n            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);\n        }\n        return instant;\n    }\n",
        "begin_line": 231,
        "end_line": 240,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getMinimumDaysInFirstWeek#184",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek()",
        "snippet": "    public int getMinimumDaysInFirstWeek() {\n        return iMinDaysInFirstWeek;\n    }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDayOfWeek#530",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfWeek(long)",
        "snippet": "    int getDayOfWeek(long instant) {\n        // 1970-01-01 is day of week 4, Thursday.\n\n        long daysSince19700101;\n        if (instant >= 0) {\n            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n        } else {\n            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))\n                / DateTimeConstants.MILLIS_PER_DAY;\n            if (daysSince19700101 < -3) {\n                return 7 + (int) ((daysSince19700101 + 4) % 7);\n            }\n        }\n\n        return 1 + (int) ((daysSince19700101 + 3) % 7);\n    }\n",
        "begin_line": 530,
        "end_line": 545,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getFirstWeekOfYearMillis#338",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis(int)",
        "snippet": "    long getFirstWeekOfYearMillis(int year) {\n        long jan1millis = getYearMillis(year);\n        int jan1dayOfWeek = getDayOfWeek(jan1millis);\n        \n        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n            // First week is end of previous year because it doesn't have enough days.\n            return jan1millis + (8 - jan1dayOfWeek)\n                * (long)DateTimeConstants.MILLIS_PER_DAY;\n        } else {\n            // First week is start of this year because it has enough days.\n            return jan1millis - (jan1dayOfWeek - 1)\n                * (long)DateTimeConstants.MILLIS_PER_DAY;\n        }\n    }\n",
        "begin_line": 338,
        "end_line": 351,
        "comment": "\n     * Get the millis for the first week of a year.\n     *\n     * @param year  the year to use\n     * @return millis\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.getMaximumValueForSet#162",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet(long, int)",
        "snippet": "    protected int getMaximumValueForSet(long instant, int value) {\n        return getMaximumValue(instant);\n    }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * Called by the set method to get the maximum allowed value. By default,\n     * returns getMaximumValue(instant). Override to provide a faster\n     * implementation.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekOfWeekyearDateTimeField.roundFloor#64",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor(long)",
        "snippet": "    public long roundFloor(long instant) {\n        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n            - 3 * DateTimeConstants.MILLIS_PER_DAY;\n    }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTimeField.getMaximumValue#791",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getMaximumValue(long)",
        "snippet": "    public int getMaximumValue(long instant) {\n        return getMaximumValue();\n    }\n",
        "begin_line": 791,
        "end_line": 793,
        "comment": "\n     * Get the maximum value for this field evaluated at the specified time.\n     * <p>\n     * This implementation returns the same as {@link #getMaximumValue()}.\n     * \n     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n     * @return the maximum value for this field, in the units of the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJDayOfWeekDateTimeField.getMinimumValue#102",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJDayOfWeekDateTimeField",
        "signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return DateTimeConstants.MONDAY;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * Get the minimum value that this field can have.\n     * \n     * @return the field's minimum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJDayOfWeekDateTimeField.getMaximumValue#111",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJDayOfWeekDateTimeField",
        "signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return DateTimeConstants.SUNDAY;\n    }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n     * Get the maximum value that this field can have.\n     * \n     * @return the field's maximum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getWeekOfWeekyear#507",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getWeekOfWeekyear(long)",
        "snippet": "    int getWeekOfWeekyear(long instant) {\n        return getWeekOfWeekyear(instant, getYear(instant));\n    }\n",
        "begin_line": 507,
        "end_line": 509,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.getZone#268",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.getZone(org.joda.time.DateTimeZone)",
        "snippet": "    public static final DateTimeZone getZone(DateTimeZone zone) {\n        if (zone == null) {\n            return DateTimeZone.getDefault();\n        }\n        return zone;\n    }\n",
        "begin_line": 268,
        "end_line": 273,
        "comment": "\n     * Gets the zone handling null.\n     * <p>\n     * If the zone is <code>null</code>, {@link DateTimeZone#getDefault()}\n     * will be returned. Otherwise, the zone specified is returned.\n     * \n     * @param zone  the time zone to use, null means the default zone\n     * @return the time zone, never null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getWeekOfWeekyear#515",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getWeekOfWeekyear(long, int)",
        "snippet": "    int getWeekOfWeekyear(long instant, int year) {\n        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n        if (instant < firstWeekMillis1) {\n            return getWeeksInYear(year - 1);\n        }\n        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n        if (instant >= firstWeekMillis2) {\n            return 1;\n        }\n        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n    }\n",
        "begin_line": 515,
        "end_line": 525,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     * @param year precalculated year of millis\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDateTimeMillis#149",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDateTimeMillis(int, int, int, int)",
        "snippet": "    public long getDateTimeMillis(\n            int year, int monthOfYear, int dayOfMonth, int millisOfDay)\n            throws IllegalArgumentException {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n        }\n\n        FieldUtils.verifyValueBounds\n            (DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);\n        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n    }\n",
        "begin_line": 149,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.roundFloor#91",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.roundFloor(long)",
        "snippet": "    public long roundFloor(long instant) {\n        if (instant >= 0) {\n            return instant - instant % iUnitMillis;\n        } else {\n            instant += 1;\n            return instant - instant % iUnitMillis - iUnitMillis;\n        }\n    }\n",
        "begin_line": 91,
        "end_line": 98,
        "comment": "\n     * This method assumes that this field is properly rounded on\n     * 1970-01-01T00:00:00. If the rounding alignment differs, override this\n     * method as follows:\n     * <pre>\n     * return super.roundFloor(instant + ALIGNMENT_MILLIS) - ALIGNMENT_MILLIS;\n     * </pre>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDateTimeField.get#78",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDateTimeField",
        "signature": "org.joda.time.field.PreciseDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        if (instant >= 0) {\n            return (int) ((instant / getUnitMillis()) % iRange);\n        } else {\n            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n        }\n    }\n",
        "begin_line": 78,
        "end_line": 84,
        "comment": "\n     * Get the amount of fractional units from the specified time instant.\n     * \n     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n     * @return the amount of fractional units extracted from the input.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getMillisOfDay#550",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMillisOfDay(long)",
        "snippet": "    int getMillisOfDay(long instant) {\n        if (instant >= 0) {\n            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n        } else {\n            return (DateTimeConstants.MILLIS_PER_DAY - 1)\n                + (int) ((instant + 1) % DateTimeConstants.MILLIS_PER_DAY);\n        }\n    }\n",
        "begin_line": 550,
        "end_line": 557,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0317
        },
        "num_failing_tests": 1
    },
    {
        "name": "Instant.Instant#117",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Instant.java",
        "class_name": "org.joda.time.Instant",
        "signature": "org.joda.time.Instant.Instant(long)",
        "snippet": "    public Instant(long instant) {\n        super();\n        iMillis = instant;\n    }\n",
        "begin_line": 117,
        "end_line": 120,
        "comment": "\n     * Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z.\n     * \n     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0315
        },
        "num_failing_tests": 1
    },
    {
        "name": "Instant.getMillis#255",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Instant.java",
        "class_name": "org.joda.time.Instant",
        "signature": "org.joda.time.Instant.getMillis()",
        "snippet": "    public long getMillis() {\n        return iMillis;\n    }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "\n     * Gets the milliseconds of the instant.\n     * \n     * @return the number of milliseconds since 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getInstance#113",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getInstance(org.joda.time.DateTimeZone)",
        "snippet": "    public static JulianChronology getInstance(DateTimeZone zone) {\n        return getInstance(zone, 4);\n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Gets an instance of the JulianChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getInstance#124",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getInstance(org.joda.time.DateTimeZone, int)",
        "snippet": "    public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n        if (zone == null) {\n            zone = DateTimeZone.getDefault();\n        }\n        JulianChronology chrono;\n        synchronized (cCache) {\n            JulianChronology[] chronos = cCache.get(zone);\n            if (chronos == null) {\n                chronos = new JulianChronology[7];\n                cCache.put(zone, chronos);\n            }\n            try {\n                chrono = chronos[minDaysInFirstWeek - 1];\n            } catch (ArrayIndexOutOfBoundsException e) {\n                throw new IllegalArgumentException\n                    (\"Invalid min days in first week: \" + minDaysInFirstWeek);\n            }\n            if (chrono == null) {\n                if (zone == DateTimeZone.UTC) {\n                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);\n                } else {\n                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                    chrono = new JulianChronology\n                        (ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n                }\n                chronos[minDaysInFirstWeek - 1] = chrono;\n            }\n        }\n        return chrono;\n    }\n",
        "begin_line": 124,
        "end_line": 153,
        "comment": "\n     * Gets an instance of the JulianChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.JulianChronology#161",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.JulianChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    JulianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param, minDaysInFirstWeek);\n    }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getMinYear#240",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getMinYear()",
        "snippet": "    int getMinYear() {\n        return MIN_YEAR;\n    }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getMaxYear#244",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getMaxYear()",
        "snippet": "    int getMaxYear() {\n        return MAX_YEAR;\n    }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getAverageMillisPerYear#248",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getAverageMillisPerYear()",
        "snippet": "    long getAverageMillisPerYear() {\n        return MILLIS_PER_YEAR;\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.getAverageMillisPerMonth#256",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.getAverageMillisPerMonth()",
        "snippet": "    long getAverageMillisPerMonth() {\n        return MILLIS_PER_MONTH;\n    }\n",
        "begin_line": 256,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "JulianChronology.assemble#264",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/JulianChronology.java",
        "class_name": "org.joda.time.chrono.JulianChronology",
        "signature": "org.joda.time.chrono.JulianChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        if (getBase() == null) {\n            super.assemble(fields);\n            // Julian chronology has no year zero.\n            fields.year = new SkipDateTimeField(this, fields.year);\n            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);\n        }\n    }\n",
        "begin_line": 264,
        "end_line": 271,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 1
    },
    {
        "name": "SkipDateTimeField.SkipDateTimeField#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/SkipDateTimeField.java",
        "class_name": "org.joda.time.field.SkipDateTimeField",
        "signature": "org.joda.time.field.SkipDateTimeField.SkipDateTimeField(org.joda.time.Chronology, org.joda.time.DateTimeField)",
        "snippet": "    public SkipDateTimeField(Chronology chronology, DateTimeField field) {\n        this(chronology, field, 0);\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * Constructor that skips zero.\n     * \n     * @param chronology  the chronoogy to use\n     * @param field  the field to skip zero on\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "DelegatedDateTimeField.getRangeDurationField#195",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DelegatedDateTimeField.java",
        "class_name": "org.joda.time.field.DelegatedDateTimeField",
        "signature": "org.joda.time.field.DelegatedDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iField.getRangeDurationField();\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.getMinimumValue#223",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return iChronology.getMinYear();\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "SkipDateTimeField.SkipDateTimeField#64",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/SkipDateTimeField.java",
        "class_name": "org.joda.time.field.SkipDateTimeField",
        "signature": "org.joda.time.field.SkipDateTimeField.SkipDateTimeField(org.joda.time.Chronology, org.joda.time.DateTimeField, int)",
        "snippet": "    public SkipDateTimeField(Chronology chronology, DateTimeField field, int skip) {\n        super(field);\n        iChronology = chronology;\n        int min = super.getMinimumValue();\n        if (min < skip) {\n            iMinValue = min - 1;\n        } else if (min == skip) {\n            iMinValue = skip + 1;\n        } else {\n            iMinValue = min;\n        }\n        iSkip = skip;\n    }\n",
        "begin_line": 64,
        "end_line": 76,
        "comment": "\n     * Constructor.\n     * \n     * @param chronology  the chronoogy to use\n     * @param field  the field to skip zero on\n     * @param skip  the value to skip\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "DelegatedDateTimeField.getMinimumValue#211",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DelegatedDateTimeField.java",
        "class_name": "org.joda.time.field.DelegatedDateTimeField",
        "signature": "org.joda.time.field.DelegatedDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return iField.getMinimumValue();\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "DelegatedDateTimeField.DelegatedDateTimeField#51",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DelegatedDateTimeField.java",
        "class_name": "org.joda.time.field.DelegatedDateTimeField",
        "signature": "org.joda.time.field.DelegatedDateTimeField.DelegatedDateTimeField(org.joda.time.DateTimeField)",
        "snippet": "    public DelegatedDateTimeField(DateTimeField field) {\n        this(field, null);\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field being decorated\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "DelegatedDateTimeField.DelegatedDateTimeField#61",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DelegatedDateTimeField.java",
        "class_name": "org.joda.time.field.DelegatedDateTimeField",
        "signature": "org.joda.time.field.DelegatedDateTimeField.DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    public DelegatedDateTimeField(DateTimeField field, DateTimeFieldType type) {\n        super();\n        if (field == null) {\n            throw new IllegalArgumentException(\"The field must not be null\");\n        }\n        iField = field;\n        iType = (type == null ? field.getType() : type);\n    }\n",
        "begin_line": 61,
        "end_line": 68,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field being decorated\n     * @param type  the field type override\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicYearDateTimeField.getMinimumValue#114",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return iChronology.getMinYear();\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDateTimeMillis#162",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDateTimeMillis(int, int, int, int, int, int, int)",
        "snippet": "    public long getDateTimeMillis(\n            int year, int monthOfYear, int dayOfMonth,\n            int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n            throws IllegalArgumentException {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n\n        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n            + hourOfDay * DateTimeConstants.MILLIS_PER_HOUR\n            + minuteOfHour * DateTimeConstants.MILLIS_PER_MINUTE\n            + secondOfMinute * DateTimeConstants.MILLIS_PER_SECOND\n            + millisOfSecond;\n    }\n",
        "begin_line": 162,
        "end_line": 182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0286
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.calculateFirstDayOfYearMillis#200",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis(int)",
        "snippet": "    long calculateFirstDayOfYearMillis(int year) {\n        // Initial value is just temporary.\n        int leapYears = year / 100;\n        if (year < 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers. When the expression is written as\n            // (year / 4) - (year / 100) + (year / 400),\n            // it works for both positive and negative values, except this optimization\n            // eliminates two divisions.\n            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\n        } else {\n            leapYears = (year >> 2) - leapYears + (leapYears >> 2);\n            if (isLeapYear(year)) {\n                leapYears--;\n            }\n        }\n\n        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n    }\n",
        "begin_line": 200,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicMonthOfYearDateTimeField.get#71",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iChronology.getMonthOfYear(instant);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Get the Month component of the specified time instant.\n     *\n     * @see org.joda.time.DateTimeField#get(long)\n     * @see org.joda.time.ReadableDateTime#getMonthOfYear()\n     * @param instant  the time instant in millis to query.\n     * @return the month extracted from the input.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0279
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getMonthOfYear#434",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMonthOfYear(long)",
        "snippet": "    int getMonthOfYear(long millis) {\n        return getMonthOfYear(millis, getYear(millis));\n    }\n",
        "begin_line": 434,
        "end_line": 436,
        "comment": "\n     * @param millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0279
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJDayOfWeekDateTimeField.get#55",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJDayOfWeekDateTimeField",
        "signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iChronology.getDayOfWeek(instant);\n    }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n     * Get the value of the specified time instant.\n     * \n     * @param instant  the time instant in millis to query\n     * @return the day of the week extracted from the input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0274
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.set#77",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.set(long, int)",
        "snippet": "    public long set(long instant, int value) {\n        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n                                     getMaximumValueForSet(instant, value));\n        return instant + (value - get(instant)) * iUnitMillis;\n    }\n",
        "begin_line": 77,
        "end_line": 81,
        "comment": "\n     * Set the specified amount of units to the specified time instant.\n     * \n     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n     * @param value  value of units to set.\n     * @return the updated time instant.\n     * @throws IllegalArgumentException if value is too large or too small.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicGJChronology.setYear#174",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.setYear(long, int)",
        "snippet": "    long setYear(long instant, int year) {\n        int thisYear = getYear(instant);\n        int dayOfYear = getDayOfYear(instant, thisYear);\n        int millisOfDay = getMillisOfDay(instant);\n\n        if (dayOfYear > (31 + 28)) { // after Feb 28\n            if (isLeapYear(thisYear)) {\n                // Current date is Feb 29 or later.\n                if (!isLeapYear(year)) {\n                    // Moving to a non-leap year, Feb 29 does not exist.\n                    dayOfYear--;\n                }\n            } else {\n                // Current date is Mar 01 or later.\n                if (isLeapYear(year)) {\n                    // Moving to a leap year, account for Feb 29.\n                    dayOfYear++;\n                }\n            }\n        }\n\n        instant = getYearMonthDayMillis(year, 1, dayOfYear);\n        instant += millisOfDay;\n\n        return instant;\n    }\n",
        "begin_line": 174,
        "end_line": 199,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTime.BaseDateTime#243",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BaseDateTime.java",
        "class_name": "org.joda.time.base.BaseDateTime",
        "signature": "org.joda.time.base.BaseDateTime.BaseDateTime(int, int, int, int, int, int, int, org.joda.time.Chronology)",
        "snippet": "    public BaseDateTime(\n            int year,\n            int monthOfYear,\n            int dayOfMonth,\n            int hourOfDay,\n            int minuteOfHour,\n            int secondOfMinute,\n            int millisOfSecond,\n            Chronology chronology) {\n        super();\n        iChronology = checkChronology(chronology);\n        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        iMillis = checkInstant(instant, iChronology);\n    }\n",
        "begin_line": 243,
        "end_line": 257,
        "comment": "\n     * Constructs an instance from datetime field values\n     * using the specified chronology.\n     * <p>\n     * If the chronology is null, <code>ISOChronology</code>\n     * in the default time zone is used.\n     *\n     * @param year  the year\n     * @param monthOfYear  the month of the year\n     * @param dayOfMonth  the day of the month\n     * @param hourOfDay  the hour of the day\n     * @param minuteOfHour  the minute of the hour\n     * @param secondOfMinute  the second of the minute\n     * @param millisOfSecond  the millisecond of the second\n     * @param chronology  the chronology, null means ISOChronology in default zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDayOfYear#484",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfYear(long, int)",
        "snippet": "    int getDayOfYear(long instant, int year) {\n        long yearStart = getYearMillis(year);\n        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n    }\n",
        "begin_line": 484,
        "end_line": 487,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     * @param year precalculated year of millis\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 1
    },
    {
        "name": "FieldUtils.verifyValueBounds#212",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/FieldUtils.java",
        "class_name": "org.joda.time.field.FieldUtils",
        "signature": "org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeField, int, int, int)",
        "snippet": "    public static void verifyValueBounds(DateTimeField field, \n                                         int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (field.getType(), Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n",
        "begin_line": 212,
        "end_line": 219,
        "comment": "\n     * Verify that input values are within specified bounds.\n     * \n     * @param value  the value to check\n     * @param lowerBound  the lower bound allowed for value\n     * @param upperBound  the upper bound allowed for value\n     * @throws IllegalFieldValueException if value is not in the specified bounds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0262
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDateMidnightMillis#602",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDateMidnightMillis(int, int, int)",
        "snippet": "    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n    }\n",
        "begin_line": 602,
        "end_line": 607,
        "comment": "\n     * Gets the milliseconds for a date at midnight.\n     * \n     * @param year  the year\n     * @param monthOfYear  the month\n     * @param dayOfMonth  the day\n     * @return the milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getMaxMonth#681",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMaxMonth(int)",
        "snippet": "    int getMaxMonth(int year) {\n        return getMaxMonth();\n    }\n",
        "begin_line": 681,
        "end_line": 683,
        "comment": "\n     * Gets the maximum month for the specified year.\n     * This implementation calls getMaxMonth().\n     * \n     * @param year  the year\n     * @return the maximum month value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicGJChronology.getDaysInYearMonth#119",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth(int, int)",
        "snippet": "    int getDaysInYearMonth(int year, int month) {\n        if (isLeapYear(year)) {\n            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n        } else {\n            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n        }\n    }\n",
        "begin_line": 119,
        "end_line": 125,
        "comment": "\n     * Gets the number of days in the specified month and year.\n     * \n     * @param year  the year\n     * @param month  the month\n     * @return the number of days\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0257
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicGJChronology.getTotalMillisByYearMonth#138",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth(int, int)",
        "snippet": "    long getTotalMillisByYearMonth(int year, int month) {\n        if (isLeapYear(year)) {\n            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n        } else {\n            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n        }\n    }\n",
        "begin_line": 138,
        "end_line": 144,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0255
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicDayOfMonthDateTimeField.get#46",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iChronology.getDayOfMonth(instant);\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0255
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDayOfMonth#447",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfMonth(long)",
        "snippet": "    int getDayOfMonth(long millis) {\n        int year = getYear(millis);\n        int month = getMonthOfYear(millis, year);\n        return getDayOfMonth(millis, year, month);\n    }\n",
        "begin_line": 447,
        "end_line": 451,
        "comment": "\n     * @param millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0255
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicYearDateTimeField.get#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iChronology.getYear(instant);\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0254
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getDayOfMonth#467",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfMonth(long, int, int)",
        "snippet": "    int getDayOfMonth(long millis, int year, int month) {\n        long dateMillis = getYearMillis(year);\n        dateMillis += getTotalMillisByYearMonth(year, month);\n        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n    }\n",
        "begin_line": 467,
        "end_line": 471,
        "comment": "\n     * @param millis from 1970-01-01T00:00:00Z\n     * @param year precalculated year of millis\n     * @param month precalculated month of millis\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0254
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getMinYear#220",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getMinYear()",
        "snippet": "    int getMinYear() {\n        return MIN_YEAR;\n    }\n",
        "begin_line": 220,
        "end_line": 222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0254
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicGJChronology.getMonthOfYear#79",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getMonthOfYear(long, int)",
        "snippet": "    int getMonthOfYear(long millis, int year) {\n        // Perform a binary search to get the month. To make it go even faster,\n        // compare using ints instead of longs. The number of milliseconds per\n        // year exceeds the limit of a 32-bit int's capacity, so divide by\n        // 1024. No precision is lost (except time of day) since the number of\n        // milliseconds per day contains 1024 as a factor. After the division,\n        // the instant isn't measured in milliseconds, but in units of\n        // (128/125)seconds.\n\n        int i = (int)((millis - getYearMillis(year)) >> 10);\n\n        // There are 86400000 milliseconds per day, but divided by 1024 is\n        // 84375. There are 84375 (128/125)seconds per day.\n\n        return\n            (isLeapYear(year))\n            ? ((i < 182 * 84375)\n               ? ((i < 91 * 84375)\n                  ? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)\n                  : ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))\n               : ((i < 274 * 84375)\n                  ? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)\n                  : ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))\n            : ((i < 181 * 84375)\n               ? ((i < 90 * 84375)\n                  ? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)\n                  : ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))\n               : ((i < 273 * 84375)\n                  ? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)\n                  : ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));\n    }\n",
        "begin_line": 79,
        "end_line": 109,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0252
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getAverageMillisPerYearDividedByTwo#232",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo()",
        "snippet": "    long getAverageMillisPerYearDividedByTwo() {\n        return MILLIS_PER_YEAR / 2;\n    }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0252
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getApproxMillisAtEpochDividedByTwo#240",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo()",
        "snippet": "    long getApproxMillisAtEpochDividedByTwo() {\n        return (1970L * MILLIS_PER_YEAR) / 2;\n    }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0252
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getYear#393",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYear(long)",
        "snippet": "    int getYear(long instant) {\n        // Get an initial estimate of the year, and the millis value that\n        // represents the start of that year. Then verify estimate and fix if\n        // necessary.\n\n        // Initial estimate uses values divided by two to avoid overflow.\n        long unitMillis = getAverageMillisPerYearDividedByTwo();\n        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n        if (i2 < 0) {\n            i2 = i2 - unitMillis + 1;\n        }\n        int year = (int) (i2 / unitMillis);\n\n        long yearStart = getYearMillis(year);\n        long diff = instant - yearStart;\n\n        if (diff < 0) {\n            year--;\n        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n            // One year may need to be added to fix estimate.\n            long oneYear;\n            if (isLeapYear(year)) {\n                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n            } else {\n                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n            }\n\n            yearStart += oneYear;\n\n            if (yearStart <= instant) {\n                // Didn't go too far, so actually add one year.\n                year++;\n            }\n        }\n\n        return year;\n    }\n",
        "begin_line": 393,
        "end_line": 429,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0252
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.isLeapYear#196",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.isLeapYear(int)",
        "snippet": "    boolean isLeapYear(int year) {\n        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n    }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.025
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getYearMonthDayMillis#384",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearMonthDayMillis(int, int, int)",
        "snippet": "    long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n        long millis = getYearMillis(year);\n        millis += getTotalMillisByYearMonth(year, month);\n        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n    }\n",
        "begin_line": 384,
        "end_line": 388,
        "comment": "\n     * Get the milliseconds for a particular date.\n     *\n     * @param year The year to use.\n     * @param month The month to use\n     * @param dayOfMonth The day of the month to use\n     * @return millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0247
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTime.checkChronology#269",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BaseDateTime.java",
        "class_name": "org.joda.time.base.BaseDateTime",
        "signature": "org.joda.time.base.BaseDateTime.checkChronology(org.joda.time.Chronology)",
        "snippet": "    protected Chronology checkChronology(Chronology chronology) {\n        return DateTimeUtils.getChronology(chronology);\n    }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n     * Checks the specified chronology before storing it, potentially altering it.\n     * This method must not access any instance variables.\n     * <p>\n     * This implementation converts nulls to ISOChronology in the default zone.\n     *\n     * @param chronology  the chronology to use, may be null\n     * @return the chronology to store in this datetime, not null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0246
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDateTime.AbstractDateTime#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/AbstractDateTime.java",
        "class_name": "org.joda.time.base.AbstractDateTime",
        "signature": "org.joda.time.base.AbstractDateTime.AbstractDateTime()",
        "snippet": "    protected AbstractDateTime() {\n        super();\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0245
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.YearInfo#770",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.YearInfo.YearInfo(int, long)",
        "snippet": "        YearInfo(int year, long firstDayMillis) {\n            iYear = year;\n            iFirstDayMillis = firstDayMillis;\n        }\n",
        "begin_line": 770,
        "end_line": 773,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0244
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getYearMillis#359",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearMillis(int)",
        "snippet": "    long getYearMillis(int year) {\n        return getYearInfo(year).iFirstDayMillis;\n    }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n     * Get the milliseconds for the start of a year.\n     *\n     * @param year The year to use.\n     * @return millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0244
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getYearInfo#737",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearInfo(int)",
        "snippet": "    private YearInfo getYearInfo(int year) {\n        YearInfo info = iYearInfoCache[year & CACHE_MASK];\n        if (info == null || info.iYear != year) {\n            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n            iYearInfoCache[year & CACHE_MASK] = info;\n        }\n        return info;\n    }\n",
        "begin_line": 737,
        "end_line": 744,
        "comment": " Although accessed by multiple threads, this method doesn't need to be synchronized.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0244
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractInstant.AbstractInstant#60",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/AbstractInstant.java",
        "class_name": "org.joda.time.base.AbstractInstant",
        "signature": "org.joda.time.base.AbstractInstant.AbstractInstant()",
        "snippet": "    protected AbstractInstant() {\n        super();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0241
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.getChronology#251",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.getChronology(org.joda.time.Chronology)",
        "snippet": "    public static final Chronology getChronology(Chronology chrono) {\n        if (chrono == null) {\n            return ISOChronology.getInstance();\n        }\n        return chrono;\n    }\n",
        "begin_line": 251,
        "end_line": 256,
        "comment": "\n     * Gets the chronology handling null.\n     * <p>\n     * If the chronology is <code>null</code>, {@link ISOChronology#getInstance()}\n     * will be returned. Otherwise, the chronology is returned.\n     * \n     * @param chrono  the chronology to use, null means ISO in the default zone\n     * @return the chronology, never null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.023
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.FixedMillisProvider#414",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.FixedMillisProvider.FixedMillisProvider(long)",
        "snippet": "        FixedMillisProvider(long fixedMillis) {\n            iMillis = fixedMillis;\n        }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "\n         * Constructor.\n         * @param offsetMillis  the millis offset\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.setCurrentMillisFixed#81",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.setCurrentMillisFixed(long)",
        "snippet": "    public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n        checkPermission();\n        cMillisProvider = new FixedMillisProvider(fixedMillis);\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Sets the current time to return a fixed millisecond time.\n     * <p>\n     * This method changes the behaviour of {@link #currentTimeMillis()}.\n     * Whenever the current time is queried, the same millisecond time will be returned.\n     * \n     * @param fixedMillis  the fixed millisecond time to use\n     * @throws SecurityException if the application does not have sufficient security rights\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.setCurrentMillisSystem#67",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.setCurrentMillisSystem()",
        "snippet": "    public static final void setCurrentMillisSystem() throws SecurityException {\n        checkPermission();\n        cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n    }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "\n     * Resets the current time to return the system time.\n     * <p>\n     * This method changes the behaviour of {@link #currentTimeMillis()}.\n     * Whenever the current time is queried, {@link System#currentTimeMillis()} is used.\n     * \n     * @throws SecurityException if the application does not have sufficient security rights\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.checkPermission#128",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.checkPermission()",
        "snippet": "    private static void checkPermission() throws SecurityException {\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new JodaTimePermission(\"CurrentTime.setProvider\"));\n        }\n    }\n",
        "begin_line": 128,
        "end_line": 133,
        "comment": "\n     * Checks whether the provider may be changed using permission 'CurrentTime.setProvider'.\n     * \n     * @throws SecurityException if the provider may not be changed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.setDefault#173",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.setDefault(org.joda.time.DateTimeZone)",
        "snippet": "    public static void setDefault(DateTimeZone zone) throws SecurityException {\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"The datetime zone must not be null\");\n        }\n        synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }\n    }\n",
        "begin_line": 173,
        "end_line": 184,
        "comment": "\n     * Sets the default time zone.\n     * <p>\n     * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.\n     * \n     * @param zone  the default datetime zone object, must not be null\n     * @throws IllegalArgumentException if the zone is null\n     * @throws SecurityException if the application has insufficient security rights\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0223
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJEraDateTimeField.getDurationField#126",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJEraDateTimeField",
        "signature": "org.joda.time.chrono.GJEraDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0214
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJEraDateTimeField.getRangeDurationField#130",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJEraDateTimeField",
        "signature": "org.joda.time.chrono.GJEraDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return null;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0214
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemainderDateTimeField.getRangeDurationField#138",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iRangeField;\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     * Returns a scaled version of the wrapped field's unit duration field.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "DecoratedDateTimeField.getRangeDurationField#89",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iField.getRangeDurationField();\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.getRangeDurationField#207",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return null;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekOfWeekyearDateTimeField.getRangeDurationField#57",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.weekyears();\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicDayOfYearDateTimeField.getRangeDurationField#55",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.years();\n    }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.getParam#314",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.getParam()",
        "snippet": "    protected final Object getParam() {\n        return iParam;\n    }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "\n     * Returns the same param object as passed into the constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDurationField.getType#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.getType()",
        "snippet": "    public final DurationFieldType getType() {\n        return iType;\n    }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.getDefault#132",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getDefault()",
        "snippet": "    public static DateTimeZone getDefault() {\n        DateTimeZone zone = cDefault;\n        if (zone == null) {\n            synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }\n        }\n        return zone;\n    }\n",
        "begin_line": 132,
        "end_line": 162,
        "comment": "\n     * Gets the default time zone.\n     * <p>\n     * The default time zone is derived from the system property {@code user.timezone}.\n     * If that is {@code null} or is not a valid identifier, then the value of the\n     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n     * <p>\n     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this\n     * method, then the change will not be picked up here.\n     * \n     * @return the default datetime zone object\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDateTimeField.getRangeDurationField#121",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDateTimeField",
        "signature": "org.joda.time.field.PreciseDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iRangeField;\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * Returns the range duration of this field. For example, if this field\n     * represents \"minute of hour\", then the range duration field is an hours.\n     *\n     * @return the range duration of this field, or null if field has no range\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicYearDateTimeField.getRangeDurationField#94",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return null;\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicMonthOfYearDateTimeField.getRangeDurationField#308",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.years();\n    }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicDayOfMonthDateTimeField.getRangeDurationField#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.months();\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.getDurationField#140",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return iUnitField;\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n     * Returns the duration per unit value of this field. For example, if this\n     * field represents \"minute of hour\", then the duration field is minutes.\n     *\n     * @return the duration of this field, or UnsupportedDurationField if field\n     * has no duration\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getInstance#99",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getInstance(org.joda.time.DateTimeZone)",
        "snippet": "    public static GregorianChronology getInstance(DateTimeZone zone) {\n        return getInstance(zone, 4);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Gets an instance of the GregorianChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getInstance#110",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getInstance(org.joda.time.DateTimeZone, int)",
        "snippet": "    public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n        if (zone == null) {\n            zone = DateTimeZone.getDefault();\n        }\n        GregorianChronology chrono;\n        synchronized (cCache) {\n            GregorianChronology[] chronos = cCache.get(zone);\n            if (chronos == null) {\n                chronos = new GregorianChronology[7];\n                cCache.put(zone, chronos);\n            }\n            try {\n                chrono = chronos[minDaysInFirstWeek - 1];\n            } catch (ArrayIndexOutOfBoundsException e) {\n                throw new IllegalArgumentException\n                    (\"Invalid min days in first week: \" + minDaysInFirstWeek);\n            }\n            if (chrono == null) {\n                if (zone == DateTimeZone.UTC) {\n                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);\n                } else {\n                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                    chrono = new GregorianChronology\n                        (ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n                }\n                chronos[minDaysInFirstWeek - 1] = chrono;\n            }\n        }\n        return chrono;\n    }\n",
        "begin_line": 110,
        "end_line": 139,
        "comment": "\n     * Gets an instance of the GregorianChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.GregorianChronology#147",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.GregorianChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param, minDaysInFirstWeek);\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.assemble#190",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        if (getBase() == null) {\n            super.assemble(fields);\n        }\n    }\n",
        "begin_line": 190,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getMaxYear#224",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getMaxYear()",
        "snippet": "    int getMaxYear() {\n        return MAX_YEAR;\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getAverageMillisPerYear#228",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getAverageMillisPerYear()",
        "snippet": "    long getAverageMillisPerYear() {\n        return MILLIS_PER_YEAR;\n    }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GregorianChronology.getAverageMillisPerMonth#236",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getAverageMillisPerMonth()",
        "snippet": "    long getAverageMillisPerMonth() {\n        return MILLIS_PER_MONTH;\n    }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicGJChronology.BasicGJChronology#74",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.BasicGJChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param, minDaysInFirstWeek);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getMaxMonth#690",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMaxMonth()",
        "snippet": "    int getMaxMonth() {\n        return 12;\n    }\n",
        "begin_line": 690,
        "end_line": 692,
        "comment": "\n     * Gets the maximum number of months.\n     * \n     * @return 12\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnsupportedDurationField.isSupported#91",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.isSupported()",
        "snippet": "    public boolean isSupported() {\n        return false;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * This field is not supported.\n     *\n     * @return false always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "MillisDurationField.isSupported#61",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.isSupported()",
        "snippet": "    public boolean isSupported() {\n        return true;\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Returns true as this field is supported.\n     * \n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.copyFieldsFrom#442",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.copyFieldsFrom(org.joda.time.Chronology)",
        "snippet": "        public void copyFieldsFrom(Chronology chrono) {\n            {\n                DurationField f;\n                if (isSupported(f = chrono.millis())) {\n                    millis = f;\n                }\n                if (isSupported(f = chrono.seconds())) {\n                    seconds = f;\n                }\n                if (isSupported(f = chrono.minutes())) {\n                    minutes = f;\n                }\n                if (isSupported(f = chrono.hours())) {\n                    hours = f;\n                }\n                if (isSupported(f = chrono.halfdays())) {\n                    halfdays = f;\n                }\n                if (isSupported(f = chrono.days())) {\n                    days = f;\n                }\n                if (isSupported(f = chrono.weeks())) {\n                    weeks = f;\n                }\n                if (isSupported(f = chrono.weekyears())) {\n                    weekyears = f;\n                }\n                if (isSupported(f = chrono.months())) {\n                    months = f;\n                }\n                if (isSupported(f = chrono.years())) {\n                    years = f;\n                }\n                if (isSupported(f = chrono.centuries())) {\n                    centuries = f;\n                }\n                if (isSupported(f = chrono.eras())) {\n                    eras = f;\n                }\n            }\n\n            {\n                DateTimeField f;\n                if (isSupported(f = chrono.millisOfSecond())) {\n                    millisOfSecond = f;\n                }\n                if (isSupported(f = chrono.millisOfDay())) {\n                    millisOfDay = f;\n                }\n                if (isSupported(f = chrono.secondOfMinute())) {\n                    secondOfMinute = f;\n                }\n                if (isSupported(f = chrono.secondOfDay())) {\n                    secondOfDay = f;\n                }\n                if (isSupported(f = chrono.minuteOfHour())) {\n                    minuteOfHour = f;\n                }\n                if (isSupported(f = chrono.minuteOfDay())) {\n                    minuteOfDay = f;\n                }\n                if (isSupported(f = chrono.hourOfDay())) {\n                    hourOfDay = f;\n                }\n                if (isSupported(f = chrono.clockhourOfDay())) {\n                    clockhourOfDay = f;\n                }\n                if (isSupported(f = chrono.hourOfHalfday())) {\n                    hourOfHalfday = f;\n                }\n                if (isSupported(f = chrono.clockhourOfHalfday())) {\n                    clockhourOfHalfday = f;\n                }\n                if (isSupported(f = chrono.halfdayOfDay())) {\n                    halfdayOfDay = f;\n                }\n                if (isSupported(f = chrono.dayOfWeek())) {\n                    dayOfWeek = f;\n                }\n                if (isSupported(f = chrono.dayOfMonth())) {\n                    dayOfMonth = f;\n                }\n                if (isSupported(f = chrono.dayOfYear())) {\n                    dayOfYear = f;\n                }\n                if (isSupported(f = chrono.weekOfWeekyear())) {\n                    weekOfWeekyear = f;\n                }\n                if (isSupported(f = chrono.weekyear())) {\n                    weekyear = f;\n                }\n                if (isSupported(f = chrono.weekyearOfCentury())) {\n                    weekyearOfCentury = f;\n                }\n                if (isSupported(f = chrono.monthOfYear())) {\n                    monthOfYear = f;\n                }\n                if (isSupported(f = chrono.year())) {\n                    year = f;\n                }\n                if (isSupported(f = chrono.yearOfEra())) {\n                    yearOfEra = f;\n                }\n                if (isSupported(f = chrono.yearOfCentury())) {\n                    yearOfCentury = f;\n                }\n                if (isSupported(f = chrono.centuryOfEra())) {\n                    centuryOfEra = f;\n                }\n                if (isSupported(f = chrono.era())) {\n                    era = f;\n                }\n            }\n        }\n",
        "begin_line": 442,
        "end_line": 555,
        "comment": "\n         * Copy the supported fields from a chronology into this container.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.isSupported#557",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DurationField)",
        "snippet": "        private static boolean isSupported(DurationField field) {\n            return field == null ? false : field.isSupported();\n        }\n",
        "begin_line": 557,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.isSupported#561",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DateTimeField)",
        "snippet": "        private static boolean isSupported(DateTimeField field) {\n            return field == null ? false : field.isSupported();\n        }\n",
        "begin_line": 561,
        "end_line": 563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.millis#155",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.millis()",
        "snippet": "    public final DurationField millis() {\n        return iMillis;\n    }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.millisOfSecond#159",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.millisOfSecond()",
        "snippet": "    public final DateTimeField millisOfSecond() {\n        return iMillisOfSecond;\n    }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.millisOfDay#163",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.millisOfDay()",
        "snippet": "    public final DateTimeField millisOfDay() {\n        return iMillisOfDay;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.seconds#167",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.seconds()",
        "snippet": "    public final DurationField seconds() {\n        return iSeconds;\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.secondOfMinute#171",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.secondOfMinute()",
        "snippet": "    public final DateTimeField secondOfMinute() {\n        return iSecondOfMinute;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.secondOfDay#175",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.secondOfDay()",
        "snippet": "    public final DateTimeField secondOfDay() {\n        return iSecondOfDay;\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.minutes#179",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.minutes()",
        "snippet": "    public final DurationField minutes() {\n        return iMinutes;\n    }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.minuteOfHour#183",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.minuteOfHour()",
        "snippet": "    public final DateTimeField minuteOfHour() {\n        return iMinuteOfHour;\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.minuteOfDay#187",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.minuteOfDay()",
        "snippet": "    public final DateTimeField minuteOfDay() {\n        return iMinuteOfDay;\n    }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.hours#191",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.hours()",
        "snippet": "    public final DurationField hours() {\n        return iHours;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.hourOfDay#195",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.hourOfDay()",
        "snippet": "    public final DateTimeField hourOfDay() {\n        return iHourOfDay;\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.clockhourOfDay#199",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.clockhourOfDay()",
        "snippet": "    public final DateTimeField clockhourOfDay() {\n        return iClockhourOfDay;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.halfdays#203",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.halfdays()",
        "snippet": "    public final DurationField halfdays() {\n        return iHalfdays;\n    }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.hourOfHalfday#207",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.hourOfHalfday()",
        "snippet": "    public final DateTimeField hourOfHalfday() {\n        return iHourOfHalfday;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.clockhourOfHalfday#211",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.clockhourOfHalfday()",
        "snippet": "    public final DateTimeField clockhourOfHalfday() {\n        return iClockhourOfHalfday;\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.halfdayOfDay#215",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.halfdayOfDay()",
        "snippet": "    public final DateTimeField halfdayOfDay() {\n        return iHalfdayOfDay;\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.days#219",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.days()",
        "snippet": "    public final DurationField days() {\n        return iDays;\n    }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.dayOfWeek#223",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.dayOfWeek()",
        "snippet": "    public final DateTimeField dayOfWeek() {\n        return iDayOfWeek;\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.dayOfMonth#227",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.dayOfMonth()",
        "snippet": "    public final DateTimeField dayOfMonth() {\n        return iDayOfMonth;\n    }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.dayOfYear#231",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.dayOfYear()",
        "snippet": "    public final DateTimeField dayOfYear() {\n        return iDayOfYear;\n    }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.weeks#235",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weeks()",
        "snippet": "    public final DurationField weeks() {\n        return iWeeks;\n    }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.weekOfWeekyear#239",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekOfWeekyear()",
        "snippet": "    public final DateTimeField weekOfWeekyear() {\n        return iWeekOfWeekyear;\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.weekyears#243",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekyears()",
        "snippet": "    public final DurationField weekyears() {\n        return iWeekyears;\n    }\n",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.weekyear#247",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekyear()",
        "snippet": "    public final DateTimeField weekyear() {\n        return iWeekyear;\n    }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.weekyearOfCentury#251",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekyearOfCentury()",
        "snippet": "    public final DateTimeField weekyearOfCentury() {\n        return iWeekyearOfCentury;\n    }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.months#255",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.months()",
        "snippet": "    public final DurationField months() {\n        return iMonths;\n    }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.monthOfYear#259",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.monthOfYear()",
        "snippet": "    public final DateTimeField monthOfYear() {\n        return iMonthOfYear;\n    }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.years#263",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.years()",
        "snippet": "    public final DurationField years() {\n        return iYears;\n    }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.yearOfEra#271",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.yearOfEra()",
        "snippet": "    public final DateTimeField yearOfEra() {\n        return iYearOfEra;\n    }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.yearOfCentury#275",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.yearOfCentury()",
        "snippet": "    public final DateTimeField yearOfCentury() {\n        return iYearOfCentury;\n    }\n",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.centuries#279",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.centuries()",
        "snippet": "    public final DurationField centuries() {\n        return iCenturies;\n    }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.centuryOfEra#283",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.centuryOfEra()",
        "snippet": "    public final DateTimeField centuryOfEra() {\n        return iCenturyOfEra;\n    }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.eras#287",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.eras()",
        "snippet": "    public final DurationField eras() {\n        return iEras;\n    }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.era#291",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.era()",
        "snippet": "    public final DateTimeField era() {\n        return iEra;\n    }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedDateTimeZone.hashCode#101",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
        "class_name": "org.joda.time.tz.FixedDateTimeZone",
        "signature": "org.joda.time.tz.FixedDateTimeZone.hashCode()",
        "snippet": "    public int hashCode() {\n        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZeroIsMaxDateTimeField.ZeroIsMaxDateTimeField#44",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java",
        "class_name": "org.joda.time.field.ZeroIsMaxDateTimeField",
        "signature": "org.joda.time.field.ZeroIsMaxDateTimeField.ZeroIsMaxDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    public ZeroIsMaxDateTimeField(DateTimeField field, DateTimeFieldType type) {\n        super(field, type);\n        if (field.getMinimumValue() != 0) {\n            throw new IllegalArgumentException(\"Wrapped field's minumum value must be zero\");\n        }\n    }\n",
        "begin_line": 44,
        "end_line": 49,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the base field\n     * @param type  the field type this field will actually use\n     * @throws IllegalArgumentException if wrapped field's minimum value is not zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnsupportedDurationField.getInstance#47",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.getInstance(org.joda.time.DurationFieldType)",
        "snippet": "    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n        UnsupportedDurationField field;\n        if (cCache == null) {\n            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);\n            field = null;\n        } else {\n            field = cCache.get(type);\n        }\n        if (field == null) {\n            field = new UnsupportedDurationField(type);\n            cCache.put(type, field);\n        }\n        return field;\n    }\n",
        "begin_line": 47,
        "end_line": 60,
        "comment": "\n     * Gets an instance of UnsupportedDurationField for a specific named field.\n     * The returned instance is cached.\n     * \n     * @param type  the type to obtain\n     * @return the instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScaledDurationField.ScaledDurationField#46",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ScaledDurationField.java",
        "class_name": "org.joda.time.field.ScaledDurationField",
        "signature": "org.joda.time.field.ScaledDurationField.ScaledDurationField(org.joda.time.DurationField, org.joda.time.DurationFieldType, int)",
        "snippet": "    public ScaledDurationField(DurationField field, DurationFieldType type, int scalar) {\n        super(field, type);\n        if (scalar == 0 || scalar == 1) {\n            throw new IllegalArgumentException(\"The scalar must not be 0 or 1\");\n        }\n        iScalar = scalar;\n    }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "\n     * Constructor\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the type this field will actually use\n     * @param scalar  scalar, such as 100 years in a century\n     * @throws IllegalArgumentException if scalar is zero or one.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemainderDateTimeField.RemainderDateTimeField#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)",
        "snippet": "    public RemainderDateTimeField(DateTimeField field,\n                                  DateTimeFieldType type, int divisor) {\n        super(field, type);\n\n        if (divisor < 2) {\n            throw new IllegalArgumentException(\"The divisor must be at least 2\");\n        }\n\n        DurationField rangeField = field.getDurationField();\n        if (rangeField == null) {\n            iRangeField = null;\n        } else {\n            iRangeField = new ScaledDurationField(\n                rangeField, type.getRangeDurationType(), divisor);\n        }\n\n        iDivisor = divisor;\n    }\n",
        "begin_line": 50,
        "end_line": 67,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field actually uses\n     * @param divisor  divisor, such as 100 years in a century\n     * @throws IllegalArgumentException if divisor is less than two\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemainderDateTimeField.RemainderDateTimeField#75",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField)",
        "snippet": "    public RemainderDateTimeField(DividedDateTimeField dividedField) {\n        this(dividedField, dividedField.getType());\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Construct a RemainderDateTimeField that compliments the given\n     * DividedDateTimeField.\n     *\n     * @param dividedField  complimentary divided field, like \"century()\".\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemainderDateTimeField.RemainderDateTimeField#86",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    public RemainderDateTimeField(DividedDateTimeField dividedField, DateTimeFieldType type) {\n        super(dividedField.getWrappedField(), type);\n        iDivisor = dividedField.iDivisor;\n        iRangeField = dividedField.iDurationField;\n    }\n",
        "begin_line": 86,
        "end_line": 90,
        "comment": "\n     * Construct a RemainderDateTimeField that compliments the given\n     * DividedDateTimeField.\n     *\n     * @param dividedField  complimentary divided field, like \"century()\".\n     * @param type  the field type this field actually uses\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemainderDateTimeField.getMinimumValue#147",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 0;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Get the minimum value for the field, which is always zero.\n     * \n     * @return the minimum value of zero.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemainderDateTimeField.getMaximumValue#157",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iDivisor - 1;\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Get the maximum value for the field, which is always one less than the\n     * divisor.\n     * \n     * @return the maximum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationField.PreciseDurationField#42",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.PreciseDurationField(org.joda.time.DurationFieldType, long)",
        "snippet": "    public PreciseDurationField(DurationFieldType type, long unitMillis) {\n        super(type);\n        iUnitMillis = unitMillis;\n    }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type\n     * @param unitMillis  the unit milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationField.isPrecise#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.isPrecise()",
        "snippet": "    public final boolean isPrecise() {\n        return true;\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * This field is precise.\n     * \n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationField.getUnitMillis#62",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.getUnitMillis()",
        "snippet": "    public final long getUnitMillis() {\n        return iUnitMillis;\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * Returns the amount of milliseconds per unit value of this field.\n     *\n     * @return the unit size of this field, in milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.PreciseDurationDateTimeField#47",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.PreciseDurationDateTimeField(org.joda.time.DateTimeFieldType, org.joda.time.DurationField)",
        "snippet": "    public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n        super(type);\n\n        if (!unit.isPrecise()) {\n            throw new IllegalArgumentException(\"Unit duration field must be precise\");\n        }\n\n        iUnitMillis = unit.getUnitMillis();\n        if (iUnitMillis < 1) {\n            throw new IllegalArgumentException(\"The unit milliseconds must be at least 1\");\n        }\n\n        iUnitField = unit;\n    }\n",
        "begin_line": 47,
        "end_line": 60,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type\n     * @param unit  precise unit duration, like \"days()\".\n     * @throws IllegalArgumentException if duration field is imprecise\n     * @throws IllegalArgumentException if unit milliseconds is less than one\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.getMinimumValue#149",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 0;\n    }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\n     * Get the minimum value for the field.\n     * \n     * @return the minimum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDurationDateTimeField.getUnitMillis#153",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis()",
        "snippet": "    public final long getUnitMillis() {\n        return iUnitMillis;\n    }\n",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "PreciseDateTimeField.PreciseDateTimeField#55",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDateTimeField",
        "signature": "org.joda.time.field.PreciseDateTimeField.PreciseDateTimeField(org.joda.time.DateTimeFieldType, org.joda.time.DurationField, org.joda.time.DurationField)",
        "snippet": "    public PreciseDateTimeField(DateTimeFieldType type,\n                                DurationField unit, DurationField range) {\n        super(type, unit);\n\n        if (!range.isPrecise()) {\n            throw new IllegalArgumentException(\"Range duration field must be precise\");\n        }\n\n        long rangeMillis = range.getUnitMillis();\n        iRange = (int)(rangeMillis / getUnitMillis());\n        if (iRange < 2) {\n            throw new IllegalArgumentException(\"The effective range must be at least 2\");\n        }\n\n        iRangeField = range;\n    }\n",
        "begin_line": 55,
        "end_line": 70,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type this field uses\n     * @param unit  precise unit duration, like \"seconds()\".\n     * @param range precise range duration, preferably a multiple of the unit,\n     * like \"minutes()\".\n     * @throws IllegalArgumentException if either duration field is imprecise\n     * @throws IllegalArgumentException if unit milliseconds is less than one\n     * or effective value range is less than two.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "OffsetDateTimeField.OffsetDateTimeField#45",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField(org.joda.time.DateTimeField, int)",
        "snippet": "    public OffsetDateTimeField(DateTimeField field, int offset) {\n        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param offset  offset to add to field values\n     * @throws IllegalArgumentException if offset is zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "OffsetDateTimeField.OffsetDateTimeField#57",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)",
        "snippet": "    public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset) {\n        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field actually uses\n     * @param offset  offset to add to field values\n     * @throws IllegalArgumentException if offset is zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "OffsetDateTimeField.OffsetDateTimeField#71",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int, int, int)",
        "snippet": "    public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset,\n                               int minValue, int maxValue) {\n        super(field, type);\n                \n        if (offset == 0) {\n            throw new IllegalArgumentException(\"The offset cannot be zero\");\n        }\n\n        iOffset = offset;\n\n        if (minValue < (field.getMinimumValue() + offset)) {\n            iMin = field.getMinimumValue() + offset;\n        } else {\n            iMin = minValue;\n        }\n        if (maxValue > (field.getMaximumValue() + offset)) {\n            iMax = field.getMaximumValue() + offset;\n        } else {\n            iMax = maxValue;\n        }\n    }\n",
        "begin_line": 71,
        "end_line": 91,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field actually uses\n     * @param offset  offset to add to field values\n     * @param minValue  minimum allowed value\n     * @param maxValue  maximum allowed value\n     * @throws IllegalArgumentException if offset is zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "OffsetDateTimeField.getMinimumValue#173",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return iMin;\n    }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n     * Get the minimum value for the field.\n     * \n     * @return the minimum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "OffsetDateTimeField.getMaximumValue#182",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iMax;\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * Get the maximum value for the field.\n     * \n     * @return the maximum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "MillisDurationField.MillisDurationField#43",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.MillisDurationField()",
        "snippet": "    private MillisDurationField() {\n        super();\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "MillisDurationField.isPrecise#70",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.isPrecise()",
        "snippet": "    public final boolean isPrecise() {\n        return true;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns true as this field is precise.\n     * \n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "MillisDurationField.getUnitMillis#79",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.getUnitMillis()",
        "snippet": "    public final long getUnitMillis() {\n        return 1;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the amount of milliseconds per unit value of this field.\n     *\n     * @return one always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "ImpreciseDateTimeField.LinkedDurationField#151",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.LinkedDurationField(org.joda.time.DurationFieldType)",
        "snippet": "        LinkedDurationField(DurationFieldType type) {\n            super(type);\n        }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "ImpreciseDateTimeField.ImpreciseDateTimeField#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.ImpreciseDateTimeField(org.joda.time.DateTimeFieldType, long)",
        "snippet": "    public ImpreciseDateTimeField(DateTimeFieldType type, long unitMillis) {\n        super(type);\n        iUnitMillis = unitMillis;\n        iDurationField = new LinkedDurationField(type.getDurationType());\n    }\n",
        "begin_line": 54,
        "end_line": 58,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type\n     * @param unitMillis  the average duration unit milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "ImpreciseDateTimeField.getDurationField#136",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.getDurationField()",
        "snippet": "    public final DurationField getDurationField() {\n        return iDurationField;\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DividedDateTimeField.DividedDateTimeField#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DividedDateTimeField.java",
        "class_name": "org.joda.time.field.DividedDateTimeField",
        "signature": "org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)",
        "snippet": "    public DividedDateTimeField(DateTimeField field,\n                                DateTimeFieldType type, int divisor) {\n        super(field, type);\n                \n        if (divisor < 2) {\n            throw new IllegalArgumentException(\"The divisor must be at least 2\");\n        }\n\n        DurationField unitField = field.getDurationField();\n        if (unitField == null) {\n            iDurationField = null;\n        } else {\n            iDurationField = new ScaledDurationField(\n                unitField, type.getDurationType(), divisor);\n        }\n\n        iDivisor = divisor;\n\n        int i = field.getMinimumValue();\n        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);\n\n        int j = field.getMaximumValue();\n        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);\n\n        iMin = min;\n        iMax = max;\n    }\n",
        "begin_line": 54,
        "end_line": 80,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field will actually use\n     * @param divisor  divisor, such as 100 years in a century\n     * @throws IllegalArgumentException if divisor is less than two\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DividedDateTimeField.getDurationField#181",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DividedDateTimeField.java",
        "class_name": "org.joda.time.field.DividedDateTimeField",
        "signature": "org.joda.time.field.DividedDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return iDurationField;\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Returns a scaled version of the wrapped field's unit duration field.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DecoratedDurationField.DecoratedDurationField#51",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDurationField.java",
        "class_name": "org.joda.time.field.DecoratedDurationField",
        "signature": "org.joda.time.field.DecoratedDurationField.DecoratedDurationField(org.joda.time.DurationField, org.joda.time.DurationFieldType)",
        "snippet": "    public DecoratedDurationField(DurationField field, DurationFieldType type) {\n        super(type);\n        if (field == null) {\n            throw new IllegalArgumentException(\"The field must not be null\");\n        }\n        if (!field.isSupported()) {\n            throw new IllegalArgumentException(\"The field must be supported\");\n        }\n        iField = field;\n    }\n",
        "begin_line": 51,
        "end_line": 60,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the base field\n     * @param type  the type to actually use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DecoratedDateTimeField.DecoratedDateTimeField#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.DecoratedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    protected DecoratedDateTimeField(DateTimeField field, DateTimeFieldType type) {\n        super(type);\n        if (field == null) {\n            throw new IllegalArgumentException(\"The field must not be null\");\n        }\n        if (!field.isSupported()) {\n            throw new IllegalArgumentException(\"The field must be supported\");\n        }\n        iField = field;\n    }\n",
        "begin_line": 53,
        "end_line": 62,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field being decorated\n     * @param type  allow type to be overridden\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DecoratedDateTimeField.getWrappedField#69",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.getWrappedField()",
        "snippet": "    public final DateTimeField getWrappedField() {\n        return iField;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Gets the wrapped date time field.\n     * \n     * @return the wrapped DateTimeField\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DecoratedDateTimeField.getDurationField#85",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return iField.getDurationField();\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDurationField.BaseDurationField#46",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.BaseDurationField(org.joda.time.DurationFieldType)",
        "snippet": "    protected BaseDurationField(DurationFieldType type) {\n        super();\n        if (type == null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n        iType = type;\n    }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDurationField.isSupported#65",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.isSupported()",
        "snippet": "    public final boolean isSupported() {\n        return true;\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTimeField.BaseDateTimeField#49",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.BaseDateTimeField(org.joda.time.DateTimeFieldType)",
        "snippet": "    protected BaseDateTimeField(DateTimeFieldType type) {\n        super();\n        if (type == null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n        iType = type;\n    }\n",
        "begin_line": 49,
        "end_line": 55,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTimeField.getType#57",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getType()",
        "snippet": "    public final DateTimeFieldType getType() {\n        return iType;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDateTimeField.isSupported#68",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.isSupported()",
        "snippet": "    public final boolean isSupported() {\n        return true;\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJYearOfEraDateTimeField.GJYearOfEraDateTimeField#39",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.GJYearOfEraDateTimeField.GJYearOfEraDateTimeField(org.joda.time.DateTimeField, org.joda.time.chrono.BasicChronology)",
        "snippet": "    GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {\n        super(yearField, DateTimeFieldType.yearOfEra());\n        iChronology = chronology;\n    }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJYearOfEraDateTimeField.getMinimumValue#92",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 1;\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJYearOfEraDateTimeField.getMaximumValue#96",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return getWrappedField().getMaximumValue();\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJMonthOfYearDateTimeField.GJMonthOfYearDateTimeField#36",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.GJMonthOfYearDateTimeField.GJMonthOfYearDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    GJMonthOfYearDateTimeField(BasicChronology chronology) {\n        super(chronology, 2);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJEraDateTimeField.GJEraDateTimeField#45",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJEraDateTimeField",
        "signature": "org.joda.time.chrono.GJEraDateTimeField.GJEraDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    GJEraDateTimeField(BasicChronology chronology) {\n        super(DateTimeFieldType.era());\n        iChronology = chronology;\n    }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "GJDayOfWeekDateTimeField.GJDayOfWeekDateTimeField#44",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJDayOfWeekDateTimeField",
        "signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField.GJDayOfWeekDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    GJDayOfWeekDateTimeField(BasicChronology chronology, DurationField days) {\n        super(DateTimeFieldType.dayOfWeek(), days);\n        iChronology = chronology;\n    }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicYearDateTimeField.BasicYearDateTimeField#44",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.BasicYearDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    BasicYearDateTimeField(BasicChronology chronology) {\n        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());\n        iChronology = chronology;\n    }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n     * Restricted constructor.\n     * \n     * @param chronology  the chronology this field belogs to\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicYearDateTimeField.getMaximumValue#118",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iChronology.getMaxYear();\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekyearDateTimeField.BasicWeekyearDateTimeField#43",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.BasicWeekyearDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    BasicWeekyearDateTimeField(BasicChronology chronology) {\n        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());\n        iChronology = chronology;\n    }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicWeekOfWeekyearDateTimeField.BasicWeekOfWeekyearDateTimeField#41",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.BasicWeekOfWeekyearDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    BasicWeekOfWeekyearDateTimeField(BasicChronology chronology, DurationField weeks) {\n        super(DateTimeFieldType.weekOfWeekyear(), weeks);\n        iChronology = chronology;\n    }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicMonthOfYearDateTimeField.BasicMonthOfYearDateTimeField#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.BasicMonthOfYearDateTimeField(org.joda.time.chrono.BasicChronology, int)",
        "snippet": "    BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) {\n        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n        iChronology = chronology;\n        iMax = iChronology.getMaxMonth();\n        iLeapMonth = leapMonth;\n    }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "\n     * Restricted constructor.\n     * \n     * @param leapMonth the month of year that leaps\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicDayOfYearDateTimeField.BasicDayOfYearDateTimeField#40",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField.BasicDayOfYearDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    BasicDayOfYearDateTimeField(BasicChronology chronology, DurationField days) {\n        super(DateTimeFieldType.dayOfYear(), days);\n        iChronology = chronology;\n    }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicDayOfMonthDateTimeField.BasicDayOfMonthDateTimeField#40",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.BasicDayOfMonthDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    BasicDayOfMonthDateTimeField(BasicChronology chronology, DurationField days) {\n        super(DateTimeFieldType.dayOfMonth(), days);\n        iChronology = chronology;\n    }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.HalfdayField#749",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.HalfdayField.HalfdayField()",
        "snippet": "        HalfdayField() {\n            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);\n        }\n",
        "begin_line": 749,
        "end_line": 751,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.BasicChronology#130",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.BasicChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param);\n\n        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {\n            throw new IllegalArgumentException\n                (\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n\n        iMinDaysInFirstWeek = minDaysInFirstWeek;\n    }\n",
        "begin_line": 130,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.assemble#237",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        // First copy fields that are the same for all Gregorian and Julian\n        // chronologies.\n\n        fields.millis = cMillisField;\n        fields.seconds = cSecondsField;\n        fields.minutes = cMinutesField;\n        fields.hours = cHoursField;\n        fields.halfdays = cHalfdaysField;\n        fields.days = cDaysField;\n        fields.weeks = cWeeksField;\n\n        fields.millisOfSecond = cMillisOfSecondField;\n        fields.millisOfDay = cMillisOfDayField;\n        fields.secondOfMinute = cSecondOfMinuteField;\n        fields.secondOfDay = cSecondOfDayField;\n        fields.minuteOfHour = cMinuteOfHourField;\n        fields.minuteOfDay = cMinuteOfDayField;\n        fields.hourOfDay = cHourOfDayField;\n        fields.hourOfHalfday = cHourOfHalfdayField;\n        fields.clockhourOfDay = cClockhourOfDayField;\n        fields.clockhourOfHalfday = cClockhourOfHalfdayField;\n        fields.halfdayOfDay = cHalfdayOfDayField;\n\n        // Now create fields that have unique behavior for Gregorian and Julian\n        // chronologies.\n\n        fields.year = new BasicYearDateTimeField(this);\n        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);\n\n        // Define one-based centuryOfEra and yearOfCentury.\n        DateTimeField field = new OffsetDateTimeField(\n            fields.yearOfEra, 99);\n        fields.centuryOfEra = new DividedDateTimeField(\n            field, DateTimeFieldType.centuryOfEra(), 100);\n        \n        field = new RemainderDateTimeField(\n            (DividedDateTimeField) fields.centuryOfEra);\n        fields.yearOfCentury = new OffsetDateTimeField(\n            field, DateTimeFieldType.yearOfCentury(), 1);\n\n        fields.era = new GJEraDateTimeField(this);\n        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);\n        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);\n        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);\n        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);\n        fields.weekyear = new BasicWeekyearDateTimeField(this);\n        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);\n        \n        field = new RemainderDateTimeField(\n            fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);\n        fields.weekyearOfCentury = new OffsetDateTimeField(\n            field, DateTimeFieldType.weekyearOfCentury(), 1);\n        \n        // The remaining (imprecise) durations are available from the newly\n        // created datetime fields.\n\n        fields.years = fields.year.getDurationField();\n        fields.centuries = fields.centuryOfEra.getDurationField();\n        fields.months = fields.monthOfYear.getDurationField();\n        fields.weekyears = fields.weekyear.getDurationField();\n    }\n",
        "begin_line": 237,
        "end_line": 298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseChronology.eras#659",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.eras()",
        "snippet": "    public DurationField eras() {\n        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n    }\n",
        "begin_line": 659,
        "end_line": 661,
        "comment": "\n     * Get the eras duration field for this chronology.\n     * \n     * @return DurationField or UnsupportedDurationField if unsupported\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.Fields#436",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.Fields()",
        "snippet": "        Fields() {\n        }\n",
        "begin_line": 436,
        "end_line": 437,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.AssembledChronology#99",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.AssembledChronology(org.joda.time.Chronology, java.lang.Object)",
        "snippet": "    protected AssembledChronology(Chronology base, Object param) {\n        iBase = base;\n        iParam = param;\n        setFields();\n    }\n",
        "begin_line": 99,
        "end_line": 103,
        "comment": "\n     * Constructor calls the assemble method, enabling subclasses to define its\n     * supported fields. If a base chronology is supplied, the field set\n     * initially contains references to each base chronology field.\n     * <p>\n     * Other methods in this class will delegate to the base chronology, if it\n     * can be determined that the base chronology will produce the same results\n     * as AbstractChronology.\n     *\n     * @param base optional base chronology to copy initial fields from\n     * @param param optional param object avalable for assemble method\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.year#267",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.year()",
        "snippet": "    public final DateTimeField year() {\n        return iYear;\n    }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.getBase#307",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.getBase()",
        "snippet": "    protected final Chronology getBase() {\n        return iBase;\n    }\n",
        "begin_line": 307,
        "end_line": 309,
        "comment": "\n     * Returns the same base chronology as passed into the constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "AssembledChronology.setFields#318",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.setFields()",
        "snippet": "    private void setFields() {\n        Fields fields = new Fields();\n        if (iBase != null) {\n            fields.copyFieldsFrom(iBase);\n        }\n        assemble(fields);\n\n        {\n            DurationField f;\n            iMillis    = (f = fields.millis)    != null ? f : super.millis();\n            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n            iHours     = (f = fields.hours)     != null ? f : super.hours();\n            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n            iDays      = (f = fields.days)      != null ? f : super.days();\n            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n            iMonths    = (f = fields.months)    != null ? f : super.months();\n            iYears     = (f = fields.years)     != null ? f : super.years();\n            iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n            iEras      = (f = fields.eras)      != null ? f : super.eras();\n        }\n\n        {\n            DateTimeField f;\n            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n            iYear               = (f = fields.year)               != null ? f : super.year();\n            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n            iEra                = (f = fields.era)                != null ? f : super.era();\n        }\n\n        int flags;\n        if (iBase == null) {\n            flags = 0;\n        } else {\n            flags = \n                ((iHourOfDay      == iBase.hourOfDay()      &&\n                  iMinuteOfHour   == iBase.minuteOfHour()   &&\n                  iSecondOfMinute == iBase.secondOfMinute() &&\n                  iMillisOfSecond == iBase.millisOfSecond()   ) ? 1 : 0) |\n\n                ((iMillisOfDay == iBase.millisOfDay()) ? 2 : 0) |\n\n                ((iYear        == iBase.year()        &&\n                  iMonthOfYear == iBase.monthOfYear() &&\n                  iDayOfMonth  == iBase.dayOfMonth()    ) ? 4 : 0);\n        }\n\n        iBaseFlags = flags;\n    }\n",
        "begin_line": 318,
        "end_line": 386,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.getDurationType#451",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.getDurationType()",
        "snippet": "        public DurationFieldType getDurationType() {\n            return iUnitType;\n        }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.getRangeDurationType#456",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.getRangeDurationType()",
        "snippet": "        public DurationFieldType getRangeDurationType() {\n            return iRangeType;\n        }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.millisOfSecond#163",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.millisOfSecond()",
        "snippet": "    public static DateTimeFieldType millisOfSecond() {\n        return MILLIS_OF_SECOND_TYPE;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\n     * Get the millis of second field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.millisOfDay#172",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.millisOfDay()",
        "snippet": "    public static DateTimeFieldType millisOfDay() {\n        return MILLIS_OF_DAY_TYPE;\n    }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * Get the millis of day field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.secondOfMinute#181",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.secondOfMinute()",
        "snippet": "    public static DateTimeFieldType secondOfMinute() {\n        return SECOND_OF_MINUTE_TYPE;\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Get the second of minute field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.secondOfDay#190",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.secondOfDay()",
        "snippet": "    public static DateTimeFieldType secondOfDay() {\n        return SECOND_OF_DAY_TYPE;\n    }\n",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\n     * Get the second of day field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.minuteOfDay#208",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.minuteOfDay()",
        "snippet": "    public static DateTimeFieldType minuteOfDay() {\n        return MINUTE_OF_DAY_TYPE;\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n     * Get the minute of day field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.hourOfDay#217",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.hourOfDay()",
        "snippet": "    public static DateTimeFieldType hourOfDay() {\n        return HOUR_OF_DAY_TYPE;\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * Get the hour of day (0-23) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.hourOfHalfday#235",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.hourOfHalfday()",
        "snippet": "    public static DateTimeFieldType hourOfHalfday() {\n        return HOUR_OF_HALFDAY_TYPE;\n    }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "\n     * Get the hour of am/pm (0-11) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.clockhourOfHalfday#244",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.clockhourOfHalfday()",
        "snippet": "    public static DateTimeFieldType clockhourOfHalfday() {\n        return CLOCKHOUR_OF_HALFDAY_TYPE;\n    }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "\n     * Get the hour of am/pm (offset to 1-12) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.halfdayOfDay#253",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.halfdayOfDay()",
        "snippet": "    public static DateTimeFieldType halfdayOfDay() {\n        return HALFDAY_OF_DAY_TYPE;\n    }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "\n     * Get the AM(0) PM(1) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.dayOfWeek#263",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.dayOfWeek()",
        "snippet": "    public static DateTimeFieldType dayOfWeek() {\n        return DAY_OF_WEEK_TYPE;\n    }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "\n     * Get the day of week field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.dayOfYear#281",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.dayOfYear()",
        "snippet": "    public static DateTimeFieldType dayOfYear() {\n        return DAY_OF_YEAR_TYPE;\n    }\n",
        "begin_line": 281,
        "end_line": 283,
        "comment": "\n     * Get the day of year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.weekOfWeekyear#290",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.weekOfWeekyear()",
        "snippet": "    public static DateTimeFieldType weekOfWeekyear() {\n        return WEEK_OF_WEEKYEAR_TYPE;\n    }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n     * Get the week of a week based year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.weekyear#299",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.weekyear()",
        "snippet": "    public static DateTimeFieldType weekyear() {\n        return WEEKYEAR_TYPE;\n    }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n     * Get the year of a week based year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.weekyearOfCentury#308",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.weekyearOfCentury()",
        "snippet": "    public static DateTimeFieldType weekyearOfCentury() {\n        return WEEKYEAR_OF_CENTURY_TYPE;\n    }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n     * Get the year of a week based year within a century field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.monthOfYear#317",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.monthOfYear()",
        "snippet": "    public static DateTimeFieldType monthOfYear() {\n        return MONTH_OF_YEAR_TYPE;\n    }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "\n     * Get the month of year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.yearOfEra#335",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.yearOfEra()",
        "snippet": "    public static DateTimeFieldType yearOfEra() {\n        return YEAR_OF_ERA_TYPE;\n    }\n",
        "begin_line": 335,
        "end_line": 337,
        "comment": "\n     * Get the year of era field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.yearOfCentury#344",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.yearOfCentury()",
        "snippet": "    public static DateTimeFieldType yearOfCentury() {\n        return YEAR_OF_CENTURY_TYPE;\n    }\n",
        "begin_line": 344,
        "end_line": 346,
        "comment": "\n     * Get the year of century field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.centuryOfEra#353",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.centuryOfEra()",
        "snippet": "    public static DateTimeFieldType centuryOfEra() {\n        return CENTURY_OF_ERA_TYPE;\n    }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n     * Get the century of era field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.era#362",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.era()",
        "snippet": "    public static DateTimeFieldType era() {\n        return ERA_TYPE;\n    }\n",
        "begin_line": 362,
        "end_line": 364,
        "comment": "\n     * Get the era field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnsupportedDurationField.UnsupportedDurationField#70",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.UnsupportedDurationField(org.joda.time.DurationFieldType)",
        "snippet": "    private UnsupportedDurationField(DurationFieldType type) {\n        iType = type;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the type to use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.hashCode#276",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.StandardDurationFieldType.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return iOrdinal;\n        }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.minuteOfHour#199",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.minuteOfHour()",
        "snippet": "    public static DateTimeFieldType minuteOfHour() {\n        return MINUTE_OF_HOUR_TYPE;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * Get the minute of hour field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.clockhourOfDay#226",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.clockhourOfDay()",
        "snippet": "    public static DateTimeFieldType clockhourOfDay() {\n        return CLOCKHOUR_OF_DAY_TYPE;\n    }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\n     * Get the hour of day (offset to 1-24) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.dayOfMonth#272",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.dayOfMonth()",
        "snippet": "    public static DateTimeFieldType dayOfMonth() {\n        return DAY_OF_MONTH_TYPE;\n    }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\n     * Get the day of month field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.year#326",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.year()",
        "snippet": "    public static DateTimeFieldType year() {\n        return YEAR_TYPE;\n    }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\n     * Get the year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseChronology.BaseChronology#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.BaseChronology()",
        "snippet": "    protected BaseChronology() {\n        super();\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.halfdays#140",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.halfdays()",
        "snippet": "    public static DurationFieldType halfdays() {\n        return HALFDAYS_TYPE;\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n     * Get the halfdays field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.weekyears#168",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.weekyears()",
        "snippet": "    public static DurationFieldType weekyears() {\n        return WEEKYEARS_TYPE;\n    }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\n     * Get the weekyears field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.centuries#195",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.centuries()",
        "snippet": "    public static DurationFieldType centuries() {\n        return CENTURIES_TYPE;\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n     * Get the centuries field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.eras#204",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.eras()",
        "snippet": "    public static DurationFieldType eras() {\n        return ERAS_TYPE;\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Get the eras field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.StandardDateTimeFieldType#442",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.StandardDateTimeFieldType(java.lang.String, byte, org.joda.time.DurationFieldType, org.joda.time.DurationFieldType)",
        "snippet": "        StandardDateTimeFieldType(String name, byte ordinal,\n                                  DurationFieldType unitType, DurationFieldType rangeType) {\n            super(name);\n            iOrdinal = ordinal;\n            iUnitType = unitType;\n            iRangeType = rangeType;\n        }\n",
        "begin_line": 442,
        "end_line": 448,
        "comment": "\n         * Constructor.\n         * \n         * @param name  the name to use\n         * @param ordinal  the byte value for the oridinal index\n         * @param unitType  the unit duration type\n         * @param rangeType  the range duration type\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFieldType.DateTimeFieldType#152",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.DateTimeFieldType(java.lang.String)",
        "snippet": "    protected DateTimeFieldType(String name) {\n        super();\n        iName = name;\n    }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "\n     * Constructor.\n     * \n     * @param name  the name to use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0211
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.millis#104",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.millis()",
        "snippet": "    public static DurationFieldType millis() {\n        return MILLIS_TYPE;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Get the millis field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.021
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.months#177",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.months()",
        "snippet": "    public static DurationFieldType months() {\n        return MONTHS_TYPE;\n    }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n     * Get the months field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.021
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.years#186",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.years()",
        "snippet": "    public static DurationFieldType years() {\n        return YEARS_TYPE;\n    }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\n     * Get the years field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.021
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.weeks#159",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.weeks()",
        "snippet": "    public static DurationFieldType weeks() {\n        return WEEKS_TYPE;\n    }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n     * Get the weeks field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.seconds#113",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.seconds()",
        "snippet": "    public static DurationFieldType seconds() {\n        return SECONDS_TYPE;\n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Get the seconds field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.minutes#122",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.minutes()",
        "snippet": "    public static DurationFieldType minutes() {\n        return MINUTES_TYPE;\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Get the minutes field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.hours#131",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.hours()",
        "snippet": "    public static DurationFieldType hours() {\n        return HOURS_TYPE;\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * Get the hours field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.days#150",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.days()",
        "snippet": "    public static DurationFieldType days() {\n        return DAYS_TYPE;\n    }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\n     * Get the days field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.StandardDurationFieldType#258",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.StandardDurationFieldType.StandardDurationFieldType(java.lang.String, byte)",
        "snippet": "        StandardDurationFieldType(String name, byte ordinal) {\n            super(name);\n            iOrdinal = ordinal;\n        }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "\n         * Constructor.\n         * \n         * @param name  the name to use\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFieldType.DurationFieldType#93",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.DurationFieldType(java.lang.String)",
        "snippet": "    protected DurationFieldType(String name) {\n        super();\n        iName = name;\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Constructor.\n     * \n     * @param name  the name to use, which by convention, are plural.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.getZone#135",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.getZone(java.lang.String)",
        "snippet": "    public DateTimeZone getZone(String id) {\n        if (id == null) {\n            return null;\n        }\n\n        Object obj = iZoneInfoMap.get(id);\n        if (obj == null) {\n            return null;\n        }\n\n        if (id.equals(obj)) {\n            // Load zone data for the first time.\n            return loadZoneData(id);\n        }\n\n        if (obj instanceof SoftReference<?>) {\n            @SuppressWarnings(\"unchecked\")\n            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n            DateTimeZone tz = ref.get();\n            if (tz != null) {\n                return tz;\n            }\n            // Reference cleared; load data again.\n            return loadZoneData(id);\n        }\n\n        // If this point is reached, mapping must link to another.\n        return getZone((String)obj);\n    }\n",
        "begin_line": 135,
        "end_line": 163,
        "comment": "\n     * If an error is thrown while loading zone data, uncaughtException is\n     * called to log the error and null is returned for this and all future\n     * requests.\n     * \n     * @param id  the id to load\n     * @return the loaded zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.loadZoneData#223",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.loadZoneData(java.lang.String)",
        "snippet": "    private DateTimeZone loadZoneData(String id) {\n        InputStream in = null;\n        try {\n            in = openResource(id);\n            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n            return tz;\n        } catch (IOException e) {\n            uncaughtException(e);\n            iZoneInfoMap.remove(id);\n            return null;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException e) {\n            }\n        }\n    }\n",
        "begin_line": 223,
        "end_line": 242,
        "comment": "\n     * Loads the time zone data for one id.\n     * \n     * @param id  the id to load\n     * @return the zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#739",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.Recurrence.readFrom(java.io.DataInput)",
        "snippet": "        static Recurrence readFrom(DataInput in) throws IOException {\n            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n        }\n",
        "begin_line": 739,
        "end_line": 741,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.Recurrence#747",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.Recurrence.Recurrence(org.joda.time.tz.DateTimeZoneBuilder.OfYear, java.lang.String, int)",
        "snippet": "        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n            iOfYear = ofYear;\n            iNameKey = nameKey;\n            iSaveMillis = saveMillis;\n        }\n",
        "begin_line": 747,
        "end_line": 751,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#1339",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.readFrom(java.io.DataInput, java.lang.String)",
        "snippet": "        static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n            // Read string pool.\n            int poolSize = in.readUnsignedShort();\n            String[] pool = new String[poolSize];\n            for (int i=0; i<poolSize; i++) {\n                pool[i] = in.readUTF();\n            }\n\n            int size = in.readInt();\n            long[] transitions = new long[size];\n            int[] wallOffsets = new int[size];\n            int[] standardOffsets = new int[size];\n            String[] nameKeys = new String[size];\n            \n            for (int i=0; i<size; i++) {\n                transitions[i] = readMillis(in);\n                wallOffsets[i] = (int)readMillis(in);\n                standardOffsets[i] = (int)readMillis(in);\n                try {\n                    int index;\n                    if (poolSize < 256) {\n                        index = in.readUnsignedByte();\n                    } else {\n                        index = in.readUnsignedShort();\n                    }\n                    nameKeys[i] = pool[index];\n                } catch (ArrayIndexOutOfBoundsException e) {\n                    throw new IOException(\"Invalid encoding\");\n                }\n            }\n\n            DSTZone tailZone = null;\n            if (in.readBoolean()) {\n                tailZone = DSTZone.readFrom(in, id);\n            }\n\n            return new PrecalculatedZone\n                (id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);\n        }\n",
        "begin_line": 1339,
        "end_line": 1377,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.PrecalculatedZone#1497",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.PrecalculatedZone(java.lang.String, long[], int[], int[], java.lang.String[], org.joda.time.tz.DateTimeZoneBuilder.DSTZone)",
        "snippet": "        private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n                          int[] standardOffsets, String[] nameKeys, DSTZone tailZone)\n        {\n            super(id);\n            iTransitions = transitions;\n            iWallOffsets = wallOffsets;\n            iStandardOffsets = standardOffsets;\n            iNameKeys = nameKeys;\n            iTailZone = tailZone;\n        }\n",
        "begin_line": 1497,
        "end_line": 1506,
        "comment": "\n         * Constructor used ONLY for valid input, loaded via static methods.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#481",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.OfYear.readFrom(java.io.DataInput)",
        "snippet": "        static OfYear readFrom(DataInput in) throws IOException {\n            return new OfYear((char)in.readUnsignedByte(),\n                              (int)in.readUnsignedByte(),\n                              (int)in.readByte(),\n                              (int)in.readUnsignedByte(),\n                              in.readBoolean(),\n                              (int)readMillis(in));\n        }\n",
        "begin_line": 481,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.OfYear#499",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.OfYear.OfYear(char, int, int, int, boolean, int)",
        "snippet": "        OfYear(char mode,\n               int monthOfYear,\n               int dayOfMonth,\n               int dayOfWeek, boolean advanceDayOfWeek,\n               int millisOfDay)\n        {\n            if (mode != 'u' && mode != 'w' && mode != 's') {\n                throw new IllegalArgumentException(\"Unknown mode: \" + mode);\n            }\n\n            iMode = mode;\n            iMonthOfYear = monthOfYear;\n            iDayOfMonth = dayOfMonth;\n            iDayOfWeek = dayOfWeek;\n            iAdvance = advanceDayOfWeek;\n            iMillisOfDay = millisOfDay;\n        }\n",
        "begin_line": 499,
        "end_line": 515,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#1165",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.DSTZone.readFrom(java.io.DataInput, java.lang.String)",
        "snippet": "        static DSTZone readFrom(DataInput in, String id) throws IOException {\n            return new DSTZone(id, (int)readMillis(in), \n                               Recurrence.readFrom(in), Recurrence.readFrom(in));\n        }\n",
        "begin_line": 1165,
        "end_line": 1168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.DSTZone#1174",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.DSTZone.DSTZone(java.lang.String, int, org.joda.time.tz.DateTimeZoneBuilder.Recurrence, org.joda.time.tz.DateTimeZoneBuilder.Recurrence)",
        "snippet": "        DSTZone(String id, int standardOffset,\n                Recurrence startRecurrence, Recurrence endRecurrence) {\n            super(id);\n            iStandardOffset = standardOffset;\n            iStartRecurrence = startRecurrence;\n            iEndRecurrence = endRecurrence;\n        }\n",
        "begin_line": 1174,
        "end_line": 1180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#94",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.InputStream, java.lang.String)",
        "snippet": "    public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n        if (in instanceof DataInput) {\n            return readFrom((DataInput)in, id);\n        } else {\n            return readFrom((DataInput)new DataInputStream(in), id);\n        }\n    }\n",
        "begin_line": 94,
        "end_line": 100,
        "comment": "\n     * Decodes a built DateTimeZone from the given stream, as encoded by\n     * writeTo.\n     *\n     * @param in input stream to read encoded DateTimeZone from.\n     * @param id time zone id to assign\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#109",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.DataInput, java.lang.String)",
        "snippet": "    public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n        switch (in.readUnsignedByte()) {\n        case 'F':\n            DateTimeZone fixed = new FixedDateTimeZone\n                (id, in.readUTF(), (int)readMillis(in), (int)readMillis(in));\n            if (fixed.equals(DateTimeZone.UTC)) {\n                fixed = DateTimeZone.UTC;\n            }\n            return fixed;\n        case 'C':\n            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n        case 'P':\n            return PrecalculatedZone.readFrom(in, id);\n        default:\n            throw new IOException(\"Invalid encoding\");\n        }\n    }\n",
        "begin_line": 109,
        "end_line": 125,
        "comment": "\n     * Decodes a built DateTimeZone from the given stream, as encoded by\n     * writeTo.\n     *\n     * @param in input stream to read encoded DateTimeZone from.\n     * @param id time zone id to assign\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZoneBuilder.readMillis#182",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.readMillis(java.io.DataInput)",
        "snippet": "    static long readMillis(DataInput in) throws IOException {\n        int v = in.readUnsignedByte();\n        switch (v >> 6) {\n        case 0: default:\n            // Form 00 (6 bits effective precision)\n            v = (v << (32 - 6)) >> (32 - 6);\n            return v * (30 * 60000L);\n\n        case 1:\n            // Form 01 (30 bits effective precision)\n            v = (v << (32 - 6)) >> (32 - 30);\n            v |= (in.readUnsignedByte()) << 16;\n            v |= (in.readUnsignedByte()) << 8;\n            v |= (in.readUnsignedByte());\n            return v * 60000L;\n\n        case 2:\n            // Form 10 (38 bits effective precision)\n            long w = (((long)v) << (64 - 6)) >> (64 - 38);\n            w |= (in.readUnsignedByte()) << 24;\n            w |= (in.readUnsignedByte()) << 16;\n            w |= (in.readUnsignedByte()) << 8;\n            w |= (in.readUnsignedByte());\n            return w * 1000L;\n\n        case 3:\n            // Form 11 (64 bits effective precision)\n            return in.readLong();\n        }\n    }\n",
        "begin_line": 182,
        "end_line": 211,
        "comment": "\n     * Reads encoding generated by writeMillis.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "CachedDateTimeZone.forZone#67",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/CachedDateTimeZone.java",
        "class_name": "org.joda.time.tz.CachedDateTimeZone",
        "signature": "org.joda.time.tz.CachedDateTimeZone.forZone(org.joda.time.DateTimeZone)",
        "snippet": "    public static CachedDateTimeZone forZone(DateTimeZone zone) {\n        if (zone instanceof CachedDateTimeZone) {\n            return (CachedDateTimeZone)zone;\n        }\n        return new CachedDateTimeZone(zone);\n    }\n",
        "begin_line": 67,
        "end_line": 72,
        "comment": "\n     * Returns a new CachedDateTimeZone unless given zone is already cached.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "CachedDateTimeZone.CachedDateTimeZone#86",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/CachedDateTimeZone.java",
        "class_name": "org.joda.time.tz.CachedDateTimeZone",
        "signature": "org.joda.time.tz.CachedDateTimeZone.CachedDateTimeZone(org.joda.time.DateTimeZone)",
        "snippet": "    private CachedDateTimeZone(DateTimeZone zone) {\n        super(zone.getID());\n        iZone = zone;\n        iInfoCache = new Info[cInfoCacheMask + 1];\n    }\n",
        "begin_line": 86,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.forID#202",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.forID(java.lang.String)",
        "snippet": "    @FromString\n    public static DateTimeZone forID(String id) {\n        if (id == null) {\n            return getDefault();\n        }\n        if (id.equals(\"UTC\")) {\n            return DateTimeZone.UTC;\n        }\n        DateTimeZone zone = cProvider.getZone(id);\n        if (zone != null) {\n            return zone;\n        }\n        if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n            int offset = parseOffset(id);\n            if (offset == 0L) {\n                return DateTimeZone.UTC;\n            } else {\n                id = printOffset(offset);\n                return fixedOffsetZone(id, offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");\n    }\n",
        "begin_line": 202,
        "end_line": 224,
        "comment": "\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.getID#704",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getID()",
        "snippet": "    @ToString\n    public final String getID() {\n        return iID;\n    }\n",
        "begin_line": 704,
        "end_line": 707,
        "comment": "\n     * Gets the ID of this datetime zone.\n     * \n     * @return the ID of this datetime zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.ZoneInfoProvider#81",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider(java.lang.String)",
        "snippet": "    public ZoneInfoProvider(String resourcePath) throws IOException {\n        this(resourcePath, null, false);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * ZoneInfoProvider searches the given ClassLoader resource path for\n     * compiled data files. Resources are loaded from the ClassLoader that\n     * loaded this class.\n     *\n     * @throws IOException if directory or map file cannot be read\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.ZoneInfoProvider#103",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider(java.lang.String, java.lang.ClassLoader, boolean)",
        "snippet": "    private ZoneInfoProvider(String resourcePath,\n                             ClassLoader loader, boolean favorSystemLoader) \n        throws IOException\n    {\n        if (resourcePath == null) {\n            throw new IllegalArgumentException(\"No resource path provided\");\n        }\n        if (!resourcePath.endsWith(\"/\")) {\n            resourcePath += '/';\n        }\n\n        iFileDir = null;\n        iResourcePath = resourcePath;\n\n        if (loader == null && !favorSystemLoader) {\n            loader = getClass().getClassLoader();\n        }\n\n        iLoader = loader;\n\n        iZoneInfoMap = loadZoneInfoMap(openResource(\"ZoneInfoMap\"));\n    }\n",
        "begin_line": 103,
        "end_line": 124,
        "comment": "\n     * @param favorSystemLoader when true, use the system class loader if\n     * loader null. When false, use the current class loader if loader is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.getAvailableIDs#170",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.getAvailableIDs()",
        "snippet": "    public Set<String> getAvailableIDs() {\n        // Return a copy of the keys rather than an umodifiable collection.\n        // This prevents ConcurrentModificationExceptions from being thrown by\n        // some JVMs if zones are opened while this set is iterated over.\n        return new TreeSet<String>(iZoneInfoMap.keySet());\n    }\n",
        "begin_line": 170,
        "end_line": 175,
        "comment": "\n     * Gets a list of all the available zone ids.\n     * \n     * @return the zone ids\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.openResource#194",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.openResource(java.lang.String)",
        "snippet": "    private InputStream openResource(String name) throws IOException {\n        InputStream in;\n        if (iFileDir != null) {\n            in = new FileInputStream(new File(iFileDir, name));\n        } else {\n            String path = iResourcePath.concat(name);\n            if (iLoader != null) {\n                in = iLoader.getResourceAsStream(path);\n            } else {\n                in = ClassLoader.getSystemResourceAsStream(path);\n            }\n            if (in == null) {\n                StringBuffer buf = new StringBuffer(40)\n                    .append(\"Resource not found: \\\"\")\n                    .append(path)\n                    .append(\"\\\" ClassLoader: \")\n                    .append(iLoader != null ? iLoader.toString() : \"system\");\n                throw new IOException(buf.toString());\n            }\n        }\n        return in;\n    }\n",
        "begin_line": 194,
        "end_line": 215,
        "comment": "\n     * Opens a resource from file or classpath.\n     * \n     * @param name  the name to open\n     * @return the input stream\n     * @throws IOException if an error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.loadZoneInfoMap#251",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap(java.io.InputStream)",
        "snippet": "    private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {\n        Map<String, Object> map = new ConcurrentHashMap<String, Object>();\n        DataInputStream din = new DataInputStream(in);\n        try {\n            readZoneInfoMap(din, map);\n        } finally {\n            try {\n                din.close();\n            } catch (IOException e) {\n            }\n        }\n        map.put(\"UTC\", new SoftReference<DateTimeZone>(DateTimeZone.UTC));\n        return map;\n    }\n",
        "begin_line": 251,
        "end_line": 264,
        "comment": "\n     * Loads the zone info map.\n     * \n     * @param in  the input stream\n     * @return the map\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "ZoneInfoProvider.readZoneInfoMap#272",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap(java.io.DataInputStream, java.util.Map<java.lang.String, java.lang.Object>)",
        "snippet": "    private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {\n        // Read the string pool.\n        int size = din.readUnsignedShort();\n        String[] pool = new String[size];\n        for (int i=0; i<size; i++) {\n            pool[i] = din.readUTF().intern();\n        }\n\n        // Read the mappings.\n        size = din.readUnsignedShort();\n        for (int i=0; i<size; i++) {\n            try {\n                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);\n            } catch (ArrayIndexOutOfBoundsException e) {\n                throw new IOException(\"Corrupt zone info map\");\n            }\n        }\n    }\n",
        "begin_line": 272,
        "end_line": 289,
        "comment": "\n     * Reads the zone info map from file.\n     * \n     * @param din  the input stream\n     * @param zimap  gets filled with string id to string id mappings\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedDateTimeZone.FixedDateTimeZone#36",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
        "class_name": "org.joda.time.tz.FixedDateTimeZone",
        "signature": "org.joda.time.tz.FixedDateTimeZone.FixedDateTimeZone(java.lang.String, java.lang.String, int, int)",
        "snippet": "    public FixedDateTimeZone(String id, String nameKey,\n                             int wallOffset, int standardOffset) {\n        super(id);\n        iNameKey = nameKey;\n        iWallOffset = wallOffset;\n        iStandardOffset = standardOffset;\n    }\n",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedDateTimeZone.equals#87",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
        "class_name": "org.joda.time.tz.FixedDateTimeZone",
        "signature": "org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj instanceof FixedDateTimeZone) {\n            FixedDateTimeZone other = (FixedDateTimeZone)obj;\n            return\n                getID().equals(other.getID()) &&\n                iStandardOffset == other.iStandardOffset &&\n                iWallOffset == other.iWallOffset;\n        }\n        return false;\n    }\n",
        "begin_line": 87,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultNameProvider.DefaultNameProvider#39",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DefaultNameProvider.java",
        "class_name": "org.joda.time.tz.DefaultNameProvider",
        "signature": "org.joda.time.tz.DefaultNameProvider.DefaultNameProvider()",
        "snippet": "    public DefaultNameProvider() {\n    }\n",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultNameProvider.createCache#98",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DefaultNameProvider.java",
        "class_name": "org.joda.time.tz.DefaultNameProvider",
        "signature": "org.joda.time.tz.DefaultNameProvider.createCache()",
        "snippet": "    private HashMap createCache() {\n        return new HashMap(7);\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.setProvider0#414",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.setProvider0(org.joda.time.tz.Provider)",
        "snippet": "    private static void setProvider0(Provider provider) {\n        if (provider == null) {\n            provider = getDefaultProvider();\n        }\n        Set<String> ids = provider.getAvailableIDs();\n        if (ids == null || ids.size() == 0) {\n            throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");\n        }\n        if (!ids.contains(\"UTC\")) {\n            throw new IllegalArgumentException(\"The provider doesn't support UTC\");\n        }\n        if (!UTC.equals(provider.getZone(\"UTC\"))) {\n            throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n        }\n        cProvider = provider;\n        cAvailableIDs = ids;\n    }\n",
        "begin_line": 414,
        "end_line": 431,
        "comment": "\n     * Sets the zone provider factory without performing the security check.\n     * \n     * @param provider  provider to use, or null for default\n     * @throws IllegalArgumentException if the provider is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.getDefaultProvider#442",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getDefaultProvider()",
        "snippet": "    private static Provider getDefaultProvider() {\n        Provider provider = null;\n\n        try {\n            String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n            if (providerClass != null) {\n                try {\n                    provider = (Provider) Class.forName(providerClass).newInstance();\n                } catch (Exception ex) {\n                    Thread thread = Thread.currentThread();\n                    thread.getThreadGroup().uncaughtException(thread, ex);\n                }\n            }\n        } catch (SecurityException ex) {\n            // ignored\n        }\n\n        if (provider == null) {\n            try {\n                provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");\n            } catch (Exception ex) {\n                Thread thread = Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n\n        if (provider == null) {\n            provider = new UTCProvider();\n        }\n\n        return provider;\n    }\n",
        "begin_line": 442,
        "end_line": 474,
        "comment": "\n     * Gets the default zone provider.\n     * <p>\n     * Tries the system property <code>org.joda.time.DateTimeZone.Provider</code>.\n     * Then tries a <code>ZoneInfoProvider</code> using the data in <code>org/joda/time/tz/data</code>.\n     * Then uses <code>UTCProvider</code>.\n     * \n     * @return the default name provider\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.setNameProvider0#513",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.setNameProvider0(org.joda.time.tz.NameProvider)",
        "snippet": "    private static void setNameProvider0(NameProvider nameProvider) {\n        if (nameProvider == null) {\n            nameProvider = getDefaultNameProvider();\n        }\n        cNameProvider = nameProvider;\n    }\n",
        "begin_line": 513,
        "end_line": 518,
        "comment": "\n     * Sets the name provider factory without performing the security check.\n     * \n     * @param nameProvider  provider to use, or null for default\n     * @throws IllegalArgumentException if the provider is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.getDefaultNameProvider#528",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getDefaultNameProvider()",
        "snippet": "    private static NameProvider getDefaultNameProvider() {\n        NameProvider nameProvider = null;\n        try {\n            String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");\n            if (providerClass != null) {\n                try {\n                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();\n                } catch (Exception ex) {\n                    Thread thread = Thread.currentThread();\n                    thread.getThreadGroup().uncaughtException(thread, ex);\n                }\n            }\n        } catch (SecurityException ex) {\n            // ignore\n        }\n\n        if (nameProvider == null) {\n            nameProvider = new DefaultNameProvider();\n        }\n\n        return nameProvider;\n    }\n",
        "begin_line": 528,
        "end_line": 549,
        "comment": "\n     * Gets the default name provider.\n     * <p>\n     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.\n     * Then uses <code>DefaultNameProvider</code>.\n     * \n     * @return the default name provider\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeZone.DateTimeZone#689",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.DateTimeZone(java.lang.String)",
        "snippet": "    protected DateTimeZone(String id) {\n        if (id == null) {\n            throw new IllegalArgumentException(\"Id must not be null\");\n        }\n        iID = id;\n    }\n",
        "begin_line": 689,
        "end_line": 694,
        "comment": "\n     * Constructor.\n     * \n     * @param id  the id to use\n     * @throws IllegalArgumentException if the id is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0201
        },
        "num_failing_tests": 1
    }
]