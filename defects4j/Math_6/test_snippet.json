[
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testBoundsUnsupported()",
        "snippet": "    @Test(expected=MathUnsupportedOperationException.class)\n    public void testBoundsUnsupported() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        optimizer.optimize(new MaxEval(100),\n                           problem.getObjectiveFunction(),\n                           problem.getObjectiveFunctionGradient(),\n                           GoalType.MINIMIZE,\n                           new InitialGuess(new double[] { 0 }),\n                           new SimpleBounds(new double[] { -1 },\n                                            new double[] { 1 }));\n    }\n",
        "begin_line": 108,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 111,col 78)",
            "(line 112,col 9)-(line 114,col 90)",
            "(line 115,col 9)-(line 121,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial()",
        "snippet": "    @Test\n    public void testTrivial() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0 }));\n        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 124,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 127,col 78)",
            "(line 128,col 9)-(line 130,col 90)",
            "(line 131,col 9)-(line 136,col 71)",
            "(line 137,col 9)-(line 137,col 65)",
            "(line 138,col 9)-(line 138,col 62)",
            "(line 141,col 9)-(line 141,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testColumnsPermutation()",
        "snippet": "    @Test\n    public void testColumnsPermutation() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },\n                                new double[] { 4.0, 6.0, 1.0 });\n\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 0 }));\n        Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);\n\n    }\n",
        "begin_line": 144,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 148,col 64)",
            "(line 150,col 9)-(line 152,col 90)",
            "(line 153,col 9)-(line 158,col 74)",
            "(line 159,col 9)-(line 159,col 65)",
            "(line 160,col 9)-(line 160,col 65)",
            "(line 161,col 9)-(line 161,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testNoDependency()",
        "snippet": "    @Test\n    public void testNoDependency() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 2, 0, 0, 0, 0, 0 },\n                { 0, 2, 0, 0, 0, 0 },\n                { 0, 0, 2, 0, 0, 0 },\n                { 0, 0, 0, 2, 0, 0 },\n                { 0, 0, 0, 0, 2, 0 },\n                { 0, 0, 0, 0, 0, 2 }\n        }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 }));\n        for (int i = 0; i < problem.target.length; ++i) {\n            Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);\n        }\n    }\n",
        "begin_line": 165,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 174,col 58)",
            "(line 175,col 9)-(line 177,col 90)",
            "(line 178,col 9)-(line 183,col 86)",
            "(line 184,col 9)-(line 186,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testOneSet()",
        "snippet": "    @Test\n    public void testOneSet() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1,  0, 0 },\n                { -1,  1, 0 },\n                {  0, -1, 1 }\n        }, new double[] { 1, 1, 1});\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 0, 0 }));\n        Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);\n\n    }\n",
        "begin_line": 189,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 195,col 36)",
            "(line 196,col 9)-(line 198,col 90)",
            "(line 199,col 9)-(line 204,col 77)",
            "(line 205,col 9)-(line 205,col 65)",
            "(line 206,col 9)-(line 206,col 65)",
            "(line 207,col 9)-(line 207,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTwoSets()",
        "snippet": "    @Test\n    public void testTwoSets() {\n        final double epsilon = 1.0e-7;\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  2,  1,   0,  4,       0, 0 },\n                { -4, -2,   3, -7,       0, 0 },\n                {  4,  1,  -2,  8,       0, 0 },\n                {  0, -3, -12, -1,       0, 0 },\n                {  0,  0,   0,  0, epsilon, 1 },\n                {  0,  0,   0,  0,       1, 1 }\n        }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});\n\n        final Preconditioner preconditioner\n            = new Preconditioner() {\n                    public double[] precondition(double[] point, double[] r) {\n                        double[] d = r.clone();\n                        d[0] /=  72.0;\n                        d[1] /=  30.0;\n                        d[2] /= 314.0;\n                        d[3] /= 260.0;\n                        d[4] /= 2 * (1 + epsilon * epsilon);\n                        d[5] /= 4.0;\n                        return d;\n                    }\n                };\n\n        NonLinearConjugateGradientOptimizer optimizer\n           = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                     new SimpleValueChecker(1e-13, 1e-13),\n                                                     new BrentSolver(),\n                                                     preconditioner);\n\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 }));\n        Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);\n        Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);\n        Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);\n        Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);\n\n    }\n",
        "begin_line": 211,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 38)",
            "(line 214,col 9)-(line 221,col 66)",
            "(line 223,col 9)-(line 235,col 18)",
            "(line 237,col 9)-(line 241,col 69)",
            "(line 243,col 9)-(line 248,col 86)",
            "(line 249,col 9)-(line 249,col 66)",
            "(line 250,col 9)-(line 250,col 66)",
            "(line 251,col 9)-(line 251,col 66)",
            "(line 252,col 9)-(line 252,col 66)",
            "(line 253,col 9)-(line 253,col 76)",
            "(line 254,col 9)-(line 254,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.Anonymous-a81dd9a6-0b9c-43d3-9bed-9898e1db1bcf.precondition(double[], double[])",
        "snippet": "                    public double[] precondition(double[] point, double[] r) {\n                        double[] d = r.clone();\n                        d[0] /=  72.0;\n                        d[1] /=  30.0;\n                        d[2] /= 314.0;\n                        d[3] /= 260.0;\n                        d[4] /= 2 * (1 + epsilon * epsilon);\n                        d[5] /= 4.0;\n                        return d;\n                    }\n",
        "begin_line": 225,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 226,col 25)-(line 226,col 47)",
            "(line 227,col 25)-(line 227,col 38)",
            "(line 228,col 25)-(line 228,col 38)",
            "(line 229,col 25)-(line 229,col 38)",
            "(line 230,col 25)-(line 230,col 38)",
            "(line 231,col 25)-(line 231,col 60)",
            "(line 232,col 25)-(line 232,col 36)",
            "(line 233,col 25)-(line 233,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testNonInversible()",
        "snippet": "    @Test\n    public void testNonInversible() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1, 2, -3 },\n                {  2, 1,  3 },\n                { -3, 0, -9 }\n        }, new double[] { 1, 1, 1 });\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 0, 0 }));\n        Assert.assertTrue(optimum.getValue() > 0.5);\n    }\n",
        "begin_line": 258,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 264,col 37)",
            "(line 265,col 9)-(line 267,col 90)",
            "(line 268,col 9)-(line 273,col 77)",
            "(line 274,col 9)-(line 274,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testIllConditioned()",
        "snippet": "    @Test\n    public void testIllConditioned() {\n        LinearProblem problem1 = new LinearProblem(new double[][] {\n                { 10.0, 7.0,  8.0,  7.0 },\n                {  7.0, 5.0,  6.0,  5.0 },\n                {  8.0, 6.0, 10.0,  9.0 },\n                {  7.0, 5.0,  9.0, 10.0 }\n        }, new double[] { 32, 23, 33, 31 });\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-13, 1e-13),\n                                                      new BrentSolver(1e-15, 1e-15));\n        PointValuePair optimum1\n            = optimizer.optimize(new MaxEval(200),\n                                 problem1.getObjectiveFunction(),\n                                 problem1.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 1, 2, 3 }));\n        Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-4);\n        Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-4);\n        Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-4);\n        Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-4);\n\n        LinearProblem problem2 = new LinearProblem(new double[][] {\n                { 10.00, 7.00, 8.10, 7.20 },\n                {  7.08, 5.04, 6.00, 5.00 },\n                {  8.00, 5.98, 9.89, 9.00 },\n                {  6.99, 4.99, 9.00, 9.98 }\n        }, new double[] { 32, 23, 33, 31 });\n        PointValuePair optimum2\n            = optimizer.optimize(new MaxEval(200),\n                                 problem2.getObjectiveFunction(),\n                                 problem2.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0, 1, 2, 3 }));\n        Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1);\n        Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-1);\n        Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1);\n        Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1);\n\n    }\n",
        "begin_line": 277,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 284,col 44)",
            "(line 285,col 9)-(line 288,col 85)",
            "(line 289,col 9)-(line 294,col 80)",
            "(line 295,col 9)-(line 295,col 65)",
            "(line 296,col 9)-(line 296,col 65)",
            "(line 297,col 9)-(line 297,col 65)",
            "(line 298,col 9)-(line 298,col 65)",
            "(line 300,col 9)-(line 305,col 44)",
            "(line 306,col 9)-(line 311,col 80)",
            "(line 312,col 9)-(line 312,col 67)",
            "(line 313,col 9)-(line 313,col 67)",
            "(line 314,col 9)-(line 314,col 67)",
            "(line 315,col 9)-(line 315,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testMoreEstimatedParametersSimple()",
        "snippet": "    @Test\n    public void testMoreEstimatedParametersSimple() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 3.0, 2.0,  0.0, 0.0 },\n                { 0.0, 1.0, -1.0, 1.0 },\n                { 2.0, 0.0,  1.0, 0.0 }\n        }, new double[] { 7.0, 3.0, 5.0 });\n\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 7, 6, 5, 4 }));\n        Assert.assertEquals(0, optimum.getValue(), 1.0e-10);\n\n    }\n",
        "begin_line": 319,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 325,col 43)",
            "(line 327,col 9)-(line 329,col 90)",
            "(line 330,col 9)-(line 335,col 80)",
            "(line 336,col 9)-(line 336,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testMoreEstimatedParametersUnsorted()",
        "snippet": "    @Test\n    public void testMoreEstimatedParametersUnsorted() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                 { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },\n                 { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },\n                 { 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },\n                 { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },\n                 { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }\n        }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });\n        NonLinearConjugateGradientOptimizer optimizer\n           = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                     new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 2, 2, 2, 2, 2, 2 }));\n        Assert.assertEquals(0, optimum.getValue(), 1.0e-10);\n    }\n",
        "begin_line": 340,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 348,col 55)",
            "(line 349,col 9)-(line 351,col 89)",
            "(line 352,col 9)-(line 357,col 86)",
            "(line 358,col 9)-(line 358,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testRedundantEquations()",
        "snippet": "    @Test\n    public void testRedundantEquations() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0,  1.0 },\n                { 1.0, -1.0 },\n                { 1.0,  3.0 }\n        }, new double[] { 3.0, 1.0, 5.0 });\n\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 1, 1 }));\n        Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);\n        Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);\n\n    }\n",
        "begin_line": 361,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 367,col 43)",
            "(line 369,col 9)-(line 371,col 90)",
            "(line 372,col 9)-(line 377,col 74)",
            "(line 378,col 9)-(line 378,col 64)",
            "(line 379,col 9)-(line 379,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testInconsistentEquations()",
        "snippet": "    @Test\n    public void testInconsistentEquations() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0,  1.0 },\n                { 1.0, -1.0 },\n                { 1.0,  3.0 }\n        }, new double[] { 3.0, 1.0, 4.0 });\n\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 1, 1 }));\n        Assert.assertTrue(optimum.getValue() > 0.1);\n\n    }\n",
        "begin_line": 383,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 389,col 43)",
            "(line 391,col 9)-(line 393,col 90)",
            "(line 394,col 9)-(line 399,col 74)",
            "(line 400,col 9)-(line 400,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testCircleFitting()",
        "snippet": "    @Test\n    public void testCircleFitting() {\n        CircleScalar problem = new CircleScalar();\n        problem.addPoint( 30.0,  68.0);\n        problem.addPoint( 50.0,  -6.0);\n        problem.addPoint(110.0, -20.0);\n        problem.addPoint( 35.0,  15.0);\n        problem.addPoint( 45.0,  97.0);\n        NonLinearConjugateGradientOptimizer optimizer\n           = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                     new SimpleValueChecker(1e-30, 1e-30),\n                                                     new BrentSolver(1e-15, 1e-13));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 98.680, 47.345 }));\n        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        Assert.assertEquals(69.960161753, problem.getRadius(center), 1.0e-8);\n        Assert.assertEquals(96.075902096, center.getX(), 1.0e-8);\n        Assert.assertEquals(48.135167894, center.getY(), 1.0e-8);\n    }\n",
        "begin_line": 404,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 50)",
            "(line 407,col 9)-(line 407,col 39)",
            "(line 408,col 9)-(line 408,col 39)",
            "(line 409,col 9)-(line 409,col 39)",
            "(line 410,col 9)-(line 410,col 39)",
            "(line 411,col 9)-(line 411,col 39)",
            "(line 412,col 9)-(line 415,col 84)",
            "(line 416,col 9)-(line 421,col 84)",
            "(line 422,col 9)-(line 422,col 91)",
            "(line 423,col 9)-(line 423,col 77)",
            "(line 424,col 9)-(line 424,col 65)",
            "(line 425,col 9)-(line 425,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.LinearProblem.LinearProblem(double[][], double[])",
        "snippet": "        public LinearProblem(double[][] factors,\n                             double[] target) {\n            this.factors = new BlockRealMatrix(factors);\n            this.target  = target;\n        }\n",
        "begin_line": 432,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 434,col 13)-(line 434,col 56)",
            "(line 435,col 13)-(line 435,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.LinearProblem.getObjectiveFunction()",
        "snippet": "        public ObjectiveFunction getObjectiveFunction() {\n            return new ObjectiveFunction(new MultivariateFunction() {\n                    public double value(double[] point) {\n                        double[] y = factors.operate(point);\n                        double sum = 0;\n                        for (int i = 0; i < y.length; ++i) {\n                            double ri = y[i] - target[i];\n                            sum += ri * ri;\n                        }\n                        return sum;\n                    }\n                });\n        }\n",
        "begin_line": 438,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 439,col 13)-(line 449,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.LinearProblem.Anonymous-c503ea51-0fea-4164-a512-fd8096a6da5a.value(double[])",
        "snippet": "                    public double value(double[] point) {\n                        double[] y = factors.operate(point);\n                        double sum = 0;\n                        for (int i = 0; i < y.length; ++i) {\n                            double ri = y[i] - target[i];\n                            sum += ri * ri;\n                        }\n                        return sum;\n                    }\n",
        "begin_line": 440,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 441,col 25)-(line 441,col 60)",
            "(line 442,col 25)-(line 442,col 39)",
            "(line 443,col 25)-(line 446,col 25)",
            "(line 447,col 25)-(line 447,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.LinearProblem.getObjectiveFunctionGradient()",
        "snippet": "        public ObjectiveFunctionGradient getObjectiveFunctionGradient() {\n            return new ObjectiveFunctionGradient(new MultivariateVectorFunction() {\n                    public double[] value(double[] point) {\n                        double[] r = factors.operate(point);\n                        for (int i = 0; i < r.length; ++i) {\n                            r[i] -= target[i];\n                        }\n                        double[] p = factors.transpose().operate(r);\n                        for (int i = 0; i < p.length; ++i) {\n                            p[i] *= 2;\n                        }\n                        return p;\n                    }\n                });\n        }\n",
        "begin_line": 452,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 453,col 13)-(line 465,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.LinearProblem.Anonymous-1a0bc983-7ccb-4d7a-a780-9d2b533ac4bc.value(double[])",
        "snippet": "                    public double[] value(double[] point) {\n                        double[] r = factors.operate(point);\n                        for (int i = 0; i < r.length; ++i) {\n                            r[i] -= target[i];\n                        }\n                        double[] p = factors.transpose().operate(r);\n                        for (int i = 0; i < p.length; ++i) {\n                            p[i] *= 2;\n                        }\n                        return p;\n                    }\n",
        "begin_line": 454,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 455,col 25)-(line 455,col 60)",
            "(line 456,col 25)-(line 458,col 25)",
            "(line 459,col 25)-(line 459,col 68)",
            "(line 460,col 25)-(line 462,col 25)",
            "(line 463,col 25)-(line 463,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInitOutofbounds1()",
        "snippet": "    @Test(expected = NumberIsTooLargeException.class)\n    public void testInitOutofbounds1() {\n        double[] startPoint = point(DIM,3);\n        double[] insigma = point(DIM, 0.3);\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 53,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 43)",
            "(line 56,col 9)-(line 56,col 43)",
            "(line 57,col 9)-(line 57,col 53)",
            "(line 58,col 9)-(line 59,col 51)",
            "(line 60,col 9)-(line 62,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInitOutofbounds2()",
        "snippet": "    @Test(expected = NumberIsTooSmallException.class)\n    public void testInitOutofbounds2() {\n        double[] startPoint = point(DIM, -2);\n        double[] insigma = point(DIM, 0.3);\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 45)",
            "(line 67,col 9)-(line 67,col 43)",
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 73,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testBoundariesDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testBoundariesDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM, 0.3);\n        double[][] boundaries = boundaries(DIM+1,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 76,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 45)",
            "(line 79,col 9)-(line 79,col 43)",
            "(line 80,col 9)-(line 80,col 55)",
            "(line 81,col 9)-(line 82,col 51)",
            "(line 83,col 9)-(line 85,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaNegative()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testInputSigmaNegative() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 88,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 45)",
            "(line 91,col 9)-(line 91,col 43)",
            "(line 92,col 9)-(line 92,col 37)",
            "(line 93,col 9)-(line 94,col 51)",
            "(line 95,col 9)-(line 97,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaOutOfRange()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testInputSigmaOutOfRange() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM, 1.1);\n        double[][] boundaries = boundaries(DIM,-0.5,0.5);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 100,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 45)",
            "(line 103,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 57)",
            "(line 105,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 109,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testInputSigmaDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM + 1, 0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 47)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 121,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 124,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 45)",
            "(line 128,col 9)-(line 128,col 42)",
            "(line 129,col 9)-(line 129,col 37)",
            "(line 130,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 134,col 47)",
            "(line 135,col 9)-(line 137,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testMaximize() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),1.0);\n        doTest(new MinusElli(), startPoint, insigma, boundaries,\n                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,\n                2e-10, 5e-6, 100000, expected);\n        doTest(new MinusElli(), startPoint, insigma, boundaries,\n                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,\n                2e-10, 5e-6, 100000, expected);\n        boundaries = boundaries(DIM,-0.3,0.3); \n        startPoint = point(DIM,0.1);\n        doTest(new MinusElli(), startPoint, insigma, boundaries,\n                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,\n                2e-10, 5e-6, 100000, expected);\n    }\n",
        "begin_line": 140,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 144,col 42)",
            "(line 145,col 9)-(line 145,col 37)",
            "(line 146,col 9)-(line 147,col 51)",
            "(line 148,col 9)-(line 150,col 47)",
            "(line 151,col 9)-(line 153,col 47)",
            "(line 154,col 9)-(line 154,col 46)",
            "(line 155,col 9)-(line 155,col 36)",
            "(line 156,col 9)-(line 158,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse()",
        "snippet": "    @Test\n    public void testEllipse() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 161,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 45)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 37)",
            "(line 166,col 9)-(line 167,col 51)",
            "(line 168,col 9)-(line 170,col 47)",
            "(line 171,col 9)-(line 173,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated()",
        "snippet": "    @Test\n    public void testElliRotated() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 176,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 45)",
            "(line 179,col 9)-(line 179,col 42)",
            "(line 180,col 9)-(line 180,col 37)",
            "(line 181,col 9)-(line 182,col 51)",
            "(line 183,col 9)-(line 185,col 47)",
            "(line 186,col 9)-(line 188,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar()",
        "snippet": "    @Test\n    public void testCigar() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 191,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 45)",
            "(line 194,col 9)-(line 194,col 42)",
            "(line 195,col 9)-(line 195,col 37)",
            "(line 196,col 9)-(line 197,col 51)",
            "(line 198,col 9)-(line 200,col 47)",
            "(line 201,col 9)-(line 203,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries()",
        "snippet": "    @Test\n    public void testCigarWithBoundaries() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 206,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 45)",
            "(line 209,col 9)-(line 209,col 42)",
            "(line 210,col 9)-(line 210,col 82)",
            "(line 211,col 9)-(line 212,col 51)",
            "(line 213,col 9)-(line 215,col 47)",
            "(line 216,col 9)-(line 218,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes()",
        "snippet": "    @Test\n    public void testTwoAxes() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-8, 1e-3, 200000, expected);\n    }\n",
        "begin_line": 221,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 42)",
            "(line 225,col 9)-(line 225,col 37)",
            "(line 226,col 9)-(line 227,col 51)",
            "(line 228,col 9)-(line 230,col 47)",
            "(line 231,col 9)-(line 233,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab()",
        "snippet": "    @Test\n    public void testCigTab() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.3);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new CigTab(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 5e-5, 100000, expected);\n        doTest(new CigTab(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 5e-5, 100000, expected);\n    }\n",
        "begin_line": 236,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 45)",
            "(line 239,col 9)-(line 239,col 42)",
            "(line 240,col 9)-(line 240,col 37)",
            "(line 241,col 9)-(line 242,col 51)",
            "(line 243,col 9)-(line 245,col 47)",
            "(line 246,col 9)-(line 248,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere()",
        "snippet": "    @Test\n    public void testSphere() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 251,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 45)",
            "(line 254,col 9)-(line 254,col 42)",
            "(line 255,col 9)-(line 255,col 37)",
            "(line 256,col 9)-(line 257,col 51)",
            "(line 258,col 9)-(line 260,col 47)",
            "(line 261,col 9)-(line 263,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet()",
        "snippet": "    @Test\n    public void testTablet() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 266,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 45)",
            "(line 269,col 9)-(line 269,col 42)",
            "(line 270,col 9)-(line 270,col 37)",
            "(line 271,col 9)-(line 272,col 51)",
            "(line 273,col 9)-(line 275,col 47)",
            "(line 276,col 9)-(line 278,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow()",
        "snippet": "    @Test\n    public void testDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-8, 1e-1, 100000, expected);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-8, 2e-1, 100000, expected);\n    }\n",
        "begin_line": 281,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 45)",
            "(line 284,col 9)-(line 284,col 42)",
            "(line 285,col 9)-(line 285,col 37)",
            "(line 286,col 9)-(line 287,col 51)",
            "(line 288,col 9)-(line 290,col 46)",
            "(line 291,col 9)-(line 293,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow()",
        "snippet": "    @Test\n    public void testSsDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n    }\n",
        "begin_line": 296,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 42)",
            "(line 300,col 9)-(line 300,col 37)",
            "(line 301,col 9)-(line 302,col 51)",
            "(line 303,col 9)-(line 305,col 46)",
            "(line 306,col 9)-(line 308,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley()",
        "snippet": "    @Test\n    public void testAckley() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,1.0);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n    }\n",
        "begin_line": 311,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 45)",
            "(line 314,col 9)-(line 314,col 42)",
            "(line 315,col 9)-(line 315,col 37)",
            "(line 316,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 320,col 46)",
            "(line 321,col 9)-(line 323,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin()",
        "snippet": "    @Test\n    public void testRastrigin() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n    }\n",
        "begin_line": 326,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 45)",
            "(line 329,col 9)-(line 329,col 42)",
            "(line 330,col 9)-(line 330,col 37)",
            "(line 331,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 335,col 47)",
            "(line 336,col 9)-(line 338,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen()",
        "snippet": "    @Test\n    public void testConstrainedRosen() {\n        double[] startPoint = point(DIM, 0.1);\n        double[] insigma = point(DIM, 0.1);\n        double[][] boundaries = boundaries(DIM, -1, 2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 341,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 46)",
            "(line 344,col 9)-(line 344,col 43)",
            "(line 345,col 9)-(line 345,col 55)",
            "(line 346,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 350,col 47)",
            "(line 351,col 9)-(line 353,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen()",
        "snippet": "    @Test\n    public void testDiagonalRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,\n                1e-10, 1e-4, 1000000, expected);\n     }\n",
        "begin_line": 356,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 45)",
            "(line 359,col 9)-(line 359,col 42)",
            "(line 360,col 9)-(line 360,col 37)",
            "(line 361,col 9)-(line 362,col 51)",
            "(line 363,col 9)-(line 365,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMath864()",
        "snippet": "    @Test\n    public void testMath864() {\n        final CMAESOptimizer optimizer\n            = new CMAESOptimizer(30000, 0, true, 10,\n                                 0, new MersenneTwister(), false, null);\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n        final double[] lower = { -1e6 };\n        final double[] upper = { 1.5 };\n        final double[] sigma = { 1e-1 };\n        final double[] result = optimizer.optimize(new MaxEval(10000),\n                                                   new ObjectiveFunction(fitnessFunction),\n                                                   GoalType.MINIMIZE,\n                                                   new CMAESOptimizer.PopulationSize(5),\n                                                   new CMAESOptimizer.Sigma(sigma),\n                                                   new InitialGuess(start),\n                                                   new SimpleBounds(lower, upper)).getPoint();\n        Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\",\n                          result[0] <= upper[0]);\n    }\n",
        "begin_line": 368,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 372,col 72)",
            "(line 373,col 9)-(line 379,col 14)",
            "(line 381,col 9)-(line 381,col 37)",
            "(line 382,col 9)-(line 382,col 40)",
            "(line 383,col 9)-(line 383,col 39)",
            "(line 384,col 9)-(line 384,col 40)",
            "(line 385,col 9)-(line 391,col 94)",
            "(line 392,col 9)-(line 393,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Anonymous-9f9e6fc5-e156-4292-a2e8-3aad6f4e331d.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 374,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 375,col 21)-(line 375,col 44)",
            "(line 376,col 21)-(line 376,col 64)",
            "(line 377,col 21)-(line 377,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary()",
        "snippet": "    @Test\n    public void testFitAccuracyDependsOnBoundary() {\n        final CMAESOptimizer optimizer\n            = new CMAESOptimizer(30000, 0, true, 10,\n                                 0, new MersenneTwister(), false, null);\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(new MaxEval(100000),\n                                                   new ObjectiveFunction(fitnessFunction),\n                                                   GoalType.MINIMIZE,\n                                                   SimpleBounds.unbounded(1),\n                                                   new CMAESOptimizer.PopulationSize(5),\n                                                   new CMAESOptimizer.Sigma(new double[] { 1e-1 }),\n                                                   new InitialGuess(start));\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        final double[] sigma = { 10 };\n        result = optimizer.optimize(new MaxEval(100000),\n                                    new ObjectiveFunction(fitnessFunction),\n                                    GoalType.MINIMIZE,\n                                    new CMAESOptimizer.PopulationSize(5),\n                                    new CMAESOptimizer.Sigma(sigma),\n                                    new InitialGuess(start),\n                                    new SimpleBounds(lower, upper));\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(new MaxEval(100000),\n                                    new ObjectiveFunction(fitnessFunction),\n                                    GoalType.MINIMIZE,\n                                    new CMAESOptimizer.PopulationSize(5),\n                                    new CMAESOptimizer.Sigma(sigma),\n                                    new InitialGuess(start),\n                                    new SimpleBounds(lower, upper));\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);\n    }\n",
        "begin_line": 399,
        "end_line": 457,
        "comment": "\n     * Cf. MATH-867\n     ",
        "child_ranges": [
            "(line 401,col 9)-(line 403,col 72)",
            "(line 404,col 9)-(line 410,col 14)",
            "(line 412,col 9)-(line 412,col 37)",
            "(line 415,col 9)-(line 421,col 76)",
            "(line 422,col 9)-(line 422,col 55)",
            "(line 425,col 9)-(line 425,col 39)",
            "(line 426,col 9)-(line 426,col 40)",
            "(line 427,col 9)-(line 427,col 38)",
            "(line 428,col 9)-(line 434,col 68)",
            "(line 435,col 9)-(line 435,col 54)",
            "(line 438,col 9)-(line 438,col 25)",
            "(line 439,col 9)-(line 439,col 22)",
            "(line 440,col 9)-(line 446,col 68)",
            "(line 447,col 9)-(line 447,col 54)",
            "(line 455,col 9)-(line 455,col 57)",
            "(line 456,col 9)-(line 456,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Anonymous-84a3ada6-3c6e-400c-9245-03138ba02154.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 405,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 406,col 21)-(line 406,col 47)",
            "(line 407,col 21)-(line 407,col 64)",
            "(line 408,col 21)-(line 408,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], double[][], org.apache.commons.math3.optim.nonlinear.scalar.GoalType, int, boolean, int, double, double, double, int, org.apache.commons.math3.optim.PointValuePair)",
        "snippet": "    private void doTest(MultivariateFunction func,\n                        double[] startPoint,\n                        double[] inSigma,\n                        double[][] boundaries,\n                        GoalType goal,\n                        int lambda,\n                        boolean isActive,\n                        int diagonalOnly, \n                        double stopValue,\n                        double fTol,\n                        double pointTol,\n                        int maxEvaluations,\n                        PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer(30000, stopValue, isActive, diagonalOnly,\n                                                  0, new MersenneTwister(), false, null);\n        PointValuePair result = boundaries == null ?\n            optim.optimize(new MaxEval(maxEvaluations),\n                           new ObjectiveFunction(func),\n                           goal,\n                           new InitialGuess(startPoint),\n                           SimpleBounds.unbounded(dim),\n                           new CMAESOptimizer.Sigma(inSigma),\n                           new CMAESOptimizer.PopulationSize(lambda)) :\n            optim.optimize(new MaxEval(maxEvaluations),\n                           new ObjectiveFunction(func),\n                           goal,\n                           new SimpleBounds(boundaries[0],\n                                            boundaries[1]),\n                           new InitialGuess(startPoint),\n                           new CMAESOptimizer.Sigma(inSigma),\n                           new CMAESOptimizer.PopulationSize(lambda));\n\n        // System.out.println(\"sol=\" + Arrays.toString(result.getPoint()));\n        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);\n        }\n\n        Assert.assertTrue(optim.getIterations() > 0);\n    }\n",
        "begin_line": 474,
        "end_line": 515,
        "comment": "\n     * @param func Function to optimize.\n     * @param startPoint Starting point.\n     * @param inSigma Individual input sigma.\n     * @param boundaries Upper / lower point limit.\n     * @param goal Minimization or maximization.\n     * @param lambda Population size used for offspring.\n     * @param isActive Covariance update mechanism.\n     * @param diagonalOnly Simplified covariance update.\n     * @param stopValue Termination criteria for optimization.\n     * @param fTol Tolerance relative error on the objective function.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     * @param maxEvaluations Maximum number of evaluations.\n     * @param expected Expected point / value.\n     ",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 36)",
            "(line 489,col 9)-(line 490,col 89)",
            "(line 491,col 9)-(line 506,col 70)",
            "(line 509,col 9)-(line 509,col 74)",
            "(line 510,col 9)-(line 512,col 9)",
            "(line 514,col 9)-(line 514,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.point(int, double)",
        "snippet": "    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n",
        "begin_line": 517,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 36)",
            "(line 519,col 9)-(line 519,col 31)",
            "(line 520,col 9)-(line 520,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.boundaries(int, double, double)",
        "snippet": "    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n",
        "begin_line": 523,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 51)",
            "(line 526,col 9)-(line 527,col 37)",
            "(line 528,col 9)-(line 529,col 37)",
            "(line 530,col 9)-(line 530,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Sphere.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 535,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 536,col 13)-(line 536,col 25)",
            "(line 537,col 13)-(line 538,col 33)",
            "(line 539,col 13)-(line 539,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Cigar.Cigar()",
        "snippet": "        Cigar() {\n            this(1e3);\n        }\n",
        "begin_line": 546,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 547,col 13)-(line 547,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Cigar.Cigar(double)",
        "snippet": "        Cigar(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 551,col 13)-(line 551,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Cigar.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += factor * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 554,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 555,col 13)-(line 555,col 35)",
            "(line 556,col 13)-(line 557,col 42)",
            "(line 558,col 13)-(line 558,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Tablet.Tablet()",
        "snippet": "        Tablet() {\n            this(1e3);\n        }\n",
        "begin_line": 565,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 566,col 13)-(line 566,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Tablet.Tablet(double)",
        "snippet": "        Tablet(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 569,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 570,col 13)-(line 570,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Tablet.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = factor * x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 573,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 574,col 13)-(line 574,col 44)",
            "(line 575,col 13)-(line 576,col 33)",
            "(line 577,col 13)-(line 577,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.CigTab.CigTab()",
        "snippet": "        CigTab() {\n            this(1e4);\n        }\n",
        "begin_line": 584,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 585,col 13)-(line 585,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.CigTab.CigTab(double)",
        "snippet": "        CigTab(double axisratio) {\n            factor = axisratio;\n        }\n",
        "begin_line": 588,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 589,col 13)-(line 589,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.CigTab.value(double[])",
        "snippet": "        public double value(double[] x) {\n            int end = x.length - 1;\n            double f = x[0] * x[0] / factor + factor * x[end] * x[end];\n            for (int i = 1; i < end; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 592,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 593,col 13)-(line 593,col 35)",
            "(line 594,col 13)-(line 594,col 71)",
            "(line 595,col 13)-(line 596,col 33)",
            "(line 597,col 13)-(line 597,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.TwoAxes.TwoAxes()",
        "snippet": "        TwoAxes() {\n            this(1e6);\n        }\n",
        "begin_line": 605,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 606,col 13)-(line 606,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.TwoAxes.TwoAxes(double)",
        "snippet": "        TwoAxes(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 610,col 13)-(line 610,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.TwoAxes.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 613,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 614,col 13)-(line 614,col 25)",
            "(line 615,col 13)-(line 616,col 67)",
            "(line 617,col 13)-(line 617,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.ElliRotated.ElliRotated()",
        "snippet": "        ElliRotated() {\n            this(1e3);\n        }\n",
        "begin_line": 625,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 626,col 13)-(line 626,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.ElliRotated.ElliRotated(double)",
        "snippet": "        ElliRotated(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 629,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 630,col 13)-(line 630,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.ElliRotated.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            x = B.Rotate(x);\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 633,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 634,col 13)-(line 634,col 25)",
            "(line 635,col 13)-(line 635,col 28)",
            "(line 636,col 13)-(line 637,col 73)",
            "(line 638,col 13)-(line 638,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Elli.Elli()",
        "snippet": "        Elli() {\n            this(1e3);\n        }\n",
        "begin_line": 646,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 647,col 13)-(line 647,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Elli.Elli(double)",
        "snippet": "        Elli(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 650,
        "end_line": 652,
        "comment": "",
        "child_ranges": [
            "(line 651,col 13)-(line 651,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Elli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 654,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 655,col 13)-(line 655,col 25)",
            "(line 656,col 13)-(line 657,col 73)",
            "(line 658,col 13)-(line 658,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.MinusElli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            return 1.0-(new Elli().value(x));\n        }\n",
        "begin_line": 664,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 665,col 13)-(line 665,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.DiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i\n                        / (x.length - 1.));\n            return f;\n        }\n",
        "begin_line": 671,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 672,col 13)-(line 672,col 25)",
            "(line 673,col 13)-(line 675,col 43)",
            "(line 676,col 13)-(line 676,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.SsDiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = Math.pow(new DiffPow().value(x), 0.25);\n            return f;\n        }\n",
        "begin_line": 682,
        "end_line": 685,
        "comment": "",
        "child_ranges": [
            "(line 683,col 13)-(line 683,col 62)",
            "(line 684,col 13)-(line 684,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Rosen.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length - 1; ++i)\n                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])\n                + (x[i] - 1.) * (x[i] - 1.);\n            return f;\n        }\n",
        "begin_line": 690,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 691,col 13)-(line 691,col 25)",
            "(line 692,col 13)-(line 694,col 44)",
            "(line 695,col 13)-(line 695,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Ackley.Ackley(double)",
        "snippet": "        Ackley(double axra) {\n            axisratio = axra;\n        }\n",
        "begin_line": 702,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 703,col 13)-(line 703,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Ackley.Ackley()",
        "snippet": "        public Ackley() {\n            this(1);\n        }\n",
        "begin_line": 706,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 707,col 13)-(line 707,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Ackley.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double res2 = 0;\n            double fac = 0;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                f += fac * fac * x[i] * x[i];\n                res2 += Math.cos(2. * Math.PI * fac * x[i]);\n            }\n            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))\n                    + Math.exp(1.) - Math.exp(res2 / x.length));\n            return f;\n        }\n",
        "begin_line": 710,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 711,col 13)-(line 711,col 25)",
            "(line 712,col 13)-(line 712,col 28)",
            "(line 713,col 13)-(line 713,col 27)",
            "(line 714,col 13)-(line 718,col 13)",
            "(line 719,col 13)-(line 720,col 64)",
            "(line 721,col 13)-(line 721,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Rastrigin.Rastrigin()",
        "snippet": "        Rastrigin() {\n            this(1, 10);\n        }\n",
        "begin_line": 730,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 731,col 13)-(line 731,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Rastrigin.Rastrigin(double, double)",
        "snippet": "        Rastrigin(double axisratio, double amplitude) {\n            this.axisratio = axisratio;\n            this.amplitude = amplitude;\n        }\n",
        "begin_line": 734,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 735,col 13)-(line 735,col 39)",
            "(line 736,col 13)-(line 736,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Rastrigin.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double fac;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                if (i == 0 && x[i] < 0)\n                    fac *= 1.;\n                f += fac * fac * x[i] * x[i] + amplitude\n                * (1. - Math.cos(2. * Math.PI * fac * x[i]));\n            }\n            return f;\n        }\n",
        "begin_line": 739,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 740,col 13)-(line 740,col 25)",
            "(line 741,col 13)-(line 741,col 23)",
            "(line 742,col 13)-(line 748,col 13)",
            "(line 749,col 13)-(line 749,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Basis.Rotate(double[])",
        "snippet": "        double[] Rotate(double[] x) {\n            GenBasis(x.length);\n            double[] y = new double[x.length];\n            for (int i = 0; i < x.length; ++i) {\n                y[i] = 0;\n                for (int j = 0; j < x.length; ++j)\n                    y[i] += basis[i][j] * x[j];\n            }\n            return y;\n        }\n",
        "begin_line": 757,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 758,col 13)-(line 758,col 31)",
            "(line 759,col 13)-(line 759,col 46)",
            "(line 760,col 13)-(line 764,col 13)",
            "(line 765,col 13)-(line 765,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.Basis.GenBasis(int)",
        "snippet": "        void GenBasis(int DIM) {\n            if (basis != null ? basis.length == DIM : false)\n                return;\n\n            double sp;\n            int i, j, k;\n\n            /* generate orthogonal basis */\n            basis = new double[DIM][DIM];\n            for (i = 0; i < DIM; ++i) {\n                /* sample components gaussian */\n                for (j = 0; j < DIM; ++j)\n                    basis[i][j] = rand.nextGaussian();\n                /* substract projection of previous vectors */\n                for (j = i - 1; j >= 0; --j) {\n                    for (sp = 0., k = 0; k < DIM; ++k)\n                        sp += basis[i][k] * basis[j][k]; /* scalar product */\n                    for (k = 0; k < DIM; ++k)\n                        basis[i][k] -= sp * basis[j][k]; /* substract */\n                }\n                /* normalize */\n                for (sp = 0., k = 0; k < DIM; ++k)\n                    sp += basis[i][k] * basis[i][k]; /* squared norm */\n                for (k = 0; k < DIM; ++k)\n                    basis[i][k] /= Math.sqrt(sp);\n            }\n        }\n",
        "begin_line": 768,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 769,col 13)-(line 770,col 23)",
            "(line 772,col 13)-(line 772,col 22)",
            "(line 773,col 13)-(line 773,col 24)",
            "(line 776,col 13)-(line 776,col 41)",
            "(line 777,col 13)-(line 793,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testBoundsUnsupported()",
        "snippet": "    @Test(expected=MathUnsupportedOperationException.class)\n    public void testBoundsUnsupported() {\n        final MultivariateFunction func = new SumSincFunction(-1);\n        final PowellOptimizer optim = new PowellOptimizer(1e-8, 1e-5,\n                                                          1e-4, 1e-4);\n\n        optim.optimize(new MaxEval(100),\n                       new ObjectiveFunction(func),\n                       GoalType.MINIMIZE,\n                       new InitialGuess(new double[] { -3, 0 }),\n                       new SimpleBounds(new double[] { -5, -1 },\n                                        new double[] { 5, 1 }));\n    }\n",
        "begin_line": 36,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 66)",
            "(line 39,col 9)-(line 40,col 70)",
            "(line 42,col 9)-(line 47,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc()",
        "snippet": "    @Test\n    public void testSumSinc() {\n        final MultivariateFunction func = new SumSincFunction(-1);\n\n        int dim = 2;\n        final double[] minPoint = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            minPoint[i] = 0;\n        }\n\n        double[] init = new double[dim];\n\n        // Initial is minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i];\n        }\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n\n        // Initial is far from minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i] + 3;\n        }\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n        // More stringent line search tolerance enhances the precision\n        // of the result.\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n    }\n",
        "begin_line": 50,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 66)",
            "(line 54,col 9)-(line 54,col 20)",
            "(line 55,col 9)-(line 55,col 50)",
            "(line 56,col 9)-(line 58,col 9)",
            "(line 60,col 9)-(line 60,col 40)",
            "(line 63,col 9)-(line 65,col 9)",
            "(line 66,col 9)-(line 66,col 68)",
            "(line 69,col 9)-(line 71,col 9)",
            "(line 72,col 9)-(line 72,col 68)",
            "(line 75,col 9)-(line 75,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testQuadratic()",
        "snippet": "    @Test\n    public void testQuadratic() {\n        final MultivariateFunction func = new MultivariateFunction() {\n                public double value(double[] x) {\n                    final double a = x[0] - 1;\n                    final double b = x[1] - 1;\n                    return a * a + b * b + 1;\n                }\n            };\n\n        int dim = 2;\n        final double[] minPoint = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            minPoint[i] = 1;\n        }\n\n        double[] init = new double[dim];\n\n        // Initial is minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i];\n        }\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);\n\n        // Initial is far from minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i] - 20;\n        }\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);\n    }\n",
        "begin_line": 78,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 86,col 14)",
            "(line 88,col 9)-(line 88,col 20)",
            "(line 89,col 9)-(line 89,col 50)",
            "(line 90,col 9)-(line 92,col 9)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 97,col 9)-(line 99,col 9)",
            "(line 100,col 9)-(line 100,col 68)",
            "(line 103,col 9)-(line 105,col 9)",
            "(line 106,col 9)-(line 106,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.Anonymous-bdd0912e-e4b5-489e-8a8b-0fc8c2f92913.value(double[])",
        "snippet": "                public double value(double[] x) {\n                    final double a = x[0] - 1;\n                    final double b = x[1] - 1;\n                    return a * a + b * b + 1;\n                }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 82,col 21)-(line 82,col 46)",
            "(line 83,col 21)-(line 83,col 46)",
            "(line 84,col 21)-(line 84,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testMaximizeQuadratic()",
        "snippet": "    @Test\n    public void testMaximizeQuadratic() {\n        final MultivariateFunction func = new MultivariateFunction() {\n                public double value(double[] x) {\n                    final double a = x[0] - 1;\n                    final double b = x[1] - 1;\n                    return -a * a - b * b + 1;\n                }\n            };\n\n        int dim = 2;\n        final double[] maxPoint = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            maxPoint[i] = 1;\n        }\n\n        double[] init = new double[dim];\n\n        // Initial is minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = maxPoint[i];\n        }\n        doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-9, 1e-8);\n\n        // Initial is far from minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = maxPoint[i] - 20;\n        }\n        doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8);\n    }\n",
        "begin_line": 109,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 117,col 14)",
            "(line 119,col 9)-(line 119,col 20)",
            "(line 120,col 9)-(line 120,col 50)",
            "(line 121,col 9)-(line 123,col 9)",
            "(line 125,col 9)-(line 125,col 40)",
            "(line 128,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 69)",
            "(line 134,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.Anonymous-e5bee73f-8959-411a-ba28-555141a57d35.value(double[])",
        "snippet": "                public double value(double[] x) {\n                    final double a = x[0] - 1;\n                    final double b = x[1] - 1;\n                    return -a * a - b * b + 1;\n                }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 113,col 21)-(line 113,col 46)",
            "(line 114,col 21)-(line 114,col 46)",
            "(line 115,col 21)-(line 115,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testRelativeToleranceOnScaledValues()",
        "snippet": "    @Test\n    public void testRelativeToleranceOnScaledValues() {\n        final MultivariateFunction func = new MultivariateFunction() {\n                public double value(double[] x) {\n                    final double a = x[0] - 1;\n                    final double b = x[1] - 1;\n                    return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1;\n                }\n            };\n\n        int dim = 2;\n        final double[] minPoint = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            minPoint[i] = 1;\n        }\n\n        double[] init = new double[dim];\n        // Initial is far from minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i] - 20;\n        }\n\n        final double relTol = 1e-10;\n\n        final int maxEval = 1000;\n        // Very small absolute tolerance to rely solely on the relative\n        // tolerance as a stopping criterion\n        final PowellOptimizer optim = new PowellOptimizer(relTol, 1e-100);\n\n        final PointValuePair funcResult = optim.optimize(new MaxEval(maxEval),\n                                                         new ObjectiveFunction(func),\n                                                         GoalType.MINIMIZE,\n                                                         new InitialGuess(init));\n        final double funcValue = func.value(funcResult.getPoint());\n        final int funcEvaluations = optim.getEvaluations();\n\n        final double scale = 1e10;\n        final MultivariateFunction funcScaled = new MultivariateFunction() {\n                public double value(double[] x) {\n                    return scale * func.value(x);\n                }\n            };\n\n        final PointValuePair funcScaledResult = optim.optimize(new MaxEval(maxEval),\n                                                               new ObjectiveFunction(funcScaled),\n                                                               GoalType.MINIMIZE,\n                                                               new InitialGuess(init));\n        final double funcScaledValue = funcScaled.value(funcScaledResult.getPoint());\n        final int funcScaledEvaluations = optim.getEvaluations();\n\n        // Check that both minima provide the same objective funciton values,\n        // within the relative function tolerance.\n        Assert.assertEquals(1, funcScaledValue / (scale * funcValue), relTol);\n\n        // Check that the numbers of evaluations are the same.\n        Assert.assertEquals(funcEvaluations, funcScaledEvaluations);\n    }\n",
        "begin_line": 147,
        "end_line": 203,
        "comment": "\n     * Ensure that we do not increase the number of function evaluations when\n     * the function values are scaled up.\n     * Note that the tolerances parameters passed to the constructor must\n     * still hold sensible values because they are used to set the line search\n     * tolerances.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 155,col 14)",
            "(line 157,col 9)-(line 157,col 20)",
            "(line 158,col 9)-(line 158,col 50)",
            "(line 159,col 9)-(line 161,col 9)",
            "(line 163,col 9)-(line 163,col 40)",
            "(line 165,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 169,col 36)",
            "(line 171,col 9)-(line 171,col 33)",
            "(line 174,col 9)-(line 174,col 74)",
            "(line 176,col 9)-(line 179,col 81)",
            "(line 180,col 9)-(line 180,col 67)",
            "(line 181,col 9)-(line 181,col 59)",
            "(line 183,col 9)-(line 183,col 34)",
            "(line 184,col 9)-(line 188,col 14)",
            "(line 190,col 9)-(line 193,col 87)",
            "(line 194,col 9)-(line 194,col 85)",
            "(line 195,col 9)-(line 195,col 65)",
            "(line 199,col 9)-(line 199,col 78)",
            "(line 202,col 9)-(line 202,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.Anonymous-ae6a817a-5e50-4269-a8f8-cb953f14288b.value(double[])",
        "snippet": "                public double value(double[] x) {\n                    final double a = x[0] - 1;\n                    final double b = x[1] - 1;\n                    return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1;\n                }\n",
        "begin_line": 150,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 151,col 21)-(line 151,col 46)",
            "(line 152,col 21)-(line 152,col 46)",
            "(line 153,col 21)-(line 153,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.Anonymous-7d242c97-4cf9-49f4-a467-3c88b936d6f8.value(double[])",
        "snippet": "                public double value(double[] x) {\n                    return scale * func.value(x);\n                }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 21)-(line 186,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], org.apache.commons.math3.optim.nonlinear.scalar.GoalType, double, double)",
        "snippet": "    private void doTest(MultivariateFunction func,\n                        double[] optimum,\n                        double[] init,\n                        GoalType goal,\n                        double fTol,\n                        double pointTol) {\n        final PowellOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d));\n\n        final PointValuePair result = optim.optimize(new MaxEval(1000),\n                                                     new ObjectiveFunction(func),\n                                                     goal,\n                                                     new InitialGuess(init));\n        final double[] point = result.getPoint();\n\n        for (int i = 0, dim = optimum.length; i < dim; i++) {\n            Assert.assertEquals(\"found[\" + i + \"]=\" + point[i] + \" value=\" + result.getValue(),\n                                optimum[i], point[i], pointTol);\n        }\n    }\n",
        "begin_line": 214,
        "end_line": 232,
        "comment": "\n     * @param func Function to optimize.\n     * @param optimum Expected optimum.\n     * @param init Starting point.\n     * @param goal Minimization or maximization.\n     * @param fTol Tolerance (relative error on the objective function) for\n     * \"Powell\" algorithm.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 78)",
            "(line 222,col 9)-(line 225,col 77)",
            "(line 226,col 9)-(line 226,col 49)",
            "(line 228,col 9)-(line 231,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], org.apache.commons.math3.optim.nonlinear.scalar.GoalType, double, double, double)",
        "snippet": "    private void doTest(MultivariateFunction func,\n                        double[] optimum,\n                        double[] init,\n                        GoalType goal,\n                        double fTol,\n                        double fLineTol,\n                        double pointTol) {\n        final PowellOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d),\n                                                          fLineTol, Math.ulp(1d));\n\n        final PointValuePair result = optim.optimize(new MaxEval(1000),\n                                                     new ObjectiveFunction(func),\n                                                     goal,\n                                                     new InitialGuess(init));\n        final double[] point = result.getPoint();\n\n        for (int i = 0, dim = optimum.length; i < dim; i++) {\n            Assert.assertEquals(\"found[\" + i + \"]=\" + point[i] + \" value=\" + result.getValue(),\n                                optimum[i], point[i], pointTol);\n        }\n\n        Assert.assertTrue(optim.getIterations() > 0);\n    }\n",
        "begin_line": 245,
        "end_line": 267,
        "comment": "\n     * @param func Function to optimize.\n     * @param optimum Expected optimum.\n     * @param init Starting point.\n     * @param goal Minimization or maximization.\n     * @param fTol Tolerance (relative error on the objective function) for\n     * \"Powell\" algorithm.\n     * @param fLineTol Tolerance (relative error on the objective function)\n     * for the internal line search algorithm.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     ",
        "child_ranges": [
            "(line 252,col 9)-(line 253,col 82)",
            "(line 255,col 9)-(line 258,col 77)",
            "(line 259,col 9)-(line 259,col 49)",
            "(line 261,col 9)-(line 264,col 9)",
            "(line 266,col 9)-(line 266,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testBoundsUnsupported()",
        "snippet": "    @Test(expected=MathUnsupportedOperationException.class)\n    public void testBoundsUnsupported() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        optimizer.optimize(new MaxEval(100),\n                           new ObjectiveFunction(fourExtrema),\n                           GoalType.MINIMIZE,\n                           new InitialGuess(new double[] { -3, 0 }),\n                           new NelderMeadSimplex(new double[] { 0.2, 0.2 }),\n                           new SimpleBounds(new double[] { -5, -1 },\n                                            new double[] { 5, 1 }));\n    }\n",
        "begin_line": 34,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 72)",
            "(line 37,col 9)-(line 37,col 58)",
            "(line 39,col 9)-(line 45,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1()",
        "snippet": "    @Test\n    public void testMinimize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(200),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);\n        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);\n        Assert.assertTrue(optimizer.getEvaluations() > 120);\n        Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 48,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 72)",
            "(line 51,col 9)-(line 51,col 58)",
            "(line 53,col 9)-(line 58,col 89)",
            "(line 59,col 9)-(line 59,col 73)",
            "(line 60,col 9)-(line 60,col 73)",
            "(line 61,col 9)-(line 61,col 78)",
            "(line 62,col 9)-(line 62,col 60)",
            "(line 63,col 9)-(line 63,col 60)",
            "(line 66,col 9)-(line 66,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2()",
        "snippet": "    @Test\n    public void testMinimize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(200),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\n        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 120);\n        Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 69,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 58)",
            "(line 74,col 9)-(line 79,col 89)",
            "(line 80,col 9)-(line 80,col 73)",
            "(line 81,col 9)-(line 81,col 73)",
            "(line 82,col 9)-(line 82,col 78)",
            "(line 83,col 9)-(line 83,col 60)",
            "(line 84,col 9)-(line 84,col 60)",
            "(line 87,col 9)-(line 87,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1()",
        "snippet": "    @Test\n    public void testMaximize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(200),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { -3.0, 0.0 }),\n                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);\n        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);\n        Assert.assertTrue(optimizer.getEvaluations() > 120);\n        Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 90,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 72)",
            "(line 93,col 9)-(line 93,col 58)",
            "(line 95,col 9)-(line 100,col 89)",
            "(line 101,col 9)-(line 101,col 73)",
            "(line 102,col 9)-(line 102,col 73)",
            "(line 103,col 9)-(line 103,col 78)",
            "(line 104,col 9)-(line 104,col 60)",
            "(line 105,col 9)-(line 105,col 60)",
            "(line 108,col 9)-(line 108,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2()",
        "snippet": "    @Test\n    public void testMaximize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(200),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);\n        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 180);\n        Assert.assertTrue(optimizer.getEvaluations() < 220);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 111,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 96)",
            "(line 114,col 9)-(line 114,col 58)",
            "(line 116,col 9)-(line 121,col 89)",
            "(line 122,col 9)-(line 122,col 73)",
            "(line 123,col 9)-(line 123,col 73)",
            "(line 124,col 9)-(line 124,col 78)",
            "(line 125,col 9)-(line 125,col 60)",
            "(line 126,col 9)-(line 126,col 60)",
            "(line 129,col 9)-(line 129,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testRosenbrock()",
        "snippet": "    @Test\n    public void testRosenbrock() {\n        MultivariateFunction rosenbrock\n            = new MultivariateFunction() {\n                    public double value(double[] x) {\n                        ++count;\n                        double a = x[1] - x[0] * x[0];\n                        double b = 1.0 - x[0];\n                        return 100 * a * a + b * b;\n                    }\n                };\n\n        count = 0;\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);\n        PointValuePair optimum\n           = optimizer.optimize(new MaxEval(100),\n                                new ObjectiveFunction(rosenbrock),\n                                GoalType.MINIMIZE,\n                                new InitialGuess(new double[] { -1.2, 1 }),\n                                new MultiDirectionalSimplex(new double[][] {\n                                        { -1.2,  1.0 },\n                                        { 0.9, 1.2 },\n                                        {  3.5, -2.3 } }));\n\n        Assert.assertEquals(count, optimizer.getEvaluations());\n        Assert.assertTrue(optimizer.getEvaluations() > 50);\n        Assert.assertTrue(optimizer.getEvaluations() < 100);\n        Assert.assertTrue(optimum.getValue() > 1e-2);\n    }\n",
        "begin_line": 132,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 142,col 18)",
            "(line 144,col 9)-(line 144,col 18)",
            "(line 145,col 9)-(line 145,col 68)",
            "(line 146,col 9)-(line 154,col 59)",
            "(line 156,col 9)-(line 156,col 63)",
            "(line 157,col 9)-(line 157,col 59)",
            "(line 158,col 9)-(line 158,col 60)",
            "(line 159,col 9)-(line 159,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.Anonymous-13ec9f84-a7f9-4060-a692-e235270c2bf3.value(double[])",
        "snippet": "                    public double value(double[] x) {\n                        ++count;\n                        double a = x[1] - x[0] * x[0];\n                        double b = 1.0 - x[0];\n                        return 100 * a * a + b * b;\n                    }\n",
        "begin_line": 136,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 137,col 25)-(line 137,col 32)",
            "(line 138,col 25)-(line 138,col 54)",
            "(line 139,col 25)-(line 139,col 46)",
            "(line 140,col 25)-(line 140,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testPowell()",
        "snippet": "    @Test\n    public void testPowell() {\n        MultivariateFunction powell\n            = new MultivariateFunction() {\n                    public double value(double[] x) {\n                        ++count;\n                        double a = x[0] + 10 * x[1];\n                        double b = x[2] - x[3];\n                        double c = x[1] - 2 * x[2];\n                        double d = x[0] - x[3];\n                        return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;\n                    }\n                };\n\n        count = 0;\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(1000),\n                                 new ObjectiveFunction(powell),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 3, -1, 0, 1 }),\n                                 new MultiDirectionalSimplex(4));\n        Assert.assertEquals(count, optimizer.getEvaluations());\n        Assert.assertTrue(optimizer.getEvaluations() > 800);\n        Assert.assertTrue(optimizer.getEvaluations() < 900);\n        Assert.assertTrue(optimum.getValue() > 1e-2);\n    }\n",
        "begin_line": 162,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 174,col 18)",
            "(line 176,col 9)-(line 176,col 18)",
            "(line 177,col 9)-(line 177,col 68)",
            "(line 178,col 9)-(line 183,col 65)",
            "(line 184,col 9)-(line 184,col 63)",
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 186,col 60)",
            "(line 187,col 9)-(line 187,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.Anonymous-f718b7d4-d743-4af3-9a73-9604915d1cd0.value(double[])",
        "snippet": "                    public double value(double[] x) {\n                        ++count;\n                        double a = x[0] + 10 * x[1];\n                        double b = x[2] - x[3];\n                        double c = x[1] - 2 * x[2];\n                        double d = x[0] - x[3];\n                        return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;\n                    }\n",
        "begin_line": 166,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 167,col 25)-(line 167,col 32)",
            "(line 168,col 25)-(line 168,col 52)",
            "(line 169,col 25)-(line 169,col 47)",
            "(line 170,col 25)-(line 170,col 51)",
            "(line 171,col 25)-(line 171,col 47)",
            "(line 172,col 25)-(line 172,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMath283()",
        "snippet": "    @Test\n    public void testMath283() {\n        // fails because MultiDirectional.iterateSimplex is looping forever\n        // the while(true) should be replaced with a convergence check\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-14, 1e-14);\n        final Gaussian2D function = new Gaussian2D(0, 0, 1);\n        PointValuePair estimate = optimizer.optimize(new MaxEval(1000),\n                                                     new ObjectiveFunction(function),\n                                                     GoalType.MAXIMIZE,\n                                                     new InitialGuess(function.getMaximumPosition()),\n                                                     new MultiDirectionalSimplex(2));\n        final double EPSILON = 1e-5;\n        final double expectedMaximum = function.getMaximum();\n        final double actualMaximum = estimate.getValue();\n        Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);\n\n        final double[] expectedPosition = function.getMaximumPosition();\n        final double[] actualPosition = estimate.getPoint();\n        Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );\n        Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );\n    }\n",
        "begin_line": 190,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 72)",
            "(line 195,col 9)-(line 195,col 60)",
            "(line 196,col 9)-(line 200,col 85)",
            "(line 201,col 9)-(line 201,col 36)",
            "(line 202,col 9)-(line 202,col 61)",
            "(line 203,col 9)-(line 203,col 57)",
            "(line 204,col 9)-(line 204,col 69)",
            "(line 206,col 9)-(line 206,col 72)",
            "(line 207,col 9)-(line 207,col 60)",
            "(line 208,col 9)-(line 208,col 78)",
            "(line 209,col 9)-(line 209,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.FourExtrema.value(double[])",
        "snippet": "        public double value(double[] variables) {\n            final double x = variables[0];\n            final double y = variables[1];\n            return (x == 0 || y == 0) ? 0 :\n                FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y);\n        }\n",
        "begin_line": 223,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 224,col 13)-(line 224,col 42)",
            "(line 225,col 13)-(line 225,col 42)",
            "(line 226,col 13)-(line 227,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.Gaussian2D.Gaussian2D(double, double, double)",
        "snippet": "        public Gaussian2D(double xOpt, double yOpt, double std) {\n            maximumPosition = new double[] { xOpt, yOpt };\n            this.std = std;\n        }\n",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 236,col 13)-(line 236,col 58)",
            "(line 237,col 13)-(line 237,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.Gaussian2D.getMaximum()",
        "snippet": "        public double getMaximum() {\n            return value(maximumPosition);\n        }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 241,col 13)-(line 241,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.Gaussian2D.getMaximumPosition()",
        "snippet": "        public double[] getMaximumPosition() {\n            return maximumPosition.clone();\n        }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 13)-(line 245,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.Gaussian2D.value(double[])",
        "snippet": "        public double value(double[] point) {\n            final double x = point[0], y = point[1];\n            final double twoS2 = 2.0 * std * std;\n            return 1.0 / (twoS2 * FastMath.PI) * FastMath.exp(-(x * x + y * y) / twoS2);\n        }\n",
        "begin_line": 248,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 249,col 13)-(line 249,col 52)",
            "(line 250,col 13)-(line 250,col 49)",
            "(line 251,col 13)-(line 251,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testBoundsUnsupported()",
        "snippet": "    @Test(expected=MathUnsupportedOperationException.class)\n    public void testBoundsUnsupported() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        optimizer.optimize(new MaxEval(100),\n                           new ObjectiveFunction(fourExtrema),\n                           GoalType.MINIMIZE,\n                           new InitialGuess(new double[] { -3, 0 }),\n                           new NelderMeadSimplex(new double[] { 0.2, 0.2 }),\n                           new SimpleBounds(new double[] { -5, -1 },\n                                            new double[] { 5, 1 }));\n    }\n",
        "begin_line": 39,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 72)",
            "(line 42,col 9)-(line 42,col 58)",
            "(line 44,col 9)-(line 50,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1()",
        "snippet": "    @Test\n    public void testMinimize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);\n        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 53,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 72)",
            "(line 56,col 9)-(line 56,col 58)",
            "(line 58,col 9)-(line 63,col 83)",
            "(line 64,col 9)-(line 64,col 73)",
            "(line 65,col 9)-(line 65,col 73)",
            "(line 66,col 9)-(line 66,col 78)",
            "(line 67,col 9)-(line 67,col 59)",
            "(line 68,col 9)-(line 68,col 59)",
            "(line 71,col 9)-(line 71,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2()",
        "snippet": "    @Test\n    public void testMinimize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);\n        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 74,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 72)",
            "(line 77,col 9)-(line 77,col 58)",
            "(line 79,col 9)-(line 84,col 83)",
            "(line 85,col 9)-(line 85,col 73)",
            "(line 86,col 9)-(line 86,col 73)",
            "(line 87,col 9)-(line 87,col 78)",
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 59)",
            "(line 92,col 9)-(line 92,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1()",
        "snippet": "    @Test\n    public void testMaximize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\n        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 95,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 72)",
            "(line 98,col 9)-(line 98,col 58)",
            "(line 100,col 9)-(line 105,col 83)",
            "(line 106,col 9)-(line 106,col 73)",
            "(line 107,col 9)-(line 107,col 73)",
            "(line 108,col 9)-(line 108,col 78)",
            "(line 109,col 9)-(line 109,col 59)",
            "(line 110,col 9)-(line 110,col 59)",
            "(line 113,col 9)-(line 113,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2()",
        "snippet": "    @Test\n    public void testMaximize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);\n        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n",
        "begin_line": 116,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 72)",
            "(line 119,col 9)-(line 119,col 58)",
            "(line 121,col 9)-(line 126,col 83)",
            "(line 127,col 9)-(line 127,col 73)",
            "(line 128,col 9)-(line 128,col 73)",
            "(line 129,col 9)-(line 129,col 78)",
            "(line 130,col 9)-(line 130,col 59)",
            "(line 131,col 9)-(line 131,col 59)",
            "(line 134,col 9)-(line 134,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testRosenbrock()",
        "snippet": "    @Test\n    public void testRosenbrock() {\n\n        Rosenbrock rosenbrock = new Rosenbrock();\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);\n        PointValuePair optimum\n        = optimizer.optimize(new MaxEval(100),\n                             new ObjectiveFunction(rosenbrock),\n                             GoalType.MINIMIZE,\n                             new InitialGuess(new double[] { -1.2, 1 }),\n                                new NelderMeadSimplex(new double[][] {\n                                        { -1.2,  1 },\n                                        { 0.9, 1.2 },\n                                        {  3.5, -2.3 } }));\n\n        Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());\n        Assert.assertTrue(optimizer.getEvaluations() > 40);\n        Assert.assertTrue(optimizer.getEvaluations() < 50);\n        Assert.assertTrue(optimum.getValue() < 8e-4);\n    }\n",
        "begin_line": 137,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 68)",
            "(line 142,col 9)-(line 150,col 59)",
            "(line 152,col 9)-(line 152,col 79)",
            "(line 153,col 9)-(line 153,col 59)",
            "(line 154,col 9)-(line 154,col 59)",
            "(line 155,col 9)-(line 155,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testPowell()",
        "snippet": "    @Test\n    public void testPowell() {\n        Powell powell = new Powell();\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);\n        PointValuePair optimum =\n            optimizer.optimize(new MaxEval(200),\n                               new ObjectiveFunction(powell),\n                               GoalType.MINIMIZE,\n                               new InitialGuess(new double[] { 3, -1, 0, 1 }),\n                               new NelderMeadSimplex(4));\n        Assert.assertEquals(powell.getCount(), optimizer.getEvaluations());\n        Assert.assertTrue(optimizer.getEvaluations() > 110);\n        Assert.assertTrue(optimizer.getEvaluations() < 130);\n        Assert.assertTrue(optimum.getValue() < 2e-3);\n    }\n",
        "begin_line": 158,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 37)",
            "(line 161,col 9)-(line 161,col 68)",
            "(line 162,col 9)-(line 167,col 57)",
            "(line 168,col 9)-(line 168,col 75)",
            "(line 169,col 9)-(line 169,col 60)",
            "(line 170,col 9)-(line 170,col 60)",
            "(line 171,col 9)-(line 171,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testLeastSquares1()",
        "snippet": "    @Test\n    public void testLeastSquares1() {\n        final RealMatrix factors\n            = new Array2DRowRealMatrix(new double[][] {\n                    { 1, 0 },\n                    { 0, 1 }\n                }, false);\n        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {\n                public double[] value(double[] variables) {\n                    return factors.operate(variables);\n                }\n            }, new double[] { 2.0, -3.0 });\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);\n        PointValuePair optimum =\n            optimizer.optimize(new MaxEval(200),\n                               new ObjectiveFunction(ls),\n                               GoalType.MINIMIZE,\n                               new InitialGuess(new double[] { 10, 10 }),\n                               new NelderMeadSimplex(2));\n        Assert.assertEquals( 2, optimum.getPointRef()[0], 3e-5);\n        Assert.assertEquals(-3, optimum.getPointRef()[1], 4e-4);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 80);\n        Assert.assertTrue(optimum.getValue() < 1.0e-6);\n    }\n",
        "begin_line": 174,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 180,col 26)",
            "(line 181,col 9)-(line 185,col 43)",
            "(line 186,col 9)-(line 186,col 68)",
            "(line 187,col 9)-(line 192,col 57)",
            "(line 193,col 9)-(line 193,col 64)",
            "(line 194,col 9)-(line 194,col 64)",
            "(line 195,col 9)-(line 195,col 59)",
            "(line 196,col 9)-(line 196,col 59)",
            "(line 197,col 9)-(line 197,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Anonymous-93a5db97-01c7-4c8f-b660-772189f6f73a.value(double[])",
        "snippet": "                public double[] value(double[] variables) {\n                    return factors.operate(variables);\n                }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 183,col 21)-(line 183,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testLeastSquares2()",
        "snippet": "    @Test\n    public void testLeastSquares2() {\n        final RealMatrix factors\n            = new Array2DRowRealMatrix(new double[][] {\n                    { 1, 0 },\n                    { 0, 1 }\n                }, false);\n        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {\n                public double[] value(double[] variables) {\n                    return factors.operate(variables);\n                }\n            }, new double[] { 2, -3 }, new double[] { 10, 0.1 });\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);\n        PointValuePair optimum =\n            optimizer.optimize(new MaxEval(200),\n                               new ObjectiveFunction(ls),\n                               GoalType.MINIMIZE,\n                               new InitialGuess(new double[] { 10, 10 }),\n                               new NelderMeadSimplex(2));\n        Assert.assertEquals( 2, optimum.getPointRef()[0], 5e-5);\n        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 80);\n        Assert.assertTrue(optimum.getValue() < 1e-6);\n    }\n",
        "begin_line": 200,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 206,col 26)",
            "(line 207,col 9)-(line 211,col 65)",
            "(line 212,col 9)-(line 212,col 68)",
            "(line 213,col 9)-(line 218,col 57)",
            "(line 219,col 9)-(line 219,col 64)",
            "(line 220,col 9)-(line 220,col 64)",
            "(line 221,col 9)-(line 221,col 59)",
            "(line 222,col 9)-(line 222,col 59)",
            "(line 223,col 9)-(line 223,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Anonymous-1ad3e566-69b5-483c-b751-031a447243e0.value(double[])",
        "snippet": "                public double[] value(double[] variables) {\n                    return factors.operate(variables);\n                }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 209,col 21)-(line 209,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testLeastSquares3()",
        "snippet": "    @Test\n    public void testLeastSquares3() {\n        final RealMatrix factors =\n            new Array2DRowRealMatrix(new double[][] {\n                    { 1, 0 },\n                    { 0, 1 }\n                }, false);\n        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {\n                public double[] value(double[] variables) {\n                    return factors.operate(variables);\n                }\n            }, new double[] { 2, -3 }, new Array2DRowRealMatrix(new double [][] {\n                    { 1, 1.2 }, { 1.2, 2 }\n                }));\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(200),\n                                 new ObjectiveFunction(ls),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 10, 10 }),\n                                 new NelderMeadSimplex(2));\n        Assert.assertEquals( 2, optimum.getPointRef()[0], 2e-3);\n        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 80);\n        Assert.assertTrue(optimum.getValue() < 1e-6);\n    }\n",
        "begin_line": 226,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 232,col 26)",
            "(line 233,col 9)-(line 239,col 20)",
            "(line 240,col 9)-(line 240,col 68)",
            "(line 241,col 9)-(line 246,col 59)",
            "(line 247,col 9)-(line 247,col 64)",
            "(line 248,col 9)-(line 248,col 64)",
            "(line 249,col 9)-(line 249,col 59)",
            "(line 250,col 9)-(line 250,col 59)",
            "(line 251,col 9)-(line 251,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Anonymous-dba1aec2-a2bd-4614-abbe-90b2931f854e.value(double[])",
        "snippet": "                public double[] value(double[] variables) {\n                    return factors.operate(variables);\n                }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 21)-(line 235,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaxIterations()",
        "snippet": "    @Test(expected=TooManyEvaluationsException.class)\n    public void testMaxIterations() {\n        Powell powell = new Powell();\n        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);\n        optimizer.optimize(new MaxEval(20),\n                           new ObjectiveFunction(powell),\n                           GoalType.MINIMIZE,\n                           new InitialGuess(new double[] { 3, -1, 0, 1 }),\n                           new NelderMeadSimplex(4));\n    }\n",
        "begin_line": 254,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 37)",
            "(line 257,col 9)-(line 257,col 68)",
            "(line 258,col 9)-(line 262,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.FourExtrema.value(double[])",
        "snippet": "        public double value(double[] variables) {\n            final double x = variables[0];\n            final double y = variables[1];\n            return (x == 0 || y == 0) ? 0 :\n                FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y);\n        }\n",
        "begin_line": 276,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 277,col 13)-(line 277,col 42)",
            "(line 278,col 13)-(line 278,col 42)",
            "(line 279,col 13)-(line 280,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Rosenbrock.Rosenbrock()",
        "snippet": "        public Rosenbrock() {\n            count = 0;\n        }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 288,col 13)-(line 288,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Rosenbrock.value(double[])",
        "snippet": "        public double value(double[] x) {\n            ++count;\n            double a = x[1] - x[0] * x[0];\n            double b = 1.0 - x[0];\n            return 100 * a * a + b * b;\n        }\n",
        "begin_line": 291,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 292,col 13)-(line 292,col 20)",
            "(line 293,col 13)-(line 293,col 42)",
            "(line 294,col 13)-(line 294,col 34)",
            "(line 295,col 13)-(line 295,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Rosenbrock.getCount()",
        "snippet": "        public int getCount() {\n            return count;\n        }\n",
        "begin_line": 298,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 299,col 13)-(line 299,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Powell.Powell()",
        "snippet": "        public Powell() {\n            count = 0;\n        }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 307,col 13)-(line 307,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Powell.value(double[])",
        "snippet": "        public double value(double[] x) {\n            ++count;\n            double a = x[0] + 10 * x[1];\n            double b = x[2] - x[3];\n            double c = x[1] - 2 * x[2];\n            double d = x[0] - x[3];\n            return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;\n        }\n",
        "begin_line": 310,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 311,col 13)-(line 311,col 20)",
            "(line 312,col 13)-(line 312,col 40)",
            "(line 313,col 13)-(line 313,col 35)",
            "(line 314,col 13)-(line 314,col 39)",
            "(line 315,col 13)-(line 315,col 35)",
            "(line 316,col 13)-(line 316,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.Powell.getCount()",
        "snippet": "        public int getCount() {\n            return count;\n        }\n",
        "begin_line": 319,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 320,col 13)-(line 320,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.createOptimizer()",
        "snippet": "    @Override\n    public AbstractLeastSquaresOptimizer createOptimizer() {\n        return new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));\n    }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testConstraintsUnsupported()",
        "snippet": "    @Test(expected=MathUnsupportedOperationException.class)\n    public void testConstraintsUnsupported() {\n        createOptimizer().optimize(new MaxEval(100),\n                                   new Target(new double[] { 2 }),\n                                   new Weight(new double[] { 1 }),\n                                   new InitialGuess(new double[] { 1, 2 }),\n                                   new SimpleBounds(new double[] { -10, 0 },\n                                                    new double[] { 20, 30 }));\n    }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 111,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testMoreEstimatedParametersSimple()",
        "snippet": "    @Override\n    @Test(expected = ConvergenceException.class)\n    public void testMoreEstimatedParametersSimple() {\n        /*\n         * Exception is expected with this optimizer\n         */\n        super.testMoreEstimatedParametersSimple();\n    }\n",
        "begin_line": 114,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testMoreEstimatedParametersUnsorted()",
        "snippet": "    @Override\n    @Test(expected=ConvergenceException.class)\n    public void testMoreEstimatedParametersUnsorted() {\n        /*\n         * Exception is expected with this optimizer\n         */\n        super.testMoreEstimatedParametersUnsorted();\n    }\n",
        "begin_line": 123,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testMaxEvaluations()",
        "snippet": "    @Test(expected=TooManyEvaluationsException.class)\n    public void testMaxEvaluations() throws Exception {\n        CircleVectorial circle = new CircleVectorial();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n\n        GaussNewtonOptimizer optimizer\n            = new GaussNewtonOptimizer(new SimpleVectorValueChecker(1e-30, 1e-30));\n\n        optimizer.optimize(new MaxEval(100),\n                           circle.getModelFunction(),\n                           circle.getModelFunctionJacobian(),\n                           new Target(new double[] { 0, 0, 0, 0, 0 }),\n                           new Weight(new double[] { 1, 1, 1, 1, 1 }),\n                           new InitialGuess(new double[] { 98.680, 47.345 }));\n    }\n",
        "begin_line": 132,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 135,col 38)",
            "(line 136,col 9)-(line 136,col 38)",
            "(line 137,col 9)-(line 137,col 38)",
            "(line 138,col 9)-(line 138,col 38)",
            "(line 139,col 9)-(line 139,col 38)",
            "(line 141,col 9)-(line 142,col 83)",
            "(line 144,col 9)-(line 149,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testCircleFittingBadInit()",
        "snippet": "    @Override\n    @Test(expected=ConvergenceException.class)\n    public void testCircleFittingBadInit() {\n        /*\n         * This test does not converge with this optimizer.\n         */\n        super.testCircleFittingBadInit();\n    }\n",
        "begin_line": 152,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testHahn1()",
        "snippet": "    @Override\n    @Test(expected = ConvergenceException.class)\n    public void testHahn1()\n        throws IOException {\n        /*\n         * TODO This test leads to a singular problem with the Gauss-Newton\n         * optimizer. This should be inquired.\n         */\n        super.testHahn1();\n    }\n",
        "begin_line": 161,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.createOptimizer()",
        "snippet": "    @Override\n    public AbstractLeastSquaresOptimizer createOptimizer() {\n        return new LevenbergMarquardtOptimizer();\n    }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testConstraintsUnsupported()",
        "snippet": "    @Test(expected=MathUnsupportedOperationException.class)\n    public void testConstraintsUnsupported() {\n        createOptimizer().optimize(new MaxEval(100),\n                                   new Target(new double[] { 2 }),\n                                   new Weight(new double[] { 1 }),\n                                   new InitialGuess(new double[] { 1, 2 }),\n                                   new SimpleBounds(new double[] { -10, 0 },\n                                                    new double[] { 20, 30 }));\n    }\n",
        "begin_line": 114,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 121,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testNonInvertible()",
        "snippet": "    @Override\n    @Test(expected=SingularMatrixException.class)\n    public void testNonInvertible() {\n        /*\n         * Overrides the method from parent class, since the default singularity\n         * threshold (1e-14) does not trigger the expected exception.\n         */\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1, 2, -3 },\n                {  2, 1,  3 },\n                { -3, 0, -9 }\n        }, new double[] { 1, 1, 1 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getModelFunction(),\n                                 problem.getModelFunctionJacobian(),\n                                 problem.getTarget(),\n                                 new Weight(new double[] { 1, 1, 1 }),\n                                 new InitialGuess(new double[] { 0, 0, 0 }));\n        Assert.assertTrue(FastMath.sqrt(optimizer.getTargetSize()) * optimizer.getRMS() > 0.6);\n\n        optimizer.computeCovariances(optimum.getPoint(), 1.5e-14);\n    }\n",
        "begin_line": 124,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 135,col 37)",
            "(line 137,col 9)-(line 137,col 68)",
            "(line 138,col 9)-(line 144,col 77)",
            "(line 145,col 9)-(line 145,col 95)",
            "(line 147,col 9)-(line 147,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testControlParameters()",
        "snippet": "    @Test\n    public void testControlParameters() {\n        CircleVectorial circle = new CircleVectorial();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        checkEstimate(circle.getModelFunction(),\n                      circle.getModelFunctionJacobian(),\n                      0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);\n        checkEstimate(circle.getModelFunction(),\n                      circle.getModelFunctionJacobian(),\n                      0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);\n        checkEstimate(circle.getModelFunction(),\n                      circle.getModelFunctionJacobian(),\n                      0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);\n        circle.addPoint(300, -300);\n        checkEstimate(circle.getModelFunction(),\n                      circle.getModelFunctionJacobian(),\n                      0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);\n    }\n",
        "begin_line": 150,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 55)",
            "(line 153,col 9)-(line 153,col 38)",
            "(line 154,col 9)-(line 154,col 38)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 156,col 38)",
            "(line 157,col 9)-(line 157,col 38)",
            "(line 158,col 9)-(line 160,col 65)",
            "(line 161,col 9)-(line 163,col 64)",
            "(line 164,col 9)-(line 166,col 64)",
            "(line 167,col 9)-(line 167,col 35)",
            "(line 168,col 9)-(line 170,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.checkEstimate(org.apache.commons.math3.optim.nonlinear.vector.ModelFunction, org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian, double, int, double, double, double, boolean)",
        "snippet": "    private void checkEstimate(ModelFunction problem,\n                               ModelFunctionJacobian problemJacobian,\n                               double initialStepBoundFactor, int maxCostEval,\n                               double costRelativeTolerance, double parRelativeTolerance,\n                               double orthoTolerance, boolean shouldFail) {\n        try {\n            LevenbergMarquardtOptimizer optimizer\n                = new LevenbergMarquardtOptimizer(initialStepBoundFactor,\n                                                  costRelativeTolerance,\n                                                  parRelativeTolerance,\n                                                  orthoTolerance,\n                                                  Precision.SAFE_MIN);\n            optimizer.optimize(new MaxEval(maxCostEval),\n                               problem,\n                               problemJacobian,\n                               new Target(new double[] { 0, 0, 0, 0, 0 }),\n                               new Weight(new double[] { 1, 1, 1, 1, 1 }),\n                               new InitialGuess(new double[] { 98.680, 47.345 }));\n            Assert.assertTrue(!shouldFail);\n        } catch (DimensionMismatchException ee) {\n            Assert.assertTrue(shouldFail);\n        } catch (TooManyEvaluationsException ee) {\n            Assert.assertTrue(shouldFail);\n        }\n    }\n",
        "begin_line": 173,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testBevington()",
        "snippet": "    @Test\n    public void testBevington() {\n        final double[][] dataPoints = {\n            // column 1 = times\n            { 15, 30, 45, 60, 75, 90, 105, 120, 135, 150,\n              165, 180, 195, 210, 225, 240, 255, 270, 285, 300,\n              315, 330, 345, 360, 375, 390, 405, 420, 435, 450,\n              465, 480, 495, 510, 525, 540, 555, 570, 585, 600,\n              615, 630, 645, 660, 675, 690, 705, 720, 735, 750,\n              765, 780, 795, 810, 825, 840, 855, 870, 885, },\n            // column 2 = measured counts\n            { 775, 479, 380, 302, 185, 157, 137, 119, 110, 89,\n              74, 61, 66, 68, 48, 54, 51, 46, 55, 29,\n              28, 37, 49, 26, 35, 29, 31, 24, 25, 35,\n              24, 30, 26, 28, 21, 18, 20, 27, 17, 17,\n              14, 17, 24, 11, 22, 17, 12, 10, 13, 16,\n              9, 9, 14, 21, 17, 13, 12, 18, 10, },\n        };\n\n        final BevingtonProblem problem = new BevingtonProblem();\n\n        final int len = dataPoints[0].length;\n        final double[] weights = new double[len];\n        for (int i = 0; i < len; i++) {\n            problem.addPoint(dataPoints[0][i],\n                             dataPoints[1][i]);\n\n            weights[i] = 1 / dataPoints[1][i];\n        }\n\n        final LevenbergMarquardtOptimizer optimizer\n            = new LevenbergMarquardtOptimizer();\n\n        final PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getModelFunction(),\n                                 problem.getModelFunctionJacobian(),\n                                 new Target(dataPoints[1]),\n                                 new Weight(weights),\n                                 new InitialGuess(new double[] { 10, 900, 80, 27, 225 }));\n\n        final double[] solution = optimum.getPoint();\n        final double[] expectedSolution = { 10.4, 958.3, 131.4, 33.9, 205.0 };\n\n        final double[][] covarMatrix = optimizer.computeCovariances(solution, 1e-14);\n        final double[][] expectedCovarMatrix = {\n            { 3.38, -3.69, 27.98, -2.34, -49.24 },\n            { -3.69, 2492.26, 81.89, -69.21, -8.9 },\n            { 27.98, 81.89, 468.99, -44.22, -615.44 },\n            { -2.34, -69.21, -44.22, 6.39, 53.80 },\n            { -49.24, -8.9, -615.44, 53.8, 929.45 }\n        };\n\n        final int numParams = expectedSolution.length;\n\n        // Check that the computed solution is within the reference error range.\n        for (int i = 0; i < numParams; i++) {\n            final double error = FastMath.sqrt(expectedCovarMatrix[i][i]);\n            Assert.assertEquals(\"Parameter \" + i, expectedSolution[i], solution[i], error);\n        }\n\n        // Check that each entry of the computed covariance matrix is within 10%\n        // of the reference matrix entry.\n        for (int i = 0; i < numParams; i++) {\n            for (int j = 0; j < numParams; j++) {\n                Assert.assertEquals(\"Covariance matrix [\" + i + \"][\" + j + \"]\",\n                                    expectedCovarMatrix[i][j],\n                                    covarMatrix[i][j],\n                                    FastMath.abs(0.1 * expectedCovarMatrix[i][j]));\n            }\n        }\n    }\n",
        "begin_line": 206,
        "end_line": 277,
        "comment": "\n     * Non-linear test case: fitting of decay curve (from Chapter 8 of\n     * Bevington's textbook, \"Data reduction and analysis for the physical sciences\").\n     * XXX The expected (\"reference\") values may not be accurate and the tolerance too\n     * relaxed for this test to be currently really useful (the issue is under\n     * investigation).\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 223,col 10)",
            "(line 225,col 9)-(line 225,col 64)",
            "(line 227,col 9)-(line 227,col 45)",
            "(line 228,col 9)-(line 228,col 49)",
            "(line 229,col 9)-(line 234,col 9)",
            "(line 236,col 9)-(line 237,col 48)",
            "(line 239,col 9)-(line 245,col 90)",
            "(line 247,col 9)-(line 247,col 53)",
            "(line 248,col 9)-(line 248,col 78)",
            "(line 250,col 9)-(line 250,col 85)",
            "(line 251,col 9)-(line 257,col 10)",
            "(line 259,col 9)-(line 259,col 54)",
            "(line 262,col 9)-(line 265,col 9)",
            "(line 269,col 9)-(line 276,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testCircleFitting2()",
        "snippet": "    @Test\n    public void testCircleFitting2() {\n        final double xCenter = 123.456;\n        final double yCenter = 654.321;\n        final double xSigma = 10;\n        final double ySigma = 15;\n        final double radius = 111.111;\n        // The test is extremely sensitive to the seed.\n        final long seed = 59421061L;\n        final RandomCirclePointGenerator factory\n            = new RandomCirclePointGenerator(xCenter, yCenter, radius,\n                                             xSigma, ySigma,\n                                             seed);\n        final CircleProblem circle = new CircleProblem(xSigma, ySigma);\n\n        final int numPoints = 10;\n        for (Vector2D p : factory.generate(numPoints)) {\n            circle.addPoint(p.getX(), p.getY());\n        }\n\n        // First guess for the center's coordinates and radius.\n        final double[] init = { 90, 659, 115 };\n\n        final LevenbergMarquardtOptimizer optimizer\n            = new LevenbergMarquardtOptimizer();\n        final PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100),\n                                                                circle.getModelFunction(),\n                                                                circle.getModelFunctionJacobian(),\n                                                                new Target(circle.target()),\n                                                                new Weight(circle.weight()),\n                                                                new InitialGuess(init));\n\n        final double[] paramFound = optimum.getPoint();\n\n        // Retrieve errors estimation.\n        final double[] asymptoticStandardErrorFound = optimizer.computeSigma(paramFound, 1e-14);\n\n        // Check that the parameters are found within the assumed error bars.\n        Assert.assertEquals(xCenter, paramFound[0], asymptoticStandardErrorFound[0]);\n        Assert.assertEquals(yCenter, paramFound[1], asymptoticStandardErrorFound[1]);\n        Assert.assertEquals(radius, paramFound[2], asymptoticStandardErrorFound[2]);\n    }\n",
        "begin_line": 279,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 39)",
            "(line 282,col 9)-(line 282,col 39)",
            "(line 283,col 9)-(line 283,col 33)",
            "(line 284,col 9)-(line 284,col 33)",
            "(line 285,col 9)-(line 285,col 38)",
            "(line 287,col 9)-(line 287,col 36)",
            "(line 288,col 9)-(line 291,col 51)",
            "(line 292,col 9)-(line 292,col 71)",
            "(line 294,col 9)-(line 294,col 33)",
            "(line 295,col 9)-(line 297,col 9)",
            "(line 300,col 9)-(line 300,col 47)",
            "(line 302,col 9)-(line 303,col 48)",
            "(line 304,col 9)-(line 309,col 88)",
            "(line 311,col 9)-(line 311,col 55)",
            "(line 314,col 9)-(line 314,col 96)",
            "(line 317,col 9)-(line 317,col 85)",
            "(line 318,col 9)-(line 318,col 85)",
            "(line 319,col 9)-(line 319,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.QuadraticProblem.QuadraticProblem()",
        "snippet": "        public QuadraticProblem() {\n            x = new ArrayList<Double>();\n            y = new ArrayList<Double>();\n        }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 13)-(line 327,col 40)",
            "(line 328,col 13)-(line 328,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.QuadraticProblem.addPoint(double, double)",
        "snippet": "        public void addPoint(double x, double y) {\n            this.x.add(x);\n            this.y.add(y);\n        }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 13)-(line 332,col 26)",
            "(line 333,col 13)-(line 333,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.QuadraticProblem.getModelFunction()",
        "snippet": "        public ModelFunction getModelFunction() {\n            return new ModelFunction(new MultivariateVectorFunction() {\n                    public double[] value(double[] variables) {\n                        double[] values = new double[x.size()];\n                        for (int i = 0; i < values.length; ++i) {\n                            values[i] = (variables[0] * x.get(i) + variables[1]) * x.get(i) + variables[2];\n                        }\n                        return values;\n                    }\n                });\n        }\n",
        "begin_line": 336,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 337,col 13)-(line 345,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.QuadraticProblem.Anonymous-c2db0bf0-5d32-4408-bcda-d95958af1429.value(double[])",
        "snippet": "                    public double[] value(double[] variables) {\n                        double[] values = new double[x.size()];\n                        for (int i = 0; i < values.length; ++i) {\n                            values[i] = (variables[0] * x.get(i) + variables[1]) * x.get(i) + variables[2];\n                        }\n                        return values;\n                    }\n",
        "begin_line": 338,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 339,col 25)-(line 339,col 63)",
            "(line 340,col 25)-(line 342,col 25)",
            "(line 343,col 25)-(line 343,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.QuadraticProblem.getModelFunctionJacobian()",
        "snippet": "        public ModelFunctionJacobian getModelFunctionJacobian() {\n            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                    public double[][] value(double[] params) {                    \n                        double[][] jacobian = new double[x.size()][3];\n                        for (int i = 0; i < jacobian.length; ++i) {\n                            jacobian[i][0] = x.get(i) * x.get(i);\n                            jacobian[i][1] = x.get(i);\n                            jacobian[i][2] = 1.0;\n                        }\n                        return jacobian;\n                    }\n                });\n        }\n",
        "begin_line": 348,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 349,col 13)-(line 359,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.QuadraticProblem.Anonymous-cef197f2-dbcd-4543-8b56-f8901ec88ad3.value(double[])",
        "snippet": "                    public double[][] value(double[] params) {                    \n                        double[][] jacobian = new double[x.size()][3];\n                        for (int i = 0; i < jacobian.length; ++i) {\n                            jacobian[i][0] = x.get(i) * x.get(i);\n                            jacobian[i][1] = x.get(i);\n                            jacobian[i][2] = 1.0;\n                        }\n                        return jacobian;\n                    }\n",
        "begin_line": 350,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 351,col 25)-(line 351,col 70)",
            "(line 352,col 25)-(line 356,col 25)",
            "(line 357,col 25)-(line 357,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.BevingtonProblem.BevingtonProblem()",
        "snippet": "        public BevingtonProblem() {\n            time = new ArrayList<Double>();\n            count = new ArrayList<Double>();\n        }\n",
        "begin_line": 367,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 368,col 13)-(line 368,col 43)",
            "(line 369,col 13)-(line 369,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.BevingtonProblem.addPoint(double, double)",
        "snippet": "        public void addPoint(double t, double c) {\n            time.add(t);\n            count.add(c);\n        }\n",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 373,col 13)-(line 373,col 24)",
            "(line 374,col 13)-(line 374,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.BevingtonProblem.getModelFunction()",
        "snippet": "        public ModelFunction getModelFunction() {\n            return new ModelFunction(new MultivariateVectorFunction() {\n                    public double[] value(double[] params) {\n                        double[] values = new double[time.size()];\n                        for (int i = 0; i < values.length; ++i) {\n                            final double t = time.get(i);\n                            values[i] = params[0] +\n                                params[1] * Math.exp(-t / params[3]) +\n                                params[2] * Math.exp(-t / params[4]);\n                        }\n                        return values;\n                    }\n                });\n        }\n",
        "begin_line": 377,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 378,col 13)-(line 389,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.BevingtonProblem.Anonymous-54a46be3-25c5-4cc8-8463-cf7c9460a30d.value(double[])",
        "snippet": "                    public double[] value(double[] params) {\n                        double[] values = new double[time.size()];\n                        for (int i = 0; i < values.length; ++i) {\n                            final double t = time.get(i);\n                            values[i] = params[0] +\n                                params[1] * Math.exp(-t / params[3]) +\n                                params[2] * Math.exp(-t / params[4]);\n                        }\n                        return values;\n                    }\n",
        "begin_line": 379,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 380,col 25)-(line 380,col 66)",
            "(line 381,col 25)-(line 386,col 25)",
            "(line 387,col 25)-(line 387,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.BevingtonProblem.getModelFunctionJacobian()",
        "snippet": "        public ModelFunctionJacobian getModelFunctionJacobian() {\n            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                    public double[][] value(double[] params) {\n                        double[][] jacobian = new double[time.size()][5];\n\n                        for (int i = 0; i < jacobian.length; ++i) {\n                            final double t = time.get(i);\n                            jacobian[i][0] = 1;\n\n                            final double p3 =  params[3];\n                            final double p4 =  params[4];\n                            final double tOp3 = t / p3;\n                            final double tOp4 = t / p4;\n                            jacobian[i][1] = Math.exp(-tOp3);\n                            jacobian[i][2] = Math.exp(-tOp4);\n                            jacobian[i][3] = params[1] * Math.exp(-tOp3) * tOp3 / p3;\n                            jacobian[i][4] = params[2] * Math.exp(-tOp4) * tOp4 / p4;\n                        }\n                        return jacobian;\n                    }\n                });\n        }\n",
        "begin_line": 392,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 393,col 13)-(line 412,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.BevingtonProblem.Anonymous-f3d67d3a-9dda-488d-81bb-7c8b96eaf6cd.value(double[])",
        "snippet": "                    public double[][] value(double[] params) {\n                        double[][] jacobian = new double[time.size()][5];\n\n                        for (int i = 0; i < jacobian.length; ++i) {\n                            final double t = time.get(i);\n                            jacobian[i][0] = 1;\n\n                            final double p3 =  params[3];\n                            final double p4 =  params[4];\n                            final double tOp3 = t / p3;\n                            final double tOp4 = t / p4;\n                            jacobian[i][1] = Math.exp(-tOp3);\n                            jacobian[i][2] = Math.exp(-tOp4);\n                            jacobian[i][3] = params[1] * Math.exp(-tOp3) * tOp3 / p3;\n                            jacobian[i][4] = params[2] * Math.exp(-tOp4) * tOp4 / p4;\n                        }\n                        return jacobian;\n                    }\n",
        "begin_line": 394,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 395,col 25)-(line 395,col 73)",
            "(line 397,col 25)-(line 409,col 25)",
            "(line 410,col 25)-(line 410,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.createOptimizer()",
        "snippet": "    public abstract AbstractLeastSquaresOptimizer createOptimizer();\n",
        "begin_line": 101,
        "end_line": 101,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testTrivial()",
        "snippet": "    @Test\n    public void testTrivial() {\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);\n        try {\n            optimizer.guessParametersErrors();\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NumberIsTooSmallException ee) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 103,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 106,col 76)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 109,col 101)",
            "(line 110,col 9)-(line 110,col 60)",
            "(line 111,col 9)-(line 111,col 65)",
            "(line 112,col 9)-(line 112,col 65)",
            "(line 113,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testQRColumnsPermutation()",
        "snippet": "    @Test\n    public void testQRColumnsPermutation() {\n\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },\n                              new double[] { 4.0, 6.0, 1.0 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(4.0, optimum.getValue()[0], 1.0e-10);\n        Assert.assertEquals(6.0, optimum.getValue()[1], 1.0e-10);\n        Assert.assertEquals(1.0, optimum.getValue()[2], 1.0e-10);\n    }\n",
        "begin_line": 121,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 126,col 62)",
            "(line 128,col 9)-(line 128,col 68)",
            "(line 129,col 9)-(line 130,col 110)",
            "(line 131,col 9)-(line 131,col 60)",
            "(line 132,col 9)-(line 132,col 65)",
            "(line 133,col 9)-(line 133,col 65)",
            "(line 134,col 9)-(line 134,col 65)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testNoDependency()",
        "snippet": "    @Test\n    public void testNoDependency() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 2, 0, 0, 0, 0, 0 },\n                { 0, 2, 0, 0, 0, 0 },\n                { 0, 0, 2, 0, 0, 0 },\n                { 0, 0, 0, 2, 0, 0 },\n                { 0, 0, 0, 0, 2, 0 },\n                { 0, 0, 0, 0, 0, 2 }\n        }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },\n                               new double[] { 0, 0, 0, 0, 0, 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        for (int i = 0; i < problem.target.length; ++i) {\n            Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);\n        }\n    }\n",
        "begin_line": 139,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 148,col 58)",
            "(line 149,col 9)-(line 149,col 68)",
            "(line 150,col 9)-(line 152,col 66)",
            "(line 153,col 9)-(line 153,col 60)",
            "(line 154,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testOneSet()",
        "snippet": "    @Test\n    public void testOneSet() {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1,  0, 0 },\n                { -1,  1, 0 },\n                {  0, -1, 1 }\n        }, new double[] { 1, 1, 1});\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);\n    }\n",
        "begin_line": 159,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 166,col 36)",
            "(line 167,col 9)-(line 167,col 68)",
            "(line 168,col 9)-(line 169,col 113)",
            "(line 170,col 9)-(line 170,col 60)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 65)",
            "(line 173,col 9)-(line 173,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testTwoSets()",
        "snippet": "    @Test\n    public void testTwoSets() {\n        double epsilon = 1.0e-7;\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  2,  1,   0,  4,       0, 0 },\n                { -4, -2,   3, -7,       0, 0 },\n                {  4,  1,  -2,  8,       0, 0 },\n                {  0, -3, -12, -1,       0, 0 },\n                {  0,  0,   0,  0, epsilon, 1 },\n                {  0,  0,   0,  0,       1, 1 }\n        }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },\n                               new double[] { 0, 0, 0, 0, 0, 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);\n        Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);\n        Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);\n        Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);\n    }\n",
        "begin_line": 176,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 32)",
            "(line 179,col 9)-(line 186,col 66)",
            "(line 188,col 9)-(line 188,col 68)",
            "(line 189,col 9)-(line 191,col 66)",
            "(line 192,col 9)-(line 192,col 60)",
            "(line 193,col 9)-(line 193,col 66)",
            "(line 194,col 9)-(line 194,col 66)",
            "(line 195,col 9)-(line 195,col 66)",
            "(line 196,col 9)-(line 196,col 66)",
            "(line 197,col 9)-(line 197,col 76)",
            "(line 198,col 9)-(line 198,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testNonInvertible()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testNonInvertible() throws Exception {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1, 2, -3 },\n                {  2, 1,  3 },\n                { -3, 0, -9 }\n        }, new double[] { 1, 1, 1 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n\n        optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n    }\n",
        "begin_line": 201,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 208,col 37)",
            "(line 210,col 9)-(line 210,col 68)",
            "(line 212,col 9)-(line 212,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testIllConditioned()",
        "snippet": "    @Test\n    public void testIllConditioned() {\n        LinearProblem problem1 = new LinearProblem(new double[][] {\n                { 10.0, 7.0,  8.0,  7.0 },\n                {  7.0, 5.0,  6.0,  5.0 },\n                {  8.0, 6.0, 10.0,  9.0 },\n                {  7.0, 5.0,  9.0, 10.0 }\n        }, new double[] { 32, 23, 33, 31 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum1 =\n            optimizer.optimize(100, problem1, problem1.target, new double[] { 1, 1, 1, 1 },\n                               new double[] { 0, 1, 2, 3 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);\n        Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);\n        Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);\n\n        LinearProblem problem2 = new LinearProblem(new double[][] {\n                { 10.00, 7.00, 8.10, 7.20 },\n                {  7.08, 5.04, 6.00, 5.00 },\n                {  8.00, 5.98, 9.89, 9.00 },\n                {  6.99, 4.99, 9.00, 9.98 }\n        }, new double[] { 32, 23, 33, 31 });\n        PointVectorValuePair optimum2 =\n            optimizer.optimize(100, problem2, problem2.target, new double[] { 1, 1, 1, 1 },\n                               new double[] { 0, 1, 2, 3 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);\n        Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);\n        Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);\n        Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);\n    }\n",
        "begin_line": 215,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 222,col 44)",
            "(line 223,col 9)-(line 223,col 68)",
            "(line 224,col 9)-(line 226,col 60)",
            "(line 227,col 9)-(line 227,col 60)",
            "(line 228,col 9)-(line 228,col 66)",
            "(line 229,col 9)-(line 229,col 66)",
            "(line 230,col 9)-(line 230,col 66)",
            "(line 231,col 9)-(line 231,col 66)",
            "(line 233,col 9)-(line 238,col 44)",
            "(line 239,col 9)-(line 241,col 60)",
            "(line 242,col 9)-(line 242,col 60)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 67)",
            "(line 245,col 9)-(line 245,col 67)",
            "(line 246,col 9)-(line 246,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testMoreEstimatedParametersSimple()",
        "snippet": "    @Test\n    public void testMoreEstimatedParametersSimple() {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 3.0, 2.0,  0.0, 0.0 },\n                { 0.0, 1.0, -1.0, 1.0 },\n                { 2.0, 0.0,  1.0, 0.0 }\n        }, new double[] { 7.0, 3.0, 5.0 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },\n                new double[] { 7, 6, 5, 4 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n    }\n",
        "begin_line": 249,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 252,col 9)-(line 256,col 43)",
            "(line 258,col 9)-(line 258,col 68)",
            "(line 259,col 9)-(line 260,col 45)",
            "(line 261,col 9)-(line 261,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testMoreEstimatedParametersUnsorted()",
        "snippet": "    @Test\n    public void testMoreEstimatedParametersUnsorted() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },\n                { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },\n                { 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },\n                { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },\n                { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }\n       }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 2, 2, 2, 2, 2, 2 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);\n        Assert.assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);\n        Assert.assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);\n        Assert.assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);\n    }\n",
        "begin_line": 264,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 272,col 54)",
            "(line 274,col 9)-(line 274,col 68)",
            "(line 275,col 9)-(line 277,col 66)",
            "(line 278,col 9)-(line 278,col 60)",
            "(line 279,col 9)-(line 279,col 68)",
            "(line 280,col 9)-(line 280,col 68)",
            "(line 281,col 9)-(line 281,col 68)",
            "(line 282,col 9)-(line 282,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testRedundantEquations()",
        "snippet": "    @Test\n    public void testRedundantEquations() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0,  1.0 },\n                { 1.0, -1.0 },\n                { 1.0,  3.0 }\n        }, new double[] { 3.0, 1.0, 5.0 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },\n                               new double[] { 1, 1 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);\n        Assert.assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);\n    }\n",
        "begin_line": 285,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 291,col 43)",
            "(line 293,col 9)-(line 293,col 68)",
            "(line 294,col 9)-(line 296,col 54)",
            "(line 297,col 9)-(line 297,col 60)",
            "(line 298,col 9)-(line 298,col 68)",
            "(line 299,col 9)-(line 299,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testInconsistentEquations()",
        "snippet": "    @Test\n    public void testInconsistentEquations() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1.0,  1.0 },\n                { 1.0, -1.0 },\n                { 1.0,  3.0 }\n        }, new double[] { 3.0, 1.0, 4.0 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });\n        Assert.assertTrue(optimizer.getRMS() > 0.1);\n    }\n",
        "begin_line": 302,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 308,col 43)",
            "(line 310,col 9)-(line 310,col 68)",
            "(line 311,col 9)-(line 311,col 106)",
            "(line 312,col 9)-(line 312,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testInconsistentSizes1()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testInconsistentSizes1() {\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);\n\n        optimizer.optimize(100, problem, problem.target,\n                           new double[] { 1 },\n                           new double[] { 0, 0 });\n    }\n",
        "begin_line": 315,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 318,col 93)",
            "(line 319,col 9)-(line 319,col 68)",
            "(line 320,col 9)-(line 321,col 107)",
            "(line 322,col 9)-(line 322,col 60)",
            "(line 323,col 9)-(line 323,col 64)",
            "(line 324,col 9)-(line 324,col 64)",
            "(line 326,col 9)-(line 328,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testInconsistentSizes2()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testInconsistentSizes2() {\n        LinearProblem problem =\n            new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });\n        Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n        Assert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);\n\n        optimizer.optimize(100, problem, new double[] { 1 },\n                           new double[] { 1 },\n                           new double[] { 0, 0 });\n    }\n",
        "begin_line": 331,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 334,col 93)",
            "(line 335,col 9)-(line 335,col 68)",
            "(line 336,col 9)-(line 337,col 107)",
            "(line 338,col 9)-(line 338,col 60)",
            "(line 339,col 9)-(line 339,col 64)",
            "(line 340,col 9)-(line 340,col 64)",
            "(line 342,col 9)-(line 344,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testCircleFitting()",
        "snippet": "    @Test\n    public void testCircleFitting() {\n        CircleVectorial circle = new CircleVectorial();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum\n            = optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                                 new double[] { 98.680, 47.345 });\n        Assert.assertTrue(optimizer.getEvaluations() < 10);\n        Assert.assertTrue(optimizer.getJacobianEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        Assert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1.0e-10);\n        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-6);\n        Assert.assertEquals(96.07590211815305, center.getX(),            1.0e-6);\n        Assert.assertEquals(48.13516790438953, center.getY(),            1.0e-6);\n        double[][] cov = optimizer.computeCovariances(optimum.getPoint(), 1e-14);\n        Assert.assertEquals(1.839, cov[0][0], 0.001);\n        Assert.assertEquals(0.731, cov[0][1], 0.001);\n        Assert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        Assert.assertEquals(0.786, cov[1][1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * FastMath.PI; d += 0.01) {\n            circle.addPoint(center.getX() + r * FastMath.cos(d), center.getY() + r * FastMath.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2.0);\n        optimum = optimizer.optimize(100, circle, target, weights, new double[] { 98.680, 47.345 });\n        cov = optimizer.computeCovariances(optimum.getPoint(), 1e-14);\n        Assert.assertEquals(0.0016, cov[0][0], 0.001);\n        Assert.assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n        Assert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        Assert.assertEquals(0.0016, cov[1][1], 0.001);\n    }\n",
        "begin_line": 347,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 55)",
            "(line 350,col 9)-(line 350,col 38)",
            "(line 351,col 9)-(line 351,col 38)",
            "(line 352,col 9)-(line 352,col 38)",
            "(line 353,col 9)-(line 353,col 38)",
            "(line 354,col 9)-(line 354,col 38)",
            "(line 355,col 9)-(line 355,col 68)",
            "(line 356,col 9)-(line 358,col 66)",
            "(line 359,col 9)-(line 359,col 59)",
            "(line 360,col 9)-(line 360,col 67)",
            "(line 361,col 9)-(line 361,col 40)",
            "(line 362,col 9)-(line 362,col 94)",
            "(line 363,col 9)-(line 363,col 91)",
            "(line 364,col 9)-(line 364,col 81)",
            "(line 365,col 9)-(line 365,col 81)",
            "(line 366,col 9)-(line 366,col 81)",
            "(line 367,col 9)-(line 367,col 81)",
            "(line 368,col 9)-(line 368,col 53)",
            "(line 369,col 9)-(line 369,col 53)",
            "(line 370,col 9)-(line 370,col 59)",
            "(line 371,col 9)-(line 371,col 53)",
            "(line 374,col 9)-(line 374,col 45)",
            "(line 375,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 52)",
            "(line 379,col 9)-(line 379,col 33)",
            "(line 380,col 9)-(line 380,col 53)",
            "(line 381,col 9)-(line 381,col 34)",
            "(line 382,col 9)-(line 382,col 100)",
            "(line 383,col 9)-(line 383,col 70)",
            "(line 384,col 9)-(line 384,col 54)",
            "(line 385,col 9)-(line 385,col 55)",
            "(line 386,col 9)-(line 386,col 59)",
            "(line 387,col 9)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testCircleFittingBadInit()",
        "snippet": "    @Test\n    public void testCircleFittingBadInit() {\n        CircleVectorial circle = new CircleVectorial();\n        double[][] points = circlePoints;\n        double[] target = new double[points.length];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[points.length];\n        Arrays.fill(weights, 2.0);\n        for (int i = 0; i < points.length; ++i) {\n            circle.addPoint(points[i][0], points[i][1]);\n        }\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum\n            = optimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });\n        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        Assert.assertTrue(optimizer.getEvaluations() < 25);\n        Assert.assertTrue(optimizer.getJacobianEvaluations() < 20);\n        Assert.assertEquals( 0.043, optimizer.getRMS(), 1.0e-3);\n        Assert.assertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);\n        Assert.assertEquals(-0.151738,  center.getX(),            1.0e-6);\n        Assert.assertEquals( 0.2075001, center.getY(),            1.0e-6);\n    }\n",
        "begin_line": 390,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 55)",
            "(line 393,col 9)-(line 393,col 41)",
            "(line 394,col 9)-(line 394,col 52)",
            "(line 395,col 9)-(line 395,col 33)",
            "(line 396,col 9)-(line 396,col 53)",
            "(line 397,col 9)-(line 397,col 34)",
            "(line 398,col 9)-(line 400,col 9)",
            "(line 401,col 9)-(line 401,col 68)",
            "(line 402,col 9)-(line 403,col 90)",
            "(line 404,col 9)-(line 404,col 91)",
            "(line 405,col 9)-(line 405,col 59)",
            "(line 406,col 9)-(line 406,col 67)",
            "(line 407,col 9)-(line 407,col 64)",
            "(line 408,col 9)-(line 408,col 74)",
            "(line 409,col 9)-(line 409,col 74)",
            "(line 410,col 9)-(line 410,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testCircleFittingGoodInit()",
        "snippet": "    @Test\n    public void testCircleFittingGoodInit() {\n        CircleVectorial circle = new CircleVectorial();\n        double[][] points = circlePoints;\n        double[] target = new double[points.length];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[points.length];\n        Arrays.fill(weights, 2.0);\n        for (int i = 0; i < points.length; ++i) {\n            circle.addPoint(points[i][0], points[i][1]);\n        }\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(100, circle, target, weights, new double[] { 0, 0 });\n        Assert.assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1.0e-6);\n        Assert.assertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1.0e-6);\n        Assert.assertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);\n    }\n",
        "begin_line": 413,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 55)",
            "(line 416,col 9)-(line 416,col 41)",
            "(line 417,col 9)-(line 417,col 52)",
            "(line 418,col 9)-(line 418,col 33)",
            "(line 419,col 9)-(line 419,col 53)",
            "(line 420,col 9)-(line 420,col 34)",
            "(line 421,col 9)-(line 423,col 9)",
            "(line 424,col 9)-(line 424,col 68)",
            "(line 425,col 9)-(line 426,col 84)",
            "(line 427,col 9)-(line 427,col 83)",
            "(line 428,col 9)-(line 428,col 83)",
            "(line 429,col 9)-(line 429,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "doTestStRD(StatisticalReferenceDataset, double, double)",
        "snippet": "    public void doTestStRD(final StatisticalReferenceDataset dataset,\n        final double errParams, final double errParamsSd) {\n        final AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        final double[] w = new double[dataset.getNumObservations()];\n        Arrays.fill(w, 1.0);\n\n        final double[][] data = dataset.getData();\n        final double[] initial = dataset.getStartingPoint(0);\n        final MultivariateDifferentiableVectorFunction problem;\n        problem = dataset.getLeastSquaresProblem();\n        final PointVectorValuePair optimum;\n        optimum = optimizer.optimize(100, problem, data[1], w, initial);\n\n        final double[] actual = optimum.getPoint();\n        for (int i = 0; i < actual.length; i++) {\n            double expected = dataset.getParameter(i);\n            double delta = FastMath.abs(errParams * expected);\n            Assert.assertEquals(dataset.getName() + \", param #\" + i,\n                                expected, actual[i], delta);\n        }\n    }\n",
        "begin_line": 464,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 74)",
            "(line 467,col 9)-(line 467,col 68)",
            "(line 468,col 9)-(line 468,col 28)",
            "(line 470,col 9)-(line 470,col 50)",
            "(line 471,col 9)-(line 471,col 61)",
            "(line 472,col 9)-(line 472,col 63)",
            "(line 473,col 9)-(line 473,col 51)",
            "(line 474,col 9)-(line 474,col 43)",
            "(line 475,col 9)-(line 475,col 72)",
            "(line 477,col 9)-(line 477,col 51)",
            "(line 478,col 9)-(line 483,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testKirby2()",
        "snippet": "    @Test\n    public void testKirby2() throws IOException {\n        doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(), 1E-7, 1E-7);\n    }\n",
        "begin_line": 486,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 488,col 9)-(line 488,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.testHahn1()",
        "snippet": "    @Test\n    public void testHahn1() throws IOException {\n        doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), 1E-7, 1E-4);\n    }\n",
        "begin_line": 491,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.LinearProblem(double[][], double[])",
        "snippet": "        public LinearProblem(double[][] factors, double[] target) {\n            this.factors = new BlockRealMatrix(factors);\n            this.target  = target;\n        }\n",
        "begin_line": 501,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 502,col 13)-(line 502,col 56)",
            "(line 503,col 13)-(line 503,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.value(double[])",
        "snippet": "        public double[] value(double[] variables) {\n            return factors.operate(variables);\n        }\n",
        "begin_line": 506,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 507,col 13)-(line 507,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])",
        "snippet": "        public DerivativeStructure[] value(DerivativeStructure[] variables) {\n            DerivativeStructure[] value = new DerivativeStructure[factors.getRowDimension()];\n            for (int i = 0; i < value.length; ++i) {\n                value[i] = variables[0].getField().getZero();\n                for (int j = 0; j < factors.getColumnDimension(); ++j) {\n                    value[i] = value[i].add(variables[j].multiply(factors.getEntry(i, j)));\n                }\n                \n            }\n            return value;\n        }\n",
        "begin_line": 510,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 511,col 13)-(line 511,col 93)",
            "(line 512,col 13)-(line 518,col 13)",
            "(line 519,col 13)-(line 519,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.createOptimizer()",
        "snippet": "    public abstract AbstractLeastSquaresOptimizer createOptimizer();\n",
        "begin_line": 106,
        "end_line": 106,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations()",
        "snippet": "    @Test\n    public void testGetIterations() {\n        AbstractLeastSquaresOptimizer optim = createOptimizer();\n        optim.optimize(new MaxEval(100), new Target(new double[] { 1 }),\n                       new Weight(new double[] { 1 }),\n                       new InitialGuess(new double[] { 3 }),\n                       new ModelFunction(new MultivariateVectorFunction() {\n                               @Override\n                               public double[] value(double[] point) {\n                                   return new double[] {\n                                       FastMath.pow(point[0], 4)\n                                   };\n                               }\n                           }),\n                       new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                               @Override\n                               public double[][] value(double[] point) {\n                                   return new double[][] {\n                                       { 0.25 * FastMath.pow(point[0], 3) }\n                                   };\n                               }\n                           }));\n\n        Assert.assertTrue(optim.getIterations() > 0);\n    }\n",
        "begin_line": 108,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 64)",
            "(line 111,col 9)-(line 129,col 31)",
            "(line 131,col 9)-(line 131,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.Anonymous-b62a6db5-6510-4a4a-9243-c10dcab4cbc8.value(double[])",
        "snippet": "                               @Override\n                               public double[] value(double[] point) {\n                                   return new double[] {\n                                       FastMath.pow(point[0], 4)\n                                   };\n                               }\n",
        "begin_line": 115,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 117,col 36)-(line 119,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.Anonymous-4331b20e-c2f3-41a9-906e-bfc7889bbbd3.value(double[])",
        "snippet": "                               @Override\n                               public double[][] value(double[] point) {\n                                   return new double[][] {\n                                       { 0.25 * FastMath.pow(point[0], 3) }\n                                   };\n                               }\n",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 125,col 36)-(line 127,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testTrivial()",
        "snippet": "    @Test\n    public void testTrivial() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1 }),\n                               new InitialGuess(new double[] { 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(1.5, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(3.0, optimum.getValue()[0], 1e-10);\n    }\n",
        "begin_line": 134,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 137,col 78)",
            "(line 138,col 9)-(line 138,col 68)",
            "(line 139,col 9)-(line 145,col 69)",
            "(line 146,col 9)-(line 146,col 58)",
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 148,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testQRColumnsPermutation()",
        "snippet": "    @Test\n    public void testQRColumnsPermutation() {\n\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 1, -1 }, { 0, 2 }, { 1, -2 } },\n                                new double[] { 4, 6, 1 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1, 1 }),\n                               new InitialGuess(new double[] { 0, 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(7, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(3, optimum.getPoint()[1], 1e-10);\n        Assert.assertEquals(4, optimum.getValue()[0], 1e-10);\n        Assert.assertEquals(6, optimum.getValue()[1], 1e-10);\n        Assert.assertEquals(1, optimum.getValue()[2], 1e-10);\n    }\n",
        "begin_line": 151,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 156,col 58)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 165,col 72)",
            "(line 166,col 9)-(line 166,col 58)",
            "(line 167,col 9)-(line 167,col 61)",
            "(line 168,col 9)-(line 168,col 61)",
            "(line 169,col 9)-(line 169,col 61)",
            "(line 170,col 9)-(line 170,col 61)",
            "(line 171,col 9)-(line 171,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testNoDependency()",
        "snippet": "    @Test\n    public void testNoDependency() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 2, 0, 0, 0, 0, 0 },\n                { 0, 2, 0, 0, 0, 0 },\n                { 0, 0, 2, 0, 0, 0 },\n                { 0, 0, 0, 2, 0, 0 },\n                { 0, 0, 0, 0, 2, 0 },\n                { 0, 0, 0, 0, 0, 2 }\n        }, new double[] { 0, 1.1, 2.2, 3.3, 4.4, 5.5 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1, 1, 1, 1, 1 }),\n                               new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        for (int i = 0; i < problem.target.length; ++i) {\n            Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1e-10);\n        }\n    }\n",
        "begin_line": 174,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 183,col 56)",
            "(line 184,col 9)-(line 184,col 68)",
            "(line 185,col 9)-(line 191,col 84)",
            "(line 192,col 9)-(line 192,col 58)",
            "(line 193,col 9)-(line 195,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testOneSet()",
        "snippet": "    @Test\n    public void testOneSet() {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1,  0, 0 },\n                { -1,  1, 0 },\n                {  0, -1, 1 }\n        }, new double[] { 1, 1, 1});\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1, 1 }),\n                               new InitialGuess(new double[] { 0, 0, 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(1, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(2, optimum.getPoint()[1], 1e-10);\n        Assert.assertEquals(3, optimum.getPoint()[2], 1e-10);\n    }\n",
        "begin_line": 198,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 205,col 36)",
            "(line 206,col 9)-(line 206,col 68)",
            "(line 207,col 9)-(line 213,col 75)",
            "(line 214,col 9)-(line 214,col 58)",
            "(line 215,col 9)-(line 215,col 61)",
            "(line 216,col 9)-(line 216,col 61)",
            "(line 217,col 9)-(line 217,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testTwoSets()",
        "snippet": "    @Test\n    public void testTwoSets() {\n        double epsilon = 1e-7;\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  2,  1,   0,  4,       0, 0 },\n                { -4, -2,   3, -7,       0, 0 },\n                {  4,  1,  -2,  8,       0, 0 },\n                {  0, -3, -12, -1,       0, 0 },\n                {  0,  0,   0,  0, epsilon, 1 },\n                {  0,  0,   0,  0,       1, 1 }\n        }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1, 1, 1, 1, 1 }),\n                               new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(3, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(4, optimum.getPoint()[1], 1e-10);\n        Assert.assertEquals(-1, optimum.getPoint()[2], 1e-10);\n        Assert.assertEquals(-2, optimum.getPoint()[3], 1e-10);\n        Assert.assertEquals(1 + epsilon, optimum.getPoint()[4], 1e-10);\n        Assert.assertEquals(1 - epsilon, optimum.getPoint()[5], 1e-10);\n    }\n",
        "begin_line": 220,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 30)",
            "(line 223,col 9)-(line 230,col 66)",
            "(line 232,col 9)-(line 232,col 68)",
            "(line 233,col 9)-(line 239,col 84)",
            "(line 240,col 9)-(line 240,col 58)",
            "(line 241,col 9)-(line 241,col 61)",
            "(line 242,col 9)-(line 242,col 61)",
            "(line 243,col 9)-(line 243,col 62)",
            "(line 244,col 9)-(line 244,col 62)",
            "(line 245,col 9)-(line 245,col 71)",
            "(line 246,col 9)-(line 246,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testNonInvertible()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testNonInvertible() throws Exception {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                {  1, 2, -3 },\n                {  2, 1,  3 },\n                { -3, 0, -9 }\n        }, new double[] { 1, 1, 1 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n\n        optimizer.optimize(new MaxEval(100),\n                           problem.getModelFunction(),\n                           problem.getModelFunctionJacobian(),\n                           problem.getTarget(),\n                           new Weight(new double[] { 1, 1, 1 }),\n                           new InitialGuess(new double[] { 0, 0, 0 }));\n    }\n",
        "begin_line": 249,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 252,col 9)-(line 256,col 37)",
            "(line 258,col 9)-(line 258,col 68)",
            "(line 260,col 9)-(line 265,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testIllConditioned()",
        "snippet": "    @Test\n    public void testIllConditioned() {\n        LinearProblem problem1 = new LinearProblem(new double[][] {\n                { 10, 7,  8,  7 },\n                {  7, 5,  6,  5 },\n                {  8, 6, 10,  9 },\n                {  7, 5,  9, 10 }\n        }, new double[] { 32, 23, 33, 31 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum1 =\n            optimizer.optimize(new MaxEval(100),\n                               problem1.getModelFunction(),\n                               problem1.getModelFunctionJacobian(),\n                               problem1.getTarget(),\n                               new Weight(new double[] { 1, 1, 1, 1 }),\n                               new InitialGuess(new double[] { 0, 1, 2, 3 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(1, optimum1.getPoint()[0], 1e-10);\n        Assert.assertEquals(1, optimum1.getPoint()[1], 1e-10);\n        Assert.assertEquals(1, optimum1.getPoint()[2], 1e-10);\n        Assert.assertEquals(1, optimum1.getPoint()[3], 1e-10);\n\n        LinearProblem problem2 = new LinearProblem(new double[][] {\n                { 10.00, 7.00, 8.10, 7.20 },\n                {  7.08, 5.04, 6.00, 5.00 },\n                {  8.00, 5.98, 9.89, 9.00 },\n                {  6.99, 4.99, 9.00, 9.98 }\n        }, new double[] { 32, 23, 33, 31 });\n        PointVectorValuePair optimum2 =\n            optimizer.optimize(new MaxEval(100),\n                               problem2.getModelFunction(),\n                               problem2.getModelFunctionJacobian(),\n                               problem2.getTarget(), \n                               new Weight(new double[] { 1, 1, 1, 1 }),\n                               new InitialGuess(new double[] { 0, 1, 2, 3 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(-81, optimum2.getPoint()[0], 1e-8);\n        Assert.assertEquals(137, optimum2.getPoint()[1], 1e-8);\n        Assert.assertEquals(-34, optimum2.getPoint()[2], 1e-8);\n        Assert.assertEquals( 22, optimum2.getPoint()[3], 1e-8);\n    }\n",
        "begin_line": 268,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 275,col 44)",
            "(line 276,col 9)-(line 276,col 68)",
            "(line 277,col 9)-(line 283,col 78)",
            "(line 284,col 9)-(line 284,col 58)",
            "(line 285,col 9)-(line 285,col 62)",
            "(line 286,col 9)-(line 286,col 62)",
            "(line 287,col 9)-(line 287,col 62)",
            "(line 288,col 9)-(line 288,col 62)",
            "(line 290,col 9)-(line 295,col 44)",
            "(line 296,col 9)-(line 302,col 78)",
            "(line 303,col 9)-(line 303,col 58)",
            "(line 304,col 9)-(line 304,col 63)",
            "(line 305,col 9)-(line 305,col 63)",
            "(line 306,col 9)-(line 306,col 63)",
            "(line 307,col 9)-(line 307,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testMoreEstimatedParametersSimple()",
        "snippet": "    @Test\n    public void testMoreEstimatedParametersSimple() {\n\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 3, 2,  0, 0 },\n                { 0, 1, -1, 1 },\n                { 2, 0,  1, 0 }\n        }, new double[] { 7, 3, 5 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        optimizer.optimize(new MaxEval(100),\n                           problem.getModelFunction(),\n                           problem.getModelFunctionJacobian(),\n                           problem.getTarget(),\n                           new Weight(new double[] { 1, 1, 1 }),\n                           new InitialGuess(new double[] { 7, 6, 5, 4 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n    }\n",
        "begin_line": 310,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 317,col 37)",
            "(line 319,col 9)-(line 319,col 68)",
            "(line 320,col 9)-(line 325,col 74)",
            "(line 326,col 9)-(line 326,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testMoreEstimatedParametersUnsorted()",
        "snippet": "    @Test\n    public void testMoreEstimatedParametersUnsorted() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1, 1,  0,  0, 0,  0 },\n                { 0, 0,  1,  1, 1,  0 },\n                { 0, 0,  0,  0, 1, -1 },\n                { 0, 0, -1,  1, 0,  1 },\n                { 0, 0,  0, -1, 1,  0 }\n       }, new double[] { 3, 12, -1, 7, 1 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1, 1, 1, 1 }),\n                               new InitialGuess(new double[] { 2, 2, 2, 2, 2, 2 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(3, optimum.getPointRef()[2], 1e-10);\n        Assert.assertEquals(4, optimum.getPointRef()[3], 1e-10);\n        Assert.assertEquals(5, optimum.getPointRef()[4], 1e-10);\n        Assert.assertEquals(6, optimum.getPointRef()[5], 1e-10);\n    }\n",
        "begin_line": 329,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 337,col 44)",
            "(line 339,col 9)-(line 339,col 68)",
            "(line 340,col 9)-(line 346,col 84)",
            "(line 347,col 9)-(line 347,col 58)",
            "(line 348,col 9)-(line 348,col 64)",
            "(line 349,col 9)-(line 349,col 64)",
            "(line 350,col 9)-(line 350,col 64)",
            "(line 351,col 9)-(line 351,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testRedundantEquations()",
        "snippet": "    @Test\n    public void testRedundantEquations() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1,  1 },\n                { 1, -1 },\n                { 1,  3 }\n        }, new double[] { 3, 1, 5 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1, 1 }),\n                               new InitialGuess(new double[] { 1, 1 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(2, optimum.getPointRef()[0], 1e-10);\n        Assert.assertEquals(1, optimum.getPointRef()[1], 1e-10);\n    }\n",
        "begin_line": 354,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 356,col 9)-(line 360,col 37)",
            "(line 362,col 9)-(line 362,col 68)",
            "(line 363,col 9)-(line 369,col 72)",
            "(line 370,col 9)-(line 370,col 58)",
            "(line 371,col 9)-(line 371,col 64)",
            "(line 372,col 9)-(line 372,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testInconsistentEquations()",
        "snippet": "    @Test\n    public void testInconsistentEquations() {\n        LinearProblem problem = new LinearProblem(new double[][] {\n                { 1,  1 },\n                { 1, -1 },\n                { 1,  3 }\n        }, new double[] { 3, 1, 4 });\n\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        optimizer.optimize(new MaxEval(100),\n                           problem.getModelFunction(),\n                           problem.getModelFunctionJacobian(),\n                           problem.getTarget(),\n                           new Weight(new double[] { 1, 1, 1 }),\n                           new InitialGuess(new double[] { 1, 1 }));\n        Assert.assertTrue(optimizer.getRMS() > 0.1);\n    }\n",
        "begin_line": 375,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 381,col 37)",
            "(line 383,col 9)-(line 383,col 68)",
            "(line 384,col 9)-(line 389,col 68)",
            "(line 390,col 9)-(line 390,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testInconsistentSizes1()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testInconsistentSizes1() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } },\n                                new double[] { -1, 1 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1, 1 }),\n                               new InitialGuess(new double[] { 0, 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(-1, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(1, optimum.getPoint()[1], 1e-10);\n\n        optimizer.optimize(new MaxEval(100),\n                           problem.getModelFunction(),\n                           problem.getModelFunctionJacobian(),\n                           problem.getTarget(),\n                           new Weight(new double[] { 1 }),\n                           new InitialGuess(new double[] { 0, 0 }));\n    }\n",
        "begin_line": 393,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 397,col 56)",
            "(line 398,col 9)-(line 398,col 68)",
            "(line 399,col 9)-(line 405,col 72)",
            "(line 406,col 9)-(line 406,col 58)",
            "(line 407,col 9)-(line 407,col 62)",
            "(line 408,col 9)-(line 408,col 61)",
            "(line 410,col 9)-(line 415,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testInconsistentSizes2()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testInconsistentSizes2() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } },\n                                new double[] { -1, 1 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getModelFunction(),\n                                 problem.getModelFunctionJacobian(),\n                                 problem.getTarget(),\n                                 new Weight(new double[] { 1, 1 }),\n                                 new InitialGuess(new double[] { 0, 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(-1, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(1, optimum.getPoint()[1], 1e-10);\n\n        optimizer.optimize(new MaxEval(100),\n                           problem.getModelFunction(),\n                           problem.getModelFunctionJacobian(),\n                           new Target(new double[] { 1 }),\n                           new Weight(new double[] { 1 }),\n                           new InitialGuess(new double[] { 0, 0 }));\n    }\n",
        "begin_line": 418,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 422,col 56)",
            "(line 423,col 9)-(line 423,col 68)",
            "(line 424,col 9)-(line 430,col 74)",
            "(line 431,col 9)-(line 431,col 58)",
            "(line 432,col 9)-(line 432,col 62)",
            "(line 433,col 9)-(line 433,col 61)",
            "(line 435,col 9)-(line 440,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testCircleFitting()",
        "snippet": "    @Test\n    public void testCircleFitting() {\n        CircleVectorial circle = new CircleVectorial();\n        circle.addPoint( 30,  68);\n        circle.addPoint( 50,  -6);\n        circle.addPoint(110, -20);\n        circle.addPoint( 35,  15);\n        circle.addPoint( 45,  97);\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 circle.getModelFunction(),\n                                 circle.getModelFunctionJacobian(),\n                                 new Target(new double[] { 0, 0, 0, 0, 0 }),\n                                 new Weight(new double[] { 1, 1, 1, 1, 1 }),\n                                 new InitialGuess(new double[] { 98.680, 47.345 }));\n        Assert.assertTrue(optimizer.getEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        Assert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1e-10);\n        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1e-6);\n        Assert.assertEquals(96.07590211815305, center.getX(),            1e-6);\n        Assert.assertEquals(48.13516790438953, center.getY(),            1e-6);\n        double[][] cov = optimizer.computeCovariances(optimum.getPoint(), 1e-14);\n        Assert.assertEquals(1.839, cov[0][0], 0.001);\n        Assert.assertEquals(0.731, cov[0][1], 0.001);\n        Assert.assertEquals(cov[0][1], cov[1][0], 1e-14);\n        Assert.assertEquals(0.786, cov[1][1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * FastMath.PI; d += 0.01) {\n            circle.addPoint(center.getX() + r * FastMath.cos(d), center.getY() + r * FastMath.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2);\n        optimum = optimizer.optimize(new MaxEval(100),\n                                     circle.getModelFunction(),\n                                     circle.getModelFunctionJacobian(),\n                                     new Target(target),\n                                     new Weight(weights),\n                                     new InitialGuess(new double[] { 98.680, 47.345 }));\n        cov = optimizer.computeCovariances(optimum.getPoint(), 1e-14);\n        Assert.assertEquals(0.0016, cov[0][0], 0.001);\n        Assert.assertEquals(3.2e-7, cov[0][1], 1e-9);\n        Assert.assertEquals(cov[0][1], cov[1][0], 1e-14);\n        Assert.assertEquals(0.0016, cov[1][1], 0.001);\n    }\n",
        "begin_line": 443,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 55)",
            "(line 446,col 9)-(line 446,col 34)",
            "(line 447,col 9)-(line 447,col 34)",
            "(line 448,col 9)-(line 448,col 34)",
            "(line 449,col 9)-(line 449,col 34)",
            "(line 450,col 9)-(line 450,col 34)",
            "(line 451,col 9)-(line 451,col 68)",
            "(line 452,col 9)-(line 458,col 84)",
            "(line 459,col 9)-(line 459,col 59)",
            "(line 460,col 9)-(line 460,col 40)",
            "(line 461,col 9)-(line 461,col 92)",
            "(line 462,col 9)-(line 462,col 91)",
            "(line 463,col 9)-(line 463,col 79)",
            "(line 464,col 9)-(line 464,col 79)",
            "(line 465,col 9)-(line 465,col 79)",
            "(line 466,col 9)-(line 466,col 81)",
            "(line 467,col 9)-(line 467,col 53)",
            "(line 468,col 9)-(line 468,col 53)",
            "(line 469,col 9)-(line 469,col 57)",
            "(line 470,col 9)-(line 470,col 53)",
            "(line 473,col 9)-(line 473,col 45)",
            "(line 474,col 9)-(line 476,col 9)",
            "(line 477,col 9)-(line 477,col 52)",
            "(line 478,col 9)-(line 478,col 31)",
            "(line 479,col 9)-(line 479,col 53)",
            "(line 480,col 9)-(line 480,col 32)",
            "(line 481,col 9)-(line 486,col 88)",
            "(line 487,col 9)-(line 487,col 70)",
            "(line 488,col 9)-(line 488,col 54)",
            "(line 489,col 9)-(line 489,col 53)",
            "(line 490,col 9)-(line 490,col 57)",
            "(line 491,col 9)-(line 491,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testCircleFittingBadInit()",
        "snippet": "    @Test\n    public void testCircleFittingBadInit() {\n        CircleVectorial circle = new CircleVectorial();\n        double[][] points = circlePoints;\n        double[] target = new double[points.length];\n        Arrays.fill(target, 0);\n        double[] weights = new double[points.length];\n        Arrays.fill(weights, 2);\n        for (int i = 0; i < points.length; ++i) {\n            circle.addPoint(points[i][0], points[i][1]);\n        }\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 circle.getModelFunction(),\n                                 circle.getModelFunctionJacobian(),\n                                 new Target(target),\n                                 new Weight(weights),\n                                 new InitialGuess(new double[] { -12, -12 }));\n        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        Assert.assertTrue(optimizer.getEvaluations() < 25);\n        Assert.assertEquals( 0.043, optimizer.getRMS(), 1e-3);\n        Assert.assertEquals( 0.292235,  circle.getRadius(center), 1e-6);\n        Assert.assertEquals(-0.151738,  center.getX(),            1e-6);\n        Assert.assertEquals( 0.2075001, center.getY(),            1e-6);\n    }\n",
        "begin_line": 494,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 55)",
            "(line 497,col 9)-(line 497,col 41)",
            "(line 498,col 9)-(line 498,col 52)",
            "(line 499,col 9)-(line 499,col 31)",
            "(line 500,col 9)-(line 500,col 53)",
            "(line 501,col 9)-(line 501,col 32)",
            "(line 502,col 9)-(line 504,col 9)",
            "(line 505,col 9)-(line 505,col 68)",
            "(line 506,col 9)-(line 512,col 78)",
            "(line 513,col 9)-(line 513,col 91)",
            "(line 514,col 9)-(line 514,col 59)",
            "(line 515,col 9)-(line 515,col 62)",
            "(line 516,col 9)-(line 516,col 72)",
            "(line 517,col 9)-(line 517,col 72)",
            "(line 518,col 9)-(line 518,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testCircleFittingGoodInit()",
        "snippet": "    @Test\n    public void testCircleFittingGoodInit() {\n        CircleVectorial circle = new CircleVectorial();\n        double[][] points = circlePoints;\n        double[] target = new double[points.length];\n        Arrays.fill(target, 0);\n        double[] weights = new double[points.length];\n        Arrays.fill(weights, 2);\n        for (int i = 0; i < points.length; ++i) {\n            circle.addPoint(points[i][0], points[i][1]);\n        }\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               circle.getModelFunction(),\n                               circle.getModelFunctionJacobian(),\n                               new Target(target),\n                               new Weight(weights),\n                               new InitialGuess(new double[] { 0, 0 }));\n        Assert.assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1e-6);\n        Assert.assertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1e-6);\n        Assert.assertEquals(0.04268731682389561, optimizer.getRMS(),       1e-8);\n    }\n",
        "begin_line": 521,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 523,col 9)-(line 523,col 55)",
            "(line 524,col 9)-(line 524,col 41)",
            "(line 525,col 9)-(line 525,col 52)",
            "(line 526,col 9)-(line 526,col 31)",
            "(line 527,col 9)-(line 527,col 53)",
            "(line 528,col 9)-(line 528,col 32)",
            "(line 529,col 9)-(line 531,col 9)",
            "(line 532,col 9)-(line 532,col 68)",
            "(line 533,col 9)-(line 539,col 72)",
            "(line 540,col 9)-(line 540,col 81)",
            "(line 541,col 9)-(line 541,col 81)",
            "(line 542,col 9)-(line 542,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "doTestStRD(StatisticalReferenceDataset, double, double)",
        "snippet": "    public void doTestStRD(final StatisticalReferenceDataset dataset,\n                           final double errParams,\n                           final double errParamsSd) {\n        final AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        final double[] w = new double[dataset.getNumObservations()];\n        Arrays.fill(w, 1);\n\n        final double[][] data = dataset.getData();\n        final double[] initial = dataset.getStartingPoint(0);\n        final StatisticalReferenceDataset.LeastSquaresProblem problem = dataset.getLeastSquaresProblem();\n        final PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getModelFunction(),\n                                 problem.getModelFunctionJacobian(),\n                                 new Target(data[1]),\n                                 new Weight(w),\n                                 new InitialGuess(initial));\n\n        final double[] actual = optimum.getPoint();\n        for (int i = 0; i < actual.length; i++) {\n            double expected = dataset.getParameter(i);\n            double delta = FastMath.abs(errParams * expected);\n            Assert.assertEquals(dataset.getName() + \", param #\" + i,\n                                expected, actual[i], delta);\n        }\n    }\n",
        "begin_line": 577,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 74)",
            "(line 581,col 9)-(line 581,col 68)",
            "(line 582,col 9)-(line 582,col 26)",
            "(line 584,col 9)-(line 584,col 50)",
            "(line 585,col 9)-(line 585,col 61)",
            "(line 586,col 9)-(line 586,col 105)",
            "(line 587,col 9)-(line 593,col 60)",
            "(line 595,col 9)-(line 595,col 51)",
            "(line 596,col 9)-(line 601,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testKirby2()",
        "snippet": "    @Test\n    public void testKirby2() throws IOException {\n        doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(), 1E-7, 1E-7);\n    }\n",
        "begin_line": 604,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 606,col 9)-(line 606,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testHahn1()",
        "snippet": "    @Test\n    public void testHahn1() throws IOException {\n        doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), 1E-7, 1E-4);\n    }\n",
        "begin_line": 609,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.LinearProblem(double[][], double[])",
        "snippet": "        public LinearProblem(double[][] factors, double[] target) {\n            this.factors = new BlockRealMatrix(factors);\n            this.target  = target;\n        }\n",
        "begin_line": 618,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 619,col 13)-(line 619,col 56)",
            "(line 620,col 13)-(line 620,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.getTarget()",
        "snippet": "        public Target getTarget() {\n            return new Target(target);\n        }\n",
        "begin_line": 623,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 624,col 13)-(line 624,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.getModelFunction()",
        "snippet": "        public ModelFunction getModelFunction() {\n            return new ModelFunction(new MultivariateVectorFunction() {\n                    public double[] value(double[] params) {\n                        return factors.operate(params);\n                    }\n                });\n        }\n",
        "begin_line": 627,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 628,col 13)-(line 632,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.Anonymous-f9249059-9534-47b2-8b98-d1af997b9719.value(double[])",
        "snippet": "                    public double[] value(double[] params) {\n                        return factors.operate(params);\n                    }\n",
        "begin_line": 629,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 630,col 25)-(line 630,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.getModelFunctionJacobian()",
        "snippet": "        public ModelFunctionJacobian getModelFunctionJacobian() {\n            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                    public double[][] value(double[] params) {\n                        return factors.getData();\n                    }\n                });\n        }\n",
        "begin_line": 635,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 636,col 13)-(line 640,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.LinearProblem.Anonymous-d97a5a73-7b8d-4d9e-8cfa-480f4e53874c.value(double[])",
        "snippet": "                    public double[][] value(double[] params) {\n                        return factors.getData();\n                    }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 638,col 25)-(line 638,col 49)"
        ]
    }
]