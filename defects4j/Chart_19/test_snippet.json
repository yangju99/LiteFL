[
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryPlotTests.class);\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.CategoryPlotTests(java.lang.String)",
        "snippet": "    public CategoryPlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testConstructor()",
        "snippet": "    public void testConstructor() {}\n",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAxisRange()",
        "snippet": "    public void testAxisRange() {\n        DefaultCategoryDataset datasetA = new DefaultCategoryDataset();\n        DefaultCategoryDataset datasetB = new DefaultCategoryDataset();\n        datasetB.addValue(50.0, \"R1\", \"C1\");\n        datasetB.addValue(80.0, \"R1\", \"C1\");\n        CategoryPlot plot = new CategoryPlot(datasetA, new CategoryAxis(null), \n                new NumberAxis(null), new LineAndShapeRenderer());\n        plot.setDataset(1, datasetB);\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        Range r = plot.getRangeAxis().getRange();\n        assertEquals(84.0, r.getUpperBound(), 0.00001);\n    }\n",
        "begin_line": 130,
        "end_line": 141,
        "comment": "\n     * A test for a bug reported in the forum.\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 71)",
            "(line 132,col 9)-(line 132,col 71)",
            "(line 133,col 9)-(line 133,col 44)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 135,col 9)-(line 136,col 66)",
            "(line 137,col 9)-(line 137,col 37)",
            "(line 138,col 9)-(line 138,col 56)",
            "(line 139,col 9)-(line 139,col 49)",
            "(line 140,col 9)-(line 140,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n        \n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n        \n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis - no longer a separate field but test anyway...\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxes...\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation - no longer a separate field but test anyway...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // draw shared domain axis...\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeAxis - no longer a separate field but test anyway...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation - no longer a separate field but test anyway...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // datasetToDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // datasetToRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n        \n        // renderer - no longer a separate field but test anyway...\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // renderers...\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // rendering order...\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        // columnRenderingOrder...\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // rowRenderingOrder...\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlinePosition\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // anchorValue\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // range markers - no longer separate fields but test anyway...\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // foreground range markers...\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // background range markers...\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        // annotations\n        plot1.addAnnotation(\n            new CategoryTextAnnotation(\"Text\", \"Category\", 43.0)\n        );\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\", \n                43.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed domain axis space...\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed range axis space...\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n    }\n",
        "begin_line": 146,
        "end_line": 396,
        "comment": "\n     * Test that the equals() method differentiates all the required fields.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 48)",
            "(line 149,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 150,col 40)",
            "(line 151,col 9)-(line 151,col 40)",
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 57)",
            "(line 157,col 9)-(line 157,col 40)",
            "(line 160,col 9)-(line 160,col 73)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 73)",
            "(line 163,col 9)-(line 163,col 40)",
            "(line 166,col 9)-(line 166,col 63)",
            "(line 167,col 9)-(line 167,col 41)",
            "(line 168,col 9)-(line 168,col 63)",
            "(line 169,col 9)-(line 169,col 40)",
            "(line 172,col 9)-(line 172,col 68)",
            "(line 173,col 9)-(line 173,col 41)",
            "(line 174,col 9)-(line 174,col 68)",
            "(line 175,col 9)-(line 175,col 40)",
            "(line 178,col 9)-(line 178,col 63)",
            "(line 179,col 9)-(line 179,col 41)",
            "(line 180,col 9)-(line 180,col 63)",
            "(line 181,col 9)-(line 181,col 40)",
            "(line 184,col 9)-(line 184,col 67)",
            "(line 185,col 9)-(line 185,col 41)",
            "(line 186,col 9)-(line 186,col 67)",
            "(line 187,col 9)-(line 187,col 40)",
            "(line 190,col 9)-(line 190,col 72)",
            "(line 191,col 9)-(line 191,col 41)",
            "(line 192,col 9)-(line 192,col 72)",
            "(line 193,col 9)-(line 193,col 40)",
            "(line 196,col 9)-(line 196,col 57)",
            "(line 197,col 9)-(line 197,col 41)",
            "(line 198,col 9)-(line 198,col 57)",
            "(line 199,col 9)-(line 199,col 40)",
            "(line 202,col 9)-(line 202,col 71)",
            "(line 203,col 9)-(line 203,col 41)",
            "(line 204,col 9)-(line 204,col 71)",
            "(line 205,col 9)-(line 205,col 40)",
            "(line 208,col 9)-(line 208,col 62)",
            "(line 209,col 9)-(line 209,col 41)",
            "(line 210,col 9)-(line 210,col 62)",
            "(line 211,col 9)-(line 211,col 40)",
            "(line 214,col 9)-(line 214,col 66)",
            "(line 215,col 9)-(line 215,col 41)",
            "(line 216,col 9)-(line 216,col 66)",
            "(line 217,col 9)-(line 217,col 40)",
            "(line 220,col 9)-(line 220,col 45)",
            "(line 221,col 9)-(line 221,col 41)",
            "(line 222,col 9)-(line 222,col 45)",
            "(line 223,col 9)-(line 223,col 40)",
            "(line 226,col 9)-(line 226,col 44)",
            "(line 227,col 9)-(line 227,col 41)",
            "(line 228,col 9)-(line 228,col 44)",
            "(line 229,col 9)-(line 229,col 40)",
            "(line 232,col 9)-(line 232,col 46)",
            "(line 233,col 9)-(line 233,col 41)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 40)",
            "(line 238,col 9)-(line 238,col 50)",
            "(line 239,col 9)-(line 239,col 41)",
            "(line 240,col 9)-(line 240,col 50)",
            "(line 241,col 9)-(line 241,col 40)",
            "(line 244,col 9)-(line 244,col 70)",
            "(line 245,col 9)-(line 245,col 41)",
            "(line 246,col 9)-(line 246,col 70)",
            "(line 247,col 9)-(line 247,col 40)",
            "(line 250,col 9)-(line 250,col 60)",
            "(line 251,col 9)-(line 251,col 41)",
            "(line 252,col 9)-(line 252,col 60)",
            "(line 253,col 9)-(line 253,col 40)",
            "(line 256,col 9)-(line 256,col 57)",
            "(line 257,col 9)-(line 257,col 41)",
            "(line 258,col 9)-(line 258,col 57)",
            "(line 259,col 9)-(line 259,col 40)",
            "(line 262,col 9)-(line 262,col 46)",
            "(line 263,col 9)-(line 263,col 41)",
            "(line 264,col 9)-(line 264,col 46)",
            "(line 265,col 9)-(line 265,col 40)",
            "(line 268,col 9)-(line 268,col 60)",
            "(line 269,col 9)-(line 269,col 41)",
            "(line 270,col 9)-(line 270,col 60)",
            "(line 271,col 9)-(line 271,col 40)",
            "(line 274,col 9)-(line 274,col 46)",
            "(line 275,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 41)",
            "(line 277,col 9)-(line 277,col 46)",
            "(line 278,col 9)-(line 278,col 40)",
            "(line 281,col 9)-(line 282,col 43)",
            "(line 283,col 9)-(line 283,col 41)",
            "(line 284,col 9)-(line 285,col 43)",
            "(line 286,col 9)-(line 286,col 40)",
            "(line 289,col 9)-(line 289,col 46)",
            "(line 290,col 9)-(line 290,col 41)",
            "(line 291,col 9)-(line 291,col 46)",
            "(line 292,col 9)-(line 292,col 40)",
            "(line 295,col 9)-(line 295,col 45)",
            "(line 296,col 9)-(line 296,col 41)",
            "(line 297,col 9)-(line 297,col 45)",
            "(line 298,col 9)-(line 298,col 40)",
            "(line 301,col 9)-(line 302,col 43)",
            "(line 303,col 9)-(line 303,col 41)",
            "(line 304,col 9)-(line 305,col 43)",
            "(line 306,col 9)-(line 306,col 40)",
            "(line 309,col 9)-(line 309,col 36)",
            "(line 310,col 9)-(line 310,col 41)",
            "(line 311,col 9)-(line 311,col 36)",
            "(line 312,col 9)-(line 312,col 40)",
            "(line 315,col 9)-(line 315,col 45)",
            "(line 316,col 9)-(line 316,col 41)",
            "(line 317,col 9)-(line 317,col 45)",
            "(line 318,col 9)-(line 318,col 40)",
            "(line 321,col 9)-(line 321,col 44)",
            "(line 322,col 9)-(line 322,col 41)",
            "(line 323,col 9)-(line 323,col 44)",
            "(line 324,col 9)-(line 324,col 40)",
            "(line 327,col 9)-(line 327,col 46)",
            "(line 328,col 9)-(line 328,col 41)",
            "(line 329,col 9)-(line 329,col 46)",
            "(line 330,col 9)-(line 330,col 40)",
            "(line 333,col 9)-(line 334,col 43)",
            "(line 335,col 9)-(line 335,col 41)",
            "(line 336,col 9)-(line 337,col 43)",
            "(line 338,col 9)-(line 338,col 40)",
            "(line 341,col 9)-(line 341,col 51)",
            "(line 342,col 9)-(line 342,col 41)",
            "(line 343,col 9)-(line 343,col 51)",
            "(line 344,col 9)-(line 344,col 40)",
            "(line 347,col 9)-(line 347,col 69)",
            "(line 348,col 9)-(line 348,col 41)",
            "(line 349,col 9)-(line 349,col 69)",
            "(line 350,col 9)-(line 350,col 40)",
            "(line 352,col 9)-(line 352,col 69)",
            "(line 353,col 9)-(line 353,col 41)",
            "(line 354,col 9)-(line 354,col 69)",
            "(line 355,col 9)-(line 355,col 40)",
            "(line 358,col 9)-(line 358,col 72)",
            "(line 359,col 9)-(line 359,col 41)",
            "(line 360,col 9)-(line 360,col 72)",
            "(line 361,col 9)-(line 361,col 40)",
            "(line 364,col 9)-(line 364,col 72)",
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 366,col 72)",
            "(line 367,col 9)-(line 367,col 40)",
            "(line 370,col 9)-(line 372,col 10)",
            "(line 373,col 9)-(line 373,col 41)",
            "(line 374,col 9)-(line 375,col 23)",
            "(line 376,col 9)-(line 376,col 40)",
            "(line 379,col 9)-(line 379,col 27)",
            "(line 380,col 9)-(line 380,col 41)",
            "(line 381,col 9)-(line 381,col 27)",
            "(line 382,col 9)-(line 382,col 40)",
            "(line 385,col 9)-(line 385,col 55)",
            "(line 386,col 9)-(line 386,col 41)",
            "(line 387,col 9)-(line 387,col 55)",
            "(line 388,col 9)-(line 388,col 40)",
            "(line 391,col 9)-(line 391,col 54)",
            "(line 392,col 9)-(line 392,col 41)",
            "(line 393,col 9)-(line 393,col 54)",
            "(line 394,col 9)-(line 394,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryPlot p1 = new CategoryPlot();\n        p1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        CategoryPlot p2 = null;\n        try {\n            p2 = (CategoryPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 401,
        "end_line": 416,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 45)",
            "(line 403,col 9)-(line 404,col 43)",
            "(line 405,col 9)-(line 405,col 31)",
            "(line 406,col 9)-(line 412,col 9)",
            "(line 413,col 9)-(line 413,col 29)",
            "(line 414,col 9)-(line 414,col 51)",
            "(line 415,col 9)-(line 415,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.HORIZONTAL);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 421,
        "end_line": 446,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 70)",
            "(line 424,col 9)-(line 424,col 61)",
            "(line 425,col 9)-(line 425,col 55)",
            "(line 426,col 9)-(line 426,col 49)",
            "(line 427,col 9)-(line 428,col 26)",
            "(line 429,col 9)-(line 429,col 54)",
            "(line 430,col 9)-(line 430,col 31)",
            "(line 431,col 9)-(line 444,col 9)",
            "(line 445,col 9)-(line 445,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        DefaultCategoryDataset data = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.VERTICAL);\n        CategoryPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 451,
        "end_line": 478,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 67)",
            "(line 454,col 9)-(line 454,col 61)",
            "(line 455,col 9)-(line 455,col 55)",
            "(line 456,col 9)-(line 456,col 49)",
            "(line 457,col 9)-(line 458,col 26)",
            "(line 459,col 9)-(line 459,col 52)",
            "(line 460,col 9)-(line 460,col 31)",
            "(line 462,col 9)-(line 475,col 9)",
            "(line 476,col 9)-(line 476,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 483,
        "end_line": 523,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 70)",
            "(line 485,col 9)-(line 494,col 10)",
            "(line 495,col 9)-(line 495,col 33)",
            "(line 498,col 9)-(line 511,col 9)",
            "(line 514,col 9)-(line 514,col 30)",
            "(line 515,col 9)-(line 521,col 9)",
            "(line 522,col 9)-(line 522,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(chart, chart2);\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 528,
        "end_line": 572,
        "comment": "\n     * This test ensures that a plot with markers is serialized correctly.\n     ",
        "child_ranges": [
            "(line 529,col 9)-(line 529,col 70)",
            "(line 530,col 9)-(line 539,col 10)",
            "(line 540,col 9)-(line 540,col 59)",
            "(line 541,col 9)-(line 541,col 68)",
            "(line 542,col 9)-(line 542,col 76)",
            "(line 543,col 9)-(line 543,col 33)",
            "(line 546,col 9)-(line 559,col 9)",
            "(line 560,col 9)-(line 560,col 36)",
            "(line 563,col 9)-(line 563,col 30)",
            "(line 564,col 9)-(line 570,col 9)",
            "(line 571,col 9)-(line 571,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        CategoryAxis domainAxis1 = new CategoryAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        BarRenderer renderer1 = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1, \n                renderer1);\n        CategoryAxis domainAxis2 = new CategoryAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        BarRenderer renderer2 = new BarRenderer();\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n        \n        // now check that all datasets, renderers and axes are being listened \n        // too...\n        CategoryAxis domainAxisA = p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        DefaultCategoryDataset datasetA \n                = (DefaultCategoryDataset) p2.getDataset(0);\n        BarRenderer rendererA = (BarRenderer) p2.getRenderer(0);\n        CategoryAxis domainAxisB = p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        DefaultCategoryDataset datasetB \n                = (DefaultCategoryDataset) p2.getDataset(1);\n        BarRenderer rendererB  = (BarRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }\n",
        "begin_line": 579,
        "end_line": 630,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 71)",
            "(line 581,col 9)-(line 581,col 64)",
            "(line 582,col 9)-(line 582,col 58)",
            "(line 583,col 9)-(line 583,col 50)",
            "(line 584,col 9)-(line 585,col 27)",
            "(line 586,col 9)-(line 586,col 64)",
            "(line 587,col 9)-(line 587,col 58)",
            "(line 588,col 9)-(line 588,col 50)",
            "(line 589,col 9)-(line 589,col 71)",
            "(line 590,col 9)-(line 590,col 35)",
            "(line 591,col 9)-(line 591,col 41)",
            "(line 592,col 9)-(line 592,col 39)",
            "(line 593,col 9)-(line 593,col 37)",
            "(line 594,col 9)-(line 594,col 31)",
            "(line 595,col 9)-(line 607,col 9)",
            "(line 608,col 9)-(line 608,col 29)",
            "(line 612,col 9)-(line 612,col 55)",
            "(line 613,col 9)-(line 613,col 64)",
            "(line 614,col 9)-(line 615,col 60)",
            "(line 616,col 9)-(line 616,col 64)",
            "(line 617,col 9)-(line 617,col 55)",
            "(line 618,col 9)-(line 618,col 64)",
            "(line 619,col 9)-(line 620,col 60)",
            "(line 621,col 9)-(line 621,col 65)",
            "(line 622,col 9)-(line 622,col 45)",
            "(line 623,col 9)-(line 623,col 48)",
            "(line 624,col 9)-(line 624,col 47)",
            "(line 625,col 9)-(line 625,col 46)",
            "(line 626,col 9)-(line 626,col 45)",
            "(line 627,col 9)-(line 627,col 48)",
            "(line 628,col 9)-(line 628,col 47)",
            "(line 629,col 9)-(line 629,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryItemRenderer renderer = new LineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }\n",
        "begin_line": 636,
        "end_line": 646,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 47)",
            "(line 638,col 9)-(line 638,col 67)",
            "(line 639,col 9)-(line 639,col 35)",
            "(line 642,col 9)-(line 642,col 67)",
            "(line 643,col 9)-(line 643,col 41)",
            "(line 644,col 9)-(line 644,col 48)",
            "(line 645,col 9)-(line 645,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1169972()",
        "snippet": "    public void test1169972() {\n        CategoryPlot plot = new CategoryPlot(null, null, null, null);\n        plot.setDomainAxis(new CategoryAxis(\"C\"));\n        plot.setRangeAxis(new NumberAxis(\"Y\"));\n        plot.setRenderer(new BarRenderer());\n        plot.setDataset(new DefaultCategoryDataset());\n        assertTrue(plot != null);\n    }\n",
        "begin_line": 651,
        "end_line": 658,
        "comment": "\n     * A test for bug report 1169972.\n     ",
        "child_ranges": [
            "(line 652,col 9)-(line 652,col 69)",
            "(line 653,col 9)-(line 653,col 50)",
            "(line 654,col 9)-(line 654,col 47)",
            "(line 655,col 9)-(line 655,col 44)",
            "(line 656,col 9)-(line 656,col 54)",
            "(line 657,col 9)-(line 657,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryMarker m = new CategoryMarker(\"C1\");\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }    \n",
        "begin_line": 663,
        "end_line": 673,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 664,col 9)-(line 664,col 47)",
            "(line 665,col 9)-(line 665,col 52)",
            "(line 666,col 9)-(line 666,col 32)",
            "(line 667,col 9)-(line 668,col 45)",
            "(line 669,col 9)-(line 669,col 45)",
            "(line 670,col 9)-(line 670,col 34)",
            "(line 671,col 9)-(line 671,col 78)",
            "(line 672,col 9)-(line 672,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }\n",
        "begin_line": 678,
        "end_line": 688,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 679,col 9)-(line 679,col 47)",
            "(line 680,col 9)-(line 680,col 40)",
            "(line 681,col 9)-(line 681,col 31)",
            "(line 682,col 9)-(line 683,col 45)",
            "(line 684,col 9)-(line 684,col 45)",
            "(line 685,col 9)-(line 685,col 33)",
            "(line 686,col 9)-(line 686,col 78)",
            "(line 687,col 9)-(line 687,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 694,
        "end_line": 714,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 695,col 9)-(line 695,col 70)",
            "(line 696,col 9)-(line 697,col 71)",
            "(line 698,col 9)-(line 698,col 59)",
            "(line 699,col 9)-(line 699,col 56)",
            "(line 700,col 9)-(line 700,col 32)",
            "(line 701,col 9)-(line 712,col 9)",
            "(line 713,col 9)-(line 713,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex()",
        "snippet": "    public void testGetDomainAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getDomainAxisIndex(domainAxis1));\n        assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));\n        plot.setDomainAxis(1, domainAxis2);\n        assertEquals(1, plot.getDomainAxisIndex(domainAxis2));\n        assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 719,
        "end_line": 738,
        "comment": "\n     * Some checks for the getDomainAxisIndex() method.\n     ",
        "child_ranges": [
            "(line 720,col 9)-(line 720,col 58)",
            "(line 721,col 9)-(line 721,col 58)",
            "(line 722,col 9)-(line 722,col 53)",
            "(line 723,col 9)-(line 724,col 22)",
            "(line 725,col 9)-(line 725,col 62)",
            "(line 726,col 9)-(line 726,col 63)",
            "(line 727,col 9)-(line 727,col 43)",
            "(line 728,col 9)-(line 728,col 62)",
            "(line 729,col 9)-(line 729,col 74)",
            "(line 730,col 9)-(line 730,col 29)",
            "(line 731,col 9)-(line 736,col 9)",
            "(line 737,col 9)-(line 737,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex()",
        "snippet": "    public void testGetRangeAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));\n        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));\n        plot.setRangeAxis(1, rangeAxis2);\n        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));\n        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 743,
        "end_line": 762,
        "comment": "\n     * Some checks for the getRangeAxisIndex() method.\n     ",
        "child_ranges": [
            "(line 744,col 9)-(line 744,col 58)",
            "(line 745,col 9)-(line 745,col 53)",
            "(line 746,col 9)-(line 746,col 53)",
            "(line 747,col 9)-(line 748,col 22)",
            "(line 749,col 9)-(line 749,col 60)",
            "(line 750,col 9)-(line 750,col 61)",
            "(line 751,col 9)-(line 751,col 41)",
            "(line 752,col 9)-(line 752,col 60)",
            "(line 753,col 9)-(line 753,col 71)",
            "(line 754,col 9)-(line 754,col 29)",
            "(line 755,col 9)-(line 760,col 9)",
            "(line 761,col 9)-(line 761,col 25)"
        ]
    }
]