[
    {
        "name": "CategoryPlot.getDomainAxisIndex#697",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)",
        "snippet": "    public int getDomainAxisIndex(CategoryAxis axis) {\n        return this.domainAxes.indexOf(axis);\n    }\n",
        "begin_line": 697,
        "end_line": 699,
        "comment": "\r\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\r\n     * is not assigned to the plot.\r\n     * \r\n     * @param axis  the axis (<code>null</code> not permitted).\r\n     * \r\n     * @return The axis index.\r\n     * \r\n     * @see #getDomainAxis(int)\r\n     * @see #getRangeAxisIndex(ValueAxis)\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.getRangeAxisIndex#972",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public int getRangeAxisIndex(ValueAxis axis) {\n        int result = this.rangeAxes.indexOf(axis);\n        if (result < 0) { // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) parent;\n                result = p.getRangeAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 972,
        "end_line": 982,
        "comment": "\r\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\r\n     * is not assigned to the plot.\r\n     *\r\n     * @param axis  the axis (<code>null</code> not permitted).\r\n     *\r\n     * @return The axis index.\r\n     * \r\n     * @see #getRangeAxis(int)\r\n     * @see #getDomainAxisIndex(CategoryAxis)\r\n     * \r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDomainAxis#651",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxis(int, org.jfree.chart.axis.CategoryAxis, boolean)",
        "snippet": "    public void setDomainAxis(int index, CategoryAxis axis, boolean notify) {\n        CategoryAxis existing = (CategoryAxis) this.domainAxes.get(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        if (axis != null) {\n            axis.setPlot(this);\n        }\n        this.domainAxes.set(index, axis);\n        if (axis != null) {\n            axis.configure();\n            axis.addChangeListener(this);\n        }\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 651,
        "end_line": 667,
        "comment": "\r\n     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param axis  the axis (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberAxis.autoAdjustRange#419",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.autoAdjustRange()",
        "snippet": "    protected void autoAdjustRange() {\n\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n            \n            double upper = r.getUpperBound();\n            double lower = r.getLowerBound();\n            if (this.rangeType == RangeType.POSITIVE) {\n                lower = Math.max(0.0, lower);\n                upper = Math.max(0.0, upper);\n            }\n            else if (this.rangeType == RangeType.NEGATIVE) {\n                lower = Math.min(0.0, lower);\n                upper = Math.min(0.0, upper);                   \n            }\n            \n            if (getAutoRangeIncludesZero()) {\n                lower = Math.min(lower, 0.0);\n                upper = Math.max(upper, 0.0);\n            }\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = upper - fixedAutoRange;\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                    if (lower == upper) { // see bug report 1549218\n                        double adjust = Math.abs(lower) / 10.0;\n                        lower = lower - adjust;\n                        upper = upper + adjust;\n                    }\n                    if (this.rangeType == RangeType.POSITIVE) {\n                        if (lower < 0.0) {\n                            upper = upper - lower;\n                            lower = 0.0;\n                        }\n                    }\n                    else if (this.rangeType == RangeType.NEGATIVE) {\n                        if (upper > 0.0) {\n                            lower = lower - upper;\n                            upper = 0.0;\n                        }\n                    }\n                }\n\n                if (getAutoRangeStickyZero()) {\n                    if (upper <= 0.0) {\n                        upper = Math.min(0.0, upper + getUpperMargin() * range);\n                    }\n                    else {\n                        upper = upper + getUpperMargin() * range;\n                    }\n                    if (lower >= 0.0) {\n                        lower = Math.max(0.0, lower - getLowerMargin() * range);\n                    }\n                    else {\n                        lower = lower - getLowerMargin() * range;\n                    }\n                }\n                else {\n                    upper = upper + getUpperMargin() * range;\n                    lower = lower - getLowerMargin() * range;\n                }\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }\n",
        "begin_line": 419,
        "end_line": 505,
        "comment": "\r\n     * Rescales the axis to ensure that all data is visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setDomainAxis#639",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxis(int, org.jfree.chart.axis.CategoryAxis)",
        "snippet": "    public void setDomainAxis(int index, CategoryAxis axis) {\n        setDomainAxis(index, axis, true);\n    }\n",
        "begin_line": 639,
        "end_line": 641,
        "comment": "\r\n     * Sets a domain axis and sends a {@link PlotChangeEvent} to all \r\n     * registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param axis  the axis (<code>null</code> permitted).\r\n     * \r\n     * @see #getDomainAxis(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRangeAxis#925",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis, boolean)",
        "snippet": "    public void setRangeAxis(int index, ValueAxis axis, boolean notify) {\n        ValueAxis existing = (ValueAxis) this.rangeAxes.get(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        if (axis != null) {\n            axis.setPlot(this);\n        }\n        this.rangeAxes.set(index, axis);\n        if (axis != null) {\n            axis.configure();\n            axis.addChangeListener(this);\n        }\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 925,
        "end_line": 941,
        "comment": "\r\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param axis  the axis.\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.getDefaultAutoRange#1026",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getDefaultAutoRange()",
        "snippet": "    public Range getDefaultAutoRange() {\n        return this.defaultAutoRange;\n    }\n",
        "begin_line": 1026,
        "end_line": 1028,
        "comment": "\r\n     * Returns the default auto range.\r\n     * \r\n     * @return The default auto range (never <code>null</code>).\r\n     * \r\n     * @see #setDefaultAutoRange(Range)\r\n     * \r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setRangeAxis#913",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public void setRangeAxis(int index, ValueAxis axis) {\n        setRangeAxis(index, axis, true);\n    }\n",
        "begin_line": 913,
        "end_line": 915,
        "comment": "\r\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param axis  the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.getDataRange#3142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataRange(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        \n        int rangeIndex = this.rangeAxes.indexOf(axis);\n        if (rangeIndex >= 0) {\n            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));\n        }\n        else if (axis == getRangeAxis()) {\n            mappedDatasets.addAll(datasetsMappedToRangeAxis(0));\n        }\n\n        // iterate through the datasets that map to the axis and get the union \n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            CategoryDataset d = (CategoryDataset) iterator.next();\n            CategoryItemRenderer r = getRendererForDataset(d);\n            if (r != null) {\n                result = Range.combine(result, r.findRangeBounds(d));\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 3142,
        "end_line": 3167,
        "comment": "\r\n     * Returns the range of data values that will be plotted against the range \r\n     * axis.  If the dataset is <code>null</code>, this method returns \r\n     * <code>null</code>.\r\n     *\r\n     * @param axis  the axis.\r\n     *\r\n     * @return The data range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.indexOf#158",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.indexOf(java.lang.Object)",
        "snippet": "    protected int indexOf(Object object) {\n        for (int index = 0; index < this.size; index++) {\n            if (this.objects[index] == object) {\n                return (index);\n            }\n        }\n        return -1;\n    }\n",
        "begin_line": 158,
        "end_line": 165,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not in\n     * the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.CategoryPlot#433",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot(org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public CategoryPlot(CategoryDataset dataset,\n                        CategoryAxis domainAxis,\n                        ValueAxis rangeAxis,\n                        CategoryItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n\n        // allocate storage for dataset, axes and renderers\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        \n        this.datasetToDomainAxisMap = new ObjectList();\n        this.datasetToRangeAxisMap = new ObjectList();\n\n        this.renderers = new ObjectList();\n\n        this.datasets = new ObjectList();\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false);\n        setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false);\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.drawSharedDomainAxis = false;\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        \n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE;\n        this.domainGridlinePosition = CategoryAnchor.MIDDLE;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        Marker baseline = new ValueMarker(0.0, new Color(0.8f, 0.8f, 0.8f, \n                0.5f), new BasicStroke(1.0f), new Color(0.85f, 0.85f, 0.95f, \n                0.5f), new BasicStroke(1.0f), 0.6f);\n        addRangeMarker(baseline, Layer.BACKGROUND);\n\n        this.anchorValue = 0.0;\n\n        this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n        \n        this.annotations = new java.util.ArrayList();\n\n    }\n",
        "begin_line": 433,
        "end_line": 516,
        "comment": "\r\n     * Creates a new plot.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the item renderer (<code>null</code> permitted).\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1466
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.configureDomainAxes#854",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 854,
        "end_line": 861,
        "comment": "\r\n     * Configures the domain axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelWidthType.CategoryLabelWidthType#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.CategoryLabelWidthType(java.lang.String)",
        "snippet": "    private CategoryLabelWidthType(String name) {\n        if (name == null) {\n            throw new IllegalArgumentException(\"Null 'name' argument.\");   \n        }\n        this.name = name;\n    }\n",
        "begin_line": 72,
        "end_line": 77,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelPositions.createUpRotationLabelPositions#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(double)",
        "snippet": "    public static CategoryLabelPositions createUpRotationLabelPositions(\n            double angle) {\n        return new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_LEFT, \n                TextAnchor.BOTTOM_LEFT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_RIGHT, \n                TextAnchor.TOP_RIGHT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.BOTTOM_RIGHT, \n                TextAnchor.BOTTOM_RIGHT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.TOP_LEFT, \n                TextAnchor.TOP_LEFT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ) // RIGHT\n        );\n    }\n",
        "begin_line": 147,
        "end_line": 171,
        "comment": "\r\n     * Creates a new instance where the category labels angled upwards by the \r\n     * specified amount.\r\n     * \r\n     * @param angle  the rotation angle (should be < Math.PI / 2.0).\r\n     * \r\n     * @return A category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelPositions.createDownRotationLabelPositions#181",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(double)",
        "snippet": "    public static CategoryLabelPositions createDownRotationLabelPositions(\n            double angle) {\n        return new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_RIGHT, \n                TextAnchor.BOTTOM_RIGHT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_LEFT, \n                TextAnchor.TOP_LEFT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.TOP_RIGHT, \n                TextAnchor.TOP_RIGHT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.BOTTOM_LEFT, \n                TextAnchor.BOTTOM_LEFT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ) // RIGHT\n        );\n    }\n",
        "begin_line": 181,
        "end_line": 205,
        "comment": "\r\n     * Creates a new instance where the category labels angled downwards by the\r\n     * specified amount.\r\n     * \r\n     * @param angle  the rotation angle (should be < Math.PI / 2.0).\r\n     * \r\n     * @return A category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelPositions.CategoryLabelPositions#253",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.CategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition)",
        "snippet": "    public CategoryLabelPositions(CategoryLabelPosition top,\n                                  CategoryLabelPosition bottom,\n                                  CategoryLabelPosition left,\n                                  CategoryLabelPosition right) {\n        \n        if (top == null) {\n            throw new IllegalArgumentException(\"Null 'top' argument.\");\n        }\n        if (bottom == null) {\n            throw new IllegalArgumentException(\"Null 'bottom' argument.\");\n        }\n        if (left == null) {\n            throw new IllegalArgumentException(\"Null 'left' argument.\");\n        }\n        if (right == null) {\n            throw new IllegalArgumentException(\"Null 'right' argument.\");\n        }\n        \n        this.positionForAxisAtTop = top;\n        this.positionForAxisAtBottom = bottom;\n        this.positionForAxisAtLeft = left;\n        this.positionForAxisAtRight = right;\n    \n    }\n",
        "begin_line": 253,
        "end_line": 276,
        "comment": "\r\n     * Creates a new position specification.\r\n     * \r\n     * @param top  the label position info used when an axis is at the top \r\n     *             (<code>null</code> not permitted).\r\n     * @param bottom  the label position info used when an axis is at the \r\n     *                bottom (<code>null</code> not permitted).\r\n     * @param left  the label position info used when an axis is at the left \r\n     *              (<code>null</code> not permitted).\r\n     * @param right  the label position info used when an axis is at the right \r\n     *               (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#101",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor) {\n        // argument checking delegated...\n        this(categoryAnchor, labelAnchor, TextAnchor.CENTER, 0.0, \n                CategoryLabelWidthType.CATEGORY, 0.95f);\n    }\n",
        "begin_line": 101,
        "end_line": 106,
        "comment": "\r\n     * Creates a new category label position record.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#118",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.axis.CategoryLabelWidthType, float)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor,\n                                 CategoryLabelWidthType widthType,\n                                 float widthRatio) {\n        // argument checking delegated...\n        this(categoryAnchor, labelAnchor, TextAnchor.CENTER, 0.0, widthType, \n                widthRatio);\n    }\n",
        "begin_line": 118,
        "end_line": 125,
        "comment": "\r\n     * Creates a new category label position record.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     * @param widthType  the width type (<code>null</code> not permitted).\r\n     * @param widthRatio  the maximum label width as a percentage (of the \r\n     *                    category space or the range space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.text.TextAnchor, double, org.jfree.chart.axis.CategoryLabelWidthType, float)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor,\n                                 TextAnchor rotationAnchor,\n                                 double angle,\n                                 CategoryLabelWidthType widthType,\n                                 float widthRatio) {\n        \n        if (categoryAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'categoryAnchor' argument.\");\n        }\n        if (labelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'labelAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n        if (widthType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");   \n        }\n        \n        this.categoryAnchor = categoryAnchor;\n        this.labelAnchor = labelAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n        this.widthType = widthType;\n        this.widthRatio = widthRatio;\n    \n    }\n",
        "begin_line": 143,
        "end_line": 173,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point \r\n     * relative to the data item (dot, bar or other visual item) on a chart.  \r\n     * The item label is aligned by aligning the text anchor with the item \r\n     * label anchor.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the rotation angle (<code>null</code> not permitted).\r\n     * @param widthType  the width type (<code>null</code> not permitted).\r\n     * @param widthRatio  the maximum label width as a percentage (of the \r\n     *                    category space or the range space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.CategoryAxis#195",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.CategoryAxis(java.lang.String)",
        "snippet": "    public CategoryAxis(String label) {\n\n        super(label);\n\n        this.lowerMargin = DEFAULT_AXIS_MARGIN;\n        this.upperMargin = DEFAULT_AXIS_MARGIN;\n        this.categoryMargin = DEFAULT_CATEGORY_MARGIN;\n        this.maximumCategoryLabelLines = 1;\n        this.maximumCategoryLabelWidthRatio = 0.0f;\n        \n        setTickMarksVisible(false);  // not supported by this axis type yet\n        \n        this.categoryLabelPositionOffset = 4;\n        this.categoryLabelPositions = CategoryLabelPositions.STANDARD;\n        this.tickLabelFontMap = new HashMap();\n        this.tickLabelPaintMap = new HashMap();\n        this.categoryLabelToolTips = new HashMap();\n        \n    }\n",
        "begin_line": 195,
        "end_line": 213,
        "comment": "\r\n     * Constructs a category axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.configure#825",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.configure()",
        "snippet": "    public void configure() {\n        // nothing required\n    }\n",
        "begin_line": 825,
        "end_line": 827,
        "comment": "\r\n     * Configures the axis against the current plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.setTickMarksVisible#762",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setTickMarksVisible(boolean)",
        "snippet": "    public void setTickMarksVisible(boolean flag) {\n        if (flag != this.tickMarksVisible) {\n            this.tickMarksVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 762,
        "end_line": 767,
        "comment": "\r\n     * Sets the flag that indicates whether or not the tick marks are showing\r\n     * and sends an {@link AxisChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     * \r\n     * @see #isTickMarksVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.configureRangeAxes#1130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1130,
        "end_line": 1137,
        "comment": "\r\n     * Configures the range axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.datasetChanged#1839",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n\n        int count = this.rangeAxes.size();\n        for (int axisIndex = 0; axisIndex < count; axisIndex++) {\n            ValueAxis yAxis = getRangeAxis(axisIndex);\n            if (yAxis != null) {\n                yAxis.configure();\n            }\n        }\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n\n    }\n",
        "begin_line": 1839,
        "end_line": 1857,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The range axis bounds will be recalculated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.datasetsMappedToRangeAxis#3211",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToRangeAxis(int)",
        "snippet": "    private List datasetsMappedToRangeAxis(int index) {\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            Object dataset = this.datasets.get(i);\n            if (dataset != null) {\n                Integer m = (Integer) this.datasetToRangeAxisMap.get(i);\n                if (m == null) {  // a dataset with no mapping is assigned to \n                                  // axis 0\n                    if (index == 0) { \n                        result.add(dataset);\n                    }\n                }\n                else {\n                    if (m.intValue() == index) {\n                        result.add(dataset);\n                    }\n                }\n            }\n        }\n        return result;    \n    }\n",
        "begin_line": 3211,
        "end_line": 3231,
        "comment": "\r\n     * A utility method that returns a list of datasets that are mapped to a \r\n     * given range axis.\r\n     * \r\n     * @param index  the axis index.\r\n     * \r\n     * @return A list of datasets.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortOrder.SortOrder#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.SortOrder(java.lang.String)",
        "snippet": "    private SortOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueMarker.ValueMarker#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker(double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    public ValueMarker(double value, Paint paint, Stroke stroke, \n                       Paint outlinePaint, Stroke outlineStroke, float alpha) {\n        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n        this.value = value;\n    }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\r\n     * Creates a new value marker.\r\n     * \r\n     * @param value  the value.\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency (in the range 0.0f to 1.0f).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#753",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setDomainAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 753,
        "end_line": 756,
        "comment": "\r\n     * Sets the location of the domain axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the axis location (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether listeners are notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#786",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(int index, AxisLocation location, \n            boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.domainAxisLocations.set(index, location);\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 786,
        "end_line": 796,
        "comment": "\r\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     * \r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @since 1.0.5\r\n     * \r\n     * @see #getDomainAxisLocation(int)\r\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.getRangeAxis#881",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis(int)",
        "snippet": "    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot cp = (CategoryPlot) parent;\n                result = cp.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 881,
        "end_line": 894,
        "comment": "\r\n     * Returns a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1036",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n        setRangeAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "\r\n     * Sets the location of the range axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #setDomainAxisLocation(AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1065",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(int index, AxisLocation location, \n                                     boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.rangeAxisLocations.set(index, location);\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1065,
        "end_line": 1075,
        "comment": "\r\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #getRangeAxisLocation(int)\r\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.getDataset#1159",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataset(int)",
        "snippet": "    public CategoryDataset getDataset(int index) {\n        CategoryDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (CategoryDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1159,
        "end_line": 1165,
        "comment": "\r\n     * Returns the dataset at the given index.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     * \r\n     * @see #setDataset(int, CategoryDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.mapDatasetToDomainAxis#1226",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        this.datasetToDomainAxisMap.set(index, new Integer(axisIndex));  \n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1226,
        "end_line": 1230,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getDomainAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.mapDatasetToRangeAxis#1259",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        this.datasetToRangeAxisMap.set(index, new Integer(axisIndex));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1259,
        "end_line": 1263,
        "comment": "\r\n     * Maps a dataset to a particular range axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getRangeAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.addRangeMarker#2072",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(Marker marker, Layer layer) {\n        addRangeMarker(0, marker, layer);\n    }\n",
        "begin_line": 2072,
        "end_line": 2074,
        "comment": "\r\n     * Adds a marker for display against the range axis and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker \r\n     * will be drawn by the renderer as a line perpendicular to the range axis, \r\n     * however this is entirely up to the renderer.\r\n     *\r\n     * @param marker  the marker (<code>null</code> not permitted).\r\n     * @param layer  the layer (foreground or background) (<code>null</code> \r\n     *               not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.addRangeMarker#2086",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(int index, Marker marker, Layer layer) {\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);            \n        }\n        marker.addChangeListener(this);\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 2086,
        "end_line": 2108,
        "comment": "\r\n     * Adds a marker for display by a particular renderer.\r\n     * <P>\r\n     * Typically a marker will be drawn by the renderer as a line perpendicular\r\n     * to a range axis, however this is entirely up to the renderer.\r\n     *\r\n     * @param index  the renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAnchor.CategoryAnchor#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.CategoryAnchor(java.lang.String)",
        "snippet": "    private CategoryAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1336
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextBlockAnchor.TextBlockAnchor#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TextBlockAnchor(java.lang.String)",
        "snippet": "    private TextBlockAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.133
        },
        "num_failing_tests": 2
    },
    {
        "name": "LengthAdjustmentType.LengthAdjustmentType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.LengthAdjustmentType(java.lang.String)",
        "snippet": "    private LengthAdjustmentType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.Marker#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker(java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    protected Marker(Paint paint, Stroke stroke, \n                     Paint outlinePaint, Stroke outlineStroke, \n                     float alpha) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (alpha < 0.0f || alpha > 1.0f)\n            throw new IllegalArgumentException(\n                    \"The 'alpha' value must be in the range 0.0f to 1.0f\");\n        \n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n        \n        this.labelFont = new Font(\"SansSerif\", Font.PLAIN, 9);\n        this.labelPaint = Color.black;\n        this.labelAnchor = RectangleAnchor.TOP_LEFT;\n        this.labelOffset = new RectangleInsets(3.0, 3.0, 3.0, 3.0);\n        this.labelOffsetType = LengthAdjustmentType.CONTRACT;\n        this.labelTextAnchor = TextAnchor.CENTER;\n        \n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 171,
        "end_line": 199,
        "comment": "\r\n     * Constructs a new marker.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency (must be in the range 0.0f to \r\n     *     1.0f).\r\n     *     \r\n     * @throws IllegalArgumentException if <code>paint</code> or \r\n     *     <code>stroke</code> is <code>null</code>, or <code>alpha</code> is \r\n     *     not in the specified range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.addChangeListener#533",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.addChangeListener(org.jfree.chart.event.MarkerChangeListener)",
        "snippet": "    public void addChangeListener(MarkerChangeListener listener) {\n        this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\r\n     * Registers an object for notification of changes to the marker.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @see #removeChangeListener(MarkerChangeListener)\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "Layer.Layer#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "class_name": "org.jfree.chart.util.Layer",
        "signature": "org.jfree.chart.util.Layer.Layer(java.lang.String)",
        "snippet": "    private Layer(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.getAutoRangeIncludesZero#237",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeIncludesZero()",
        "snippet": "    public boolean getAutoRangeIncludesZero() {\n        return this.autoRangeIncludesZero;\n    }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\r\n     * Returns the flag that indicates whether or not the automatic axis range\r\n     * (if indeed it is determined automatically) is forced to include zero.\r\n     *\r\n     * @return The flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1174
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.getAutoRangeStickyZero#272",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeStickyZero()",
        "snippet": "    public boolean getAutoRangeStickyZero() {\n        return this.autoRangeStickyZero;\n    }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\r\n     * Returns a flag that affects the auto-range when zero falls outside the\r\n     * data range but inside the margins defined for the axis.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setAutoRangeStickyZero(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1174
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.configure#410",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.configure()",
        "snippet": "    public void configure() {\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n    }\n",
        "begin_line": 410,
        "end_line": 414,
        "comment": "\r\n     * Configures the axis to work with the specified plot.  If the axis has\r\n     * auto-scaling, then sets the maximum and minimum values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1174
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectList.indexOf#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.indexOf(java.lang.Object)",
        "snippet": "    public int indexOf(Object object) {    \n        return super.indexOf(object);    \n    }    \n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "          \n     * Returns the index of the specified object, or -1 if the object is not \n     * in the list.        \n     *   \n     * @param object  the object.        \n     *   \n     * @return The index or -1.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1155
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.getAutoRangeMinimumSize#974",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getAutoRangeMinimumSize()",
        "snippet": "    public double getAutoRangeMinimumSize() {\n        return this.autoRangeMinimumSize;\n    }\n",
        "begin_line": 974,
        "end_line": 976,
        "comment": "\r\n     * Returns the minimum size allowed for the axis range when it is \r\n     * automatically calculated.\r\n     *\r\n     * @return The minimum range.\r\n     * \r\n     * @see #setAutoRangeMinimumSize(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1155
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.getLowerMargin#1058",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getLowerMargin()",
        "snippet": "    public double getLowerMargin() {\n        return this.lowerMargin;\n    }\n",
        "begin_line": 1058,
        "end_line": 1060,
        "comment": "\r\n     * Returns the lower margin for the axis, expressed as a percentage of the \r\n     * axis range.  This controls the space added to the lower end of the axis \r\n     * when the axis range is automatically calculated (it is ignored when the \r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The lower margin.\r\n     *\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1155
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.getUpperMargin#1091",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getUpperMargin()",
        "snippet": "    public double getUpperMargin() {\n        return this.upperMargin;\n    }\n",
        "begin_line": 1091,
        "end_line": 1093,
        "comment": "\r\n     * Returns the upper margin for the axis, expressed as a percentage of the \r\n     * axis range.  This controls the space added to the lower end of the axis \r\n     * when the axis range is automatically calculated (it is ignored when the \r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The upper margin.\r\n     *\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1155
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.getFixedAutoRange#1121",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getFixedAutoRange()",
        "snippet": "    public double getFixedAutoRange() {\n        return this.fixedAutoRange;\n    }\n",
        "begin_line": 1121,
        "end_line": 1123,
        "comment": "\r\n     * Returns the fixed auto range.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #setFixedAutoRange(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1155
        },
        "num_failing_tests": 2
    },
    {
        "name": "AxisChangeEvent.AxisChangeEvent#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/AxisChangeEvent.java",
        "class_name": "org.jfree.chart.event.AxisChangeEvent",
        "signature": "org.jfree.chart.event.AxisChangeEvent.AxisChangeEvent(org.jfree.chart.axis.Axis)",
        "snippet": "    public AxisChangeEvent(Axis axis) {\n        super(axis);\n        this.axis = axis;\n    }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\r\n     * Creates a new AxisChangeEvent.\r\n     *\r\n     * @param axis  the axis that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1151
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.setPlot#897",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setPlot(org.jfree.chart.plot.Plot)",
        "snippet": "    public void setPlot(Plot plot) {\n        this.plot = plot;\n        configure();\n    }\n",
        "begin_line": 897,
        "end_line": 900,
        "comment": "\r\n     * Sets a reference to the plot that the axis is assigned to.\r\n     * <P>\r\n     * This method is used internally, you shouldn't need to call it yourself.\r\n     *\r\n     * @param plot  the plot.\r\n     * \r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1151
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.addChangeListener#998",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.addChangeListener(org.jfree.chart.event.AxisChangeListener)",
        "snippet": "    public void addChangeListener(AxisChangeListener listener) {\n        this.listenerList.add(AxisChangeListener.class, listener);\n    }\n",
        "begin_line": 998,
        "end_line": 1000,
        "comment": "\r\n     * Registers an object for notification of changes to the axis.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     * \r\n     * @see #removeChangeListener(AxisChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1151
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.notifyListeners#1033",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.notifyListeners(org.jfree.chart.event.AxisChangeEvent)",
        "snippet": "    protected void notifyListeners(AxisChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == AxisChangeListener.class) {\n                ((AxisChangeListener) listeners[i + 1]).axisChanged(event);\n            }\n        }\n\n    }\n",
        "begin_line": 1033,
        "end_line": 1042,
        "comment": "\r\n     * Notifies all registered listeners that the axis has changed.\r\n     * The AxisChangeEvent provides information about the change.\r\n     *\r\n     * @param event  information about the change to the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1151
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.isAutoRange#928",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isAutoRange()",
        "snippet": "    public boolean isAutoRange() {\n        return this.autoRange;\n    }\n",
        "begin_line": 928,
        "end_line": 930,
        "comment": "\r\n     * Returns the flag that controls whether or not the axis range is \r\n     * automatically adjusted to fit the data values.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setAutoRange(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1147
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.getPlot#884",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getPlot()",
        "snippet": "    public Plot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 884,
        "end_line": 886,
        "comment": "\r\n     * Returns the plot that the axis is assigned to.  This method will return \r\n     * <code>null</code> if the axis is not currently assigned to a plot.\r\n     *\r\n     * @return The plot that the axis is assigned to (possibly \r\n     *         <code>null</code>).\r\n     *         \r\n     * @see #setPlot(Plot)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1147
        },
        "num_failing_tests": 2
    },
    {
        "name": "RangeType.RangeType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.RangeType(java.lang.String)",
        "snippet": "    private RangeType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1143
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.NumberAxis#195",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.NumberAxis(java.lang.String)",
        "snippet": "    public NumberAxis(String label) {\n        super(label, NumberAxis.createStandardTickUnits());\n        this.rangeType = RangeType.FULL;\n        this.autoRangeIncludesZero = DEFAULT_AUTO_RANGE_INCLUDES_ZERO;\n        this.autoRangeStickyZero = DEFAULT_AUTO_RANGE_STICKY_ZERO;\n        this.tickUnit = DEFAULT_TICK_UNIT;\n        this.numberFormatOverride = null;\n        this.markerBand = null;\n    }\n",
        "begin_line": 195,
        "end_line": 203,
        "comment": "\r\n     * Constructs a number axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1143
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.createStandardTickUnits#699",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.createStandardTickUnits()",
        "snippet": "    public static TickUnitSource createStandardTickUnits() {\n\n        TickUnits units = new TickUnits();\n        DecimalFormat df0 = new DecimalFormat(\"0.00000000\");\n        DecimalFormat df1 = new DecimalFormat(\"0.0000000\");\n        DecimalFormat df2 = new DecimalFormat(\"0.000000\");\n        DecimalFormat df3 = new DecimalFormat(\"0.00000\");\n        DecimalFormat df4 = new DecimalFormat(\"0.0000\");\n        DecimalFormat df5 = new DecimalFormat(\"0.000\");\n        DecimalFormat df6 = new DecimalFormat(\"0.00\");\n        DecimalFormat df7 = new DecimalFormat(\"0.0\");\n        DecimalFormat df8 = new DecimalFormat(\"#,##0\");\n        DecimalFormat df9 = new DecimalFormat(\"#,###,##0\");\n        DecimalFormat df10 = new DecimalFormat(\"#,###,###,##0\");\n        \n        // we can add the units in any order, the TickUnits collection will \n        // sort them...\n        units.add(new NumberTickUnit(0.0000001, df1));\n        units.add(new NumberTickUnit(0.000001, df2));\n        units.add(new NumberTickUnit(0.00001, df3));\n        units.add(new NumberTickUnit(0.0001, df4));\n        units.add(new NumberTickUnit(0.001, df5));\n        units.add(new NumberTickUnit(0.01, df6));\n        units.add(new NumberTickUnit(0.1, df7));\n        units.add(new NumberTickUnit(1, df8));\n        units.add(new NumberTickUnit(10, df8));\n        units.add(new NumberTickUnit(100, df8));\n        units.add(new NumberTickUnit(1000, df8));\n        units.add(new NumberTickUnit(10000, df8));\n        units.add(new NumberTickUnit(100000, df8));\n        units.add(new NumberTickUnit(1000000, df9));\n        units.add(new NumberTickUnit(10000000, df9));\n        units.add(new NumberTickUnit(100000000, df9));\n        units.add(new NumberTickUnit(1000000000, df10));\n        units.add(new NumberTickUnit(10000000000.0, df10));\n        units.add(new NumberTickUnit(100000000000.0, df10));\n        \n        units.add(new NumberTickUnit(0.00000025, df0));\n        units.add(new NumberTickUnit(0.0000025, df1));\n        units.add(new NumberTickUnit(0.000025, df2));\n        units.add(new NumberTickUnit(0.00025, df3));\n        units.add(new NumberTickUnit(0.0025, df4));\n        units.add(new NumberTickUnit(0.025, df5));\n        units.add(new NumberTickUnit(0.25, df6));\n        units.add(new NumberTickUnit(2.5, df7));\n        units.add(new NumberTickUnit(25, df8));\n        units.add(new NumberTickUnit(250, df8));\n        units.add(new NumberTickUnit(2500, df8));\n        units.add(new NumberTickUnit(25000, df8));\n        units.add(new NumberTickUnit(250000, df8));\n        units.add(new NumberTickUnit(2500000, df9));\n        units.add(new NumberTickUnit(25000000, df9));\n        units.add(new NumberTickUnit(250000000, df9));\n        units.add(new NumberTickUnit(2500000000.0, df10));\n        units.add(new NumberTickUnit(25000000000.0, df10));\n        units.add(new NumberTickUnit(250000000000.0, df10));\n\n        units.add(new NumberTickUnit(0.0000005, df1));\n        units.add(new NumberTickUnit(0.000005, df2));\n        units.add(new NumberTickUnit(0.00005, df3));\n        units.add(new NumberTickUnit(0.0005, df4));\n        units.add(new NumberTickUnit(0.005, df5));\n        units.add(new NumberTickUnit(0.05, df6));\n        units.add(new NumberTickUnit(0.5, df7));\n        units.add(new NumberTickUnit(5L, df8));\n        units.add(new NumberTickUnit(50L, df8));\n        units.add(new NumberTickUnit(500L, df8));\n        units.add(new NumberTickUnit(5000L, df8));\n        units.add(new NumberTickUnit(50000L, df8));\n        units.add(new NumberTickUnit(500000L, df8));\n        units.add(new NumberTickUnit(5000000L, df9));\n        units.add(new NumberTickUnit(50000000L, df9));\n        units.add(new NumberTickUnit(500000000L, df9));\n        units.add(new NumberTickUnit(5000000000L, df10));\n        units.add(new NumberTickUnit(50000000000L, df10));\n        units.add(new NumberTickUnit(500000000000L, df10));\n\n        return units;\n\n    }\n",
        "begin_line": 699,
        "end_line": 778,
        "comment": "\r\n     * Creates the standard tick units.\r\n     * <P>\r\n     * If you don't like these defaults, create your own instance of TickUnits\r\n     * and then pass it to the setStandardTickUnits() method in the\r\n     * NumberAxis class.\r\n     *\r\n     * @return The standard tick units.\r\n     * \r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     * @see #createIntegerTickUnits()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1143
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.setRange#1234",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setRange(org.jfree.data.Range, boolean, boolean)",
        "snippet": "    public void setRange(Range range, boolean turnOffAutoRange, \n                         boolean notify) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"Null 'range' argument.\");\n        }\n        if (turnOffAutoRange) {\n            this.autoRange = false;\n        }\n        this.range = range;\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1234,
        "end_line": 1246,
        "comment": "\r\n     * Sets the range for the axis, if requested, sends an \r\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, \r\n     * the auto-range flag is set to <code>false</code> (optional).\r\n     *\r\n     * @param range  the range (<code>null</code> not permitted).\r\n     * @param turnOffAutoRange  a flag that controls whether or not the auto \r\n     *                          range is turned off.         \r\n     * @param notify  a flag that controls whether or not listeners are \r\n     *                notified.\r\n     *                \r\n     * @see #getRange()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1136
        },
        "num_failing_tests": 2
    },
    {
        "name": "TickUnit.compareTo#142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object object) {\n\n        if (object instanceof TickUnit) {\n            TickUnit other = (TickUnit) object;\n            if (this.size > other.getSize()) {\n                return 1;\n            }\n            else if (this.size < other.getSize()) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return -1;\n        }\n\n    }\n",
        "begin_line": 142,
        "end_line": 160,
        "comment": "\r\n     * Compares this tick unit to an arbitrary object.\r\n     *\r\n     * @param object  the object to compare against.\r\n     *\r\n     * @return <code>1</code> if the size of the other object is less than this,\r\n     *      <code>0</code> if both have the same size and <code>-1</code> this\r\n     *      size is less than the others.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1136
        },
        "num_failing_tests": 2
    },
    {
        "name": "Range.getLowerBound#98",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getLowerBound()",
        "snippet": "    public double getLowerBound() {\n        return this.lower;\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\r\n     * Returns the lower bound for the range.\r\n     *\r\n     * @return The lower bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 2
    },
    {
        "name": "Range.getUpperBound#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getUpperBound()",
        "snippet": "    public double getUpperBound() {\n        return this.upper;\n    }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\r\n     * Returns the upper bound for the range.\r\n     *\r\n     * @return The upper bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberTickUnit.NumberTickUnit#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat)",
        "snippet": "    public NumberTickUnit(double size, NumberFormat formatter) {\n        super(size);\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        this.formatter = formatter;\n    }\n",
        "begin_line": 81,
        "end_line": 87,
        "comment": "\r\n     * Creates a new number tick unit.\r\n     *\r\n     * @param size  the size of the tick unit.\r\n     * @param formatter  a number formatter for the tick unit (<code>null</code>\r\n     *                   not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.ValueAxis#260",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.ValueAxis(java.lang.String, org.jfree.chart.axis.TickUnitSource)",
        "snippet": "    protected ValueAxis(String label, TickUnitSource standardTickUnits) {\n\n        super(label);\n\n        this.positiveArrowVisible = false;\n        this.negativeArrowVisible = false;\n\n        this.range = DEFAULT_RANGE;\n        this.autoRange = DEFAULT_AUTO_RANGE;\n        this.defaultAutoRange = DEFAULT_RANGE;\n\n        this.inverted = DEFAULT_INVERTED;\n        this.autoRangeMinimumSize = DEFAULT_AUTO_RANGE_MINIMUM_SIZE;\n\n        this.lowerMargin = DEFAULT_LOWER_MARGIN;\n        this.upperMargin = DEFAULT_UPPER_MARGIN;\n\n        this.fixedAutoRange = 0.0;\n\n        this.autoTickUnitSelection = DEFAULT_AUTO_TICK_UNIT_SELECTION;\n        this.standardTickUnits = standardTickUnits;\n        \n        Polygon p1 = new Polygon();\n        p1.addPoint(0, 0);\n        p1.addPoint(-2, 2);\n        p1.addPoint(2, 2);\n        \n        this.upArrow = p1;\n\n        Polygon p2 = new Polygon();\n        p2.addPoint(0, 0);\n        p2.addPoint(-2, -2);\n        p2.addPoint(2, -2);\n\n        this.downArrow = p2;\n\n        Polygon p3 = new Polygon();\n        p3.addPoint(0, 0);\n        p3.addPoint(-2, -2);\n        p3.addPoint(-2, 2);\n        \n        this.rightArrow = p3;\n\n        Polygon p4 = new Polygon();\n        p4.addPoint(0, 0);\n        p4.addPoint(2, -2);\n        p4.addPoint(2, 2);\n\n        this.leftArrow = p4;\n        \n        this.verticalTickLabels = false;\n        \n    }\n",
        "begin_line": 260,
        "end_line": 312,
        "comment": "\r\n     * Constructs a value axis.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param standardTickUnits  the source for standard tick units \r\n     *                           (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "TickUnits.TickUnits#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.TickUnits()",
        "snippet": "    public TickUnits() {\n        this.tickUnits = new ArrayList();\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Constructs a new collection of tick units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "TickUnits.add#89",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.add(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public void add(TickUnit unit) {\n        if (unit == null) {\n            throw new NullPointerException(\"Null 'unit' argument.\");\n        }\n        this.tickUnits.add(unit);\n        Collections.sort(this.tickUnits);\n    }\n",
        "begin_line": 89,
        "end_line": 95,
        "comment": "\r\n     * Adds a tick unit to the collection.  The tick units are maintained in \r\n     * ascending order.\r\n     *\r\n     * @param unit  the tick unit to add (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "TickUnit.TickUnit#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double)",
        "snippet": "    public TickUnit(double size) {\n        this.size = size;\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\r\n     * Constructs a new tick unit.\r\n     *\r\n     * @param size  the tick unit size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "TickUnit.getSize#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.getSize()",
        "snippet": "    public double getSize() {\n        return this.size;\n    }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\r\n     * Returns the size of the tick unit.\r\n     *\r\n     * @return The size of the tick unit.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetRenderingOrder.DatasetRenderingOrder#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
        "snippet": "    private DatasetRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "AxisLocation.AxisLocation#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
        "snippet": "    private AxisLocation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.Axis#272",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.Axis(java.lang.String)",
        "snippet": "    protected Axis(String label) {\n\n        this.label = label;\n        this.visible = DEFAULT_AXIS_VISIBLE;\n        this.labelFont = DEFAULT_AXIS_LABEL_FONT;\n        this.labelPaint = DEFAULT_AXIS_LABEL_PAINT;\n        this.labelInsets = DEFAULT_AXIS_LABEL_INSETS;\n        this.labelAngle = 0.0;\n        this.labelToolTip = null;\n        this.labelURL = null;\n        \n        this.axisLineVisible = true;\n        this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT;\n        this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE;\n        \n        this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE;\n        this.tickLabelFont = DEFAULT_TICK_LABEL_FONT;\n        this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT;\n        this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS;\n        \n        this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE;\n        this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE;\n        this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT;\n        this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH;\n        this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n\n        this.plot = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 272,
        "end_line": 302,
        "comment": "\r\n     * Constructs an axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "Range.Range#83",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower \n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1094
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectList.get#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.get(int)",
        "snippet": "    public Object get(int index) {         \n        return super.get(index);         \n    }    \n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "          \n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.         \n     *   \n     * @param index  the object index.   \n     *   \n     * @return The object or <code>null</code>.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 2
    },
    {
        "name": "PlotOrientation.PlotOrientation#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectList.set#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
        "snippet": "    public void set(int index, Object object) {      \n        super.set(index, object);        \n    }    \n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "          \n     * Sets an object reference (overwriting any existing object).       \n     *   \n     * @param index  the object index.   \n     * @param object  the object (<code>null</code> permitted).          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1088
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.getParent#434",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getParent()",
        "snippet": "    public Plot getParent() {\n        return this.parent;\n    }\n",
        "begin_line": 434,
        "end_line": 436,
        "comment": "\r\n     * Returns the parent plot (or <code>null</code> if this plot is not part \r\n     * of a combined plot).\r\n     *\r\n     * @return The parent plot.\r\n     * \r\n     * @see #setParent(Plot)\r\n     * @see #getRootPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1088
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEvent.setType#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public void setType(ChartChangeEventType type) {\n        this.type = type;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Sets the event type.\r\n     *\r\n     * @param type  the event type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1088
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1085
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.get#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
        "snippet": "    protected Object get(int index) {\n        Object result = null;\n        if (index >= 0 && index < this.size) {\n            result = this.objects[index];\n        }\n        return result;\n    }\n",
        "begin_line": 106,
        "end_line": 112,
        "comment": "\n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.set#120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
        "snippet": "    protected void set(int index, Object object) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires index >= 0.\");\n        }\n        if (index >= this.objects.length) {\n            Object[] enlarged = new Object[index + this.increment];\n            System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);\n            this.objects = enlarged;\n        }\n        this.objects[index] = object;\n        this.size = Math.max(this.size, index + 1);\n    }\n",
        "begin_line": 120,
        "end_line": 131,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.Plot#286",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 286,
        "end_line": 306,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.notifyListeners#889",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 889,
        "end_line": 896,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline \r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence, \n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 194,
        "end_line": 205,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 287,
        "end_line": 337,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series \r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.intArray#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.intArray#531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartColor.createDefaultPaintArray#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 149,
        "end_line": 187,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and \r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1018
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the \r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be \r\n     * <code>null</code> (in this case the source will be the \r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleInsets.RectangleInsets#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom, \n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);   \n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     * \n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.getRangeAxis#870",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis()",
        "snippet": "    public ValueAxis getRangeAxis() {\n        return getRangeAxis(0);\n    }\n",
        "begin_line": 870,
        "end_line": 872,
        "comment": "\r\n     * Returns the range axis for the plot.  If the range axis for this plot is\r\n     * null, then the method will return the parent plot's range axis (if there\r\n     * is a parent plot).\r\n     *\r\n     * @return The range axis (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.size#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0842
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0816
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0816
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0816
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextAnchor.TextAnchor#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0794
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectList.ObjectList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0783
        },
        "num_failing_tests": 2
    }
]