[
    {
        "name": "TimeSeries.createCopy#873",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.createCopy(int, int)",
        "snippet": "    public TimeSeries createCopy(int start, int end) \n        throws CloneNotSupportedException {\n\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item \n                    = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return copy;\n    }\n",
        "begin_line": 873,
        "end_line": 899,
        "comment": "\r\n     * Creates a new timeseries by copying a subset of the data in this time\r\n     * series.\r\n     *\r\n     * @param start  the index of the first time period to copy.\r\n     * @param end  the index of the last time period to copy.\r\n     *\r\n     * @return A series containing a copy of this times series from start until\r\n     *         end.\r\n     * \r\n     * @throws CloneNotSupportedException if there is a cloning problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.clone#856",
        "is_bug": true,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.clone()",
        "snippet": "    public Object clone() throws CloneNotSupportedException {\n        Object clone = createCopy(0, getItemCount() - 1);\n        return clone;\n    }\n",
        "begin_line": 856,
        "end_line": 859,
        "comment": "\r\n     * Returns a clone of the time series.\r\n     * <P>\r\n     * Notes:\r\n     * <ul>\r\n     *   <li>no need to clone the domain and range descriptions, since String \r\n     *     object is immutable;</li>\r\n     *   <li>we pass over to the more general method clone(start, end).</li>\r\n     * </ul>\r\n     *\r\n     * @return A clone of the time series.\r\n     * \r\n     * @throws CloneNotSupportedException not thrown by this class, but \r\n     *         subclasses may differ.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#139",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable)",
        "snippet": "    public TimeSeries(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION, \n                Day.class);\n    }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "\r\n     * Creates a new (empty) time series.  By default, a daily time series is \r\n     * created.  Use one of the other constructors if you require a different \r\n     * time period.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.Year#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.Year(int)",
        "snippet": "    public Year(int year) {\n        if ((year < SerialDate.MINIMUM_YEAR_SUPPORTED)\n            || (year > SerialDate.MAXIMUM_YEAR_SUPPORTED)) {\n\n            throw new IllegalArgumentException(\n                \"Year constructor: year (\" + year + \") outside valid range.\");\n        }\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 96,
        "end_line": 105,
        "comment": "\r\n     * Creates a time period representing a single year.\r\n     *\r\n     * @param year  the year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getYear#135",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getYear()",
        "snippet": "    public int getYear() {\n        return this.year;\n    }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "\r\n     * Returns the year.\r\n     *\r\n     * @return The year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.peg#175",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": " \r\n     * Recalculates the start date/time and end date/time for this time period \r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     * \r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getSerialIndex#217",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getSerialIndex()",
        "snippet": "    public long getSerialIndex() {\n        return this.year;\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\r\n     * Returns a serial index number for the year.\r\n     * <P>\r\n     * The implementation simply returns the year number (e.g. 2002).\r\n     *\r\n     * @return The serial index number.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getFirstMillisecond#232",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.JANUARY, 1, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 232,
        "end_line": 238,
        "comment": "\r\n     * Returns the first millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The first millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is \r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getLastMillisecond#251",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.DECEMBER, 31, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 251,
        "end_line": 257,
        "comment": "\r\n     * Returns the last millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The last millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is \r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.compareTo#311",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another Year object\n        // -----------------------------------------\n        if (o1 instanceof Year) {\n            Year y = (Year) o1;\n            result = this.year - y.getYear();\n        }\n\n        // CASE 2 : Comparing to another TimePeriod object\n        // -----------------------------------------------\n        else if (o1 instanceof RegularTimePeriod) {\n            // more difficult case - evaluate later...\n            result = 0;\n        }\n\n        // CASE 3 : Comparing to a non-TimePeriod object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 311,
        "end_line": 338,
        "comment": "\r\n     * Returns an integer indicating the order of this <code>Year</code> object\r\n     * relative to the specified object:\r\n     *\r\n     * negative == before, zero == same, positive == after.\r\n     *\r\n     * @param o1  the object to compare.\r\n     *\r\n     * @return negative == before, zero == same, positive == after.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#584",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public void add(RegularTimePeriod period, Number value) {\n        // defer argument checking...\n        add(period, value, true);\n    }\n",
        "begin_line": 584,
        "end_line": 587,
        "comment": "\r\n     * Adds a new data item to the series and sends \r\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \r\n     * listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#598",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number, boolean)",
        "snippet": "    public void add(RegularTimePeriod period, Number value, boolean notify) {\n        // defer argument checking...\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        add(item, notify);\n    }\n",
        "begin_line": 598,
        "end_line": 602,
        "comment": "\r\n     * Adds a new data item to the series and sends \r\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \r\n     * listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#152",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.Class)",
        "snippet": "    public TimeSeries(Comparable name, Class timePeriodClass) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION, \n                timePeriodClass);\n    }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "\r\n     * Creates a new (empty) time series with the specified name and class\r\n     * of {@link RegularTimePeriod}.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     * @param timePeriodClass  the type of time period (<code>null</code> not \r\n     *                         permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#92",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, Number value) {\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");   \n        }\n        this.period = period;\n        this.value = value;\n    }\n",
        "begin_line": 92,
        "end_line": 98,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.getPeriod#115",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.getPeriod()",
        "snippet": "    public RegularTimePeriod getPeriod() {\n        return this.period;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\r\n     * Returns the time period.\r\n     *\r\n     * @return The time period (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getDataItem#338",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getDataItem(int)",
        "snippet": "    public TimeSeriesDataItem getDataItem(int index) {\n        return (TimeSeriesDataItem) this.data.get(index);\n    }\n",
        "begin_line": 338,
        "end_line": 340,
        "comment": "\r\n     * Returns a data item for the series.\r\n     *\r\n     * @param index  the item index (zero-based).\r\n     *\r\n     * @return The data item.\r\n     * \r\n     * @see #getDataItem(RegularTimePeriod)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getTimePeriod#369",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getTimePeriod(int)",
        "snippet": "    public RegularTimePeriod getTimePeriod(int index) {\n        return getDataItem(index).getPeriod();\n    }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "\r\n     * Returns the time period at the specified index.\r\n     *\r\n     * @param index  the index of the data item.\r\n     *\r\n     * @return The time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#488",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem, boolean)",
        "snippet": "    public void add(TimeSeriesDataItem item, boolean notify) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n        if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {\n            StringBuffer b = new StringBuffer();\n            b.append(\"You are trying to add data where the time period class \");\n            b.append(\"is \");\n            b.append(item.getPeriod().getClass().getName());\n            b.append(\", but the TimeSeries is expecting an instance of \");\n            b.append(this.timePeriodClass.getName());\n            b.append(\".\");\n            throw new SeriesException(b.toString());\n        }\n\n        // make the change (if it's not a duplicate time period)...\n        boolean added = false;\n        int count = getItemCount();\n        if (count == 0) {\n            this.data.add(item);\n            added = true;\n        }\n        else {\n            RegularTimePeriod last = getTimePeriod(getItemCount() - 1);\n            if (item.getPeriod().compareTo(last) > 0) {\n                this.data.add(item);\n                added = true;\n            }\n            else {\n                int index = Collections.binarySearch(this.data, item);\n                if (index < 0) {\n                    this.data.add(-index - 1, item);\n                    added = true;\n                }\n                else {\n                    StringBuffer b = new StringBuffer();\n                    b.append(\"You are attempting to add an observation for \");\n                    b.append(\"the time period \");\n                    b.append(item.getPeriod().toString());\n                    b.append(\" but the series already contains an observation\");\n                    b.append(\" for that time period. Duplicates are not \");\n                    b.append(\"permitted.  Try using the addOrUpdate() method.\");\n                    throw new SeriesException(b.toString());\n                }\n            }\n        }\n        if (added) {\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            if (notify) {\n                fireSeriesChanged();\n            }\n        }\n\n    }\n",
        "begin_line": 488,
        "end_line": 548,
        "comment": "\r\n     * Adds a data item to the series and sends a \r\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \r\n     * listeners.\r\n     *\r\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \r\n     *              permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.removeAgedItems#735",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.removeAgedItems(boolean)",
        "snippet": "    public void removeAgedItems(boolean notify) {\n        // check if there are any values earlier than specified by the history \n        // count...\n        if (getItemCount() > 1) {\n            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();\n            boolean removed = false;\n            while ((latest - getTimePeriod(0).getSerialIndex()) \n                    > this.maximumItemAge) {\n                this.data.remove(0);\n                removed = true;\n            }\n            if (removed && notify) {\n                fireSeriesChanged();\n            }\n        }\n    }\n",
        "begin_line": 735,
        "end_line": 750,
        "comment": "\r\n     * Age items in the series.  Ensure that the timespan from the youngest to \r\n     * the oldest record in the series does not exceed maximumItemAge time \r\n     * periods.  Oldest items will be removed if required.\r\n     * \r\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is \r\n     *                sent to registered listeners IF any items are removed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#60",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        super(source);\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#312",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 312,
        "end_line": 316,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.notifyListeners#324",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 324,
        "end_line": 334,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getItemCount#237",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#170",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.String, java.lang.String, java.lang.Class)",
        "snippet": "    public TimeSeries(Comparable name, String domain, String range, \n                      Class timePeriodClass) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.timePeriodClass = timePeriodClass;\n        this.data = new java.util.ArrayList();\n        this.maximumItemCount = Integer.MAX_VALUE;\n        this.maximumItemAge = Long.MAX_VALUE;\n    }\n",
        "begin_line": 170,
        "end_line": 179,
        "comment": "\r\n     * Creates a new time series that contains no data.\r\n     * <P>\r\n     * Descriptions can be specified for the domain and range.  One situation\r\n     * where this is helpful is when generating a chart for the time series -\r\n     * axis labels can be taken from the domain and range description.\r\n     *\r\n     * @param name  the name of the series (<code>null</code> not permitted).\r\n     * @param domain  the domain description (<code>null</code> permitted).\r\n     * @param range  the range description (<code>null</code> permitted).\r\n     * @param timePeriodClass  the type of time period (<code>null</code> not \r\n     *                         permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#101",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\r\n     * Creates a new series with the specified key.  \r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;   \n    }\n",
        "begin_line": 111,
        "end_line": 120,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    }
]