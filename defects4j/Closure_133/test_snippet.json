[
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    extraAnnotations =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .annotationNames.keySet());\n    extraSuppressions =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .suppressionNames);\n\n    extraSuppressions.add(\"x\");\n    extraSuppressions.add(\"y\");\n    extraSuppressions.add(\"z\");\n  }\n",
        "begin_line": 51,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 53,col 18)",
            "(line 54,col 5)-(line 57,col 43)",
            "(line 58,col 5)-(line 61,col 35)",
            "(line 63,col 5)-(line 63,col 31)",
            "(line 64,col 5)-(line 64,col 31)",
            "(line 65,col 5)-(line 65,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic1()",
        "snippet": "  public void testParseTypeViaStatic1() throws Exception {\n    Node typeNode = parseType(\"null\");\n    assertTypeEquals(NULL_TYPE, typeNode);\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 38)",
            "(line 70,col 5)-(line 70,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic2()",
        "snippet": "  public void testParseTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"string\");\n    assertTypeEquals(STRING_TYPE, typeNode);\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 40)",
            "(line 75,col 5)-(line 75,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic3()",
        "snippet": "  public void testParseTypeViaStatic3() throws Exception {\n    Node typeNode = parseType(\"!Date\");\n    assertTypeEquals(DATE_TYPE, typeNode);\n  }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 39)",
            "(line 80,col 5)-(line 80,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic4()",
        "snippet": "  public void testParseTypeViaStatic4() throws Exception {\n    Node typeNode = parseType(\"boolean|string\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, STRING_TYPE), typeNode);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 48)",
            "(line 85,col 5)-(line 85,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic()",
        "snippet": "  public void testParseInvalidTypeViaStatic() throws Exception {\n    Node typeNode = parseType(\"sometype.<anothertype\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 55)",
            "(line 90,col 5)-(line 90,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic2()",
        "snippet": "  public void testParseInvalidTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 34)",
            "(line 95,col 5)-(line 95,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType1()",
        "snippet": "  public void testParseNamedType1() throws Exception {\n    assertNull(parse(\"@type null\", \"Unexpected end of file\"));\n  }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType2()",
        "snippet": "  public void testParseNamedType2() throws Exception {\n    JSDocInfo info = parse(\"@type null*/\");\n    assertTypeEquals(NULL_TYPE, info.getType());\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 43)",
            "(line 104,col 5)-(line 104,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType3()",
        "snippet": "  public void testParseNamedType3() throws Exception {\n    JSDocInfo info = parse(\"@type {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 47)",
            "(line 109,col 5)-(line 109,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType4()",
        "snippet": "  public void testParseNamedType4() throws Exception {\n    // Multi-line @type.\n    JSDocInfo info = parse(\"@type \\n {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 50)",
            "(line 115,col 5)-(line 115,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType5()",
        "snippet": "  public void testParseNamedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\nBar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 52)",
            "(line 120,col 5)-(line 122,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType6()",
        "snippet": "  public void testParseNamedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\n * Bar.\\n * Baz}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar.Baz\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 125,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 64)",
            "(line 127,col 5)-(line 129,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError1()",
        "snippet": "  public void testParseNamedTypeError1() throws Exception {\n    // To avoid parsing ambiguities, type names must end in a '.' to\n    // get the continuation behavior.\n    parse(\"@type {!goog\\n * .Bar} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 132,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 136,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError2()",
        "snippet": "  public void testParseNamedTypeError2() throws Exception {\n    parse(\"@type {!goog.\\n * Bar\\n * .Baz} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 141,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType1()",
        "snippet": "  public void testTypedefType1() throws Exception {\n    JSDocInfo info = parse(\"@typedef string */\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 49)",
            "(line 146,col 5)-(line 146,col 38)",
            "(line 147,col 5)-(line 147,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType2()",
        "snippet": "  public void testTypedefType2() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {string}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 150,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 53)",
            "(line 152,col 5)-(line 152,col 38)",
            "(line 153,col 5)-(line 153,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType3()",
        "snippet": "  public void testTypedefType3() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {(string|number)}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        info.getTypedefType());\n  }\n",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 62)",
            "(line 158,col 5)-(line 158,col 38)",
            "(line 159,col 5)-(line 161,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType1()",
        "snippet": "  public void testParseStringType1() throws Exception {\n    assertTypeEquals(STRING_TYPE, parse(\"@type {string}*/\").getType());\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType2()",
        "snippet": "  public void testParseStringType2() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE, parse(\"@type {!String}*/\").getType());\n  }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType1()",
        "snippet": "  public void testParseBooleanType1() throws Exception {\n    assertTypeEquals(BOOLEAN_TYPE, parse(\"@type {boolean}*/\").getType());\n  }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType2()",
        "snippet": "  public void testParseBooleanType2() throws Exception {\n    assertTypeEquals(\n        BOOLEAN_OBJECT_TYPE, parse(\"@type {!Boolean}*/\").getType());\n  }\n",
        "begin_line": 176,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 177,col 5)-(line 178,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType1()",
        "snippet": "  public void testParseNumberType1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@type {number}*/\").getType());\n  }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType2()",
        "snippet": "  public void testParseNumberType2() throws Exception {\n    assertTypeEquals(NUMBER_OBJECT_TYPE, parse(\"@type {!Number}*/\").getType());\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType1()",
        "snippet": "  public void testParseNullType1() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {null}*/\").getType());\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType2()",
        "snippet": "  public void testParseNullType2() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {Null}*/\").getType());\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType1()",
        "snippet": "  public void testParseAllType1() throws Exception {\n    testParseType(\"*\");\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType2()",
        "snippet": "  public void testParseAllType2() throws Exception {\n    testParseType(\"*?\", \"*\");\n  }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseObjectType()",
        "snippet": "  public void testParseObjectType() throws Exception {\n    assertTypeEquals(OBJECT_TYPE, parse(\"@type {!Object}*/\").getType());\n  }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDateType()",
        "snippet": "  public void testParseDateType() throws Exception {\n    assertTypeEquals(DATE_TYPE, parse(\"@type {!Date}*/\").getType());\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionType()",
        "snippet": "  public void testParseFunctionType() throws Exception {\n    assertTypeEquals(\n        createNullableType(U2U_CONSTRUCTOR_TYPE),\n        parse(\"@type {Function}*/\").getType());\n  }\n",
        "begin_line": 213,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 214,col 5)-(line 216,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRegExpType()",
        "snippet": "  public void testParseRegExpType() throws Exception {\n    assertTypeEquals(REGEXP_TYPE, parse(\"@type {!RegExp}*/\").getType());\n  }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseErrorTypes()",
        "snippet": "  public void testParseErrorTypes() throws Exception {\n    assertTypeEquals(ERROR_TYPE, parse(\"@type {!Error}*/\").getType());\n    assertTypeEquals(URI_ERROR_TYPE, parse(\"@type {!URIError}*/\").getType());\n    assertTypeEquals(EVAL_ERROR_TYPE, parse(\"@type {!EvalError}*/\").getType());\n    assertTypeEquals(REFERENCE_ERROR_TYPE,\n        parse(\"@type {!ReferenceError}*/\").getType());\n    assertTypeEquals(TYPE_ERROR_TYPE, parse(\"@type {!TypeError}*/\").getType());\n    assertTypeEquals(\n        RANGE_ERROR_TYPE, parse(\"@type {!RangeError}*/\").getType());\n    assertTypeEquals(\n        SYNTAX_ERROR_TYPE, parse(\"@type {!SyntaxError}*/\").getType());\n  }\n",
        "begin_line": 223,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 70)",
            "(line 225,col 5)-(line 225,col 77)",
            "(line 226,col 5)-(line 226,col 79)",
            "(line 227,col 5)-(line 228,col 54)",
            "(line 229,col 5)-(line 229,col 79)",
            "(line 230,col 5)-(line 231,col 68)",
            "(line 232,col 5)-(line 233,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType1()",
        "snippet": "  public void testParseUndefinedType1() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {undefined}*/\").getType());\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType2()",
        "snippet": "  public void testParseUndefinedType2() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {Undefined}*/\").getType());\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType3()",
        "snippet": "  public void testParseUndefinedType3() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {void}*/\").getType());\n  }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType1()",
        "snippet": "  public void testParseTemplatizedType1() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<number> */\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n  }\n",
        "begin_line": 248,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 55)",
            "(line 250,col 5)-(line 251,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType2()",
        "snippet": "  public void testParseTemplatizedType2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n  }\n",
        "begin_line": 254,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 56)",
            "(line 256,col 5)-(line 257,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType3()",
        "snippet": "  public void testParseTemplatizedType3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,null)>*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 260,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 61)",
            "(line 262,col 5)-(line 265,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType4()",
        "snippet": "  public void testParseTemplatizedType4() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<(number|null)>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 63)",
            "(line 270,col 5)-(line 273,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType5()",
        "snippet": "  public void testParseTemplatizedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Array.<(number|null)>>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(NULL_TYPE,\n                createTemplatizedType(ARRAY_TYPE,\n                    createUnionType(NUMBER_TYPE, NULL_TYPE)))),\n        info.getType());\n  }\n",
        "begin_line": 276,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 71)",
            "(line 278,col 5)-(line 283,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType6()",
        "snippet": "  public void testParseTemplatizedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<!Array.<(number|null)>>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createTemplatizedType(ARRAY_TYPE,\n                createUnionType(NUMBER_TYPE, NULL_TYPE))),\n        info.getType());\n  }\n",
        "begin_line": 286,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 72)",
            "(line 288,col 5)-(line 292,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType7()",
        "snippet": "  public void testParseTemplatizedType7() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():Date>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            registry.createFunctionType(\n                createUnionType(DATE_TYPE, NULL_TYPE))),\n        info.getType());\n  }\n",
        "begin_line": 295,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 296,col 5)-(line 296,col 65)",
            "(line 297,col 5)-(line 301,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType8()",
        "snippet": "  public void testParseTemplatizedType8() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():!Date>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            registry.createFunctionType(DATE_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 304,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 66)",
            "(line 306,col 5)-(line 309,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType9()",
        "snippet": "  public void testParseTemplatizedType9() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(DATE_TYPE, NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 312,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 313,col 5)-(line 313,col 61)",
            "(line 314,col 5)-(line 317,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType10()",
        "snippet": "  public void testParseTemplatizedType10() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number|boolean>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(DATE_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 320,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 321,col 5)-(line 321,col 69)",
            "(line 322,col 5)-(line 325,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType11()",
        "snippet": "  public void testParseTemplatizedType11() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            OBJECT_TYPE, ImmutableList.of(UNKNOWN_TYPE, NUMBER_TYPE)),\n        info.getType());\n    assertTemplatizedTypeEquals(\n        JSTypeRegistry.OBJECT_ELEMENT_TEMPLATE, NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 328,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 57)",
            "(line 330,col 5)-(line 333,col 24)",
            "(line 334,col 5)-(line 335,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType12()",
        "snippet": "  public void testParseTemplatizedType12() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<string,number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            OBJECT_TYPE, ImmutableList.of(STRING_TYPE, NUMBER_TYPE)),\n        info.getType());\n    assertTemplatizedTypeEquals(\n        JSTypeRegistry.OBJECT_ELEMENT_TEMPLATE, NUMBER_TYPE, info.getType());\n    assertTemplatizedTypeEquals(\n        JSTypeRegistry.OBJECT_INDEX_TEMPLATE, STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 338,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 339,col 5)-(line 339,col 64)",
            "(line 340,col 5)-(line 343,col 24)",
            "(line 344,col 5)-(line 345,col 77)",
            "(line 346,col 5)-(line 347,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType13()",
        "snippet": "  public void testParseTemplatizedType13() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<?> */\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, UNKNOWN_TYPE), info.getType());\n  }\n",
        "begin_line": 350,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 351,col 5)-(line 351,col 50)",
            "(line 352,col 5)-(line 353,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType1()",
        "snippet": "  public void testParseUnionType1() throws Exception {\n    JSDocInfo info = parse(\"@type {(boolean,null)}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 357,col 55)",
            "(line 358,col 5)-(line 358,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType2()",
        "snippet": "  public void testParseUnionType2() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean|null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 362,col 53)",
            "(line 363,col 5)-(line 363,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType3()",
        "snippet": "  public void testParseUnionType3() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean||null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 367,col 54)",
            "(line 368,col 5)-(line 368,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType4()",
        "snippet": "  public void testParseUnionType4() throws Exception {\n    JSDocInfo info = parse(\"@type {(Array.<boolean>,null)}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 371,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 63)",
            "(line 373,col 5)-(line 375,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType5()",
        "snippet": "  public void testParseUnionType5() throws Exception {\n    JSDocInfo info = parse(\"@type {(null, Array.<boolean>)}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 378,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 379,col 5)-(line 379,col 64)",
            "(line 380,col 5)-(line 382,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType6()",
        "snippet": "  public void testParseUnionType6() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>|null}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 385,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 386,col 61)",
            "(line 387,col 5)-(line 389,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType7()",
        "snippet": "  public void testParseUnionType7() throws Exception {\n    JSDocInfo info = parse(\"@type {null|Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 392,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 393,col 61)",
            "(line 394,col 5)-(line 396,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType8()",
        "snippet": "  public void testParseUnionType8() throws Exception {\n    JSDocInfo info = parse(\"@type {null||Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 399,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 400,col 5)-(line 400,col 62)",
            "(line 401,col 5)-(line 403,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType9()",
        "snippet": "  public void testParseUnionType9() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>||null}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 406,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 62)",
            "(line 408,col 5)-(line 410,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType10()",
        "snippet": "  public void testParseUnionType10() throws Exception {\n    parse(\"@type {string|}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 415,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType11()",
        "snippet": "  public void testParseUnionType11() throws Exception {\n    parse(\"@type {(string,)}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 418,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 420,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType12()",
        "snippet": "  public void testParseUnionType12() throws Exception {\n    parse(\"@type {()}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 425,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType13()",
        "snippet": "  public void testParseUnionType13() throws Exception {\n    testParseType(\n        \"(function(this:Date),function(this:String):number)\",\n        \"Function\");\n  }\n",
        "begin_line": 428,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 431,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType14()",
        "snippet": "  public void testParseUnionType14() throws Exception {\n    testParseType(\n        \"(function(...[function(number):boolean]):number)|\" +\n        \"function(this:String, string):number\",\n        \"Function\");\n  }\n",
        "begin_line": 434,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 438,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType15()",
        "snippet": "  public void testParseUnionType15() throws Exception {\n    testParseType(\"*|number\", \"*\");\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType16()",
        "snippet": "  public void testParseUnionType16() throws Exception {\n    testParseType(\"number|*\", \"*\");\n  }\n",
        "begin_line": 445,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 446,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType17()",
        "snippet": "  public void testParseUnionType17() throws Exception {\n    testParseType(\"string|number|*\", \"*\");\n  }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 450,col 5)-(line 450,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType18()",
        "snippet": "  public void testParseUnionType18() throws Exception {\n    testParseType(\"(string,*,number)\", \"*\");\n  }\n",
        "begin_line": 453,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 454,col 5)-(line 454,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionTypeError1()",
        "snippet": "  public void testParseUnionTypeError1() throws Exception {\n    parse(\"@type {(string,|number)} */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 459,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType1()",
        "snippet": "  public void testParseUnknownType1() throws Exception {\n    testParseType(\"?\");\n  }\n",
        "begin_line": 462,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 463,col 5)-(line 463,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType2()",
        "snippet": "  public void testParseUnknownType2() throws Exception {\n    testParseType(\"(?|number)\", \"?\");\n  }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType3()",
        "snippet": "  public void testParseUnknownType3() throws Exception {\n    testParseType(\"(number|?)\", \"?\");\n  }\n",
        "begin_line": 470,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType1()",
        "snippet": "  public void testParseFunctionalType1() throws Exception {\n    testParseType(\"function (): number\");\n  }\n",
        "begin_line": 474,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 475,col 5)-(line 475,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType2()",
        "snippet": "  public void testParseFunctionalType2() throws Exception {\n    testParseType(\"function (number, string): boolean\");\n  }\n",
        "begin_line": 478,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 479,col 5)-(line 479,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType3()",
        "snippet": "  public void testParseFunctionalType3() throws Exception {\n    testParseType(\n        \"function(this:Array)\", \"function (this:Array): ?\");\n  }\n",
        "begin_line": 482,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 483,col 5)-(line 484,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType4()",
        "snippet": "  public void testParseFunctionalType4() throws Exception {\n    testParseType(\"function (...[number]): boolean\");\n  }\n",
        "begin_line": 487,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType5()",
        "snippet": "  public void testParseFunctionalType5() throws Exception {\n    testParseType(\"function (number, ...[string]): boolean\");\n  }\n",
        "begin_line": 491,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 492,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType6()",
        "snippet": "  public void testParseFunctionalType6() throws Exception {\n    testParseType(\n        \"function (this:Date, number): (boolean|number|string)\");\n  }\n",
        "begin_line": 495,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 497,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType7()",
        "snippet": "  public void testParseFunctionalType7() throws Exception {\n    testParseType(\"function()\", \"function (): ?\");\n  }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 501,col 5)-(line 501,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType8()",
        "snippet": "  public void testParseFunctionalType8() throws Exception {\n    testParseType(\n        \"function(this:Array,...[boolean])\",\n        \"function (this:Array, ...[boolean]): ?\");\n  }\n",
        "begin_line": 504,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 505,col 5)-(line 507,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType9()",
        "snippet": "  public void testParseFunctionalType9() throws Exception {\n    testParseType(\n        \"function(this:Array,!Date,...[boolean?])\",\n        \"function (this:Array, Date, ...[(boolean|null)]): ?\");\n  }\n",
        "begin_line": 510,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 511,col 5)-(line 513,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType10()",
        "snippet": "  public void testParseFunctionalType10() throws Exception {\n    testParseType(\n        \"function(...[Object?]):boolean?\",\n        \"function (...[(Object|null)]): (boolean|null)\");\n  }\n",
        "begin_line": 516,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 517,col 5)-(line 519,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType11()",
        "snippet": "  public void testParseFunctionalType11() throws Exception {\n    testParseType(\n        \"function(...[[number]]):[number?]\",\n        \"function (...[Array]): Array\");\n  }\n",
        "begin_line": 522,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 525,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType12()",
        "snippet": "  public void testParseFunctionalType12() throws Exception {\n    testParseType(\n        \"function(...)\",\n        \"function (...[?]): ?\");\n  }\n",
        "begin_line": 528,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 529,col 5)-(line 531,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType13()",
        "snippet": "  public void testParseFunctionalType13() throws Exception {\n    testParseType(\n        \"function(...): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 534,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 535,col 5)-(line 537,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType14()",
        "snippet": "  public void testParseFunctionalType14() throws Exception {\n    testParseType(\"function (*, string, number): boolean\");\n  }\n",
        "begin_line": 540,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 541,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType15()",
        "snippet": "  public void testParseFunctionalType15() throws Exception {\n    testParseType(\"function (?, string): boolean\");\n  }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 545,col 5)-(line 545,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType16()",
        "snippet": "  public void testParseFunctionalType16() throws Exception {\n    testParseType(\"function (string, ?): ?\");\n  }\n",
        "begin_line": 548,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType17()",
        "snippet": "  public void testParseFunctionalType17() throws Exception {\n    testParseType(\"(function (?): ?|number)\");\n  }\n",
        "begin_line": 552,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 553,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType18()",
        "snippet": "  public void testParseFunctionalType18() throws Exception {\n    testParseType(\"function (?): (?|number)\", \"function (?): ?\");\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType19()",
        "snippet": "  public void testParseFunctionalType19() throws Exception {\n    testParseType(\n        \"function(...[?]): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 560,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 561,col 5)-(line 563,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStructuralConstructor()",
        "snippet": "  public void testStructuralConstructor() throws Exception {\n    JSType type = testParseType(\n        \"function (new:Object)\", \"function (new:Object): ?\");\n    assertTrue(type.isConstructor());\n    assertFalse(type.isNominalConstructor());\n  }\n",
        "begin_line": 566,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 567,col 5)-(line 568,col 61)",
            "(line 569,col 5)-(line 569,col 37)",
            "(line 570,col 5)-(line 570,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNominalConstructor()",
        "snippet": "  public void testNominalConstructor() throws Exception {\n    ObjectType type = testParseType(\"Array\", \"(Array|null)\").dereference();\n    assertTrue(type.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 573,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 574,col 75)",
            "(line 575,col 5)-(line 575,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug1419535()",
        "snippet": "  public void testBug1419535() throws Exception {\n    parse(\"@type {function(Object, string, *)?} */\");\n    parse(\"@type {function(Object, string, *)|null} */\");\n  }\n",
        "begin_line": 578,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 579,col 53)",
            "(line 580,col 5)-(line 580,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIssue477()",
        "snippet": "  public void testIssue477() throws Exception {\n    parse(\"@type function */\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 583,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 585,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMalformedThisAnnotation()",
        "snippet": "  public void testMalformedThisAnnotation() throws Exception {\n    parse(\"@this */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 588,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 589,col 5)-(line 590,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError1()",
        "snippet": "  public void testParseFunctionalTypeError1() throws Exception {\n    parse(\"@type {function number):string}*/\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 593,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 594,col 5)-(line 595,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError2()",
        "snippet": "  public void testParseFunctionalTypeError2() throws Exception {\n    parse(\"@type {function( number}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 598,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 600,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError3()",
        "snippet": "  public void testParseFunctionalTypeError3() throws Exception {\n    parse(\"@type {function(...[number], string)}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 603,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 605,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError4()",
        "snippet": "  public void testParseFunctionalTypeError4() throws Exception {\n    parse(\"@type {function(string, ...[number], boolean):string}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 608,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 609,col 5)-(line 610,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError5()",
        "snippet": "  public void testParseFunctionalTypeError5() throws Exception {\n    parse(\"@type {function (thi:Array)}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 613,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 615,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError6()",
        "snippet": "  public void testParseFunctionalTypeError6() throws Exception {\n    resolve(parse(\"@type {function (this:number)}*/\").getType(),\n        \"this type must be an object type\");\n  }\n",
        "begin_line": 618,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 620,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError7()",
        "snippet": "  public void testParseFunctionalTypeError7() throws Exception {\n    parse(\"@type {function(...[number)}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 623,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 625,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError8()",
        "snippet": "  public void testParseFunctionalTypeError8() throws Exception {\n    parse(\"@type {function(...number])}*/\",\n        \"Bad type annotation. missing opening [\");\n  }\n",
        "begin_line": 628,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 629,col 5)-(line 630,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError9()",
        "snippet": "  public void testParseFunctionalTypeError9() throws Exception {\n    parse(\"@type {function (new:Array, this:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 633,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 635,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError10()",
        "snippet": "  public void testParseFunctionalTypeError10() throws Exception {\n    parse(\"@type {function (this:Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 638,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 639,col 5)-(line 640,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError11()",
        "snippet": "  public void testParseFunctionalTypeError11() throws Exception {\n    parse(\"@type {function (Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 645,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError12()",
        "snippet": "  public void testParseFunctionalTypeError12() throws Exception {\n    resolve(parse(\"@type {function (new:number)}*/\").getType(),\n        \"constructed type must be an object type\");\n  }\n",
        "begin_line": 648,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 650,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType1()",
        "snippet": "  public void testParseArrayType1() throws Exception {\n    testParseType(\"[number]\", \"Array\");\n  }\n",
        "begin_line": 653,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 654,col 5)-(line 654,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType2()",
        "snippet": "  public void testParseArrayType2() throws Exception {\n    testParseType(\"[(number,boolean,[Object?])]\", \"Array\");\n  }\n",
        "begin_line": 657,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 658,col 5)-(line 658,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType3()",
        "snippet": "  public void testParseArrayType3() throws Exception {\n    testParseType(\"[[number],[string]]?\", \"(Array|null)\");\n  }\n",
        "begin_line": 661,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 662,col 5)-(line 662,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError1()",
        "snippet": "  public void testParseArrayTypeError1() throws Exception {\n    parse(\"@type {[number}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 665,
        "end_line": 668,
        "comment": "",
        "child_ranges": [
            "(line 666,col 5)-(line 667,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError2()",
        "snippet": "  public void testParseArrayTypeError2() throws Exception {\n    parse(\"@type {number]}*/\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 670,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 671,col 5)-(line 672,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError3()",
        "snippet": "  public void testParseArrayTypeError3() throws Exception {\n    parse(\"@type {[(number,boolean,Object?])]}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 675,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 676,col 5)-(line 677,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError4()",
        "snippet": "  public void testParseArrayTypeError4() throws Exception {\n    parse(\"@type {(number,boolean,[Object?)]}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 680,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 681,col 5)-(line 682,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String)",
        "snippet": "  private JSType testParseType(String type) throws Exception {\n    return testParseType(type, type);\n  }\n",
        "begin_line": 685,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 686,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String, java.lang.String)",
        "snippet": "  private JSType testParseType(\n      String type, String typeExpected) throws Exception {\n    JSDocInfo info = parse(\"@type {\" + type + \"}*/\");\n\n    assertNotNull(info);\n    assertTrue(info.hasType());\n\n    JSType actual = resolve(info.getType());\n    assertEquals(typeExpected, actual.toString());\n    return actual;\n  }\n",
        "begin_line": 689,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 691,col 53)",
            "(line 693,col 5)-(line 693,col 24)",
            "(line 694,col 5)-(line 694,col 31)",
            "(line 696,col 5)-(line 696,col 44)",
            "(line 697,col 5)-(line 697,col 50)",
            "(line 698,col 5)-(line 698,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers1()",
        "snippet": "  public void testParseNullableModifiers1() throws Exception {\n    JSDocInfo info = parse(\"@type {string?}*/\");\n    assertTypeEquals(createNullableType(STRING_TYPE), info.getType());\n  }\n",
        "begin_line": 701,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 702,col 48)",
            "(line 703,col 5)-(line 703,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers2()",
        "snippet": "  public void testParseNullableModifiers2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<string?>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            ARRAY_TYPE, createUnionType(STRING_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 706,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 57)",
            "(line 708,col 5)-(line 711,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers3()",
        "snippet": "  public void testParseNullableModifiers3() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>?}*/\");\n    assertTypeEquals(\n        createNullableType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 714,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 715,col 5)-(line 715,col 57)",
            "(line 716,col 5)-(line 718,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers4()",
        "snippet": "  public void testParseNullableModifiers4() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean)?}*/\");\n    assertTypeEquals(\n        createNullableType(createUnionType(STRING_TYPE, BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 721,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 722,col 58)",
            "(line 723,col 5)-(line 725,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers5()",
        "snippet": "  public void testParseNullableModifiers5() throws Exception {\n    JSDocInfo info = parse(\"@type {(string?,boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 728,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 58)",
            "(line 730,col 5)-(line 732,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers6()",
        "snippet": "  public void testParseNullableModifiers6() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean?)}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 735,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 736,col 5)-(line 736,col 58)",
            "(line 737,col 5)-(line 739,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers7()",
        "snippet": "  public void testParseNullableModifiers7() throws Exception {\n    JSDocInfo info = parse(\"@type {string?|boolean}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 742,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 743,col 5)-(line 743,col 56)",
            "(line 744,col 5)-(line 746,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers8()",
        "snippet": "  public void testParseNullableModifiers8() throws Exception {\n    JSDocInfo info = parse(\"@type {string|boolean?}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 749,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 750,col 56)",
            "(line 751,col 5)-(line 753,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers9()",
        "snippet": "  public void testParseNullableModifiers9() throws Exception {\n    JSDocInfo info = parse(\"@type {foo.Hello.World?}*/\");\n    assertTypeEquals(\n        createNullableType(\n            registry.createNamedType(\n                \"foo.Hello.World\", null, -1, -1)),\n        info.getType());\n  }\n",
        "begin_line": 756,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 757,col 5)-(line 757,col 57)",
            "(line 758,col 5)-(line 762,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOptionalModifier()",
        "snippet": "  public void testParseOptionalModifier() throws Exception {\n    JSDocInfo info = parse(\"@type {function(number=)}*/\");\n    assertTypeEquals(\n        registry.createFunctionType(\n            UNKNOWN_TYPE, registry.createOptionalParameters(NUMBER_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 765,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 766,col 58)",
            "(line 767,col 5)-(line 770,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline1()",
        "snippet": "  public void testParseNewline1() throws Exception {\n    JSDocInfo info = parse(\"@type {string\\n* }\\n*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 773,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 774,col 53)",
            "(line 775,col 5)-(line 775,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline2()",
        "snippet": "  public void testParseNewline2() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<\\n* number\\n* > */\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n  }\n",
        "begin_line": 778,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 779,col 63)",
            "(line 780,col 5)-(line 781,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline3()",
        "snippet": "  public void testParseNewline3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,\\n* null)>*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 784,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 785,col 5)-(line 785,col 65)",
            "(line 786,col 5)-(line 789,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline4()",
        "snippet": "  public void testParseNewline4() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number|\\n* null)>*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 792,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 793,col 5)-(line 793,col 65)",
            "(line 794,col 5)-(line 797,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline5()",
        "snippet": "  public void testParseNewline5() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<function(\\n* )\\n* :\\n* Date>*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            registry.createFunctionType(\n                createUnionType(DATE_TYPE, NULL_TYPE))),\n        info.getType());\n  }\n",
        "begin_line": 800,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 801,col 5)-(line 801,col 75)",
            "(line 802,col 5)-(line 806,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType1()",
        "snippet": "  public void testParseReturnType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {null|string|Array.<boolean>}*/\");\n    assertTypeEquals(\n        createUnionType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE),\n            NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 809,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 810,col 5)-(line 811,col 57)",
            "(line 812,col 5)-(line 815,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType2()",
        "snippet": "  public void testParseReturnType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@returns {null|(string,Array.<boolean>)}*/\");\n    assertTypeEquals(\n        createUnionType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE),\n            NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 818,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 820,col 60)",
            "(line 821,col 5)-(line 824,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType3()",
        "snippet": "  public void testParseReturnType3() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {((null||Array.<boolean>,string),boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE),\n            NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 827,
        "end_line": 834,
        "comment": "",
        "child_ranges": [
            "(line 828,col 5)-(line 829,col 70)",
            "(line 830,col 5)-(line 833,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType1()",
        "snippet": "  public void testParseThisType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@this {goog.foo.Bar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 836,
        "end_line": 842,
        "comment": "",
        "child_ranges": [
            "(line 837,col 5)-(line 838,col 40)",
            "(line 839,col 5)-(line 841,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType2()",
        "snippet": "  public void testParseThisType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@this goog.foo.Bar*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 844,
        "end_line": 850,
        "comment": "",
        "child_ranges": [
            "(line 845,col 5)-(line 846,col 38)",
            "(line 847,col 5)-(line 849,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType3()",
        "snippet": "  public void testParseThisType3() throws Exception {\n    parse(\"@type {number}\\n@this goog.foo.Bar*/\",\n        \"Bad type annotation. type annotation incompatible \" +\n        \"with other annotations\");\n  }\n",
        "begin_line": 852,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 853,col 5)-(line 855,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType4()",
        "snippet": "  public void testParseThisType4() throws Exception {\n    resolve(parse(\"@this number*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 858,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 859,col 5)-(line 860,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType5()",
        "snippet": "  public void testParseThisType5() throws Exception {\n    parse(\"@this {Date|Error}*/\");\n  }\n",
        "begin_line": 863,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 864,col 5)-(line 864,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType6()",
        "snippet": "  public void testParseThisType6() throws Exception {\n    resolve(parse(\"@this {Date|number}*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 867,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 868,col 5)-(line 869,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam1()",
        "snippet": "  public void testParseParam1() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 872,
        "end_line": 876,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 54)",
            "(line 874,col 5)-(line 874,col 46)",
            "(line 875,col 5)-(line 875,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam2()",
        "snippet": "  public void testParseParam2() throws Exception {\n    JSDocInfo info = parse(\"@param index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 878,
        "end_line": 882,
        "comment": "",
        "child_ranges": [
            "(line 879,col 5)-(line 879,col 45)",
            "(line 880,col 5)-(line 880,col 46)",
            "(line 881,col 5)-(line 881,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam3()",
        "snippet": "  public void testParseParam3() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 884,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 885,col 5)-(line 885,col 70)",
            "(line 886,col 5)-(line 886,col 46)",
            "(line 887,col 5)-(line 887,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam4()",
        "snippet": "  public void testParseParam4() throws Exception {\n    JSDocInfo info = parse(\"@param index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 890,
        "end_line": 894,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 61)",
            "(line 892,col 5)-(line 892,col 46)",
            "(line 893,col 5)-(line 893,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam5()",
        "snippet": "  public void testParseParam5() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 896,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 898,col 58)",
            "(line 899,col 5)-(line 899,col 46)",
            "(line 900,col 5)-(line 900,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam6()",
        "snippet": "  public void testParseParam6() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n * index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 903,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 905,col 5)-(line 905,col 60)",
            "(line 906,col 5)-(line 906,col 46)",
            "(line 907,col 5)-(line 907,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam7()",
        "snippet": "  public void testParseParam7() throws Exception {\n    // Optional @param\n    JSDocInfo info = parse(\"@param {number=} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 910,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 56)",
            "(line 913,col 5)-(line 915,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam8()",
        "snippet": "  public void testParseParam8() throws Exception {\n    // Var args @param\n    JSDocInfo info = parse(\"@param {...number} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 918,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 920,col 5)-(line 920,col 58)",
            "(line 921,col 5)-(line 923,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam9()",
        "snippet": "  public void testParseParam9() throws Exception {\n    parse(\"@param {...number=} index */\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 926,
        "end_line": 930,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 929,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam10()",
        "snippet": "  public void testParseParam10() throws Exception {\n    parse(\"@param {...number index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 932,
        "end_line": 935,
        "comment": "",
        "child_ranges": [
            "(line 933,col 5)-(line 934,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam11()",
        "snippet": "  public void testParseParam11() throws Exception {\n    parse(\"@param {number= index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 937,
        "end_line": 940,
        "comment": "",
        "child_ranges": [
            "(line 938,col 5)-(line 939,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam12()",
        "snippet": "  public void testParseParam12() throws Exception {\n    JSDocInfo info = parse(\"@param {...number|string} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 942,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 943,col 5)-(line 943,col 65)",
            "(line 944,col 5)-(line 947,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam13()",
        "snippet": "  public void testParseParam13() throws Exception {\n    JSDocInfo info = parse(\"@param {...(number|string)} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 950,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 67)",
            "(line 952,col 5)-(line 955,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam14()",
        "snippet": "  public void testParseParam14() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 958,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 959,col 5)-(line 959,col 57)",
            "(line 960,col 5)-(line 960,col 46)",
            "(line 961,col 5)-(line 963,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam15()",
        "snippet": "  public void testParseParam15() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index */\",\n        \"Bad type annotation. missing closing ]\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 966,
        "end_line": 971,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 968,col 50)",
            "(line 969,col 5)-(line 969,col 46)",
            "(line 970,col 5)-(line 970,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam16()",
        "snippet": "  public void testParseParam16() throws Exception {\n    JSDocInfo info = parse(\"@param {string} index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 973,
        "end_line": 977,
        "comment": "",
        "child_ranges": [
            "(line 974,col 5)-(line 974,col 56)",
            "(line 975,col 5)-(line 975,col 46)",
            "(line 976,col 5)-(line 976,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam17()",
        "snippet": "  public void testParseParam17() throws Exception {\n    JSDocInfo info = parse(\"@param {string=} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 979,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 980,col 58)",
            "(line 981,col 5)-(line 981,col 46)",
            "(line 982,col 5)-(line 984,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam18()",
        "snippet": "  public void testParseParam18() throws Exception {\n    JSDocInfo info = parse(\"@param {...string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 987,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 988,col 60)",
            "(line 989,col 5)-(line 989,col 46)",
            "(line 990,col 5)-(line 992,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam19()",
        "snippet": "  public void testParseParam19() throws Exception {\n    JSDocInfo info = parse(\"@param {...} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(UNKNOWN_TYPE),\n        info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 995,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 996,col 5)-(line 996,col 54)",
            "(line 997,col 5)-(line 997,col 46)",
            "(line 998,col 5)-(line 1000,col 40)",
            "(line 1001,col 5)-(line 1001,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam20()",
        "snippet": "  public void testParseParam20() throws Exception {\n    JSDocInfo info = parse(\"@param {?=} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 1004,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 1005,col 5)-(line 1005,col 51)",
            "(line 1006,col 5)-(line 1006,col 46)",
            "(line 1007,col 5)-(line 1008,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam21()",
        "snippet": "  public void testParseParam21() throws Exception {\n    JSDocInfo info = parse(\"@param {...?} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 1011,
        "end_line": 1017,
        "comment": "",
        "child_ranges": [
            "(line 1012,col 5)-(line 1012,col 53)",
            "(line 1013,col 5)-(line 1013,col 46)",
            "(line 1014,col 5)-(line 1015,col 54)",
            "(line 1016,col 5)-(line 1016,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows1()",
        "snippet": "  public void testParseThrows1() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number */\");\n    assertEquals(1, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 1019,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1020,col 5)-(line 1020,col 62)",
            "(line 1021,col 5)-(line 1021,col 50)",
            "(line 1022,col 5)-(line 1022,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows2()",
        "snippet": "  public void testParseThrows2() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number\\n \"\n                           + \"*@throws {String} A string */\");\n    assertEquals(2, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 1025,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 5)-(line 1027,col 62)",
            "(line 1028,col 5)-(line 1028,col 50)",
            "(line 1029,col 5)-(line 1029,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType1()",
        "snippet": "  public void testParseRecordType1() throws Exception {\n    parseFull(\"/** @param {{x}} n\\n*/\");\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType2()",
        "snippet": "  public void testParseRecordType2() throws Exception {\n    parseFull(\"/** @param {{z, y}} n\\n*/\");\n  }\n",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType3()",
        "snippet": "  public void testParseRecordType3() throws Exception {\n    parseFull(\"/** @param {{z, y, x, q, hello, thisisatest}} n\\n*/\");\n  }\n",
        "begin_line": 1040,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1041,col 5)-(line 1041,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType4()",
        "snippet": "  public void testParseRecordType4() throws Exception {\n    parseFull(\"/** @param {{a, 'a', 'hello', 2, this, do, while, for}} n\\n*/\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType5()",
        "snippet": "  public void testParseRecordType5() throws Exception {\n    parseFull(\"/** @param {{x : hello}} n\\n*/\");\n  }\n",
        "begin_line": 1048,
        "end_line": 1050,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1049,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType6()",
        "snippet": "  public void testParseRecordType6() throws Exception {\n    parseFull(\"/** @param {{'x' : hello}} n\\n*/\");\n  }\n",
        "begin_line": 1052,
        "end_line": 1054,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 5)-(line 1053,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType7()",
        "snippet": "  public void testParseRecordType7() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello}} n\\n*/\");\n  }\n",
        "begin_line": 1056,
        "end_line": 1058,
        "comment": "",
        "child_ranges": [
            "(line 1057,col 5)-(line 1057,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType8()",
        "snippet": "  public void testParseRecordType8() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : bar}} n\\n*/\");\n  }\n",
        "begin_line": 1060,
        "end_line": 1062,
        "comment": "",
        "child_ranges": [
            "(line 1061,col 5)-(line 1061,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType9()",
        "snippet": "  public void testParseRecordType9() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : {z : bar, 3 : meh}}} n\\n*/\");\n  }\n",
        "begin_line": 1064,
        "end_line": 1066,
        "comment": "",
        "child_ranges": [
            "(line 1065,col 5)-(line 1065,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType10()",
        "snippet": "  public void testParseRecordType10() throws Exception {\n    parseFull(\"/** @param {{__proto__ : moo}} n\\n*/\");\n  }\n",
        "begin_line": 1068,
        "end_line": 1070,
        "comment": "",
        "child_ranges": [
            "(line 1069,col 5)-(line 1069,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType11()",
        "snippet": "  public void testParseRecordType11() throws Exception {\n    parseFull(\"/** @param {{a : b} n\\n*/\",\n              \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1072,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1073,col 5)-(line 1074,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType12()",
        "snippet": "  public void testParseRecordType12() throws Exception {\n    parseFull(\"/** @param {{!hello : hey}} n\\n*/\",\n              \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 1077,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1078,col 5)-(line 1079,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType13()",
        "snippet": "  public void testParseRecordType13() throws Exception {\n    parseFull(\"/** @param {{x}|number} n\\n*/\");\n  }\n",
        "begin_line": 1082,
        "end_line": 1084,
        "comment": "",
        "child_ranges": [
            "(line 1083,col 5)-(line 1083,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType14()",
        "snippet": "  public void testParseRecordType14() throws Exception {\n    parseFull(\"/** @param {{x : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1086,
        "end_line": 1088,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1087,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType15()",
        "snippet": "  public void testParseRecordType15() throws Exception {\n    parseFull(\"/** @param {{'x' : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1090,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 5)-(line 1091,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType16()",
        "snippet": "  public void testParseRecordType16() throws Exception {\n    parseFull(\"/** @param {{x, y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1094,
        "end_line": 1096,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 5)-(line 1095,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType17()",
        "snippet": "  public void testParseRecordType17() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|number} n\\n*/\");\n  }\n",
        "begin_line": 1098,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1099,col 5)-(line 1099,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType18()",
        "snippet": "  public void testParseRecordType18() throws Exception {\n    parseFull(\"/** @param {number|{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1102,
        "end_line": 1104,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1103,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType19()",
        "snippet": "  public void testParseRecordType19() throws Exception {\n    parseFull(\"/** @param {?{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1106,
        "end_line": 1108,
        "comment": "",
        "child_ranges": [
            "(line 1107,col 5)-(line 1107,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType20()",
        "snippet": "  public void testParseRecordType20() throws Exception {\n    parseFull(\"/** @param {!{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1110,
        "end_line": 1112,
        "comment": "",
        "child_ranges": [
            "(line 1111,col 5)-(line 1111,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType21()",
        "snippet": "  public void testParseRecordType21() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|boolean} n\\n*/\");\n  }\n",
        "begin_line": 1114,
        "end_line": 1116,
        "comment": "",
        "child_ranges": [
            "(line 1115,col 5)-(line 1115,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType22()",
        "snippet": "  public void testParseRecordType22() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1118,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1119,col 5)-(line 1119,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType23()",
        "snippet": "  public void testParseRecordType23() throws Exception {\n    parseFull(\"/** @param {{x : function(), 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1122,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError1()",
        "snippet": "  public void testParseParamError1() throws Exception {\n    parseFull(\"/** @param\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1126,
        "end_line": 1129,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1128,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError2()",
        "snippet": "  public void testParseParamError2() throws Exception {\n    parseFull(\"/** @param {Number}*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1131,
        "end_line": 1134,
        "comment": "",
        "child_ranges": [
            "(line 1132,col 5)-(line 1133,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError3()",
        "snippet": "  public void testParseParamError3() throws Exception {\n    parseFull(\"/** @param {Number}\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1136,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1137,col 5)-(line 1138,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError4()",
        "snippet": "  public void testParseParamError4() throws Exception {\n    parseFull(\"/** @param {Number}\\n* * num */\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1141,
        "end_line": 1144,
        "comment": "",
        "child_ranges": [
            "(line 1142,col 5)-(line 1143,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError5()",
        "snippet": "  public void testParseParamError5() throws Exception {\n    parse(\"@param {number} x \\n * @param {string} x */\",\n        \"Bad type annotation. duplicate variable name \\\"x\\\"\");\n  }\n",
        "begin_line": 1146,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1147,col 5)-(line 1148,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends1()",
        "snippet": "  public void testParseExtends1() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n                     parse(\"@extends String*/\").getBaseType());\n  }\n",
        "begin_line": 1151,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1152,col 5)-(line 1153,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends2()",
        "snippet": "  public void testParseExtends2() throws Exception {\n    JSDocInfo info = parse(\"@extends com.google.Foo.Bar.Hello.World*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1156,
        "end_line": 1162,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1157,col 72)",
            "(line 1158,col 5)-(line 1161,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsGenerics()",
        "snippet": "  public void testParseExtendsGenerics() throws Exception {\n    JSDocInfo info =\n        parse(\"@extends com.google.Foo.Bar.Hello.World.<Boolean,number>*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1164,
        "end_line": 1171,
        "comment": "",
        "child_ranges": [
            "(line 1165,col 5)-(line 1166,col 76)",
            "(line 1167,col 5)-(line 1170,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsGenerics()",
        "snippet": "  public void testParseImplementsGenerics() throws Exception {\n    // For types that are not templatized, <> annotations are ignored.\n    List<JSTypeExpression> interfaces =\n        parse(\"@implements {SomeInterface.<*>} */\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1173,
        "end_line": 1181,
        "comment": "",
        "child_ranges": [
            "(line 1175,col 5)-(line 1177,col 36)",
            "(line 1178,col 5)-(line 1178,col 39)",
            "(line 1179,col 5)-(line 1180,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends4()",
        "snippet": "  public void testParseExtends4() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1183,
        "end_line": 1186,
        "comment": "",
        "child_ranges": [
            "(line 1184,col 5)-(line 1185,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends5()",
        "snippet": "  public void testParseExtends5() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String*/\",\n              \"Bad type annotation. expected closing }\").getBaseType());\n  }\n",
        "begin_line": 1188,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1189,col 5)-(line 1191,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends6()",
        "snippet": "  public void testParseExtends6() throws Exception {\n    // Multi-line extends\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends \\n * {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1194,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1196,col 5)-(line 1197,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsInvalidName()",
        "snippet": "  public void testParseExtendsInvalidName() throws Exception {\n    // This looks bad, but for the time being it should be OK, as\n    // we will not find a type with this name in the JS parsed tree.\n    // If this is fixed in the future, change this test to check for a\n    // warning/error message.\n    assertTypeEquals(\n        registry.createNamedType(\"some_++#%$%_UglyString\", null, -1, -1),\n        parse(\"@extends {some_++#%$%_UglyString} */\").getBaseType());\n  }\n",
        "begin_line": 1200,
        "end_line": 1208,
        "comment": "",
        "child_ranges": [
            "(line 1205,col 5)-(line 1207,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable1()",
        "snippet": "  public void testParseExtendsNullable1() throws Exception {\n    parse(\"@extends {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1210,
        "end_line": 1212,
        "comment": "",
        "child_ranges": [
            "(line 1211,col 5)-(line 1211,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable2()",
        "snippet": "  public void testParseExtendsNullable2() throws Exception {\n    parse(\"@extends Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1214,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 5)-(line 1216,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum1()",
        "snippet": "  public void testParseEnum1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@enum*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1219,
        "end_line": 1221,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 5)-(line 1220,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum2()",
        "snippet": "  public void testParseEnum2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum {string}*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1223,
        "end_line": 1226,
        "comment": "",
        "child_ranges": [
            "(line 1224,col 5)-(line 1225,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum3()",
        "snippet": "  public void testParseEnum3() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum string*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1228,
        "end_line": 1231,
        "comment": "",
        "child_ranges": [
            "(line 1229,col 5)-(line 1230,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc1()",
        "snippet": "  public void testParseDesc1() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!*/\").getDescription());\n  }\n",
        "begin_line": 1233,
        "end_line": 1236,
        "comment": "",
        "child_ranges": [
            "(line 1234,col 5)-(line 1235,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc2()",
        "snippet": "  public void testParseDesc2() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1238,
        "end_line": 1241,
        "comment": "",
        "child_ranges": [
            "(line 1239,col 5)-(line 1240,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc3()",
        "snippet": "  public void testParseDesc3() throws Exception {\n    assertEquals(\"\", parse(\"@desc*/\").getDescription());\n  }\n",
        "begin_line": 1243,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1244,col 5)-(line 1244,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc4()",
        "snippet": "  public void testParseDesc4() throws Exception {\n    assertEquals(\"\", parse(\"@desc\\n*/\").getDescription());\n  }\n",
        "begin_line": 1247,
        "end_line": 1249,
        "comment": "",
        "child_ranges": [
            "(line 1248,col 5)-(line 1248,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc5()",
        "snippet": "  public void testParseDesc5() throws Exception {\n    assertEquals(\"hello world!\",\n                 parse(\"@desc hello\\nworld!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1251,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1252,col 5)-(line 1253,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc6()",
        "snippet": "  public void testParseDesc6() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello\\n* world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1256,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1257,col 5)-(line 1258,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc7()",
        "snippet": "  public void testParseDesc7() throws Exception {\n    assertEquals(\"a b c\", parse(\"@desc a\\n\\nb\\nc*/\").getDescription());\n  }\n",
        "begin_line": 1261,
        "end_line": 1263,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 5)-(line 1262,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc8()",
        "snippet": "  public void testParseDesc8() throws Exception {\n    assertEquals(\"a b c d\",\n        parse(\"@desc a\\n      *b\\n\\n  *c\\n\\nd*/\").getDescription());\n  }\n",
        "begin_line": 1265,
        "end_line": 1268,
        "comment": "",
        "child_ranges": [
            "(line 1266,col 5)-(line 1267,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc9()",
        "snippet": "  public void testParseDesc9() throws Exception {\n    String comment = \"@desc\\n.\\n,\\n{\\n)\\n}\\n|\\n.<\\n>\\n<\\n?\\n~\\n+\\n-\\n;\\n:\\n*/\";\n\n    assertEquals(\". , { ) } | .< > < ? ~ + - ; :\",\n        parse(comment).getDescription());\n  }\n",
        "begin_line": 1270,
        "end_line": 1275,
        "comment": "",
        "child_ranges": [
            "(line 1271,col 5)-(line 1271,col 79)",
            "(line 1273,col 5)-(line 1274,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc10()",
        "snippet": "  public void testParseDesc10() throws Exception {\n    String comment = \"@desc\\n?\\n?\\n?\\n?*/\";\n\n    assertEquals(\"? ? ? ?\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1277,
        "end_line": 1281,
        "comment": "",
        "child_ranges": [
            "(line 1278,col 5)-(line 1278,col 43)",
            "(line 1280,col 5)-(line 1280,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc11()",
        "snippet": "  public void testParseDesc11() throws Exception {\n    String comment = \"@desc :[]*/\";\n\n    assertEquals(\":[]\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1283,
        "end_line": 1287,
        "comment": "",
        "child_ranges": [
            "(line 1284,col 5)-(line 1284,col 35)",
            "(line 1286,col 5)-(line 1286,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc12()",
        "snippet": "  public void testParseDesc12() throws Exception {\n    String comment = \"@desc\\n:\\n[\\n]\\n...*/\";\n\n    assertEquals(\": [ ] ...\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1289,
        "end_line": 1293,
        "comment": "",
        "child_ranges": [
            "(line 1290,col 5)-(line 1290,col 45)",
            "(line 1292,col 5)-(line 1292,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning1()",
        "snippet": "  public void testParseMeaning1() throws Exception {\n    assertEquals(\"tigers\",\n        parse(\"@meaning tigers   */\").getMeaning());\n  }\n",
        "begin_line": 1295,
        "end_line": 1298,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 5)-(line 1297,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning2()",
        "snippet": "  public void testParseMeaning2() throws Exception {\n    assertEquals(\"tigers and lions and bears\",\n        parse(\"@meaning tigers\\n * and lions\\n * and bears */\").getMeaning());\n  }\n",
        "begin_line": 1300,
        "end_line": 1303,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 5)-(line 1302,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning3()",
        "snippet": "  public void testParseMeaning3() throws Exception {\n    JSDocInfo info =\n        parse(\"@meaning  tigers\\n * and lions\\n * @desc  and bears */\");\n    assertEquals(\"tigers and lions\", info.getMeaning());\n    assertEquals(\"and bears\", info.getDescription());\n  }\n",
        "begin_line": 1305,
        "end_line": 1310,
        "comment": "",
        "child_ranges": [
            "(line 1306,col 5)-(line 1307,col 72)",
            "(line 1308,col 5)-(line 1308,col 56)",
            "(line 1309,col 5)-(line 1309,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning4()",
        "snippet": "  public void testParseMeaning4() throws Exception {\n    parse(\"@meaning  tigers\\n * @meaning and lions  */\",\n        \"extra @meaning tag\");\n  }\n",
        "begin_line": 1312,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1313,col 5)-(line 1314,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends1()",
        "snippet": "  public void testParseLends1() throws Exception {\n    JSDocInfo info = parse(\"@lends {name} */\");\n    assertEquals(\"name\", info.getLendsName());\n  }\n",
        "begin_line": 1317,
        "end_line": 1320,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 5)-(line 1318,col 47)",
            "(line 1319,col 5)-(line 1319,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends2()",
        "snippet": "  public void testParseLends2() throws Exception {\n    JSDocInfo info = parse(\"@lends   foo.bar  */\");\n    assertEquals(\"foo.bar\", info.getLendsName());\n  }\n",
        "begin_line": 1322,
        "end_line": 1325,
        "comment": "",
        "child_ranges": [
            "(line 1323,col 5)-(line 1323,col 51)",
            "(line 1324,col 5)-(line 1324,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends3()",
        "snippet": "  public void testParseLends3() throws Exception {\n    parse(\"@lends {name */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1327,
        "end_line": 1329,
        "comment": "",
        "child_ranges": [
            "(line 1328,col 5)-(line 1328,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends4()",
        "snippet": "  public void testParseLends4() throws Exception {\n    parse(\"@lends {} */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1331,
        "end_line": 1334,
        "comment": "",
        "child_ranges": [
            "(line 1332,col 5)-(line 1333,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends5()",
        "snippet": "  public void testParseLends5() throws Exception {\n    parse(\"@lends } */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1336,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1337,col 5)-(line 1338,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends6()",
        "snippet": "  public void testParseLends6() throws Exception {\n    parse(\"@lends {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1341,
        "end_line": 1344,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1343,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends7()",
        "snippet": "  public void testParseLends7() throws Exception {\n    parse(\"@type {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1346,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 5)-(line 1348,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParsePreserve()",
        "snippet": "  public void testParsePreserve() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@preserve Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\nBar\\n\\nBaz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1351,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 28)",
            "(line 1353,col 5)-(line 1353,col 63)",
            "(line 1354,col 5)-(line 1354,col 51)",
            "(line 1355,col 5)-(line 1355,col 19)",
            "(line 1356,col 5)-(line 1356,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicense()",
        "snippet": "  public void testParseLicense() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\nBar\\n\\nBaz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1359,
        "end_line": 1365,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1360,col 28)",
            "(line 1361,col 5)-(line 1361,col 63)",
            "(line 1362,col 5)-(line 1362,col 50)",
            "(line 1363,col 5)-(line 1363,col 19)",
            "(line 1364,col 5)-(line 1364,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseAscii()",
        "snippet": "  public void testParseLicenseAscii() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\n *   Bar\\n\\n  Baz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\n   Bar\\n\\n  Baz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1367,
        "end_line": 1373,
        "comment": "",
        "child_ranges": [
            "(line 1368,col 5)-(line 1368,col 28)",
            "(line 1369,col 5)-(line 1369,col 63)",
            "(line 1370,col 5)-(line 1370,col 57)",
            "(line 1371,col 5)-(line 1371,col 19)",
            "(line 1372,col 5)-(line 1372,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseWithAnnotation()",
        "snippet": "  public void testParseLicenseWithAnnotation() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    parse(comment);\n    assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1375,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1376,col 5)-(line 1376,col 28)",
            "(line 1377,col 5)-(line 1377,col 63)",
            "(line 1378,col 5)-(line 1378,col 66)",
            "(line 1379,col 5)-(line 1379,col 19)",
            "(line 1380,col 5)-(line 1381,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine1()",
        "snippet": "  public void testParseDefine1() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string}*/\").getType());\n  }\n",
        "begin_line": 1384,
        "end_line": 1387,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 5)-(line 1386,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine2()",
        "snippet": "  public void testParseDefine2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string*/\",\n              \"Bad type annotation. expected closing }\").getType());\n  }\n",
        "begin_line": 1389,
        "end_line": 1393,
        "comment": "",
        "child_ranges": [
            "(line 1390,col 5)-(line 1392,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine3()",
        "snippet": "  public void testParseDefine3() throws Exception {\n    JSDocInfo info = parse(\"@define {boolean}*/\");\n    assertTrue(info.isConstant());\n    assertTrue(info.isDefine());\n    assertTypeEquals(BOOLEAN_TYPE, info.getType());\n  }\n",
        "begin_line": 1395,
        "end_line": 1400,
        "comment": "",
        "child_ranges": [
            "(line 1396,col 5)-(line 1396,col 50)",
            "(line 1397,col 5)-(line 1397,col 34)",
            "(line 1398,col 5)-(line 1398,col 32)",
            "(line 1399,col 5)-(line 1399,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine4()",
        "snippet": "  public void testParseDefine4() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@define {number}*/\").getType());\n  }\n",
        "begin_line": 1402,
        "end_line": 1404,
        "comment": "",
        "child_ranges": [
            "(line 1403,col 5)-(line 1403,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine5()",
        "snippet": "  public void testParseDefine5() throws Exception {\n    assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),\n        parse(\"@define {number|boolean}*/\").getType());\n  }\n",
        "begin_line": 1406,
        "end_line": 1409,
        "comment": "",
        "child_ranges": [
            "(line 1407,col 5)-(line 1408,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors1()",
        "snippet": "  public void testParseDefineErrors1() throws Exception {\n    parse(\"@enum {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1411,
        "end_line": 1413,
        "comment": "",
        "child_ranges": [
            "(line 1412,col 5)-(line 1412,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors2()",
        "snippet": "  public void testParseDefineErrors2() throws Exception {\n    parse(\"@define {string}\\n @enum {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1415,
        "end_line": 1419,
        "comment": "",
        "child_ranges": [
            "(line 1416,col 5)-(line 1418,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors3()",
        "snippet": "  public void testParseDefineErrors3() throws Exception {\n    parse(\"@const\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1421,
        "end_line": 1423,
        "comment": "",
        "child_ranges": [
            "(line 1422,col 5)-(line 1422,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors4()",
        "snippet": "  public void testParseDefineErrors4() throws Exception {\n    parse(\"@type string \\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1425,
        "end_line": 1427,
        "comment": "",
        "child_ranges": [
            "(line 1426,col 5)-(line 1426,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors5()",
        "snippet": "  public void testParseDefineErrors5() throws Exception {\n    parse(\"@return {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1429,
        "end_line": 1431,
        "comment": "",
        "child_ranges": [
            "(line 1430,col 5)-(line 1430,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors7()",
        "snippet": "  public void testParseDefineErrors7() throws Exception {\n    parse(\"@define {string}\\n @const */\", \"conflicting @const tag\");\n  }\n",
        "begin_line": 1433,
        "end_line": 1435,
        "comment": "",
        "child_ranges": [
            "(line 1434,col 5)-(line 1434,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors8()",
        "snippet": "  public void testParseDefineErrors8() throws Exception {\n    parse(\"@define {string}\\n @type string */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1437,
        "end_line": 1441,
        "comment": "",
        "child_ranges": [
            "(line 1438,col 5)-(line 1440,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck1()",
        "snippet": "  public void testParseNoCheck1() throws Exception {\n    assertTrue(parse(\"@notypecheck*/\").isNoTypeCheck());\n  }\n",
        "begin_line": 1443,
        "end_line": 1445,
        "comment": "",
        "child_ranges": [
            "(line 1444,col 5)-(line 1444,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck2()",
        "snippet": "  public void testParseNoCheck2() throws Exception {\n    parse(\"@notypecheck\\n@notypecheck*/\", \"extra @notypecheck tag\");\n  }\n",
        "begin_line": 1447,
        "end_line": 1449,
        "comment": "",
        "child_ranges": [
            "(line 1448,col 5)-(line 1448,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride1()",
        "snippet": "  public void testParseOverride1() throws Exception {\n    assertTrue(parse(\"@override*/\").isOverride());\n  }\n",
        "begin_line": 1451,
        "end_line": 1453,
        "comment": "",
        "child_ranges": [
            "(line 1452,col 5)-(line 1452,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride2()",
        "snippet": "  public void testParseOverride2() throws Exception {\n    parse(\"@override\\n@override*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1455,
        "end_line": 1458,
        "comment": "",
        "child_ranges": [
            "(line 1456,col 5)-(line 1457,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc1()",
        "snippet": "  public void testParseInheritDoc1() throws Exception {\n    assertTrue(parse(\"@inheritDoc*/\").isOverride());\n  }\n",
        "begin_line": 1460,
        "end_line": 1462,
        "comment": "",
        "child_ranges": [
            "(line 1461,col 5)-(line 1461,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc2()",
        "snippet": "  public void testParseInheritDoc2() throws Exception {\n    parse(\"@override\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1464,
        "end_line": 1467,
        "comment": "",
        "child_ranges": [
            "(line 1465,col 5)-(line 1466,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc3()",
        "snippet": "  public void testParseInheritDoc3() throws Exception {\n    parse(\"@inheritDoc\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1469,
        "end_line": 1472,
        "comment": "",
        "child_ranges": [
            "(line 1470,col 5)-(line 1471,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias1()",
        "snippet": "  public void testParseNoAlias1() throws Exception {\n    assertTrue(parse(\"@noalias*/\").isNoAlias());\n  }\n",
        "begin_line": 1474,
        "end_line": 1476,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 5)-(line 1475,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias2()",
        "snippet": "  public void testParseNoAlias2() throws Exception {\n    parse(\"@noalias\\n@noalias*/\", \"extra @noalias tag\");\n  }\n",
        "begin_line": 1478,
        "end_line": 1480,
        "comment": "",
        "child_ranges": [
            "(line 1479,col 5)-(line 1479,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated1()",
        "snippet": "  public void testParseDeprecated1() throws Exception {\n    assertTrue(parse(\"@deprecated*/\").isDeprecated());\n  }\n",
        "begin_line": 1482,
        "end_line": 1484,
        "comment": "",
        "child_ranges": [
            "(line 1483,col 5)-(line 1483,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated2()",
        "snippet": "  public void testParseDeprecated2() throws Exception {\n    parse(\"@deprecated\\n@deprecated*/\", \"extra @deprecated tag\");\n  }\n",
        "begin_line": 1486,
        "end_line": 1488,
        "comment": "",
        "child_ranges": [
            "(line 1487,col 5)-(line 1487,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport1()",
        "snippet": "  public void testParseExport1() throws Exception {\n    assertTrue(parse(\"@export*/\").isExport());\n  }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": "",
        "child_ranges": [
            "(line 1491,col 5)-(line 1491,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport2()",
        "snippet": "  public void testParseExport2() throws Exception {\n    parse(\"@export\\n@export*/\", \"extra @export tag\");\n  }\n",
        "begin_line": 1494,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1495,col 5)-(line 1495,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExpose1()",
        "snippet": "  public void testParseExpose1() throws Exception {\n    assertTrue(parse(\"@expose*/\").isExpose());\n  }\n",
        "begin_line": 1498,
        "end_line": 1500,
        "comment": "",
        "child_ranges": [
            "(line 1499,col 5)-(line 1499,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExpose2()",
        "snippet": "  public void testParseExpose2() throws Exception {\n    parse(\"@expose\\n@expose*/\", \"extra @expose tag\");\n  }\n",
        "begin_line": 1502,
        "end_line": 1504,
        "comment": "",
        "child_ranges": [
            "(line 1503,col 5)-(line 1503,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns1()",
        "snippet": "  public void testParseExterns1() throws Exception {\n    assertTrue(parseFileOverview(\"@externs*/\").isExterns());\n  }\n",
        "begin_line": 1506,
        "end_line": 1508,
        "comment": "",
        "child_ranges": [
            "(line 1507,col 5)-(line 1507,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns2()",
        "snippet": "  public void testParseExterns2() throws Exception {\n    parseFileOverview(\"@externs\\n@externs*/\", \"extra @externs tag\");\n  }\n",
        "begin_line": 1510,
        "end_line": 1512,
        "comment": "",
        "child_ranges": [
            "(line 1511,col 5)-(line 1511,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns3()",
        "snippet": "  public void testParseExterns3() throws Exception {\n    assertNull(parse(\"@externs*/\"));\n  }\n",
        "begin_line": 1514,
        "end_line": 1516,
        "comment": "",
        "child_ranges": [
            "(line 1515,col 5)-(line 1515,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch1()",
        "snippet": "  public void testParseJavaDispatch1() throws Exception {\n    assertTrue(parse(\"@javadispatch*/\").isJavaDispatch());\n  }\n",
        "begin_line": 1518,
        "end_line": 1520,
        "comment": "",
        "child_ranges": [
            "(line 1519,col 5)-(line 1519,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch2()",
        "snippet": "  public void testParseJavaDispatch2() throws Exception {\n    parse(\"@javadispatch\\n@javadispatch*/\",\n        \"extra @javadispatch tag\");\n  }\n",
        "begin_line": 1522,
        "end_line": 1525,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 5)-(line 1524,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch3()",
        "snippet": "  public void testParseJavaDispatch3() throws Exception {\n    assertNull(parseFileOverview(\"@javadispatch*/\"));\n  }\n",
        "begin_line": 1527,
        "end_line": 1529,
        "comment": "",
        "child_ranges": [
            "(line 1528,col 5)-(line 1528,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile1()",
        "snippet": "  public void testParseNoCompile1() throws Exception {\n    assertTrue(parseFileOverview(\"@nocompile*/\").isNoCompile());\n  }\n",
        "begin_line": 1531,
        "end_line": 1533,
        "comment": "",
        "child_ranges": [
            "(line 1532,col 5)-(line 1532,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile2()",
        "snippet": "  public void testParseNoCompile2() throws Exception {\n    parseFileOverview(\"@nocompile\\n@nocompile*/\", \"extra @nocompile tag\");\n  }\n",
        "begin_line": 1535,
        "end_line": 1537,
        "comment": "",
        "child_ranges": [
            "(line 1536,col 5)-(line 1536,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBugAnnotation()",
        "snippet": "  public void testBugAnnotation() throws Exception {\n    parse(\"@bug */\");\n  }\n",
        "begin_line": 1539,
        "end_line": 1541,
        "comment": "",
        "child_ranges": [
            "(line 1540,col 5)-(line 1540,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDescriptionAnnotation()",
        "snippet": "  public void testDescriptionAnnotation() throws Exception {\n    parse(\"@description */\");\n  }\n",
        "begin_line": 1543,
        "end_line": 1545,
        "comment": "",
        "child_ranges": [
            "(line 1544,col 5)-(line 1544,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression1()",
        "snippet": "  public void testRegression1() throws Exception {\n    String comment =\n        \" * @param {number} index the index of blah\\n\" +\n        \" * @return {boolean} whatever\\n\" +\n        \" * @private\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PRIVATE, info.getVisibility());\n  }\n",
        "begin_line": 1547,
        "end_line": 1559,
        "comment": "",
        "child_ranges": [
            "(line 1548,col 5)-(line 1552,col 14)",
            "(line 1554,col 5)-(line 1554,col 36)",
            "(line 1555,col 5)-(line 1555,col 46)",
            "(line 1556,col 5)-(line 1556,col 66)",
            "(line 1557,col 5)-(line 1557,col 57)",
            "(line 1558,col 5)-(line 1558,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression2()",
        "snippet": "  public void testRegression2() throws Exception {\n    String comment =\n        \" * @return {boolean} whatever\\n\" +\n        \" * but important\\n\" +\n        \" *\\n\" +\n        \" * @param {number} index the index of blah\\n\" +\n        \" * some more comments here\\n\" +\n        \" * @param name the name of the guy\\n\" +\n        \" *\\n\" +\n        \" * @protected\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(2, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertEquals(null, info.getParameterType(\"name\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PROTECTED, info.getVisibility());\n  }\n",
        "begin_line": 1561,
        "end_line": 1579,
        "comment": "",
        "child_ranges": [
            "(line 1562,col 5)-(line 1571,col 14)",
            "(line 1573,col 5)-(line 1573,col 36)",
            "(line 1574,col 5)-(line 1574,col 46)",
            "(line 1575,col 5)-(line 1575,col 66)",
            "(line 1576,col 5)-(line 1576,col 54)",
            "(line 1577,col 5)-(line 1577,col 57)",
            "(line 1578,col 5)-(line 1578,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression3()",
        "snippet": "  public void testRegression3() throws Exception {\n    String comment =\n        \" * @param mediaTag this specified whether the @media tag is ....\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \"@public\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \" **********\\n\" +\n        \" * @final\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"mediaTag\"));\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n    assertTrue(info.isConstant());\n  }\n",
        "begin_line": 1581,
        "end_line": 1598,
        "comment": "",
        "child_ranges": [
            "(line 1582,col 5)-(line 1591,col 14)",
            "(line 1593,col 5)-(line 1593,col 36)",
            "(line 1594,col 5)-(line 1594,col 46)",
            "(line 1595,col 5)-(line 1595,col 58)",
            "(line 1596,col 5)-(line 1596,col 58)",
            "(line 1597,col 5)-(line 1597,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression4()",
        "snippet": "  public void testRegression4() throws Exception {\n    String comment =\n        \" * @const\\n\" +\n        \" * @hidden\\n\" +\n        \" * @preserveTry\\n\" +\n        \" * @constructor\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTrue(info.isConstructor());\n    assertTrue(info.isHidden());\n    assertTrue(info.shouldPreserveTry());\n  }\n",
        "begin_line": 1600,
        "end_line": 1614,
        "comment": "",
        "child_ranges": [
            "(line 1601,col 5)-(line 1606,col 14)",
            "(line 1608,col 5)-(line 1608,col 36)",
            "(line 1609,col 5)-(line 1609,col 34)",
            "(line 1610,col 5)-(line 1610,col 33)",
            "(line 1611,col 5)-(line 1611,col 37)",
            "(line 1612,col 5)-(line 1612,col 32)",
            "(line 1613,col 5)-(line 1613,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression5()",
        "snippet": "  public void testRegression5() throws Exception {\n    String comment = \"@const\\n@enum {string}\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTypeEquals(STRING_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1616,
        "end_line": 1624,
        "comment": "",
        "child_ranges": [
            "(line 1617,col 5)-(line 1617,col 57)",
            "(line 1619,col 5)-(line 1619,col 36)",
            "(line 1620,col 5)-(line 1620,col 34)",
            "(line 1621,col 5)-(line 1621,col 33)",
            "(line 1622,col 5)-(line 1622,col 63)",
            "(line 1623,col 5)-(line 1623,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression6()",
        "snippet": "  public void testRegression6() throws Exception {\n    String comment = \"@hidden\\n@enum\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isHidden());\n    assertTypeEquals(NUMBER_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1626,
        "end_line": 1633,
        "comment": "",
        "child_ranges": [
            "(line 1627,col 5)-(line 1627,col 49)",
            "(line 1629,col 5)-(line 1629,col 36)",
            "(line 1630,col 5)-(line 1630,col 32)",
            "(line 1631,col 5)-(line 1631,col 63)",
            "(line 1632,col 5)-(line 1632,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression7()",
        "snippet": "  public void testRegression7() throws Exception {\n    String comment =\n        \" * @desc description here\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1635,
        "end_line": 1646,
        "comment": "",
        "child_ranges": [
            "(line 1636,col 5)-(line 1640,col 14)",
            "(line 1642,col 5)-(line 1642,col 36)",
            "(line 1643,col 5)-(line 1643,col 46)",
            "(line 1644,col 5)-(line 1644,col 66)",
            "(line 1645,col 5)-(line 1645,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression8()",
        "snippet": "  public void testRegression8() throws Exception {\n    String comment =\n        \" * @name random tag here\\n\" +\n        \" * @desc description here\\n\" +\n        \" *\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1648,
        "end_line": 1661,
        "comment": "",
        "child_ranges": [
            "(line 1649,col 5)-(line 1655,col 14)",
            "(line 1657,col 5)-(line 1657,col 36)",
            "(line 1658,col 5)-(line 1658,col 46)",
            "(line 1659,col 5)-(line 1659,col 66)",
            "(line 1660,col 5)-(line 1660,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression9()",
        "snippet": "  public void testRegression9() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {string} p0 blah blah blah\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(1, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1663,
        "end_line": 1678,
        "comment": "",
        "child_ranges": [
            "(line 1664,col 5)-(line 1666,col 15)",
            "(line 1668,col 5)-(line 1668,col 36)",
            "(line 1669,col 5)-(line 1669,col 36)",
            "(line 1670,col 5)-(line 1670,col 39)",
            "(line 1671,col 5)-(line 1671,col 45)",
            "(line 1672,col 5)-(line 1672,col 34)",
            "(line 1673,col 5)-(line 1673,col 47)",
            "(line 1674,col 5)-(line 1674,col 64)",
            "(line 1675,col 5)-(line 1675,col 38)",
            "(line 1676,col 5)-(line 1676,col 32)",
            "(line 1677,col 5)-(line 1677,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression10()",
        "snippet": "  public void testRegression10() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {!String} p0 blah blah blah\\n\" +\n        \" * @param {boolean} p1 fobar\\n\" +\n        \" * @return {!Date} jksjkash dshad\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(2, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_OBJECT_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertTypeEquals(BOOLEAN_TYPE, jsdoc.getParameterType(\"p1\"));\n    assertTypeEquals(DATE_TYPE, jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1680,
        "end_line": 1698,
        "comment": "",
        "child_ranges": [
            "(line 1681,col 5)-(line 1685,col 15)",
            "(line 1687,col 5)-(line 1687,col 36)",
            "(line 1688,col 5)-(line 1688,col 36)",
            "(line 1689,col 5)-(line 1689,col 39)",
            "(line 1690,col 5)-(line 1690,col 45)",
            "(line 1691,col 5)-(line 1691,col 34)",
            "(line 1692,col 5)-(line 1692,col 47)",
            "(line 1693,col 5)-(line 1693,col 71)",
            "(line 1694,col 5)-(line 1694,col 65)",
            "(line 1695,col 5)-(line 1695,col 55)",
            "(line 1696,col 5)-(line 1696,col 32)",
            "(line 1697,col 5)-(line 1697,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression11()",
        "snippet": "  public void testRegression11() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @constructor\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1700,
        "end_line": 1714,
        "comment": "",
        "child_ranges": [
            "(line 1701,col 5)-(line 1703,col 15)",
            "(line 1705,col 5)-(line 1705,col 36)",
            "(line 1706,col 5)-(line 1706,col 36)",
            "(line 1707,col 5)-(line 1707,col 39)",
            "(line 1708,col 5)-(line 1708,col 45)",
            "(line 1709,col 5)-(line 1709,col 34)",
            "(line 1710,col 5)-(line 1710,col 47)",
            "(line 1711,col 5)-(line 1711,col 38)",
            "(line 1712,col 5)-(line 1712,col 32)",
            "(line 1713,col 5)-(line 1713,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression12()",
        "snippet": "  public void testRegression12() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends FooBar\\n\" +\n        \" */\");\n\n    assertTypeEquals(registry.createNamedType(\"FooBar\", null, 0, 0),\n        jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1716,
        "end_line": 1731,
        "comment": "",
        "child_ranges": [
            "(line 1717,col 5)-(line 1719,col 15)",
            "(line 1721,col 5)-(line 1722,col 29)",
            "(line 1723,col 5)-(line 1723,col 36)",
            "(line 1724,col 5)-(line 1724,col 39)",
            "(line 1725,col 5)-(line 1725,col 45)",
            "(line 1726,col 5)-(line 1726,col 34)",
            "(line 1727,col 5)-(line 1727,col 47)",
            "(line 1728,col 5)-(line 1728,col 38)",
            "(line 1729,col 5)-(line 1729,col 32)",
            "(line 1730,col 5)-(line 1730,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression13()",
        "snippet": "  public void testRegression13() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @type {!RegExp}\\n\" +\n        \" * @protected\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertTypeEquals(REGEXP_TYPE, jsdoc.getType());\n    assertEquals(Visibility.PROTECTED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1733,
        "end_line": 1748,
        "comment": "",
        "child_ranges": [
            "(line 1734,col 5)-(line 1737,col 15)",
            "(line 1739,col 5)-(line 1739,col 36)",
            "(line 1740,col 5)-(line 1740,col 36)",
            "(line 1741,col 5)-(line 1741,col 39)",
            "(line 1742,col 5)-(line 1742,col 45)",
            "(line 1743,col 5)-(line 1743,col 34)",
            "(line 1744,col 5)-(line 1744,col 47)",
            "(line 1745,col 5)-(line 1745,col 38)",
            "(line 1746,col 5)-(line 1746,col 51)",
            "(line 1747,col 5)-(line 1747,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression14()",
        "snippet": "  public void testRegression14() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @const\\n\" +\n        \" * @private\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertTrue(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.PRIVATE, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1750,
        "end_line": 1765,
        "comment": "",
        "child_ranges": [
            "(line 1751,col 5)-(line 1754,col 15)",
            "(line 1756,col 5)-(line 1756,col 36)",
            "(line 1757,col 5)-(line 1757,col 35)",
            "(line 1758,col 5)-(line 1758,col 39)",
            "(line 1759,col 5)-(line 1759,col 45)",
            "(line 1760,col 5)-(line 1760,col 34)",
            "(line 1761,col 5)-(line 1761,col 47)",
            "(line 1762,col 5)-(line 1762,col 38)",
            "(line 1763,col 5)-(line 1763,col 32)",
            "(line 1764,col 5)-(line 1764,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression15()",
        "snippet": "  public void testRegression15() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @desc Hello,\\n\" +\n        \" * World!\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertEquals(\"Hello, World!\", jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n    assertFalse(jsdoc.isExport());\n  }\n",
        "begin_line": 1767,
        "end_line": 1783,
        "comment": "",
        "child_ranges": [
            "(line 1768,col 5)-(line 1771,col 15)",
            "(line 1773,col 5)-(line 1773,col 36)",
            "(line 1774,col 5)-(line 1774,col 36)",
            "(line 1775,col 5)-(line 1775,col 58)",
            "(line 1776,col 5)-(line 1776,col 45)",
            "(line 1777,col 5)-(line 1777,col 34)",
            "(line 1778,col 5)-(line 1778,col 47)",
            "(line 1779,col 5)-(line 1779,col 38)",
            "(line 1780,col 5)-(line 1780,col 32)",
            "(line 1781,col 5)-(line 1781,col 62)",
            "(line 1782,col 5)-(line 1782,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression16()",
        "snippet": "  public void testRegression16() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" Email is plp@foo.bar\\n\" +\n        \" @type {string}\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1785,
        "end_line": 1798,
        "comment": "",
        "child_ranges": [
            "(line 1786,col 5)-(line 1789,col 15)",
            "(line 1791,col 5)-(line 1791,col 36)",
            "(line 1792,col 5)-(line 1792,col 36)",
            "(line 1793,col 5)-(line 1793,col 51)",
            "(line 1794,col 5)-(line 1794,col 34)",
            "(line 1795,col 5)-(line 1795,col 47)",
            "(line 1796,col 5)-(line 1796,col 38)",
            "(line 1797,col 5)-(line 1797,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression17()",
        "snippet": "  public void testRegression17() throws Exception {\n    // verifying that if no @desc is present the description is empty\n    assertNull(parse(\"@private*/\").getDescription());\n  }\n",
        "begin_line": 1800,
        "end_line": 1803,
        "comment": "",
        "child_ranges": [
            "(line 1802,col 5)-(line 1802,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression1()",
        "snippet": "  public void testFullRegression1() throws Exception {\n    parseFull(\"/** @param (string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1805,
        "end_line": 1808,
        "comment": "",
        "child_ranges": [
            "(line 1806,col 5)-(line 1807,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression2()",
        "snippet": "  public void testFullRegression2() throws Exception {\n    parseFull(\"/** @param {string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1810,
        "end_line": 1814,
        "comment": "",
        "child_ranges": [
            "(line 1811,col 5)-(line 1813,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression3()",
        "snippet": "  public void testFullRegression3() throws Exception {\n    parseFull(\"/**..\\n*/\");\n  }\n",
        "begin_line": 1816,
        "end_line": 1818,
        "comment": "",
        "child_ranges": [
            "(line 1817,col 5)-(line 1817,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907488()",
        "snippet": "  public void testBug907488() throws Exception {\n    parse(\"@type {number,null} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1820,
        "end_line": 1823,
        "comment": "",
        "child_ranges": [
            "(line 1821,col 5)-(line 1822,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907494()",
        "snippet": "  public void testBug907494() throws Exception {\n    parse(\"@return {Object,undefined} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1825,
        "end_line": 1828,
        "comment": "",
        "child_ranges": [
            "(line 1826,col 5)-(line 1827,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug909468()",
        "snippet": "  public void testBug909468() throws Exception {\n    parse(\"@extends {(x)}*/\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1830,
        "end_line": 1833,
        "comment": "",
        "child_ranges": [
            "(line 1831,col 5)-(line 1832,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterface()",
        "snippet": "  public void testParseInterface() throws Exception {\n    assertTrue(parse(\"@interface*/\").isInterface());\n  }\n",
        "begin_line": 1835,
        "end_line": 1837,
        "comment": "",
        "child_ranges": [
            "(line 1836,col 5)-(line 1836,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast1()",
        "snippet": "  public void testParseImplicitCast1() throws Exception {\n    assertTrue(parse(\"@type {string} \\n * @implicitCast*/\").isImplicitCast());\n  }\n",
        "begin_line": 1839,
        "end_line": 1841,
        "comment": "",
        "child_ranges": [
            "(line 1840,col 5)-(line 1840,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast2()",
        "snippet": "  public void testParseImplicitCast2() throws Exception {\n    assertFalse(parse(\"@type {string}*/\").isImplicitCast());\n  }\n",
        "begin_line": 1843,
        "end_line": 1845,
        "comment": "",
        "child_ranges": [
            "(line 1844,col 5)-(line 1844,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDuplicateImplicitCast()",
        "snippet": "  public void testParseDuplicateImplicitCast() throws Exception {\n    parse(\"@type {string} \\n * @implicitCast \\n * @implicitCast*/\",\n          \"Bad type annotation. extra @implicitCast tag\");\n  }\n",
        "begin_line": 1847,
        "end_line": 1850,
        "comment": "",
        "child_ranges": [
            "(line 1848,col 5)-(line 1849,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterfaceDoubled()",
        "snippet": "  public void testParseInterfaceDoubled() throws Exception {\n    parse(\n        \"* @interface\\n\" +\n        \"* @interface\\n\" +\n        \"*/\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1852,
        "end_line": 1859,
        "comment": "",
        "child_ranges": [
            "(line 1853,col 5)-(line 1858,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplements()",
        "snippet": "  public void testParseImplements() throws Exception {\n    List<JSTypeExpression> interfaces = parse(\"@implements {SomeInterface}*/\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1861,
        "end_line": 1867,
        "comment": "",
        "child_ranges": [
            "(line 1862,col 5)-(line 1863,col 36)",
            "(line 1864,col 5)-(line 1864,col 39)",
            "(line 1865,col 5)-(line 1866,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsTwo()",
        "snippet": "  public void testParseImplementsTwo() throws Exception {\n    List<JSTypeExpression> interfaces =\n        parse(\n            \"* @implements {SomeInterface1}\\n\" +\n            \"* @implements {SomeInterface2}\\n\" +\n            \"*/\")\n        .getImplementedInterfaces();\n    assertEquals(2, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface1\", null, -1, -1),\n        interfaces.get(0));\n    assertTypeEquals(registry.createNamedType(\"SomeInterface2\", null, -1, -1),\n        interfaces.get(1));\n  }\n",
        "begin_line": 1869,
        "end_line": 1881,
        "comment": "",
        "child_ranges": [
            "(line 1870,col 5)-(line 1875,col 36)",
            "(line 1876,col 5)-(line 1876,col 39)",
            "(line 1877,col 5)-(line 1878,col 27)",
            "(line 1879,col 5)-(line 1880,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsSameTwice()",
        "snippet": "  public void testParseImplementsSameTwice() throws Exception {\n    parse(\n        \"* @implements {Smth}\\n\" +\n        \"* @implements {Smth}\\n\" +\n        \"*/\",\n        \"Bad type annotation. duplicate @implements tag\");\n  }\n",
        "begin_line": 1883,
        "end_line": 1889,
        "comment": "",
        "child_ranges": [
            "(line 1884,col 5)-(line 1888,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNoName()",
        "snippet": "  public void testParseImplementsNoName() throws Exception {\n    parse(\"* @implements {} */\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1891,
        "end_line": 1894,
        "comment": "",
        "child_ranges": [
            "(line 1892,col 5)-(line 1893,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsMissingRC()",
        "snippet": "  public void testParseImplementsMissingRC() throws Exception {\n    parse(\"* @implements {Smth */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1896,
        "end_line": 1899,
        "comment": "",
        "child_ranges": [
            "(line 1897,col 5)-(line 1898,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable1()",
        "snippet": "  public void testParseImplementsNullable1() throws Exception {\n    parse(\"@implements {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1901,
        "end_line": 1903,
        "comment": "",
        "child_ranges": [
            "(line 1902,col 5)-(line 1902,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable2()",
        "snippet": "  public void testParseImplementsNullable2() throws Exception {\n    parse(\"@implements Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1905,
        "end_line": 1908,
        "comment": "",
        "child_ranges": [
            "(line 1906,col 5)-(line 1907,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n     JSDocInfo jsdoc = parse(\n         \" * @interface \\n\" +\n         \" * @extends {Extended} */\");\n    assertTrue(jsdoc.isInterface());\n    assertEquals(1, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended\", null, -1, -1),\n        types.get(0));\n  }\n",
        "begin_line": 1910,
        "end_line": 1919,
        "comment": "",
        "child_ranges": [
            "(line 1911,col 6)-(line 1913,col 38)",
            "(line 1914,col 5)-(line 1914,col 36)",
            "(line 1915,col 5)-(line 1915,col 56)",
            "(line 1916,col 5)-(line 1916,col 65)",
            "(line 1917,col 5)-(line 1918,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends1()",
        "snippet": "  public void testInterfaceMultiExtends1() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @interface \\n\" +\n        \" * @extends {Extended1} \\n\" +\n        \" * @extends {Extended2} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(2, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n  }\n",
        "begin_line": 1921,
        "end_line": 1934,
        "comment": "",
        "child_ranges": [
            "(line 1922,col 5)-(line 1925,col 38)",
            "(line 1926,col 5)-(line 1926,col 36)",
            "(line 1927,col 5)-(line 1927,col 36)",
            "(line 1928,col 5)-(line 1928,col 56)",
            "(line 1929,col 5)-(line 1929,col 65)",
            "(line 1930,col 5)-(line 1931,col 21)",
            "(line 1932,col 5)-(line 1933,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends2()",
        "snippet": "  public void testInterfaceMultiExtends2() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends {Extended1} \\n\" +\n        \" * @interface \\n\" +\n        \" * @extends {Extended2} \\n\" +\n        \" * @extends {Extended3} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(3, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n    assertTypeEquals(registry.createNamedType(\"Extended3\", null, -1, -1),\n        types.get(2));\n  }\n",
        "begin_line": 1936,
        "end_line": 1952,
        "comment": "",
        "child_ranges": [
            "(line 1937,col 5)-(line 1941,col 38)",
            "(line 1942,col 5)-(line 1942,col 36)",
            "(line 1943,col 5)-(line 1943,col 36)",
            "(line 1944,col 5)-(line 1944,col 56)",
            "(line 1945,col 5)-(line 1945,col 65)",
            "(line 1946,col 5)-(line 1947,col 21)",
            "(line 1948,col 5)-(line 1949,col 22)",
            "(line 1950,col 5)-(line 1951,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadClassMultiExtends()",
        "snippet": "  public void testBadClassMultiExtends() throws Exception {\n    parse(\" * @extends {Extended1} \\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Extended2} */\",\n        \"Bad type annotation. type annotation incompatible with other \" +\n        \"annotations\");\n  }\n",
        "begin_line": 1954,
        "end_line": 1960,
        "comment": "",
        "child_ranges": [
            "(line 1955,col 5)-(line 1959,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadExtendsWithNullable()",
        "snippet": "  public void testBadExtendsWithNullable() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n * @extends {Object?} */\",\n        \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(OBJECT_TYPE, jsdoc.getBaseType());\n  }\n",
        "begin_line": 1962,
        "end_line": 1967,
        "comment": "",
        "child_ranges": [
            "(line 1963,col 5)-(line 1964,col 51)",
            "(line 1965,col 5)-(line 1965,col 38)",
            "(line 1966,col 5)-(line 1966,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadImplementsWithNullable()",
        "snippet": "  public void testBadImplementsWithNullable() throws Exception {\n  JSDocInfo jsdoc = parse(\"@implements {Disposable?}\\n * @constructor */\",\n      \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(registry.createNamedType(\"Disposable\", null, -1, -1),\n        jsdoc.getImplementedInterfaces().get(0));\n  }\n",
        "begin_line": 1969,
        "end_line": 1975,
        "comment": "",
        "child_ranges": [
            "(line 1970,col 3)-(line 1971,col 49)",
            "(line 1972,col 5)-(line 1972,col 38)",
            "(line 1973,col 5)-(line 1974,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor1()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@interface\\n@constructor*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isInterface());\n  }\n",
        "begin_line": 1977,
        "end_line": 1981,
        "comment": "",
        "child_ranges": [
            "(line 1978,col 5)-(line 1979,col 78)",
            "(line 1980,col 5)-(line 1980,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor2()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n@interface*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isConstructor());\n  }\n",
        "begin_line": 1983,
        "end_line": 1987,
        "comment": "",
        "child_ranges": [
            "(line 1984,col 5)-(line 1985,col 78)",
            "(line 1986,col 5)-(line 1986,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationParameter()",
        "snippet": "  public void testDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n  }\n",
        "begin_line": 1989,
        "end_line": 1996,
        "comment": "",
        "child_ranges": [
            "(line 1990,col 5)-(line 1991,col 75)",
            "(line 1993,col 5)-(line 1993,col 61)",
            "(line 1994,col 5)-(line 1995,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMultilineDocumentationParameter()",
        "snippet": "  public void testMultilineDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description\"\n                + \"\\n* on multiple \\n* lines.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description on multiple lines.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n  }\n",
        "begin_line": 1998,
        "end_line": 2007,
        "comment": "",
        "child_ranges": [
            "(line 1999,col 5)-(line 2001,col 56)",
            "(line 2003,col 5)-(line 2003,col 61)",
            "(line 2004,col 5)-(line 2005,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter()",
        "snippet": "  public void testDocumentationMultipleParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.*/\"\n                , true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number87\"));\n    assertEquals(\"This is another description.\",\n                 jsdoc.getDescriptionForParameter(\"number87\"));\n  }\n",
        "begin_line": 2009,
        "end_line": 2022,
        "comment": "",
        "child_ranges": [
            "(line 2010,col 5)-(line 2013,col 24)",
            "(line 2015,col 5)-(line 2015,col 61)",
            "(line 2016,col 5)-(line 2017,col 63)",
            "(line 2019,col 5)-(line 2019,col 61)",
            "(line 2020,col 5)-(line 2021,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter2()",
        "snippet": "  public void testDocumentationMultipleParameter2() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {number} delta = 0 results in a redraw\\n\" +\n                \"  != 0 ..... */\", true);\n    assertTrue(jsdoc.hasDescriptionForParameter(\"delta\"));\n    assertEquals(\"= 0 results in a redraw != 0 .....\",\n                 jsdoc.getDescriptionForParameter(\"delta\"));\n  }\n",
        "begin_line": 2024,
        "end_line": 2031,
        "comment": "",
        "child_ranges": [
            "(line 2025,col 5)-(line 2027,col 41)",
            "(line 2028,col 5)-(line 2028,col 58)",
            "(line 2029,col 5)-(line 2030,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthors()",
        "snippet": "  public void testAuthors() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.\"\n                + \"\\n* @author a@google.com (A Person)\"\n                + \"\\n* @author b@google.com (B Person)\"\n                + \"\\n* @author c@google.com (C Person)*/\"\n                , true);\n\n    Collection<String> authors = jsdoc.getAuthors();\n\n    assertTrue(authors != null);\n    assertTrue(authors.size() == 3);\n\n    assertContains(authors, \"a@google.com (A Person)\");\n    assertContains(authors, \"b@google.com (B Person)\");\n    assertContains(authors, \"c@google.com (C Person)\");\n  }\n",
        "begin_line": 2034,
        "end_line": 2051,
        "comment": "",
        "child_ranges": [
            "(line 2035,col 5)-(line 2041,col 24)",
            "(line 2043,col 5)-(line 2043,col 52)",
            "(line 2045,col 5)-(line 2045,col 32)",
            "(line 2046,col 5)-(line 2046,col 36)",
            "(line 2048,col 5)-(line 2048,col 55)",
            "(line 2049,col 5)-(line 2049,col 55)",
            "(line 2050,col 5)-(line 2050,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress1()",
        "snippet": "  public void testSuppress1() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getSuppressions());\n  }\n",
        "begin_line": 2053,
        "end_line": 2056,
        "comment": "",
        "child_ranges": [
            "(line 2054,col 5)-(line 2054,col 47)",
            "(line 2055,col 5)-(line 2055,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress2()",
        "snippet": "  public void testSuppress2() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x|y|x|z} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\", \"z\"), info.getSuppressions());\n  }\n",
        "begin_line": 2058,
        "end_line": 2061,
        "comment": "",
        "child_ranges": [
            "(line 2059,col 5)-(line 2059,col 53)",
            "(line 2060,col 5)-(line 2060,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress1()",
        "snippet": "  public void testBadSuppress1() throws Exception {\n    parse(\"@suppress {} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2063,
        "end_line": 2065,
        "comment": "",
        "child_ranges": [
            "(line 2064,col 5)-(line 2064,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress2()",
        "snippet": "  public void testBadSuppress2() throws Exception {\n    parse(\"@suppress {x|} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2067,
        "end_line": 2069,
        "comment": "",
        "child_ranges": [
            "(line 2068,col 5)-(line 2068,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress3()",
        "snippet": "  public void testBadSuppress3() throws Exception {\n    parse(\"@suppress {|x} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2071,
        "end_line": 2073,
        "comment": "",
        "child_ranges": [
            "(line 2072,col 5)-(line 2072,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress4()",
        "snippet": "  public void testBadSuppress4() throws Exception {\n    parse(\"@suppress {x|y */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2075,
        "end_line": 2077,
        "comment": "",
        "child_ranges": [
            "(line 2076,col 5)-(line 2076,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress5()",
        "snippet": "  public void testBadSuppress5() throws Exception {\n    parse(\"@suppress {x,y} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2079,
        "end_line": 2081,
        "comment": "",
        "child_ranges": [
            "(line 2080,col 5)-(line 2080,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress6()",
        "snippet": "  public void testBadSuppress6() throws Exception {\n    parse(\"@suppress {x} \\n * @suppress {y} */\", \"duplicate @suppress tag\");\n  }\n",
        "begin_line": 2083,
        "end_line": 2085,
        "comment": "",
        "child_ranges": [
            "(line 2084,col 5)-(line 2084,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress7()",
        "snippet": "  public void testBadSuppress7() throws Exception {\n    parse(\"@suppress {impossible} */\",\n          \"unknown @suppress parameter: impossible\");\n  }\n",
        "begin_line": 2087,
        "end_line": 2090,
        "comment": "",
        "child_ranges": [
            "(line 2088,col 5)-(line 2089,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies1()",
        "snippet": "  public void testModifies1() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this} */\");\n    assertEquals(Sets.newHashSet(\"this\"), info.getModifies());\n  }\n",
        "begin_line": 2092,
        "end_line": 2095,
        "comment": "",
        "child_ranges": [
            "(line 2093,col 5)-(line 2093,col 50)",
            "(line 2094,col 5)-(line 2094,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies2()",
        "snippet": "  public void testModifies2() throws Exception {\n    JSDocInfo info = parse(\"@modifies {arguments} */\");\n    assertEquals(Sets.newHashSet(\"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 2097,
        "end_line": 2100,
        "comment": "",
        "child_ranges": [
            "(line 2098,col 5)-(line 2098,col 55)",
            "(line 2099,col 5)-(line 2099,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies3()",
        "snippet": "  public void testModifies3() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this|arguments} */\");\n    assertEquals(Sets.newHashSet(\"this\", \"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 2102,
        "end_line": 2105,
        "comment": "",
        "child_ranges": [
            "(line 2103,col 5)-(line 2103,col 60)",
            "(line 2104,col 5)-(line 2104,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies4()",
        "snippet": "  public void testModifies4() throws Exception {\n    JSDocInfo info = parse(\"@param {*} x\\n * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 2107,
        "end_line": 2110,
        "comment": "",
        "child_ranges": [
            "(line 2108,col 5)-(line 2108,col 64)",
            "(line 2109,col 5)-(line 2109,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies5()",
        "snippet": "  public void testModifies5() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 2112,
        "end_line": 2118,
        "comment": "",
        "child_ranges": [
            "(line 2113,col 5)-(line 2116,col 33)",
            "(line 2117,col 5)-(line 2117,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies6()",
        "snippet": "  public void testModifies6() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x|y} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\"), info.getModifies());\n  }\n",
        "begin_line": 2120,
        "end_line": 2126,
        "comment": "",
        "child_ranges": [
            "(line 2121,col 5)-(line 2124,col 35)",
            "(line 2125,col 5)-(line 2125,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies1()",
        "snippet": "  public void testBadModifies1() throws Exception {\n    parse(\"@modifies {} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2129,
        "end_line": 2131,
        "comment": "",
        "child_ranges": [
            "(line 2130,col 5)-(line 2130,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies2()",
        "snippet": "  public void testBadModifies2() throws Exception {\n    parse(\"@modifies {this|} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2133,
        "end_line": 2135,
        "comment": "",
        "child_ranges": [
            "(line 2134,col 5)-(line 2134,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies3()",
        "snippet": "  public void testBadModifies3() throws Exception {\n    parse(\"@modifies {|this} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2137,
        "end_line": 2139,
        "comment": "",
        "child_ranges": [
            "(line 2138,col 5)-(line 2138,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies4()",
        "snippet": "  public void testBadModifies4() throws Exception {\n    parse(\"@modifies {this|arguments */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2141,
        "end_line": 2143,
        "comment": "",
        "child_ranges": [
            "(line 2142,col 5)-(line 2142,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies5()",
        "snippet": "  public void testBadModifies5() throws Exception {\n    parse(\"@modifies {this,arguments} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2145,
        "end_line": 2147,
        "comment": "",
        "child_ranges": [
            "(line 2146,col 5)-(line 2146,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies6()",
        "snippet": "  public void testBadModifies6() throws Exception {\n    parse(\"@modifies {this} \\n * @modifies {this} */\",\n        \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2149,
        "end_line": 2152,
        "comment": "",
        "child_ranges": [
            "(line 2150,col 5)-(line 2151,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies7()",
        "snippet": "  public void testBadModifies7() throws Exception {\n    parse(\"@modifies {impossible} */\",\n          \"unknown @modifies parameter: impossible\");\n  }\n",
        "begin_line": 2154,
        "end_line": 2157,
        "comment": "",
        "child_ranges": [
            "(line 2155,col 5)-(line 2156,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies8()",
        "snippet": "  public void testBadModifies8() throws Exception {\n    parse(\"@modifies {this}\\n\"\n        + \"@nosideeffects */\", \"conflicting @nosideeffects tag\");\n  }\n",
        "begin_line": 2159,
        "end_line": 2162,
        "comment": "",
        "child_ranges": [
            "(line 2160,col 5)-(line 2161,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies9()",
        "snippet": "  public void testBadModifies9() throws Exception {\n    parse(\"@nosideeffects\\n\"\n        + \"@modifies {this} */\", \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2164,
        "end_line": 2167,
        "comment": "",
        "child_ranges": [
            "(line 2165,col 5)-(line 2166,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewSingleLine()",
        "snippet": "  public void testFileOverviewSingleLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Hi mom! */\");\n    assertEquals(\"Hi mom!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2175,
        "end_line": 2178,
        "comment": "",
        "child_ranges": [
            "(line 2176,col 5)-(line 2176,col 68)",
            "(line 2177,col 5)-(line 2177,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewMultiLine()",
        "snippet": "  public void testFileOverviewMultiLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Pie is \\n * good! */\");\n    assertEquals(\"Pie is\\n good!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2180,
        "end_line": 2183,
        "comment": "",
        "child_ranges": [
            "(line 2181,col 5)-(line 2181,col 78)",
            "(line 2182,col 5)-(line 2182,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewDuplicate()",
        "snippet": "  public void testFileOverviewDuplicate() throws Exception {\n    parseFileOverview(\n        \"@fileoverview Pie \\n * @fileoverview Cake */\",\n        \"extra @fileoverview tag\");\n  }\n",
        "begin_line": 2185,
        "end_line": 2189,
        "comment": "",
        "child_ranges": [
            "(line 2186,col 5)-(line 2188,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testReferences()",
        "snippet": "  public void testReferences() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@see A cool place!\"\n                + \"\\n* @see The world.\"\n                + \"\\n* @see SomeClass#SomeMember\"\n                + \"\\n* @see A boring test case*/\"\n                , true);\n\n    Collection<String> references = jsdoc.getReferences();\n\n    assertTrue(references != null);\n    assertTrue(references.size() == 4);\n\n    assertContains(references, \"A cool place!\");\n    assertContains(references, \"The world.\");\n    assertContains(references, \"SomeClass#SomeMember\");\n    assertContains(references, \"A boring test case\");\n  }\n",
        "begin_line": 2191,
        "end_line": 2208,
        "comment": "",
        "child_ranges": [
            "(line 2192,col 5)-(line 2197,col 24)",
            "(line 2199,col 5)-(line 2199,col 58)",
            "(line 2201,col 5)-(line 2201,col 35)",
            "(line 2202,col 5)-(line 2202,col 39)",
            "(line 2204,col 5)-(line 2204,col 48)",
            "(line 2205,col 5)-(line 2205,col 45)",
            "(line 2206,col 5)-(line 2206,col 55)",
            "(line 2207,col 5)-(line 2207,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTags()",
        "snippet": "  public void testSingleTags() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@version Some old version\"\n                + \"\\n* @deprecated In favor of the new one!\"\n                + \"\\n* @return {SomeType} The most important object :-)*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2210,
        "end_line": 2221,
        "comment": "",
        "child_ranges": [
            "(line 2211,col 5)-(line 2215,col 24)",
            "(line 2217,col 5)-(line 2217,col 37)",
            "(line 2218,col 5)-(line 2218,col 75)",
            "(line 2219,col 5)-(line 2219,col 57)",
            "(line 2220,col 5)-(line 2220,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTagsReordered()",
        "snippet": "  public void testSingleTagsReordered() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@deprecated In favor of the new one!\"\n                + \"\\n * @return {SomeType} The most important object :-)\"\n                + \"\\n * @version Some old version*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2223,
        "end_line": 2234,
        "comment": "",
        "child_ranges": [
            "(line 2224,col 5)-(line 2228,col 24)",
            "(line 2230,col 5)-(line 2230,col 37)",
            "(line 2231,col 5)-(line 2231,col 75)",
            "(line 2232,col 5)-(line 2232,col 57)",
            "(line 2233,col 5)-(line 2233,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionDuplication()",
        "snippet": "  public void testVersionDuplication() throws Exception {\n    parse(\"* @version Some old version\"\n          + \"\\n* @version Another version*/\", true,\n          \"conflicting @version tag\");\n  }\n",
        "begin_line": 2236,
        "end_line": 2240,
        "comment": "",
        "child_ranges": [
            "(line 2237,col 5)-(line 2239,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionMissing()",
        "snippet": "  public void testVersionMissing() throws Exception {\n    parse(\"* @version */\", true,\n          \"@version tag missing version information\");\n  }\n",
        "begin_line": 2242,
        "end_line": 2245,
        "comment": "",
        "child_ranges": [
            "(line 2243,col 5)-(line 2244,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthorMissing()",
        "snippet": "  public void testAuthorMissing() throws Exception {\n    parse(\"* @author */\", true,\n          \"@author tag missing author\");\n  }\n",
        "begin_line": 2247,
        "end_line": 2250,
        "comment": "",
        "child_ranges": [
            "(line 2248,col 5)-(line 2249,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSeeMissing()",
        "snippet": "  public void testSeeMissing() throws Exception {\n    parse(\"* @see */\", true,\n          \"@see tag missing description\");\n  }\n",
        "begin_line": 2252,
        "end_line": 2255,
        "comment": "",
        "child_ranges": [
            "(line 2253,col 5)-(line 2254,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSourceName()",
        "snippet": "  public void testSourceName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@deprecated */\", true);\n    assertEquals(\"testcode\", jsdoc.getAssociatedNode().getSourceFileName());\n  }\n",
        "begin_line": 2257,
        "end_line": 2260,
        "comment": "",
        "child_ranges": [
            "(line 2258,col 5)-(line 2258,col 52)",
            "(line 2259,col 5)-(line 2259,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment()",
        "snippet": "  public void testParseBlockComment() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2262,
        "end_line": 2273,
        "comment": "",
        "child_ranges": [
            "(line 2263,col 5)-(line 2265,col 67)",
            "(line 2267,col 5)-(line 2268,col 46)",
            "(line 2270,col 5)-(line 2272,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment2()",
        "snippet": "  public void testParseBlockComment2() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is *** multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is *** multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2275,
        "end_line": 2286,
        "comment": "",
        "child_ranges": [
            "(line 2276,col 5)-(line 2278,col 67)",
            "(line 2280,col 5)-(line 2281,col 46)",
            "(line 2283,col 5)-(line 2285,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment3()",
        "snippet": "  public void testParseBlockComment3() throws Exception {\n    JSDocInfo jsdoc = parse(\"\\n \"\n                            + \"* hello world \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"hello world\", jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2288,
        "end_line": 2298,
        "comment": "",
        "child_ranges": [
            "(line 2289,col 5)-(line 2291,col 67)",
            "(line 2293,col 5)-(line 2293,col 61)",
            "(line 2295,col 5)-(line 2297,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers1()",
        "snippet": "  public void testParseWithMarkers1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 0, 0),\n        \"abc@google.com\", 7, 0, 21);\n  }\n",
        "begin_line": 2300,
        "end_line": 2306,
        "comment": "",
        "child_ranges": [
            "(line 2301,col 5)-(line 2301,col 63)",
            "(line 2303,col 5)-(line 2305,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers2()",
        "snippet": "  public void testParseWithMarkers2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {Foo} somename abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"abc@google.com\", 21, 0, 37);\n  }\n",
        "begin_line": 2308,
        "end_line": 2314,
        "comment": "",
        "child_ranges": [
            "(line 2309,col 5)-(line 2309,col 77)",
            "(line 2311,col 5)-(line 2313,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers3()",
        "snippet": "  public void testParseWithMarkers3() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return {Foo} some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    JSDocInfo.Marker returnDoc =\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0);\n    assertDocumentationInMarker(returnDoc,\n        \"some long multiline description\", 13, 2, 15);\n    assertEquals(8, returnDoc.getType().getPositionOnStartLine());\n    assertEquals(12, returnDoc.getType().getPositionOnEndLine());\n  }\n",
        "begin_line": 2316,
        "end_line": 2327,
        "comment": "",
        "child_ranges": [
            "(line 2317,col 5)-(line 2319,col 44)",
            "(line 2321,col 5)-(line 2322,col 54)",
            "(line 2323,col 5)-(line 2324,col 54)",
            "(line 2325,col 5)-(line 2325,col 66)",
            "(line 2326,col 5)-(line 2326,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers4()",
        "snippet": "  public void testParseWithMarkers4() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@author foobar \\n * @param {Foo} somename abc@google.com */\",\n              true);\n\n    assertAnnotationMarker(jsdoc, \"author\", 0, 0);\n    assertAnnotationMarker(jsdoc, \"param\", 1, 3);\n  }\n",
        "begin_line": 2329,
        "end_line": 2336,
        "comment": "",
        "child_ranges": [
            "(line 2330,col 5)-(line 2332,col 20)",
            "(line 2334,col 5)-(line 2334,col 50)",
            "(line 2335,col 5)-(line 2335,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers5()",
        "snippet": "  public void testParseWithMarkers5() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2338,
        "end_line": 2346,
        "comment": "",
        "child_ranges": [
            "(line 2339,col 5)-(line 2341,col 44)",
            "(line 2343,col 5)-(line 2345,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers6()",
        "snippet": "  public void testParseWithMarkers6() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@param x some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2348,
        "end_line": 2356,
        "comment": "",
        "child_ranges": [
            "(line 2349,col 5)-(line 2351,col 44)",
            "(line 2353,col 5)-(line 2355,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames1()",
        "snippet": "  public void testParseWithMarkerNames1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription */\", true);\n\n    assertNameInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"name\", 0, 18);\n  }\n",
        "begin_line": 2358,
        "end_line": 2364,
        "comment": "",
        "child_ranges": [
            "(line 2359,col 5)-(line 2359,col 79)",
            "(line 2361,col 5)-(line 2363,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames2()",
        "snippet": "  public void testParseWithMarkerNames2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription \\n\" +\n                            \"* @param {AnotherType} anothername des */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 0, 18),\n        \"SomeType\", 0, 7, 0, 16, true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 1, 2, 1),\n            \"anothername\", 1, 23),\n        \"AnotherType\", 1, 9, 1, 21, true);\n  }\n",
        "begin_line": 2366,
        "end_line": 2381,
        "comment": "",
        "child_ranges": [
            "(line 2367,col 5)-(line 2368,col 79)",
            "(line 2370,col 5)-(line 2374,col 39)",
            "(line 2376,col 5)-(line 2380,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames3()",
        "snippet": "  public void testParseWithMarkerNames3() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \"@param {Some.Long.Type.\\n *  Name} name somedescription */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 1, 10),\n        \"Some.Long.Type.Name\", 0, 7, 1, 8, true);\n  }\n",
        "begin_line": 2383,
        "end_line": 2392,
        "comment": "",
        "child_ranges": [
            "(line 2384,col 5)-(line 2385,col 76)",
            "(line 2387,col 5)-(line 2391,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithoutMarkerName()",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  public void testParseWithoutMarkerName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author helloworld*/\", true);\n    assertNull(assertAnnotationMarker(jsdoc, \"author\", 0, 0).getName());\n  }\n",
        "begin_line": 2394,
        "end_line": 2398,
        "comment": "",
        "child_ranges": [
            "(line 2396,col 5)-(line 2396,col 58)",
            "(line 2397,col 5)-(line 2397,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType()",
        "snippet": "  public void testParseWithMarkerType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends {FooBar}*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 0, 9, 0, 16, true);\n  }\n",
        "begin_line": 2400,
        "end_line": 2406,
        "comment": "",
        "child_ranges": [
            "(line 2401,col 5)-(line 2401,col 57)",
            "(line 2403,col 5)-(line 2405,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType2()",
        "snippet": "  public void testParseWithMarkerType2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends FooBar*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 0, 9, 0, 15, false);\n  }\n",
        "begin_line": 2408,
        "end_line": 2414,
        "comment": "",
        "child_ranges": [
            "(line 2409,col 5)-(line 2409,col 55)",
            "(line 2411,col 5)-(line 2413,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict1()",
        "snippet": "  public void testTypeTagConflict1() throws Exception {\n    parse(\"@constructor \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2416,
        "end_line": 2420,
        "comment": "",
        "child_ranges": [
            "(line 2417,col 5)-(line 2419,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict2()",
        "snippet": "  public void testTypeTagConflict2() throws Exception {\n    parse(\"@interface \\n * @interface */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2422,
        "end_line": 2426,
        "comment": "",
        "child_ranges": [
            "(line 2423,col 5)-(line 2425,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict3()",
        "snippet": "  public void testTypeTagConflict3() throws Exception {\n    parse(\"@constructor \\n * @interface */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2428,
        "end_line": 2431,
        "comment": "",
        "child_ranges": [
            "(line 2429,col 5)-(line 2430,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict4()",
        "snippet": "  public void testTypeTagConflict4() throws Exception {\n    parse(\"@interface \\n * @constructor */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2433,
        "end_line": 2436,
        "comment": "",
        "child_ranges": [
            "(line 2434,col 5)-(line 2435,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict5()",
        "snippet": "  public void testTypeTagConflict5() throws Exception {\n    parse(\"@interface \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2438,
        "end_line": 2442,
        "comment": "",
        "child_ranges": [
            "(line 2439,col 5)-(line 2441,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict6()",
        "snippet": "  public void testTypeTagConflict6() throws Exception {\n    parse(\"@typedef {string} \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2444,
        "end_line": 2448,
        "comment": "",
        "child_ranges": [
            "(line 2445,col 5)-(line 2447,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict7()",
        "snippet": "  public void testTypeTagConflict7() throws Exception {\n    parse(\"@typedef {string} \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2450,
        "end_line": 2454,
        "comment": "",
        "child_ranges": [
            "(line 2451,col 5)-(line 2453,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict8()",
        "snippet": "  public void testTypeTagConflict8() throws Exception {\n    parse(\"@typedef {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2456,
        "end_line": 2460,
        "comment": "",
        "child_ranges": [
            "(line 2457,col 5)-(line 2459,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict9()",
        "snippet": "  public void testTypeTagConflict9() throws Exception {\n    parse(\"@enum {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2462,
        "end_line": 2466,
        "comment": "",
        "child_ranges": [
            "(line 2463,col 5)-(line 2465,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict10()",
        "snippet": "  public void testTypeTagConflict10() throws Exception {\n    parse(\"@this {Object} \\n * @enum {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2468,
        "end_line": 2472,
        "comment": "",
        "child_ranges": [
            "(line 2469,col 5)-(line 2471,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict11()",
        "snippet": "  public void testTypeTagConflict11() throws Exception {\n    parse(\"@param {Object} x \\n * @type {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2474,
        "end_line": 2478,
        "comment": "",
        "child_ranges": [
            "(line 2475,col 5)-(line 2477,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict12()",
        "snippet": "  public void testTypeTagConflict12() throws Exception {\n    parse(\"@typedef {boolean} \\n * @param {Object} x */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2480,
        "end_line": 2484,
        "comment": "",
        "child_ranges": [
            "(line 2481,col 5)-(line 2483,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict13()",
        "snippet": "  public void testTypeTagConflict13() throws Exception {\n    parse(\"@typedef {boolean} \\n * @extends {Object} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2486,
        "end_line": 2490,
        "comment": "",
        "child_ranges": [
            "(line 2487,col 5)-(line 2489,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict14()",
        "snippet": "  public void testTypeTagConflict14() throws Exception {\n    parse(\"@return x \\n * @return y */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2492,
        "end_line": 2496,
        "comment": "",
        "child_ranges": [
            "(line 2493,col 5)-(line 2495,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict15()",
        "snippet": "  public void testTypeTagConflict15() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @struct\\n\" +\n          \" * @struct\\n\" +\n          \" */\\n\" +\n          \"function StrStr() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2498,
        "end_line": 2506,
        "comment": "",
        "child_ranges": [
            "(line 2499,col 5)-(line 2505,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict16()",
        "snippet": "  public void testTypeTagConflict16() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @struct\\n\" +\n          \" * @interface\\n\" +\n          \" */\\n\" +\n          \"function StrIntf() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2508,
        "end_line": 2516,
        "comment": "",
        "child_ranges": [
            "(line 2509,col 5)-(line 2515,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict17()",
        "snippet": "  public void testTypeTagConflict17() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @interface\\n\" +\n          \" * @struct\\n\" +\n          \" */\\n\" +\n          \"function StrIntf() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2518,
        "end_line": 2526,
        "comment": "",
        "child_ranges": [
            "(line 2519,col 5)-(line 2525,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict18()",
        "snippet": "  public void testTypeTagConflict18() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @dict\\n\" +\n          \" * @dict\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2528,
        "end_line": 2536,
        "comment": "",
        "child_ranges": [
            "(line 2529,col 5)-(line 2535,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict19()",
        "snippet": "  public void testTypeTagConflict19() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @dict\\n\" +\n          \" * @interface\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2538,
        "end_line": 2546,
        "comment": "",
        "child_ranges": [
            "(line 2539,col 5)-(line 2545,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict20()",
        "snippet": "  public void testTypeTagConflict20() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @interface\\n\" +\n          \" * @dict\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2548,
        "end_line": 2556,
        "comment": "",
        "child_ranges": [
            "(line 2549,col 5)-(line 2555,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict21()",
        "snippet": "  public void testTypeTagConflict21() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @private {string}\\n\" +\n          \" * @type {number}\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2558,
        "end_line": 2566,
        "comment": "",
        "child_ranges": [
            "(line 2559,col 5)-(line 2565,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict22()",
        "snippet": "  public void testTypeTagConflict22() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @protected {string}\\n\" +\n          \" * @param {string} x\\n\" +\n          \" */\\n\" +\n          \"function DictDict(x) {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2568,
        "end_line": 2576,
        "comment": "",
        "child_ranges": [
            "(line 2569,col 5)-(line 2575,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict23()",
        "snippet": "  public void testTypeTagConflict23() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @public {string}\\n\" +\n          \" * @return {string} x\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2578,
        "end_line": 2586,
        "comment": "",
        "child_ranges": [
            "(line 2579,col 5)-(line 2585,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict24()",
        "snippet": "  public void testTypeTagConflict24() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @const {string}\\n\" +\n          \" * @return {string} x\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2588,
        "end_line": 2596,
        "comment": "",
        "child_ranges": [
            "(line 2589,col 5)-(line 2595,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testPrivateType()",
        "snippet": "  public void testPrivateType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@private {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2598,
        "end_line": 2601,
        "comment": "",
        "child_ranges": [
            "(line 2599,col 5)-(line 2599,col 52)",
            "(line 2600,col 5)-(line 2600,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testProtectedType()",
        "snippet": "  public void testProtectedType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@protected {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2603,
        "end_line": 2606,
        "comment": "",
        "child_ranges": [
            "(line 2604,col 5)-(line 2604,col 54)",
            "(line 2605,col 5)-(line 2605,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testPublicType()",
        "snippet": "  public void testPublicType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@public {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2608,
        "end_line": 2611,
        "comment": "",
        "child_ranges": [
            "(line 2609,col 5)-(line 2609,col 51)",
            "(line 2610,col 5)-(line 2610,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testConstType()",
        "snippet": "  public void testConstType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@const {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2613,
        "end_line": 2616,
        "comment": "",
        "child_ranges": [
            "(line 2614,col 5)-(line 2614,col 50)",
            "(line 2615,col 5)-(line 2615,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStableIdGeneratorConflict()",
        "snippet": "  public void testStableIdGeneratorConflict() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @stableIdGenerator\\n\" +\n          \" * @stableIdGenerator\\n\" +\n          \" */\\n\" +\n          \"function getId() {}\",\n          \"extra @stableIdGenerator tag\");\n  }\n",
        "begin_line": 2618,
        "end_line": 2625,
        "comment": "",
        "child_ranges": [
            "(line 2619,col 5)-(line 2624,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateTypeNameMissing()",
        "snippet": "  public void testParserWithTemplateTypeNameMissing() {\n    parse(\"@template */\",\n        \"Bad type annotation. @template tag missing type name\");\n  }\n",
        "begin_line": 2627,
        "end_line": 2630,
        "comment": "",
        "child_ranges": [
            "(line 2628,col 5)-(line 2629,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateDuplicated()",
        "snippet": "  public void testParserWithTemplateDuplicated() {\n    parse(\"@template T\\n@template V */\",\n        \"Bad type annotation. @template tag at most once\");\n  }\n",
        "begin_line": 2632,
        "end_line": 2635,
        "comment": "",
        "child_ranges": [
            "(line 2633,col 5)-(line 2634,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTwoTemplates()",
        "snippet": "  public void testParserWithTwoTemplates() {\n    parse(\"@template T,V */\");\n  }\n",
        "begin_line": 2637,
        "end_line": 2639,
        "comment": "",
        "child_ranges": [
            "(line 2638,col 5)-(line 2638,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithClassTemplateTypeNameMissing()",
        "snippet": "  public void testParserWithClassTemplateTypeNameMissing() {\n    parse(\"@classTemplate */\",\n        \"Bad type annotation. @classTemplate tag missing type name\");\n  }\n",
        "begin_line": 2641,
        "end_line": 2644,
        "comment": "",
        "child_ranges": [
            "(line 2642,col 5)-(line 2643,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithClassTemplateDuplicated()",
        "snippet": "  public void testParserWithClassTemplateDuplicated() {\n    parse(\"@classTemplate T\\n@classTemplate V */\",\n        \"Bad type annotation. @classTemplate tag at most once\");\n  }\n",
        "begin_line": 2646,
        "end_line": 2649,
        "comment": "",
        "child_ranges": [
            "(line 2647,col 5)-(line 2648,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTwoClassTemplates()",
        "snippet": "  public void testParserWithTwoClassTemplates() {\n    parse(\"@classTemplate T,V */\");\n  }\n",
        "begin_line": 2651,
        "end_line": 2653,
        "comment": "",
        "child_ranges": [
            "(line 2652,col 5)-(line 2652,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithClassTemplatesAndTemplate()",
        "snippet": "  public void testParserWithClassTemplatesAndTemplate() {\n    parse(\"@template T\\n@classTemplate T,V */\");\n  }\n",
        "begin_line": 2655,
        "end_line": 2657,
        "comment": "",
        "child_ranges": [
            "(line 2656,col 5)-(line 2656,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedNewAnnotations()",
        "snippet": "  public void testWhitelistedNewAnnotations() {\n    parse(\"@foobar */\",\n        \"illegal use of unknown JSDoc tag \\\"foobar\\\"; ignoring it\");\n    extraAnnotations.add(\"foobar\");\n    parse(\"@foobar */\");\n  }\n",
        "begin_line": 2659,
        "end_line": 2664,
        "comment": "",
        "child_ranges": [
            "(line 2660,col 5)-(line 2661,col 68)",
            "(line 2662,col 5)-(line 2662,col 35)",
            "(line 2663,col 5)-(line 2663,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedConflictingAnnotation()",
        "snippet": "  public void testWhitelistedConflictingAnnotation() {\n    extraAnnotations.add(\"param\");\n    JSDocInfo info = parse(\"@param {number} index */\");\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 2666,
        "end_line": 2670,
        "comment": "",
        "child_ranges": [
            "(line 2667,col 5)-(line 2667,col 34)",
            "(line 2668,col 5)-(line 2668,col 55)",
            "(line 2669,col 5)-(line 2669,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNonIdentifierAnnotation()",
        "snippet": "  public void testNonIdentifierAnnotation() {\n    // Try to whitelist an annotation that is not a valid JS identifier.\n    // It should not work.\n    extraAnnotations.add(\"123\");\n    parse(\"@123 */\", \"illegal use of unknown JSDoc tag \\\"\\\"; ignoring it\");\n  }\n",
        "begin_line": 2672,
        "end_line": 2677,
        "comment": "",
        "child_ranges": [
            "(line 2675,col 5)-(line 2675,col 32)",
            "(line 2676,col 5)-(line 2676,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax1()",
        "snippet": "  public void testUnsupportedJsDocSyntax1() {\n    JSDocInfo info =\n        parse(\"@param {string} [accessLevel=\\\"author\\\"] The user level */\",\n            true);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"accessLevel\"));\n    assertEquals(\"The user level\",\n        info.getDescriptionForParameter(\"accessLevel\"));\n  }\n",
        "begin_line": 2679,
        "end_line": 2689,
        "comment": "",
        "child_ranges": [
            "(line 2680,col 5)-(line 2682,col 18)",
            "(line 2683,col 5)-(line 2683,col 46)",
            "(line 2684,col 5)-(line 2686,col 46)",
            "(line 2687,col 5)-(line 2688,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax2()",
        "snippet": "  public void testUnsupportedJsDocSyntax2() {\n    JSDocInfo info =\n        parse(\"@param userInfo The user info. \\n\" +\n              \" * @param userInfo.name The name of the user */\", true);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(\"The user info.\",\n        info.getDescriptionForParameter(\"userInfo\"));\n  }\n",
        "begin_line": 2691,
        "end_line": 2698,
        "comment": "",
        "child_ranges": [
            "(line 2692,col 5)-(line 2694,col 71)",
            "(line 2695,col 5)-(line 2695,col 46)",
            "(line 2696,col 5)-(line 2697,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedAnnotations()",
        "snippet": "  public void testWhitelistedAnnotations() {\n    parse(\n      \"* @addon \\n\" +\n      \"* @ngInject \\n\" +\n      \"* @augments \\n\" +\n      \"* @base \\n\" +\n      \"* @borrows \\n\" +\n      \"* @bug \\n\" +\n      \"* @class \\n\" +\n      \"* @config \\n\" +\n      \"* @constructs \\n\" +\n      \"* @default \\n\" +\n      \"* @description \\n\" +\n      \"* @event \\n\" +\n      \"* @example \\n\" +\n      \"* @exception \\n\" +\n      \"* @exec \\n\" +\n      \"* @externs \\n\" +\n      \"* @field \\n\" +\n      \"* @function \\n\" +\n      \"* @id \\n\" +\n      \"* @ignore \\n\" +\n      \"* @inner \\n\" +\n      \"* @lends {string} \\n\" +\n      \"* @link \\n\" +\n      \"* @member \\n\" +\n      \"* @memberOf \\n\" +\n      \"* @modName \\n\" +\n      \"* @mods \\n\" +\n      \"* @name \\n\" +\n      \"* @namespace \\n\" +\n      \"* @nocompile \\n\" +\n      \"* @property \\n\" +\n      \"* @requires \\n\" +\n      \"* @since \\n\" +\n      \"* @static \\n\" +\n      \"* @supported */\");\n  }\n",
        "begin_line": 2700,
        "end_line": 2737,
        "comment": "",
        "child_ranges": [
            "(line 2701,col 5)-(line 2736,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testGetOriginalCommentString()",
        "snippet": "  public void testGetOriginalCommentString() throws Exception {\n    String comment = \"* @desc This is a comment */\";\n    JSDocInfo info = parse(comment);\n    assertNull(info.getOriginalCommentString());\n    info = parse(comment, true /* parseDocumentation */);\n    assertEquals(comment, info.getOriginalCommentString());\n  }\n",
        "begin_line": 2739,
        "end_line": 2745,
        "comment": "",
        "child_ranges": [
            "(line 2740,col 5)-(line 2740,col 52)",
            "(line 2741,col 5)-(line 2741,col 36)",
            "(line 2742,col 5)-(line 2742,col 48)",
            "(line 2743,col 5)-(line 2743,col 57)",
            "(line 2744,col 5)-(line 2744,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNgInject1()",
        "snippet": "  public void testParseNgInject1() throws Exception {\n    assertTrue(parse(\"@ngInject*/\").isNgInject());\n  }\n",
        "begin_line": 2747,
        "end_line": 2749,
        "comment": "",
        "child_ranges": [
            "(line 2748,col 5)-(line 2748,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNgInject2()",
        "snippet": "  public void testParseNgInject2() throws Exception {\n    parse(\"@ngInject \\n@ngInject*/\", \"extra @ngInject tag\");\n  }\n",
        "begin_line": 2751,
        "end_line": 2753,
        "comment": "",
        "child_ranges": [
            "(line 2752,col 5)-(line 2752,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTextExtents()",
        "snippet": "  public void testTextExtents() {\n    parse(\"@return {@code foo} bar \\n *    baz. */\",\n        true, \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 2755,
        "end_line": 2758,
        "comment": "",
        "child_ranges": [
            "(line 2756,col 5)-(line 2757,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertDocumentationInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,\n                                                       String description,\n                                                       int startCharno,\n                                                       int endLineno,\n                                                       int endCharno) {\n    assertTrue(marker.getDescription() != null);\n    assertEquals(description, marker.getDescription().getItem());\n\n    // Match positional information.\n    assertEquals(marker.getAnnotation().getStartLine(),\n                 marker.getDescription().getStartLine());\n    assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());\n    assertEquals(endLineno, marker.getDescription().getEndLine());\n    assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2769,
        "end_line": 2785,
        "comment": "\n   * Asserts that a documentation field exists on the given marker.\n   *\n   * @param description The text of the documentation field expected.\n   * @param startCharno The starting character of the text.\n   * @param endLineno The ending line of the text.\n   * @param endCharno The ending character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2774,col 5)-(line 2774,col 48)",
            "(line 2775,col 5)-(line 2775,col 65)",
            "(line 2778,col 5)-(line 2779,col 57)",
            "(line 2780,col 5)-(line 2780,col 80)",
            "(line 2781,col 5)-(line 2781,col 66)",
            "(line 2782,col 5)-(line 2782,col 76)",
            "(line 2784,col 5)-(line 2784,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertTypeInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int, int, boolean)",
        "snippet": "  private JSDocInfo.Marker assertTypeInMarker(\n      JSDocInfo.Marker marker, String typeName,\n      int startLineno, int startCharno, int endLineno, int endCharno,\n      boolean hasBrackets) {\n\n    assertTrue(marker.getType() != null);\n    assertTrue(marker.getType().getItem().isString());\n\n    // Match the name and brackets information.\n    String foundName = marker.getType().getItem().getString();\n\n    assertEquals(typeName, foundName);\n    assertEquals(hasBrackets, marker.getType().hasBrackets());\n\n    // Match position information.\n    assertEquals(startCharno, marker.getType().getPositionOnStartLine());\n    assertEquals(endCharno, marker.getType().getPositionOnEndLine());\n    assertEquals(startLineno, marker.getType().getStartLine());\n    assertEquals(endLineno, marker.getType().getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2796,
        "end_line": 2817,
        "comment": "\n   * Asserts that a type field exists on the given marker.\n   *\n   * @param typeName The name of the type expected in the type field.\n   * @param startCharno The starting character of the type declaration.\n   * @param hasBrackets Whether the type in the type field is expected\n   *     to have brackets.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2801,col 5)-(line 2801,col 41)",
            "(line 2802,col 5)-(line 2802,col 54)",
            "(line 2805,col 5)-(line 2805,col 62)",
            "(line 2807,col 5)-(line 2807,col 38)",
            "(line 2808,col 5)-(line 2808,col 62)",
            "(line 2811,col 5)-(line 2811,col 73)",
            "(line 2812,col 5)-(line 2812,col 69)",
            "(line 2813,col 5)-(line 2813,col 63)",
            "(line 2814,col 5)-(line 2814,col 59)",
            "(line 2816,col 5)-(line 2816,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertNameInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int)",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,\n      String name, int startLine, int startCharno) {\n    assertTrue(marker.getName() != null);\n    assertEquals(name, marker.getName().getItem());\n\n    assertEquals(startCharno, marker.getName().getPositionOnStartLine());\n    assertEquals(startCharno + name.length(),\n                 marker.getName().getPositionOnEndLine());\n\n    assertEquals(startLine, marker.getName().getStartLine());\n    assertEquals(startLine, marker.getName().getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2826,
        "end_line": 2840,
        "comment": "\n   * Asserts that a name field exists on the given marker.\n   *\n   * @param name The name expected in the name field.\n   * @param startCharno The starting character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2829,col 5)-(line 2829,col 41)",
            "(line 2830,col 5)-(line 2830,col 51)",
            "(line 2832,col 5)-(line 2832,col 73)",
            "(line 2833,col 5)-(line 2834,col 58)",
            "(line 2836,col 5)-(line 2836,col 61)",
            "(line 2837,col 5)-(line 2837,col 59)",
            "(line 2839,col 5)-(line 2839,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno) {\n    return assertAnnotationMarker(jsdoc, annotationName, startLineno,\n                                  startCharno, 0);\n  }\n",
        "begin_line": 2853,
        "end_line": 2859,
        "comment": "\n   * Asserts that an annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 2857,col 5)-(line 2858,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno,\n                                                  int index) {\n\n    Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();\n\n    assertTrue(markers.size() > 0);\n\n    int counter = 0;\n\n    for (JSDocInfo.Marker marker : markers) {\n      if (marker.getAnnotation() != null) {\n        if (annotationName.equals(marker.getAnnotation().getItem())) {\n\n          if (counter == index) {\n            assertEquals(startLineno, marker.getAnnotation().getStartLine());\n            assertEquals(startCharno,\n                         marker.getAnnotation().getPositionOnStartLine());\n            assertEquals(startLineno, marker.getAnnotation().getEndLine());\n            assertEquals(startCharno + annotationName.length(),\n                         marker.getAnnotation().getPositionOnEndLine());\n\n            return marker;\n          }\n\n          counter++;\n        }\n      }\n    }\n\n    fail(\"No marker found\");\n    return null;\n  }\n",
        "begin_line": 2873,
        "end_line": 2907,
        "comment": "\n   * Asserts that the index-th annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @param index The index of the marker.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 2879,col 5)-(line 2879,col 62)",
            "(line 2881,col 5)-(line 2881,col 35)",
            "(line 2883,col 5)-(line 2883,col 20)",
            "(line 2885,col 5)-(line 2903,col 5)",
            "(line 2905,col 5)-(line 2905,col 28)",
            "(line 2906,col 5)-(line 2906,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertContains(java.util.Collection<T>, T)",
        "snippet": "  private <T> void assertContains(Collection<T> collection, T item) {\n    assertTrue(collection.contains(item));\n  }\n",
        "begin_line": 2909,
        "end_line": 2911,
        "comment": "",
        "child_ranges": [
            "(line 2910,col 5)-(line 2910,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFull(java.lang.String, java.lang.String...)",
        "snippet": "  private void parseFull(String code, String... warnings) {\n    CompilerEnvirons environment = new CompilerEnvirons();\n\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    environment.setErrorReporter(testErrorReporter);\n\n    environment.setRecordingComments(true);\n    environment.setRecordingLocalJsDocComments(true);\n\n    Parser p = new Parser(environment, testErrorReporter);\n    AstRoot script = p.parse(code, null, 0);\n\n    Config config =\n        new Config(extraAnnotations, extraSuppressions,\n            true, LanguageMode.ECMASCRIPT3, false);\n    for (Comment comment : script.getComments()) {\n      JsDocInfoParser jsdocParser =\n        new JsDocInfoParser(\n            new JsDocTokenStream(comment.getValue().substring(3),\n                comment.getLineno()),\n            comment,\n            null,\n            config,\n            testErrorReporter);\n      jsdocParser.parse();\n      jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n\n    assertTrue(\"some expected warnings were not reported\",\n        testErrorReporter.hasEncounteredAllWarnings());\n  }\n",
        "begin_line": 2913,
        "end_line": 2943,
        "comment": "",
        "child_ranges": [
            "(line 2914,col 5)-(line 2914,col 58)",
            "(line 2916,col 5)-(line 2916,col 80)",
            "(line 2917,col 5)-(line 2917,col 52)",
            "(line 2919,col 5)-(line 2919,col 43)",
            "(line 2920,col 5)-(line 2920,col 53)",
            "(line 2922,col 5)-(line 2922,col 58)",
            "(line 2923,col 5)-(line 2923,col 44)",
            "(line 2925,col 5)-(line 2927,col 51)",
            "(line 2928,col 5)-(line 2939,col 5)",
            "(line 2941,col 5)-(line 2942,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverviewWithoutDoc(java.lang.String, java.lang.String...)",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private JSDocInfo parseFileOverviewWithoutDoc(String comment,\n                                                String... warnings) {\n    return parse(comment, false, true, warnings);\n  }\n",
        "begin_line": 2945,
        "end_line": 2949,
        "comment": "",
        "child_ranges": [
            "(line 2948,col 5)-(line 2948,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverview(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parseFileOverview(String comment, String... warnings) {\n    return parse(comment, true, true, warnings);\n  }\n",
        "begin_line": 2951,
        "end_line": 2953,
        "comment": "",
        "child_ranges": [
            "(line 2952,col 5)-(line 2952,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, String... warnings) {\n    return parse(comment, false, warnings);\n  }\n",
        "begin_line": 2955,
        "end_line": 2957,
        "comment": "",
        "child_ranges": [
            "(line 2956,col 5)-(line 2956,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n                          String... warnings) {\n    return parse(comment, parseDocumentation, false, warnings);\n  }\n",
        "begin_line": 2959,
        "end_line": 2962,
        "comment": "",
        "child_ranges": [
            "(line 2961,col 5)-(line 2961,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n      boolean parseFileOverview, String... warnings) {\n    TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n\n    Config config = new Config(extraAnnotations, extraSuppressions,\n        parseDocumentation, LanguageMode.ECMASCRIPT3, false);\n    StaticSourceFile file = new SimpleSourceFile(\"testcode\", false);\n    Node associatedNode = new Node(Token.SCRIPT);\n    associatedNode.setInputId(new InputId(file.getName()));\n    associatedNode.setStaticSourceFile(file);\n    JsDocInfoParser jsdocParser = new JsDocInfoParser(\n        stream(comment),\n        new Comment(0, 0, CommentType.JSDOC, comment),\n        associatedNode,\n        config, errorReporter);\n\n    if (fileLevelJsDocBuilder != null) {\n      jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    }\n\n    jsdocParser.parse();\n\n    assertTrue(\"expected warnings were not reported\",\n        errorReporter.hasEncounteredAllWarnings());\n\n    if (parseFileOverview) {\n      return jsdocParser.getFileOverviewJSDocInfo();\n    } else {\n      return jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n  }\n",
        "begin_line": 2964,
        "end_line": 2994,
        "comment": "",
        "child_ranges": [
            "(line 2966,col 5)-(line 2966,col 76)",
            "(line 2968,col 5)-(line 2969,col 61)",
            "(line 2970,col 5)-(line 2970,col 68)",
            "(line 2971,col 5)-(line 2971,col 49)",
            "(line 2972,col 5)-(line 2972,col 59)",
            "(line 2973,col 5)-(line 2973,col 45)",
            "(line 2974,col 5)-(line 2978,col 31)",
            "(line 2980,col 5)-(line 2982,col 5)",
            "(line 2984,col 5)-(line 2984,col 24)",
            "(line 2986,col 5)-(line 2987,col 51)",
            "(line 2989,col 5)-(line 2993,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseType(java.lang.String)",
        "snippet": "  private Node parseType(String typeComment) {\n    return JsDocInfoParser.parseTypeString(typeComment);\n  }\n",
        "begin_line": 2996,
        "end_line": 2998,
        "comment": "",
        "child_ranges": [
            "(line 2997,col 5)-(line 2997,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.stream(java.lang.String)",
        "snippet": "  private JsDocTokenStream stream(String source) {\n    return new JsDocTokenStream(source, 0);\n  }\n",
        "begin_line": 3000,
        "end_line": 3002,
        "comment": "",
        "child_ranges": [
            "(line 3001,col 5)-(line 3001,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertTemplatizedTypeEquals(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  private void assertTemplatizedTypeEquals(String key, JSType expected,\n                                           JSTypeExpression te) {\n    assertEquals(\n        expected, resolve(te).getTemplateTypeMap().getTemplateType(key));\n  }\n",
        "begin_line": 3004,
        "end_line": 3008,
        "comment": "",
        "child_ranges": [
            "(line 3006,col 5)-(line 3007,col 73)"
        ]
    }
]