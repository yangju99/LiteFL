[
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6112755307178490473L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n",
        "snippet": "    protected long n;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Count of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1",
        "snippet": "    protected double m1;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " First moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.dev",
        "snippet": "    protected double dev;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * Deviation of most recently added value from previous first moment.\n     * Retained to prevent repeated computation in higher order moments.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.nDev",
        "snippet": "    protected double nDev;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n     * Deviation of most recently added value from previous first moment,\n     * normalized by previous sample size.  Retained to prevent repeated\n     * computation in higher order moments\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.INFINITE_WINDOW",
        "snippet": "    public static final int INFINITE_WINDOW = -1;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * Represents an infinite window size.  When the {@link #getWindowSize()}\n     * returns this value, there is no limit to the number of data values\n     * that can be stored in the dataset.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4133067267405273064L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME",
        "snippet": "    private static final String SET_QUANTILE_METHOD_NAME = \"setQuantile\";",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Name of the setQuantile method. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize",
        "snippet": "    protected int windowSize = INFINITE_WINDOW;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " hold the window size *"
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA",
        "snippet": "    protected ResizableDoubleArray eDA = new ResizableDoubleArray();",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     *  Stored data values\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl",
        "snippet": "    private UnivariateStatistic meanImpl = new Mean();",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl",
        "snippet": "    private UnivariateStatistic geometricMeanImpl = new GeometricMean();",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Geometric mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl",
        "snippet": "    private UnivariateStatistic kurtosisImpl = new Kurtosis();",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Kurtosis statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl",
        "snippet": "    private UnivariateStatistic maxImpl = new Max();",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Maximum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl",
        "snippet": "    private UnivariateStatistic minImpl = new Min();",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Minimum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl",
        "snippet": "    private UnivariateStatistic percentileImpl = new Percentile();",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Percentile statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl",
        "snippet": "    private UnivariateStatistic skewnessImpl = new Skewness();",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Skewness statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl",
        "snippet": "    private UnivariateStatistic varianceImpl = new Variance();",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Variance statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl",
        "snippet": "    private UnivariateStatistic sumsqImpl = new SumOfSquares();",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Sum of squares statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl",
        "snippet": "    private UnivariateStatistic sumImpl = new Sum();",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Sum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.util.LocalizedFormats",
        "src_path": "src/main/java/org/apache/commons/math/util/LocalizedFormats.java",
        "signature": "org.apache.commons.math.util.LocalizedFormats.sourceFormat",
        "snippet": "    private final String sourceFormat;",
        "begin_line": 299,
        "end_line": 299,
        "comment": " Source English format. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9111962718267217978L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.moment",
        "snippet": "    protected SecondMoment moment = null;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " SecondMoment is used in incremental calculation of Variance"
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment",
        "snippet": "    protected boolean incMoment = true;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n     * Boolean test to determine if this Variance should also increment\n     * the second moment, this evaluates to false when this Variance is\n     * constructed with an external SecondMoment as a parameter.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected",
        "snippet": "    private boolean isBiasCorrected = true;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * Determines whether or not bias correction is applied when computing the\n     * value of the statisic.  True means that bias is corrected.  See\n     * {@link Variance} for details on the formula.\n     "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.absoluteAccuracy",
        "snippet": "    protected double absoluteAccuracy;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Maximum absolute error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.relativeAccuracy",
        "snippet": "    protected double relativeAccuracy;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Maximum relative error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.maximalIterationCount",
        "snippet": "    protected int maximalIterationCount;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Maximum number of iterations. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.defaultAbsoluteAccuracy",
        "snippet": "    protected double defaultAbsoluteAccuracy;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Default maximum absolute error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.defaultRelativeAccuracy",
        "snippet": "    protected double defaultRelativeAccuracy;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Default maximum relative error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.defaultMaximalIterationCount",
        "snippet": "    protected int defaultMaximalIterationCount;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Default maximum number of iterations. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.iterationCount",
        "snippet": "    protected int iterationCount;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " The last iteration count. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -370076995648386763L;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n",
        "snippet": "    private int n;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "Number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value",
        "snippet": "    private double value;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n     * The currently running value\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.resultComputed",
        "snippet": "    private boolean resultComputed;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Indicates where a root has been computed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.result",
        "snippet": "    private double result;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " The last computed root. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.functionValue",
        "snippet": "    private double functionValue;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Value of the function at the last computed result. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.goal",
        "snippet": "    private GoalType goal;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Optimization type "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.min",
        "snippet": "    private double min;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Lower end of search interval. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.max",
        "snippet": "    private double max;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Higher end of search interval. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.startValue",
        "snippet": "    private double startValue;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Initial guess . "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.function",
        "snippet": "    private UnivariateRealFunction function;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Function to optimize. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5983375963110961019L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.optimizer",
        "snippet": "    private final UnivariateRealOptimizer optimizer;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Underlying classical optimizer. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.totalIterations",
        "snippet": "    private int totalIterations;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Number of iterations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.totalEvaluations",
        "snippet": "    private int totalEvaluations;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Number of evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.starts",
        "snippet": "    private int starts;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Number of starts to go. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.generator",
        "snippet": "    private RandomGenerator generator;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Random generator for multi-start. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.optima",
        "snippet": "    private double[] optima;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Found optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.optimaValues",
        "snippet": "    private double[] optimaValues;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Found function values at optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer.GOLDEN_SECTION",
        "snippet": "    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Golden section.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2941995784909003131L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.n",
        "snippet": "    private long n;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "Number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.value",
        "snippet": "    private double value;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "Current value of the statistic "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Kurtosis",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2784465764798260919L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Kurtosis",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment",
        "snippet": "    protected FourthMoment moment;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "Fourth Moment on which this statistic is based "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Kurtosis",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment",
        "snippet": "    protected boolean incMoment;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n     * Determines whether or not this statistic can be incremented or cleared.\n     * <p>\n     * Statistics based on (constructed from) external moments cannot\n     * be incremented or cleared.</p>\n    "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7818711964045118679L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3",
        "snippet": "    protected double m3;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " third moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDevSq",
        "snippet": "    protected double nDevSq;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n     * Square of deviation of most recently added value from previous first\n     * moment, normalized by previous sample size.  Retained to prevent\n     * repeated computation in higher order moments.  nDevSq = nDev * nDev.\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathIllegalArgumentException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
        "signature": "org.apache.commons.math.exception.MathIllegalArgumentException.specific",
        "snippet": "    private final Localizable specific;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Pattern used to build the message (specific context).\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathIllegalArgumentException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
        "signature": "org.apache.commons.math.exception.MathIllegalArgumentException.general",
        "snippet": "    private final Localizable general;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * Pattern used to build the message (general problem description).\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathIllegalArgumentException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
        "signature": "org.apache.commons.math.exception.MathIllegalArgumentException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5593383832225844641L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.n",
        "snippet": "    private long n;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.value",
        "snippet": "    private double value;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Current value of the statistic "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.GeometricMean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8178734905303459453L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.GeometricMean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs",
        "snippet": "    private StorelessUnivariateStatistic sumOfLogs;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Wrapped SumOfLogs instance "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Percentile",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Percentile.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8091216485095130416L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Percentile",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile",
        "snippet": "    private double quantile = 0.0;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Determines what percentile is computed when evaluate() is activated\n     * with no quantile argument "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FourthMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FourthMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4763990447117157611L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FourthMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4",
        "snippet": "    protected double m4;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " fourth moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Skewness",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Skewness.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7101857578996691352L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Skewness",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Skewness.moment",
        "snippet": "    protected ThirdMoment moment = null;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Third moment on which this statistic is based "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Skewness",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment",
        "snippet": "    protected boolean incMoment;",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * Determines whether or not this statistic can be incremented or cleared.\n     * <p>\n     * Statistics based on (constructed from) external moments cannot\n     * be incremented or cleared.</p>\n    "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3942403127395076445L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2",
        "snippet": "    protected double m2;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " second moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE",
        "snippet": "    public static final int ADDITIVE_MODE = 1;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " additive expansion mode "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE",
        "snippet": "    public static final int MULTIPLICATIVE_MODE = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " multiplicative expansion mode "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3485529955529426875L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria",
        "snippet": "    protected float contractionCriteria = 2.5f;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * The contraction criteria determines when the internal array will be\n     * contracted to fit the number of elements contained in the element\n     *  array + 1.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor",
        "snippet": "    protected float expansionFactor = 2.0f;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n     * The expansion factor of the array.  When the array needs to be expanded,\n     * the new array size will be\n     * <code>internalArray.length * expansionFactor</code>\n     * if <code>expansionMode</code> is set to MULTIPLICATIVE_MODE, or\n     * <code>internalArray.length + expansionFactor</code> if\n     * <code>expansionMode</code> is set to ADDITIVE_MODE.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.expansionMode",
        "snippet": "    protected int expansionMode = MULTIPLICATIVE_MODE;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * Determines whether array expansion by <code>expansionFactor</code>\n     * is additive or multiplicative.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity",
        "snippet": "    protected int initialCapacity = 16;",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\n     * The initial capacity of the array.  Initial capacity is not exposed as a\n     * property as it is only meaningful when passed to a constructor.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.internalArray",
        "snippet": "    protected double[] internalArray;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n     * The internal storage array.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.numElements",
        "snippet": "    protected int numElements = 0;",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\n     * The number of addressable elements in the array.  Note that this\n     * has nothing to do with the length of the internal storage array.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.startIndex",
        "snippet": "    protected int startIndex = 0;",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n     * The position of the first addressable element in the internal storage\n     * array.  The addressable elements in the array are <code>\n     * internalArray[startIndex],...,internalArray[startIndex + numElements -1]\n     * </code>\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1460986908574398008L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n",
        "snippet": "    private long n;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value",
        "snippet": "    private double value;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * The currently running sumSq\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8231831954703408316L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.n",
        "snippet": "    private long n;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.value",
        "snippet": "    private double value;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * The currently running sum.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 9058794795027570002L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.pattern",
        "snippet": "    private final Localizable pattern;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Pattern used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 5305498554076846637L;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6718518191249632175L;",
        "begin_line": 285,
        "end_line": 285,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6067985859347601503L;",
        "begin_line": 329,
        "end_line": 329,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -4284649691002411505L;",
        "begin_line": 390,
        "end_line": 390,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6880901520234515725L;",
        "begin_line": 447,
        "end_line": 447,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -1878427236170442052L;",
        "begin_line": 491,
        "end_line": 491,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 1632410088350355086L;",
        "begin_line": 535,
        "end_line": 535,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 451965530686593945L;",
        "begin_line": 579,
        "end_line": 579,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 8153587599409010120L;",
        "begin_line": 629,
        "end_line": 629,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -201865440834027016L;",
        "begin_line": 657,
        "end_line": 657,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1296043746617791564L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.moment",
        "snippet": "    protected FirstMoment moment;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " First moment on which this statistic is based. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment",
        "snippet": "    protected boolean incMoment;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Determines whether or not this statistic can be incremented or cleared.\n     * <p>\n     * Statistics based on (constructed from) external moments cannot\n     * be incremented or cleared.</p>\n     "
    }
]