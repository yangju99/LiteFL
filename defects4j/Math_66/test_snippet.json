[
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testSinMin()",
        "snippet": "    @Test\n    public void testSinMin() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);\n            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n        assertTrue(minimizer.getEvaluations() > 150);\n        assertTrue(minimizer.getEvaluations() < 250);\n    }\n",
        "begin_line": 34,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 53)",
            "(line 37,col 9)-(line 37,col 66)",
            "(line 38,col 9)-(line 38,col 56)",
            "(line 39,col 9)-(line 39,col 32)",
            "(line 40,col 9)-(line 41,col 69)",
            "(line 42,col 9)-(line 42,col 64)",
            "(line 43,col 9)-(line 43,col 48)",
            "(line 44,col 9)-(line 44,col 60)",
            "(line 45,col 9)-(line 50,col 9)",
            "(line 51,col 9)-(line 51,col 53)",
            "(line 52,col 9)-(line 52,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin()",
        "snippet": "    @Test\n    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561270319131, result, 1.0e-13);\n        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);\n        assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n        assertTrue(minimizer.getEvaluations()    >= 120);\n        assertTrue(minimizer.getEvaluations()    <= 170);\n        assertTrue(minimizer.getIterationCount() >= 120);\n        assertTrue(minimizer.getIterationCount() <= 170);\n    }\n",
        "begin_line": 55,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 66)",
            "(line 61,col 9)-(line 61,col 46)",
            "(line 62,col 9)-(line 62,col 56)",
            "(line 63,col 9)-(line 63,col 31)",
            "(line 64,col 9)-(line 65,col 68)",
            "(line 66,col 9)-(line 66,col 76)",
            "(line 67,col 9)-(line 67,col 76)",
            "(line 69,col 9)-(line 76,col 9)",
            "(line 77,col 9)-(line 84,col 9)",
            "(line 86,col 9)-(line 86,col 77)",
            "(line 87,col 9)-(line 87,col 59)",
            "(line 88,col 9)-(line 88,col 74)",
            "(line 89,col 9)-(line 89,col 82)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 92,col 9)-(line 92,col 60)",
            "(line 93,col 9)-(line 95,col 9)",
            "(line 96,col 9)-(line 96,col 57)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 57)",
            "(line 99,col 9)-(line 99,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testSinMin()",
        "snippet": "    @Test\n    public void testSinMin() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        assertEquals(200, minimizer.getMaxEvaluations());\n        try {\n            minimizer.getResult();\n            fail(\"an exception should have been thrown\");\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());\n        assertTrue(minimizer.getIterationCount() <= 50);\n        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());\n        assertTrue(minimizer.getIterationCount() <= 50);\n        assertTrue(minimizer.getEvaluations()    <= 100);\n        assertTrue(minimizer.getEvaluations()    >=  15);\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            fail(\"an exception should have been thrown\");\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n    }\n",
        "begin_line": 40,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 53)",
            "(line 43,col 9)-(line 43,col 65)",
            "(line 44,col 9)-(line 44,col 41)",
            "(line 45,col 9)-(line 45,col 57)",
            "(line 46,col 9)-(line 53,col 9)",
            "(line 54,col 9)-(line 54,col 124)",
            "(line 55,col 9)-(line 55,col 56)",
            "(line 56,col 9)-(line 56,col 124)",
            "(line 57,col 9)-(line 57,col 56)",
            "(line 58,col 9)-(line 58,col 57)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 40)",
            "(line 61,col 9)-(line 68,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMin()",
        "snippet": "    @Test\n    public void testQuinticMin() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        assertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-8);\n        assertEquals( 0.82221643, minimizer.optimize(f, GoalType.MINIMIZE,  0.3,  0.9), 1.0e-8);\n        assertTrue(minimizer.getIterationCount() <= 50);\n\n        // search in a large interval\n        assertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -1.0, 0.2), 1.0e-8);\n        assertTrue(minimizer.getIterationCount() <= 50);\n    }\n",
        "begin_line": 71,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 65)",
            "(line 76,col 9)-(line 76,col 96)",
            "(line 77,col 9)-(line 77,col 96)",
            "(line 78,col 9)-(line 78,col 56)",
            "(line 81,col 9)-(line 81,col 95)",
            "(line 82,col 9)-(line 82,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics()",
        "snippet": "    @Test\n    public void testQuinticMinStatistics() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\n        assertEquals(medianIter, 17, Math.ulp(1d));\n        assertEquals(medianEval, 18, Math.ulp(1d));\n    }\n",
        "begin_line": 85,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 45)",
            "(line 91,col 9)-(line 91,col 45)",
            "(line 93,col 9)-(line 93,col 74)",
            "(line 94,col 9)-(line 96,col 9)",
            "(line 98,col 9)-(line 98,col 33)",
            "(line 99,col 9)-(line 99,col 32)",
            "(line 100,col 9)-(line 100,col 33)",
            "(line 101,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 107,col 9)",
            "(line 109,col 9)-(line 109,col 54)",
            "(line 110,col 9)-(line 110,col 60)",
            "(line 111,col 9)-(line 111,col 60)",
            "(line 112,col 9)-(line 112,col 83)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMax()",
        "snippet": "    @Test\n    public void testQuinticMax() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has a local maximum at 0.27195613.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        assertEquals(0.27195613, minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3), 1.0e-8);\n        minimizer.setMaximalIterationCount(5);\n        try {\n            minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3);\n            fail(\"an exception should have been thrown\");\n        } catch (MaxIterationsExceededException miee) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n    }\n",
        "begin_line": 117,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 57)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 93)",
            "(line 124,col 9)-(line 124,col 46)",
            "(line 125,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testMinEndpoints()",
        "snippet": "    @Test\n    public void testMinEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer solver = new BrentOptimizer();\n\n        solver.setRelativeAccuracy(1e-8);\n\n        // endpoint is minimum\n        double result = solver.optimize(f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5);\n        assertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());\n\n        result = solver.optimize(f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2);\n        assertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());\n    }\n",
        "begin_line": 135,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 62)",
            "(line 140,col 9)-(line 140,col 41)",
            "(line 143,col 9)-(line 143,col 82)",
            "(line 144,col 9)-(line 144,col 81)",
            "(line 146,col 9)-(line 146,col 75)",
            "(line 147,col 9)-(line 147,col 81)"
        ]
    }
]