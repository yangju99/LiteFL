[
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828()",
        "snippet": "    @Test\n    public void testMath828() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(\n                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);\n        \n        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();\n\n        constraints.add(new LinearConstraint(new double[] {0.0, 39.0, 23.0, 96.0, 15.0, 48.0, 9.0, 21.0, 48.0, 36.0, 76.0, 19.0, 88.0, 17.0, 16.0, 36.0,}, Relationship.GEQ, 15.0));\n        constraints.add(new LinearConstraint(new double[] {0.0, 59.0, 93.0, 12.0, 29.0, 78.0, 73.0, 87.0, 32.0, 70.0, 68.0, 24.0, 11.0, 26.0, 65.0, 25.0,}, Relationship.GEQ, 29.0));\n        constraints.add(new LinearConstraint(new double[] {0.0, 74.0, 5.0, 82.0, 6.0, 97.0, 55.0, 44.0, 52.0, 54.0, 5.0, 93.0, 91.0, 8.0, 20.0, 97.0,}, Relationship.GEQ, 6.0));\n        constraints.add(new LinearConstraint(new double[] {8.0, -3.0, -28.0, -72.0, -8.0, -31.0, -31.0, -74.0, -47.0, -59.0, -24.0, -57.0, -56.0, -16.0, -92.0, -59.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {25.0, -7.0, -99.0, -78.0, -25.0, -14.0, -16.0, -89.0, -39.0, -56.0, -53.0, -9.0, -18.0, -26.0, -11.0, -61.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {33.0, -95.0, -15.0, -4.0, -33.0, -3.0, -20.0, -96.0, -27.0, -13.0, -80.0, -24.0, -3.0, -13.0, -57.0, -76.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {7.0, -95.0, -39.0, -93.0, -7.0, -94.0, -94.0, -62.0, -76.0, -26.0, -53.0, -57.0, -31.0, -76.0, -53.0, -52.0,}, Relationship.GEQ, 0.0));\n        \n        double epsilon = 1e-6;\n        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(1.0d, solution.getValue(), epsilon);\n        Assert.assertTrue(validSolution(solution, constraints, epsilon));\n    }\n",
        "begin_line": 33,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 36,col 117)",
            "(line 38,col 9)-(line 38,col 84)",
            "(line 40,col 9)-(line 40,col 180)",
            "(line 41,col 9)-(line 41,col 181)",
            "(line 42,col 9)-(line 42,col 176)",
            "(line 43,col 9)-(line 43,col 193)",
            "(line 44,col 9)-(line 44,col 194)",
            "(line 45,col 9)-(line 45,col 193)",
            "(line 46,col 9)-(line 46,col 194)",
            "(line 48,col 9)-(line 48,col 30)",
            "(line 49,col 9)-(line 49,col 104)",
            "(line 50,col 9)-(line 50,col 64)",
            "(line 51,col 9)-(line 51,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828Cycle()",
        "snippet": "    @Test\n    public void testMath828Cycle() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(\n                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);\n        \n        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();\n\n        constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));\n        constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));\n        constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));\n        constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));\n        \n        double epsilon = 1e-6;\n        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(1.0d, solution.getValue(), epsilon);\n        Assert.assertTrue(validSolution(solution, constraints, epsilon));        \n    }\n",
        "begin_line": 54,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 57,col 192)",
            "(line 59,col 9)-(line 59,col 84)",
            "(line 61,col 9)-(line 61,col 268)",
            "(line 62,col 9)-(line 62,col 269)",
            "(line 63,col 9)-(line 63,col 270)",
            "(line 64,col 9)-(line 64,col 301)",
            "(line 65,col 9)-(line 65,col 300)",
            "(line 66,col 9)-(line 66,col 299)",
            "(line 67,col 9)-(line 67,col 299)",
            "(line 69,col 9)-(line 69,col 30)",
            "(line 70,col 9)-(line 70,col 104)",
            "(line 71,col 9)-(line 71,col 64)",
            "(line 72,col 9)-(line 72,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781()",
        "snippet": "    @Test\n    public void testMath781() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\n        constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0);\n        Assert.assertEquals(2.0d, solution.getValue(), epsilon);\n    }\n",
        "begin_line": 75,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 93)",
            "(line 79,col 9)-(line 79,col 84)",
            "(line 80,col 9)-(line 80,col 93)",
            "(line 81,col 9)-(line 81,col 95)",
            "(line 82,col 9)-(line 82,col 95)",
            "(line 84,col 9)-(line 84,col 30)",
            "(line 85,col 9)-(line 85,col 51)",
            "(line 86,col 9)-(line 86,col 92)",
            "(line 88,col 9)-(line 88,col 90)",
            "(line 89,col 9)-(line 89,col 90)",
            "(line 90,col 9)-(line 90,col 90)",
            "(line 91,col 9)-(line 91,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath713NegativeVariable()",
        "snippet": "    @Test\n    public void testMath713NegativeVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);\n    }\n",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 95)",
            "(line 97,col 9)-(line 97,col 84)",
            "(line 98,col 9)-(line 98,col 87)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 91)",
            "(line 104,col 9)-(line 104,col 91)",
            "(line 105,col 9)-(line 105,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434NegativeVariable()",
        "snippet": "    @Test\n    public void testMath434NegativeVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 1, 0}, Relationship.EQ, 5));\n        constraints.add(new LinearConstraint(new double[] {0, 0, 1}, Relationship.GEQ, -10));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n\n        Assert.assertEquals(5.0, solution.getPoint()[0] + solution.getPoint()[1], epsilon);\n        Assert.assertEquals(-10.0, solution.getPoint()[2], epsilon);\n        Assert.assertEquals(-10.0, solution.getValue(), epsilon);\n\n    }\n",
        "begin_line": 108,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 100)",
            "(line 111,col 9)-(line 111,col 84)",
            "(line 112,col 9)-(line 112,col 90)",
            "(line 113,col 9)-(line 113,col 93)",
            "(line 115,col 9)-(line 115,col 30)",
            "(line 116,col 9)-(line 116,col 51)",
            "(line 117,col 9)-(line 117,col 92)",
            "(line 119,col 9)-(line 119,col 91)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434UnfeasibleSolution()",
        "snippet": "    @Test(expected = NoFeasibleSolutionException.class)\n    public void testMath434UnfeasibleSolution() {\n        double epsilon = 1e-6;\n\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 0.0}, 0.0);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {epsilon/2, 0.5}, Relationship.EQ, 0));\n        constraints.add(new LinearConstraint(new double[] {1e-3, 0.1}, Relationship.EQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        // allowing only non-negative values, no feasible solution shall be found\n        solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n    }\n",
        "begin_line": 125,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 30)",
            "(line 129,col 9)-(line 129,col 94)",
            "(line 130,col 9)-(line 130,col 84)",
            "(line 131,col 9)-(line 131,col 97)",
            "(line 132,col 9)-(line 132,col 93)",
            "(line 134,col 9)-(line 134,col 51)",
            "(line 136,col 9)-(line 136,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434PivotRowSelection()",
        "snippet": "    @Test\n    public void testMath434PivotRowSelection() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0}, 0.0);\n\n        double epsilon = 1e-6;\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {200}, Relationship.GEQ, 1));\n        constraints.add(new LinearConstraint(new double[] {100}, Relationship.GEQ, 0.499900001));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n        \n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) >= 0);\n        Assert.assertEquals(0.0050, solution.getValue(), epsilon);\n    }\n",
        "begin_line": 139,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 89)",
            "(line 143,col 9)-(line 143,col 30)",
            "(line 144,col 9)-(line 144,col 84)",
            "(line 145,col 9)-(line 145,col 87)",
            "(line 146,col 9)-(line 146,col 97)",
            "(line 148,col 9)-(line 148,col 51)",
            "(line 149,col 9)-(line 149,col 92)",
            "(line 151,col 9)-(line 151,col 98)",
            "(line 152,col 9)-(line 152,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434PivotRowSelection2()",
        "snippet": "    @Test\n    public void testMath434PivotRowSelection2() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);\n\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1.0d, -0.1d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.EQ, -0.1d));\n        constraints.add(new LinearConstraint(new double[] {1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, -1e-18d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 1.0d, 0.0d, -0.0128588d, 1e-5d}, Relationship.EQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 0.0d, 1.0d, 1e-5d, -0.0128586d}, Relationship.EQ, 1e-10d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, -1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, -1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, 1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n\n        double epsilon = 1e-7;\n        SimplexSolver simplex = new SimplexSolver();\n        PointValuePair solution = simplex.optimize(f, constraints, GoalType.MINIMIZE, false);\n        \n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], -1e-18d, epsilon) >= 0);\n        Assert.assertEquals(1.0d, solution.getPoint()[1], epsilon);        \n        Assert.assertEquals(0.0d, solution.getPoint()[2], epsilon);\n        Assert.assertEquals(1.0d, solution.getValue(), epsilon);\n    }\n",
        "begin_line": 155,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 127)",
            "(line 159,col 9)-(line 159,col 84)",
            "(line 160,col 9)-(line 160,col 128)",
            "(line 161,col 9)-(line 161,col 130)",
            "(line 162,col 9)-(line 162,col 127)",
            "(line 163,col 9)-(line 163,col 134)",
            "(line 164,col 9)-(line 164,col 136)",
            "(line 165,col 9)-(line 165,col 128)",
            "(line 166,col 9)-(line 166,col 127)",
            "(line 167,col 9)-(line 167,col 128)",
            "(line 168,col 9)-(line 168,col 127)",
            "(line 170,col 9)-(line 170,col 30)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 93)",
            "(line 174,col 9)-(line 174,col 94)",
            "(line 175,col 9)-(line 175,col 67)",
            "(line 176,col 9)-(line 176,col 67)",
            "(line 177,col 9)-(line 177,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath272()",
        "snippet": "    @Test\n    public void testMath272() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertEquals(0.0, solution.getPoint()[0], .0000001);\n        Assert.assertEquals(1.0, solution.getPoint()[1], .0000001);\n        Assert.assertEquals(1.0, solution.getPoint()[2], .0000001);\n        Assert.assertEquals(3.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 180,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 93)",
            "(line 183,col 9)-(line 183,col 85)",
            "(line 184,col 9)-(line 184,col 94)",
            "(line 185,col 9)-(line 185,col 94)",
            "(line 186,col 9)-(line 186,col 94)",
            "(line 188,col 9)-(line 188,col 51)",
            "(line 189,col 9)-(line 189,col 91)",
            "(line 191,col 9)-(line 191,col 67)",
            "(line 192,col 9)-(line 192,col 67)",
            "(line 193,col 9)-(line 193,col 67)",
            "(line 194,col 9)-(line 194,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath286()",
        "snippet": "    @Test\n    public void testMath286() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n\n        Assert.assertEquals(25.8, solution.getValue(), .0000001);\n        Assert.assertEquals(23.0, solution.getPoint()[0] + solution.getPoint()[2] + solution.getPoint()[4], 0.0000001);\n        Assert.assertEquals(23.0, solution.getPoint()[1] + solution.getPoint()[3] + solution.getPoint()[5], 0.0000001);\n        Assert.assertTrue(solution.getPoint()[0] >= 10.0 - 0.0000001);\n        Assert.assertTrue(solution.getPoint()[2] >= 8.0 - 0.0000001);\n        Assert.assertTrue(solution.getPoint()[4] >= 5.0 - 0.0000001);\n    }\n",
        "begin_line": 197,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 115)",
            "(line 200,col 9)-(line 200,col 85)",
            "(line 201,col 9)-(line 201,col 104)",
            "(line 202,col 9)-(line 202,col 104)",
            "(line 203,col 9)-(line 203,col 105)",
            "(line 204,col 9)-(line 204,col 104)",
            "(line 205,col 9)-(line 205,col 104)",
            "(line 207,col 9)-(line 207,col 51)",
            "(line 208,col 9)-(line 208,col 91)",
            "(line 210,col 9)-(line 210,col 65)",
            "(line 211,col 9)-(line 211,col 119)",
            "(line 212,col 9)-(line 212,col 119)",
            "(line 213,col 9)-(line 213,col 70)",
            "(line 214,col 9)-(line 214,col 69)",
            "(line 215,col 9)-(line 215,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testDegeneracy()",
        "snippet": "    @Test\n    public void testDegeneracy() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.7 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 18.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 10.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 8.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(13.6, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 218,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 95)",
            "(line 221,col 9)-(line 221,col 85)",
            "(line 222,col 9)-(line 222,col 93)",
            "(line 223,col 9)-(line 223,col 93)",
            "(line 224,col 9)-(line 224,col 92)",
            "(line 226,col 9)-(line 226,col 51)",
            "(line 227,col 9)-(line 227,col 91)",
            "(line 228,col 9)-(line 228,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath288()",
        "snippet": "    @Test\n    public void testMath288() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(10.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 231,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 97)",
            "(line 234,col 9)-(line 234,col 85)",
            "(line 235,col 9)-(line 235,col 99)",
            "(line 236,col 9)-(line 236,col 99)",
            "(line 237,col 9)-(line 237,col 99)",
            "(line 238,col 9)-(line 238,col 98)",
            "(line 239,col 9)-(line 239,col 98)",
            "(line 241,col 9)-(line 241,col 51)",
            "(line 242,col 9)-(line 242,col 91)",
            "(line 243,col 9)-(line 243,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath290GEQ()",
        "snippet": "    @Test\n    public void testMath290GEQ() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(0, solution.getValue(), .0000001);\n        Assert.assertEquals(0, solution.getPoint()[0], .0000001);\n        Assert.assertEquals(0, solution.getPoint()[1], .0000001);\n    }\n",
        "begin_line": 246,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 91)",
            "(line 249,col 9)-(line 249,col 85)",
            "(line 250,col 9)-(line 250,col 93)",
            "(line 251,col 9)-(line 251,col 51)",
            "(line 252,col 9)-(line 252,col 91)",
            "(line 253,col 9)-(line 253,col 62)",
            "(line 254,col 9)-(line 254,col 65)",
            "(line 255,col 9)-(line 255,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath290LEQ()",
        "snippet": "    @Test(expected=NoFeasibleSolutionException.class)\n    public void testMath290LEQ() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.LEQ, -1.0));\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n    }\n",
        "begin_line": 258,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 91)",
            "(line 261,col 9)-(line 261,col 85)",
            "(line 262,col 9)-(line 262,col 93)",
            "(line 263,col 9)-(line 263,col 51)",
            "(line 264,col 9)-(line 264,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath293()",
        "snippet": "    @Test\n    public void testMath293() {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, 10.0));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, 10.0));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, 10.0));\n\n      SimplexSolver solver = new SimplexSolver();\n      PointValuePair solution1 = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n\n      Assert.assertEquals(15.7143, solution1.getPoint()[0], .0001);\n      Assert.assertEquals(0.0, solution1.getPoint()[1], .0001);\n      Assert.assertEquals(14.2857, solution1.getPoint()[2], .0001);\n      Assert.assertEquals(0.0, solution1.getPoint()[3], .0001);\n      Assert.assertEquals(0.0, solution1.getPoint()[4], .0001);\n      Assert.assertEquals(30.0, solution1.getPoint()[5], .0001);\n      Assert.assertEquals(40.57143, solution1.getValue(), .0001);\n\n      double valA = 0.8 * solution1.getPoint()[0] + 0.2 * solution1.getPoint()[1];\n      double valB = 0.7 * solution1.getPoint()[2] + 0.3 * solution1.getPoint()[3];\n      double valC = 0.4 * solution1.getPoint()[4] + 0.6 * solution1.getPoint()[5];\n\n      f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );\n      constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, valA));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, valB));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, valC));\n\n      PointValuePair solution2 = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n      Assert.assertEquals(40.57143, solution2.getValue(), .0001);\n    }\n",
        "begin_line": 267,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 269,col 7)-(line 269,col 112)",
            "(line 270,col 7)-(line 270,col 83)",
            "(line 271,col 7)-(line 271,col 102)",
            "(line 272,col 7)-(line 272,col 102)",
            "(line 273,col 7)-(line 273,col 115)",
            "(line 274,col 7)-(line 274,col 115)",
            "(line 275,col 7)-(line 275,col 115)",
            "(line 277,col 7)-(line 277,col 49)",
            "(line 278,col 7)-(line 278,col 90)",
            "(line 280,col 7)-(line 280,col 67)",
            "(line 281,col 7)-(line 281,col 63)",
            "(line 282,col 7)-(line 282,col 67)",
            "(line 283,col 7)-(line 283,col 63)",
            "(line 284,col 7)-(line 284,col 63)",
            "(line 285,col 7)-(line 285,col 64)",
            "(line 286,col 7)-(line 286,col 65)",
            "(line 288,col 7)-(line 288,col 82)",
            "(line 289,col 7)-(line 289,col 82)",
            "(line 290,col 7)-(line 290,col 82)",
            "(line 292,col 7)-(line 292,col 88)",
            "(line 293,col 7)-(line 293,col 54)",
            "(line 294,col 7)-(line 294,col 102)",
            "(line 295,col 7)-(line 295,col 102)",
            "(line 296,col 7)-(line 296,col 115)",
            "(line 297,col 7)-(line 297,col 115)",
            "(line 298,col 7)-(line 298,col 115)",
            "(line 300,col 7)-(line 300,col 90)",
            "(line 301,col 7)-(line 301,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testSimplexSolver()",
        "snippet": "    @Test\n    public void testSimplexSolver() {\n        LinearObjectiveFunction f =\n            new LinearObjectiveFunction(new double[] { 15, 10 }, 7);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 4));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(57.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 304,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 307,col 68)",
            "(line 308,col 9)-(line 308,col 85)",
            "(line 309,col 9)-(line 309,col 90)",
            "(line 310,col 9)-(line 310,col 90)",
            "(line 311,col 9)-(line 311,col 89)",
            "(line 313,col 9)-(line 313,col 51)",
            "(line 314,col 9)-(line 314,col 92)",
            "(line 315,col 9)-(line 315,col 62)",
            "(line 316,col 9)-(line 316,col 62)",
            "(line 317,col 9)-(line 317,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint()",
        "snippet": "    @Test\n    public void testSingleVariableAndConstraint() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(10.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(30.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 320,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 87)",
            "(line 323,col 9)-(line 323,col 85)",
            "(line 324,col 9)-(line 324,col 88)",
            "(line 326,col 9)-(line 326,col 51)",
            "(line 327,col 9)-(line 327,col 92)",
            "(line 328,col 9)-(line 328,col 63)",
            "(line 329,col 9)-(line 329,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testModelWithNoArtificialVars()",
        "snippet": "    @Test\n    public void testModelWithNoArtificialVars() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(50.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 336,
        "end_line": 349,
        "comment": "\n     * With no artificial variables needed (no equals and no greater than\n     * constraints) we can go straight to Phase 2.\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 92)",
            "(line 339,col 9)-(line 339,col 85)",
            "(line 340,col 9)-(line 340,col 90)",
            "(line 341,col 9)-(line 341,col 90)",
            "(line 342,col 9)-(line 342,col 90)",
            "(line 344,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 345,col 92)",
            "(line 346,col 9)-(line 346,col 62)",
            "(line 347,col 9)-(line 347,col 62)",
            "(line 348,col 9)-(line 348,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMinimization()",
        "snippet": "    @Test\n    public void testMinimization() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 6));\n        constraints.add(new LinearConstraint(new double[] { 3, 2 }, Relationship.LEQ, 12));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n        Assert.assertEquals(4.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(0.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(-13.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 351,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 92)",
            "(line 354,col 9)-(line 354,col 85)",
            "(line 355,col 9)-(line 355,col 90)",
            "(line 356,col 9)-(line 356,col 91)",
            "(line 357,col 9)-(line 357,col 90)",
            "(line 359,col 9)-(line 359,col 51)",
            "(line 360,col 9)-(line 360,col 92)",
            "(line 361,col 9)-(line 361,col 62)",
            "(line 362,col 9)-(line 362,col 62)",
            "(line 363,col 9)-(line 363,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable()",
        "snippet": "    @Test\n    public void testSolutionWithNegativeDecisionVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.GEQ, 6));\n        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 14));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(-2.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(8.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(12.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 366,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 91)",
            "(line 369,col 9)-(line 369,col 85)",
            "(line 370,col 9)-(line 370,col 90)",
            "(line 371,col 9)-(line 371,col 91)",
            "(line 373,col 9)-(line 373,col 51)",
            "(line 374,col 9)-(line 374,col 92)",
            "(line 375,col 9)-(line 375,col 63)",
            "(line 376,col 9)-(line 376,col 62)",
            "(line 377,col 9)-(line 377,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testInfeasibleSolution()",
        "snippet": "    @Test(expected = NoFeasibleSolutionException.class)\n    public void testInfeasibleSolution() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));\n\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n    }\n",
        "begin_line": 380,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 88)",
            "(line 383,col 9)-(line 383,col 85)",
            "(line 384,col 9)-(line 384,col 87)",
            "(line 385,col 9)-(line 385,col 87)",
            "(line 387,col 9)-(line 387,col 51)",
            "(line 388,col 9)-(line 388,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testUnboundedSolution()",
        "snippet": "    @Test(expected = UnboundedSolutionException.class)\n    public void testUnboundedSolution() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));\n\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n    }\n",
        "begin_line": 391,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 92)",
            "(line 394,col 9)-(line 394,col 85)",
            "(line 395,col 9)-(line 395,col 89)",
            "(line 397,col 9)-(line 397,col 51)",
            "(line 398,col 9)-(line 398,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testRestrictVariablesToNonNegative()",
        "snippet": "    @Test\n    public void testRestrictVariablesToNonNegative() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));\n        constraints.add(new LinearConstraint(new double[] {    12,   45,   7,  56,   23 }, Relationship.LEQ,    56454));\n        constraints.add(new LinearConstraint(new double[] {     8,  768,   0,  34, 7456 }, Relationship.LEQ,  1923421));\n        constraints.add(new LinearConstraint(new double[] { 12342, 2342,  34, 678, 2342 }, Relationship.GEQ,     4356));\n        constraints.add(new LinearConstraint(new double[] {    45,  678,  76,  52,   23 }, Relationship.EQ,    456356));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);\n        Assert.assertEquals(480.419243986254, solution.getPoint()[1], .0000001);\n        Assert.assertEquals(0.0, solution.getPoint()[2], .0000001);\n        Assert.assertEquals(0.0, solution.getPoint()[3], .0000001);\n        Assert.assertEquals(0.0, solution.getPoint()[4], .0000001);\n        Assert.assertEquals(1438556.7491409, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 401,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 108)",
            "(line 404,col 9)-(line 404,col 85)",
            "(line 405,col 9)-(line 405,col 120)",
            "(line 406,col 9)-(line 406,col 120)",
            "(line 407,col 9)-(line 407,col 120)",
            "(line 408,col 9)-(line 408,col 120)",
            "(line 409,col 9)-(line 409,col 120)",
            "(line 411,col 9)-(line 411,col 51)",
            "(line 412,col 9)-(line 412,col 91)",
            "(line 413,col 9)-(line 413,col 80)",
            "(line 414,col 9)-(line 414,col 80)",
            "(line 415,col 9)-(line 415,col 67)",
            "(line 416,col 9)-(line 416,col 67)",
            "(line 417,col 9)-(line 417,col 67)",
            "(line 418,col 9)-(line 418,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testEpsilon()",
        "snippet": "    @Test\n    public void testEpsilon() {\n      LinearObjectiveFunction f =\n          new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));\n      constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));\n      constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));\n\n      SimplexSolver solver = new SimplexSolver();\n      PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n      Assert.assertEquals(1.0, solution.getPoint()[0], 0.0);\n      Assert.assertEquals(1.0, solution.getPoint()[1], 0.0);\n      Assert.assertEquals(0.0, solution.getPoint()[2], 0.0);\n      Assert.assertEquals(15.0, solution.getValue(), 0.0);\n  }\n",
        "begin_line": 421,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 423,col 7)-(line 424,col 68)",
            "(line 425,col 7)-(line 425,col 83)",
            "(line 426,col 7)-(line 426,col 93)",
            "(line 427,col 7)-(line 427,col 93)",
            "(line 428,col 7)-(line 428,col 93)",
            "(line 430,col 7)-(line 430,col 49)",
            "(line 431,col 7)-(line 431,col 90)",
            "(line 432,col 7)-(line 432,col 60)",
            "(line 433,col 7)-(line 433,col 60)",
            "(line 434,col 7)-(line 434,col 60)",
            "(line 435,col 7)-(line 435,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testTrivialModel()",
        "snippet": "    @Test\n    public void testTrivialModel() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ,  0));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 438,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 440,col 9)-(line 440,col 90)",
            "(line 441,col 9)-(line 441,col 85)",
            "(line 442,col 9)-(line 442,col 90)",
            "(line 444,col 9)-(line 444,col 51)",
            "(line 445,col 9)-(line 445,col 91)",
            "(line 446,col 9)-(line 446,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testLargeModel()",
        "snippet": "    @Test\n    public void testLargeModel() {\n        double[] objective = new double[] {\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           12, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 12, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 12, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 12, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1};\n\n        LinearObjectiveFunction f = new LinearObjectiveFunction(objective, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(equationFromString(objective.length, \"x0 + x1 + x2 + x3 - x12 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x0 + x1 + x2 + x3 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x14 + x15 + x16 + x17 - x26 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x14 + x15 + x16 + x17 - x12 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x28 + x29 + x30 + x31 - x40 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x28 + x29 + x30 + x31 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x42 + x43 + x44 + x45 - x54 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x42 + x43 + x44 + x45 - x40 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x56 + x57 + x58 + x59 - x68 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 >= 51\"));\n        constraints.add(equationFromString(objective.length, \"x56 + x57 + x58 + x59 >= 44\"));\n        constraints.add(equationFromString(objective.length, \"x70 + x71 + x72 + x73 - x82 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x70 + x71 + x72 + x73 - x68 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x84 + x85 + x86 + x87 - x96 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 >= 51\"));\n        constraints.add(equationFromString(objective.length, \"x84 + x85 + x86 + x87 >= 44\"));\n        constraints.add(equationFromString(objective.length, \"x98 + x99 + x100 + x101 - x110 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x98 + x99 + x100 + x101 - x96 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x112 + x113 + x114 + x115 - x124 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x112 + x113 + x114 + x115 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x126 + x127 + x128 + x129 - x138 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x126 + x127 + x128 + x129 - x124 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x140 + x141 + x142 + x143 - x152 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 >= 59\"));\n        constraints.add(equationFromString(objective.length, \"x140 + x141 + x142 + x143 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x154 + x155 + x156 + x157 - x166 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x154 + x155 + x156 + x157 - x152 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x83 + x82 - x168 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x111 + x110 - x169 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x170 - x182 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x171 - x183 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x172 - x184 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x173 - x185 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x174 - x186 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x175 + x176 - x187 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x177 - x188 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x178 - x189 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x179 - x190 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x180 - x191 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x181 - x192 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x170 - x26 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x171 - x27 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x172 - x54 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x173 - x55 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x174 - x168 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x177 - x169 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x178 - x138 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x179 - x139 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x180 - x166 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x181 - x167 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x193 - x205 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x194 - x206 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x195 - x207 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x196 - x208 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x197 - x209 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x198 + x199 - x210 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x200 - x211 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x201 - x212 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x202 - x213 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x203 - x214 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x204 - x215 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x193 - x182 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x194 - x183 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x195 - x184 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x196 - x185 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x197 - x186 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x198 + x199 - x187 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x200 - x188 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x201 - x189 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x202 - x190 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x203 - x191 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x204 - x192 = 0\"));\n\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(7518.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 449,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 451,col 9)-(line 473,col 61)",
            "(line 475,col 9)-(line 475,col 78)",
            "(line 476,col 9)-(line 476,col 85)",
            "(line 477,col 9)-(line 477,col 93)",
            "(line 478,col 9)-(line 478,col 115)",
            "(line 479,col 9)-(line 479,col 111)",
            "(line 480,col 9)-(line 480,col 89)",
            "(line 481,col 9)-(line 481,col 97)",
            "(line 482,col 9)-(line 482,col 121)",
            "(line 483,col 9)-(line 483,col 97)",
            "(line 484,col 9)-(line 484,col 121)",
            "(line 485,col 9)-(line 485,col 97)",
            "(line 486,col 9)-(line 486,col 121)",
            "(line 487,col 9)-(line 487,col 117)",
            "(line 488,col 9)-(line 488,col 93)",
            "(line 489,col 9)-(line 489,col 97)",
            "(line 490,col 9)-(line 490,col 121)",
            "(line 491,col 9)-(line 491,col 97)",
            "(line 492,col 9)-(line 492,col 121)",
            "(line 493,col 9)-(line 493,col 97)",
            "(line 494,col 9)-(line 494,col 121)",
            "(line 495,col 9)-(line 495,col 117)",
            "(line 496,col 9)-(line 496,col 93)",
            "(line 497,col 9)-(line 497,col 97)",
            "(line 498,col 9)-(line 498,col 121)",
            "(line 499,col 9)-(line 499,col 97)",
            "(line 500,col 9)-(line 500,col 121)",
            "(line 501,col 9)-(line 501,col 97)",
            "(line 502,col 9)-(line 502,col 121)",
            "(line 503,col 9)-(line 503,col 117)",
            "(line 504,col 9)-(line 504,col 93)",
            "(line 505,col 9)-(line 505,col 100)",
            "(line 506,col 9)-(line 506,col 130)",
            "(line 507,col 9)-(line 507,col 99)",
            "(line 508,col 9)-(line 508,col 129)",
            "(line 509,col 9)-(line 509,col 102)",
            "(line 510,col 9)-(line 510,col 130)",
            "(line 511,col 9)-(line 511,col 125)",
            "(line 512,col 9)-(line 512,col 97)",
            "(line 513,col 9)-(line 513,col 102)",
            "(line 514,col 9)-(line 514,col 130)",
            "(line 515,col 9)-(line 515,col 102)",
            "(line 516,col 9)-(line 516,col 130)",
            "(line 517,col 9)-(line 517,col 102)",
            "(line 518,col 9)-(line 518,col 130)",
            "(line 519,col 9)-(line 519,col 125)",
            "(line 520,col 9)-(line 520,col 97)",
            "(line 521,col 9)-(line 521,col 102)",
            "(line 522,col 9)-(line 522,col 130)",
            "(line 523,col 9)-(line 523,col 102)",
            "(line 524,col 9)-(line 524,col 130)",
            "(line 525,col 9)-(line 525,col 86)",
            "(line 526,col 9)-(line 526,col 88)",
            "(line 527,col 9)-(line 527,col 81)",
            "(line 528,col 9)-(line 528,col 81)",
            "(line 529,col 9)-(line 529,col 81)",
            "(line 530,col 9)-(line 530,col 81)",
            "(line 531,col 9)-(line 531,col 81)",
            "(line 532,col 9)-(line 532,col 88)",
            "(line 533,col 9)-(line 533,col 81)",
            "(line 534,col 9)-(line 534,col 81)",
            "(line 535,col 9)-(line 535,col 81)",
            "(line 536,col 9)-(line 536,col 81)",
            "(line 537,col 9)-(line 537,col 81)",
            "(line 538,col 9)-(line 538,col 80)",
            "(line 539,col 9)-(line 539,col 80)",
            "(line 540,col 9)-(line 540,col 80)",
            "(line 541,col 9)-(line 541,col 80)",
            "(line 542,col 9)-(line 542,col 81)",
            "(line 543,col 9)-(line 543,col 81)",
            "(line 544,col 9)-(line 544,col 81)",
            "(line 545,col 9)-(line 545,col 81)",
            "(line 546,col 9)-(line 546,col 81)",
            "(line 547,col 9)-(line 547,col 81)",
            "(line 548,col 9)-(line 548,col 81)",
            "(line 549,col 9)-(line 549,col 81)",
            "(line 550,col 9)-(line 550,col 81)",
            "(line 551,col 9)-(line 551,col 81)",
            "(line 552,col 9)-(line 552,col 81)",
            "(line 553,col 9)-(line 553,col 88)",
            "(line 554,col 9)-(line 554,col 81)",
            "(line 555,col 9)-(line 555,col 81)",
            "(line 556,col 9)-(line 556,col 81)",
            "(line 557,col 9)-(line 557,col 81)",
            "(line 558,col 9)-(line 558,col 81)",
            "(line 559,col 9)-(line 559,col 81)",
            "(line 560,col 9)-(line 560,col 81)",
            "(line 561,col 9)-(line 561,col 81)",
            "(line 562,col 9)-(line 562,col 81)",
            "(line 563,col 9)-(line 563,col 81)",
            "(line 564,col 9)-(line 564,col 88)",
            "(line 565,col 9)-(line 565,col 81)",
            "(line 566,col 9)-(line 566,col 81)",
            "(line 567,col 9)-(line 567,col 81)",
            "(line 568,col 9)-(line 568,col 81)",
            "(line 569,col 9)-(line 569,col 81)",
            "(line 571,col 9)-(line 571,col 51)",
            "(line 572,col 9)-(line 572,col 91)",
            "(line 573,col 9)-(line 573,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.equationFromString(int, java.lang.String)",
        "snippet": "    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        double[] lhs = new double[numCoefficients];\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs[index] = value;\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n",
        "begin_line": 580,
        "end_line": 604,
        "comment": "\n     * Converts a test string to a {@link LinearConstraint}.\n     * Ex: x0 + x1 + x2 + x3 - x12 = 0\n     ",
        "child_ranges": [
            "(line 581,col 9)-(line 581,col 34)",
            "(line 582,col 9)-(line 590,col 9)",
            "(line 592,col 9)-(line 592,col 52)",
            "(line 593,col 9)-(line 593,col 65)",
            "(line 595,col 9)-(line 595,col 51)",
            "(line 596,col 9)-(line 596,col 61)",
            "(line 597,col 9)-(line 597,col 48)",
            "(line 598,col 9)-(line 602,col 9)",
            "(line 603,col 9)-(line 603,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.validSolution(org.apache.commons.math3.optimization.PointValuePair, java.util.List<org.apache.commons.math3.optimization.linear.LinearConstraint>, double)",
        "snippet": "    private static boolean validSolution(PointValuePair solution, List<LinearConstraint> constraints, double epsilon) {\n        double[] vals = solution.getPoint();\n        for (LinearConstraint c : constraints) {\n            double[] coeffs = c.getCoefficients().toArray();\n            double result = 0.0d;\n            for (int i = 0; i < vals.length; i++) {\n                result += vals[i] * coeffs[i];\n            }\n            \n            switch (c.getRelationship()) {\n            case EQ:\n                if (!Precision.equals(result, c.getValue(), epsilon)) {\n                    return false;\n                }\n                break;\n                \n            case GEQ:\n                if (Precision.compareTo(result, c.getValue(), epsilon) < 0) {\n                    return false;\n                }\n                break;\n                \n            case LEQ:\n                if (Precision.compareTo(result, c.getValue(), epsilon) > 0) {\n                    return false;\n                }\n                break;\n            }\n        }\n        \n        return true;\n    }\n",
        "begin_line": 606,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 44)",
            "(line 608,col 9)-(line 634,col 9)",
            "(line 636,col 9)-(line 636,col 20)"
        ]
    }
]